'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Pipeline = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _events = require('events');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

RegExp.prototype.toJSON = function () {
    return {
        type: 'RegExp',
        source: this.source,
        flags: [this.global ? 'g' : '', this.multiline ? 'm' : '', this.ignoreCase ? 'i' : ''].join('')
    };
};

Buffer.prototype.toJSON = function () {
    return {
        type: 'Buffer',
        data: this.toString('hex')
    };
};

function parseExJSON(json) {
    function convert(data) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.entries(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = _slicedToArray(_step.value, 2),
                    k = _step$value[0],
                    v = _step$value[1];

                if (v && v.type === 'RegExp') {
                    data[k] = new RegExp(v.source, v.flags);
                } else if (v && v.type === 'Buffer') {
                    data[k] = new Buffer(v.data, 'hex');
                } else if (v === null) {
                    data[k] = v;
                } else if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object') {
                    convert(v);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return data;
    }
    return convert(JSON.parse(json));
}

var gunzip = (0, _utils.thenifyNode)(_zlib2.default.gunzip);
var gzip = (0, _utils.thenifyNode)(_zlib2.default.gzip);

function setupSIGINT(log) {
    var shuttingDown = false;

    process.on('SIGINT', function () {
        if (shuttingDown) {
            log.log('info', 'process', 'Force exiting ...');
            log.log('debug', 'process', process._getActiveHandles());
            return process.exit();
        } else {
            shuttingDown = true;
            log.log('info', 'process', 'Shutting down gracefully ...');
            Promise.all(Pipeline.instances.map(function (pipeline) {
                return pipeline.cleanup();
            })).then(function () {
                log.log('info', 'process', 'Bye');
                //return process.exit();
            });
        }
    });
}

var Pipeline = exports.Pipeline = function (_EventEmitter) {
    _inherits(Pipeline, _EventEmitter);

    function Pipeline(logger, cfg) {
        _classCallCheck(this, Pipeline);

        var _this = _possibleConstructorReturn(this, (Pipeline.__proto__ || Object.getPrototypeOf(Pipeline)).call(this));

        _this.logger = logger;
        _this.cfg = cfg;
        _this.pipes = {};
        if (!_this.constructor.sigintInstalled) {
            setupSIGINT(_this.logger);
            _this.constructor.sigintInstalled = true;
        }
        _this.init();
        return _this;
    }

    _createClass(Pipeline, [{
        key: 'init',
        value: async function init() {
            try {
                await (0, _utils.mkdirp)('.bungle');
            } catch (err) {
                if (err.errno !== -17) {
                    throw err;
                }
            }
            try {
                this.state = await this.loadState();
                await this.createPipes();
                await this.orderedPipes.reduce(function (p, i) {
                    return p.then(function () {
                        return i.start();
                    });
                }, Promise.resolve());

                var active = process._getActiveHandles().length > 2;
                if (active) {
                    this.constructor.instances.push(this);
                    this.log('info', 'Startup complete');
                } else {
                    await this.cleanup();
                    this.log('info', 'All done');
                }
            } catch (e) {
                this.log('error', 'Pipeline constructor error ' + e + ' ' + e.stack);
                process.exit(1);
            }
        }
    }, {
        key: 'loadState',
        value: function loadState() {
            var _this2 = this;

            var filename = _path2.default.join('.bungle', 'state.' + this.cfg.config.hash);
            if (this.cfg.config.bungle.reset) {
                this.log('verbose', 'Discarding previous state');
                return (0, _utils.unlink)(filename).catch(function () {
                    return null;
                }).then(function () {
                    return {
                        hash: _this2.cfg.config.hash
                    };
                });
            } else {
                return (0, _utils.readFile)(filename).then(function (compressed) {
                    return gunzip(compressed);
                }).then(function (data) {
                    return parseExJSON(data);
                }).catch(function () {
                    _this2.log('verbose', 'Starting with a fresh state');
                    return {
                        hash: _this2.cfg.config.hash
                    };
                });
            }
        }
    }, {
        key: 'createPipes',
        value: async function createPipes() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.entries(this.cfg.config.pipes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _step2$value = _slicedToArray(_step2.value, 2),
                        id = _step2$value[0],
                        pipeconfig = _step2$value[1];

                    var pipestate = this.state[id] || (this.state[id] = {});
                    var PipeClass = this.cfg.pipes[pipeconfig.type];
                    this.pipes[id] = new PipeClass(pipeconfig, pipestate, this);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var res = await Promise.all(Object.values(this.pipes).map(function (p) {
                return p.init();
            }));

            if (res.some(function (r) {
                return r !== 'pipe::init';
            })) {
                this.log('error', 'A pipe did not properly return super.init()');
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.entries(this.cfg.config.pipes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _step3$value = _slicedToArray(_step3.value, 2),
                        id = _step3$value[0],
                        pipeconfig = _step3$value[1];

                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = pipeconfig.inputs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var input = _step4.value;

                            this.pipes[input].outputs.push(this.pipes[id]);
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var unsorted = Object.values(this.pipes);
            var sorted = [];

            var _loop = function _loop() {
                var add = unsorted.filter(function (u) {
                    return u.outputs.every(function (o) {
                        return ~sorted.indexOf(o);
                    });
                });
                sorted = sorted.concat(add);
                unsorted = unsorted.filter(function (u) {
                    return !~add.indexOf(u);
                });
            };

            while (unsorted.length) {
                _loop();
            }
            this.orderedPipes = sorted.reverse();
            return this.orderedPipes;
        }
    }, {
        key: 'cleanup',
        value: async function cleanup() {
            this.log('info', 'Saving state');

            var res = await Promise.all(Object.values(this.pipes).map(function (pipe) {
                return pipe.stop();
            }));
            if (res.some(function (r) {
                return r !== 'pipe::stop';
            })) {
                this.log('error', 'A pipe did not properly return super.stop()');
            }

            var filename = _path2.default.join('.bungle', 'state.' + this.cfg.config.hash);
            var jsonz = await gzip(JSON.stringify(this.state));

            try {
                await (0, _utils.writeFile)(filename, jsonz);
            } catch (err) {
                this.log('error', 'Could not dump state cache ' + err);
            }
            this.log('info', 'Pipeline shutdown complete');
        }
    }, {
        key: 'broadcast',
        value: function broadcast(req) {
            return Promise.all(Object.values(this.pipes).map(function (p) {
                return p.broadcast(req);
            }));
        }
    }, {
        key: 'log',
        value: function log(level) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var applyargs = [level, 'pipeline'].concat(args);
            return this.logger.log.apply(this.logger, applyargs);
        }
    }]);

    return Pipeline;
}(_events.EventEmitter);

Pipeline.sigintInstalled = false;
Pipeline.instances = [];
