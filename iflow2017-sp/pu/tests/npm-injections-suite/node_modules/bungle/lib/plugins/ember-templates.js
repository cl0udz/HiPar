import { ModPipe } from '../pipe';
import { dedent } from '../utils';

export default class ExtPipe extends ModPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.hbs'
        });

        this.defaultState({
            compiler: null
        });
    }

    static schema() {
        return {
            description: 'Compile HTMLBars templates to Javascript modules'
        };
    }

    async start() {
        if (!this.state.compiler) {
            const pkgs = (await this.pipeline.broadcast({
                type: 'getVendorVanillaPackages',
                packages: {
                    'ember': ['ember-template-compiler.js']
                }
            })).filter(r => !!r)[0];

            this.state.compiler = pkgs.ember[0].toString('utf8');
            this.log('verbose', 'Got ember template compiler');
        }

        const compiler = new module.constructor();
        compiler.paths = module.paths;
        compiler._compile(this.state.compiler, 'ember-template-compiler.js');
        this.compiler = compiler.exports;
        return super.init();
    }

    rename(name) {
        return name.replace(/hbs$/, 'js');
    }

    async generate(file) {
        const source = await file.source.content();
        const code = this.compiler.precompile(source.toString(), false);
        const res = dedent`
            import Em from 'ember';
            export default Em.HTMLBars.template(${code});
        `;
        return res;
    }
}
