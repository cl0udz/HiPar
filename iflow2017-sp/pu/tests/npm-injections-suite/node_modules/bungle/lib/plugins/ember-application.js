import path from 'path';
import { InputNamesPipe } from '../pipe';
import { dedent } from '../utils';


const entities = [
    'adapters',
    'components',
    'controllers',
    'helpers',
    'initializers',
    'instance-initializers',
    'mixins',
    'models',
    'routers',
    'routes',
    'serializers',
    'services',
    'templates',
    'transforms',
    'views',
    'pods'
];

const valid = new RegExp(`^(${entities.join('|')})$`);


export default class ExtPipe extends InputNamesPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js'
        });

        this.dir = path.dirname(this.config.filename);
    }

    static schema() {
        return {
            description:
                'Detect Ember resources and create application module.',
            properties: {
                filename: {
                    description: 'Filename of the compiled module',
                    type: 'string'
                }
            },
            required: ['filename']
        };
    }

    sanitize(name) {
        return name.replace(/\.js$/, '');
    }

    capitalize(name) {
        return name.replace(
            /(^|-)([a-z])/g,
            ($0, $1, $2) => $2.toUpperCase()
        );
    }

    singularize(name) {
        return name.replace(/(.*)s/g, ($0, $1) => $1);
    }

    async generate(/*file*/) {
        if (this.config.debug) {
            this.log('debug', '#C# ' + this.config.filename);
        }

        const results = [ 'import Em from \'ember\'' ];
        const objects = [];
        const initializers = [];
        const iinitializers = [];

        const pathnames = Object.keys(this.state.remoteFiles)
            .sort()
            .map(name => this.sanitize(path.relative(this.dir, name)));

        for (const pathname of pathnames) {
            const parts = pathname.split('/');

            if (!valid.test(parts[0])) {
                continue;
            }

            let type, dashedname, camelcasename;
            if (parts[0] === 'pods') {
                const len = parts.length;
                const slast = parts[len - 2];
                if (~entities.indexOf(slast)) {
                    parts.splice(len - 2, 1);
                    type = this.singularize(this.capitalize(slast));
                } else {
                    type = this.capitalize(parts.pop());
                }
            } else {
                type = this.singularize(this.capitalize(parts[0]));
            }

            parts[1] = parts[1].replace(/^_/, '');
            dashedname = parts.slice(1).join('-');
            camelcasename = this.capitalize(dashedname);

            if (camelcasename === 'Main') {
                camelcasename = '';
            }
            const modname = `${camelcasename}${type}`;
            results.push(`import ${modname} from './${pathname}';`);
            if (type === 'Initializer') {
                initializers.push(`Em.Application.initializer(${modname});`);
            } else if (type === 'InstanceInitializer') {
                iinitializers
                    .push(`Em.Application.instanceInitializer(${modname});`);
            } else {
                objects.push('' + modname);
            }
        }
        results.push(initializers.join('\n'));
        results.push(iinitializers.join('\n'));
        results.push('var App = {');
        results.push(dedent `
            Resolver: Em.DefaultResolver.extend({
                resolveOther: function(parsedName) {
                    var factory = this._super(parsedName);
                    if (factory) {
                        return factory;
                    }
                    parsedName.name = parsedName.name.replace(
                        /\\.([a-z])/,
                        function(a,b) { return b.toUpperCase(); }
                    );
                    parsedName.name = parsedName.name.replace(
                        /^components\\//, ''
                    );
                    factory = this._super(parsedName);
                    if (factory) {
                        return factory;
                    }
                }
            }),
        `);
        results.push(Object.values(objects)
            .map(i => `    ${i}: ${i}`)
            .join(',\n')
        );
        results.push('};');
        results.push('export default App;');
        return results.join('\n');
    }
}
