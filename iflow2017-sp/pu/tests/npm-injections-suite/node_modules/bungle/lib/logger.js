'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Logger = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _growl = require('growl');

var _growl2 = _interopRequireDefault(_growl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var levels = {
    debug: 0,
    verbose: 1000,
    info: 2000,
    warn: 3000,
    error: 4000
};

var formatedLevel = {
    debug: _chalk2.default.green('debug'),
    verbose: _chalk2.default.green('verbose'),
    info: _chalk2.default.green('info'),
    warn: _chalk2.default.red('warn'),
    error: _chalk2.default.bgRed.white('error')
};

var ansiRx = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;

var Logger = function () {
    function Logger(config) {
        _classCallCheck(this, Logger);

        this.level = {
            console: levels[config.console || 'info'],
            notify: levels[config.notify || 'info']
        };
    }

    _createClass(Logger, [{
        key: 'log',
        value: function log(level, prefix, message) {
            if (this.level.console <= levels[level]) {
                console.log( /*eslint no-console:0*/
                _chalk2.default.blue('bungle'), formatedLevel[level], _chalk2.default.yellow(prefix), message);
            }

            if (this.level.notify <= levels[level]) {
                (0, _growl2.default)(message.replace(ansiRx, ''), {
                    title: 'Bungle ' + level + ' ' + prefix
                });
            }
        }
    }]);

    return Logger;
}();

exports.Logger = Logger;
