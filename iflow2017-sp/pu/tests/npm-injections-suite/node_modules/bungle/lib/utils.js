'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unlink = exports.mkdirp = exports.writeFile = exports.readFile = exports.realpath = exports.stat = undefined;
exports.dedent = dedent;
exports.thenifyNode = thenifyNode;
exports.walkSync = walkSync;
exports.mergeArrays = mergeArrays;

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dedent(str) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    var matched = str[0].match(/\n +/);
    if (matched) {
        var len = matched[0].length;
        var r = new RegExp('^' + Array.from(Array(len)).join(' '), 'gm');
        str = str.map(function (s) {
            return s.replace(r, '').trim();
        });
    }
    return str.slice(0, args.length + 1).map(function (text, i) {
        return (i === 0 ? '' : args[i - 1]) + text;
    }).join('\n');
}

function thenifyNode(fn) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        return new Promise(function (resolve, reject) {
            args.push(function (err, arg) {
                return err ? reject(err) : resolve(arg);
            });

            fn.apply(this, args);
        });
    };
}

var stat = thenifyNode(_fs2.default.stat);
var realpath = thenifyNode(_fs2.default.realpath);
var readFile = thenifyNode(_fs2.default.readFile);
var writeFile = thenifyNode(_fs2.default.writeFile);
var mkdirp = thenifyNode(_mkdirp2.default);
var unlink = thenifyNode(_fs2.default.unlink);
exports.stat = stat;
exports.realpath = realpath;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.mkdirp = mkdirp;
exports.unlink = unlink;


function match(matchers, path) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = matchers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var matcher = _step.value;

            if (matcher.match(path)) {
                return true;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
}

function mayContain(matchers, value) {
    var parts = value.split(/\/|\\/g).filter(Boolean);

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = matchers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var matcher = _step2.value;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = matcher.set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var entry = _step3.value;

                    if (matcher.matchOne(parts, entry, true)) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return false;
}

function walkSync(baseDir, globs) {
    var baseRel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    var matchers = globs.map(function (glob) {
        return new _minimatch2.default.Minimatch(glob);
    });

    var results = [];
    if (!mayContain(matchers, baseRel)) {
        return [];
    }
    var entries = _fs2.default.readdirSync(baseDir + '/' + baseRel).sort();
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = entries[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var entry = _step4.value;

            var pathRel = '' + baseRel + (baseRel ? '/' : '') + entry;
            var pathAbs = baseDir + '/' + pathRel;
            var stats = _fs2.default.statSync(pathAbs);

            if ((stats.mode & 61440) === 16384) {
                results = results.concat(walkSync(baseDir, globs, pathRel));
            } else {
                if (match(matchers, pathRel)) {
                    results.push({
                        name: pathRel,
                        mode: stats.mode,
                        size: stats.size,
                        mtime: +stats.mtime
                    });
                }
            }
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    return results;
}

function mergeArrays(arrays) {
    var res = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = arrays[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var array = _step5.value;
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = array[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var entry = _step6.value;

                    if (!~res.indexOf(entry)) {
                        res.push(entry);
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    return res;
}
