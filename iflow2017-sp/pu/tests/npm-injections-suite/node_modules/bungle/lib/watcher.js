'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _inotify = require('../build/Release/inotify');

var _events = require('events');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Watcher = function (_EventEmitter) {
    _inherits(Watcher, _EventEmitter);

    function Watcher(base, _ref) {
        var globs = _ref.globs,
            entries = _ref.entries;

        _classCallCheck(this, Watcher);

        var _this = _possibleConstructorReturn(this, (Watcher.__proto__ || Object.getPrototypeOf(Watcher)).call(this));

        _this.base = base;
        _this.matchers = globs.map(function (glob) {
            return new _minimatch2.default.Minimatch(glob, { nonegate: true });
        });

        _this.notifier = new _inotify.Inotify();
        _this.entries = entries;
        return _this;
    }

    _createClass(Watcher, [{
        key: 'scan',
        value: function scan() {
            var entries = this.walk(this.base);
            var names = entries.map(function (entry) {
                return entry.name;
            });

            for (var name in this.entries) {
                var entry = this.entries[name];
                if (!entry.isdir && !~names.indexOf(name)) {
                    this.emit('unlink', entry);
                    delete this.entries[name];
                }
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _entry = _step.value;

                    if (!_entry.isdir) {
                        var prevEntry = this.entries[_entry.name];
                        if (!prevEntry) {
                            this.emit('add', _entry);
                            this.emit('change', _entry);
                        } else if (prevEntry.mtime !== _entry.mtime) {
                            this.emit('change', _entry);
                        }
                    }

                    this.watchEntry(_entry, this);
                    this.entries[_entry.name] = _entry;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: 'close',
        value: function close() {
            this.notifier.close();
        }
    }, {
        key: 'partialMatch',
        value: function partialMatch(value) {
            var parts = value.split(/\/|\\/g).filter(Boolean);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.matchers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var matcher = _step2.value;
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = matcher.set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var entry = _step3.value;

                            if (matcher.matchOne(parts, entry, true)) {
                                return true;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return false;
        }
    }, {
        key: 'match',
        value: function match(path) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.matchers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var matcher = _step4.value;

                    if (matcher.match(path)) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return false;
        }
    }, {
        key: 'makeEntry',
        value: function makeEntry(name, stats) {
            return {
                name: name,
                mode: stats.mode,
                size: stats.size,
                mtime: +stats.mtime,
                isdir: stats.isDirectory()
            };
        }
    }, {
        key: 'watchEntry',
        value: function watchEntry(entry) {
            var _this2 = this;

            if (entry.isdir) {
                entry.wd = this.notifier.add({
                    path: entry.name || '.',
                    callback: function callback(evt) {
                        if (evt.mask & (_inotify.Inotify.IN_CREATE | _inotify.Inotify.IN_MOVED_TO)) {
                            if (evt.mask & _inotify.Inotify.IN_ISDIR) {
                                _this2.addDir('' + entry.name + evt.name);
                            } else {
                                _this2.add('' + entry.name + evt.name);
                            }
                        }
                        if (evt.mask & (_inotify.Inotify.IN_DELETE | _inotify.Inotify.IN_MOVED_FROM)) {
                            if (evt.mask & _inotify.Inotify.IN_ISDIR) {
                                _this2.unlinkDir('' + entry.name + evt.name);
                            } else {
                                _this2.unlink('' + entry.name + evt.name);
                            }
                        }
                    }
                });
            } else {
                entry.wd = this.notifier.add({
                    path: entry.name,
                    callback: function callback(evt) {
                        if (evt.mask & _inotify.Inotify.IN_MODIFY) {
                            entry.dirty = true;
                        }
                        if (evt.mask & _inotify.Inotify.IN_CLOSE_WRITE && entry.dirty) {
                            entry.dirty = false;
                            _this2.change(entry.name);
                        }
                    }
                });
            }
        }
    }, {
        key: 'walk',
        value: function walk(baseDir) {
            var baseRel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            var results = [];
            if (!this.partialMatch(baseRel)) {
                return [];
            }

            if (!baseRel) {
                var stats = _fs2.default.statSync(baseDir);
                results.push(this.makeEntry('', stats));
            }

            var entries = _fs2.default.readdirSync(baseDir + '/' + baseRel).sort();
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = entries[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var entry = _step5.value;

                    var pathRel = '' + baseRel + entry;

                    if (!this.partialMatch(pathRel)) {
                        continue;
                    }

                    var _stats = _fs2.default.statSync(baseDir + '/' + pathRel);

                    if (_stats.isDirectory()) {
                        results.push(this.makeEntry(pathRel + '/', _stats));
                        results = results.concat(this.walk(baseDir, pathRel + '/'));
                    } else {
                        if (this.match(pathRel)) {
                            results.push(this.makeEntry(pathRel, _stats));
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return results;
        }
    }, {
        key: 'addDir',
        value: function addDir(name) {
            if (this.partialMatch(name)) {
                var stats = _fs2.default.statSync(name);
                var entry = this.makeEntry(name + '/', stats);
                this.watchEntry(entry);
                this.entries[name] = entry;
                var entries = this.walk(this.base, name + '/');
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = entries[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _entry2 = _step6.value;

                        this.watchEntry(_entry2);
                        this.entries[_entry2.name] = _entry2;
                        this.add(_entry2.name);
                        this.change(_entry2.name);
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            }
        }
    }, {
        key: 'unlinkDir',
        value: function unlinkDir(name) {
            var _this3 = this;

            if (this.partialMatch(name)) {
                delete this.entries[name];
                Object.keys(this.entries).filter(function (k) {
                    return k.startsWith(name);
                }).sort().forEach(function (k) {
                    var entry = _this3.entries[k];
                    try {
                        _this3.notifier.remove(entry.wd);
                    } catch (e) {
                        throw e;
                    }
                    if (entry.isdir) {
                        delete _this3.entries[k];
                    } else {
                        _this3.unlink(k);
                    }
                });
            }
        }
    }, {
        key: 'add',
        value: function add(name) {
            if (!this.match(name)) {
                return;
            }
            var stats = _fs2.default.statSync(name);
            var entry = this.makeEntry(name, stats);
            this.watchEntry(entry, this);
            this.entries[name] = entry;

            this.emit('add', this.entries[name]);
            this.emit('change', this.entries[name]);
        }
    }, {
        key: 'change',
        value: function change(name) {
            if (!this.match(name)) {
                return;
            }
            var stats = _fs2.default.statSync(name);
            var entry = this.entries[name];

            if (entry.mtime != +stats.mtime) {
                entry.mode = stats.mode;
                entry.size = stats.size;
                entry.mtime = +stats.mtime;

                this.emit('change', entry);
            }
        }
    }, {
        key: 'unlink',
        value: function unlink(name) {
            if (!this.match(name)) {
                return;
            }
            var entry = this.entries[name];
            delete this.entries[name];

            this.emit('unlink', entry);
        }
    }]);

    return Watcher;
}(_events.EventEmitter);

exports.default = Watcher;
