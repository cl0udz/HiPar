'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Builder = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _runner = require('./runner');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Builder = exports.Builder = function () {
    function Builder() {
        _classCallCheck(this, Builder);

        this.bungle = {};
        this.pipes = {};
        this.runner = new _runner.Runner();
    }

    _createClass(Builder, [{
        key: 'pipe',
        value: function pipe(type, meta) {
            var pipes = Object.values(this.pipes).filter(function (p) {
                return p.type === type;
            });
            var name = type + '-' + pipes.length;

            meta.name = name;
            meta.type = type;
            meta.inputs = [];
            this.pipes[name] = meta;

            return {
                meta: meta,
                to: function to(next) {
                    next.meta.inputs.push(this.meta.name);
                    return next;
                }
            };
        }
    }, {
        key: 'run',
        value: function run() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.values(this.pipes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var meta = _step.value;

                    delete meta.name;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return this.runner.run({
                bungle: this.bungle,
                pipes: this.pipes
            });
        }
    }]);

    return Builder;
}();
