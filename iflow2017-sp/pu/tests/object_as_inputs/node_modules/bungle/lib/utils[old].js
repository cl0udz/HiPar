import minimatch from 'minimatch';
import fs from 'fs';
import mkdirp_ from 'mkdirp';


export function dedent(str, ...args) {
    const matched = str[0].match(/\n +/);
    if (matched) {
        const len = matched[0].length;
        const r = new RegExp(`^${Array.from(Array(len)).join(' ')}`, 'gm');
        str = str.map(s => s.replace(r, '').trim());
    }
    return str
        .slice(0, args.length + 1)
        .map((text, i) => (i === 0 ? '' : args[i - 1]) + text)
        .join('\n');
}

export function thenifyNode(fn) {
    return function() {
        let args = Array.prototype.slice.call(arguments);
        return new Promise(function(resolve, reject) {
            args.push((err, arg) => {
                return err ? reject(err) : resolve(arg);
            });

            fn.apply(this, args);
        });
    };
}

const stat = thenifyNode(fs.stat);
const realpath = thenifyNode(fs.realpath);
const readFile = thenifyNode(fs.readFile);
const writeFile = thenifyNode(fs.writeFile);
const mkdirp = thenifyNode(mkdirp_);
const unlink = thenifyNode(fs.unlink);
export {stat, realpath, readFile, writeFile, mkdirp, unlink};

function match(matchers, path) {
    for (let matcher of matchers) {
        if (matcher.match(path)) {
            return true;
        }
    }
    return false;
}


function mayContain(matchers, value) {
    var parts = value.split(/\/|\\/g).filter(Boolean);

    for (let matcher of matchers) {
        for (let entry of matcher.set) {
            if (matcher.matchOne(parts, entry, true)) {
                return true;
            }
        }
    }
    return false;
}


export function walkSync(baseDir, globs, baseRel='') {
    const matchers = globs.map(glob => new minimatch.Minimatch(glob));

    let results = [];
    if (!mayContain(matchers, baseRel)) {
        return [];
    }
    const entries = fs.readdirSync(`${baseDir}/${baseRel}`).sort();
    for (let entry of entries) {
        const pathRel = `${baseRel}${baseRel?'/':''}${entry}`;
        const pathAbs = `${baseDir}/${pathRel}`;
        const stats = fs.statSync(pathAbs);

        if ((stats.mode & 61440) === 16384) {
            results = results.concat(walkSync(baseDir, globs, pathRel));
        } else {
            if (match(matchers, pathRel)) {
                results.push({
                    name: pathRel,
                    mode: stats.mode,
                    size: stats.size,
                    mtime: +stats.mtime
                });
            }
        }
    }
    return results;
}

export function mergeArrays(arrays) {
    let res = [];
    for (let array of arrays) {
        for (let entry of array) {
            if (!~res.indexOf(entry)) {
                res.push(entry);
            }
        }
    }
    return res;
}
