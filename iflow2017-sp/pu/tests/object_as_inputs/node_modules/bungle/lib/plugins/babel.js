import path from 'path';
import * as babel from 'babel-core';
import es2015 from 'babel-preset-es2015';
import stage1 from 'babel-preset-stage-1';
import amd from 'babel-plugin-transform-es2015-modules-amd';
import { ModPipe } from '../pipe';
import { readFile, writeFile } from '../utils';


export default class ExtPipe extends ModPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js',
            nostrict: '',
            sourceMaps: 'inline'
        });

        this.cachename = path.join('.bungle', 'babel.json');
    }

    static schema() {
        return {
            description: 'Transpile syntax >ES5 down to ES5.',
            properties: {
                nostrict: {
                    description: 'Do not use strict mode on matching files' +
                                 '(default: "")',
                    type: 'string'
                },
                sourceMaps: {
                    description: 'Generate source maps (default: true)',
                    type: 'boolean'
                }
            }
        };
    }

    async stop() {
        if (this.cache) {
            await writeFile(this.cachename, JSON.stringify(this.cache));
        }
        return super.stop();
    }

    async generate(file) {
        if (!this.cache) {
            try {
                const json = await readFile(this.cachename);
                this.cache = JSON.parse(json);
            } catch(err) {
                if (err.errno !== -2) {
                    this.log('info', `Could not load babel cache ${err}`);
                }
                this.cache = {};
            }
        }

        const cacheKey = `${file.mtime}/${file.name}`;

        if (this.cache[cacheKey]) {
            this.log('debug', `Using cached ${file.name}`);
        } else {
            this.log('debug', `Compiling ${file.name}`);
            const source = await file.source.content();
            const transpiled = babel.transform(source.toString(), {
                presets: [es2015, stage1],
                plugins: [amd],
                compact: true,
                filename: file.name,
                sourceMaps: this.config.sourceMaps ? 'inline' : false
            });
            if (new RegExp(this.config.nostrict).test(file.name)) {
                transpiled.code = transpiled.code.replace(
                    /.use strict.;Object/,
                    '             Object'
                );
            }
            this.cache[cacheKey] = transpiled.code;
        }
        return this.cache[cacheKey];
    }
}
