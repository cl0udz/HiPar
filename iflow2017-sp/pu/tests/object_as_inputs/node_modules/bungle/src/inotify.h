#ifndef INOTIFY_H_
#define INOTIFY_H_


#include <node.h>
#include <node_object_wrap.h>
#include <uv.h>

namespace inotify {


    class Inotify : public node::ObjectWrap {
        public:
            static void Init(v8::Local<v8::Object> exports);

        private:
            explicit Inotify();
            ~Inotify();
            int Shutdown();

            static v8::Persistent<v8::Function> constructor;
            static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
            static void Add(const v8::FunctionCallbackInfo<v8::Value>& args);
            static void Remove(const v8::FunctionCallbackInfo<v8::Value>& args);
            static void Close(const v8::FunctionCallbackInfo<v8::Value>& args);
            static void PollCb(uv_poll_t* watcher, int status, int revents);
            static void CloseCb(uv_handle_t* handle);

            int fd;
            uv_poll_t* poll_handle;
    };


} //namespace inotify


#endif // INOTIFY_H_
