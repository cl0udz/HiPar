{
  "name": "autolint",
  "version": "1.1.4",
  "main": "./lib/autolint",
  "description": "Autolint watches your files for jslint-errors.",
  "author": {
    "name": "Magnar Sveen",
    "email": "magnars@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/magnars/autolint.git"
  },
  "homepage": "https://github.com/magnars/autolint",
  "scripts": {
    "test": "buster test"
  },
  "engines": {
    "node": ">=0.8"
  },
  "bin": {
    "autolint": "./bin/autolint"
  },
  "dependencies": {
    "glob": "~3.0",
    "growl": "~1.7",
    "underscore": "~1.1",
    "when": "https://github.com/cujojs/when/tarball/1.0.2"
  },
  "devDependencies": {
    "buster": "~0.6",
    "buster-lint": "~0",
    "require-subvert": "0.0.1"
  },
  "keywords": [
    "JavaScript",
    "lint",
    "jslint",
    "jshint"
  ],
  "licenses": [
    {
      "type": "Modified MIT / BSD",
      "url": "https://github.com/magnars/autolint/blob/master/LICENSE"
    }
  ],
  "readme": "# Autolint\n\nAutolint watches your files for jslint-errors. DRY up your js-files, freeing\nthem of all those linting config comments. Gather all your linting preferences\nin one place per project.\n\n## Installation\n\nMake sure you've got [node.js](http://nodejs.org/) and [npm](http://npmjs.org/), then:\n\n    npm install autolint -g\n\n## Basic usage\n\nCreate a default configuration file by running:\n\n    autolint\n\nTweak the config to your liking, then start linting with:\n\n    autolint\n\nOnce running, you can see all errors in all files by pressing ctrl-c in\nthe terminal window. To see errors in a single file, update its mtime by\nsaving or touching it.\n\nYou can also skip the watching-part, and just lint the entire project once:\n\n    autolint --once\n\nIt terminates with a non-zero exit code if any lint is found, making it\nwell suited for pre-commit hooks if you are so inclined.\n\nIf you're confused by the linting error messages, check out [jslinterrors.com](http://jslinterrors.com/).\n\nThere's also an\n[autolint maven plugin](https://github.com/magnars/autolint-maven-plugin)\nthat's handy for continuous integration.\n\n## Configuration\n\nLook at the default configuration\n[`lib/default-configuration.js`](autolint/blob/master/lib/default-configuration.js)\nthen override specific items in `autolint.js`. `autolint` always looks for this\nfile in the current directory.\n\nExample:\n\n    module.exports = {\n      paths: [\n        \"lib/**/*.js\",\n        \"test/**/*.js\"\n      ],\n      linterOptions: {\n        node: true\n      }\n    };\n\n### Excluding files\n\nYou can also tell autolint to skip linting some files, like so:\n\n    module.exports = {\n      excludes: [\n        \"jquery\",\n        \"underscore\",\n        \"sinon\",\n        \"raphael\"\n      ]\n    };\n\nAny files (or paths) containing those words will not be linted, or counted\ntowards your error total.\n\n## Growl\n\nIf you want autolint to notify you when new lint errors are introduced,\nyou can [download Growl here](http://growl.info/).\n\n## Using JSHint\n\nIf JSLint is hurting your feelings, you can easily switch to\n[JSHint](http://jshint.com) by adding this to your configuration:\n\n    module.exports = {\n      \"linter\": \"jshint\"\n    };\n\n## Linter options\n\nThe defaults are very strict, so tweak them to your liking.\n\nFor jslint:\n\n    module.exports = {\n      linterOptions: {\n        indent      : 4,     // the indentation factor\n        maxlen      : 80,    // the maximum length of a source line\n        maxerr      : 50,    // the maximum number of errors to report per file\n        anon        : false, // true, if the space may be omitted in anonymous function declarations\n        bitwise     : false, // true, if bitwise operators should be allowed\n        browser     : false, // true, if the standard browser globals should be predefined\n        cap         : false, // true, if upper case HTML should be allowed\n        \"continue\"  : false, // true, if the continuation statement should be tolerated\n        css         : false, // true, if CSS workarounds should be tolerated\n        debug       : false, // true, if debugger statements should be allowed\n        devel       : false, // true, if logging should be allowed (console, alert, etc.)\n        eqeq        : false, // true, if == should be allowed\n        es5         : false, // true, if ES5 syntax should be allowed\n        evil        : false, // true, if eval should be allowed\n        forin       : false, // true, if for in statements need not filter\n        fragment    : false, // true, if HTML fragments should be allowed\n        newcap      : false, // true, if constructor names capitalization is ignored\n        node        : false, // true, if Node.js globals should be predefined\n        nomen       : false, // true, if names may have dangling _\n        on          : false, // true, if HTML event handlers should be allowed\n        passfail    : false, // true, if the scan should stop on first error\n        plusplus    : false, // true, if increment/decrement should be allowed\n        properties  : false, // true, if all property names must be declared with /*properties*/\n        regexp      : false, // true, if the . should be allowed in regexp literals\n        rhino       : false, // true, if the Rhino environment globals should be predefined\n        undef       : false, // true, if variables can be declared out of order\n        unparam     : false, // true, if unused parameters should be tolerated\n        sloppy      : false, // true, if the 'use strict'; pragma is optional\n        sub         : false, // true, if all forms of subscript notation are tolerated\n        vars        : false, // true, if multiple var statements per function should be allowed\n        white       : false, // true, if sloppy whitespace is tolerated\n        widget      : false, // true  if the Yahoo Widgets globals should be predefined\n        windows     : false  // true, if MS Windows-specific globals should be predefined\n      }\n    };\n\nFor jshint:\n\n    module.exports = {\n      linterOptions: {\n        asi         : true,  // true, if automatic semicolon insertion should be tolerated\n        bitwise     : true,  // true, if bitwise operators should not be allowed\n        boss        : true,  // true, if advanced usage of assignments should be allowed\n        browser     : true,  // true, if the standard browser globals should be predefined\n        couch       : true,  // true, if CouchDB globals should be predefined\n        curly       : true,  // true, if curly braces around all blocks should be required\n        debug       : true,  // true, if debugger statements should be allowed\n        devel       : true,  // true, if logging globals should be predefined (console, alert, etc.)\n        dojo        : true,  // true, if Dojo Toolkit globals should be predefined\n        eqeqeq      : true,  // true, if === should be required\n        eqnull      : true,  // true, if == null comparisons should be tolerated\n        es5         : true,  // true, if ES5 syntax should be allowed\n        esnext      : true,  // true, if es.next specific syntax should be allowed\n        evil        : true,  // true, if eval should be allowed\n        expr        : true,  // true, if ExpressionStatement should be allowed as Programs\n        forin       : true,  // true, if for in statements must filter\n        funcscope   : true,  // true, if only function scope should be used for scope tests\n        globalstrict: true,  // true, if global \"use strict\"; should be allowed (also enables 'strict')\n        immed       : true,  // true, if immediate invocations must be wrapped in parens\n        iterator    : true,  // true, if the `__iterator__` property should be allowed\n        jquery      : true,  // true, if jQuery globals should be predefined\n        lastsemic   : true,  // true, if semicolons may be ommitted for the trailing statements inside of a one-line blocks.\n        latedef     : true,  // true, if the use before definition should not be tolerated\n        laxbreak    : true,  // true, if line breaks should not be checked\n        laxcomma    : true,  // true, if line breaks should not be checked around commas\n        loopfunc    : true,  // true, if functions should be allowed to be defined within loops\n        mootools    : true,  // true, if MooTools globals should be predefined\n        multistr    : true,  // true, allow multiline strings\n        newcap      : true,  // true, if constructor names must be capitalized\n        noarg       : true,  // true, if arguments.caller and arguments.callee should be disallowed\n        node        : true,  // true, if the Node.js environment globals should be predefined\n        noempty     : true,  // true, if empty blocks should be disallowed\n        nonew       : true,  // true, if using `new` for side-effects should be disallowed\n        nonstandard : true,  // true, if non-standard (but widely adopted) globals should be predefined\n        nomen       : true,  // true, if names should be checked\n        onevar      : true,  // true, if only one var statement per function should be allowed\n        onecase     : true,  // true, if one case switch statements should be allowed\n        passfail    : true,  // true, if the scan should stop on first error\n        plusplus    : true,  // true, if increment/decrement should not be allowed\n        proto       : true,  // true, if the `__proto__` property should be allowed\n        prototypejs : true,  // true, if Prototype and Scriptaculous globals should be predefined\n        regexdash   : true,  // true, if unescaped first/last dash (-) inside brackets should be tolerated\n        regexp      : true,  // true, if the . should not be allowed in regexp literals\n        rhino       : true,  // true, if the Rhino environment globals should be predefined\n        undef       : true,  // true, if variables should be declared before used\n        scripturl   : true,  // true, if script-targeted URLs should be tolerated\n        shadow      : true,  // true, if variable shadowing should be tolerated\n        smarttabs   : true,  // true, if smarttabs should be tolerated (http://www.emacswiki.org/emacs/SmartTabs)\n        strict      : true,  // true, if the \"use strict\"; pragma is required\n        sub         : true,  // true, if all forms of subscript notation are tolerated\n        supernew    : true,  // true, if `new function () { ... };` and `new Object;` should be tolerated\n        trailing    : true,  // true, if trailing whitespace rules apply\n        validthis   : true,  // true, if 'this' inside a non-constructor function is valid.\n        white       : true,  // true, if strict whitespace rules apply\n        wsh         : true   // true, if the Windows Scripting Host environment globals should be predefined\n      }\n    };\n\nThe rules in autolint.js are project-wide, but you can still have file and function specific rules, like this:\n\n    /*jslint bitwise:true*/\n\nAdding it to the top of the file will allow bitwise operators in the entire file, or you can add it to a single function:\n\n    function justHere() {\n        /*jslint bitwise:true*/\n        return 1 << 1;\n    }\n\n## Changes\n\n### 1.1.4\n\n* Upgrade to a windows compatible version of node-growl. ([Stian Veum Møllersen](https://github.com/mollerse))\n\n### 1.1.3\n\n* Better stability of file-watching.\n\n### 1.1.0\n\n* The configuration file can now also be called `autolint-config.js`\n  to avoid issues where Windows will try to execute the `autolint.js`\n  config file when running `autolint`.\n\n* Now supports the exit signal on Windows to check all files.\n\n### 1.0.0\n\nAutolint now uses [semantic versioning](http://semver.org).\n\n* The configuration file is no longer a `json`-file, but a proper node\n  module. Add `module.exports =` to the start of the file and rename to\n  `autolint.js` to upgrade.\n* Autolint no longer runs without a config file. Running it without one will\n  prompt you for a default config file to be created.\n* Passing `--once` to autolint makes it not-so-auto. Instead it is run once,\n  exiting with a `-1` error code if any lint is found. This makes it well\n  suited for pre-commit-hooks and the like.\n* Updated bundled versions of jslint and jshint - these have been significantly\n  changed since last, so your configuration file will certainly need an upgrade\n  too.\n\n## Contributors\n\n* [Stian Veum Møllersen](https://github.com/mollerse) upgraded to a windows compatible version of node-growl.\n\nThanks!\n\n## Contribute\n\nIf you want to help out with features or bug fixes, that's awesome.\nCheck out [`todo.org`](autolint/blob/master/todo.org) for inspiration.\n\n* Fork the project.\n* Make your feature addition or bug fix.\n* Don't forget tests. This is important so I don't break it in a\n  future version unintentionally.\n* Commit and send me a pull request.\n\n### Setting up development environment\n\nCheck out the source code from your fork:\n\n    git clone <url to your fork>\n    cd autolint\n\nInstall [buster.js](http://busterjs.org) if you haven't already:\n\n    npm install buster -g\n\nThen link buster in:\n\n    npm link buster\n\nFetch the dependencies with npm:\n\n    npm install\n\nRun the tests to make sure everything works:\n\n    buster test\n\nInstall [watchr](https://github.com/mynyml/watchr) to run the tests automatically:\n\n    gem install watchr\n\nThen start the autotest with:\n\n    watchr watch-tests.watchr\n\nIf watchr can't be interrupted with 2x ctrl-c, switch to ruby ~1.9\n\nAlso make sure you follow the linting rules with:\n\n    autolint\n\nof course. ^^\n\n## License\n\nSee LICENSE file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/magnars/autolint/issues"
  },
  "_id": "autolint@1.1.4",
  "dist": {
    "shasum": "f795d818f0bb62707ae87cba5a9c0a358fc4a92f",
    "tarball": "https://registry.npmjs.org/autolint/-/autolint-1.1.4.tgz"
  },
  "_from": "autolint@1.1.4",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "magnars",
    "email": "magnars@gmail.com"
  },
  "maintainers": [
    {
      "name": "magnars",
      "email": "magnars@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "f795d818f0bb62707ae87cba5a9c0a358fc4a92f",
  "_resolved": "https://registry.npmjs.org/autolint/-/autolint-1.1.4.tgz"
}
