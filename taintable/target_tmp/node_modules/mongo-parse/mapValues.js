J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(9537, '../target_tmp/node_modules/mongo-parse/mapValues.js');
            function obj() {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(9345, arguments.callee, this, arguments);
                            arguments = J$.N(9353, 'arguments', arguments, true, false, false);
                            J$.N(9361, 'result', result, false, false, false);
                            J$.N(9369, 'n', n, false, false, false);
                            var result = J$.W(9185, 'result', J$.T(9177, {}, 11, false), result, false, false);
                            for (var n = J$.W(9201, 'n', J$.T(9193, 0, 22, false), n, false, false); J$.C(384, J$.B(594, '<', J$.R(9209, 'n', n, false, false), J$.G(9225, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(9217, 'arguments', undefined, true, true) : arguments = J$.R(9217, 'arguments', arguments, true, true)), 'length'))); n = J$.W(9249, 'n', J$.B(602, '+', J$.R(9241, 'n', n, false, false), J$.T(9233, 2, 22, false)), n, false, false)) {
                                J$.P(9321, J$.R(9257, 'result', result, false, false), J$.G(9281, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(9265, 'arguments', undefined, true, true) : arguments = J$.R(9265, 'arguments', arguments, true, true)), J$.R(9273, 'n', n, false, false)), J$.G(9313, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(9289, 'arguments', undefined, true, true) : arguments = J$.R(9289, 'arguments', arguments, true, true)), J$.B(610, '+', J$.R(9297, 'n', n, false, false), J$.T(9305, 1, 22, false))));
                            }
                            return J$.Rt(9337, J$.R(9329, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(9681, J$e);
                        } finally {
                            if (J$.Fr(9689))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addOperator(obj, field, operator, operand) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(9489, arguments.callee, this, arguments);
                            arguments = J$.N(9497, 'arguments', arguments, true, false, false);
                            obj = J$.N(9505, 'obj', obj, true, false, false);
                            field = J$.N(9513, 'field', field, true, false, false);
                            operator = J$.N(9521, 'operator', operator, true, false, false);
                            operand = J$.N(9529, 'operand', operand, true, false, false);
                            if (J$.C(392, J$.B(618, '===', J$.G(9393, J$.R(9377, 'obj', obj, false, false), J$.R(9385, 'field', field, false, false)), J$.T(9401, undefined, 24, false)))) {
                                J$.P(9433, J$.R(9409, 'obj', obj, false, false), J$.R(9417, 'field', field, false, false), J$.T(9425, {}, 11, false));
                            }
                            J$.P(9481, J$.G(9457, J$.R(9441, 'obj', obj, false, false), J$.R(9449, 'field', field, false, false)), J$.R(9465, 'operator', operator, false, false), J$.R(9473, 'operand', operand, false, false));
                        } catch (J$e) {
                            J$.Ex(9697, J$e);
                        } finally {
                            if (J$.Fr(9705))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(9545, 'singleValueOperators', singleValueOperators, false, false, false);
            J$.N(9553, 'arrayOperators', arrayOperators, false, false, false);
            J$.N(9561, 'mapValues', mapValues, false, false, false);
            obj = J$.N(9577, 'obj', J$.T(9569, obj, 12, false), true, false, false);
            addOperator = J$.N(9593, 'addOperator', J$.T(9585, addOperator, 12, false), true, false, false);
            var singleValueOperators = J$.W(7409, 'singleValueOperators', J$.T(7401, {
                $gt: J$.T(7353, 1, 22, false),
                $gte: J$.T(7361, 1, 22, false),
                $lt: J$.T(7369, 1, 22, false),
                $lte: J$.T(7377, 1, 22, false),
                $ne: J$.T(7385, 1, 22, false),
                $not: J$.T(7393, 1, 22, false)
            }, 11, false), singleValueOperators, false, true);
            var arrayOperators = J$.W(7449, 'arrayOperators', J$.T(7441, {
                $nin: J$.T(7417, 1, 22, false),
                $all: J$.T(7425, 1, 22, false),
                $in: J$.T(7433, 1, 22, false)
            }, 11, false), arrayOperators, false, true);
            var mapValues = J$.W(9169, 'mapValues', J$.P(9161, J$.I(typeof module === 'undefined' ? module = J$.R(7457, 'module', undefined, true, true) : module = J$.R(7457, 'module', module, true, true)), 'exports', J$.T(9153, function (parts, callback, prefix) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(9105, arguments.callee, this, arguments);
                            arguments = J$.N(9113, 'arguments', arguments, true, false, false);
                            parts = J$.N(9121, 'parts', parts, true, false, false);
                            callback = J$.N(9129, 'callback', callback, true, false, false);
                            prefix = J$.N(9137, 'prefix', prefix, true, false, false);
                            J$.N(9145, 'result', result, false, false, false);
                            var result = J$.W(7473, 'result', J$.T(7465, {}, 11, false), result, false, false);
                            J$.M(9081, J$.R(7481, 'parts', parts, false, false), 'forEach', false)(J$.T(9073, function (part) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(9025, arguments.callee, this, arguments);
                                            arguments = J$.N(9033, 'arguments', arguments, true, false, false);
                                            part = J$.N(9041, 'part', part, true, false, false);
                                            J$.N(9049, 'field', field, false, false, false);
                                            J$.N(9057, 'mappedValue', mappedValue, false, false, false);
                                            J$.N(9065, 'operands', operands, false, false, false);
                                            if (J$.C(288, J$.B(474, '!==', J$.G(7497, J$.R(7489, 'part', part, false, false), 'field'), J$.T(7505, undefined, 24, false)))) {
                                                if (J$.C(280, J$.B(482, '!==', J$.R(7513, 'prefix', prefix, false, false), J$.T(7521, undefined, 24, false)))) {
                                                    var field = J$.W(7561, 'field', J$.B(498, '+', J$.B(490, '+', J$.R(7529, 'prefix', prefix, false, false), J$.T(7537, '.', 21, false)), J$.G(7553, J$.R(7545, 'part', part, false, false), 'field')), field, false, false);
                                                } else {
                                                    var field = J$.W(7585, 'field', J$.G(7577, J$.R(7569, 'part', part, false, false), 'field'), field, false, false);
                                                }
                                            } else {
                                                var field = J$.W(7601, 'field', J$.R(7593, 'prefix', prefix, false, false), field, false, false);
                                            }
                                            if (J$.C(376, J$.B(506, '===', J$.G(7625, J$.G(7617, J$.R(7609, 'part', part, false, false), 'parts'), 'length'), J$.T(7633, 0, 22, false)))) {
                                                if (J$.C(352, J$.B(514, '===', J$.G(7649, J$.R(7641, 'part', part, false, false), 'operator'), J$.T(7657, undefined, 24, false)))) {
                                                    if (J$.C(296, J$.B(522, 'instanceof', J$.G(7673, J$.R(7665, 'part', part, false, false), 'operand'), J$.I(typeof Array === 'undefined' ? Array = J$.R(7681, 'Array', undefined, true, true) : Array = J$.R(7681, 'Array', Array, true, true))))) {
                                                        J$.P(7809, J$.R(7689, 'result', result, false, false), J$.G(7705, J$.R(7697, 'part', part, false, false), 'field'), J$.M(7801, J$.G(7721, J$.R(7713, 'part', part, false, false), 'operand'), 'map', false)(J$.T(7793, function (v) {
                                                            jalangiLabel0:
                                                                while (true) {
                                                                    try {
                                                                        J$.Fe(7769, arguments.callee, this, arguments);
                                                                        arguments = J$.N(7777, 'arguments', arguments, true, false, false);
                                                                        v = J$.N(7785, 'v', v, true, false, false);
                                                                        return J$.Rt(7761, J$.F(7753, J$.R(7729, 'callback', callback, false, false), false)(J$.R(7737, 'field', field, false, false), J$.R(7745, 'v', v, false, false)));
                                                                    } catch (J$e) {
                                                                        J$.Ex(9601, J$e);
                                                                    } finally {
                                                                        if (J$.Fr(9609))
                                                                            continue jalangiLabel0;
                                                                        else
                                                                            return J$.Ra();
                                                                    }
                                                                }
                                                        }, 12, false)));
                                                    } else {
                                                        J$.P(7881, J$.R(7817, 'result', result, false, false), J$.G(7833, J$.R(7825, 'part', part, false, false), 'field'), J$.F(7873, J$.R(7841, 'callback', callback, false, false), false)(J$.R(7849, 'field', field, false, false), J$.G(7865, J$.R(7857, 'part', part, false, false), 'operand')));
                                                    }
                                                } else {
                                                    if (J$.C(344, J$.B(530, 'in', J$.G(7897, J$.R(7889, 'part', part, false, false), 'operator'), J$.R(7905, 'singleValueOperators', singleValueOperators, false, true)))) {
                                                        if (J$.C(304, J$.B(538, '!==', J$.G(7921, J$.R(7913, 'part', part, false, false), 'field'), J$.T(7929, undefined, 24, false)))) {
                                                            J$.F(8025, J$.R(7937, 'addOperator', addOperator, false, true), false)(J$.R(7945, 'result', result, false, false), J$.G(7961, J$.R(7953, 'part', part, false, false), 'field'), J$.G(7977, J$.R(7969, 'part', part, false, false), 'operator'), J$.F(8017, J$.R(7985, 'callback', callback, false, false), false)(J$.R(7993, 'field', field, false, false), J$.G(8009, J$.R(8001, 'part', part, false, false), 'operand')));
                                                        } else {
                                                            J$.P(8097, J$.R(8033, 'result', result, false, false), J$.G(8049, J$.R(8041, 'part', part, false, false), 'operator'), J$.F(8089, J$.R(8057, 'callback', callback, false, false), false)(J$.R(8065, 'field', field, false, false), J$.G(8081, J$.R(8073, 'part', part, false, false), 'operand')));
                                                        }
                                                    } else if (J$.C(336, J$.B(546, 'in', J$.G(8113, J$.R(8105, 'part', part, false, false), 'operator'), J$.R(8121, 'arrayOperators', arrayOperators, false, true)))) {
                                                        J$.F(8281, J$.R(8129, 'addOperator', addOperator, false, true), false)(J$.R(8137, 'result', result, false, false), J$.G(8153, J$.R(8145, 'part', part, false, false), 'field'), J$.G(8169, J$.R(8161, 'part', part, false, false), 'operator'), J$.M(8273, J$.G(8185, J$.R(8177, 'part', part, false, false), 'operand'), 'map', false)(J$.T(8265, function (v) {
                                                            jalangiLabel1:
                                                                while (true) {
                                                                    try {
                                                                        J$.Fe(8241, arguments.callee, this, arguments);
                                                                        arguments = J$.N(8249, 'arguments', arguments, true, false, false);
                                                                        v = J$.N(8257, 'v', v, true, false, false);
                                                                        return J$.Rt(8233, J$.F(8225, J$.R(8193, 'callback', callback, false, false), false)(J$.G(8209, J$.R(8201, 'part', part, false, false), 'field'), J$.R(8217, 'v', v, false, false)));
                                                                    } catch (J$e) {
                                                                        J$.Ex(9617, J$e);
                                                                    } finally {
                                                                        if (J$.Fr(9625))
                                                                            continue jalangiLabel1;
                                                                        else
                                                                            return J$.Ra();
                                                                    }
                                                                }
                                                        }, 12, false)));
                                                    } else if (J$.C(328, J$.B(554, '===', J$.G(8297, J$.R(8289, 'part', part, false, false), 'operator'), J$.T(8305, '$text', 21, false)))) {
                                                        J$.P(8377, J$.R(8313, 'result', result, false, false), '$text', J$.T(8369, { $search: J$.F(8361, J$.R(8321, 'callback', callback, false, false), false)(J$.R(8329, 'field', field, false, false), J$.G(8353, J$.G(8345, J$.R(8337, 'part', part, false, false), 'operand'), '$search')) }, 11, false));
                                                        if (J$.C(312, J$.B(562, '!==', J$.G(8401, J$.G(8393, J$.R(8385, 'part', part, false, false), 'operand'), '$language'), J$.T(8409, undefined, 24, false)))) {
                                                            J$.P(8457, J$.G(8425, J$.R(8417, 'result', result, false, false), '$text'), '$language', J$.G(8449, J$.G(8441, J$.R(8433, 'part', part, false, false), 'operand'), '$language'));
                                                        }
                                                    } else {
                                                        if (J$.C(320, J$.B(570, '!==', J$.G(8473, J$.R(8465, 'part', part, false, false), 'field'), J$.T(8481, undefined, 24, false)))) {
                                                            J$.F(8553, J$.R(8489, 'addOperator', addOperator, false, true), false)(J$.R(8497, 'result', result, false, false), J$.G(8513, J$.R(8505, 'part', part, false, false), 'field'), J$.G(8529, J$.R(8521, 'part', part, false, false), 'operator'), J$.G(8545, J$.R(8537, 'part', part, false, false), 'operand'));
                                                        } else {
                                                            J$.P(8601, J$.R(8561, 'result', result, false, false), J$.G(8577, J$.R(8569, 'part', part, false, false), 'operator'), J$.G(8593, J$.R(8585, 'part', part, false, false), 'operand'));
                                                        }
                                                    }
                                                }
                                            } else {
                                                if (J$.C(368, J$.B(578, '===', J$.G(8617, J$.R(8609, 'part', part, false, false), 'operator'), J$.T(8625, '$elemMatch', 21, false)))) {
                                                    var mappedValue = J$.W(8681, 'mappedValue', J$.F(8673, J$.R(8633, 'mapValues', mapValues, false, true), false)(J$.G(8649, J$.R(8641, 'part', part, false, false), 'parts'), J$.R(8657, 'callback', callback, false, false), J$.R(8665, 'field', field, false, false)), mappedValue, false, false);
                                                    J$.F(8745, J$.R(8689, 'addOperator', addOperator, false, true), false)(J$.R(8697, 'result', result, false, false), J$.G(8713, J$.R(8705, 'part', part, false, false), 'field'), J$.G(8729, J$.R(8721, 'part', part, false, false), 'operator'), J$.R(8737, 'mappedValue', mappedValue, false, false));
                                                } else if (J$.C(360, J$.B(586, '===', J$.G(8761, J$.R(8753, 'part', part, false, false), 'operator'), J$.T(8769, '$not', 21, false)))) {
                                                    J$.P(8849, J$.R(8777, 'result', result, false, false), J$.G(8793, J$.R(8785, 'part', part, false, false), 'operator'), J$.F(8841, J$.R(8801, 'mapValues', mapValues, false, true), false)(J$.G(8817, J$.R(8809, 'part', part, false, false), 'parts'), J$.R(8825, 'callback', callback, false, false), J$.R(8833, 'field', field, false, false)));
                                                } else {
                                                    var operands = J$.W(8865, 'operands', J$.T(8857, [], 10, false), operands, false, false);
                                                    J$.M(8977, J$.G(8881, J$.R(8873, 'part', part, false, false), 'parts'), 'forEach', false)(J$.T(8969, function (innerPart) {
                                                        jalangiLabel2:
                                                            while (true) {
                                                                try {
                                                                    J$.Fe(8945, arguments.callee, this, arguments);
                                                                    arguments = J$.N(8953, 'arguments', arguments, true, false, false);
                                                                    innerPart = J$.N(8961, 'innerPart', innerPart, true, false, false);
                                                                    J$.M(8937, J$.R(8889, 'operands', operands, false, false), 'push', false)(J$.F(8929, J$.R(8897, 'mapValues', mapValues, false, true), false)(J$.G(8913, J$.R(8905, 'innerPart', innerPart, false, false), 'parts'), J$.R(8921, 'callback', callback, false, false)));
                                                                } catch (J$e) {
                                                                    J$.Ex(9633, J$e);
                                                                } finally {
                                                                    if (J$.Fr(9641))
                                                                        continue jalangiLabel2;
                                                                    else
                                                                        return J$.Ra();
                                                                }
                                                            }
                                                    }, 12, false));
                                                    J$.P(9017, J$.R(8985, 'result', result, false, false), J$.G(9001, J$.R(8993, 'part', part, false, false), 'operator'), J$.R(9009, 'operands', operands, false, false));
                                                }
                                            }
                                        } catch (J$e) {
                                            J$.Ex(9649, J$e);
                                        } finally {
                                            if (J$.Fr(9657))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(9097, J$.R(9089, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(9665, J$e);
                        } finally {
                            if (J$.Fr(9673))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false)), mapValues, false, true);
        } catch (J$e) {
            J$.Ex(9713, J$e);
        } finally {
            if (J$.Sr(9721))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

