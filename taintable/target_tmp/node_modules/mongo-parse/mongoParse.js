J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(14329, '../target_tmp/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(12097, arguments.callee, this, arguments);
                            arguments = J$.N(12105, 'arguments', arguments, true, false, false);
                            projection = J$.N(12113, 'projection', projection, true, false, false);
                            J$.N(12121, 'k', k, false, false, false);
                            for (var k in J$.H(12081, J$.R(11849, 'projection', projection, false, false))) {
                                J$.N(12089, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(760, J$.U(1154, '!', J$.G(11873, J$.R(11857, 'projection', projection, false, false), J$.R(11865, 'k', k, false, false))))) {
                                            if (J$.C(712, J$.B(1162, '!==', J$.R(11881, 'k', k, false, false), J$.T(11889, '_id', 21, false)))) {
                                                return J$.Rt(11905, J$.T(11897, false, 23, false));
                                            }
                                        } else if (J$.C(752, J$.B(1170, '===', J$.R(11913, 'k', k, false, false), J$.T(11921, '$meta', 21, false)))) {
                                            return J$.Rt(11937, J$.T(11929, true, 23, false));
                                        } else if (J$.C(744, J$.G(11961, J$.R(11945, 'projection', projection, false, false), J$.R(11953, 'k', k, false, false)))) {
                                            if (J$.C(736, J$.C(728, J$.B(1178, 'instanceof', J$.G(11985, J$.R(11969, 'projection', projection, false, false), J$.R(11977, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(11993, 'Object', undefined, true, true) : Object = J$.R(11993, 'Object', Object, true, true)))) ? J$.C(720, J$.B(1186, 'in', J$.T(12001, '$elemMatch', 21, false), J$.G(12025, J$.R(12009, 'projection', projection, false, false), J$.R(12017, 'k', k, false, false)))) ? J$._() : J$.B(1194, 'in', J$.T(12033, '$slice', 21, false), J$.G(12057, J$.R(12041, 'projection', projection, false, false), J$.R(12049, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(12073, J$.T(12065, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(14577, J$e);
                        } finally {
                            if (J$.Fr(14585))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(13057, arguments.callee, this, arguments);
                            arguments = J$.N(13065, 'arguments', arguments, true, false, false);
                            query = J$.N(13073, 'query', query, true, false, false);
                            J$.N(13081, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(13089, 'parts', parts, false, false, false);
                            J$.N(13097, 'key', key, false, false, false);
                            J$.N(13105, 'operator', operator, false, false, false);
                            J$.N(13113, 'operands', operands, false, false, false);
                            J$.N(13121, 'innerParts', innerParts, false, false, false);
                            J$.N(13129, 'field', field, false, false, false);
                            J$.N(13137, 'innerOperator', innerOperator, false, false, false);
                            J$.N(13145, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(784, J$.C(768, J$.B(1202, 'instanceof', J$.R(12129, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12137, 'Function', undefined, true, true) : Function = J$.R(12137, 'Function', Function, true, true)))) ? J$._() : J$.B(1218, '===', J$.U(1210, 'typeof', J$.R(12145, 'query', query, false, false)), J$.T(12153, 'string', 21, false)))) {
                                if (J$.C(776, J$.B(1226, 'instanceof', J$.R(12161, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12169, 'Function', undefined, true, true) : Function = J$.R(12169, 'Function', Function, true, true))))) {
                                    query = J$.W(12201, 'query', J$.B(1242, '+', J$.B(1234, '+', J$.T(12177, '(', 21, false), J$.R(12185, 'query', query, false, false)), J$.T(12193, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(12241, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1258, '+', J$.B(1250, '+', J$.T(12209, '(function() {var obj=this; return ', 21, false), J$.R(12217, 'query', query, false, false)), J$.T(12225, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 12233, J$.evalInvoked(J$.B(1266, '+', J$.B(1250, '+', J$.T(12209, '(function() {var obj=this; return ', 21, false), J$.R(12217, 'query', query, false, false)), J$.T(12225, '})', 21, false)), 12233)).code), normalizedFunction, false, false);
                                return J$.Rt(12297, J$.T(12289, [J$.F(12281, J$.R(12249, 'Part', Part, false, true), true)(J$.T(12257, undefined, 24, false), J$.T(12265, '$where', 21, false), J$.R(12273, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(12313, 'parts', J$.T(12305, [], 10, false), parts, false, false);
                            for (var key in J$.H(13025, J$.R(12321, 'query', query, false, false))) {
                                J$.N(13033, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(816, J$.B(1274, 'in', J$.R(12329, 'key', key, false, false), J$.R(12337, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(12353, 'operator', J$.R(12345, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(12385, 'operands', J$.G(12377, J$.R(12361, 'query', query, false, false), J$.R(12369, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(12401, 'innerParts', J$.T(12393, [], 10, false), innerParts, false, false);
                                            J$.M(12537, J$.R(12409, 'operands', operands, false, false), 'forEach', false)(J$.T(12529, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(12505, arguments.callee, this, arguments);
                                                            arguments = J$.N(12513, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(12521, 'operand', operand, true, false, false);
                                                            J$.M(12497, J$.R(12417, 'innerParts', innerParts, false, false), 'push', false)(J$.F(12489, J$.R(12425, 'Part', Part, false, true), true)(J$.T(12433, undefined, 24, false), J$.T(12441, '$and', 21, false), J$.T(12457, [J$.R(12449, 'operand', operand, false, false)], 10, false), J$.F(12481, J$.R(12465, 'parseQuery', parseQuery, false, true), false)(J$.R(12473, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(14593, J$e);
                                                        } finally {
                                                            if (J$.Fr(14601))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(12617, J$.R(12545, 'parts', parts, false, false), 'push', false)(J$.F(12609, J$.R(12553, 'Part', Part, false, true), true)(J$.T(12561, undefined, 24, false), J$.R(12569, 'operator', operator, false, false), J$.G(12593, J$.R(12577, 'query', query, false, false), J$.R(12585, 'key', key, false, false)), J$.R(12601, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(808, J$.B(1282, 'in', J$.R(12625, 'key', key, false, false), J$.R(12633, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(12705, J$.R(12641, 'parts', parts, false, false), 'push', false)(J$.F(12697, J$.R(12649, 'Part', Part, false, true), true)(J$.T(12657, undefined, 24, false), J$.R(12665, 'key', key, false, false), J$.G(12689, J$.R(12673, 'query', query, false, false), J$.R(12681, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(12721, 'field', J$.R(12713, 'key', key, false, false), field, false, false);
                                            if (J$.C(800, J$.C(792, J$.F(12761, J$.R(12729, 'isObject', isObject, false, true), false)(J$.G(12753, J$.R(12737, 'query', query, false, false), J$.R(12745, 'key', key, false, false)))) ? J$.F(12801, J$.R(12769, 'fieldOperand', fieldOperand, false, true), false)(J$.G(12793, J$.R(12777, 'query', query, false, false), J$.R(12785, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(12937, J$.G(12825, J$.R(12809, 'query', query, false, false), J$.R(12817, 'key', key, false, false)))) {
                                                    J$.N(12945, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(12873, 'innerOperand', J$.G(12865, J$.G(12849, J$.R(12833, 'query', query, false, false), J$.R(12841, 'key', key, false, false)), J$.R(12857, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(12929, J$.R(12881, 'parts', parts, false, false), 'push', false)(J$.F(12921, J$.R(12889, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(12897, 'field', field, false, false), J$.R(12905, 'innerOperator', innerOperator, false, false), J$.R(12913, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(13017, J$.R(12953, 'parts', parts, false, false), 'push', false)(J$.F(13009, J$.R(12961, 'Part', Part, false, true), true)(J$.R(12969, 'field', field, false, false), J$.T(12977, undefined, 24, false), J$.G(13001, J$.R(12985, 'query', query, false, false), J$.R(12993, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(13049, J$.R(13041, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(14609, J$e);
                        } finally {
                            if (J$.Fr(14617))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(13385, arguments.callee, this, arguments);
                            arguments = J$.N(13393, 'arguments', arguments, true, false, false);
                            field = J$.N(13401, 'field', field, true, false, false);
                            operator = J$.N(13409, 'operator', operator, true, false, false);
                            operand = J$.N(13417, 'operand', operand, true, false, false);
                            J$.N(13425, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(13433, 'innerParts', innerParts, false, false, false);
                            J$.N(13441, 'implicitField', implicitField, false, false, false);
                            if (J$.C(832, J$.B(1290, '===', J$.R(13153, 'operator', operator, false, false), J$.T(13161, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(13193, 'elemMatchInfo', J$.F(13185, J$.R(13169, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(13177, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(13217, 'innerParts', J$.G(13209, J$.R(13201, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(13241, 'implicitField', J$.G(13233, J$.R(13225, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(824, J$.B(1298, '===', J$.R(13249, 'operator', operator, false, false), J$.T(13257, '$not', 21, false)))) {
                                var innerParts = J$.W(13297, 'innerParts', J$.F(13289, J$.R(13265, 'parseNot', parseNot, false, true), false)(J$.R(13273, 'field', field, false, false), J$.R(13281, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(13313, 'innerParts', J$.T(13305, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(13377, J$.F(13369, J$.R(13321, 'Part', Part, false, true), true)(J$.R(13329, 'field', field, false, false), J$.R(13337, 'operator', operator, false, false), J$.R(13345, 'operand', operand, false, false), J$.R(13353, 'innerParts', innerParts, false, false), J$.R(13361, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(14625, J$e);
                        } finally {
                            if (J$.Fr(14633))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(13681, arguments.callee, this, arguments);
                            arguments = J$.N(13689, 'arguments', arguments, true, false, false);
                            operand = J$.N(13697, 'operand', operand, true, false, false);
                            J$.N(13705, 'parts', parts, false, false, false);
                            J$.N(13713, 'operator', operator, false, false, false);
                            J$.N(13721, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(840, J$.F(13465, J$.R(13449, 'fieldOperand', fieldOperand, false, true), false)(J$.R(13457, 'operand', operand, false, false)))) {
                                var parts = J$.W(13481, 'parts', J$.T(13473, [], 10, false), parts, false, false);
                                for (var operator in J$.H(13585, J$.R(13489, 'operand', operand, false, false))) {
                                    J$.N(13593, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(13521, 'innerOperand', J$.G(13513, J$.R(13497, 'operand', operand, false, false), J$.R(13505, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(13577, J$.R(13529, 'parts', parts, false, false), 'push', false)(J$.F(13569, J$.R(13537, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(13545, undefined, 24, false), J$.R(13553, 'operator', operator, false, false), J$.R(13561, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(13625, J$.T(13617, {
                                    parts: J$.R(13601, 'parts', parts, false, false),
                                    implicitField: J$.T(13609, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(13673, J$.T(13665, {
                                    parts: J$.F(13649, J$.R(13633, 'parseQuery', parseQuery, false, true), false)(J$.R(13641, 'operand', operand, false, false)),
                                    implicitField: J$.T(13657, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(14641, J$e);
                        } finally {
                            if (J$.Fr(14649))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(13873, arguments.callee, this, arguments);
                            arguments = J$.N(13881, 'arguments', arguments, true, false, false);
                            field = J$.N(13889, 'field', field, true, false, false);
                            operand = J$.N(13897, 'operand', operand, true, false, false);
                            J$.N(13905, 'parts', parts, false, false, false);
                            J$.N(13913, 'operator', operator, false, false, false);
                            J$.N(13921, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(13737, 'parts', J$.T(13729, [], 10, false), parts, false, false);
                            for (var operator in J$.H(13841, J$.R(13745, 'operand', operand, false, false))) {
                                J$.N(13849, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(13777, 'subOperand', J$.G(13769, J$.R(13753, 'operand', operand, false, false), J$.R(13761, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(13833, J$.R(13785, 'parts', parts, false, false), 'push', false)(J$.F(13825, J$.R(13793, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(13801, 'field', field, false, false), J$.R(13809, 'operator', operator, false, false), J$.R(13817, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(13865, J$.R(13857, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(14657, J$e);
                        } finally {
                            if (J$.Fr(14665))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(14009, arguments.callee, this, arguments);
                            arguments = J$.N(14017, 'arguments', arguments, true, false, false);
                            obj = J$.N(14025, 'obj', obj, true, false, false);
                            J$.N(14033, 'key', key, false, false, false);
                            for (var key in J$.H(13993, J$.R(13929, 'obj', obj, false, false))) {
                                J$.N(14001, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(13985, J$.C(848, J$.B(1306, '===', J$.G(13953, J$.R(13937, 'key', key, false, false), J$.T(13945, 0, 22, false)), J$.T(13961, '$', 21, false))) ? J$.U(1322, '!', J$.B(1314, 'in', J$.R(13969, 'key', key, false, false), J$.R(13977, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(14673, J$e);
                        } finally {
                            if (J$.Fr(14681))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(14081, arguments.callee, this, arguments);
                            arguments = J$.N(14089, 'arguments', arguments, true, false, false);
                            value = J$.N(14097, 'value', value, true, false, false);
                            return J$.Rt(14073, J$.C(856, J$.B(1330, 'instanceof', J$.R(14041, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(14049, 'Object', undefined, true, true) : Object = J$.R(14049, 'Object', Object, true, true)))) ? J$.U(1346, '!', J$.B(1338, 'instanceof', J$.R(14057, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(14065, 'Array', undefined, true, true) : Array = J$.R(14065, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(14689, J$e);
                        } finally {
                            if (J$.Fr(14697))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(14337, 'mapValues', mapValues, false, false, false);
            J$.N(14345, 'matches', matches, false, false, false);
            J$.N(14353, 'Parse', Parse, false, false, false);
            J$.N(14361, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(14369, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(14385, 'isInclusive', J$.T(14377, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(14401, 'parseQuery', J$.T(14393, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(14417, 'parseFieldOperator', J$.T(14409, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(14433, 'parseElemMatch', J$.T(14425, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(14449, 'parseNot', J$.T(14441, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(14465, 'fieldOperand', J$.T(14457, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(14481, 'isObject', J$.T(14473, isObject, 12, false), true, false, false);
            J$.N(14489, 'Part', Part, false, false, false);
            var mapValues = J$.W(11225, 'mapValues', J$.F(11217, J$.I(typeof require === 'undefined' ? require = J$.R(11201, 'require', undefined, true, true) : require = J$.R(11201, 'require', require, true, true)), false)(J$.T(11209, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(11257, 'matches', J$.F(11249, J$.I(typeof require === 'undefined' ? require = J$.R(11233, 'require', undefined, true, true) : require = J$.R(11233, 'require', require, true, true)), false)(J$.T(11241, './matches', 21, false)), matches, false, true);
            J$.P(11297, J$.I(typeof exports === 'undefined' ? exports = J$.R(11265, 'exports', undefined, true, true) : exports = J$.R(11265, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(11289, J$.I(typeof require === 'undefined' ? require = J$.R(11273, 'require', undefined, true, true) : require = J$.R(11273, 'require', require, true, true)), false)(J$.T(11281, './DotNotationPointers', 21, false)));
            var Parse = J$.W(11377, 'Parse', J$.T(11369, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(11345, arguments.callee, this, arguments);
                            arguments = J$.N(11353, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(11361, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(11337, J$.R(11305, 'this', this, false, false), 'parts', J$.F(11329, J$.R(11313, 'parseQuery', parseQuery, false, true), false)(J$.R(11321, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(14497, J$e);
                        } finally {
                            if (J$.Fr(14505))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(11401, J$.R(11385, 'Parse', Parse, false, true), 'prototype', J$.T(11393, {}, 11, false));
            J$.P(11505, J$.G(11417, J$.R(11409, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(11497, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(11473, arguments.callee, this, arguments);
                            arguments = J$.N(11481, 'arguments', arguments, true, false, false);
                            callback = J$.N(11489, 'callback', callback, true, false, false);
                            return J$.Rt(11465, J$.F(11457, J$.R(11425, 'mapValues', mapValues, false, true), false)(J$.G(11441, J$.R(11433, 'this', this, false, false), 'parts'), J$.R(11449, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(14513, J$e);
                        } finally {
                            if (J$.Fr(14521))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(11609, J$.G(11521, J$.R(11513, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(11601, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(11577, arguments.callee, this, arguments);
                            arguments = J$.N(11585, 'arguments', arguments, true, false, false);
                            document = J$.N(11593, 'document', document, true, false, false);
                            return J$.Rt(11569, J$.F(11561, J$.R(11529, 'matches', matches, false, true), false)(J$.G(11545, J$.R(11537, 'this', this, false, false), 'parts'), J$.R(11553, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(14529, J$e);
                        } finally {
                            if (J$.Fr(14537))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(11689, J$.I(typeof exports === 'undefined' ? exports = J$.R(11617, 'exports', undefined, true, true) : exports = J$.R(11617, 'exports', exports, true, true)), 'parse', J$.T(11681, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(11657, arguments.callee, this, arguments);
                            arguments = J$.N(11665, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(11673, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(11649, J$.F(11641, J$.R(11625, 'Parse', Parse, false, true), true)(J$.R(11633, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(14545, J$e);
                        } finally {
                            if (J$.Fr(14553))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(11769, J$.I(typeof exports === 'undefined' ? exports = J$.R(11697, 'exports', undefined, true, true) : exports = J$.R(11697, 'exports', exports, true, true)), 'inclusive', J$.T(11761, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(11737, arguments.callee, this, arguments);
                            arguments = J$.N(11745, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(11753, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(11729, J$.F(11721, J$.R(11705, 'isInclusive', isInclusive, false, true), false)(J$.R(11713, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(14561, J$e);
                        } finally {
                            if (J$.Fr(14569))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(11809, 'complexFieldIndependantOperators', J$.T(11801, {
                $and: J$.T(11777, 1, 22, false),
                $or: J$.T(11785, 1, 22, false),
                $nor: J$.T(11793, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(11841, 'simpleFieldIndependantOperators', J$.T(11833, {
                $text: J$.T(11817, 1, 22, false),
                $comment: J$.T(11825, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(14321, 'Part', J$.T(14313, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(14257, arguments.callee, this, arguments);
                            arguments = J$.N(14265, 'arguments', arguments, true, false, false);
                            field = J$.N(14273, 'field', field, true, false, false);
                            operator = J$.N(14281, 'operator', operator, true, false, false);
                            operand = J$.N(14289, 'operand', operand, true, false, false);
                            parts = J$.N(14297, 'parts', parts, true, false, false);
                            implicitField = J$.N(14305, 'implicitField', implicitField, true, false, false);
                            if (J$.C(864, J$.B(1354, '===', J$.R(14105, 'parts', parts, false, false), J$.T(14113, undefined, 24, false))))
                                parts = J$.W(14129, 'parts', J$.T(14121, [], 10, false), parts, false, false);
                            J$.P(14153, J$.R(14137, 'this', this, false, false), 'field', J$.R(14145, 'field', field, false, false));
                            J$.P(14177, J$.R(14161, 'this', this, false, false), 'operator', J$.R(14169, 'operator', operator, false, false));
                            J$.P(14201, J$.R(14185, 'this', this, false, false), 'operand', J$.R(14193, 'operand', operand, false, false));
                            J$.P(14225, J$.R(14209, 'this', this, false, false), 'parts', J$.R(14217, 'parts', parts, false, false));
                            J$.P(14249, J$.R(14233, 'this', this, false, false), 'implicitField', J$.R(14241, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(14705, J$e);
                        } finally {
                            if (J$.Fr(14713))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(14721, J$e);
        } finally {
            if (J$.Sr(14729))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

