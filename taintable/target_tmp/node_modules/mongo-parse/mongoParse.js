J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(18001, '../target_tmp/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(15769, arguments.callee, this, arguments);
                            arguments = J$.N(15777, 'arguments', arguments, true, false, false);
                            projection = J$.N(15785, 'projection', projection, true, false, false);
                            J$.N(15793, 'k', k, false, false, false);
                            for (var k in J$.H(15753, J$.R(15521, 'projection', projection, false, false))) {
                                J$.N(15761, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(896, J$.U(1386, '!', J$.G(15545, J$.R(15529, 'projection', projection, false, false), J$.R(15537, 'k', k, false, false))))) {
                                            if (J$.C(848, J$.B(1394, '!==', J$.R(15553, 'k', k, false, false), J$.T(15561, '_id', 21, false)))) {
                                                return J$.Rt(15577, J$.T(15569, false, 23, false));
                                            }
                                        } else if (J$.C(888, J$.B(1402, '===', J$.R(15585, 'k', k, false, false), J$.T(15593, '$meta', 21, false)))) {
                                            return J$.Rt(15609, J$.T(15601, true, 23, false));
                                        } else if (J$.C(880, J$.G(15633, J$.R(15617, 'projection', projection, false, false), J$.R(15625, 'k', k, false, false)))) {
                                            if (J$.C(872, J$.C(864, J$.B(1410, 'instanceof', J$.G(15657, J$.R(15641, 'projection', projection, false, false), J$.R(15649, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(15665, 'Object', undefined, true, true) : Object = J$.R(15665, 'Object', Object, true, true)))) ? J$.C(856, J$.B(1418, 'in', J$.T(15673, '$elemMatch', 21, false), J$.G(15697, J$.R(15681, 'projection', projection, false, false), J$.R(15689, 'k', k, false, false)))) ? J$._() : J$.B(1426, 'in', J$.T(15705, '$slice', 21, false), J$.G(15729, J$.R(15713, 'projection', projection, false, false), J$.R(15721, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(15745, J$.T(15737, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(18249, J$e);
                        } finally {
                            if (J$.Fr(18257))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(16729, arguments.callee, this, arguments);
                            arguments = J$.N(16737, 'arguments', arguments, true, false, false);
                            query = J$.N(16745, 'query', query, true, false, false);
                            J$.N(16753, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(16761, 'parts', parts, false, false, false);
                            J$.N(16769, 'key', key, false, false, false);
                            J$.N(16777, 'operator', operator, false, false, false);
                            J$.N(16785, 'operands', operands, false, false, false);
                            J$.N(16793, 'innerParts', innerParts, false, false, false);
                            J$.N(16801, 'field', field, false, false, false);
                            J$.N(16809, 'innerOperator', innerOperator, false, false, false);
                            J$.N(16817, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(920, J$.C(904, J$.B(1434, 'instanceof', J$.R(15801, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(15809, 'Function', undefined, true, true) : Function = J$.R(15809, 'Function', Function, true, true)))) ? J$._() : J$.B(1450, '===', J$.U(1442, 'typeof', J$.R(15817, 'query', query, false, false)), J$.T(15825, 'string', 21, false)))) {
                                if (J$.C(912, J$.B(1458, 'instanceof', J$.R(15833, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(15841, 'Function', undefined, true, true) : Function = J$.R(15841, 'Function', Function, true, true))))) {
                                    query = J$.W(15873, 'query', J$.B(1474, '+', J$.B(1466, '+', J$.T(15849, '(', 21, false), J$.R(15857, 'query', query, false, false)), J$.T(15865, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(15913, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1490, '+', J$.B(1482, '+', J$.T(15881, '(function() {var obj=this; return ', 21, false), J$.R(15889, 'query', query, false, false)), J$.T(15897, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 15905, J$.evalInvoked(J$.B(1498, '+', J$.B(1482, '+', J$.T(15881, '(function() {var obj=this; return ', 21, false), J$.R(15889, 'query', query, false, false)), J$.T(15897, '})', 21, false)), 15905)).code), normalizedFunction, false, false);
                                return J$.Rt(15969, J$.T(15961, [J$.F(15953, J$.R(15921, 'Part', Part, false, true), true)(J$.T(15929, undefined, 24, false), J$.T(15937, '$where', 21, false), J$.R(15945, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(15985, 'parts', J$.T(15977, [], 10, false), parts, false, false);
                            for (var key in J$.H(16697, J$.R(15993, 'query', query, false, false))) {
                                J$.N(16705, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(952, J$.B(1506, 'in', J$.R(16001, 'key', key, false, false), J$.R(16009, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(16025, 'operator', J$.R(16017, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(16057, 'operands', J$.G(16049, J$.R(16033, 'query', query, false, false), J$.R(16041, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(16073, 'innerParts', J$.T(16065, [], 10, false), innerParts, false, false);
                                            J$.M(16209, J$.R(16081, 'operands', operands, false, false), 'forEach', false)(J$.T(16201, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(16177, arguments.callee, this, arguments);
                                                            arguments = J$.N(16185, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(16193, 'operand', operand, true, false, false);
                                                            J$.M(16169, J$.R(16089, 'innerParts', innerParts, false, false), 'push', false)(J$.F(16161, J$.R(16097, 'Part', Part, false, true), true)(J$.T(16105, undefined, 24, false), J$.T(16113, '$and', 21, false), J$.T(16129, [J$.R(16121, 'operand', operand, false, false)], 10, false), J$.F(16153, J$.R(16137, 'parseQuery', parseQuery, false, true), false)(J$.R(16145, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(18265, J$e);
                                                        } finally {
                                                            if (J$.Fr(18273))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(16289, J$.R(16217, 'parts', parts, false, false), 'push', false)(J$.F(16281, J$.R(16225, 'Part', Part, false, true), true)(J$.T(16233, undefined, 24, false), J$.R(16241, 'operator', operator, false, false), J$.G(16265, J$.R(16249, 'query', query, false, false), J$.R(16257, 'key', key, false, false)), J$.R(16273, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(944, J$.B(1514, 'in', J$.R(16297, 'key', key, false, false), J$.R(16305, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(16377, J$.R(16313, 'parts', parts, false, false), 'push', false)(J$.F(16369, J$.R(16321, 'Part', Part, false, true), true)(J$.T(16329, undefined, 24, false), J$.R(16337, 'key', key, false, false), J$.G(16361, J$.R(16345, 'query', query, false, false), J$.R(16353, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(16393, 'field', J$.R(16385, 'key', key, false, false), field, false, false);
                                            if (J$.C(936, J$.C(928, J$.F(16433, J$.R(16401, 'isObject', isObject, false, true), false)(J$.G(16425, J$.R(16409, 'query', query, false, false), J$.R(16417, 'key', key, false, false)))) ? J$.F(16473, J$.R(16441, 'fieldOperand', fieldOperand, false, true), false)(J$.G(16465, J$.R(16449, 'query', query, false, false), J$.R(16457, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(16609, J$.G(16497, J$.R(16481, 'query', query, false, false), J$.R(16489, 'key', key, false, false)))) {
                                                    J$.N(16617, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(16545, 'innerOperand', J$.G(16537, J$.G(16521, J$.R(16505, 'query', query, false, false), J$.R(16513, 'key', key, false, false)), J$.R(16529, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(16601, J$.R(16553, 'parts', parts, false, false), 'push', false)(J$.F(16593, J$.R(16561, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(16569, 'field', field, false, false), J$.R(16577, 'innerOperator', innerOperator, false, false), J$.R(16585, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(16689, J$.R(16625, 'parts', parts, false, false), 'push', false)(J$.F(16681, J$.R(16633, 'Part', Part, false, true), true)(J$.R(16641, 'field', field, false, false), J$.T(16649, undefined, 24, false), J$.G(16673, J$.R(16657, 'query', query, false, false), J$.R(16665, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(16721, J$.R(16713, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(18281, J$e);
                        } finally {
                            if (J$.Fr(18289))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(17057, arguments.callee, this, arguments);
                            arguments = J$.N(17065, 'arguments', arguments, true, false, false);
                            field = J$.N(17073, 'field', field, true, false, false);
                            operator = J$.N(17081, 'operator', operator, true, false, false);
                            operand = J$.N(17089, 'operand', operand, true, false, false);
                            J$.N(17097, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(17105, 'innerParts', innerParts, false, false, false);
                            J$.N(17113, 'implicitField', implicitField, false, false, false);
                            if (J$.C(968, J$.B(1522, '===', J$.R(16825, 'operator', operator, false, false), J$.T(16833, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(16865, 'elemMatchInfo', J$.F(16857, J$.R(16841, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(16849, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(16889, 'innerParts', J$.G(16881, J$.R(16873, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(16913, 'implicitField', J$.G(16905, J$.R(16897, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(960, J$.B(1530, '===', J$.R(16921, 'operator', operator, false, false), J$.T(16929, '$not', 21, false)))) {
                                var innerParts = J$.W(16969, 'innerParts', J$.F(16961, J$.R(16937, 'parseNot', parseNot, false, true), false)(J$.R(16945, 'field', field, false, false), J$.R(16953, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(16985, 'innerParts', J$.T(16977, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(17049, J$.F(17041, J$.R(16993, 'Part', Part, false, true), true)(J$.R(17001, 'field', field, false, false), J$.R(17009, 'operator', operator, false, false), J$.R(17017, 'operand', operand, false, false), J$.R(17025, 'innerParts', innerParts, false, false), J$.R(17033, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(18297, J$e);
                        } finally {
                            if (J$.Fr(18305))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(17353, arguments.callee, this, arguments);
                            arguments = J$.N(17361, 'arguments', arguments, true, false, false);
                            operand = J$.N(17369, 'operand', operand, true, false, false);
                            J$.N(17377, 'parts', parts, false, false, false);
                            J$.N(17385, 'operator', operator, false, false, false);
                            J$.N(17393, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(976, J$.F(17137, J$.R(17121, 'fieldOperand', fieldOperand, false, true), false)(J$.R(17129, 'operand', operand, false, false)))) {
                                var parts = J$.W(17153, 'parts', J$.T(17145, [], 10, false), parts, false, false);
                                for (var operator in J$.H(17257, J$.R(17161, 'operand', operand, false, false))) {
                                    J$.N(17265, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(17193, 'innerOperand', J$.G(17185, J$.R(17169, 'operand', operand, false, false), J$.R(17177, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(17249, J$.R(17201, 'parts', parts, false, false), 'push', false)(J$.F(17241, J$.R(17209, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(17217, undefined, 24, false), J$.R(17225, 'operator', operator, false, false), J$.R(17233, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(17297, J$.T(17289, {
                                    parts: J$.R(17273, 'parts', parts, false, false),
                                    implicitField: J$.T(17281, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(17345, J$.T(17337, {
                                    parts: J$.F(17321, J$.R(17305, 'parseQuery', parseQuery, false, true), false)(J$.R(17313, 'operand', operand, false, false)),
                                    implicitField: J$.T(17329, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(18313, J$e);
                        } finally {
                            if (J$.Fr(18321))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(17545, arguments.callee, this, arguments);
                            arguments = J$.N(17553, 'arguments', arguments, true, false, false);
                            field = J$.N(17561, 'field', field, true, false, false);
                            operand = J$.N(17569, 'operand', operand, true, false, false);
                            J$.N(17577, 'parts', parts, false, false, false);
                            J$.N(17585, 'operator', operator, false, false, false);
                            J$.N(17593, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(17409, 'parts', J$.T(17401, [], 10, false), parts, false, false);
                            for (var operator in J$.H(17513, J$.R(17417, 'operand', operand, false, false))) {
                                J$.N(17521, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(17449, 'subOperand', J$.G(17441, J$.R(17425, 'operand', operand, false, false), J$.R(17433, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(17505, J$.R(17457, 'parts', parts, false, false), 'push', false)(J$.F(17497, J$.R(17465, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(17473, 'field', field, false, false), J$.R(17481, 'operator', operator, false, false), J$.R(17489, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(17537, J$.R(17529, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(18329, J$e);
                        } finally {
                            if (J$.Fr(18337))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(17681, arguments.callee, this, arguments);
                            arguments = J$.N(17689, 'arguments', arguments, true, false, false);
                            obj = J$.N(17697, 'obj', obj, true, false, false);
                            J$.N(17705, 'key', key, false, false, false);
                            for (var key in J$.H(17665, J$.R(17601, 'obj', obj, false, false))) {
                                J$.N(17673, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(17657, J$.C(984, J$.B(1538, '===', J$.G(17625, J$.R(17609, 'key', key, false, false), J$.T(17617, 0, 22, false)), J$.T(17633, '$', 21, false))) ? J$.U(1554, '!', J$.B(1546, 'in', J$.R(17641, 'key', key, false, false), J$.R(17649, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(18345, J$e);
                        } finally {
                            if (J$.Fr(18353))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(17753, arguments.callee, this, arguments);
                            arguments = J$.N(17761, 'arguments', arguments, true, false, false);
                            value = J$.N(17769, 'value', value, true, false, false);
                            return J$.Rt(17745, J$.C(992, J$.B(1562, 'instanceof', J$.R(17713, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(17721, 'Object', undefined, true, true) : Object = J$.R(17721, 'Object', Object, true, true)))) ? J$.U(1578, '!', J$.B(1570, 'instanceof', J$.R(17729, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(17737, 'Array', undefined, true, true) : Array = J$.R(17737, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(18361, J$e);
                        } finally {
                            if (J$.Fr(18369))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(18009, 'mapValues', mapValues, false, false, false);
            J$.N(18017, 'matches', matches, false, false, false);
            J$.N(18025, 'Parse', Parse, false, false, false);
            J$.N(18033, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(18041, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(18057, 'isInclusive', J$.T(18049, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(18073, 'parseQuery', J$.T(18065, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(18089, 'parseFieldOperator', J$.T(18081, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(18105, 'parseElemMatch', J$.T(18097, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(18121, 'parseNot', J$.T(18113, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(18137, 'fieldOperand', J$.T(18129, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(18153, 'isObject', J$.T(18145, isObject, 12, false), true, false, false);
            J$.N(18161, 'Part', Part, false, false, false);
            var mapValues = J$.W(14897, 'mapValues', J$.F(14889, J$.I(typeof require === 'undefined' ? require = J$.R(14873, 'require', undefined, true, true) : require = J$.R(14873, 'require', require, true, true)), false)(J$.T(14881, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(14929, 'matches', J$.F(14921, J$.I(typeof require === 'undefined' ? require = J$.R(14905, 'require', undefined, true, true) : require = J$.R(14905, 'require', require, true, true)), false)(J$.T(14913, './matches', 21, false)), matches, false, true);
            J$.P(14969, J$.I(typeof exports === 'undefined' ? exports = J$.R(14937, 'exports', undefined, true, true) : exports = J$.R(14937, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(14961, J$.I(typeof require === 'undefined' ? require = J$.R(14945, 'require', undefined, true, true) : require = J$.R(14945, 'require', require, true, true)), false)(J$.T(14953, './DotNotationPointers', 21, false)));
            var Parse = J$.W(15049, 'Parse', J$.T(15041, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(15017, arguments.callee, this, arguments);
                            arguments = J$.N(15025, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(15033, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(15009, J$.R(14977, 'this', this, false, false), 'parts', J$.F(15001, J$.R(14985, 'parseQuery', parseQuery, false, true), false)(J$.R(14993, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(18169, J$e);
                        } finally {
                            if (J$.Fr(18177))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(15073, J$.R(15057, 'Parse', Parse, false, true), 'prototype', J$.T(15065, {}, 11, false));
            J$.P(15177, J$.G(15089, J$.R(15081, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(15169, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(15145, arguments.callee, this, arguments);
                            arguments = J$.N(15153, 'arguments', arguments, true, false, false);
                            callback = J$.N(15161, 'callback', callback, true, false, false);
                            return J$.Rt(15137, J$.F(15129, J$.R(15097, 'mapValues', mapValues, false, true), false)(J$.G(15113, J$.R(15105, 'this', this, false, false), 'parts'), J$.R(15121, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(18185, J$e);
                        } finally {
                            if (J$.Fr(18193))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(15281, J$.G(15193, J$.R(15185, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(15273, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(15249, arguments.callee, this, arguments);
                            arguments = J$.N(15257, 'arguments', arguments, true, false, false);
                            document = J$.N(15265, 'document', document, true, false, false);
                            return J$.Rt(15241, J$.F(15233, J$.R(15201, 'matches', matches, false, true), false)(J$.G(15217, J$.R(15209, 'this', this, false, false), 'parts'), J$.R(15225, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(18201, J$e);
                        } finally {
                            if (J$.Fr(18209))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(15361, J$.I(typeof exports === 'undefined' ? exports = J$.R(15289, 'exports', undefined, true, true) : exports = J$.R(15289, 'exports', exports, true, true)), 'parse', J$.T(15353, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(15329, arguments.callee, this, arguments);
                            arguments = J$.N(15337, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(15345, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(15321, J$.F(15313, J$.R(15297, 'Parse', Parse, false, true), true)(J$.R(15305, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(18217, J$e);
                        } finally {
                            if (J$.Fr(18225))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(15441, J$.I(typeof exports === 'undefined' ? exports = J$.R(15369, 'exports', undefined, true, true) : exports = J$.R(15369, 'exports', exports, true, true)), 'inclusive', J$.T(15433, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(15409, arguments.callee, this, arguments);
                            arguments = J$.N(15417, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(15425, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(15401, J$.F(15393, J$.R(15377, 'isInclusive', isInclusive, false, true), false)(J$.R(15385, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(18233, J$e);
                        } finally {
                            if (J$.Fr(18241))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(15481, 'complexFieldIndependantOperators', J$.T(15473, {
                $and: J$.T(15449, 1, 22, false),
                $or: J$.T(15457, 1, 22, false),
                $nor: J$.T(15465, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(15513, 'simpleFieldIndependantOperators', J$.T(15505, {
                $text: J$.T(15489, 1, 22, false),
                $comment: J$.T(15497, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(17993, 'Part', J$.T(17985, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(17929, arguments.callee, this, arguments);
                            arguments = J$.N(17937, 'arguments', arguments, true, false, false);
                            field = J$.N(17945, 'field', field, true, false, false);
                            operator = J$.N(17953, 'operator', operator, true, false, false);
                            operand = J$.N(17961, 'operand', operand, true, false, false);
                            parts = J$.N(17969, 'parts', parts, true, false, false);
                            implicitField = J$.N(17977, 'implicitField', implicitField, true, false, false);
                            if (J$.C(1000, J$.B(1586, '===', J$.R(17777, 'parts', parts, false, false), J$.T(17785, undefined, 24, false))))
                                parts = J$.W(17801, 'parts', J$.T(17793, [], 10, false), parts, false, false);
                            J$.P(17825, J$.R(17809, 'this', this, false, false), 'field', J$.R(17817, 'field', field, false, false));
                            J$.P(17849, J$.R(17833, 'this', this, false, false), 'operator', J$.R(17841, 'operator', operator, false, false));
                            J$.P(17873, J$.R(17857, 'this', this, false, false), 'operand', J$.R(17865, 'operand', operand, false, false));
                            J$.P(17897, J$.R(17881, 'this', this, false, false), 'parts', J$.R(17889, 'parts', parts, false, false));
                            J$.P(17921, J$.R(17905, 'this', this, false, false), 'implicitField', J$.R(17913, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(18377, J$e);
                        } finally {
                            if (J$.Fr(18385))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(18393, J$e);
        } finally {
            if (J$.Sr(18401))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

