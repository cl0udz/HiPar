"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_get_1 = __importDefault(require("lodash.get"));
class ArrayWrapper {
    constructor(_field, _index, _childSanitizations, _dotPath) {
        this._field = _field;
        this._index = _index;
        this._childSanitizations = _childSanitizations;
        this._dotPath = _dotPath;
        this._pointer = this._dotPath.concat(this._field).join('.');
    }
    _getDataCopy(data) {
        const value = lodash_get_1.default(data.tip, this._pointer);
        if (!Array.isArray(value)) {
            return null;
        }
        return {
            original: data.original,
            tip: null,
            parentArray: value,
            currentIndex: this._index === '*' ? 0 : Number(this._index),
        };
    }
    _executeSanitizations(data, config) {
        this._childSanitizations.forEach((sanitization) => sanitization.exec(data, config));
    }
    exec(data, config) {
        const dataCopy = this._getDataCopy(data);
        if (!dataCopy) {
            return true;
        }
        if (this._index !== '*') {
            dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];
            return this._executeSanitizations(dataCopy, config);
        }
        dataCopy.parentArray.forEach((item, index) => {
            dataCopy.tip = item;
            dataCopy.currentIndex = index;
            this._executeSanitizations(dataCopy, config);
        });
    }
}
exports.ArrayWrapper = ArrayWrapper;
