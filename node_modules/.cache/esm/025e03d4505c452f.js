"main";let ObjectID;_505‍.w("mongodb",[["ObjectID",["ObjectID"],function(v){ObjectID=v}]]);let db;_505‍.w("../../lib/mongo",[["db",["db"],function(v){db=v}]]);let utils;_505‍.w("../../lib/utils",[["default",["utils"],function(v){utils=v}]]);let parse;_505‍.w("../../lib/parse",[["default",["parse"],function(v){parse=v}]]);let webhooks;_505‍.w("../../lib/webhooks",[["default",["webhooks"],function(v){webhooks=v}]]);let OrdersService;_505‍.w("./orders",[["default",["OrdersService"],function(v){OrdersService=v}]]);






class OrdertTansactionsService {
	constructor() {}

	async addTransaction(order_id, data) {
		if (!_505‍.a("ObjectID",ObjectID).isValid(order_id)) {
			return Promise.reject('Invalid identifier');
		}
		let orderObjectID = new (_505‍.a("ObjectID",ObjectID))(order_id);
		const transaction = this.getValidDocumentForInsert(data);

		await _505‍.a("db",db).collection('orders').updateOne(
			{
				_id: orderObjectID
			},
			{
				$push: {
					transactions: transaction
				}
			}
		);

		const order = await _505‍.a("OrdersService",OrdersService).getSingleOrder(order_id);
		await _505‍.a("webhooks",webhooks).trigger({
			event: _505‍.a("webhooks",webhooks).events.TRANSACTION_CREATED,
			payload: order
		});
		return order;
	}

	async updateTransaction(order_id, transaction_id, data) {
		if (!_505‍.a("ObjectID",ObjectID).isValid(order_id) || !_505‍.a("ObjectID",ObjectID).isValid(transaction_id)) {
			return Promise.reject('Invalid identifier');
		}
		let orderObjectID = new (_505‍.a("ObjectID",ObjectID))(order_id);
		let transactionObjectID = new (_505‍.a("ObjectID",ObjectID))(transaction_id);
		const transaction = this.getValidDocumentForUpdate(data);

		await _505‍.a("db",db).collection('orders').updateOne(
			{
				_id: orderObjectID,
				'transactions.id': transactionObjectID
			},
			{
				$set: transaction
			}
		);

		const order = await _505‍.a("OrdersService",OrdersService).getSingleOrder(order_id);
		await _505‍.a("webhooks",webhooks).trigger({
			event: _505‍.a("webhooks",webhooks).events.TRANSACTION_UPDATED,
			payload: order
		});
		return order;
	}

	async deleteTransaction(order_id, transaction_id) {
		if (!_505‍.a("ObjectID",ObjectID).isValid(order_id) || !_505‍.a("ObjectID",ObjectID).isValid(transaction_id)) {
			return Promise.reject('Invalid identifier');
		}
		let orderObjectID = new (_505‍.a("ObjectID",ObjectID))(order_id);
		let transactionObjectID = new (_505‍.a("ObjectID",ObjectID))(transaction_id);

		await _505‍.a("db",db).collection('orders').updateOne(
			{
				_id: orderObjectID
			},
			{
				$pull: {
					transactions: {
						id: transactionObjectID
					}
				}
			}
		);

		const order = await _505‍.a("OrdersService",OrdersService).getSingleOrder(order_id);
		await _505‍.a("webhooks",webhooks).trigger({
			event: _505‍.a("webhooks",webhooks).events.TRANSACTION_DELETED,
			payload: order
		});
		return order;
	}

	getValidDocumentForInsert(data) {
		return {
			id: new (_505‍.a("ObjectID",ObjectID))(),
			transaction_id: _505‍.a("parse",parse).getString(data.transaction_id),
			amount: _505‍.a("parse",parse).getNumberIfPositive(data.amount) || 0,
			currency: _505‍.a("parse",parse).getString(data.currency),
			status: _505‍.a("parse",parse).getString(data.status),
			details: _505‍.a("parse",parse).getString(data.details),
			success: _505‍.a("parse",parse).getBooleanIfValid(data.success)
		};
	}

	getValidDocumentForUpdate(data) {
		if (Object.keys(data).length === 0) {
			return new Error('Required fields are missing');
		}

		let transaction = {};

		if (data.transaction_id !== undefined) {
			transaction['transactions.$.transaction_id'] = _505‍.a("parse",parse).getString(
				data.transaction_id
			);
		}

		if (data.amount !== undefined) {
			transaction['transactions.$.amount'] =
				_505‍.a("parse",parse).getNumberIfPositive(data.amount) || 0;
		}

		if (data.currency !== undefined) {
			transaction['transactions.$.currency'] = _505‍.a("parse",parse).getString(data.currency);
		}

		if (data.status !== undefined) {
			transaction['transactions.$.status'] = _505‍.a("parse",parse).getString(data.status);
		}

		if (data.details !== undefined) {
			transaction['transactions.$.details'] = _505‍.a("parse",parse).getString(data.details);
		}

		if (data.success !== undefined) {
			transaction['transactions.$.success'] = _505‍.a("parse",parse).getBooleanIfValid(
				data.success
			);
		}

		return transaction;
	}
}

_505‍.d(new OrdertTansactionsService());_505‍.u(["default"]);
