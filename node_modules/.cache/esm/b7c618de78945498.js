"main";let React,Fragment;_789‍.w("react",[["default",["React"],function(v){React=v}],["Fragment",["Fragment"],function(v){Fragment=v}]]);let PropTypes;_789‍.w("prop-types",[["default",["PropTypes"],function(v){PropTypes=v}]]);let MetaTags;_789‍.w("../components/metaTags",[["default",["MetaTags"],function(v){MetaTags=v}]]);let ProductDetails;_789‍.w("../components/productDetails",[["default",["ProductDetails"],function(v){ProductDetails=v}]]);




const ProductContainer = props => {
	const {
		addCartItem,
		getJSONLD,
		state: { productDetails, settings, categories }
	} = props;

	if (productDetails) {
		const { images } = productDetails;
		const imageUrl = images && images.length > 0 ? images[0].url : null;
		const title = productDetails.meta_title && productDetails.meta_title.length > 0 ? productDetails.meta_title : productDetails.name;
		const jsonld = getJSONLD(props.state);

		return React.createElement(
			Fragment,
			null,
			React.createElement(MetaTags, {
				title: title,
				description: productDetails.meta_description,
				canonicalUrl: productDetails.url,
				imageUrl: imageUrl,
				ogType: 'product',
				ogTitle: productDetails.name,
				ogDescription: productDetails.meta_description,
				jsonld: jsonld
			}),
			React.createElement(ProductDetails, {
				settings: settings,
				product: productDetails,
				addCartItem: addCartItem,
				categories: categories
			})
		);
	}
	return null;
};

ProductContainer.propTypes = {
	getJSONLD: PropTypes.func.isRequired,
	addCartItem: PropTypes.func.isRequired,
	state: PropTypes.shape({
		settings: PropTypes.shape({}),
		productDetails: PropTypes.shape({}),
		categories: PropTypes.arrayOf(PropTypes.shape({}))
	}).isRequired
};

_789‍.d(ProductContainer);