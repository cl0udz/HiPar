"main";_2a9‍.x([["default",()=>Gallery]]);let React,Fragment;_2a9‍.w("react",[["default",["React"],function(v){React=v}],["Fragment",["Fragment"],function(v){Fragment=v}]]);let NavLink;_2a9‍.w("react-router-dom",[["NavLink",["NavLink"],function(v){NavLink=v}]]);let ImageGallery;_2a9‍.w("react-image-gallery",[["default",["ImageGallery"],function(v){ImageGallery=v}]]);let Lightbox;_2a9‍.w("react-image-lightbox",[["default",["Lightbox"],function(v){Lightbox=v}]]);let helper;_2a9‍.w("../../lib/helper",[["*",null,function(v){helper=v}]]);let themeSettings,text;_2a9‍.w("../../lib/settings",[["themeSettings",["themeSettings"],function(v){themeSettings=v}],["text",["text"],function(v){text=v}]]);






               class Gallery extends React.Component {
	constructor(props) {
		super(props);

		this.openLightbox = () => {
			this.setState({ lightboxIsOpen: true });
		};

		this.closeLightbox = () => {
			this.setState({ lightboxIsOpen: false });
		};

		this.setPhotoIndex = index => {
			this.setState({ lightboxPhotoIndex: index });
		};

		this.state = {
			lightboxIsOpen: false,
			lightboxPhotoIndex: 0
		};
	}

	render() {
		const { images } = this.props;
		const { lightboxIsOpen, lightboxPhotoIndex } = this.state;

		if (images && images.length > 0) {
			const imagesArray = images.map(image => ({
				original: helper.getThumbnailUrl(image.url, themeSettings.bigThumbnailWidth),
				thumbnail: helper.getThumbnailUrl(image.url, themeSettings.previewThumbnailWidth),
				originalAlt: image.alt,
				thumbnailAlt: image.alt
			}));

			const originalImages = images.map(image => image.url);
			const showThumbnails = images.length > 1;

			return React.createElement(
				Fragment,
				null,
				React.createElement(ImageGallery, {
					items: imagesArray,
					showThumbnails: showThumbnails,
					onClick: this.openLightbox,
					lazyLoad: true,
					slideInterval: 2000,
					showNav: themeSettings.product_gallery_shownav === true,
					showBullets: showThumbnails,
					showPlayButton: false,
					showFullscreenButton: false,
					slideOnThumbnailHover: true,
					thumbnailPosition: themeSettings.product_thumbnail_position,
					onSlide: this.setPhotoIndex
				}),
				lightboxIsOpen && React.createElement(Lightbox, {
					reactModalStyle: { overlay: { zIndex: 1099 } },
					mainSrc: originalImages[lightboxPhotoIndex],
					nextSrc: originalImages[(lightboxPhotoIndex + 1) % originalImages.length],
					prevSrc: originalImages[(lightboxPhotoIndex + originalImages.length - 1) % originalImages.length],
					onCloseRequest: this.closeLightbox,
					onMovePrevRequest: () => this.setState({
						lightboxPhotoIndex: (lightboxPhotoIndex + originalImages.length - 1) % originalImages.length
					}),
					onMoveNextRequest: () => this.setState({
						lightboxPhotoIndex: (lightboxPhotoIndex + 1) % originalImages.length
					})
				})
			);
		} else {
			return React.createElement('div', { className: 'large-image-placeholder' });
		}
	}
}