"main";let OrdersService;_505‍.w("../services/orders/orders",[["default",["OrdersService"],function(v){OrdersService=v}]]);let SettingsService;_505‍.w("../services/settings/settings",[["default",["SettingsService"],function(v){SettingsService=v}]]);let PaymentGatewaysService;_505‍.w("../services/settings/paymentGateways",[["default",["PaymentGatewaysService"],function(v){PaymentGatewaysService=v}]]);let PayPalCheckout;_505‍.w("./PayPalCheckout",[["default",["PayPalCheckout"],function(v){PayPalCheckout=v}]]);let LiqPay;_505‍.w("./LiqPay",[["default",["LiqPay"],function(v){LiqPay=v}]]);let StripeElements;_505‍.w("./StripeElements",[["default",["StripeElements"],function(v){StripeElements=v}]]);






const getOptions = orderId => {
	return Promise.all([
		_505‍.a("OrdersService",OrdersService).getSingleOrder(orderId),
		_505‍.a("SettingsService",SettingsService).getSettings()
	]).then(([order, settings]) => {
		if (order && order.payment_method_id) {
			return _505‍.a("PaymentGatewaysService",PaymentGatewaysService).getGateway(
				order.payment_method_gateway
			).then(gatewaySettings => {
				const options = {
					gateway: order.payment_method_gateway,
					gatewaySettings: gatewaySettings,
					order: order,
					amount: order.grand_total,
					currency: settings.currency_code
				};

				return options;
			});
		}
	});
};

const getPaymentFormSettings = orderId => {
	return getOptions(orderId).then(options => {
		switch (options.gateway) {
			case 'paypal-checkout':
				return _505‍.a("PayPalCheckout",PayPalCheckout).getPaymentFormSettings(options);
			case 'liqpay':
				return _505‍.a("LiqPay",LiqPay).getPaymentFormSettings(options);
			case 'stripe-elements':
				return _505‍.a("StripeElements",StripeElements).getPaymentFormSettings(options);
			default:
				return Promise.reject('Invalid gateway');
		}
	});
};

const paymentNotification = (req, res, gateway) => {
	return _505‍.a("PaymentGatewaysService",PaymentGatewaysService).getGateway(gateway).then(gatewaySettings => {
		const options = {
			gateway: gateway,
			gatewaySettings: gatewaySettings,
			req: req,
			res: res
		};

		switch (gateway) {
			case 'paypal-checkout':
				return _505‍.a("PayPalCheckout",PayPalCheckout).paymentNotification(options);
			case 'liqpay':
				return _505‍.a("LiqPay",LiqPay).paymentNotification(options);
			default:
				return Promise.reject('Invalid gateway');
		}
	});
};

const processOrderPayment = async order => {
	const orderAlreadyCharged = order.paid === true;
	if (orderAlreadyCharged) {
		return true;
	}

	const gateway = order.payment_method_gateway;
	const gatewaySettings = await _505‍.a("PaymentGatewaysService",PaymentGatewaysService).getGateway(gateway);
	const settings = await _505‍.a("SettingsService",SettingsService).getSettings();

	switch (gateway) {
		case 'stripe-elements':
			return _505‍.a("StripeElements",StripeElements).processOrderPayment({
				order,
				gatewaySettings,
				settings
			});
		default:
			return Promise.reject('Invalid gateway');
	}
};

_505‍.d({
	getPaymentFormSettings: getPaymentFormSettings,
	paymentNotification: paymentNotification,
	processOrderPayment: processOrderPayment
});_505‍.u(["default"]);
