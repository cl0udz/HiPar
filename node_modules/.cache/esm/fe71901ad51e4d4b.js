"main";let React;_d51‍.w("react",[["default",["React"],function(v){React=v}]]);let Route;_d51‍.w("react-router",[["Route",["Route"],function(v){Route=v}]]);let Link;_d51‍.w("react-router-dom",[["Link",["Link"],function(v){Link=v}]]);let connect;_d51‍.w("react-redux",[["connect",["connect"],function(v){connect=v}]]);let animateScroll;_d51‍.w("react-scroll",[["animateScroll",["animateScroll"],function(v){animateScroll=v}]]);let IndexContainer;_d51‍.w("./containers/index",[["default",["IndexContainer"],function(v){IndexContainer=v}]]);let SharedContainer;_d51‍.w("./containers/shared",[["default",["SharedContainer"],function(v){SharedContainer=v}]]);let CategoryContainer;_d51‍.w("./containers/category",[["default",["CategoryContainer"],function(v){CategoryContainer=v}]]);let ProductContainer;_d51‍.w("./containers/product",[["default",["ProductContainer"],function(v){ProductContainer=v}]]);let PageContainer;_d51‍.w("./containers/page",[["default",["PageContainer"],function(v){PageContainer=v}]]);let CheckoutContainer;_d51‍.w("./containers/checkout",[["default",["CheckoutContainer"],function(v){CheckoutContainer=v}]]);let CheckoutSuccessContainer;_d51‍.w("./containers/checkoutSuccess",[["default",["CheckoutSuccessContainer"],function(v){CheckoutSuccessContainer=v}]]);let NotFoundContainer;_d51‍.w("./containers/notfound",[["default",["NotFoundContainer"],function(v){NotFoundContainer=v}]]);let SearchContainer;_d51‍.w("./containers/search",[["default",["SearchContainer"],function(v){SearchContainer=v}]]);let setCurrentPage;_d51‍.w("./actions",[["setCurrentPage",["setCurrentPage"],function(v){setCurrentPage=v}]]);let PAGE,PRODUCT_CATEGORY,PRODUCT,RESERVED,SEARCH;_d51‍.w("./pageTypes",[["PAGE",["PAGE"],function(v){PAGE=v}],["PRODUCT_CATEGORY",["PRODUCT_CATEGORY"],function(v){PRODUCT_CATEGORY=v}],["PRODUCT",["PRODUCT"],function(v){PRODUCT=v}],["RESERVED",["RESERVED"],function(v){RESERVED=v}],["SEARCH",["SEARCH"],function(v){SEARCH=v}]]);


















class SwitchContainers extends React.Component {
	constructor(props) {
		super(props);
	}

	componentWillReceiveProps(nextProps) {
		this.props.setCurrentPage(nextProps.location);

		if (nextProps.location && this.props.location) {
			const pathnameChanged = nextProps.location.pathname !== this.props.location.pathname;
			const queryChanged = nextProps.location.search !== this.props.location.search;
			const isSearchPage = nextProps.location.pathname === '/search';

			if (pathnameChanged || queryChanged && isSearchPage) {
				animateScroll.scrollToTop({
					duration: 500,
					delay: 100,
					smooth: true
				});
			}
		}
	}

	render() {
		const { history, location, currentPage } = this.props;
		const locationPathname = location && location.pathname ? location.pathname : '/';

		switch (currentPage.type) {
			case PRODUCT:
				return React.createElement(ProductContainer, null);
			case PRODUCT_CATEGORY:
				return React.createElement(CategoryContainer, null);
			case SEARCH:
				return React.createElement(SearchContainer, null);
			case PAGE:
				if (locationPathname === '/') {
					return React.createElement(IndexContainer, null);
				} else if (locationPathname === '/checkout') {
					return React.createElement(CheckoutContainer, null);
				}
				if (locationPathname === '/checkout-success') {
					return React.createElement(CheckoutSuccessContainer, null);
				} else {
					return React.createElement(PageContainer, null);
				}
			default:
				return React.createElement(NotFoundContainer, null);
		}
	}
}

const mapStateToProps = (state, ownProps) => {
	return {
		currentPage: state.app.currentPage
	};
};

const mapDispatchToProps = (dispatch, ownProps) => {
	return {
		setCurrentPage: location => {
			dispatch(setCurrentPage(location));
		}
	};
};

const SwitchContainersConnected = connect(mapStateToProps, mapDispatchToProps)(SwitchContainers);

const App = () => React.createElement(
	SharedContainer,
	null,
	React.createElement(Route, { component: SwitchContainersConnected })
);

_d51‍.d(App);