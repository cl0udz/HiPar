{"8":[11,5,11,48],"9":[1,19,1,26],"10":[11,22,11,47],"16":[11,5,11,48],"17":[1,27,1,53],"18":[11,20,11,48],"25":[1,19,1,54],"33":[1,19,1,54],"41":[1,19,1,54],"49":[2,22,2,29],"57":[2,30,2,67],"65":[2,22,2,68],"73":[2,22,2,70],"81":[2,22,2,70],"89":[2,22,2,70],"97":[4,25,4,33],"105":[4,25,4,43],"113":[4,25,4,43],"121":[4,25,4,43],"129":[5,33,5,50],"137":[5,33,5,59],"145":[5,33,5,59],"153":[5,33,5,59],"161":[6,14,6,37],"169":[6,14,6,37],"177":[6,14,6,37],"185":[7,12,7,18],"193":[7,12,7,18],"201":[7,12,7,18],"209":[11,5,11,16],"217":[11,22,11,26],"225":[11,30,11,47],"233":[12,3,12,17],"241":[12,18,12,35],"249":[12,37,12,41],"257":[13,19,13,23],"265":[16,16,16,41],"273":[16,47,16,51],"281":[16,16,16,52],"283":[16,16,16,46],"289":[16,59,16,65],"297":[16,16,16,66],"299":[16,16,16,58],"305":[16,67,16,68],"313":[16,16,16,69],"321":[16,16,16,69],"329":[16,9,16,70],"337":[18,16,18,18],"345":[18,16,18,18],"353":[18,9,18,19],"361":[17,9,19,8],"369":[14,10,20,6],"377":[14,10,20,6],"385":[14,10,20,6],"393":[14,10,20,6],"401":[12,43,20,8],"409":[12,3,20,9],"417":[12,3,20,10],"425":[1,1,22,2],"433":[1,1,22,2],"441":[1,1,22,2],"449":[1,1,22,2],"457":[1,1,22,2],"465":[1,1,22,2],"473":[1,1,22,2],"481":[14,10,20,6],"489":[14,10,20,6],"497":[11,1,22,2],"505":[1,1,22,2],"513":[1,1,22,2],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/core-js/modules/es.function.name.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/core-js/modules/es.function.name_jalangi_.js","code":"var DESCRIPTORS = require('../internals/descriptors');\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar FunctionPrototype = Function.prototype;\nvar FunctionPrototypeToString = FunctionPrototype.toString;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.github.io/ecma262/#sec-function-instances-name\nif (DESCRIPTORS && !(NAME in FunctionPrototype)) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return FunctionPrototypeToString.call(this).match(nameRE)[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n"}