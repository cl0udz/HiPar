J$.iids = {"8":[11,27,11,63],"9":[1,16,1,23],"10":[11,27,11,63],"16":[11,10,11,103],"17":[1,24,1,48],"18":[11,67,11,76],"25":[1,16,1,49],"26":[11,66,11,76],"33":[1,16,1,49],"34":[11,79,11,102],"41":[1,16,1,49],"49":[2,15,2,22],"57":[2,23,2,49],"65":[2,15,2,50],"73":[2,15,2,50],"81":[2,15,2,50],"89":[3,23,3,30],"97":[3,31,3,63],"105":[3,23,3,64],"113":[3,23,3,64],"121":[3,23,3,64],"129":[5,13,5,28],"137":[5,29,5,36],"145":[5,13,5,37],"153":[5,13,5,37],"161":[5,13,5,37],"169":[9,1,9,7],"177":[11,10,11,18],"185":[11,19,11,21],"193":[11,10,11,22],"201":[11,39,11,41],"209":[11,42,11,47],"217":[11,39,11,48],"225":[11,39,11,48],"233":[11,54,11,63],"241":[11,68,11,76],"249":[11,79,11,86],"257":[11,87,11,89],"265":[11,79,11,90],"273":[11,94,11,102],"281":[11,10,11,103],"289":[11,3,11,104],"297":[9,18,12,2],"305":[9,18,12,2],"313":[9,18,12,2],"321":[9,18,12,2],"329":[9,18,12,2],"337":[9,1,12,2],"345":[9,1,12,3],"353":[1,1,13,1],"361":[1,1,13,1],"369":[1,1,13,1],"377":[1,1,13,1],"385":[1,1,13,1],"393":[11,27,11,102],"401":[9,18,12,2],"409":[9,18,12,2],"417":[1,1,13,1],"425":[1,1,13,1],"nBranches":4,"originalCodeFileName":"/home/james/nodejs/HiPar/node_modules/core-js/internals/is-regexp.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/node_modules/core-js/internals/is-regexp_jalangi_.js","code":"var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n"};
jalangiLabel1007:
    while (true) {
        try {
            J$.Se(353, '/home/james/nodejs/HiPar/node_modules/core-js/internals/is-regexp_jalangi_.js', '/home/james/nodejs/HiPar/node_modules/core-js/internals/is-regexp.js');
            J$.N(361, 'isObject', isObject, 0);
            J$.N(369, 'classof', classof, 0);
            J$.N(377, 'wellKnownSymbol', wellKnownSymbol, 0);
            J$.N(385, 'MATCH', MATCH, 0);
            var isObject = J$.X1(41, J$.W(33, 'isObject', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, '../internals/is-object', 21, false)), isObject, 3));
            var classof = J$.X1(81, J$.W(73, 'classof', J$.F(65, J$.R(49, 'require', require, 2), 0)(J$.T(57, '../internals/classof-raw', 21, false)), classof, 3));
            var wellKnownSymbol = J$.X1(121, J$.W(113, 'wellKnownSymbol', J$.F(105, J$.R(89, 'require', require, 2), 0)(J$.T(97, '../internals/well-known-symbol', 21, false)), wellKnownSymbol, 3));
            var MATCH = J$.X1(161, J$.W(153, 'MATCH', J$.F(145, J$.R(129, 'wellKnownSymbol', wellKnownSymbol, 1), 0)(J$.T(137, 'match', 21, false)), MATCH, 3));
            J$.X1(345, J$.P(337, J$.R(169, 'module', module, 2), 'exports', J$.T(329, function (it) {
                jalangiLabel1006:
                    while (true) {
                        try {
                            J$.Fe(297, arguments.callee, this, arguments);
                            arguments = J$.N(305, 'arguments', arguments, 4);
                            it = J$.N(313, 'it', it, 4);
                            J$.N(321, 'isRegExp', isRegExp, 0);
                            var isRegExp;
                            return J$.X1(289, J$.Rt(281, J$.C(16, J$.F(193, J$.R(177, 'isObject', isObject, 1), 0)(J$.R(185, 'it', it, 0))) ? J$.X1(393, J$.C(8, J$.B(10, '!==', isRegExp = J$.W(225, 'isRegExp', J$.G(217, J$.R(201, 'it', it, 0), J$.R(209, 'MATCH', MATCH, 1), 4), isRegExp, 0), J$.T(233, undefined, 24, false), 0))) ? J$.U(26, '!', J$.U(18, '!', J$.R(241, 'isRegExp', isRegExp, 0))) : J$.B(34, '==', J$.F(265, J$.R(249, 'classof', classof, 1), 0)(J$.R(257, 'it', it, 0)), J$.T(273, 'RegExp', 21, false), 0) : J$._()));
                        } catch (J$e) {
                            J$.Ex(401, J$e);
                        } finally {
                            if (J$.Fr(409))
                                continue jalangiLabel1006;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 297), 0));
        } catch (J$e) {
            J$.Ex(417, J$e);
        } finally {
            if (J$.Sr(425)) {
                J$.L();
                continue jalangiLabel1007;
            } else {
                J$.L();
                break jalangiLabel1007;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
