"use strict";

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

var aparse = require('acorn-node').parse;

function parse(src, opts) {
  if (!opts) opts = {};
  return aparse(src, opts);
}

module.exports = function (src, file, opts) {
  if (typeof src !== 'string') src = String(src);

  try {
    eval('throw "STOP"; (function () { ' + src + '\n})()');
    return;
  } catch (err) {
    if (err === 'STOP') return undefined;
    if (err.constructor.name !== 'SyntaxError') return err;
    return errorInfo(src, file, opts);
  }
};

function errorInfo(src, file, opts) {
  try {
    parse(src, opts);
  } catch (err) {
    return new ParseError(err, src, file);
  }

  return undefined;
}

function ParseError(err, src, file) {
  SyntaxError.call(this);
  this.message = err.message.replace(/\s+\(\d+:\d+\)$/, '');
  this.line = err.loc.line;
  this.column = err.loc.column + 1;
  this.annotated = '\n' + (file || '(anonymous file)') + ':' + this.line + '\n' + src.split('\n')[this.line - 1] + '\n' + Array(this.column).join(' ') + '^' + '\n' + 'ParseError: ' + this.message;
}

ParseError.prototype = Object.create(SyntaxError.prototype);

ParseError.prototype.toString = function () {
  return this.annotated;
};

ParseError.prototype.inspect = function () {
  return this.annotated;
};