import path from 'path';
import { JSHINT } from 'jshint';
import { BasePipe } from '../pipe';


export default class ExtPipe extends BasePipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js'
        });

        this.defaultState({
            broken: [],
            jshintrcs: {}
        });

        if (!/\.jshintrc/.test(this.config.pattern)) {
            this.config.pattern = `{${this.config.pattern},**/.jshintrc}`;
        }
    }

    static schema() {
        return {
            description: 'Hint JavaScript resources.'
        };
    }

    findHints(pathname) {
        const dirname = path.dirname(pathname);
        if (this.state.jshintrcs[dirname]) {
            return this.state.jshintrcs[dirname];
        } else if (dirname !== '.') {
            return this.findHints(dirname);
        } else {
            return {};
        }
    }

    async remoteChange(file) {
        if (/\.jshintrc$/.test(file.name)) {
            try {
                const dir = path.dirname(file.name);
                this.state.jshintrcs[dir] = JSON.parse(await file.content());
            } catch (err) {
                this.log('error', err);
            }
        } else {
            return super.remoteChange(file);
        }
    }

    async generate(file) {
        const content = (await file.source.content()).toString();
        const hints = this.findHints(file.name);
        const lintok = JSHINT(content, hints);
        if (!lintok) {
            const err = JSHINT.errors[0];
            throw new Error(`Line ${err.line}:${err.reason}`);
        }
        return content;
    }
}
