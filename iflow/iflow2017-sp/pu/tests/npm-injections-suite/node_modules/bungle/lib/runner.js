'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Runner = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config = require('./config');

var _logger = require('./logger');

var _pipeline = require('./pipeline');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Runner = exports.Runner = function () {
    function Runner() {
        _classCallCheck(this, Runner);

        this.pipes = {};
    }

    _createClass(Runner, [{
        key: 'loadPipes',
        value: function loadPipes(names) {
            var extexp = /\.(js|coffee)$/;
            var ext = module.filename.replace(/.*\./, '');
            var pipesdir = _path2.default.join(__dirname, 'plugins');

            if (!names) {
                names = _fs2.default.readdirSync(pipesdir).filter(function (f) {
                    return extexp.test(f);
                }).map(function (f) {
                    return f.replace(extexp, '');
                });
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var name = _step.value;

                    if (this.pipes[name]) {
                        continue;
                    }

                    var filename = _path2.default.resolve(pipesdir, name);
                    if (!_fs2.default.existsSync(filename + '.' + ext)) {
                        process.stdout.write('Error: Pipe ' + name + ' does not exist\n');
                        return null;
                    }

                    this.pipes[name] = require(_path2.default.resolve(filename)).default;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return this.pipes;
        }
    }, {
        key: 'run',
        value: function run(config) {
            var pipes = config && config.pipes || {};
            var names = Object.values(pipes).filter(function (p) {
                return p.enabled !== false;
            }).map(function (p) {
                return p.type;
            });

            var pipeModules = this.loadPipes(names);
            if (!pipeModules) {
                return;
            }

            var logcfg = config && config.bungle && config.bungle.logger || {};

            this.log = new _logger.Logger(logcfg);
            this.cfg = new _config.Config(config, this.log, this.pipes);
            if (!this.cfg.ok) {
                return null;
            }
            return this.pipeline = new _pipeline.Pipeline(this.log, this.cfg);
        }
    }]);

    return Runner;
}();
