import path from 'path';
import { InputNamesPipe } from '../pipe';


export default class ExtPipe extends InputNamesPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js'
        });

        this.dir = path.dirname(this.config.filename);
    }

    static schema() {
        return {
            description:
                'Create module that automatically imports all other modules.',
            properties: {
                filename: {
                    description: 'Filename of the compiled module',
                    type: 'string'
                }
            },
            required: ['filename']
        };
    }

    sanitize(f) {
        return f.replace(/\.js$/, '');
    }

    async generate(/*file*/) {
        if (this.config.debug) {
            this.log('debug', '#C# ' + this.config.filename);
        }

        const modules = [];
        const sorted = Object.keys(this.state.remoteFiles).sort();

        for (let pathname of sorted) {
            const sanename = this.sanitize(pathname);
            const id = sanename.replace(/[\/-]/g, '_');
            const src = `./${path.relative(this.dir, sanename)}`;

            modules.push(`import ${id} from '${src}';`);
        }

        modules.push('export default null;');
        return modules.join('\n');
    }
}
