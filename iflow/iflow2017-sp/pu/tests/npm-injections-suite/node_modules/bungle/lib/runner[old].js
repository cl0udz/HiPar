import fs from 'fs';
import path from 'path';

import { Config } from './config';
import { Logger } from './logger';
import { Pipeline } from './pipeline';


export class Runner {
    constructor() {
        this.pipes = {};
    }

    loadPipes(names) {
        const extexp = /\.(js|coffee)$/;
        const ext = module.filename.replace(/.*\./, '');
        const pipesdir = path.join(__dirname, 'plugins');

        if (!names) {
            names = fs.readdirSync(pipesdir)
                .filter(f => extexp.test(f))
                .map(f => f.replace(extexp, ''));
        }

        for (let name of names) {
            if (this.pipes[name]) {
                continue;
            }

            const filename = path.resolve(pipesdir, name);
            if (!fs.existsSync(`${filename}.${ext}`)) {
                process.stdout.write(`Error: Pipe ${name} does not exist\n`);
                return null;
            }

            this.pipes[name] = require(path.resolve(filename)).default;
        }
        return this.pipes;
    }

    run(config) {
        const pipes = (config && config.pipes) || {};
        const names = Object.values(pipes)
            .filter(p => p.enabled !== false)
            .map(p => p.type);

        const pipeModules = this.loadPipes(names);
        if (!pipeModules) {
            return;
        }

        const logcfg = config && config.bungle && config.bungle.logger || {};

        this.log = new Logger(logcfg);
        this.cfg = new Config(config, this.log, this.pipes);
        if (!this.cfg.ok) {
            return null;
        }
        return this.pipeline = new Pipeline(this.log, this.cfg);
    }
}
