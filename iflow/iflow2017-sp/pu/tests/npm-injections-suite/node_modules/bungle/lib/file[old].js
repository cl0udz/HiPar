export class File {
    constructor(pipe, obj) {
        this.pipe = pipe;

        this.name = obj.name;
        this.mtime = obj.mtime || null;
        this.addCount = obj.addCount || 0;
        this.origin = obj.origin || null;
        this.error = null;
        this.sources = obj.sources || [];
        this.promise = Promise.resolve();
    }

    static fromJSON(pipe, obj) {
        return new File(pipe, obj);
    }

    toJSON() {
        return {
            type: 'file',
            name: this.name,
            mtime: this.mtime,
            addCount: this.addCount,
            origin: this.origin,
            error: this.error,
            sources: this.sources
        };
    }

    setError(error) {
        if (error) {
            this.pipe.log('error', `BROKEN ${this.name}\n${error}`);
        } else {
            if (this.error) {
                this.pipe.log('info', `FIXED ${this.name}`);
            }
        }
        this.error = error;
    }

    async content() {
        try {
            const content = await this.pipe.generate(this);
            this.setError(null);
            return content;
        } catch (err) {
            this.setError(err);
            return '';
        }
    }

    get source() {
        return this.pipe.remoteFile(this.sources[0]);
    }
}
