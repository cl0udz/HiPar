'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Config = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _tv = require('tv4');

var _tv2 = _interopRequireDefault(_tv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function serializeObject(obj) {
    function type(x) {
        var t = typeof x === 'undefined' ? 'undefined' : _typeof(x);
        if (t === 'object' && x instanceof Array) {
            return 'array';
        } else {
            return t;
        }
    }

    var encodeMap = {
        boolean: function boolean(b) {
            return 'b' + (b ? 1 : 0);
        },
        string: function string(s) {
            return s.length + ':' + s;
        },
        number: function number(i) {
            return 'i' + i + 'e';
        },
        array: function array(a) {
            var results = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = a[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var e = _step.value;

                    results.push(encode(e));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return 'a' + results.join('') + 'e';
        },
        object: function object(o) {
            if (o === null) {
                return 'n';
            }
            var results = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(o).sort()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    results.push('' + encode(key) + encode(o[key]));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return 'o' + results.join('') + 'e';
        }
    };

    function encode(x) {
        return encodeMap[type(x)](x);
    }

    return encode(obj);
}

var Config = exports.Config = function () {
    function Config(config, logger, pipes) {
        _classCallCheck(this, Config);

        this.config = config;
        this.logger = logger;
        this.pipes = pipes;

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = Object.entries(this.config.pipes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _step3$value = _slicedToArray(_step3.value, 2),
                    name = _step3$value[0],
                    meta = _step3$value[1];

                if (meta.enabled === false) {
                    this.config.pipes[name] = meta = {
                        type: 'noop'
                    };
                }
                delete meta.enabled;
                meta.id = name;

                meta.inputs = meta.inputs || [];
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = Object.values(meta.inputs)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var input = _step4.value;

                        if (!this.config.pipes[input]) {
                            this.log('error', 'Pipe ' + name + ' references an unknown input pipe ' + input);
                            return {
                                ok: false
                            };
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        this.schema = {
            $schema: 'http://json-schema.org/draft-04/schema#',
            id: 'http://git.savensis.net/bungle-config-schema#',
            title: 'Bungle',
            description: 'Bungle pipeline configuration',
            type: 'object',
            properties: {
                bungle: {
                    description: 'Bungle configuration section',
                    type: 'object',
                    properties: {
                        logger: {
                            type: 'object',
                            properties: {
                                console: {
                                    type: 'string'
                                },
                                notify: {
                                    type: 'string'
                                }
                            },
                            additionalProperties: false
                        },
                        checkconfig: {
                            type: 'boolean'
                        },
                        reset: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                hash: {
                    description: 'Config file hash, added on the fly',
                    type: 'string'
                },
                profiles: {
                    description: 'Configuration profiles of the pipeline',
                    type: 'object',
                    patternProperties: {
                        '^.+$': {
                            description: 'Configuration profile instance',
                            type: 'object',
                            properties: {
                                description: {
                                    type: 'string',
                                    description: 'Profile description shown in help'
                                },
                                config: {
                                    type: 'object',
                                    description: 'Profile config'
                                }
                            },
                            required: ['description', 'config'],
                            additionalProperties: false
                        },
                        additionalProperties: false
                    },
                    additionalProperties: false
                },
                pipes: {
                    description: 'The pipe instances to create for this pipeline',
                    type: 'object',
                    patternProperties: {
                        '^.+$': {
                            description: 'Pipe instance config',
                            type: 'object',
                            oneOf: []
                        }
                    }
                }
            },
            required: ['bungle', 'pipes'],
            additionalProperties: false
        };

        this.defaultFragmentProperties = {
            description: {
                description: 'Description of the pipe\'s function in the pipeline',
                type: 'string'
            },
            pattern: {
                description: 'Input accept pattern',
                type: 'string'
            },
            passthrough: {
                description: 'Pass unaccepted inputs through pipe (default: true)',
                type: 'boolean'
            },
            enabled: {
                description: 'Enable this pipe (default: false)',
                type: 'boolean'
            },
            debug: {
                description: 'Verbose pipe operations (default: false)',
                type: 'boolean'
            },
            inputs: {
                description: 'Connect inputs to these pipes (default: [])',
                type: 'array',
                items: {
                    type: 'string',
                    minItems: 1,
                    uniqueItems: true
                }
            }
        };

        if (this.config.bungle.checkconfig) {
            if (!this.validate(this.pipes)) {
                return {
                    ok: false
                };
            }
        }

        this.ok = true;
        this.config.hash = _crypto2.default.createHash('sha1').update(require(_path2.default.join(__dirname, '..', 'package.json')).version).update(serializeObject(this.config.pipes)).digest('hex');
        this.log('verbose', 'Config hash ' + this.config.hash);
    }

    _createClass(Config, [{
        key: 'validate',
        value: function validate(pipes) {
            var fragments = this.schema.properties.pipes.patternProperties['^.+$'].oneOf;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = Object.entries(pipes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _step5$value = _slicedToArray(_step5.value, 2),
                        _id = _step5$value[0],
                        _pipe = _step5$value[1];

                    var _fragment = _pipe.schema() || {};
                    _fragment.properties = _fragment.properties || {};

                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = Object.entries(this.defaultFragmentProperties)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var _step7$value = _slicedToArray(_step7.value, 2),
                                k = _step7$value[0],
                                v = _step7$value[1];

                            _fragment.properties[k] = v;
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }

                    _fragment.properties.type = {
                        description: _id,
                        'enum': [_id]
                    };
                    _fragment.properties.id = {
                        type: 'string'
                    };
                    _fragment.additionalProperties = false;
                    _fragment.required = _fragment.required || [];
                    _fragment.required.push('type');
                    fragments.push(_fragment);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var config = this.config;
            var validationStatus = _tv2.default.validate(config, this.schema);
            if (validationStatus === false) {
                if (_tv2.default.error.code === 11) {
                    var subErrors = _tv2.default.error.subErrors.filter(function (e) {
                        return e.code !== 1;
                    });
                    if (subErrors.length > 1) {
                        var dataPath = _tv2.default.error.dataPath;
                        var id = _tv2.default.error.dataPath.replace(/.*\//, '');
                        var pipe = config.pipes[id];
                        var fragment = null;
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = undefined;

                        try {
                            for (var _iterator6 = Object.values(fragments)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                var f = _step6.value;

                                if (f.properties.type['enum'][0] === pipe.type) {
                                    fragment = f;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                    _iterator6.return();
                                }
                            } finally {
                                if (_didIteratorError6) {
                                    throw _iteratorError6;
                                }
                            }
                        }

                        if (fragment) {
                            _tv2.default.validate(pipe, fragment);
                            var dp = _tv2.default.error.dataPath;
                            this.log('error', 'Pipe validation: ' + (dataPath + dp));
                            this.log('error', _tv2.default.error.message);
                            return false;
                        } else {
                            this.log('error', 'Pipe type unknown: ' + pipe.type);
                            this.log('error', 'Run "bungle -L" to list known types');
                            return false;
                        }
                    } else if (subErrors.length > 0) {
                        this.log('error', 'validation: ' + subErrors[0].dataPath);
                        this.log('error', subErrors[0].message);
                        return false;
                    } else {
                        this.log('error', 'validation: ' + _tv2.default.error.dataPath);
                        this.log('error', _tv2.default.error.message);
                        return false;
                    }
                } else {
                    this.log('error', 'Top-level validation: ' + _tv2.default.error.dataPath);
                    this.log('error', _tv2.default.error.message);
                    return false;
                }
            }
            this.log('verbose', 'Validation successful');
            return validationStatus;
        }
    }, {
        key: 'log',
        value: function log(level) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var applyargs = [level, 'config'].concat(args);
            return this.logger.log.apply(this.logger, applyargs);
        }
    }]);

    return Config;
}();
