{
  "name": "modulify",
  "version": "0.1.0-1",
  "description": "Generate nodejs modules from plain old javascript",
  "main": "./src/modulify.js",
  "directories": {
    "doc": "docs",
    "test": "tests"
  },
  "dependencies": {
    "esprima": ">=1.0.4",
    "jasmine-node": ">=1.11.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "jasmine-node specs/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/matthewkastor/modulify.git"
  },
  "keywords": [
    "module",
    "code",
    "generator",
    "atropa"
  ],
  "homepage": "https://github.com/matthewkastor/modulify/",
  "bugs": {
    "url": "https://github.com/matthewkastor/modulify/issues"
  },
  "author": {
    "name": "Matthew Kastor",
    "email": "matthewkastor@gmail.com",
    "url": "https://plus.google.com/100898583798552211130"
  },
  "engines": {
    "node": ">=0.8.14"
  },
  "license": "gpl-3.0",
  "readme": "#modulify\n\nGenerates nodejs modules from source code.\n\n## Where do I get it?\n\nYou can download it from github at \n[https://github.com/matthewkastor/modulify](https://github.com/matthewkastor/modulify) \nor, if you have node installed you can get it from npm\n\n`npm install modulify`\n\n## Usage\n\n### In Browser\n\nUsing this module in your browser is as simple as including both `src/modulify.js`\n and `node_modules/esprima/esprima.js` in the page, parsing the source code with esprima and calling `modulify.generateModuleString`. There is an example below.\n It is much easier to use this code within nodejs and that is the recommended\n method.\nSee [try it.html](http://matthewkastor.github.io/modulify/try%20it.html) \nin the root directory of this package for a working example of browser usage.\n\n```\n<script type=\"text/javascript\" src=\"./node_modules/esprima/esprima.js\"></script>\n<script type=\"text/javascript\" src=\"./src/modulify.js\"></script>\n<script type=\"text/javascript\">\n    var src = // get the source code as a string.\n    var ast = esprima.parse(src, {tolerant: true});\n    var result = modulify.utils.generateModuleString(ast, src, '\\r\\n');\n    // result will contain the modulified version of the source.\n</script>\n```\n\n### In Nodejs\n\nSimply require it and use it.\n\n```\nvar modulify = require('modulify');\nvar result = modulify.file( /** file path **/);\n// result will contain the modulified version of the source.\n```\n\nThere is also a method `modulify.string` that takes a single string argument and\n returns a modulified version. See the documentation for other utility methods.\n\n## Docs\n\nDocumentation is in the [docs/jsdoc](http://matthewkastor.github.io/modulify/docs/jsdoc/symbols/_global_.html) folder.\nVisual Studio intellisense files are in [docs/vsdocs](https://github.com/matthewkastor/modulify/blob/gh-pages/docs/vsdoc/OpenLayersAll.js)\n\n## Tests\n\nRun the tests in node with `npm test`. Run the tests in your browser by opening \n[modulify tester.html](http://matthewkastor.github.io/modulify/modulify%20tester.html).",
  "readmeFilename": "README.md",
  "_id": "modulify@0.1.0-1",
  "dist": {
    "shasum": "3666c274513695a6ddd5c16364f687b326ec2344",
    "tarball": "https://registry.npmjs.org/modulify/-/modulify-0.1.0-1.tgz"
  },
  "_from": "modulify@0.1.0-1",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "kastor",
    "email": "matthewkastor@gmail.com"
  },
  "maintainers": [
    {
      "name": "kastor",
      "email": "matthewkastor@gmail.com"
    }
  ],
  "_shasum": "3666c274513695a6ddd5c16364f687b326ec2344",
  "_resolved": "https://registry.npmjs.org/modulify/-/modulify-0.1.0-1.tgz"
}
