J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2404145, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestLodash/node_modules/lodash/_assignMergeValue.js');
            function assignMergeValue(object, key, value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2404081, arguments.callee, this, arguments);
                            arguments = J$.N(2404089, 'arguments', arguments, true, false, false);
                            object = J$.N(2404097, 'object', object, true, false, false);
                            key = J$.N(2404105, 'key', key, true, false, false);
                            value = J$.N(2404113, 'value', value, true, false, false);
                            if (J$.C(112608, J$.C(112600, J$.C(112584, J$.B(306546, '!==', J$.R(2403945, 'value', value, false, false), J$.T(2403953, undefined, 24, false))) ? J$.U(306554, '!', J$.F(2404001, J$.R(2403961, 'eq', eq, false, true), false)(J$.G(2403985, J$.R(2403969, 'object', object, false, false), J$.R(2403977, 'key', key, false, false)), J$.R(2403993, 'value', value, false, false))) : J$._()) ? J$._() : J$.C(112592, J$.B(306562, '===', J$.R(2404009, 'value', value, false, false), J$.T(2404017, undefined, 24, false))) ? J$.U(306578, '!', J$.B(306570, 'in', J$.R(2404025, 'key', key, false, false), J$.R(2404033, 'object', object, false, false))) : J$._())) {
                                J$.F(2404073, J$.R(2404041, 'baseAssignValue', baseAssignValue, false, true), false)(J$.R(2404049, 'object', object, false, false), J$.R(2404057, 'key', key, false, false), J$.R(2404065, 'value', value, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(2404185, J$e);
                        } finally {
                            if (J$.Fr(2404193))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2404153, 'baseAssignValue', baseAssignValue, false, false, false);
            J$.N(2404161, 'eq', eq, false, false, false);
            assignMergeValue = J$.N(2404177, 'assignMergeValue', J$.T(2404169, assignMergeValue, 12, false), true, false, false);
            var baseAssignValue = J$.W(2403929, 'baseAssignValue', J$.F(2403897, J$.I(typeof require === 'undefined' ? require = J$.R(2403881, 'require', undefined, true, true) : require = J$.R(2403881, 'require', require, true, true)), false)(J$.T(2403889, './_baseAssignValue', 21, false)), baseAssignValue, false, true), eq = J$.W(2403937, 'eq', J$.F(2403921, J$.I(typeof require === 'undefined' ? require = J$.R(2403905, 'require', undefined, true, true) : require = J$.R(2403905, 'require', require, true, true)), false)(J$.T(2403913, './eq', 21, false)), eq, false, true);
            J$.P(2404137, J$.I(typeof module === 'undefined' ? module = J$.R(2404121, 'module', undefined, true, true) : module = J$.R(2404121, 'module', module, true, true)), 'exports', J$.R(2404129, 'assignMergeValue', assignMergeValue, false, true));
        } catch (J$e) {
            J$.Ex(2404201, J$e);
        } finally {
            if (J$.Sr(2404209))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

