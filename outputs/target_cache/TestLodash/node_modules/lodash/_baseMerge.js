J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2434969, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestLodash/node_modules/lodash/_baseMerge.js');
            function baseMerge(object, source, srcIndex, customizer, stack) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2434889, arguments.callee, this, arguments);
                            arguments = J$.N(2434897, 'arguments', arguments, true, false, false);
                            object = J$.N(2434905, 'object', object, true, false, false);
                            source = J$.N(2434913, 'source', source, true, false, false);
                            srcIndex = J$.N(2434921, 'srcIndex', srcIndex, true, false, false);
                            customizer = J$.N(2434929, 'customizer', customizer, true, false, false);
                            stack = J$.N(2434937, 'stack', stack, true, false, false);
                            if (J$.C(114248, J$.B(308242, '===', J$.R(2434465, 'object', object, false, false), J$.R(2434473, 'source', source, false, false)))) {
                                return J$.Rt(2434481, undefined);
                            }
                            J$.F(2434881, J$.R(2434489, 'baseFor', baseFor, false, true), false)(J$.R(2434497, 'source', source, false, false), J$.T(2434865, function (srcValue, key) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2434825, arguments.callee, this, arguments);
                                            arguments = J$.N(2434833, 'arguments', arguments, true, false, false);
                                            srcValue = J$.N(2434841, 'srcValue', srcValue, true, false, false);
                                            key = J$.N(2434849, 'key', key, true, false, false);
                                            J$.N(2434857, 'newValue', newValue, false, false, false);
                                            J$.C(114256, J$.R(2434505, 'stack', stack, false, false)) ? J$._() : stack = J$.W(2434529, 'stack', J$.F(2434521, J$.R(2434513, 'Stack', Stack, false, true), true)(), stack, false, false);
                                            if (J$.C(114280, J$.F(2434553, J$.R(2434537, 'isObject', isObject, false, true), false)(J$.R(2434545, 'srcValue', srcValue, false, false)))) {
                                                J$.F(2434625, J$.R(2434561, 'baseMergeDeep', baseMergeDeep, false, true), false)(J$.R(2434569, 'object', object, false, false), J$.R(2434577, 'source', source, false, false), J$.R(2434585, 'key', key, false, false), J$.R(2434593, 'srcIndex', srcIndex, false, false), J$.R(2434601, 'baseMerge', baseMerge, false, true), J$.R(2434609, 'customizer', customizer, false, false), J$.R(2434617, 'stack', stack, false, false));
                                            } else {
                                                var newValue = J$.W(2434745, 'newValue', J$.C(114264, J$.R(2434633, 'customizer', customizer, false, false)) ? J$.F(2434729, J$.R(2434641, 'customizer', customizer, false, false), false)(J$.F(2434673, J$.R(2434649, 'safeGet', safeGet, false, true), false)(J$.R(2434657, 'object', object, false, false), J$.R(2434665, 'key', key, false, false)), J$.R(2434681, 'srcValue', srcValue, false, false), J$.B(308250, '+', J$.R(2434689, 'key', key, false, false), J$.T(2434697, '', 21, false)), J$.R(2434705, 'object', object, false, false), J$.R(2434713, 'source', source, false, false), J$.R(2434721, 'stack', stack, false, false)) : J$.T(2434737, undefined, 24, false), newValue, false, false);
                                                if (J$.C(114272, J$.B(308258, '===', J$.R(2434753, 'newValue', newValue, false, false), J$.T(2434761, undefined, 24, false)))) {
                                                    newValue = J$.W(2434777, 'newValue', J$.R(2434769, 'srcValue', srcValue, false, false), newValue, false, false);
                                                }
                                                J$.F(2434817, J$.R(2434785, 'assignMergeValue', assignMergeValue, false, true), false)(J$.R(2434793, 'object', object, false, false), J$.R(2434801, 'key', key, false, false), J$.R(2434809, 'newValue', newValue, false, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2435049, J$e);
                                        } finally {
                                            if (J$.Fr(2435057))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.R(2434873, 'keysIn', keysIn, false, true));
                        } catch (J$e) {
                            J$.Ex(2435065, J$e);
                        } finally {
                            if (J$.Fr(2435073))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2434977, 'Stack', Stack, false, false, false);
            J$.N(2434985, 'assignMergeValue', assignMergeValue, false, false, false);
            J$.N(2434993, 'baseFor', baseFor, false, false, false);
            J$.N(2435001, 'baseMergeDeep', baseMergeDeep, false, false, false);
            J$.N(2435009, 'isObject', isObject, false, false, false);
            J$.N(2435017, 'keysIn', keysIn, false, false, false);
            J$.N(2435025, 'safeGet', safeGet, false, false, false);
            baseMerge = J$.N(2435041, 'baseMerge', J$.T(2435033, baseMerge, 12, false), true, false, false);
            var Stack = J$.W(2434409, 'Stack', J$.F(2434257, J$.I(typeof require === 'undefined' ? require = J$.R(2434241, 'require', undefined, true, true) : require = J$.R(2434241, 'require', require, true, true)), false)(J$.T(2434249, './_Stack', 21, false)), Stack, false, true), assignMergeValue = J$.W(2434417, 'assignMergeValue', J$.F(2434281, J$.I(typeof require === 'undefined' ? require = J$.R(2434265, 'require', undefined, true, true) : require = J$.R(2434265, 'require', require, true, true)), false)(J$.T(2434273, './_assignMergeValue', 21, false)), assignMergeValue, false, true), baseFor = J$.W(2434425, 'baseFor', J$.F(2434305, J$.I(typeof require === 'undefined' ? require = J$.R(2434289, 'require', undefined, true, true) : require = J$.R(2434289, 'require', require, true, true)), false)(J$.T(2434297, './_baseFor', 21, false)), baseFor, false, true), baseMergeDeep = J$.W(2434433, 'baseMergeDeep', J$.F(2434329, J$.I(typeof require === 'undefined' ? require = J$.R(2434313, 'require', undefined, true, true) : require = J$.R(2434313, 'require', require, true, true)), false)(J$.T(2434321, './_baseMergeDeep', 21, false)), baseMergeDeep, false, true), isObject = J$.W(2434441, 'isObject', J$.F(2434353, J$.I(typeof require === 'undefined' ? require = J$.R(2434337, 'require', undefined, true, true) : require = J$.R(2434337, 'require', require, true, true)), false)(J$.T(2434345, './isObject', 21, false)), isObject, false, true), keysIn = J$.W(2434449, 'keysIn', J$.F(2434377, J$.I(typeof require === 'undefined' ? require = J$.R(2434361, 'require', undefined, true, true) : require = J$.R(2434361, 'require', require, true, true)), false)(J$.T(2434369, './keysIn', 21, false)), keysIn, false, true), safeGet = J$.W(2434457, 'safeGet', J$.F(2434401, J$.I(typeof require === 'undefined' ? require = J$.R(2434385, 'require', undefined, true, true) : require = J$.R(2434385, 'require', require, true, true)), false)(J$.T(2434393, './_safeGet', 21, false)), safeGet, false, true);
            J$.P(2434961, J$.I(typeof module === 'undefined' ? module = J$.R(2434945, 'module', undefined, true, true) : module = J$.R(2434945, 'module', module, true, true)), 'exports', J$.R(2434953, 'baseMerge', baseMerge, false, true));
        } catch (J$e) {
            J$.Ex(2435081, J$e);
        } finally {
            if (J$.Sr(2435089))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

