J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2483865, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestLodash/node_modules/lodash/_createWrap.js');
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2483697, arguments.callee, this, arguments);
                            arguments = J$.N(2483705, 'arguments', arguments, true, false, false);
                            func = J$.N(2483713, 'func', func, true, false, false);
                            bitmask = J$.N(2483721, 'bitmask', bitmask, true, false, false);
                            thisArg = J$.N(2483729, 'thisArg', thisArg, true, false, false);
                            partials = J$.N(2483737, 'partials', partials, true, false, false);
                            holders = J$.N(2483745, 'holders', holders, true, false, false);
                            argPos = J$.N(2483753, 'argPos', argPos, true, false, false);
                            ary = J$.N(2483761, 'ary', ary, true, false, false);
                            arity = J$.N(2483769, 'arity', arity, true, false, false);
                            J$.N(2483777, 'isBindKey', isBindKey, false, false, false);
                            J$.N(2483785, 'length', length, false, false, false);
                            J$.N(2483793, 'partialsRight', partialsRight, false, false, false);
                            J$.N(2483801, 'holdersRight', holdersRight, false, false, false);
                            J$.N(2483809, 'data', data, false, false, false);
                            J$.N(2483817, 'newData', newData, false, false, false);
                            J$.N(2483825, 'result', result, false, false, false);
                            J$.N(2483833, 'setter', setter, false, false, false);
                            var isBindKey = J$.W(2482313, 'isBindKey', J$.B(311962, '&', J$.R(2482297, 'bitmask', bitmask, false, false), J$.R(2482305, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, true)), isBindKey, false, false);
                            if (J$.C(117160, J$.C(117152, J$.U(311970, '!', J$.R(2482321, 'isBindKey', isBindKey, false, false))) ? J$.B(311986, '!=', J$.U(311978, 'typeof', J$.R(2482329, 'func', func, false, false)), J$.T(2482337, 'function', 21, false)) : J$._())) {
                                throw J$.F(2482361, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(2482345, 'TypeError', undefined, true, true) : TypeError = J$.R(2482345, 'TypeError', TypeError, true, true)), true)(J$.R(2482353, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, true));
                            }
                            var length = J$.W(2482401, 'length', J$.C(117168, J$.R(2482369, 'partials', partials, false, false)) ? J$.G(2482385, J$.R(2482377, 'partials', partials, false, false), 'length') : J$.T(2482393, 0, 22, false), length, false, false);
                            if (J$.C(117176, J$.U(311994, '!', J$.R(2482409, 'length', length, false, false)))) {
                                bitmask = J$.W(2482441, 'bitmask', J$.B(312018, '&', J$.R(2482433, 'bitmask', bitmask, false, false), J$.U(312010, '~', J$.B(312002, '|', J$.R(2482417, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true), J$.R(2482425, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))), bitmask, false, false);
                                partials = J$.W(2482465, 'partials', holders = J$.W(2482457, 'holders', J$.T(2482449, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            ary = J$.W(2482545, 'ary', J$.C(117184, J$.B(312026, '===', J$.R(2482473, 'ary', ary, false, false), J$.T(2482481, undefined, 24, false))) ? J$.R(2482489, 'ary', ary, false, false) : J$.F(2482537, J$.R(2482497, 'nativeMax', nativeMax, false, true), false)(J$.F(2482521, J$.R(2482505, 'toInteger', toInteger, false, true), false)(J$.R(2482513, 'ary', ary, false, false)), J$.T(2482529, 0, 22, false)), ary, false, false);
                            arity = J$.W(2482601, 'arity', J$.C(117192, J$.B(312034, '===', J$.R(2482553, 'arity', arity, false, false), J$.T(2482561, undefined, 24, false))) ? J$.R(2482569, 'arity', arity, false, false) : J$.F(2482593, J$.R(2482577, 'toInteger', toInteger, false, true), false)(J$.R(2482585, 'arity', arity, false, false)), arity, false, false);
                            length = J$.W(2482649, 'length', J$.B(312042, '-', J$.R(2482641, 'length', length, false, false), J$.C(117200, J$.R(2482609, 'holders', holders, false, false)) ? J$.G(2482625, J$.R(2482617, 'holders', holders, false, false), 'length') : J$.T(2482633, 0, 22, false)), length, false, false);
                            if (J$.C(117208, J$.B(312050, '&', J$.R(2482657, 'bitmask', bitmask, false, false), J$.R(2482665, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))) {
                                var partialsRight = J$.W(2482689, 'partialsRight', J$.R(2482673, 'partials', partials, false, false), partialsRight, false, false), holdersRight = J$.W(2482697, 'holdersRight', J$.R(2482681, 'holders', holders, false, false), holdersRight, false, false);
                                partials = J$.W(2482721, 'partials', holders = J$.W(2482713, 'holders', J$.T(2482705, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            var data = J$.W(2482769, 'data', J$.C(117216, J$.R(2482729, 'isBindKey', isBindKey, false, false)) ? J$.T(2482737, undefined, 24, false) : J$.F(2482761, J$.R(2482745, 'getData', getData, false, true), false)(J$.R(2482753, 'func', func, false, false)), data, false, false);
                            var newData = J$.W(2482865, 'newData', J$.T(2482857, [
                                J$.R(2482777, 'func', func, false, false),
                                J$.R(2482785, 'bitmask', bitmask, false, false),
                                J$.R(2482793, 'thisArg', thisArg, false, false),
                                J$.R(2482801, 'partials', partials, false, false),
                                J$.R(2482809, 'holders', holders, false, false),
                                J$.R(2482817, 'partialsRight', partialsRight, false, false),
                                J$.R(2482825, 'holdersRight', holdersRight, false, false),
                                J$.R(2482833, 'argPos', argPos, false, false),
                                J$.R(2482841, 'ary', ary, false, false),
                                J$.R(2482849, 'arity', arity, false, false)
                            ], 10, false), newData, false, false);
                            if (J$.C(117224, J$.R(2482873, 'data', data, false, false))) {
                                J$.F(2482905, J$.R(2482881, 'mergeData', mergeData, false, true), false)(J$.R(2482889, 'newData', newData, false, false), J$.R(2482897, 'data', data, false, false));
                            }
                            func = J$.W(2482937, 'func', J$.G(2482929, J$.R(2482913, 'newData', newData, false, false), J$.T(2482921, 0, 22, false)), func, false, false);
                            bitmask = J$.W(2482969, 'bitmask', J$.G(2482961, J$.R(2482945, 'newData', newData, false, false), J$.T(2482953, 1, 22, false)), bitmask, false, false);
                            thisArg = J$.W(2483001, 'thisArg', J$.G(2482993, J$.R(2482977, 'newData', newData, false, false), J$.T(2482985, 2, 22, false)), thisArg, false, false);
                            partials = J$.W(2483033, 'partials', J$.G(2483025, J$.R(2483009, 'newData', newData, false, false), J$.T(2483017, 3, 22, false)), partials, false, false);
                            holders = J$.W(2483065, 'holders', J$.G(2483057, J$.R(2483041, 'newData', newData, false, false), J$.T(2483049, 4, 22, false)), holders, false, false);
                            arity = J$.W(2483217, 'arity', J$.P(2483209, J$.R(2483073, 'newData', newData, false, false), J$.T(2483081, 9, 22, false), J$.C(117240, J$.B(312058, '===', J$.G(2483105, J$.R(2483089, 'newData', newData, false, false), J$.T(2483097, 9, 22, false)), J$.T(2483113, undefined, 24, false))) ? J$.C(117232, J$.R(2483121, 'isBindKey', isBindKey, false, false)) ? J$.T(2483129, 0, 22, false) : J$.G(2483145, J$.R(2483137, 'func', func, false, false), 'length') : J$.F(2483201, J$.R(2483153, 'nativeMax', nativeMax, false, true), false)(J$.B(312066, '-', J$.G(2483177, J$.R(2483161, 'newData', newData, false, false), J$.T(2483169, 9, 22, false)), J$.R(2483185, 'length', length, false, false)), J$.T(2483193, 0, 22, false))), arity, false, false);
                            if (J$.C(117256, J$.C(117248, J$.U(312074, '!', J$.R(2483225, 'arity', arity, false, false))) ? J$.B(312090, '&', J$.R(2483233, 'bitmask', bitmask, false, false), J$.B(312082, '|', J$.R(2483241, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(2483249, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true))) : J$._())) {
                                bitmask = J$.W(2483281, 'bitmask', J$.B(312114, '&', J$.R(2483273, 'bitmask', bitmask, false, false), J$.U(312106, '~', J$.B(312098, '|', J$.R(2483257, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(2483265, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))), bitmask, false, false);
                            }
                            if (J$.C(117312, J$.C(117264, J$.U(312122, '!', J$.R(2483289, 'bitmask', bitmask, false, false))) ? J$._() : J$.B(312130, '==', J$.R(2483297, 'bitmask', bitmask, false, false), J$.R(2483305, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true)))) {
                                var result = J$.W(2483353, 'result', J$.F(2483345, J$.R(2483313, 'createBind', createBind, false, true), false)(J$.R(2483321, 'func', func, false, false), J$.R(2483329, 'bitmask', bitmask, false, false), J$.R(2483337, 'thisArg', thisArg, false, false)), result, false, false);
                            } else if (J$.C(117304, J$.C(117272, J$.B(312138, '==', J$.R(2483361, 'bitmask', bitmask, false, false), J$.R(2483369, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true))) ? J$._() : J$.B(312146, '==', J$.R(2483377, 'bitmask', bitmask, false, false), J$.R(2483385, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))) {
                                result = J$.W(2483433, 'result', J$.F(2483425, J$.R(2483393, 'createCurry', createCurry, false, true), false)(J$.R(2483401, 'func', func, false, false), J$.R(2483409, 'bitmask', bitmask, false, false), J$.R(2483417, 'arity', arity, false, false)), result, false, false);
                            } else if (J$.C(117296, J$.C(117288, J$.C(117280, J$.B(312154, '==', J$.R(2483441, 'bitmask', bitmask, false, false), J$.R(2483449, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true))) ? J$._() : J$.B(312170, '==', J$.R(2483457, 'bitmask', bitmask, false, false), J$.B(312162, '|', J$.R(2483465, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true), J$.R(2483473, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true)))) ? J$.U(312178, '!', J$.G(2483489, J$.R(2483481, 'holders', holders, false, false), 'length')) : J$._())) {
                                result = J$.W(2483545, 'result', J$.F(2483537, J$.R(2483497, 'createPartial', createPartial, false, true), false)(J$.R(2483505, 'func', func, false, false), J$.R(2483513, 'bitmask', bitmask, false, false), J$.R(2483521, 'thisArg', thisArg, false, false), J$.R(2483529, 'partials', partials, false, false)), result, false, false);
                            } else {
                                result = J$.W(2483585, 'result', J$.M(2483577, J$.R(2483553, 'createHybrid', createHybrid, false, true), 'apply', false)(J$.T(2483561, undefined, 24, false), J$.R(2483569, 'newData', newData, false, false)), result, false, false);
                            }
                            var setter = J$.W(2483617, 'setter', J$.C(117320, J$.R(2483593, 'data', data, false, false)) ? J$.R(2483601, 'baseSetData', baseSetData, false, true) : J$.R(2483609, 'setData', setData, false, true), setter, false, false);
                            return J$.Rt(2483689, J$.F(2483681, J$.R(2483625, 'setWrapToString', setWrapToString, false, true), false)(J$.F(2483657, J$.R(2483633, 'setter', setter, false, false), false)(J$.R(2483641, 'result', result, false, false), J$.R(2483649, 'newData', newData, false, false)), J$.R(2483665, 'func', func, false, false), J$.R(2483673, 'bitmask', bitmask, false, false)));
                        } catch (J$e) {
                            J$.Ex(2484033, J$e);
                        } finally {
                            if (J$.Fr(2484041))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2483873, 'baseSetData', baseSetData, false, false, false);
            J$.N(2483881, 'createBind', createBind, false, false, false);
            J$.N(2483889, 'createCurry', createCurry, false, false, false);
            J$.N(2483897, 'createHybrid', createHybrid, false, false, false);
            J$.N(2483905, 'createPartial', createPartial, false, false, false);
            J$.N(2483913, 'getData', getData, false, false, false);
            J$.N(2483921, 'mergeData', mergeData, false, false, false);
            J$.N(2483929, 'setData', setData, false, false, false);
            J$.N(2483937, 'setWrapToString', setWrapToString, false, false, false);
            J$.N(2483945, 'toInteger', toInteger, false, false, false);
            J$.N(2483953, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, false, false);
            J$.N(2483961, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, false, false);
            J$.N(2483969, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, false, false);
            J$.N(2483977, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, false, false);
            J$.N(2483985, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, false, false);
            J$.N(2483993, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, false, false);
            J$.N(2484001, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, false, false);
            J$.N(2484009, 'nativeMax', nativeMax, false, false, false);
            createWrap = J$.N(2484025, 'createWrap', J$.T(2484017, createWrap, 12, false), true, false, false);
            var baseSetData = J$.W(2482081, 'baseSetData', J$.F(2481857, J$.I(typeof require === 'undefined' ? require = J$.R(2481841, 'require', undefined, true, true) : require = J$.R(2481841, 'require', require, true, true)), false)(J$.T(2481849, './_baseSetData', 21, false)), baseSetData, false, true), createBind = J$.W(2482089, 'createBind', J$.F(2481881, J$.I(typeof require === 'undefined' ? require = J$.R(2481865, 'require', undefined, true, true) : require = J$.R(2481865, 'require', require, true, true)), false)(J$.T(2481873, './_createBind', 21, false)), createBind, false, true), createCurry = J$.W(2482097, 'createCurry', J$.F(2481905, J$.I(typeof require === 'undefined' ? require = J$.R(2481889, 'require', undefined, true, true) : require = J$.R(2481889, 'require', require, true, true)), false)(J$.T(2481897, './_createCurry', 21, false)), createCurry, false, true), createHybrid = J$.W(2482105, 'createHybrid', J$.F(2481929, J$.I(typeof require === 'undefined' ? require = J$.R(2481913, 'require', undefined, true, true) : require = J$.R(2481913, 'require', require, true, true)), false)(J$.T(2481921, './_createHybrid', 21, false)), createHybrid, false, true), createPartial = J$.W(2482113, 'createPartial', J$.F(2481953, J$.I(typeof require === 'undefined' ? require = J$.R(2481937, 'require', undefined, true, true) : require = J$.R(2481937, 'require', require, true, true)), false)(J$.T(2481945, './_createPartial', 21, false)), createPartial, false, true), getData = J$.W(2482121, 'getData', J$.F(2481977, J$.I(typeof require === 'undefined' ? require = J$.R(2481961, 'require', undefined, true, true) : require = J$.R(2481961, 'require', require, true, true)), false)(J$.T(2481969, './_getData', 21, false)), getData, false, true), mergeData = J$.W(2482129, 'mergeData', J$.F(2482001, J$.I(typeof require === 'undefined' ? require = J$.R(2481985, 'require', undefined, true, true) : require = J$.R(2481985, 'require', require, true, true)), false)(J$.T(2481993, './_mergeData', 21, false)), mergeData, false, true), setData = J$.W(2482137, 'setData', J$.F(2482025, J$.I(typeof require === 'undefined' ? require = J$.R(2482009, 'require', undefined, true, true) : require = J$.R(2482009, 'require', require, true, true)), false)(J$.T(2482017, './_setData', 21, false)), setData, false, true), setWrapToString = J$.W(2482145, 'setWrapToString', J$.F(2482049, J$.I(typeof require === 'undefined' ? require = J$.R(2482033, 'require', undefined, true, true) : require = J$.R(2482033, 'require', require, true, true)), false)(J$.T(2482041, './_setWrapToString', 21, false)), setWrapToString, false, true), toInteger = J$.W(2482153, 'toInteger', J$.F(2482073, J$.I(typeof require === 'undefined' ? require = J$.R(2482057, 'require', undefined, true, true) : require = J$.R(2482057, 'require', require, true, true)), false)(J$.T(2482065, './toInteger', 21, false)), toInteger, false, true);
            var FUNC_ERROR_TEXT = J$.W(2482169, 'FUNC_ERROR_TEXT', J$.T(2482161, 'Expected a function', 21, false), FUNC_ERROR_TEXT, false, true);
            var WRAP_BIND_FLAG = J$.W(2482225, 'WRAP_BIND_FLAG', J$.T(2482177, 1, 22, false), WRAP_BIND_FLAG, false, true), WRAP_BIND_KEY_FLAG = J$.W(2482233, 'WRAP_BIND_KEY_FLAG', J$.T(2482185, 2, 22, false), WRAP_BIND_KEY_FLAG, false, true), WRAP_CURRY_FLAG = J$.W(2482241, 'WRAP_CURRY_FLAG', J$.T(2482193, 8, 22, false), WRAP_CURRY_FLAG, false, true), WRAP_CURRY_RIGHT_FLAG = J$.W(2482249, 'WRAP_CURRY_RIGHT_FLAG', J$.T(2482201, 16, 22, false), WRAP_CURRY_RIGHT_FLAG, false, true), WRAP_PARTIAL_FLAG = J$.W(2482257, 'WRAP_PARTIAL_FLAG', J$.T(2482209, 32, 22, false), WRAP_PARTIAL_FLAG, false, true), WRAP_PARTIAL_RIGHT_FLAG = J$.W(2482265, 'WRAP_PARTIAL_RIGHT_FLAG', J$.T(2482217, 64, 22, false), WRAP_PARTIAL_RIGHT_FLAG, false, true);
            var nativeMax = J$.W(2482289, 'nativeMax', J$.G(2482281, J$.I(typeof Math === 'undefined' ? Math = J$.R(2482273, 'Math', undefined, true, true) : Math = J$.R(2482273, 'Math', Math, true, true)), 'max'), nativeMax, false, true);
            J$.P(2483857, J$.I(typeof module === 'undefined' ? module = J$.R(2483841, 'module', undefined, true, true) : module = J$.R(2483841, 'module', module, true, true)), 'exports', J$.R(2483849, 'createWrap', createWrap, false, true));
        } catch (J$e) {
            J$.Ex(2484049, J$e);
        } finally {
            if (J$.Sr(2484057))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

