J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2621425, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestLodash/node_modules/lodash/escapeRegExp.js');
            function escapeRegExp(string) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2621377, arguments.callee, this, arguments);
                            arguments = J$.N(2621385, 'arguments', arguments, true, false, false);
                            string = J$.N(2621393, 'string', string, true, false, false);
                            string = J$.W(2621289, 'string', J$.F(2621281, J$.R(2621265, 'toString', toString, false, true), false)(J$.R(2621273, 'string', string, false, false)), string, false, false);
                            return J$.Rt(2621369, J$.C(125640, J$.C(125632, J$.R(2621297, 'string', string, false, false)) ? J$.M(2621321, J$.R(2621305, 'reHasRegExpChar', reHasRegExpChar, false, true), 'test', false)(J$.R(2621313, 'string', string, false, false)) : J$._()) ? J$.M(2621353, J$.R(2621329, 'string', string, false, false), 'replace', false)(J$.R(2621337, 'reRegExpChar', reRegExpChar, false, true), J$.T(2621345, '\\$&', 21, false)) : J$.R(2621361, 'string', string, false, false));
                        } catch (J$e) {
                            J$.Ex(2621473, J$e);
                        } finally {
                            if (J$.Fr(2621481))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2621433, 'toString', toString, false, false, false);
            J$.N(2621441, 'reRegExpChar', reRegExpChar, false, false, false);
            J$.N(2621449, 'reHasRegExpChar', reHasRegExpChar, false, false, false);
            escapeRegExp = J$.N(2621465, 'escapeRegExp', J$.T(2621457, escapeRegExp, 12, false), true, false, false);
            var toString = J$.W(2621201, 'toString', J$.F(2621193, J$.I(typeof require === 'undefined' ? require = J$.R(2621177, 'require', undefined, true, true) : require = J$.R(2621177, 'require', require, true, true)), false)(J$.T(2621185, './toString', 21, false)), toString, false, true);
            var reRegExpChar = J$.W(2621249, 'reRegExpChar', J$.T(2621209, /[\\^$.*+?()[\]{}|]/g, 14, false), reRegExpChar, false, true), reHasRegExpChar = J$.W(2621257, 'reHasRegExpChar', J$.F(2621241, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(2621217, 'RegExp', undefined, true, true) : RegExp = J$.R(2621217, 'RegExp', RegExp, true, true)), false)(J$.G(2621233, J$.R(2621225, 'reRegExpChar', reRegExpChar, false, true), 'source')), reHasRegExpChar, false, true);
            J$.P(2621417, J$.I(typeof module === 'undefined' ? module = J$.R(2621401, 'module', undefined, true, true) : module = J$.R(2621401, 'module', module, true, true)), 'exports', J$.R(2621409, 'escapeRegExp', escapeRegExp, false, true));
        } catch (J$e) {
            J$.Ex(2621489, J$e);
        } finally {
            if (J$.Sr(2621497))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

