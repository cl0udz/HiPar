J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(5059705, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/lodash/_assignMergeValue.js');
            function assignMergeValue(object, key, value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5059641, arguments.callee, this, arguments);
                            arguments = J$.N(5059649, 'arguments', arguments, true, false, false);
                            object = J$.N(5059657, 'object', object, true, false, false);
                            key = J$.N(5059665, 'key', key, true, false, false);
                            value = J$.N(5059673, 'value', value, true, false, false);
                            if (J$.C(269064, J$.C(269056, J$.C(269040, J$.B(507626, '!==', J$.R(5059505, 'value', value, false, false), J$.T(5059513, undefined, 24, false))) ? J$.U(507634, '!', J$.F(5059561, J$.R(5059521, 'eq', eq, false, true), false)(J$.G(5059545, J$.R(5059529, 'object', object, false, false), J$.R(5059537, 'key', key, false, false)), J$.R(5059553, 'value', value, false, false))) : J$._()) ? J$._() : J$.C(269048, J$.B(507642, '===', J$.R(5059569, 'value', value, false, false), J$.T(5059577, undefined, 24, false))) ? J$.U(507658, '!', J$.B(507650, 'in', J$.R(5059585, 'key', key, false, false), J$.R(5059593, 'object', object, false, false))) : J$._())) {
                                J$.F(5059633, J$.R(5059601, 'baseAssignValue', baseAssignValue, false, true), false)(J$.R(5059609, 'object', object, false, false), J$.R(5059617, 'key', key, false, false), J$.R(5059625, 'value', value, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5059745, J$e);
                        } finally {
                            if (J$.Fr(5059753))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5059713, 'baseAssignValue', baseAssignValue, false, false, false);
            J$.N(5059721, 'eq', eq, false, false, false);
            assignMergeValue = J$.N(5059737, 'assignMergeValue', J$.T(5059729, assignMergeValue, 12, false), true, false, false);
            J$.T(5059433, 'use strict', 21, false);
            var baseAssignValue = J$.W(5059489, 'baseAssignValue', J$.F(5059457, J$.I(typeof require === 'undefined' ? require = J$.R(5059441, 'require', undefined, true, true) : require = J$.R(5059441, 'require', require, true, true)), false)(J$.T(5059449, './_baseAssignValue', 21, false)), baseAssignValue, false, true), eq = J$.W(5059497, 'eq', J$.F(5059481, J$.I(typeof require === 'undefined' ? require = J$.R(5059465, 'require', undefined, true, true) : require = J$.R(5059465, 'require', require, true, true)), false)(J$.T(5059473, './eq', 21, false)), eq, false, true);
            J$.P(5059697, J$.I(typeof module === 'undefined' ? module = J$.R(5059681, 'module', undefined, true, true) : module = J$.R(5059681, 'module', module, true, true)), 'exports', J$.R(5059689, 'assignMergeValue', assignMergeValue, false, true));
        } catch (J$e) {
            J$.Ex(5059761, J$e);
        } finally {
            if (J$.Sr(5059769))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

