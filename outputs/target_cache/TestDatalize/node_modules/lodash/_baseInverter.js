J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5078465, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/lodash/_baseInverter.js');
            function baseInverter(object, setter, iteratee, accumulator) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5078393, arguments.callee, this, arguments);
                            arguments = J$.N(5078401, 'arguments', arguments, true, false, false);
                            object = J$.N(5078409, 'object', object, true, false, false);
                            setter = J$.N(5078417, 'setter', setter, true, false, false);
                            iteratee = J$.N(5078425, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(5078433, 'accumulator', accumulator, true, false, false);
                            J$.F(5078369, J$.R(5078241, 'baseForOwn', baseForOwn, false, true), false)(J$.R(5078249, 'object', object, false, false), J$.T(5078361, function (value, key, object) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(5078321, arguments.callee, this, arguments);
                                            arguments = J$.N(5078329, 'arguments', arguments, true, false, false);
                                            value = J$.N(5078337, 'value', value, true, false, false);
                                            key = J$.N(5078345, 'key', key, true, false, false);
                                            object = J$.N(5078353, 'object', object, true, false, false);
                                            J$.F(5078313, J$.R(5078257, 'setter', setter, false, false), false)(J$.R(5078265, 'accumulator', accumulator, false, false), J$.F(5078289, J$.R(5078273, 'iteratee', iteratee, false, false), false)(J$.R(5078281, 'value', value, false, false)), J$.R(5078297, 'key', key, false, false), J$.R(5078305, 'object', object, false, false));
                                        } catch (J$e) {
                                            J$.Ex(5078497, J$e);
                                        } finally {
                                            if (J$.Fr(5078505))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(5078385, J$.R(5078377, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(5078513, J$e);
                        } finally {
                            if (J$.Fr(5078521))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5078473, 'baseForOwn', baseForOwn, false, false, false);
            baseInverter = J$.N(5078489, 'baseInverter', J$.T(5078481, baseInverter, 12, false), true, false, false);
            J$.T(5078201, 'use strict', 21, false);
            var baseForOwn = J$.W(5078233, 'baseForOwn', J$.F(5078225, J$.I(typeof require === 'undefined' ? require = J$.R(5078209, 'require', undefined, true, true) : require = J$.R(5078209, 'require', require, true, true)), false)(J$.T(5078217, './_baseForOwn', 21, false)), baseForOwn, false, true);
            J$.P(5078457, J$.I(typeof module === 'undefined' ? module = J$.R(5078441, 'module', undefined, true, true) : module = J$.R(5078441, 'module', module, true, true)), 'exports', J$.R(5078449, 'baseInverter', baseInverter, false, true));
        } catch (J$e) {
            J$.Ex(5078529, J$e);
        } finally {
            if (J$.Sr(5078537))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

