J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5135169, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/lodash/_createInverter.js');
            function createInverter(setter, toIteratee) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5135113, arguments.callee, this, arguments);
                            arguments = J$.N(5135121, 'arguments', arguments, true, false, false);
                            setter = J$.N(5135129, 'setter', setter, true, false, false);
                            toIteratee = J$.N(5135137, 'toIteratee', toIteratee, true, false, false);
                            return J$.Rt(5135105, J$.T(5135097, function (object, iteratee) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(5135065, arguments.callee, this, arguments);
                                            arguments = J$.N(5135073, 'arguments', arguments, true, false, false);
                                            object = J$.N(5135081, 'object', object, true, false, false);
                                            iteratee = J$.N(5135089, 'iteratee', iteratee, true, false, false);
                                            return J$.Rt(5135057, J$.F(5135049, J$.R(5134993, 'baseInverter', baseInverter, false, true), false)(J$.R(5135001, 'object', object, false, false), J$.R(5135009, 'setter', setter, false, false), J$.F(5135033, J$.R(5135017, 'toIteratee', toIteratee, false, false), false)(J$.R(5135025, 'iteratee', iteratee, false, false)), J$.T(5135041, {}, 11, false)));
                                        } catch (J$e) {
                                            J$.Ex(5135201, J$e);
                                        } finally {
                                            if (J$.Fr(5135209))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(5135217, J$e);
                        } finally {
                            if (J$.Fr(5135225))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5135177, 'baseInverter', baseInverter, false, false, false);
            createInverter = J$.N(5135193, 'createInverter', J$.T(5135185, createInverter, 12, false), true, false, false);
            J$.T(5134953, 'use strict', 21, false);
            var baseInverter = J$.W(5134985, 'baseInverter', J$.F(5134977, J$.I(typeof require === 'undefined' ? require = J$.R(5134961, 'require', undefined, true, true) : require = J$.R(5134961, 'require', require, true, true)), false)(J$.T(5134969, './_baseInverter', 21, false)), baseInverter, false, true);
            J$.P(5135161, J$.I(typeof module === 'undefined' ? module = J$.R(5135145, 'module', undefined, true, true) : module = J$.R(5135145, 'module', module, true, true)), 'exports', J$.R(5135153, 'createInverter', createInverter, false, true));
        } catch (J$e) {
            J$.Ex(5135233, J$e);
        } finally {
            if (J$.Sr(5135241))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

