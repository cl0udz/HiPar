J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(5385857, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/lodash/fp/sum.js');
            J$.N(5385865, 'convert', convert, false, false, false);
            J$.N(5385873, 'func', func, false, false, false);
            J$.T(5385673, 'use strict', 21, false);
            var convert = J$.W(5385777, 'convert', J$.F(5385697, J$.I(typeof require === 'undefined' ? require = J$.R(5385681, 'require', undefined, true, true) : require = J$.R(5385681, 'require', require, true, true)), false)(J$.T(5385689, './convert', 21, false)), convert, false, true), func = J$.W(5385785, 'func', J$.F(5385769, J$.R(5385705, 'convert', convert, false, true), false)(J$.T(5385713, 'sum', 21, false), J$.F(5385737, J$.I(typeof require === 'undefined' ? require = J$.R(5385721, 'require', undefined, true, true) : require = J$.R(5385721, 'require', require, true, true)), false)(J$.T(5385729, '../sum', 21, false)), J$.F(5385761, J$.I(typeof require === 'undefined' ? require = J$.R(5385745, 'require', undefined, true, true) : require = J$.R(5385745, 'require', require, true, true)), false)(J$.T(5385753, './_falseOptions', 21, false))), func, false, true);
            J$.P(5385825, J$.R(5385793, 'func', func, false, true), 'placeholder', J$.F(5385817, J$.I(typeof require === 'undefined' ? require = J$.R(5385801, 'require', undefined, true, true) : require = J$.R(5385801, 'require', require, true, true)), false)(J$.T(5385809, './placeholder', 21, false)));
            J$.P(5385849, J$.I(typeof module === 'undefined' ? module = J$.R(5385833, 'module', undefined, true, true) : module = J$.R(5385833, 'module', module, true, true)), 'exports', J$.R(5385841, 'func', func, false, true));
        } catch (J$e) {
            J$.Ex(5385881, J$e);
        } finally {
            if (J$.Sr(5385889))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

