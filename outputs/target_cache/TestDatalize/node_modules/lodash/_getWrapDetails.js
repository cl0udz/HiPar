J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(5161513, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/lodash/_getWrapDetails.js');
            function getWrapDetails(source) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5161457, arguments.callee, this, arguments);
                            arguments = J$.N(5161465, 'arguments', arguments, true, false, false);
                            source = J$.N(5161473, 'source', source, true, false, false);
                            J$.N(5161481, 'match', match, false, false, false);
                            var match = J$.W(5161385, 'match', J$.M(5161377, J$.R(5161361, 'source', source, false, false), 'match', false)(J$.R(5161369, 'reWrapDetails', reWrapDetails, false, true)), match, false, false);
                            return J$.Rt(5161449, J$.C(275024, J$.R(5161393, 'match', match, false, false)) ? J$.M(5161433, J$.G(5161417, J$.R(5161401, 'match', match, false, false), J$.T(5161409, 1, 22, false)), 'split', false)(J$.R(5161425, 'reSplitDetails', reSplitDetails, false, true)) : J$.T(5161441, [], 10, false));
                        } catch (J$e) {
                            J$.Ex(5161553, J$e);
                        } finally {
                            if (J$.Fr(5161561))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5161521, 'reWrapDetails', reWrapDetails, false, false, false);
            J$.N(5161529, 'reSplitDetails', reSplitDetails, false, false, false);
            getWrapDetails = J$.N(5161545, 'getWrapDetails', J$.T(5161537, getWrapDetails, 12, false), true, false, false);
            J$.T(5161177, 'use strict', 21, false);
            J$.F(5161201, J$.I(typeof require === 'undefined' ? require = J$.R(5161185, 'require', undefined, true, true) : require = J$.R(5161185, 'require', require, true, true)), false)(J$.T(5161193, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(5161225, J$.I(typeof require === 'undefined' ? require = J$.R(5161209, 'require', undefined, true, true) : require = J$.R(5161209, 'require', require, true, true)), false)(J$.T(5161217, 'core-js/modules/es.string.match', 21, false));
            J$.F(5161249, J$.I(typeof require === 'undefined' ? require = J$.R(5161233, 'require', undefined, true, true) : require = J$.R(5161233, 'require', require, true, true)), false)(J$.T(5161241, 'core-js/modules/es.string.split', 21, false));
            J$.F(5161273, J$.I(typeof require === 'undefined' ? require = J$.R(5161257, 'require', undefined, true, true) : require = J$.R(5161257, 'require', require, true, true)), false)(J$.T(5161265, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(5161297, J$.I(typeof require === 'undefined' ? require = J$.R(5161281, 'require', undefined, true, true) : require = J$.R(5161281, 'require', require, true, true)), false)(J$.T(5161289, 'core-js/modules/es.string.match', 21, false));
            J$.F(5161321, J$.I(typeof require === 'undefined' ? require = J$.R(5161305, 'require', undefined, true, true) : require = J$.R(5161305, 'require', require, true, true)), false)(J$.T(5161313, 'core-js/modules/es.string.split', 21, false));
            var reWrapDetails = J$.W(5161345, 'reWrapDetails', J$.T(5161329, /\{\n\/\* \[wrapped with (.+)\] \*/, 14, false), reWrapDetails, false, true), reSplitDetails = J$.W(5161353, 'reSplitDetails', J$.T(5161337, /,? & /, 14, false), reSplitDetails, false, true);
            J$.P(5161505, J$.I(typeof module === 'undefined' ? module = J$.R(5161489, 'module', undefined, true, true) : module = J$.R(5161489, 'module', module, true, true)), 'exports', J$.R(5161497, 'getWrapDetails', getWrapDetails, false, true));
        } catch (J$e) {
            J$.Ex(5161569, J$e);
        } finally {
            if (J$.Sr(5161577))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

