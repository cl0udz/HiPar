J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(4980905, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/iconv-lite/encodings/sbcs-codec.js');
            function SBCSCodec(codecOptions, iconv) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4979841, arguments.callee, this, arguments);
                            arguments = J$.N(4979849, 'arguments', arguments, true, false, false);
                            codecOptions = J$.N(4979857, 'codecOptions', codecOptions, true, false, false);
                            iconv = J$.N(4979865, 'iconv', iconv, true, false, false);
                            J$.N(4979873, 'asciiString', asciiString, false, false, false);
                            J$.N(4979881, 'i', i, false, false, false);
                            J$.N(4979889, 'encodeBuf', encodeBuf, false, false, false);
                            if (J$.C(265568, J$.U(501154, '!', J$.R(4979241, 'codecOptions', codecOptions, false, false))))
                                throw J$.F(4979265, J$.I(typeof Error === 'undefined' ? Error = J$.R(4979249, 'Error', undefined, true, true) : Error = J$.R(4979249, 'Error', Error, true, true)), true)(J$.T(4979257, 'SBCS codec is called without the data.', 21, false));
                            if (J$.C(265592, J$.C(265584, J$.U(501162, '!', J$.G(4979281, J$.R(4979273, 'codecOptions', codecOptions, false, false), 'chars'))) ? J$._() : J$.C(265576, J$.B(501170, '!==', J$.G(4979305, J$.G(4979297, J$.R(4979289, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4979313, 128, 22, false))) ? J$.B(501178, '!==', J$.G(4979337, J$.G(4979329, J$.R(4979321, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4979345, 256, 22, false)) : J$._()))
                                throw J$.F(4979393, J$.I(typeof Error === 'undefined' ? Error = J$.R(4979353, 'Error', undefined, true, true) : Error = J$.R(4979353, 'Error', Error, true, true)), true)(J$.B(501194, '+', J$.B(501186, '+', J$.T(4979361, 'Encoding \'', 21, false), J$.G(4979377, J$.R(4979369, 'codecOptions', codecOptions, false, false), 'type')), J$.T(4979385, '\' has incorrect \'chars\' (must be of len 128 or 256)', 21, false)));
                            if (J$.C(265608, J$.B(501202, '===', J$.G(4979417, J$.G(4979409, J$.R(4979401, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4979425, 128, 22, false)))) {
                                var asciiString = J$.W(4979441, 'asciiString', J$.T(4979433, '', 21, false), asciiString, false, false);
                                for (var i = J$.W(4979457, 'i', J$.T(4979449, 0, 22, false), i, false, false); J$.C(265600, J$.B(501210, '<', J$.R(4979465, 'i', i, false, false), J$.T(4979473, 128, 22, false))); J$.B(501234, '-', i = J$.W(4979489, 'i', J$.B(501226, '+', J$.U(501218, '+', J$.R(4979481, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    asciiString = J$.W(4979529, 'asciiString', J$.B(501242, '+', J$.R(4979521, 'asciiString', asciiString, false, false), J$.M(4979513, J$.I(typeof String === 'undefined' ? String = J$.R(4979497, 'String', undefined, true, true) : String = J$.R(4979497, 'String', String, true, true)), 'fromCharCode', false)(J$.R(4979505, 'i', i, false, false))), asciiString, false, false);
                                }
                                J$.P(4979569, J$.R(4979537, 'codecOptions', codecOptions, false, false), 'chars', J$.B(501250, '+', J$.R(4979545, 'asciiString', asciiString, false, false), J$.G(4979561, J$.R(4979553, 'codecOptions', codecOptions, false, false), 'chars')));
                            }
                            J$.P(4979625, J$.R(4979577, 'this', this, false, false), 'decodeBuf', J$.M(4979617, J$.R(4979585, 'Buffer', Buffer, false, true), 'from', false)(J$.G(4979601, J$.R(4979593, 'codecOptions', codecOptions, false, false), 'chars'), J$.T(4979609, 'ucs2', 21, false)));
                            var encodeBuf = J$.W(4979689, 'encodeBuf', J$.M(4979681, J$.R(4979633, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(4979641, 65536, 22, false), J$.M(4979673, J$.G(4979657, J$.R(4979649, 'iconv', iconv, false, false), 'defaultCharSingleByte'), 'charCodeAt', false)(J$.T(4979665, 0, 22, false))), encodeBuf, false, false);
                            for (var i = J$.W(4979705, 'i', J$.T(4979697, 0, 22, false), i, false, false); J$.C(265616, J$.B(501258, '<', J$.R(4979713, 'i', i, false, false), J$.G(4979737, J$.G(4979729, J$.R(4979721, 'codecOptions', codecOptions, false, false), 'chars'), 'length'))); J$.B(501282, '-', i = J$.W(4979753, 'i', J$.B(501274, '+', J$.U(501266, '+', J$.R(4979745, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(4979809, J$.R(4979761, 'encodeBuf', encodeBuf, false, false), J$.M(4979793, J$.G(4979777, J$.R(4979769, 'codecOptions', codecOptions, false, false), 'chars'), 'charCodeAt', false)(J$.R(4979785, 'i', i, false, false)), J$.R(4979801, 'i', i, false, false));
                            }
                            J$.P(4979833, J$.R(4979817, 'this', this, false, false), 'encodeBuf', J$.R(4979825, 'encodeBuf', encodeBuf, false, false));
                        } catch (J$e) {
                            J$.Ex(4980969, J$e);
                        } finally {
                            if (J$.Fr(4980977))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSEncoder(options, codec) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4979993, arguments.callee, this, arguments);
                            arguments = J$.N(4980001, 'arguments', arguments, true, false, false);
                            options = J$.N(4980009, 'options', options, true, false, false);
                            codec = J$.N(4980017, 'codec', codec, true, false, false);
                            J$.P(4979985, J$.R(4979961, 'this', this, false, false), 'encodeBuf', J$.G(4979977, J$.R(4979969, 'codec', codec, false, false), 'encodeBuf'));
                        } catch (J$e) {
                            J$.Ex(4980985, J$e);
                        } finally {
                            if (J$.Fr(4980993))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSDecoder(options, codec) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4980361, arguments.callee, this, arguments);
                            arguments = J$.N(4980369, 'arguments', arguments, true, false, false);
                            options = J$.N(4980377, 'options', options, true, false, false);
                            codec = J$.N(4980385, 'codec', codec, true, false, false);
                            J$.P(4980353, J$.R(4980329, 'this', this, false, false), 'decodeBuf', J$.G(4980345, J$.R(4980337, 'codec', codec, false, false), 'decodeBuf'));
                        } catch (J$e) {
                            J$.Ex(4981033, J$e);
                        } finally {
                            if (J$.Fr(4981041))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4980913, 'Buffer', Buffer, false, false, false);
            SBCSCodec = J$.N(4980929, 'SBCSCodec', J$.T(4980921, SBCSCodec, 12, false), true, false, false);
            SBCSEncoder = J$.N(4980945, 'SBCSEncoder', J$.T(4980937, SBCSEncoder, 12, false), true, false, false);
            SBCSDecoder = J$.N(4980961, 'SBCSDecoder', J$.T(4980953, SBCSDecoder, 12, false), true, false, false);
            J$.T(4979025, 'use strict', 21, false);
            J$.F(4979049, J$.I(typeof require === 'undefined' ? require = J$.R(4979033, 'require', undefined, true, true) : require = J$.R(4979033, 'require', require, true, true)), false)(J$.T(4979041, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(4979073, J$.I(typeof require === 'undefined' ? require = J$.R(4979057, 'require', undefined, true, true) : require = J$.R(4979057, 'require', require, true, true)), false)(J$.T(4979065, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(4979097, J$.I(typeof require === 'undefined' ? require = J$.R(4979081, 'require', undefined, true, true) : require = J$.R(4979081, 'require', require, true, true)), false)(J$.T(4979089, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(4979121, J$.I(typeof require === 'undefined' ? require = J$.R(4979105, 'require', undefined, true, true) : require = J$.R(4979105, 'require', require, true, true)), false)(J$.T(4979113, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(4979145, J$.I(typeof require === 'undefined' ? require = J$.R(4979129, 'require', undefined, true, true) : require = J$.R(4979129, 'require', require, true, true)), false)(J$.T(4979137, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(4979169, J$.I(typeof require === 'undefined' ? require = J$.R(4979153, 'require', undefined, true, true) : require = J$.R(4979153, 'require', require, true, true)), false)(J$.T(4979161, 'core-js/modules/es.regexp.to-string', 21, false));
            var Buffer = J$.W(4979209, 'Buffer', J$.G(4979201, J$.F(4979193, J$.I(typeof require === 'undefined' ? require = J$.R(4979177, 'require', undefined, true, true) : require = J$.R(4979177, 'require', require, true, true)), false)(J$.T(4979185, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            J$.P(4979233, J$.I(typeof exports === 'undefined' ? exports = J$.R(4979217, 'exports', undefined, true, true) : exports = J$.R(4979217, 'exports', exports, true, true)), '_sbcs', J$.R(4979225, 'SBCSCodec', SBCSCodec, false, true));
            J$.P(4979921, J$.G(4979905, J$.R(4979897, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'encoder', J$.R(4979913, 'SBCSEncoder', SBCSEncoder, false, true));
            J$.P(4979953, J$.G(4979937, J$.R(4979929, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'decoder', J$.R(4979945, 'SBCSDecoder', SBCSDecoder, false, true));
            J$.P(4980273, J$.G(4980033, J$.R(4980025, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'write', J$.T(4980265, function (str) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4980225, arguments.callee, this, arguments);
                            arguments = J$.N(4980233, 'arguments', arguments, true, false, false);
                            str = J$.N(4980241, 'str', str, true, false, false);
                            J$.N(4980249, 'buf', buf, false, false, false);
                            J$.N(4980257, 'i', i, false, false, false);
                            var buf = J$.W(4980073, 'buf', J$.M(4980065, J$.R(4980041, 'Buffer', Buffer, false, true), 'alloc', false)(J$.G(4980057, J$.R(4980049, 'str', str, false, false), 'length')), buf, false, false);
                            for (var i = J$.W(4980089, 'i', J$.T(4980081, 0, 22, false), i, false, false); J$.C(265624, J$.B(501290, '<', J$.R(4980097, 'i', i, false, false), J$.G(4980113, J$.R(4980105, 'str', str, false, false), 'length'))); J$.B(501314, '-', i = J$.W(4980129, 'i', J$.B(501306, '+', J$.U(501298, '+', J$.R(4980121, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(4980201, J$.R(4980137, 'buf', buf, false, false), J$.R(4980145, 'i', i, false, false), J$.G(4980193, J$.G(4980161, J$.R(4980153, 'this', this, false, false), 'encodeBuf'), J$.M(4980185, J$.R(4980169, 'str', str, false, false), 'charCodeAt', false)(J$.R(4980177, 'i', i, false, false))));
                            }
                            return J$.Rt(4980217, J$.R(4980209, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(4981001, J$e);
                        } finally {
                            if (J$.Fr(4981009))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4980321, J$.G(4980289, J$.R(4980281, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'end', J$.T(4980313, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4980297, arguments.callee, this, arguments);
                            arguments = J$.N(4980305, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(4981017, J$e);
                        } finally {
                            if (J$.Fr(4981025))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4980849, J$.G(4980401, J$.R(4980393, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'write', J$.T(4980841, function (buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4980777, arguments.callee, this, arguments);
                            arguments = J$.N(4980785, 'arguments', arguments, true, false, false);
                            buf = J$.N(4980793, 'buf', buf, true, false, false);
                            J$.N(4980801, 'decodeBuf', decodeBuf, false, false, false);
                            J$.N(4980809, 'newBuf', newBuf, false, false, false);
                            J$.N(4980817, 'idx1', idx1, false, false, false);
                            J$.N(4980825, 'idx2', idx2, false, false, false);
                            J$.N(4980833, 'i', i, false, false, false);
                            var decodeBuf = J$.W(4980425, 'decodeBuf', J$.G(4980417, J$.R(4980409, 'this', this, false, false), 'decodeBuf'), decodeBuf, false, false);
                            var newBuf = J$.W(4980473, 'newBuf', J$.M(4980465, J$.R(4980433, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(501322, '*', J$.G(4980449, J$.R(4980441, 'buf', buf, false, false), 'length'), J$.T(4980457, 2, 22, false))), newBuf, false, false);
                            var idx1 = J$.W(4980497, 'idx1', J$.T(4980481, 0, 22, false), idx1, false, false), idx2 = J$.W(4980505, 'idx2', J$.T(4980489, 0, 22, false), idx2, false, false);
                            for (var i = J$.W(4980521, 'i', J$.T(4980513, 0, 22, false), i, false, false); J$.C(265632, J$.B(501330, '<', J$.R(4980529, 'i', i, false, false), J$.G(4980545, J$.R(4980537, 'buf', buf, false, false), 'length'))); J$.B(501354, '-', i = J$.W(4980561, 'i', J$.B(501346, '+', J$.U(501338, '+', J$.R(4980553, 'i', i, false, false)), 1), i, false, false), 1)) {
                                idx1 = J$.W(4980601, 'idx1', J$.B(501362, '*', J$.G(4980585, J$.R(4980569, 'buf', buf, false, false), J$.R(4980577, 'i', i, false, false)), J$.T(4980593, 2, 22, false)), idx1, false, false);
                                idx2 = J$.W(4980625, 'idx2', J$.B(501370, '*', J$.R(4980609, 'i', i, false, false), J$.T(4980617, 2, 22, false)), idx2, false, false);
                                J$.P(4980673, J$.R(4980633, 'newBuf', newBuf, false, false), J$.R(4980641, 'idx2', idx2, false, false), J$.G(4980665, J$.R(4980649, 'decodeBuf', decodeBuf, false, false), J$.R(4980657, 'idx1', idx1, false, false)));
                                J$.P(4980737, J$.R(4980681, 'newBuf', newBuf, false, false), J$.B(501378, '+', J$.R(4980689, 'idx2', idx2, false, false), J$.T(4980697, 1, 22, false)), J$.G(4980729, J$.R(4980705, 'decodeBuf', decodeBuf, false, false), J$.B(501386, '+', J$.R(4980713, 'idx1', idx1, false, false), J$.T(4980721, 1, 22, false))));
                            }
                            return J$.Rt(4980769, J$.M(4980761, J$.R(4980745, 'newBuf', newBuf, false, false), 'toString', false)(J$.T(4980753, 'ucs2', 21, false)));
                        } catch (J$e) {
                            J$.Ex(4981049, J$e);
                        } finally {
                            if (J$.Fr(4981057))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4980897, J$.G(4980865, J$.R(4980857, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'end', J$.T(4980889, function () {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4980873, arguments.callee, this, arguments);
                            arguments = J$.N(4980881, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(4981065, J$e);
                        } finally {
                            if (J$.Fr(4981073))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4981081, J$e);
        } finally {
            if (J$.Sr(4981089))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

