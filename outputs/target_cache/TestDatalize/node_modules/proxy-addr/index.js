J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(5904913, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/proxy-addr/index.js');
            function alladdrs(req, trust) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5901777, arguments.callee, this, arguments);
                            arguments = J$.N(5901785, 'arguments', arguments, true, false, false);
                            req = J$.N(5901793, 'req', req, true, false, false);
                            trust = J$.N(5901801, 'trust', trust, true, false, false);
                            J$.N(5901809, 'addrs', addrs, false, false, false);
                            J$.N(5901817, 'i', i, false, false, false);
                            var addrs = J$.W(5901537, 'addrs', J$.F(5901529, J$.R(5901513, 'forwarded', forwarded, false, true), false)(J$.R(5901521, 'req', req, false, false)), addrs, false, false);
                            if (J$.C(317752, J$.U(563386, '!', J$.R(5901545, 'trust', trust, false, false)))) {
                                return J$.Rt(5901561, J$.R(5901553, 'addrs', addrs, false, false));
                            }
                            if (J$.C(317760, J$.B(563402, '!==', J$.U(563394, 'typeof', J$.R(5901569, 'trust', trust, false, false)), J$.T(5901577, 'function', 21, false)))) {
                                trust = J$.W(5901609, 'trust', J$.F(5901601, J$.R(5901585, 'compile', compile, false, true), false)(J$.R(5901593, 'trust', trust, false, false)), trust, false, false);
                            }
                            for (var i = J$.W(5901625, 'i', J$.T(5901617, 0, 22, false), i, false, false); J$.C(317776, J$.B(563418, '<', J$.R(5901633, 'i', i, false, false), J$.B(563410, '-', J$.G(5901649, J$.R(5901641, 'addrs', addrs, false, false), 'length'), J$.T(5901657, 1, 22, false)))); J$.B(563442, '-', i = J$.W(5901673, 'i', J$.B(563434, '+', J$.U(563426, '+', J$.R(5901665, 'i', i, false, false)), 1), i, false, false), 1)) {
                                if (J$.C(317768, J$.F(5901721, J$.R(5901681, 'trust', trust, false, false), false)(J$.G(5901705, J$.R(5901689, 'addrs', addrs, false, false), J$.R(5901697, 'i', i, false, false)), J$.R(5901713, 'i', i, false, false))))
                                    continue;
                                J$.P(5901753, J$.R(5901729, 'addrs', addrs, false, false), 'length', J$.B(563450, '+', J$.R(5901737, 'i', i, false, false), J$.T(5901745, 1, 22, false)));
                            }
                            return J$.Rt(5901769, J$.R(5901761, 'addrs', addrs, false, false));
                        } catch (J$e) {
                            J$.Ex(5905129, J$e);
                        } finally {
                            if (J$.Fr(5905137))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compile(val) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5902273, arguments.callee, this, arguments);
                            arguments = J$.N(5902281, 'arguments', arguments, true, false, false);
                            val = J$.N(5902289, 'val', val, true, false, false);
                            J$.N(5902297, 'trust', trust, false, false, false);
                            J$.N(5902305, 'i', i, false, false, false);
                            if (J$.C(317784, J$.U(563458, '!', J$.R(5901825, 'val', val, false, false)))) {
                                throw J$.F(5901849, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5901833, 'TypeError', undefined, true, true) : TypeError = J$.R(5901833, 'TypeError', TypeError, true, true)), true)(J$.T(5901841, 'argument is required', 21, false));
                            }
                            var trust;
                            if (J$.C(317800, J$.B(563474, '===', J$.U(563466, 'typeof', J$.R(5901857, 'val', val, false, false)), J$.T(5901865, 'string', 21, false)))) {
                                trust = J$.W(5901889, 'trust', J$.T(5901881, [J$.R(5901873, 'val', val, false, false)], 10, false), trust, false, false);
                            } else if (J$.C(317792, J$.M(5901913, J$.I(typeof Array === 'undefined' ? Array = J$.R(5901897, 'Array', undefined, true, true) : Array = J$.R(5901897, 'Array', Array, true, true)), 'isArray', false)(J$.R(5901905, 'val', val, false, false)))) {
                                trust = J$.W(5901937, 'trust', J$.M(5901929, J$.R(5901921, 'val', val, false, false), 'slice', false)(), trust, false, false);
                            } else {
                                throw J$.F(5901961, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5901945, 'TypeError', undefined, true, true) : TypeError = J$.R(5901945, 'TypeError', TypeError, true, true)), true)(J$.T(5901953, 'unsupported trust argument', 21, false));
                            }
                            for (var i = J$.W(5901977, 'i', J$.T(5901969, 0, 22, false), i, false, false); J$.C(317816, J$.B(563482, '<', J$.R(5901985, 'i', i, false, false), J$.G(5902001, J$.R(5901993, 'trust', trust, false, false), 'length'))); J$.B(563506, '-', i = J$.W(5902017, 'i', J$.B(563498, '+', J$.U(563490, '+', J$.R(5902009, 'i', i, false, false)), 1), i, false, false), 1)) {
                                val = J$.W(5902049, 'val', J$.G(5902041, J$.R(5902025, 'trust', trust, false, false), J$.R(5902033, 'i', i, false, false)), val, false, false);
                                if (J$.C(317808, J$.U(563514, '!', J$.M(5902073, J$.R(5902057, 'IP_RANGES', IP_RANGES, false, true), 'hasOwnProperty', false)(J$.R(5902065, 'val', val, false, false))))) {
                                    continue;
                                }
                                val = J$.W(5902105, 'val', J$.G(5902097, J$.R(5902081, 'IP_RANGES', IP_RANGES, false, true), J$.R(5902089, 'val', val, false, false)), val, false, false);
                                J$.M(5902177, J$.G(5902121, J$.R(5902113, 'trust', trust, false, false), 'splice'), 'apply', false)(J$.R(5902129, 'trust', trust, false, false), J$.M(5902169, J$.T(5902153, [
                                    J$.R(5902137, 'i', i, false, false),
                                    J$.T(5902145, 1, 22, false)
                                ], 10, false), 'concat', false)(J$.R(5902161, 'val', val, false, false)));
                                i = J$.W(5902217, 'i', J$.B(563530, '+', J$.R(5902209, 'i', i, false, false), J$.B(563522, '-', J$.G(5902193, J$.R(5902185, 'val', val, false, false), 'length'), J$.T(5902201, 1, 22, false))), i, false, false);
                            }
                            return J$.Rt(5902265, J$.F(5902257, J$.R(5902225, 'compileTrust', compileTrust, false, true), false)(J$.F(5902249, J$.R(5902233, 'compileRangeSubnets', compileRangeSubnets, false, true), false)(J$.R(5902241, 'trust', trust, false, false))));
                        } catch (J$e) {
                            J$.Ex(5905145, J$e);
                        } finally {
                            if (J$.Fr(5905153))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileRangeSubnets(arr) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5902489, arguments.callee, this, arguments);
                            arguments = J$.N(5902497, 'arguments', arguments, true, false, false);
                            arr = J$.N(5902505, 'arr', arr, true, false, false);
                            J$.N(5902513, 'rangeSubnets', rangeSubnets, false, false, false);
                            J$.N(5902521, 'i', i, false, false, false);
                            var rangeSubnets = J$.W(5902345, 'rangeSubnets', J$.F(5902337, J$.I(typeof Array === 'undefined' ? Array = J$.R(5902313, 'Array', undefined, true, true) : Array = J$.R(5902313, 'Array', Array, true, true)), true)(J$.G(5902329, J$.R(5902321, 'arr', arr, false, false), 'length')), rangeSubnets, false, false);
                            for (var i = J$.W(5902361, 'i', J$.T(5902353, 0, 22, false), i, false, false); J$.C(317824, J$.B(563538, '<', J$.R(5902369, 'i', i, false, false), J$.G(5902385, J$.R(5902377, 'arr', arr, false, false), 'length'))); J$.B(563562, '-', i = J$.W(5902401, 'i', J$.B(563554, '+', J$.U(563546, '+', J$.R(5902393, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(5902465, J$.R(5902409, 'rangeSubnets', rangeSubnets, false, false), J$.R(5902417, 'i', i, false, false), J$.F(5902457, J$.R(5902425, 'parseipNotation', parseipNotation, false, true), false)(J$.G(5902449, J$.R(5902433, 'arr', arr, false, false), J$.R(5902441, 'i', i, false, false))));
                            }
                            return J$.Rt(5902481, J$.R(5902473, 'rangeSubnets', rangeSubnets, false, false));
                        } catch (J$e) {
                            J$.Ex(5905161, J$e);
                        } finally {
                            if (J$.Fr(5905169))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileTrust(rangeSubnets) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5902665, arguments.callee, this, arguments);
                            arguments = J$.N(5902673, 'arguments', arguments, true, false, false);
                            rangeSubnets = J$.N(5902681, 'rangeSubnets', rangeSubnets, true, false, false);
                            J$.N(5902689, 'len', len, false, false, false);
                            var len = J$.W(5902545, 'len', J$.G(5902537, J$.R(5902529, 'rangeSubnets', rangeSubnets, false, false), 'length'), len, false, false);
                            return J$.Rt(5902657, J$.C(317840, J$.B(563570, '===', J$.R(5902553, 'len', len, false, false), J$.T(5902561, 0, 22, false))) ? J$.R(5902569, 'trustNone', trustNone, false, true) : J$.C(317832, J$.B(563578, '===', J$.R(5902577, 'len', len, false, false), J$.T(5902585, 1, 22, false))) ? J$.F(5902625, J$.R(5902593, 'trustSingle', trustSingle, false, true), false)(J$.G(5902617, J$.R(5902601, 'rangeSubnets', rangeSubnets, false, false), J$.T(5902609, 0, 22, false))) : J$.F(5902649, J$.R(5902633, 'trustMulti', trustMulti, false, true), false)(J$.R(5902641, 'rangeSubnets', rangeSubnets, false, false)));
                        } catch (J$e) {
                            J$.Ex(5905177, J$e);
                        } finally {
                            if (J$.Fr(5905185))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseipNotation(note) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5903377, arguments.callee, this, arguments);
                            arguments = J$.N(5903385, 'arguments', arguments, true, false, false);
                            note = J$.N(5903393, 'note', note, true, false, false);
                            J$.N(5903401, 'pos', pos, false, false, false);
                            J$.N(5903409, 'str', str, false, false, false);
                            J$.N(5903417, 'ip', ip, false, false, false);
                            J$.N(5903425, 'max', max, false, false, false);
                            J$.N(5903433, 'range', range, false, false, false);
                            var pos = J$.W(5902721, 'pos', J$.M(5902713, J$.R(5902697, 'note', note, false, false), 'lastIndexOf', false)(J$.T(5902705, '/', 21, false)), pos, false, false);
                            var str = J$.W(5902785, 'str', J$.C(317848, J$.B(563594, '!==', J$.R(5902729, 'pos', pos, false, false), J$.U(563586, '-', J$.T(5902737, 1, 22, false)))) ? J$.M(5902769, J$.R(5902745, 'note', note, false, false), 'substring', false)(J$.T(5902753, 0, 22, false), J$.R(5902761, 'pos', pos, false, false)) : J$.R(5902777, 'note', note, false, false), str, false, false);
                            if (J$.C(317856, J$.U(563602, '!', J$.F(5902809, J$.R(5902793, 'isip', isip, false, true), false)(J$.R(5902801, 'str', str, false, false))))) {
                                throw J$.F(5902841, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5902817, 'TypeError', undefined, true, true) : TypeError = J$.R(5902817, 'TypeError', TypeError, true, true)), true)(J$.B(563610, '+', J$.T(5902825, 'invalid IP address: ', 21, false), J$.R(5902833, 'str', str, false, false)));
                            }
                            var ip = J$.W(5902873, 'ip', J$.F(5902865, J$.R(5902849, 'parseip', parseip, false, true), false)(J$.R(5902857, 'str', str, false, false)), ip, false, false);
                            if (J$.C(317880, J$.C(317872, J$.C(317864, J$.B(563626, '===', J$.R(5902881, 'pos', pos, false, false), J$.U(563618, '-', J$.T(5902889, 1, 22, false)))) ? J$.B(563634, '===', J$.M(5902905, J$.R(5902897, 'ip', ip, false, false), 'kind', false)(), J$.T(5902913, 'ipv6', 21, false)) : J$._()) ? J$.M(5902929, J$.R(5902921, 'ip', ip, false, false), 'isIPv4MappedAddress', false)() : J$._())) {
                                ip = J$.W(5902953, 'ip', J$.M(5902945, J$.R(5902937, 'ip', ip, false, false), 'toIPv4Address', false)(), ip, false, false);
                            }
                            var max = J$.W(5903001, 'max', J$.C(317888, J$.B(563642, '===', J$.M(5902969, J$.R(5902961, 'ip', ip, false, false), 'kind', false)(), J$.T(5902977, 'ipv6', 21, false))) ? J$.T(5902985, 128, 22, false) : J$.T(5902993, 32, 22, false), max, false, false);
                            var range = J$.W(5903081, 'range', J$.C(317896, J$.B(563658, '!==', J$.R(5903009, 'pos', pos, false, false), J$.U(563650, '-', J$.T(5903017, 1, 22, false)))) ? J$.M(5903065, J$.R(5903025, 'note', note, false, false), 'substring', false)(J$.B(563666, '+', J$.R(5903033, 'pos', pos, false, false), J$.T(5903041, 1, 22, false)), J$.G(5903057, J$.R(5903049, 'note', note, false, false), 'length')) : J$.T(5903073, null, 25, false), range, false, false);
                            if (J$.C(317928, J$.B(563674, '===', J$.R(5903089, 'range', range, false, false), J$.T(5903097, null, 25, false)))) {
                                range = J$.W(5903113, 'range', J$.R(5903105, 'max', max, false, false), range, false, false);
                            } else if (J$.C(317920, J$.M(5903137, J$.R(5903121, 'DIGIT_REGEXP', DIGIT_REGEXP, false, true), 'test', false)(J$.R(5903129, 'range', range, false, false)))) {
                                range = J$.W(5903177, 'range', J$.F(5903169, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(5903145, 'parseInt', undefined, true, true) : parseInt = J$.R(5903145, 'parseInt', parseInt, true, true)), false)(J$.R(5903153, 'range', range, false, false), J$.T(5903161, 10, 22, false)), range, false, false);
                            } else if (J$.C(317912, J$.C(317904, J$.B(563682, '===', J$.M(5903193, J$.R(5903185, 'ip', ip, false, false), 'kind', false)(), J$.T(5903201, 'ipv4', 21, false))) ? J$.F(5903225, J$.R(5903209, 'isip', isip, false, true), false)(J$.R(5903217, 'range', range, false, false)) : J$._())) {
                                range = J$.W(5903257, 'range', J$.F(5903249, J$.R(5903233, 'parseNetmask', parseNetmask, false, true), false)(J$.R(5903241, 'range', range, false, false)), range, false, false);
                            } else {
                                range = J$.W(5903273, 'range', J$.T(5903265, null, 25, false), range, false, false);
                            }
                            if (J$.C(317944, J$.C(317936, J$.B(563690, '<=', J$.R(5903281, 'range', range, false, false), J$.T(5903289, 0, 22, false))) ? J$._() : J$.B(563698, '>', J$.R(5903297, 'range', range, false, false), J$.R(5903305, 'max', max, false, false)))) {
                                throw J$.F(5903337, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5903313, 'TypeError', undefined, true, true) : TypeError = J$.R(5903313, 'TypeError', TypeError, true, true)), true)(J$.B(563706, '+', J$.T(5903321, 'invalid range on address: ', 21, false), J$.R(5903329, 'note', note, false, false)));
                            }
                            return J$.Rt(5903369, J$.T(5903361, [
                                J$.R(5903345, 'ip', ip, false, false),
                                J$.R(5903353, 'range', range, false, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(5905193, J$e);
                        } finally {
                            if (J$.Fr(5905201))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNetmask(netmask) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5903545, arguments.callee, this, arguments);
                            arguments = J$.N(5903553, 'arguments', arguments, true, false, false);
                            netmask = J$.N(5903561, 'netmask', netmask, true, false, false);
                            J$.N(5903569, 'ip', ip, false, false, false);
                            J$.N(5903577, 'kind', kind, false, false, false);
                            var ip = J$.W(5903465, 'ip', J$.F(5903457, J$.R(5903441, 'parseip', parseip, false, true), false)(J$.R(5903449, 'netmask', netmask, false, false)), ip, false, false);
                            var kind = J$.W(5903489, 'kind', J$.M(5903481, J$.R(5903473, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                            return J$.Rt(5903537, J$.C(317952, J$.B(563714, '===', J$.R(5903497, 'kind', kind, false, false), J$.T(5903505, 'ipv4', 21, false))) ? J$.M(5903521, J$.R(5903513, 'ip', ip, false, false), 'prefixLengthFromSubnetMask', false)() : J$.T(5903529, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(5905209, J$e);
                        } finally {
                            if (J$.Fr(5905217))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function proxyaddr(req, trust) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5903753, arguments.callee, this, arguments);
                            arguments = J$.N(5903761, 'arguments', arguments, true, false, false);
                            req = J$.N(5903769, 'req', req, true, false, false);
                            trust = J$.N(5903777, 'trust', trust, true, false, false);
                            J$.N(5903785, 'addrs', addrs, false, false, false);
                            J$.N(5903793, 'addr', addr, false, false, false);
                            if (J$.C(317960, J$.U(563722, '!', J$.R(5903585, 'req', req, false, false)))) {
                                throw J$.F(5903609, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5903593, 'TypeError', undefined, true, true) : TypeError = J$.R(5903593, 'TypeError', TypeError, true, true)), true)(J$.T(5903601, 'req argument is required', 21, false));
                            }
                            if (J$.C(317968, J$.U(563730, '!', J$.R(5903617, 'trust', trust, false, false)))) {
                                throw J$.F(5903641, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5903625, 'TypeError', undefined, true, true) : TypeError = J$.R(5903625, 'TypeError', TypeError, true, true)), true)(J$.T(5903633, 'trust argument is required', 21, false));
                            }
                            var addrs = J$.W(5903681, 'addrs', J$.F(5903673, J$.R(5903649, 'alladdrs', alladdrs, false, true), false)(J$.R(5903657, 'req', req, false, false), J$.R(5903665, 'trust', trust, false, false)), addrs, false, false);
                            var addr = J$.W(5903729, 'addr', J$.G(5903721, J$.R(5903689, 'addrs', addrs, false, false), J$.B(563738, '-', J$.G(5903705, J$.R(5903697, 'addrs', addrs, false, false), 'length'), J$.T(5903713, 1, 22, false))), addr, false, false);
                            return J$.Rt(5903745, J$.R(5903737, 'addr', addr, false, false));
                        } catch (J$e) {
                            J$.Ex(5905225, J$e);
                        } finally {
                            if (J$.Fr(5905233))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustNone() {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5903817, arguments.callee, this, arguments);
                            arguments = J$.N(5903825, 'arguments', arguments, true, false, false);
                            return J$.Rt(5903809, J$.T(5903801, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(5905241, J$e);
                        } finally {
                            if (J$.Fr(5905249))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustMulti(subnets) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5904425, arguments.callee, this, arguments);
                            arguments = J$.N(5904433, 'arguments', arguments, true, false, false);
                            subnets = J$.N(5904441, 'subnets', subnets, true, false, false);
                            return J$.Rt(5904417, J$.T(5904409, function trust(addr) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(5904313, arguments.callee, this, arguments);
                                            arguments = J$.N(5904321, 'arguments', arguments, true, false, false);
                                            addr = J$.N(5904329, 'addr', addr, true, false, false);
                                            J$.N(5904337, 'ip', ip, false, false, false);
                                            J$.N(5904345, 'ipconv', ipconv, false, false, false);
                                            J$.N(5904353, 'kind', kind, false, false, false);
                                            J$.N(5904361, 'i', i, false, false, false);
                                            J$.N(5904369, 'subnet', subnet, false, false, false);
                                            J$.N(5904377, 'subnetip', subnetip, false, false, false);
                                            J$.N(5904385, 'subnetkind', subnetkind, false, false, false);
                                            J$.N(5904393, 'subnetrange', subnetrange, false, false, false);
                                            J$.N(5904401, 'trusted', trusted, false, false, false);
                                            if (J$.C(317976, J$.U(563746, '!', J$.F(5903849, J$.R(5903833, 'isip', isip, false, true), false)(J$.R(5903841, 'addr', addr, false, false)))))
                                                return J$.Rt(5903865, J$.T(5903857, false, 23, false));
                                            var ip = J$.W(5903897, 'ip', J$.F(5903889, J$.R(5903873, 'parseip', parseip, false, true), false)(J$.R(5903881, 'addr', addr, false, false)), ip, false, false);
                                            var ipconv;
                                            var kind = J$.W(5903921, 'kind', J$.M(5903913, J$.R(5903905, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                                            for (var i = J$.W(5903937, 'i', J$.T(5903929, 0, 22, false), i, false, false); J$.C(318032, J$.B(563754, '<', J$.R(5903945, 'i', i, false, false), J$.G(5903961, J$.R(5903953, 'subnets', subnets, false, false), 'length'))); J$.B(563778, '-', i = J$.W(5903977, 'i', J$.B(563770, '+', J$.U(563762, '+', J$.R(5903969, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                var subnet = J$.W(5904009, 'subnet', J$.G(5904001, J$.R(5903985, 'subnets', subnets, false, false), J$.R(5903993, 'i', i, false, false)), subnet, false, false);
                                                var subnetip = J$.W(5904041, 'subnetip', J$.G(5904033, J$.R(5904017, 'subnet', subnet, false, false), J$.T(5904025, 0, 22, false)), subnetip, false, false);
                                                var subnetkind = J$.W(5904065, 'subnetkind', J$.M(5904057, J$.R(5904049, 'subnetip', subnetip, false, false), 'kind', false)(), subnetkind, false, false);
                                                var subnetrange = J$.W(5904097, 'subnetrange', J$.G(5904089, J$.R(5904073, 'subnet', subnet, false, false), J$.T(5904081, 1, 22, false)), subnetrange, false, false);
                                                var trusted = J$.W(5904113, 'trusted', J$.R(5904105, 'ip', ip, false, false), trusted, false, false);
                                                if (J$.C(318016, J$.B(563786, '!==', J$.R(5904121, 'kind', kind, false, false), J$.R(5904129, 'subnetkind', subnetkind, false, false)))) {
                                                    if (J$.C(317992, J$.C(317984, J$.B(563794, '===', J$.R(5904137, 'subnetkind', subnetkind, false, false), J$.T(5904145, 'ipv4', 21, false))) ? J$.U(563802, '!', J$.M(5904161, J$.R(5904153, 'ip', ip, false, false), 'isIPv4MappedAddress', false)()) : J$._())) {
                                                        continue;
                                                    }
                                                    if (J$.C(318008, J$.U(563810, '!', J$.R(5904169, 'ipconv', ipconv, false, false)))) {
                                                        ipconv = J$.W(5904225, 'ipconv', J$.C(318000, J$.B(563818, '===', J$.R(5904177, 'subnetkind', subnetkind, false, false), J$.T(5904185, 'ipv4', 21, false))) ? J$.M(5904201, J$.R(5904193, 'ip', ip, false, false), 'toIPv4Address', false)() : J$.M(5904217, J$.R(5904209, 'ip', ip, false, false), 'toIPv4MappedAddress', false)(), ipconv, false, false);
                                                    }
                                                    trusted = J$.W(5904241, 'trusted', J$.R(5904233, 'ipconv', ipconv, false, false), trusted, false, false);
                                                }
                                                if (J$.C(318024, J$.M(5904273, J$.R(5904249, 'trusted', trusted, false, false), 'match', false)(J$.R(5904257, 'subnetip', subnetip, false, false), J$.R(5904265, 'subnetrange', subnetrange, false, false)))) {
                                                    return J$.Rt(5904289, J$.T(5904281, true, 23, false));
                                                }
                                            }
                                            return J$.Rt(5904305, J$.T(5904297, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(5905257, J$e);
                                        } finally {
                                            if (J$.Fr(5905265))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(5905273, J$e);
                        } finally {
                            if (J$.Fr(5905281))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustSingle(subnet) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(5904857, arguments.callee, this, arguments);
                            arguments = J$.N(5904865, 'arguments', arguments, true, false, false);
                            subnet = J$.N(5904873, 'subnet', subnet, true, false, false);
                            J$.N(5904881, 'subnetip', subnetip, false, false, false);
                            J$.N(5904889, 'subnetkind', subnetkind, false, false, false);
                            J$.N(5904897, 'subnetisipv4', subnetisipv4, false, false, false);
                            J$.N(5904905, 'subnetrange', subnetrange, false, false, false);
                            var subnetip = J$.W(5904473, 'subnetip', J$.G(5904465, J$.R(5904449, 'subnet', subnet, false, false), J$.T(5904457, 0, 22, false)), subnetip, false, false);
                            var subnetkind = J$.W(5904497, 'subnetkind', J$.M(5904489, J$.R(5904481, 'subnetip', subnetip, false, false), 'kind', false)(), subnetkind, false, false);
                            var subnetisipv4 = J$.W(5904521, 'subnetisipv4', J$.B(563826, '===', J$.R(5904505, 'subnetkind', subnetkind, false, false), J$.T(5904513, 'ipv4', 21, false)), subnetisipv4, false, false);
                            var subnetrange = J$.W(5904553, 'subnetrange', J$.G(5904545, J$.R(5904529, 'subnet', subnet, false, false), J$.T(5904537, 1, 22, false)), subnetrange, false, false);
                            return J$.Rt(5904849, J$.T(5904841, function trust(addr) {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(5904801, arguments.callee, this, arguments);
                                            arguments = J$.N(5904809, 'arguments', arguments, true, false, false);
                                            addr = J$.N(5904817, 'addr', addr, true, false, false);
                                            J$.N(5904825, 'ip', ip, false, false, false);
                                            J$.N(5904833, 'kind', kind, false, false, false);
                                            if (J$.C(318040, J$.U(563834, '!', J$.F(5904577, J$.R(5904561, 'isip', isip, false, true), false)(J$.R(5904569, 'addr', addr, false, false)))))
                                                return J$.Rt(5904593, J$.T(5904585, false, 23, false));
                                            var ip = J$.W(5904625, 'ip', J$.F(5904617, J$.R(5904601, 'parseip', parseip, false, true), false)(J$.R(5904609, 'addr', addr, false, false)), ip, false, false);
                                            var kind = J$.W(5904649, 'kind', J$.M(5904641, J$.R(5904633, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                                            if (J$.C(318072, J$.B(563842, '!==', J$.R(5904657, 'kind', kind, false, false), J$.R(5904665, 'subnetkind', subnetkind, false, false)))) {
                                                if (J$.C(318056, J$.C(318048, J$.R(5904673, 'subnetisipv4', subnetisipv4, false, false)) ? J$.U(563850, '!', J$.M(5904689, J$.R(5904681, 'ip', ip, false, false), 'isIPv4MappedAddress', false)()) : J$._())) {
                                                    return J$.Rt(5904705, J$.T(5904697, false, 23, false));
                                                }
                                                ip = J$.W(5904753, 'ip', J$.C(318064, J$.R(5904713, 'subnetisipv4', subnetisipv4, false, false)) ? J$.M(5904729, J$.R(5904721, 'ip', ip, false, false), 'toIPv4Address', false)() : J$.M(5904745, J$.R(5904737, 'ip', ip, false, false), 'toIPv4MappedAddress', false)(), ip, false, false);
                                            }
                                            return J$.Rt(5904793, J$.M(5904785, J$.R(5904761, 'ip', ip, false, false), 'match', false)(J$.R(5904769, 'subnetip', subnetip, false, false), J$.R(5904777, 'subnetrange', subnetrange, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5905289, J$e);
                                        } finally {
                                            if (J$.Fr(5905297))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(5905305, J$e);
                        } finally {
                            if (J$.Fr(5905313))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5904921, 'forwarded', forwarded, false, false, false);
            J$.N(5904929, 'ipaddr', ipaddr, false, false, false);
            J$.N(5904937, 'DIGIT_REGEXP', DIGIT_REGEXP, false, false, false);
            J$.N(5904945, 'isip', isip, false, false, false);
            J$.N(5904953, 'parseip', parseip, false, false, false);
            J$.N(5904961, 'IP_RANGES', IP_RANGES, false, false, false);
            alladdrs = J$.N(5904977, 'alladdrs', J$.T(5904969, alladdrs, 12, false), true, false, false);
            compile = J$.N(5904993, 'compile', J$.T(5904985, compile, 12, false), true, false, false);
            compileRangeSubnets = J$.N(5905009, 'compileRangeSubnets', J$.T(5905001, compileRangeSubnets, 12, false), true, false, false);
            compileTrust = J$.N(5905025, 'compileTrust', J$.T(5905017, compileTrust, 12, false), true, false, false);
            parseipNotation = J$.N(5905041, 'parseipNotation', J$.T(5905033, parseipNotation, 12, false), true, false, false);
            parseNetmask = J$.N(5905057, 'parseNetmask', J$.T(5905049, parseNetmask, 12, false), true, false, false);
            proxyaddr = J$.N(5905073, 'proxyaddr', J$.T(5905065, proxyaddr, 12, false), true, false, false);
            trustNone = J$.N(5905089, 'trustNone', J$.T(5905081, trustNone, 12, false), true, false, false);
            trustMulti = J$.N(5905105, 'trustMulti', J$.T(5905097, trustMulti, 12, false), true, false, false);
            trustSingle = J$.N(5905121, 'trustSingle', J$.T(5905113, trustSingle, 12, false), true, false, false);
            J$.T(5900801, 'use strict', 21, false);
            J$.F(5900825, J$.I(typeof require === 'undefined' ? require = J$.R(5900809, 'require', undefined, true, true) : require = J$.R(5900809, 'require', require, true, true)), false)(J$.T(5900817, 'core-js/modules/es.array.concat', 21, false));
            J$.F(5900849, J$.I(typeof require === 'undefined' ? require = J$.R(5900833, 'require', undefined, true, true) : require = J$.R(5900833, 'require', require, true, true)), false)(J$.T(5900841, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(5900873, J$.I(typeof require === 'undefined' ? require = J$.R(5900857, 'require', undefined, true, true) : require = J$.R(5900857, 'require', require, true, true)), false)(J$.T(5900865, 'core-js/modules/es.array.last-index-of', 21, false));
            J$.F(5900897, J$.I(typeof require === 'undefined' ? require = J$.R(5900881, 'require', undefined, true, true) : require = J$.R(5900881, 'require', require, true, true)), false)(J$.T(5900889, 'core-js/modules/es.array.slice', 21, false));
            J$.F(5900921, J$.I(typeof require === 'undefined' ? require = J$.R(5900905, 'require', undefined, true, true) : require = J$.R(5900905, 'require', require, true, true)), false)(J$.T(5900913, 'core-js/modules/es.array.splice', 21, false));
            J$.F(5900945, J$.I(typeof require === 'undefined' ? require = J$.R(5900929, 'require', undefined, true, true) : require = J$.R(5900929, 'require', require, true, true)), false)(J$.T(5900937, 'core-js/modules/es.parse-int', 21, false));
            J$.F(5900969, J$.I(typeof require === 'undefined' ? require = J$.R(5900953, 'require', undefined, true, true) : require = J$.R(5900953, 'require', require, true, true)), false)(J$.T(5900961, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(5900993, J$.I(typeof require === 'undefined' ? require = J$.R(5900977, 'require', undefined, true, true) : require = J$.R(5900977, 'require', require, true, true)), false)(J$.T(5900985, 'core-js/modules/es.string.match', 21, false));
            J$.F(5901017, J$.I(typeof require === 'undefined' ? require = J$.R(5901001, 'require', undefined, true, true) : require = J$.R(5901001, 'require', require, true, true)), false)(J$.T(5901009, 'core-js/modules/es.array.concat', 21, false));
            J$.F(5901041, J$.I(typeof require === 'undefined' ? require = J$.R(5901025, 'require', undefined, true, true) : require = J$.R(5901025, 'require', require, true, true)), false)(J$.T(5901033, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(5901065, J$.I(typeof require === 'undefined' ? require = J$.R(5901049, 'require', undefined, true, true) : require = J$.R(5901049, 'require', require, true, true)), false)(J$.T(5901057, 'core-js/modules/es.array.last-index-of', 21, false));
            J$.F(5901089, J$.I(typeof require === 'undefined' ? require = J$.R(5901073, 'require', undefined, true, true) : require = J$.R(5901073, 'require', require, true, true)), false)(J$.T(5901081, 'core-js/modules/es.array.slice', 21, false));
            J$.F(5901113, J$.I(typeof require === 'undefined' ? require = J$.R(5901097, 'require', undefined, true, true) : require = J$.R(5901097, 'require', require, true, true)), false)(J$.T(5901105, 'core-js/modules/es.array.splice', 21, false));
            J$.F(5901137, J$.I(typeof require === 'undefined' ? require = J$.R(5901121, 'require', undefined, true, true) : require = J$.R(5901121, 'require', require, true, true)), false)(J$.T(5901129, 'core-js/modules/es.parse-int', 21, false));
            J$.F(5901161, J$.I(typeof require === 'undefined' ? require = J$.R(5901145, 'require', undefined, true, true) : require = J$.R(5901145, 'require', require, true, true)), false)(J$.T(5901153, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(5901185, J$.I(typeof require === 'undefined' ? require = J$.R(5901169, 'require', undefined, true, true) : require = J$.R(5901169, 'require', require, true, true)), false)(J$.T(5901177, 'core-js/modules/es.string.match', 21, false));
            J$.P(5901209, J$.I(typeof module === 'undefined' ? module = J$.R(5901193, 'module', undefined, true, true) : module = J$.R(5901193, 'module', module, true, true)), 'exports', J$.R(5901201, 'proxyaddr', proxyaddr, false, true));
            J$.P(5901241, J$.G(5901225, J$.I(typeof module === 'undefined' ? module = J$.R(5901217, 'module', undefined, true, true) : module = J$.R(5901217, 'module', module, true, true)), 'exports'), 'all', J$.R(5901233, 'alladdrs', alladdrs, false, true));
            J$.P(5901273, J$.G(5901257, J$.I(typeof module === 'undefined' ? module = J$.R(5901249, 'module', undefined, true, true) : module = J$.R(5901249, 'module', module, true, true)), 'exports'), 'compile', J$.R(5901265, 'compile', compile, false, true));
            var forwarded = J$.W(5901305, 'forwarded', J$.F(5901297, J$.I(typeof require === 'undefined' ? require = J$.R(5901281, 'require', undefined, true, true) : require = J$.R(5901281, 'require', require, true, true)), false)(J$.T(5901289, 'forwarded', 21, false)), forwarded, false, true);
            var ipaddr = J$.W(5901337, 'ipaddr', J$.F(5901329, J$.I(typeof require === 'undefined' ? require = J$.R(5901313, 'require', undefined, true, true) : require = J$.R(5901313, 'require', require, true, true)), false)(J$.T(5901321, 'ipaddr.js', 21, false)), ipaddr, false, true);
            var DIGIT_REGEXP = J$.W(5901353, 'DIGIT_REGEXP', J$.T(5901345, /^[0-9]+$/, 14, false), DIGIT_REGEXP, false, true);
            var isip = J$.W(5901377, 'isip', J$.G(5901369, J$.R(5901361, 'ipaddr', ipaddr, false, true), 'isValid'), isip, false, true);
            var parseip = J$.W(5901401, 'parseip', J$.G(5901393, J$.R(5901385, 'ipaddr', ipaddr, false, true), 'parse'), parseip, false, true);
            var IP_RANGES = J$.W(5901505, 'IP_RANGES', J$.T(5901497, {
                linklocal: J$.T(5901425, [
                    J$.T(5901409, '169.254.0.0/16', 21, false),
                    J$.T(5901417, 'fe80::/10', 21, false)
                ], 10, false),
                loopback: J$.T(5901449, [
                    J$.T(5901433, '127.0.0.1/8', 21, false),
                    J$.T(5901441, '::1/128', 21, false)
                ], 10, false),
                uniquelocal: J$.T(5901489, [
                    J$.T(5901457, '10.0.0.0/8', 21, false),
                    J$.T(5901465, '172.16.0.0/12', 21, false),
                    J$.T(5901473, '192.168.0.0/16', 21, false),
                    J$.T(5901481, 'fc00::/7', 21, false)
                ], 10, false)
            }, 11, false), IP_RANGES, false, true);
        } catch (J$e) {
            J$.Ex(5905321, J$e);
        } finally {
            if (J$.Sr(5905329))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

