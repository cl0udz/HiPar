J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(4901345, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/express/lib/middleware/query.js');
            J$.N(4901353, 'merge', merge, false, false, false);
            J$.N(4901361, 'parseUrl', parseUrl, false, false, false);
            J$.N(4901369, 'qs', qs, false, false, false);
            J$.T(4900817, 'use strict', 21, false);
            var merge = J$.W(4900849, 'merge', J$.F(4900841, J$.I(typeof require === 'undefined' ? require = J$.R(4900825, 'require', undefined, true, true) : require = J$.R(4900825, 'require', require, true, true)), false)(J$.T(4900833, 'utils-merge', 21, false)), merge, false, true);
            var parseUrl = J$.W(4900881, 'parseUrl', J$.F(4900873, J$.I(typeof require === 'undefined' ? require = J$.R(4900857, 'require', undefined, true, true) : require = J$.R(4900857, 'require', require, true, true)), false)(J$.T(4900865, 'parseurl', 21, false)), parseUrl, false, true);
            var qs = J$.W(4900913, 'qs', J$.F(4900905, J$.I(typeof require === 'undefined' ? require = J$.R(4900889, 'require', undefined, true, true) : require = J$.R(4900889, 'require', require, true, true)), false)(J$.T(4900897, 'qs', 21, false)), qs, false, true);
            J$.P(4901337, J$.I(typeof module === 'undefined' ? module = J$.R(4900921, 'module', undefined, true, true) : module = J$.R(4900921, 'module', module, true, true)), 'exports', J$.T(4901329, function query(options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4901289, arguments.callee, this, arguments);
                            arguments = J$.N(4901297, 'arguments', arguments, true, false, false);
                            options = J$.N(4901305, 'options', options, true, false, false);
                            J$.N(4901313, 'opts', opts, false, false, false);
                            J$.N(4901321, 'queryparse', queryparse, false, false, false);
                            var opts = J$.W(4900961, 'opts', J$.F(4900953, J$.R(4900929, 'merge', merge, false, true), false)(J$.T(4900937, {}, 11, false), J$.R(4900945, 'options', options, false, false)), opts, false, false);
                            var queryparse = J$.W(4900985, 'queryparse', J$.G(4900977, J$.R(4900969, 'qs', qs, false, true), 'parse'), queryparse, false, false);
                            if (J$.C(260768, J$.B(492794, '===', J$.U(492786, 'typeof', J$.R(4900993, 'options', options, false, false)), J$.T(4901001, 'function', 21, false)))) {
                                queryparse = J$.W(4901017, 'queryparse', J$.R(4901009, 'options', options, false, false), queryparse, false, false);
                                opts = J$.W(4901033, 'opts', J$.T(4901025, undefined, 24, false), opts, false, false);
                            }
                            if (J$.C(260784, J$.C(260776, J$.B(492802, '!==', J$.R(4901041, 'opts', opts, false, false), J$.T(4901049, undefined, 24, false))) ? J$.B(492810, '===', J$.G(4901065, J$.R(4901057, 'opts', opts, false, false), 'allowPrototypes'), J$.T(4901073, undefined, 24, false)) : J$._())) {
                                J$.P(4901097, J$.R(4901081, 'opts', opts, false, false), 'allowPrototypes', J$.T(4901089, true, 23, false));
                            }
                            return J$.Rt(4901281, J$.T(4901273, function query(req, res, next) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(4901225, arguments.callee, this, arguments);
                                            arguments = J$.N(4901233, 'arguments', arguments, true, false, false);
                                            req = J$.N(4901241, 'req', req, true, false, false);
                                            res = J$.N(4901249, 'res', res, true, false, false);
                                            next = J$.N(4901257, 'next', next, true, false, false);
                                            J$.N(4901265, 'val', val, false, false, false);
                                            if (J$.C(260792, J$.U(492818, '!', J$.G(4901113, J$.R(4901105, 'req', req, false, false), 'query')))) {
                                                var val = J$.W(4901153, 'val', J$.G(4901145, J$.F(4901137, J$.R(4901121, 'parseUrl', parseUrl, false, true), false)(J$.R(4901129, 'req', req, false, false)), 'query'), val, false, false);
                                                J$.P(4901201, J$.R(4901161, 'req', req, false, false), 'query', J$.F(4901193, J$.R(4901169, 'queryparse', queryparse, false, false), false)(J$.R(4901177, 'val', val, false, false), J$.R(4901185, 'opts', opts, false, false)));
                                            }
                                            J$.F(4901217, J$.R(4901209, 'next', next, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(4901377, J$e);
                                        } finally {
                                            if (J$.Fr(4901385))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4901393, J$e);
                        } finally {
                            if (J$.Fr(4901401))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4901409, J$e);
        } finally {
            if (J$.Sr(4901417))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

