J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(4802137, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/body-parser/lib/types/text.js');
            function text(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4801809, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(4801281, arguments.callee, this, arguments);
                                            arguments = J$.N(4801289, 'arguments', arguments, true, false, false);
                                            buf = J$.N(4801297, 'buf', buf, true, false, false);
                                            return J$.Rt(4801273, J$.R(4801265, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(4802233, J$e);
                                        } finally {
                                            if (J$.Fr(4802241))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(4801817, 'arguments', arguments, true, false, false);
                            options = J$.N(4801825, 'options', options, true, false, false);
                            J$.N(4801833, 'opts', opts, false, false, false);
                            J$.N(4801841, 'defaultCharset', defaultCharset, false, false, false);
                            J$.N(4801849, 'inflate', inflate, false, false, false);
                            J$.N(4801857, 'limit', limit, false, false, false);
                            J$.N(4801865, 'type', type, false, false, false);
                            J$.N(4801873, 'verify', verify, false, false, false);
                            J$.N(4801881, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(4801897, 'parse', J$.T(4801889, parse, 12, false), true, false, false);
                            var opts = J$.W(4800929, 'opts', J$.C(253840, J$.R(4800913, 'options', options, false, false)) ? J$._() : J$.T(4800921, {}, 11, false), opts, false, false);
                            var defaultCharset = J$.W(4800961, 'defaultCharset', J$.C(253848, J$.G(4800945, J$.R(4800937, 'opts', opts, false, false), 'defaultCharset')) ? J$._() : J$.T(4800953, 'utf-8', 21, false), defaultCharset, false, false);
                            var inflate = J$.W(4800993, 'inflate', J$.B(485074, '!==', J$.G(4800977, J$.R(4800969, 'opts', opts, false, false), 'inflate'), J$.T(4800985, false, 23, false)), inflate, false, false);
                            var limit = J$.W(4801081, 'limit', J$.C(253864, J$.B(485090, '!==', J$.U(485082, 'typeof', J$.G(4801009, J$.R(4801001, 'opts', opts, false, false), 'limit')), J$.T(4801017, 'number', 21, false))) ? J$.M(4801057, J$.R(4801025, 'bytes', bytes, false, true), 'parse', false)(J$.C(253856, J$.G(4801041, J$.R(4801033, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(4801049, '100kb', 21, false)) : J$.G(4801073, J$.R(4801065, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(4801113, 'type', J$.C(253872, J$.G(4801097, J$.R(4801089, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(4801105, 'text/plain', 21, false), type, false, false);
                            var verify = J$.W(4801145, 'verify', J$.C(253880, J$.G(4801129, J$.R(4801121, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(4801137, false, 23, false), verify, false, false);
                            if (J$.C(253896, J$.C(253888, J$.B(485098, '!==', J$.R(4801153, 'verify', verify, false, false), J$.T(4801161, false, 23, false))) ? J$.B(485114, '!==', J$.U(485106, 'typeof', J$.R(4801169, 'verify', verify, false, false)), J$.T(4801177, 'function', 21, false)) : J$._())) {
                                throw J$.F(4801201, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4801185, 'TypeError', undefined, true, true) : TypeError = J$.R(4801185, 'TypeError', TypeError, true, true)), true)(J$.T(4801193, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(4801257, 'shouldParse', J$.C(253904, J$.B(485130, '!==', J$.U(485122, 'typeof', J$.R(4801209, 'type', type, false, false)), J$.T(4801217, 'function', 21, false))) ? J$.F(4801241, J$.R(4801225, 'typeChecker', typeChecker, false, true), false)(J$.R(4801233, 'type', type, false, false)) : J$.R(4801249, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(4801801, J$.T(4801793, function textParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(4801745, arguments.callee, this, arguments);
                                            arguments = J$.N(4801753, 'arguments', arguments, true, false, false);
                                            req = J$.N(4801761, 'req', req, true, false, false);
                                            res = J$.N(4801769, 'res', res, true, false, false);
                                            next = J$.N(4801777, 'next', next, true, false, false);
                                            J$.N(4801785, 'charset', charset, false, false, false);
                                            if (J$.C(253912, J$.G(4801313, J$.R(4801305, 'req', req, false, false), '_body'))) {
                                                J$.F(4801337, J$.R(4801321, 'debug', debug, false, true), false)(J$.T(4801329, 'body already parsed', 21, false));
                                                J$.F(4801353, J$.R(4801345, 'next', next, false, false), false)();
                                                return J$.Rt(4801361, undefined);
                                            }
                                            J$.P(4801401, J$.R(4801369, 'req', req, false, false), 'body', J$.C(253920, J$.G(4801385, J$.R(4801377, 'req', req, false, false), 'body')) ? J$._() : J$.T(4801393, {}, 11, false));
                                            if (J$.C(253928, J$.U(485138, '!', J$.M(4801425, J$.R(4801409, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(4801417, 'req', req, false, false))))) {
                                                J$.F(4801449, J$.R(4801433, 'debug', debug, false, true), false)(J$.T(4801441, 'skip empty body', 21, false));
                                                J$.F(4801465, J$.R(4801457, 'next', next, false, false), false)();
                                                return J$.Rt(4801473, undefined);
                                            }
                                            J$.F(4801529, J$.R(4801481, 'debug', debug, false, true), false)(J$.T(4801489, 'content-type %j', 21, false), J$.G(4801521, J$.G(4801505, J$.R(4801497, 'req', req, false, false), 'headers'), J$.T(4801513, 'content-type', 21, false)));
                                            if (J$.C(253936, J$.U(485146, '!', J$.F(4801553, J$.R(4801537, 'shouldParse', shouldParse, false, false), false)(J$.R(4801545, 'req', req, false, false))))) {
                                                J$.F(4801577, J$.R(4801561, 'debug', debug, false, true), false)(J$.T(4801569, 'skip parsing', 21, false));
                                                J$.F(4801593, J$.R(4801585, 'next', next, false, false), false)();
                                                return J$.Rt(4801601, undefined);
                                            }
                                            var charset = J$.W(4801641, 'charset', J$.C(253944, J$.F(4801625, J$.R(4801609, 'getCharset', getCharset, false, true), false)(J$.R(4801617, 'req', req, false, false))) ? J$._() : J$.R(4801633, 'defaultCharset', defaultCharset, false, false), charset, false, false);
                                            J$.F(4801737, J$.R(4801649, 'read', read, false, true), false)(J$.R(4801657, 'req', req, false, false), J$.R(4801665, 'res', res, false, false), J$.R(4801673, 'next', next, false, false), J$.R(4801681, 'parse', parse, false, false), J$.R(4801689, 'debug', debug, false, true), J$.T(4801729, {
                                                encoding: J$.R(4801697, 'charset', charset, false, false),
                                                inflate: J$.R(4801705, 'inflate', inflate, false, false),
                                                limit: J$.R(4801713, 'limit', limit, false, false),
                                                verify: J$.R(4801721, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(4802249, J$e);
                                        } finally {
                                            if (J$.Fr(4802257))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4802265, J$e);
                        } finally {
                            if (J$.Fr(4802273))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharset(req) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4801993, arguments.callee, this, arguments);
                            arguments = J$.N(4802001, 'arguments', arguments, true, false, false);
                            req = J$.N(4802009, 'req', req, true, false, false);
                            try {
                                return J$.Rt(4801961, J$.M(4801953, J$.C(253952, J$.G(4801937, J$.G(4801929, J$.M(4801921, J$.R(4801905, 'contentType', contentType, false, true), 'parse', false)(J$.R(4801913, 'req', req, false, false)), 'parameters'), 'charset')) ? J$._() : J$.T(4801945, '', 21, false), 'toLowerCase', false)());
                            } catch (e) {
                                J$.N(4801985, 'e', e, false, false, true);
                                return J$.Rt(4801977, J$.T(4801969, undefined, 24, false));
                            }
                        } catch (J$e) {
                            J$.Ex(4802281, J$e);
                        } finally {
                            if (J$.Fr(4802289))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4802113, arguments.callee, this, arguments);
                            arguments = J$.N(4802121, 'arguments', arguments, true, false, false);
                            type = J$.N(4802129, 'type', type, true, false, false);
                            return J$.Rt(4802105, J$.T(4802097, function checkType(req) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(4802073, arguments.callee, this, arguments);
                                            arguments = J$.N(4802081, 'arguments', arguments, true, false, false);
                                            req = J$.N(4802089, 'req', req, true, false, false);
                                            return J$.Rt(4802065, J$.F(4802057, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(4802017, 'Boolean', undefined, true, true) : Boolean = J$.R(4802017, 'Boolean', Boolean, true, true)), false)(J$.F(4802049, J$.R(4802025, 'typeis', typeis, false, true), false)(J$.R(4802033, 'req', req, false, false), J$.R(4802041, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(4802297, J$e);
                                        } finally {
                                            if (J$.Fr(4802305))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4802313, J$e);
                        } finally {
                            if (J$.Fr(4802321))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4802145, 'bytes', bytes, false, false, false);
            J$.N(4802153, 'contentType', contentType, false, false, false);
            J$.N(4802161, 'debug', debug, false, false, false);
            J$.N(4802169, 'read', read, false, false, false);
            J$.N(4802177, 'typeis', typeis, false, false, false);
            text = J$.N(4802193, 'text', J$.T(4802185, text, 12, false), true, false, false);
            getCharset = J$.N(4802209, 'getCharset', J$.T(4802201, getCharset, 12, false), true, false, false);
            typeChecker = J$.N(4802225, 'typeChecker', J$.T(4802217, typeChecker, 12, false), true, false, false);
            J$.T(4800705, 'use strict', 21, false);
            var bytes = J$.W(4800737, 'bytes', J$.F(4800729, J$.I(typeof require === 'undefined' ? require = J$.R(4800713, 'require', undefined, true, true) : require = J$.R(4800713, 'require', require, true, true)), false)(J$.T(4800721, 'bytes', 21, false)), bytes, false, true);
            var contentType = J$.W(4800769, 'contentType', J$.F(4800761, J$.I(typeof require === 'undefined' ? require = J$.R(4800745, 'require', undefined, true, true) : require = J$.R(4800745, 'require', require, true, true)), false)(J$.T(4800753, 'content-type', 21, false)), contentType, false, true);
            var debug = J$.W(4800817, 'debug', J$.F(4800809, J$.F(4800793, J$.I(typeof require === 'undefined' ? require = J$.R(4800777, 'require', undefined, true, true) : require = J$.R(4800777, 'require', require, true, true)), false)(J$.T(4800785, 'debug', 21, false)), false)(J$.T(4800801, 'body-parser:text', 21, false)), debug, false, true);
            var read = J$.W(4800849, 'read', J$.F(4800841, J$.I(typeof require === 'undefined' ? require = J$.R(4800825, 'require', undefined, true, true) : require = J$.R(4800825, 'require', require, true, true)), false)(J$.T(4800833, '../read', 21, false)), read, false, true);
            var typeis = J$.W(4800881, 'typeis', J$.F(4800873, J$.I(typeof require === 'undefined' ? require = J$.R(4800857, 'require', undefined, true, true) : require = J$.R(4800857, 'require', require, true, true)), false)(J$.T(4800865, 'type-is', 21, false)), typeis, false, true);
            J$.P(4800905, J$.I(typeof module === 'undefined' ? module = J$.R(4800889, 'module', undefined, true, true) : module = J$.R(4800889, 'module', module, true, true)), 'exports', J$.R(4800897, 'text', text, false, true));
        } catch (J$e) {
            J$.Ex(4802329, J$e);
        } finally {
            if (J$.Sr(4802337))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

