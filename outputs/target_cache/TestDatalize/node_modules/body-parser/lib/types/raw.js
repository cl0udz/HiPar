J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(4800537, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/body-parser/lib/types/raw.js');
            function raw(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4800329, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(4799849, arguments.callee, this, arguments);
                                            arguments = J$.N(4799857, 'arguments', arguments, true, false, false);
                                            buf = J$.N(4799865, 'buf', buf, true, false, false);
                                            return J$.Rt(4799841, J$.R(4799833, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(4800609, J$e);
                                        } finally {
                                            if (J$.Fr(4800617))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(4800337, 'arguments', arguments, true, false, false);
                            options = J$.N(4800345, 'options', options, true, false, false);
                            J$.N(4800353, 'opts', opts, false, false, false);
                            J$.N(4800361, 'inflate', inflate, false, false, false);
                            J$.N(4800369, 'limit', limit, false, false, false);
                            J$.N(4800377, 'type', type, false, false, false);
                            J$.N(4800385, 'verify', verify, false, false, false);
                            J$.N(4800393, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(4800409, 'parse', J$.T(4800401, parse, 12, false), true, false, false);
                            var opts = J$.W(4799529, 'opts', J$.C(253744, J$.R(4799513, 'options', options, false, false)) ? J$._() : J$.T(4799521, {}, 11, false), opts, false, false);
                            var inflate = J$.W(4799561, 'inflate', J$.B(484994, '!==', J$.G(4799545, J$.R(4799537, 'opts', opts, false, false), 'inflate'), J$.T(4799553, false, 23, false)), inflate, false, false);
                            var limit = J$.W(4799649, 'limit', J$.C(253760, J$.B(485010, '!==', J$.U(485002, 'typeof', J$.G(4799577, J$.R(4799569, 'opts', opts, false, false), 'limit')), J$.T(4799585, 'number', 21, false))) ? J$.M(4799625, J$.R(4799593, 'bytes', bytes, false, true), 'parse', false)(J$.C(253752, J$.G(4799609, J$.R(4799601, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(4799617, '100kb', 21, false)) : J$.G(4799641, J$.R(4799633, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(4799681, 'type', J$.C(253768, J$.G(4799665, J$.R(4799657, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(4799673, 'application/octet-stream', 21, false), type, false, false);
                            var verify = J$.W(4799713, 'verify', J$.C(253776, J$.G(4799697, J$.R(4799689, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(4799705, false, 23, false), verify, false, false);
                            if (J$.C(253792, J$.C(253784, J$.B(485018, '!==', J$.R(4799721, 'verify', verify, false, false), J$.T(4799729, false, 23, false))) ? J$.B(485034, '!==', J$.U(485026, 'typeof', J$.R(4799737, 'verify', verify, false, false)), J$.T(4799745, 'function', 21, false)) : J$._())) {
                                throw J$.F(4799769, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4799753, 'TypeError', undefined, true, true) : TypeError = J$.R(4799753, 'TypeError', TypeError, true, true)), true)(J$.T(4799761, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(4799825, 'shouldParse', J$.C(253800, J$.B(485050, '!==', J$.U(485042, 'typeof', J$.R(4799777, 'type', type, false, false)), J$.T(4799785, 'function', 21, false))) ? J$.F(4799809, J$.R(4799793, 'typeChecker', typeChecker, false, true), false)(J$.R(4799801, 'type', type, false, false)) : J$.R(4799817, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(4800321, J$.T(4800313, function rawParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(4800273, arguments.callee, this, arguments);
                                            arguments = J$.N(4800281, 'arguments', arguments, true, false, false);
                                            req = J$.N(4800289, 'req', req, true, false, false);
                                            res = J$.N(4800297, 'res', res, true, false, false);
                                            next = J$.N(4800305, 'next', next, true, false, false);
                                            if (J$.C(253808, J$.G(4799881, J$.R(4799873, 'req', req, false, false), '_body'))) {
                                                J$.F(4799905, J$.R(4799889, 'debug', debug, false, true), false)(J$.T(4799897, 'body already parsed', 21, false));
                                                J$.F(4799921, J$.R(4799913, 'next', next, false, false), false)();
                                                return J$.Rt(4799929, undefined);
                                            }
                                            J$.P(4799969, J$.R(4799937, 'req', req, false, false), 'body', J$.C(253816, J$.G(4799953, J$.R(4799945, 'req', req, false, false), 'body')) ? J$._() : J$.T(4799961, {}, 11, false));
                                            if (J$.C(253824, J$.U(485058, '!', J$.M(4799993, J$.R(4799977, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(4799985, 'req', req, false, false))))) {
                                                J$.F(4800017, J$.R(4800001, 'debug', debug, false, true), false)(J$.T(4800009, 'skip empty body', 21, false));
                                                J$.F(4800033, J$.R(4800025, 'next', next, false, false), false)();
                                                return J$.Rt(4800041, undefined);
                                            }
                                            J$.F(4800097, J$.R(4800049, 'debug', debug, false, true), false)(J$.T(4800057, 'content-type %j', 21, false), J$.G(4800089, J$.G(4800073, J$.R(4800065, 'req', req, false, false), 'headers'), J$.T(4800081, 'content-type', 21, false)));
                                            if (J$.C(253832, J$.U(485066, '!', J$.F(4800121, J$.R(4800105, 'shouldParse', shouldParse, false, false), false)(J$.R(4800113, 'req', req, false, false))))) {
                                                J$.F(4800145, J$.R(4800129, 'debug', debug, false, true), false)(J$.T(4800137, 'skip parsing', 21, false));
                                                J$.F(4800161, J$.R(4800153, 'next', next, false, false), false)();
                                                return J$.Rt(4800169, undefined);
                                            }
                                            J$.F(4800265, J$.R(4800177, 'read', read, false, true), false)(J$.R(4800185, 'req', req, false, false), J$.R(4800193, 'res', res, false, false), J$.R(4800201, 'next', next, false, false), J$.R(4800209, 'parse', parse, false, false), J$.R(4800217, 'debug', debug, false, true), J$.T(4800257, {
                                                encoding: J$.T(4800225, null, 25, false),
                                                inflate: J$.R(4800233, 'inflate', inflate, false, false),
                                                limit: J$.R(4800241, 'limit', limit, false, false),
                                                verify: J$.R(4800249, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(4800625, J$e);
                                        } finally {
                                            if (J$.Fr(4800633))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4800641, J$e);
                        } finally {
                            if (J$.Fr(4800649))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4800513, arguments.callee, this, arguments);
                            arguments = J$.N(4800521, 'arguments', arguments, true, false, false);
                            type = J$.N(4800529, 'type', type, true, false, false);
                            return J$.Rt(4800505, J$.T(4800497, function checkType(req) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(4800473, arguments.callee, this, arguments);
                                            arguments = J$.N(4800481, 'arguments', arguments, true, false, false);
                                            req = J$.N(4800489, 'req', req, true, false, false);
                                            return J$.Rt(4800465, J$.F(4800457, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(4800417, 'Boolean', undefined, true, true) : Boolean = J$.R(4800417, 'Boolean', Boolean, true, true)), false)(J$.F(4800449, J$.R(4800425, 'typeis', typeis, false, true), false)(J$.R(4800433, 'req', req, false, false), J$.R(4800441, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(4800657, J$e);
                                        } finally {
                                            if (J$.Fr(4800665))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4800673, J$e);
                        } finally {
                            if (J$.Fr(4800681))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4800545, 'bytes', bytes, false, false, false);
            J$.N(4800553, 'debug', debug, false, false, false);
            J$.N(4800561, 'read', read, false, false, false);
            J$.N(4800569, 'typeis', typeis, false, false, false);
            raw = J$.N(4800585, 'raw', J$.T(4800577, raw, 12, false), true, false, false);
            typeChecker = J$.N(4800601, 'typeChecker', J$.T(4800593, typeChecker, 12, false), true, false, false);
            J$.T(4799337, 'use strict', 21, false);
            var bytes = J$.W(4799369, 'bytes', J$.F(4799361, J$.I(typeof require === 'undefined' ? require = J$.R(4799345, 'require', undefined, true, true) : require = J$.R(4799345, 'require', require, true, true)), false)(J$.T(4799353, 'bytes', 21, false)), bytes, false, true);
            var debug = J$.W(4799417, 'debug', J$.F(4799409, J$.F(4799393, J$.I(typeof require === 'undefined' ? require = J$.R(4799377, 'require', undefined, true, true) : require = J$.R(4799377, 'require', require, true, true)), false)(J$.T(4799385, 'debug', 21, false)), false)(J$.T(4799401, 'body-parser:raw', 21, false)), debug, false, true);
            var read = J$.W(4799449, 'read', J$.F(4799441, J$.I(typeof require === 'undefined' ? require = J$.R(4799425, 'require', undefined, true, true) : require = J$.R(4799425, 'require', require, true, true)), false)(J$.T(4799433, '../read', 21, false)), read, false, true);
            var typeis = J$.W(4799481, 'typeis', J$.F(4799473, J$.I(typeof require === 'undefined' ? require = J$.R(4799457, 'require', undefined, true, true) : require = J$.R(4799457, 'require', require, true, true)), false)(J$.T(4799465, 'type-is', 21, false)), typeis, false, true);
            J$.P(4799505, J$.I(typeof module === 'undefined' ? module = J$.R(4799489, 'module', undefined, true, true) : module = J$.R(4799489, 'module', module, true, true)), 'exports', J$.R(4799497, 'raw', raw, false, true));
        } catch (J$e) {
            J$.Ex(4800689, J$e);
        } finally {
            if (J$.Sr(4800697))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

