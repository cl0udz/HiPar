J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(6001065, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/safe-buffer/index.js');
            function copyProps(src, dst) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6000097, arguments.callee, this, arguments);
                            arguments = J$.N(6000105, 'arguments', arguments, true, false, false);
                            src = J$.N(6000113, 'src', src, true, false, false);
                            dst = J$.N(6000121, 'dst', dst, true, false, false);
                            J$.N(6000129, 'key', key, false, false, false);
                            for (var key in J$.H(6000081, J$.R(6000025, 'src', src, false, false))) {
                                J$.N(6000089, 'key', key, false, true, false);
                                {
                                    {
                                        J$.P(6000073, J$.R(6000033, 'dst', dst, false, false), J$.R(6000041, 'key', key, false, false), J$.G(6000065, J$.R(6000049, 'src', src, false, false), J$.R(6000057, 'key', key, false, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(6001121, J$e);
                        } finally {
                            if (J$.Fr(6001129))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SafeBuffer(arg, encodingOrOffset, length) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6000329, arguments.callee, this, arguments);
                            arguments = J$.N(6000337, 'arguments', arguments, true, false, false);
                            arg = J$.N(6000345, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(6000353, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(6000361, 'length', length, true, false, false);
                            return J$.Rt(6000321, J$.F(6000313, J$.R(6000281, 'Buffer', Buffer, false, true), false)(J$.R(6000289, 'arg', arg, false, false), J$.R(6000297, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(6000305, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(6001137, J$e);
                        } finally {
                            if (J$.Fr(6001145))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6001073, 'buffer', buffer, false, false, false);
            J$.N(6001081, 'Buffer', Buffer, false, false, false);
            copyProps = J$.N(6001097, 'copyProps', J$.T(6001089, copyProps, 12, false), true, false, false);
            SafeBuffer = J$.N(6001113, 'SafeBuffer', J$.T(6001105, SafeBuffer, 12, false), true, false, false);
            J$.T(5999913, 'use strict', 21, false);
            J$.F(5999937, J$.I(typeof require === 'undefined' ? require = J$.R(5999921, 'require', undefined, true, true) : require = J$.R(5999921, 'require', require, true, true)), false)(J$.T(5999929, 'core-js/modules/es.array.fill', 21, false));
            J$.F(5999961, J$.I(typeof require === 'undefined' ? require = J$.R(5999945, 'require', undefined, true, true) : require = J$.R(5999945, 'require', require, true, true)), false)(J$.T(5999953, 'core-js/modules/es.array.fill', 21, false));
            var buffer = J$.W(5999993, 'buffer', J$.F(5999985, J$.I(typeof require === 'undefined' ? require = J$.R(5999969, 'require', undefined, true, true) : require = J$.R(5999969, 'require', require, true, true)), false)(J$.T(5999977, 'buffer', 21, false)), buffer, false, true);
            var Buffer = J$.W(6000017, 'Buffer', J$.G(6000009, J$.R(6000001, 'buffer', buffer, false, true), 'Buffer'), Buffer, false, true);
            if (J$.C(322336, J$.C(322328, J$.C(322320, J$.C(322312, J$.G(6000145, J$.R(6000137, 'Buffer', Buffer, false, true), 'from')) ? J$.G(6000161, J$.R(6000153, 'Buffer', Buffer, false, true), 'alloc') : J$._()) ? J$.G(6000177, J$.R(6000169, 'Buffer', Buffer, false, true), 'allocUnsafe') : J$._()) ? J$.G(6000193, J$.R(6000185, 'Buffer', Buffer, false, true), 'allocUnsafeSlow') : J$._())) {
                J$.P(6000217, J$.I(typeof module === 'undefined' ? module = J$.R(6000201, 'module', undefined, true, true) : module = J$.R(6000201, 'module', module, true, true)), 'exports', J$.R(6000209, 'buffer', buffer, false, true));
            } else {
                J$.F(6000249, J$.R(6000225, 'copyProps', copyProps, false, true), false)(J$.R(6000233, 'buffer', buffer, false, true), J$.I(typeof exports === 'undefined' ? exports = J$.R(6000241, 'exports', undefined, true, true) : exports = J$.R(6000241, 'exports', exports, true, true)));
                J$.P(6000273, J$.I(typeof exports === 'undefined' ? exports = J$.R(6000257, 'exports', undefined, true, true) : exports = J$.R(6000257, 'exports', exports, true, true)), 'Buffer', J$.R(6000265, 'SafeBuffer', SafeBuffer, false, true));
            }
            J$.F(6000393, J$.R(6000369, 'copyProps', copyProps, false, true), false)(J$.R(6000377, 'Buffer', Buffer, false, true), J$.R(6000385, 'SafeBuffer', SafeBuffer, false, true));
            J$.P(6000545, J$.R(6000401, 'SafeBuffer', SafeBuffer, false, true), 'from', J$.T(6000537, function (arg, encodingOrOffset, length) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(6000497, arguments.callee, this, arguments);
                            arguments = J$.N(6000505, 'arguments', arguments, true, false, false);
                            arg = J$.N(6000513, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(6000521, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(6000529, 'length', length, true, false, false);
                            if (J$.C(322344, J$.B(570354, '===', J$.U(570346, 'typeof', J$.R(6000409, 'arg', arg, false, false)), J$.T(6000417, 'number', 21, false)))) {
                                throw J$.F(6000441, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(6000425, 'TypeError', undefined, true, true) : TypeError = J$.R(6000425, 'TypeError', TypeError, true, true)), true)(J$.T(6000433, 'Argument must not be a number', 21, false));
                            }
                            return J$.Rt(6000489, J$.F(6000481, J$.R(6000449, 'Buffer', Buffer, false, true), false)(J$.R(6000457, 'arg', arg, false, false), J$.R(6000465, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(6000473, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(6001153, J$e);
                        } finally {
                            if (J$.Fr(6001161))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6000817, J$.R(6000553, 'SafeBuffer', SafeBuffer, false, true), 'alloc', J$.T(6000809, function (size, fill, encoding) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(6000761, arguments.callee, this, arguments);
                            arguments = J$.N(6000769, 'arguments', arguments, true, false, false);
                            size = J$.N(6000777, 'size', size, true, false, false);
                            fill = J$.N(6000785, 'fill', fill, true, false, false);
                            encoding = J$.N(6000793, 'encoding', encoding, true, false, false);
                            J$.N(6000801, 'buf', buf, false, false, false);
                            if (J$.C(322352, J$.B(570370, '!==', J$.U(570362, 'typeof', J$.R(6000561, 'size', size, false, false)), J$.T(6000569, 'number', 21, false)))) {
                                throw J$.F(6000593, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(6000577, 'TypeError', undefined, true, true) : TypeError = J$.R(6000577, 'TypeError', TypeError, true, true)), true)(J$.T(6000585, 'Argument must be a number', 21, false));
                            }
                            var buf = J$.W(6000625, 'buf', J$.F(6000617, J$.R(6000601, 'Buffer', Buffer, false, true), false)(J$.R(6000609, 'size', size, false, false)), buf, false, false);
                            if (J$.C(322368, J$.B(570378, '!==', J$.R(6000633, 'fill', fill, false, false), J$.T(6000641, undefined, 24, false)))) {
                                if (J$.C(322360, J$.B(570394, '===', J$.U(570386, 'typeof', J$.R(6000649, 'encoding', encoding, false, false)), J$.T(6000657, 'string', 21, false)))) {
                                    J$.M(6000689, J$.R(6000665, 'buf', buf, false, false), 'fill', false)(J$.R(6000673, 'fill', fill, false, false), J$.R(6000681, 'encoding', encoding, false, false));
                                } else {
                                    J$.M(6000713, J$.R(6000697, 'buf', buf, false, false), 'fill', false)(J$.R(6000705, 'fill', fill, false, false));
                                }
                            } else {
                                J$.M(6000737, J$.R(6000721, 'buf', buf, false, false), 'fill', false)(J$.T(6000729, 0, 22, false));
                            }
                            return J$.Rt(6000753, J$.R(6000745, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(6001169, J$e);
                        } finally {
                            if (J$.Fr(6001177))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6000937, J$.R(6000825, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafe', J$.T(6000929, function (size) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(6000905, arguments.callee, this, arguments);
                            arguments = J$.N(6000913, 'arguments', arguments, true, false, false);
                            size = J$.N(6000921, 'size', size, true, false, false);
                            if (J$.C(322376, J$.B(570410, '!==', J$.U(570402, 'typeof', J$.R(6000833, 'size', size, false, false)), J$.T(6000841, 'number', 21, false)))) {
                                throw J$.F(6000865, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(6000849, 'TypeError', undefined, true, true) : TypeError = J$.R(6000849, 'TypeError', TypeError, true, true)), true)(J$.T(6000857, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(6000897, J$.F(6000889, J$.R(6000873, 'Buffer', Buffer, false, true), false)(J$.R(6000881, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(6001185, J$e);
                        } finally {
                            if (J$.Fr(6001193))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6001057, J$.R(6000945, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafeSlow', J$.T(6001049, function (size) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(6001025, arguments.callee, this, arguments);
                            arguments = J$.N(6001033, 'arguments', arguments, true, false, false);
                            size = J$.N(6001041, 'size', size, true, false, false);
                            if (J$.C(322384, J$.B(570426, '!==', J$.U(570418, 'typeof', J$.R(6000953, 'size', size, false, false)), J$.T(6000961, 'number', 21, false)))) {
                                throw J$.F(6000985, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(6000969, 'TypeError', undefined, true, true) : TypeError = J$.R(6000969, 'TypeError', TypeError, true, true)), true)(J$.T(6000977, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(6001017, J$.M(6001009, J$.R(6000993, 'buffer', buffer, false, true), 'SlowBuffer', false)(J$.R(6001001, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(6001201, J$e);
                        } finally {
                            if (J$.Fr(6001209))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(6001217, J$e);
        } finally {
            if (J$.Sr(6001225))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

