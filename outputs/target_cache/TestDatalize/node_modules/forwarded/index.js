J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(4952457, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestDatalize/node_modules/forwarded/index.js');
            function forwarded(req) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4951961, arguments.callee, this, arguments);
                            arguments = J$.N(4951969, 'arguments', arguments, true, false, false);
                            req = J$.N(4951977, 'req', req, true, false, false);
                            J$.N(4951985, 'proxyAddrs', proxyAddrs, false, false, false);
                            J$.N(4951993, 'socketAddr', socketAddr, false, false, false);
                            J$.N(4952001, 'addrs', addrs, false, false, false);
                            if (J$.C(263896, J$.U(496706, '!', J$.R(4951777, 'req', req, false, false)))) {
                                throw J$.F(4951801, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4951785, 'TypeError', undefined, true, true) : TypeError = J$.R(4951785, 'TypeError', TypeError, true, true)), true)(J$.T(4951793, 'argument req is required', 21, false));
                            }
                            var proxyAddrs = J$.W(4951865, 'proxyAddrs', J$.F(4951857, J$.R(4951809, 'parse', parse, false, true), false)(J$.C(263904, J$.G(4951841, J$.G(4951825, J$.R(4951817, 'req', req, false, false), 'headers'), J$.T(4951833, 'x-forwarded-for', 21, false))) ? J$._() : J$.T(4951849, '', 21, false)), proxyAddrs, false, false);
                            var socketAddr = J$.W(4951897, 'socketAddr', J$.G(4951889, J$.G(4951881, J$.R(4951873, 'req', req, false, false), 'connection'), 'remoteAddress'), socketAddr, false, false);
                            var addrs = J$.W(4951937, 'addrs', J$.M(4951929, J$.T(4951913, [J$.R(4951905, 'socketAddr', socketAddr, false, false)], 10, false), 'concat', false)(J$.R(4951921, 'proxyAddrs', proxyAddrs, false, false)), addrs, false, false);
                            return J$.Rt(4951953, J$.R(4951945, 'addrs', addrs, false, false));
                        } catch (J$e) {
                            J$.Ex(4952497, J$e);
                        } finally {
                            if (J$.Fr(4952505))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parse(header) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4952401, arguments.callee, this, arguments);
                            arguments = J$.N(4952409, 'arguments', arguments, true, false, false);
                            header = J$.N(4952417, 'header', header, true, false, false);
                            J$.N(4952425, 'end', end, false, false, false);
                            J$.N(4952433, 'list', list, false, false, false);
                            J$.N(4952441, 'start', start, false, false, false);
                            J$.N(4952449, 'i', i, false, false, false);
                            var end = J$.W(4952025, 'end', J$.G(4952017, J$.R(4952009, 'header', header, false, false), 'length'), end, false, false);
                            var list = J$.W(4952041, 'list', J$.T(4952033, [], 10, false), list, false, false);
                            var start = J$.W(4952065, 'start', J$.G(4952057, J$.R(4952049, 'header', header, false, false), 'length'), start, false, false);
                            for (var i = J$.W(4952097, 'i', J$.B(496714, '-', J$.G(4952081, J$.R(4952073, 'header', header, false, false), 'length'), J$.T(4952089, 1, 22, false)), i, false, false); J$.C(263952, J$.B(496722, '>=', J$.R(4952105, 'i', i, false, false), J$.T(4952113, 0, 22, false))); J$.B(496746, '+', i = J$.W(4952129, 'i', J$.B(496738, '-', J$.U(496730, '+', J$.R(4952121, 'i', i, false, false)), 1), i, false, false), 1)) {
                                switch (J$.C1(263928, J$.M(4952153, J$.R(4952137, 'header', header, false, false), 'charCodeAt', false)(J$.R(4952145, 'i', i, false, false)))) {
                                case J$.C2(263936, J$.T(4952201, 32, 22, false)):
                                    if (J$.C(263912, J$.B(496754, '===', J$.R(4952161, 'start', start, false, false), J$.R(4952169, 'end', end, false, false)))) {
                                        start = J$.W(4952193, 'start', end = J$.W(4952185, 'end', J$.R(4952177, 'i', i, false, false), end, false, false), start, false, false);
                                    }
                                    break;
                                case J$.C2(263944, J$.T(4952297, 44, 22, false)):
                                    if (J$.C(263920, J$.B(496762, '!==', J$.R(4952209, 'start', start, false, false), J$.R(4952217, 'end', end, false, false)))) {
                                        J$.M(4952265, J$.R(4952225, 'list', list, false, false), 'push', false)(J$.M(4952257, J$.R(4952233, 'header', header, false, false), 'substring', false)(J$.R(4952241, 'start', start, false, false), J$.R(4952249, 'end', end, false, false)));
                                    }
                                    start = J$.W(4952289, 'start', end = J$.W(4952281, 'end', J$.R(4952273, 'i', i, false, false), end, false, false), start, false, false);
                                    break;
                                default:
                                    start = J$.W(4952313, 'start', J$.R(4952305, 'i', i, false, false), start, false, false);
                                    break;
                                }
                            }
                            if (J$.C(263960, J$.B(496770, '!==', J$.R(4952321, 'start', start, false, false), J$.R(4952329, 'end', end, false, false)))) {
                                J$.M(4952377, J$.R(4952337, 'list', list, false, false), 'push', false)(J$.M(4952369, J$.R(4952345, 'header', header, false, false), 'substring', false)(J$.R(4952353, 'start', start, false, false), J$.R(4952361, 'end', end, false, false)));
                            }
                            return J$.Rt(4952393, J$.R(4952385, 'list', list, false, false));
                        } catch (J$e) {
                            J$.Ex(4952513, J$e);
                        } finally {
                            if (J$.Fr(4952521))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            forwarded = J$.N(4952473, 'forwarded', J$.T(4952465, forwarded, 12, false), true, false, false);
            parse = J$.N(4952489, 'parse', J$.T(4952481, parse, 12, false), true, false, false);
            J$.T(4951697, 'use strict', 21, false);
            J$.F(4951721, J$.I(typeof require === 'undefined' ? require = J$.R(4951705, 'require', undefined, true, true) : require = J$.R(4951705, 'require', require, true, true)), false)(J$.T(4951713, 'core-js/modules/es.array.concat', 21, false));
            J$.F(4951745, J$.I(typeof require === 'undefined' ? require = J$.R(4951729, 'require', undefined, true, true) : require = J$.R(4951729, 'require', require, true, true)), false)(J$.T(4951737, 'core-js/modules/es.array.concat', 21, false));
            J$.P(4951769, J$.I(typeof module === 'undefined' ? module = J$.R(4951753, 'module', undefined, true, true) : module = J$.R(4951753, 'module', module, true, true)), 'exports', J$.R(4951761, 'forwarded', forwarded, false, true));
        } catch (J$e) {
            J$.Ex(4952529, J$e);
        } finally {
            if (J$.Sr(4952537))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

