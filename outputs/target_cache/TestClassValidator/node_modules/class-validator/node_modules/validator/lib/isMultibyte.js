J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2089673, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isMultibyte.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2089497, arguments.callee, this, arguments);
                            arguments = J$.N(2089505, 'arguments', arguments, true, false, false);
                            obj = J$.N(2089513, 'obj', obj, true, false, false);
                            return J$.Rt(2089489, J$.C(123368, J$.C(123360, J$.R(2089441, 'obj', obj, false, false)) ? J$.G(2089457, J$.R(2089449, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(2089465, 'obj', obj, false, false) : J$.T(2089481, { default: J$.R(2089473, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(2089737, J$e);
                        } finally {
                            if (J$.Fr(2089745))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isMultibyte(str) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2089609, arguments.callee, this, arguments);
                            arguments = J$.N(2089617, 'arguments', arguments, true, false, false);
                            str = J$.N(2089625, 'str', str, true, false, false);
                            J$.F(2089569, (J$.T(2089537, 0, 22, false), J$.G(2089553, J$.R(2089545, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(2089561, 'str', str, false, false));
                            return J$.Rt(2089601, J$.M(2089593, J$.R(2089577, 'multibyte', multibyte, false, true), 'test', false)(J$.R(2089585, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(2089753, J$e);
                        } finally {
                            if (J$.Fr(2089761))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2089681, '_assertString', _assertString, false, false, false);
            J$.N(2089689, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(2089705, '_interopRequireDefault', J$.T(2089697, _interopRequireDefault, 12, false), true, false, false);
            J$.N(2089713, 'multibyte', multibyte, false, false, false);
            isMultibyte = J$.N(2089729, 'isMultibyte', J$.T(2089721, isMultibyte, 12, false), true, false, false);
            J$.T(2089297, 'use strict', 21, false);
            J$.M(2089345, J$.I(typeof Object === 'undefined' ? Object = J$.R(2089305, 'Object', undefined, true, true) : Object = J$.R(2089305, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(2089313, 'exports', undefined, true, true) : exports = J$.R(2089313, 'exports', exports, true, true)), J$.T(2089321, '__esModule', 21, false), J$.T(2089337, { value: J$.T(2089329, true, 23, false) }, 11, false));
            J$.P(2089369, J$.I(typeof exports === 'undefined' ? exports = J$.R(2089353, 'exports', undefined, true, true) : exports = J$.R(2089353, 'exports', exports, true, true)), 'default', J$.R(2089361, 'isMultibyte', isMultibyte, false, true));
            var _assertString = J$.W(2089401, '_assertString', J$.F(2089393, J$.I(typeof require === 'undefined' ? require = J$.R(2089377, 'require', undefined, true, true) : require = J$.R(2089377, 'require', require, true, true)), false)(J$.T(2089385, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(2089433, '_assertString2', J$.F(2089425, J$.R(2089409, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(2089417, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var multibyte = J$.W(2089529, 'multibyte', J$.T(2089521, /[^\x00-\x7F]/, 14, false), multibyte, false, true);
            J$.P(2089665, J$.I(typeof module === 'undefined' ? module = J$.R(2089633, 'module', undefined, true, true) : module = J$.R(2089633, 'module', module, true, true)), 'exports', J$.G(2089657, J$.I(typeof exports === 'undefined' ? exports = J$.R(2089641, 'exports', undefined, true, true) : exports = J$.R(2089641, 'exports', exports, true, true)), J$.T(2089649, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(2089769, J$e);
        } finally {
            if (J$.Sr(2089777))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

