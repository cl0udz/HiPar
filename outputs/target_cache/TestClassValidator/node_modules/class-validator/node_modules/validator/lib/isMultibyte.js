J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5872969, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isMultibyte.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5872793, arguments.callee, this, arguments);
                            arguments = J$.N(5872801, 'arguments', arguments, true, false, false);
                            obj = J$.N(5872809, 'obj', obj, true, false, false);
                            return J$.Rt(5872785, J$.C(319888, J$.C(319880, J$.R(5872737, 'obj', obj, false, false)) ? J$.G(5872753, J$.R(5872745, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(5872761, 'obj', obj, false, false) : J$.T(5872777, { default: J$.R(5872769, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(5873033, J$e);
                        } finally {
                            if (J$.Fr(5873041))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isMultibyte(str) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5872905, arguments.callee, this, arguments);
                            arguments = J$.N(5872913, 'arguments', arguments, true, false, false);
                            str = J$.N(5872921, 'str', str, true, false, false);
                            J$.F(5872865, (J$.T(5872833, 0, 22, false), J$.G(5872849, J$.R(5872841, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(5872857, 'str', str, false, false));
                            return J$.Rt(5872897, J$.M(5872889, J$.R(5872873, 'multibyte', multibyte, false, true), 'test', false)(J$.R(5872881, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(5873049, J$e);
                        } finally {
                            if (J$.Fr(5873057))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5872977, '_assertString', _assertString, false, false, false);
            J$.N(5872985, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(5873001, '_interopRequireDefault', J$.T(5872993, _interopRequireDefault, 12, false), true, false, false);
            J$.N(5873009, 'multibyte', multibyte, false, false, false);
            isMultibyte = J$.N(5873025, 'isMultibyte', J$.T(5873017, isMultibyte, 12, false), true, false, false);
            J$.T(5872593, 'use strict', 21, false);
            J$.M(5872641, J$.I(typeof Object === 'undefined' ? Object = J$.R(5872601, 'Object', undefined, true, true) : Object = J$.R(5872601, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(5872609, 'exports', undefined, true, true) : exports = J$.R(5872609, 'exports', exports, true, true)), J$.T(5872617, '__esModule', 21, false), J$.T(5872633, { value: J$.T(5872625, true, 23, false) }, 11, false));
            J$.P(5872665, J$.I(typeof exports === 'undefined' ? exports = J$.R(5872649, 'exports', undefined, true, true) : exports = J$.R(5872649, 'exports', exports, true, true)), 'default', J$.R(5872657, 'isMultibyte', isMultibyte, false, true));
            var _assertString = J$.W(5872697, '_assertString', J$.F(5872689, J$.I(typeof require === 'undefined' ? require = J$.R(5872673, 'require', undefined, true, true) : require = J$.R(5872673, 'require', require, true, true)), false)(J$.T(5872681, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(5872729, '_assertString2', J$.F(5872721, J$.R(5872705, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(5872713, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var multibyte = J$.W(5872825, 'multibyte', J$.T(5872817, /[^\x00-\x7F]/, 14, false), multibyte, false, true);
            J$.P(5872961, J$.I(typeof module === 'undefined' ? module = J$.R(5872929, 'module', undefined, true, true) : module = J$.R(5872929, 'module', module, true, true)), 'exports', J$.G(5872953, J$.I(typeof exports === 'undefined' ? exports = J$.R(5872937, 'exports', undefined, true, true) : exports = J$.R(5872937, 'exports', exports, true, true)), J$.T(5872945, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(5873065, J$e);
        } finally {
            if (J$.Sr(5873073))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

