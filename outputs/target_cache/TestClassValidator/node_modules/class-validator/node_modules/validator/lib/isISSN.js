J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2080225, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isISSN.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2079489, arguments.callee, this, arguments);
                            arguments = J$.N(2079497, 'arguments', arguments, true, false, false);
                            obj = J$.N(2079505, 'obj', obj, true, false, false);
                            return J$.Rt(2079481, J$.C(122656, J$.C(122648, J$.R(2079433, 'obj', obj, false, false)) ? J$.G(2079449, J$.R(2079441, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(2079457, 'obj', obj, false, false) : J$.T(2079473, { default: J$.R(2079465, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(2080289, J$e);
                        } finally {
                            if (J$.Fr(2080297))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isISSN(str) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2080113, arguments.callee, this, arguments);
                            arguments = J$.N(2080121, 'arguments', arguments, true, false, false);
                            str = J$.N(2080129, 'str', str, true, false, false);
                            J$.N(2080137, 'options', options, false, false, false);
                            J$.N(2080145, 'testIssn', testIssn, false, false, false);
                            J$.N(2080153, 'digits', digits, false, false, false);
                            J$.N(2080161, 'checksum', checksum, false, false, false);
                            J$.N(2080169, 'i', i, false, false, false);
                            J$.N(2080177, 'digit', digit, false, false, false);
                            var options = J$.W(2079617, 'options', J$.C(122672, J$.C(122664, J$.B(256346, '>', J$.G(2079537, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(2079529, 'arguments', undefined, true, true) : arguments = J$.R(2079529, 'arguments', arguments, true, true)), 'length'), J$.T(2079545, 1, 22, false))) ? J$.B(256354, '!==', J$.G(2079569, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(2079553, 'arguments', undefined, true, true) : arguments = J$.R(2079553, 'arguments', arguments, true, true)), J$.T(2079561, 1, 22, false)), J$.T(2079577, undefined, 24, false)) : J$._()) ? J$.G(2079601, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(2079585, 'arguments', undefined, true, true) : arguments = J$.R(2079585, 'arguments', arguments, true, true)), J$.T(2079593, 1, 22, false)) : J$.T(2079609, {}, 11, false), options, false, false);
                            J$.F(2079657, (J$.T(2079625, 0, 22, false), J$.G(2079641, J$.R(2079633, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(2079649, 'str', str, false, false));
                            var testIssn = J$.W(2079673, 'testIssn', J$.R(2079665, 'issn', issn, false, true), testIssn, false, false);
                            testIssn = J$.W(2079737, 'testIssn', J$.C(122680, J$.G(2079689, J$.R(2079681, 'options', options, false, false), 'require_hyphen')) ? J$.M(2079721, J$.R(2079697, 'testIssn', testIssn, false, false), 'replace', false)(J$.T(2079705, '?', 21, false), J$.T(2079713, '', 21, false)) : J$.R(2079729, 'testIssn', testIssn, false, false), testIssn, false, false);
                            testIssn = J$.W(2079817, 'testIssn', J$.C(122688, J$.G(2079753, J$.R(2079745, 'options', options, false, false), 'case_sensitive')) ? J$.F(2079777, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(2079761, 'RegExp', undefined, true, true) : RegExp = J$.R(2079761, 'RegExp', RegExp, true, true)), true)(J$.R(2079769, 'testIssn', testIssn, false, false)) : J$.F(2079809, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(2079785, 'RegExp', undefined, true, true) : RegExp = J$.R(2079785, 'RegExp', RegExp, true, true)), true)(J$.R(2079793, 'testIssn', testIssn, false, false), J$.T(2079801, 'i', 21, false)), testIssn, false, false);
                            if (J$.C(122696, J$.U(256362, '!', J$.M(2079841, J$.R(2079825, 'testIssn', testIssn, false, false), 'test', false)(J$.R(2079833, 'str', str, false, false))))) {
                                return J$.Rt(2079857, J$.T(2079849, false, 23, false));
                            }
                            var digits = J$.W(2079905, 'digits', J$.M(2079897, J$.M(2079889, J$.R(2079865, 'str', str, false, false), 'replace', false)(J$.T(2079873, '-', 21, false), J$.T(2079881, '', 21, false)), 'toUpperCase', false)(), digits, false, false);
                            var checksum = J$.W(2079921, 'checksum', J$.T(2079913, 0, 22, false), checksum, false, false);
                            for (var i = J$.W(2079937, 'i', J$.T(2079929, 0, 22, false), i, false, false); J$.C(122712, J$.B(256370, '<', J$.R(2079945, 'i', i, false, false), J$.G(2079961, J$.R(2079953, 'digits', digits, false, false), 'length'))); J$.B(256394, '-', i = J$.W(2079977, 'i', J$.B(256386, '+', J$.U(256378, '+', J$.R(2079969, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var digit = J$.W(2080009, 'digit', J$.G(2080001, J$.R(2079985, 'digits', digits, false, false), J$.R(2079993, 'i', i, false, false)), digit, false, false);
                                checksum = J$.W(2080073, 'checksum', J$.B(256434, '+', J$.R(2080065, 'checksum', checksum, false, false), J$.B(256426, '*', J$.C(122704, J$.B(256402, '===', J$.R(2080017, 'digit', digit, false, false), J$.T(2080025, 'X', 21, false))) ? J$.T(2080033, 10, 22, false) : J$.U(256410, '+', J$.R(2080041, 'digit', digit, false, false)), J$.B(256418, '-', J$.T(2080049, 8, 22, false), J$.R(2080057, 'i', i, false, false)))), checksum, false, false);
                            }
                            return J$.Rt(2080105, J$.B(256450, '===', J$.B(256442, '%', J$.R(2080081, 'checksum', checksum, false, false), J$.T(2080089, 11, 22, false)), J$.T(2080097, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(2080305, J$e);
                        } finally {
                            if (J$.Fr(2080313))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2080233, '_assertString', _assertString, false, false, false);
            J$.N(2080241, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(2080257, '_interopRequireDefault', J$.T(2080249, _interopRequireDefault, 12, false), true, false, false);
            J$.N(2080265, 'issn', issn, false, false, false);
            isISSN = J$.N(2080281, 'isISSN', J$.T(2080273, isISSN, 12, false), true, false, false);
            J$.T(2079289, 'use strict', 21, false);
            J$.M(2079337, J$.I(typeof Object === 'undefined' ? Object = J$.R(2079297, 'Object', undefined, true, true) : Object = J$.R(2079297, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(2079305, 'exports', undefined, true, true) : exports = J$.R(2079305, 'exports', exports, true, true)), J$.T(2079313, '__esModule', 21, false), J$.T(2079329, { value: J$.T(2079321, true, 23, false) }, 11, false));
            J$.P(2079361, J$.I(typeof exports === 'undefined' ? exports = J$.R(2079345, 'exports', undefined, true, true) : exports = J$.R(2079345, 'exports', exports, true, true)), 'default', J$.R(2079353, 'isISSN', isISSN, false, true));
            var _assertString = J$.W(2079393, '_assertString', J$.F(2079385, J$.I(typeof require === 'undefined' ? require = J$.R(2079369, 'require', undefined, true, true) : require = J$.R(2079369, 'require', require, true, true)), false)(J$.T(2079377, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(2079425, '_assertString2', J$.F(2079417, J$.R(2079401, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(2079409, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var issn = J$.W(2079521, 'issn', J$.T(2079513, '^\\d{4}-?\\d{3}[\\dX]$', 21, false), issn, false, true);
            J$.P(2080217, J$.I(typeof module === 'undefined' ? module = J$.R(2080185, 'module', undefined, true, true) : module = J$.R(2080185, 'module', module, true, true)), 'exports', J$.G(2080209, J$.I(typeof exports === 'undefined' ? exports = J$.R(2080193, 'exports', undefined, true, true) : exports = J$.R(2080193, 'exports', exports, true, true)), J$.T(2080201, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(2080321, J$e);
        } finally {
            if (J$.Sr(2080329))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

