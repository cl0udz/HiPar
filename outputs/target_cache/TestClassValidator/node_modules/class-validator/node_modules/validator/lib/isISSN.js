J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5863521, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isISSN.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5862785, arguments.callee, this, arguments);
                            arguments = J$.N(5862793, 'arguments', arguments, true, false, false);
                            obj = J$.N(5862801, 'obj', obj, true, false, false);
                            return J$.Rt(5862777, J$.C(319176, J$.C(319168, J$.R(5862729, 'obj', obj, false, false)) ? J$.G(5862745, J$.R(5862737, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(5862753, 'obj', obj, false, false) : J$.T(5862769, { default: J$.R(5862761, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(5863585, J$e);
                        } finally {
                            if (J$.Fr(5863593))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isISSN(str) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5863409, arguments.callee, this, arguments);
                            arguments = J$.N(5863417, 'arguments', arguments, true, false, false);
                            str = J$.N(5863425, 'str', str, true, false, false);
                            J$.N(5863433, 'options', options, false, false, false);
                            J$.N(5863441, 'testIssn', testIssn, false, false, false);
                            J$.N(5863449, 'digits', digits, false, false, false);
                            J$.N(5863457, 'checksum', checksum, false, false, false);
                            J$.N(5863465, 'i', i, false, false, false);
                            J$.N(5863473, 'digit', digit, false, false, false);
                            var options = J$.W(5862913, 'options', J$.C(319192, J$.C(319184, J$.B(603762, '>', J$.G(5862833, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(5862825, 'arguments', undefined, true, true) : arguments = J$.R(5862825, 'arguments', arguments, true, true)), 'length'), J$.T(5862841, 1, 22, false))) ? J$.B(603770, '!==', J$.G(5862865, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(5862849, 'arguments', undefined, true, true) : arguments = J$.R(5862849, 'arguments', arguments, true, true)), J$.T(5862857, 1, 22, false)), J$.T(5862873, undefined, 24, false)) : J$._()) ? J$.G(5862897, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(5862881, 'arguments', undefined, true, true) : arguments = J$.R(5862881, 'arguments', arguments, true, true)), J$.T(5862889, 1, 22, false)) : J$.T(5862905, {}, 11, false), options, false, false);
                            J$.F(5862953, (J$.T(5862921, 0, 22, false), J$.G(5862937, J$.R(5862929, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(5862945, 'str', str, false, false));
                            var testIssn = J$.W(5862969, 'testIssn', J$.R(5862961, 'issn', issn, false, true), testIssn, false, false);
                            testIssn = J$.W(5863033, 'testIssn', J$.C(319200, J$.G(5862985, J$.R(5862977, 'options', options, false, false), 'require_hyphen')) ? J$.M(5863017, J$.R(5862993, 'testIssn', testIssn, false, false), 'replace', false)(J$.T(5863001, '?', 21, false), J$.T(5863009, '', 21, false)) : J$.R(5863025, 'testIssn', testIssn, false, false), testIssn, false, false);
                            testIssn = J$.W(5863113, 'testIssn', J$.C(319208, J$.G(5863049, J$.R(5863041, 'options', options, false, false), 'case_sensitive')) ? J$.F(5863073, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(5863057, 'RegExp', undefined, true, true) : RegExp = J$.R(5863057, 'RegExp', RegExp, true, true)), true)(J$.R(5863065, 'testIssn', testIssn, false, false)) : J$.F(5863105, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(5863081, 'RegExp', undefined, true, true) : RegExp = J$.R(5863081, 'RegExp', RegExp, true, true)), true)(J$.R(5863089, 'testIssn', testIssn, false, false), J$.T(5863097, 'i', 21, false)), testIssn, false, false);
                            if (J$.C(319216, J$.U(603778, '!', J$.M(5863137, J$.R(5863121, 'testIssn', testIssn, false, false), 'test', false)(J$.R(5863129, 'str', str, false, false))))) {
                                return J$.Rt(5863153, J$.T(5863145, false, 23, false));
                            }
                            var digits = J$.W(5863201, 'digits', J$.M(5863193, J$.M(5863185, J$.R(5863161, 'str', str, false, false), 'replace', false)(J$.T(5863169, '-', 21, false), J$.T(5863177, '', 21, false)), 'toUpperCase', false)(), digits, false, false);
                            var checksum = J$.W(5863217, 'checksum', J$.T(5863209, 0, 22, false), checksum, false, false);
                            for (var i = J$.W(5863233, 'i', J$.T(5863225, 0, 22, false), i, false, false); J$.C(319232, J$.B(603786, '<', J$.R(5863241, 'i', i, false, false), J$.G(5863257, J$.R(5863249, 'digits', digits, false, false), 'length'))); J$.B(603810, '-', i = J$.W(5863273, 'i', J$.B(603802, '+', J$.U(603794, '+', J$.R(5863265, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var digit = J$.W(5863305, 'digit', J$.G(5863297, J$.R(5863281, 'digits', digits, false, false), J$.R(5863289, 'i', i, false, false)), digit, false, false);
                                checksum = J$.W(5863369, 'checksum', J$.B(603850, '+', J$.R(5863361, 'checksum', checksum, false, false), J$.B(603842, '*', J$.C(319224, J$.B(603818, '===', J$.R(5863313, 'digit', digit, false, false), J$.T(5863321, 'X', 21, false))) ? J$.T(5863329, 10, 22, false) : J$.U(603826, '+', J$.R(5863337, 'digit', digit, false, false)), J$.B(603834, '-', J$.T(5863345, 8, 22, false), J$.R(5863353, 'i', i, false, false)))), checksum, false, false);
                            }
                            return J$.Rt(5863401, J$.B(603866, '===', J$.B(603858, '%', J$.R(5863377, 'checksum', checksum, false, false), J$.T(5863385, 11, 22, false)), J$.T(5863393, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(5863601, J$e);
                        } finally {
                            if (J$.Fr(5863609))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5863529, '_assertString', _assertString, false, false, false);
            J$.N(5863537, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(5863553, '_interopRequireDefault', J$.T(5863545, _interopRequireDefault, 12, false), true, false, false);
            J$.N(5863561, 'issn', issn, false, false, false);
            isISSN = J$.N(5863577, 'isISSN', J$.T(5863569, isISSN, 12, false), true, false, false);
            J$.T(5862585, 'use strict', 21, false);
            J$.M(5862633, J$.I(typeof Object === 'undefined' ? Object = J$.R(5862593, 'Object', undefined, true, true) : Object = J$.R(5862593, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(5862601, 'exports', undefined, true, true) : exports = J$.R(5862601, 'exports', exports, true, true)), J$.T(5862609, '__esModule', 21, false), J$.T(5862625, { value: J$.T(5862617, true, 23, false) }, 11, false));
            J$.P(5862657, J$.I(typeof exports === 'undefined' ? exports = J$.R(5862641, 'exports', undefined, true, true) : exports = J$.R(5862641, 'exports', exports, true, true)), 'default', J$.R(5862649, 'isISSN', isISSN, false, true));
            var _assertString = J$.W(5862689, '_assertString', J$.F(5862681, J$.I(typeof require === 'undefined' ? require = J$.R(5862665, 'require', undefined, true, true) : require = J$.R(5862665, 'require', require, true, true)), false)(J$.T(5862673, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(5862721, '_assertString2', J$.F(5862713, J$.R(5862697, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(5862705, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var issn = J$.W(5862817, 'issn', J$.T(5862809, '^\\d{4}-?\\d{3}[\\dX]$', 21, false), issn, false, true);
            J$.P(5863513, J$.I(typeof module === 'undefined' ? module = J$.R(5863481, 'module', undefined, true, true) : module = J$.R(5863481, 'module', module, true, true)), 'exports', J$.G(5863505, J$.I(typeof exports === 'undefined' ? exports = J$.R(5863489, 'exports', undefined, true, true) : exports = J$.R(5863489, 'exports', exports, true, true)), J$.T(5863497, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(5863617, J$e);
        } finally {
            if (J$.Sr(5863625))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

