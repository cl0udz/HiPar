J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5850361, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isHash.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5850001, arguments.callee, this, arguments);
                            arguments = J$.N(5850009, 'arguments', arguments, true, false, false);
                            obj = J$.N(5850017, 'obj', obj, true, false, false);
                            return J$.Rt(5849993, J$.C(318648, J$.C(318640, J$.R(5849945, 'obj', obj, false, false)) ? J$.G(5849961, J$.R(5849953, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(5849969, 'obj', obj, false, false) : J$.T(5849985, { default: J$.R(5849977, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(5850425, J$e);
                        } finally {
                            if (J$.Fr(5850433))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isHash(str, algorithm) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5850281, arguments.callee, this, arguments);
                            arguments = J$.N(5850289, 'arguments', arguments, true, false, false);
                            str = J$.N(5850297, 'str', str, true, false, false);
                            algorithm = J$.N(5850305, 'algorithm', algorithm, true, false, false);
                            J$.N(5850313, 'hash', hash, false, false, false);
                            J$.F(5850177, (J$.T(5850145, 0, 22, false), J$.G(5850161, J$.R(5850153, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(5850169, 'str', str, false, false));
                            var hash = J$.W(5850241, 'hash', J$.F(5850233, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(5850185, 'RegExp', undefined, true, true) : RegExp = J$.R(5850185, 'RegExp', RegExp, true, true)), true)(J$.B(603066, '+', J$.B(603058, '+', J$.T(5850193, '^[a-f0-9]{', 21, false), J$.G(5850217, J$.R(5850201, 'lengths', lengths, false, true), J$.R(5850209, 'algorithm', algorithm, false, false))), J$.T(5850225, '}$', 21, false))), hash, false, false);
                            return J$.Rt(5850273, J$.M(5850265, J$.R(5850249, 'hash', hash, false, false), 'test', false)(J$.R(5850257, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(5850441, J$e);
                        } finally {
                            if (J$.Fr(5850449))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5850369, '_assertString', _assertString, false, false, false);
            J$.N(5850377, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(5850393, '_interopRequireDefault', J$.T(5850385, _interopRequireDefault, 12, false), true, false, false);
            J$.N(5850401, 'lengths', lengths, false, false, false);
            isHash = J$.N(5850417, 'isHash', J$.T(5850409, isHash, 12, false), true, false, false);
            J$.T(5849801, 'use strict', 21, false);
            J$.M(5849849, J$.I(typeof Object === 'undefined' ? Object = J$.R(5849809, 'Object', undefined, true, true) : Object = J$.R(5849809, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(5849817, 'exports', undefined, true, true) : exports = J$.R(5849817, 'exports', exports, true, true)), J$.T(5849825, '__esModule', 21, false), J$.T(5849841, { value: J$.T(5849833, true, 23, false) }, 11, false));
            J$.P(5849873, J$.I(typeof exports === 'undefined' ? exports = J$.R(5849857, 'exports', undefined, true, true) : exports = J$.R(5849857, 'exports', exports, true, true)), 'default', J$.R(5849865, 'isHash', isHash, false, true));
            var _assertString = J$.W(5849905, '_assertString', J$.F(5849897, J$.I(typeof require === 'undefined' ? require = J$.R(5849881, 'require', undefined, true, true) : require = J$.R(5849881, 'require', require, true, true)), false)(J$.T(5849889, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(5849937, '_assertString2', J$.F(5849929, J$.R(5849913, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(5849921, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var lengths = J$.W(5850137, 'lengths', J$.T(5850129, {
                md5: J$.T(5850025, 32, 22, false),
                md4: J$.T(5850033, 32, 22, false),
                sha1: J$.T(5850041, 40, 22, false),
                sha256: J$.T(5850049, 64, 22, false),
                sha384: J$.T(5850057, 96, 22, false),
                sha512: J$.T(5850065, 128, 22, false),
                ripemd128: J$.T(5850073, 32, 22, false),
                ripemd160: J$.T(5850081, 40, 22, false),
                tiger128: J$.T(5850089, 32, 22, false),
                tiger160: J$.T(5850097, 40, 22, false),
                tiger192: J$.T(5850105, 48, 22, false),
                crc32: J$.T(5850113, 8, 22, false),
                crc32b: J$.T(5850121, 8, 22, false)
            }, 11, false), lengths, false, true);
            J$.P(5850353, J$.I(typeof module === 'undefined' ? module = J$.R(5850321, 'module', undefined, true, true) : module = J$.R(5850321, 'module', module, true, true)), 'exports', J$.G(5850345, J$.I(typeof exports === 'undefined' ? exports = J$.R(5850329, 'exports', undefined, true, true) : exports = J$.R(5850329, 'exports', exports, true, true)), J$.T(5850337, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(5850457, J$e);
        } finally {
            if (J$.Sr(5850465))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

