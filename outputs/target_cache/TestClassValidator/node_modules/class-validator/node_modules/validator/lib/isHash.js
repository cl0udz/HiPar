J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2067065, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isHash.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2066705, arguments.callee, this, arguments);
                            arguments = J$.N(2066713, 'arguments', arguments, true, false, false);
                            obj = J$.N(2066721, 'obj', obj, true, false, false);
                            return J$.Rt(2066697, J$.C(122128, J$.C(122120, J$.R(2066649, 'obj', obj, false, false)) ? J$.G(2066665, J$.R(2066657, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(2066673, 'obj', obj, false, false) : J$.T(2066689, { default: J$.R(2066681, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(2067129, J$e);
                        } finally {
                            if (J$.Fr(2067137))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isHash(str, algorithm) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2066985, arguments.callee, this, arguments);
                            arguments = J$.N(2066993, 'arguments', arguments, true, false, false);
                            str = J$.N(2067001, 'str', str, true, false, false);
                            algorithm = J$.N(2067009, 'algorithm', algorithm, true, false, false);
                            J$.N(2067017, 'hash', hash, false, false, false);
                            J$.F(2066881, (J$.T(2066849, 0, 22, false), J$.G(2066865, J$.R(2066857, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(2066873, 'str', str, false, false));
                            var hash = J$.W(2066945, 'hash', J$.F(2066937, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(2066889, 'RegExp', undefined, true, true) : RegExp = J$.R(2066889, 'RegExp', RegExp, true, true)), true)(J$.B(255650, '+', J$.B(255642, '+', J$.T(2066897, '^[a-f0-9]{', 21, false), J$.G(2066921, J$.R(2066905, 'lengths', lengths, false, true), J$.R(2066913, 'algorithm', algorithm, false, false))), J$.T(2066929, '}$', 21, false))), hash, false, false);
                            return J$.Rt(2066977, J$.M(2066969, J$.R(2066953, 'hash', hash, false, false), 'test', false)(J$.R(2066961, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(2067145, J$e);
                        } finally {
                            if (J$.Fr(2067153))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2067073, '_assertString', _assertString, false, false, false);
            J$.N(2067081, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(2067097, '_interopRequireDefault', J$.T(2067089, _interopRequireDefault, 12, false), true, false, false);
            J$.N(2067105, 'lengths', lengths, false, false, false);
            isHash = J$.N(2067121, 'isHash', J$.T(2067113, isHash, 12, false), true, false, false);
            J$.T(2066505, 'use strict', 21, false);
            J$.M(2066553, J$.I(typeof Object === 'undefined' ? Object = J$.R(2066513, 'Object', undefined, true, true) : Object = J$.R(2066513, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(2066521, 'exports', undefined, true, true) : exports = J$.R(2066521, 'exports', exports, true, true)), J$.T(2066529, '__esModule', 21, false), J$.T(2066545, { value: J$.T(2066537, true, 23, false) }, 11, false));
            J$.P(2066577, J$.I(typeof exports === 'undefined' ? exports = J$.R(2066561, 'exports', undefined, true, true) : exports = J$.R(2066561, 'exports', exports, true, true)), 'default', J$.R(2066569, 'isHash', isHash, false, true));
            var _assertString = J$.W(2066609, '_assertString', J$.F(2066601, J$.I(typeof require === 'undefined' ? require = J$.R(2066585, 'require', undefined, true, true) : require = J$.R(2066585, 'require', require, true, true)), false)(J$.T(2066593, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(2066641, '_assertString2', J$.F(2066633, J$.R(2066617, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(2066625, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var lengths = J$.W(2066841, 'lengths', J$.T(2066833, {
                md5: J$.T(2066729, 32, 22, false),
                md4: J$.T(2066737, 32, 22, false),
                sha1: J$.T(2066745, 40, 22, false),
                sha256: J$.T(2066753, 64, 22, false),
                sha384: J$.T(2066761, 96, 22, false),
                sha512: J$.T(2066769, 128, 22, false),
                ripemd128: J$.T(2066777, 32, 22, false),
                ripemd160: J$.T(2066785, 40, 22, false),
                tiger128: J$.T(2066793, 32, 22, false),
                tiger160: J$.T(2066801, 40, 22, false),
                tiger192: J$.T(2066809, 48, 22, false),
                crc32: J$.T(2066817, 8, 22, false),
                crc32b: J$.T(2066825, 8, 22, false)
            }, 11, false), lengths, false, true);
            J$.P(2067057, J$.I(typeof module === 'undefined' ? module = J$.R(2067025, 'module', undefined, true, true) : module = J$.R(2067025, 'module', module, true, true)), 'exports', J$.G(2067049, J$.I(typeof exports === 'undefined' ? exports = J$.R(2067033, 'exports', undefined, true, true) : exports = J$.R(2067033, 'exports', exports, true, true)), J$.T(2067041, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(2067161, J$e);
        } finally {
            if (J$.Sr(2067169))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

