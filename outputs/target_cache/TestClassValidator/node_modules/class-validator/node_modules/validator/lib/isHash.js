J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(1209281, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isHash.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1208921, arguments.callee, this, arguments);
                            arguments = J$.N(1208929, 'arguments', arguments, true, false, false);
                            obj = J$.N(1208937, 'obj', obj, true, false, false);
                            return J$.Rt(1208913, J$.C(68128, J$.C(68120, J$.R(1208865, 'obj', obj, false, false)) ? J$.G(1208881, J$.R(1208873, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(1208889, 'obj', obj, false, false) : J$.T(1208905, { default: J$.R(1208897, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(1209345, J$e);
                        } finally {
                            if (J$.Fr(1209353))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isHash(str, algorithm) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1209201, arguments.callee, this, arguments);
                            arguments = J$.N(1209209, 'arguments', arguments, true, false, false);
                            str = J$.N(1209217, 'str', str, true, false, false);
                            algorithm = J$.N(1209225, 'algorithm', algorithm, true, false, false);
                            J$.N(1209233, 'hash', hash, false, false, false);
                            J$.F(1209097, (J$.T(1209065, 0, 22, false), J$.G(1209081, J$.R(1209073, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(1209089, 'str', str, false, false));
                            var hash = J$.W(1209161, 'hash', J$.F(1209153, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(1209105, 'RegExp', undefined, true, true) : RegExp = J$.R(1209105, 'RegExp', RegExp, true, true)), true)(J$.B(86530, '+', J$.B(86522, '+', J$.T(1209113, '^[a-f0-9]{', 21, false), J$.G(1209137, J$.R(1209121, 'lengths', lengths, false, true), J$.R(1209129, 'algorithm', algorithm, false, false))), J$.T(1209145, '}$', 21, false))), hash, false, false);
                            return J$.Rt(1209193, J$.M(1209185, J$.R(1209169, 'hash', hash, false, false), 'test', false)(J$.R(1209177, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(1209361, J$e);
                        } finally {
                            if (J$.Fr(1209369))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1209289, '_assertString', _assertString, false, false, false);
            J$.N(1209297, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(1209313, '_interopRequireDefault', J$.T(1209305, _interopRequireDefault, 12, false), true, false, false);
            J$.N(1209321, 'lengths', lengths, false, false, false);
            isHash = J$.N(1209337, 'isHash', J$.T(1209329, isHash, 12, false), true, false, false);
            J$.T(1208721, 'use strict', 21, false);
            J$.M(1208769, J$.I(typeof Object === 'undefined' ? Object = J$.R(1208729, 'Object', undefined, true, true) : Object = J$.R(1208729, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(1208737, 'exports', undefined, true, true) : exports = J$.R(1208737, 'exports', exports, true, true)), J$.T(1208745, '__esModule', 21, false), J$.T(1208761, { value: J$.T(1208753, true, 23, false) }, 11, false));
            J$.P(1208793, J$.I(typeof exports === 'undefined' ? exports = J$.R(1208777, 'exports', undefined, true, true) : exports = J$.R(1208777, 'exports', exports, true, true)), 'default', J$.R(1208785, 'isHash', isHash, false, true));
            var _assertString = J$.W(1208825, '_assertString', J$.F(1208817, J$.I(typeof require === 'undefined' ? require = J$.R(1208801, 'require', undefined, true, true) : require = J$.R(1208801, 'require', require, true, true)), false)(J$.T(1208809, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(1208857, '_assertString2', J$.F(1208849, J$.R(1208833, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(1208841, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var lengths = J$.W(1209057, 'lengths', J$.T(1209049, {
                md5: J$.T(1208945, 32, 22, false),
                md4: J$.T(1208953, 32, 22, false),
                sha1: J$.T(1208961, 40, 22, false),
                sha256: J$.T(1208969, 64, 22, false),
                sha384: J$.T(1208977, 96, 22, false),
                sha512: J$.T(1208985, 128, 22, false),
                ripemd128: J$.T(1208993, 32, 22, false),
                ripemd160: J$.T(1209001, 40, 22, false),
                tiger128: J$.T(1209009, 32, 22, false),
                tiger160: J$.T(1209017, 40, 22, false),
                tiger192: J$.T(1209025, 48, 22, false),
                crc32: J$.T(1209033, 8, 22, false),
                crc32b: J$.T(1209041, 8, 22, false)
            }, 11, false), lengths, false, true);
            J$.P(1209273, J$.I(typeof module === 'undefined' ? module = J$.R(1209241, 'module', undefined, true, true) : module = J$.R(1209241, 'module', module, true, true)), 'exports', J$.G(1209265, J$.I(typeof exports === 'undefined' ? exports = J$.R(1209249, 'exports', undefined, true, true) : exports = J$.R(1209249, 'exports', exports, true, true)), J$.T(1209257, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(1209377, J$e);
        } finally {
            if (J$.Sr(1209385))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

