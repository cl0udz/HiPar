J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(1199657, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/isCurrency.js');
            function _interopRequireDefault(obj) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1198113, arguments.callee, this, arguments);
                            arguments = J$.N(1198121, 'arguments', arguments, true, false, false);
                            obj = J$.N(1198129, 'obj', obj, true, false, false);
                            return J$.Rt(1198105, J$.C(67368, J$.C(67360, J$.R(1198057, 'obj', obj, false, false)) ? J$.G(1198073, J$.R(1198065, 'obj', obj, false, false), '__esModule') : J$._()) ? J$.R(1198081, 'obj', obj, false, false) : J$.T(1198097, { default: J$.R(1198089, 'obj', obj, false, false) }, 11, false));
                        } catch (J$e) {
                            J$.Ex(1199753, J$e);
                        } finally {
                            if (J$.Fr(1199761))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function currencyRegex(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1199201, arguments.callee, this, arguments);
                            arguments = J$.N(1199209, 'arguments', arguments, true, false, false);
                            options = J$.N(1199217, 'options', options, true, false, false);
                            J$.N(1199225, 'decimal_digits', decimal_digits, false, false, false);
                            J$.N(1199233, 'symbol', symbol, false, false, false);
                            J$.N(1199241, 'negative', negative, false, false, false);
                            J$.N(1199249, 'whole_dollar_amount_without_sep', whole_dollar_amount_without_sep, false, false, false);
                            J$.N(1199257, 'whole_dollar_amount_with_sep', whole_dollar_amount_with_sep, false, false, false);
                            J$.N(1199265, 'valid_whole_dollar_amounts', valid_whole_dollar_amounts, false, false, false);
                            J$.N(1199273, 'whole_dollar_amount', whole_dollar_amount, false, false, false);
                            J$.N(1199281, 'decimal_amount', decimal_amount, false, false, false);
                            J$.N(1199289, 'pattern', pattern, false, false, false);
                            var decimal_digits = J$.W(1198185, 'decimal_digits', J$.B(85610, '+', J$.B(85602, '+', J$.T(1198137, '\\d{', 21, false), J$.G(1198169, J$.G(1198153, J$.R(1198145, 'options', options, false, false), 'digits_after_decimal'), J$.T(1198161, 0, 22, false))), J$.T(1198177, '}', 21, false)), decimal_digits, false, false);
                            J$.M(1198305, J$.G(1198201, J$.R(1198193, 'options', options, false, false), 'digits_after_decimal'), 'forEach', false)(J$.T(1198297, function (digit, index) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(1198265, arguments.callee, this, arguments);
                                            arguments = J$.N(1198273, 'arguments', arguments, true, false, false);
                                            digit = J$.N(1198281, 'digit', digit, true, false, false);
                                            index = J$.N(1198289, 'index', index, true, false, false);
                                            if (J$.C(67376, J$.B(85618, '!==', J$.R(1198209, 'index', index, false, false), J$.T(1198217, 0, 22, false))))
                                                decimal_digits = J$.W(1198257, 'decimal_digits', J$.B(85642, '+', J$.B(85634, '+', J$.B(85626, '+', J$.R(1198225, 'decimal_digits', decimal_digits, false, false), J$.T(1198233, '|\\d{', 21, false)), J$.R(1198241, 'digit', digit, false, false)), J$.T(1198249, '}', 21, false)), decimal_digits, false, false);
                                        } catch (J$e) {
                                            J$.Ex(1199769, J$e);
                                        } finally {
                                            if (J$.Fr(1199777))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            var symbol = J$.W(1198601, 'symbol', J$.B(85666, '+', J$.B(85658, '+', J$.B(85650, '+', J$.T(1198313, '(\\', 21, false), J$.M(1198353, J$.G(1198329, J$.R(1198321, 'options', options, false, false), 'symbol'), 'replace', false)(J$.T(1198337, /\./g, 14, false), J$.T(1198345, '\\.', 21, false))), J$.T(1198361, ')', 21, false)), J$.C(67384, J$.G(1198377, J$.R(1198369, 'options', options, false, false), 'require_symbol')) ? J$.T(1198385, '', 21, false) : J$.T(1198393, '?', 21, false)), symbol, false, false), negative = J$.W(1198609, 'negative', J$.T(1198401, '-?', 21, false), negative, false, false), whole_dollar_amount_without_sep = J$.W(1198617, 'whole_dollar_amount_without_sep', J$.T(1198409, '[1-9]\\d*', 21, false), whole_dollar_amount_without_sep, false, false), whole_dollar_amount_with_sep = J$.W(1198625, 'whole_dollar_amount_with_sep', J$.B(85682, '+', J$.B(85674, '+', J$.T(1198417, '[1-9]\\d{0,2}(\\', 21, false), J$.G(1198433, J$.R(1198425, 'options', options, false, false), 'thousands_separator')), J$.T(1198441, '\\d{3})*', 21, false)), whole_dollar_amount_with_sep, false, false), valid_whole_dollar_amounts = J$.W(1198633, 'valid_whole_dollar_amounts', J$.T(1198473, [
                                    J$.T(1198449, '0', 21, false),
                                    J$.R(1198457, 'whole_dollar_amount_without_sep', whole_dollar_amount_without_sep, false, false),
                                    J$.R(1198465, 'whole_dollar_amount_with_sep', whole_dollar_amount_with_sep, false, false)
                                ], 10, false), valid_whole_dollar_amounts, false, false), whole_dollar_amount = J$.W(1198641, 'whole_dollar_amount', J$.B(85698, '+', J$.B(85690, '+', J$.T(1198481, '(', 21, false), J$.M(1198505, J$.R(1198489, 'valid_whole_dollar_amounts', valid_whole_dollar_amounts, false, false), 'join', false)(J$.T(1198497, '|', 21, false))), J$.T(1198513, ')?', 21, false)), whole_dollar_amount, false, false), decimal_amount = J$.W(1198649, 'decimal_amount', J$.B(85738, '+', J$.B(85730, '+', J$.B(85722, '+', J$.B(85714, '+', J$.B(85706, '+', J$.T(1198521, '(\\', 21, false), J$.G(1198537, J$.R(1198529, 'options', options, false, false), 'decimal_separator')), J$.T(1198545, '(', 21, false)), J$.R(1198553, 'decimal_digits', decimal_digits, false, false)), J$.T(1198561, '))', 21, false)), J$.C(67392, J$.G(1198577, J$.R(1198569, 'options', options, false, false), 'require_decimal')) ? J$.T(1198585, '', 21, false) : J$.T(1198593, '?', 21, false)), decimal_amount, false, false);
                            var pattern = J$.W(1198713, 'pattern', J$.B(85746, '+', J$.R(1198657, 'whole_dollar_amount', whole_dollar_amount, false, false), J$.C(67408, J$.C(67400, J$.G(1198673, J$.R(1198665, 'options', options, false, false), 'allow_decimal')) ? J$._() : J$.G(1198689, J$.R(1198681, 'options', options, false, false), 'require_decimal')) ? J$.R(1198697, 'decimal_amount', decimal_amount, false, false) : J$.T(1198705, '', 21, false)), pattern, false, false);
                            if (J$.C(67440, J$.C(67416, J$.G(1198729, J$.R(1198721, 'options', options, false, false), 'allow_negatives')) ? J$.U(85754, '!', J$.G(1198745, J$.R(1198737, 'options', options, false, false), 'parens_for_negatives')) : J$._())) {
                                if (J$.C(67432, J$.G(1198761, J$.R(1198753, 'options', options, false, false), 'negative_sign_after_digits'))) {
                                    pattern = J$.W(1198785, 'pattern', J$.B(85762, '+', J$.R(1198777, 'pattern', pattern, false, false), J$.R(1198769, 'negative', negative, false, false)), pattern, false, false);
                                } else if (J$.C(67424, J$.G(1198801, J$.R(1198793, 'options', options, false, false), 'negative_sign_before_digits'))) {
                                    pattern = J$.W(1198825, 'pattern', J$.B(85770, '+', J$.R(1198809, 'negative', negative, false, false), J$.R(1198817, 'pattern', pattern, false, false)), pattern, false, false);
                                }
                            }
                            if (J$.C(67464, J$.G(1198841, J$.R(1198833, 'options', options, false, false), 'allow_negative_sign_placeholder'))) {
                                pattern = J$.W(1198865, 'pattern', J$.B(85778, '+', J$.T(1198849, '( (?!\\-))?', 21, false), J$.R(1198857, 'pattern', pattern, false, false)), pattern, false, false);
                            } else if (J$.C(67456, J$.G(1198881, J$.R(1198873, 'options', options, false, false), 'allow_space_after_symbol'))) {
                                pattern = J$.W(1198905, 'pattern', J$.B(85786, '+', J$.T(1198889, ' ?', 21, false), J$.R(1198897, 'pattern', pattern, false, false)), pattern, false, false);
                            } else if (J$.C(67448, J$.G(1198921, J$.R(1198913, 'options', options, false, false), 'allow_space_after_digits'))) {
                                pattern = J$.W(1198945, 'pattern', J$.B(85794, '+', J$.R(1198937, 'pattern', pattern, false, false), J$.T(1198929, '( (?!$))?', 21, false)), pattern, false, false);
                            }
                            if (J$.C(67472, J$.G(1198961, J$.R(1198953, 'options', options, false, false), 'symbol_after_digits'))) {
                                pattern = J$.W(1198985, 'pattern', J$.B(85802, '+', J$.R(1198977, 'pattern', pattern, false, false), J$.R(1198969, 'symbol', symbol, false, false)), pattern, false, false);
                            } else {
                                pattern = J$.W(1199009, 'pattern', J$.B(85810, '+', J$.R(1198993, 'symbol', symbol, false, false), J$.R(1199001, 'pattern', pattern, false, false)), pattern, false, false);
                            }
                            if (J$.C(67504, J$.G(1199025, J$.R(1199017, 'options', options, false, false), 'allow_negatives'))) {
                                if (J$.C(67496, J$.G(1199041, J$.R(1199033, 'options', options, false, false), 'parens_for_negatives'))) {
                                    pattern = J$.W(1199089, 'pattern', J$.B(85842, '+', J$.B(85834, '+', J$.B(85826, '+', J$.B(85818, '+', J$.T(1199049, '(\\(', 21, false), J$.R(1199057, 'pattern', pattern, false, false)), J$.T(1199065, '\\)|', 21, false)), J$.R(1199073, 'pattern', pattern, false, false)), J$.T(1199081, ')', 21, false)), pattern, false, false);
                                } else if (J$.C(67488, J$.U(85850, '!', J$.C(67480, J$.G(1199105, J$.R(1199097, 'options', options, false, false), 'negative_sign_before_digits')) ? J$._() : J$.G(1199121, J$.R(1199113, 'options', options, false, false), 'negative_sign_after_digits')))) {
                                    pattern = J$.W(1199145, 'pattern', J$.B(85858, '+', J$.R(1199129, 'negative', negative, false, false), J$.R(1199137, 'pattern', pattern, false, false)), pattern, false, false);
                                }
                            }
                            return J$.Rt(1199193, J$.F(1199185, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(1199153, 'RegExp', undefined, true, true) : RegExp = J$.R(1199153, 'RegExp', RegExp, true, true)), true)(J$.B(85874, '+', J$.B(85866, '+', J$.T(1199161, '^(?!-? )(?=.*\\d)', 21, false), J$.R(1199169, 'pattern', pattern, false, false)), J$.T(1199177, '$', 21, false))));
                        } catch (J$e) {
                            J$.Ex(1199785, J$e);
                        } finally {
                            if (J$.Fr(1199793))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isCurrency(str, options) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1199585, arguments.callee, this, arguments);
                            arguments = J$.N(1199593, 'arguments', arguments, true, false, false);
                            str = J$.N(1199601, 'str', str, true, false, false);
                            options = J$.N(1199609, 'options', options, true, false, false);
                            J$.F(1199473, (J$.T(1199441, 0, 22, false), J$.G(1199457, J$.R(1199449, '_assertString2', _assertString2, false, true), 'default')), false)(J$.R(1199465, 'str', str, false, false));
                            options = J$.W(1199529, 'options', J$.F(1199521, (J$.T(1199481, 0, 22, false), J$.G(1199497, J$.R(1199489, '_merge2', _merge2, false, true), 'default')), false)(J$.R(1199505, 'options', options, false, false), J$.R(1199513, 'default_currency_options', default_currency_options, false, true)), options, false, false);
                            return J$.Rt(1199577, J$.M(1199569, J$.F(1199553, J$.R(1199537, 'currencyRegex', currencyRegex, false, true), false)(J$.R(1199545, 'options', options, false, false)), 'test', false)(J$.R(1199561, 'str', str, false, false)));
                        } catch (J$e) {
                            J$.Ex(1199801, J$e);
                        } finally {
                            if (J$.Fr(1199809))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1199665, '_merge', _merge, false, false, false);
            J$.N(1199673, '_merge2', _merge2, false, false, false);
            J$.N(1199681, '_assertString', _assertString, false, false, false);
            J$.N(1199689, '_assertString2', _assertString2, false, false, false);
            _interopRequireDefault = J$.N(1199705, '_interopRequireDefault', J$.T(1199697, _interopRequireDefault, 12, false), true, false, false);
            currencyRegex = J$.N(1199721, 'currencyRegex', J$.T(1199713, currencyRegex, 12, false), true, false, false);
            J$.N(1199729, 'default_currency_options', default_currency_options, false, false, false);
            isCurrency = J$.N(1199745, 'isCurrency', J$.T(1199737, isCurrency, 12, false), true, false, false);
            J$.T(1197849, 'use strict', 21, false);
            J$.M(1197897, J$.I(typeof Object === 'undefined' ? Object = J$.R(1197857, 'Object', undefined, true, true) : Object = J$.R(1197857, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(1197865, 'exports', undefined, true, true) : exports = J$.R(1197865, 'exports', exports, true, true)), J$.T(1197873, '__esModule', 21, false), J$.T(1197889, { value: J$.T(1197881, true, 23, false) }, 11, false));
            J$.P(1197921, J$.I(typeof exports === 'undefined' ? exports = J$.R(1197905, 'exports', undefined, true, true) : exports = J$.R(1197905, 'exports', exports, true, true)), 'default', J$.R(1197913, 'isCurrency', isCurrency, false, true));
            var _merge = J$.W(1197953, '_merge', J$.F(1197945, J$.I(typeof require === 'undefined' ? require = J$.R(1197929, 'require', undefined, true, true) : require = J$.R(1197929, 'require', require, true, true)), false)(J$.T(1197937, './util/merge', 21, false)), _merge, false, true);
            var _merge2 = J$.W(1197985, '_merge2', J$.F(1197977, J$.R(1197961, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(1197969, '_merge', _merge, false, true)), _merge2, false, true);
            var _assertString = J$.W(1198017, '_assertString', J$.F(1198009, J$.I(typeof require === 'undefined' ? require = J$.R(1197993, 'require', undefined, true, true) : require = J$.R(1197993, 'require', require, true, true)), false)(J$.T(1198001, './util/assertString', 21, false)), _assertString, false, true);
            var _assertString2 = J$.W(1198049, '_assertString2', J$.F(1198041, J$.R(1198025, '_interopRequireDefault', _interopRequireDefault, false, true), false)(J$.R(1198033, '_assertString', _assertString, false, true)), _assertString2, false, true);
            var default_currency_options = J$.W(1199433, 'default_currency_options', J$.T(1199425, {
                symbol: J$.T(1199297, '$', 21, false),
                require_symbol: J$.T(1199305, false, 23, false),
                allow_space_after_symbol: J$.T(1199313, false, 23, false),
                symbol_after_digits: J$.T(1199321, false, 23, false),
                allow_negatives: J$.T(1199329, true, 23, false),
                parens_for_negatives: J$.T(1199337, false, 23, false),
                negative_sign_before_digits: J$.T(1199345, false, 23, false),
                negative_sign_after_digits: J$.T(1199353, false, 23, false),
                allow_negative_sign_placeholder: J$.T(1199361, false, 23, false),
                thousands_separator: J$.T(1199369, ',', 21, false),
                decimal_separator: J$.T(1199377, '.', 21, false),
                allow_decimal: J$.T(1199385, true, 23, false),
                require_decimal: J$.T(1199393, false, 23, false),
                digits_after_decimal: J$.T(1199409, [J$.T(1199401, 2, 22, false)], 10, false),
                allow_space_after_digits: J$.T(1199417, false, 23, false)
            }, 11, false), default_currency_options, false, true);
            J$.P(1199649, J$.I(typeof module === 'undefined' ? module = J$.R(1199617, 'module', undefined, true, true) : module = J$.R(1199617, 'module', module, true, true)), 'exports', J$.G(1199641, J$.I(typeof exports === 'undefined' ? exports = J$.R(1199625, 'exports', undefined, true, true) : exports = J$.R(1199625, 'exports', exports, true, true)), J$.T(1199633, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(1199817, J$e);
        } finally {
            if (J$.Sr(1199825))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

