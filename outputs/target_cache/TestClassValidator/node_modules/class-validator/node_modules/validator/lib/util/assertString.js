J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(1250521, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/util/assertString.js');
            function assertString(input) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1250449, arguments.callee, this, arguments);
                            arguments = J$.N(1250457, 'arguments', arguments, true, false, false);
                            input = J$.N(1250465, 'input', input, true, false, false);
                            J$.N(1250473, 'isString', isString, false, false, false);
                            var isString = J$.W(1250409, 'isString', J$.C(70416, J$.B(88618, '===', J$.U(88610, 'typeof', J$.R(1250377, 'input', input, false, false)), J$.T(1250385, 'string', 21, false))) ? J$._() : J$.B(88626, 'instanceof', J$.R(1250393, 'input', input, false, false), J$.I(typeof String === 'undefined' ? String = J$.R(1250401, 'String', undefined, true, true) : String = J$.R(1250401, 'String', String, true, true))), isString, false, false);
                            if (J$.C(70424, J$.U(88634, '!', J$.R(1250417, 'isString', isString, false, false)))) {
                                throw J$.F(1250441, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(1250425, 'TypeError', undefined, true, true) : TypeError = J$.R(1250425, 'TypeError', TypeError, true, true)), true)(J$.T(1250433, 'This library (validator.js) validates strings only', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(1250545, J$e);
                        } finally {
                            if (J$.Fr(1250553))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            assertString = J$.N(1250537, 'assertString', J$.T(1250529, assertString, 12, false), true, false, false);
            J$.T(1250297, 'use strict', 21, false);
            J$.M(1250345, J$.I(typeof Object === 'undefined' ? Object = J$.R(1250305, 'Object', undefined, true, true) : Object = J$.R(1250305, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(1250313, 'exports', undefined, true, true) : exports = J$.R(1250313, 'exports', exports, true, true)), J$.T(1250321, '__esModule', 21, false), J$.T(1250337, { value: J$.T(1250329, true, 23, false) }, 11, false));
            J$.P(1250369, J$.I(typeof exports === 'undefined' ? exports = J$.R(1250353, 'exports', undefined, true, true) : exports = J$.R(1250353, 'exports', exports, true, true)), 'default', J$.R(1250361, 'assertString', assertString, false, true));
            J$.P(1250513, J$.I(typeof module === 'undefined' ? module = J$.R(1250481, 'module', undefined, true, true) : module = J$.R(1250481, 'module', module, true, true)), 'exports', J$.G(1250505, J$.I(typeof exports === 'undefined' ? exports = J$.R(1250489, 'exports', undefined, true, true) : exports = J$.R(1250489, 'exports', exports, true, true)), J$.T(1250497, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(1250561, J$e);
        } finally {
            if (J$.Sr(1250569))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

