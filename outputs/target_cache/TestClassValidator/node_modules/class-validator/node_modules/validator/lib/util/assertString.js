J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(5891601, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/node_modules/validator/lib/util/assertString.js');
            function assertString(input) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5891529, arguments.callee, this, arguments);
                            arguments = J$.N(5891537, 'arguments', arguments, true, false, false);
                            input = J$.N(5891545, 'input', input, true, false, false);
                            J$.N(5891553, 'isString', isString, false, false, false);
                            var isString = J$.W(5891489, 'isString', J$.C(320936, J$.B(605154, '===', J$.U(605146, 'typeof', J$.R(5891457, 'input', input, false, false)), J$.T(5891465, 'string', 21, false))) ? J$._() : J$.B(605162, 'instanceof', J$.R(5891473, 'input', input, false, false), J$.I(typeof String === 'undefined' ? String = J$.R(5891481, 'String', undefined, true, true) : String = J$.R(5891481, 'String', String, true, true))), isString, false, false);
                            if (J$.C(320944, J$.U(605170, '!', J$.R(5891497, 'isString', isString, false, false)))) {
                                throw J$.F(5891521, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(5891505, 'TypeError', undefined, true, true) : TypeError = J$.R(5891505, 'TypeError', TypeError, true, true)), true)(J$.T(5891513, 'This library (validator.js) validates strings only', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5891625, J$e);
                        } finally {
                            if (J$.Fr(5891633))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            assertString = J$.N(5891617, 'assertString', J$.T(5891609, assertString, 12, false), true, false, false);
            J$.T(5891377, 'use strict', 21, false);
            J$.M(5891425, J$.I(typeof Object === 'undefined' ? Object = J$.R(5891385, 'Object', undefined, true, true) : Object = J$.R(5891385, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(5891393, 'exports', undefined, true, true) : exports = J$.R(5891393, 'exports', exports, true, true)), J$.T(5891401, '__esModule', 21, false), J$.T(5891417, { value: J$.T(5891409, true, 23, false) }, 11, false));
            J$.P(5891449, J$.I(typeof exports === 'undefined' ? exports = J$.R(5891433, 'exports', undefined, true, true) : exports = J$.R(5891433, 'exports', exports, true, true)), 'default', J$.R(5891441, 'assertString', assertString, false, true));
            J$.P(5891593, J$.I(typeof module === 'undefined' ? module = J$.R(5891561, 'module', undefined, true, true) : module = J$.R(5891561, 'module', module, true, true)), 'exports', J$.G(5891585, J$.I(typeof exports === 'undefined' ? exports = J$.R(5891569, 'exports', undefined, true, true) : exports = J$.R(5891569, 'exports', exports, true, true)), J$.T(5891577, 'default', 21, false)));
        } catch (J$e) {
            J$.Ex(5891641, J$e);
        } finally {
            if (J$.Sr(5891649))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

