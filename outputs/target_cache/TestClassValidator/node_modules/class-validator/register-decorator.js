J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(5968601, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/register-decorator.js');
            function registerDecorator(options) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5968529, arguments.callee, this, arguments);
                            arguments = J$.N(5968537, 'arguments', arguments, true, false, false);
                            options = J$.N(5968545, 'options', options, true, false, false);
                            J$.N(5968553, 'constraintCls', constraintCls, false, false, false);
                            J$.N(5968561, 'validator_1', validator_1, false, false, false);
                            J$.N(5968569, 'validationMetadataArgs', validationMetadataArgs, false, false, false);
                            var constraintCls;
                            if (J$.C(326064, J$.B(613498, 'instanceof', J$.G(5967881, J$.R(5967873, 'options', options, false, false), 'validator'), J$.I(typeof Function === 'undefined' ? Function = J$.R(5967889, 'Function', undefined, true, true) : Function = J$.R(5967889, 'Function', Function, true, true))))) {
                                constraintCls = J$.W(5967913, 'constraintCls', J$.G(5967905, J$.R(5967897, 'options', options, false, false), 'validator'), constraintCls, false, false);
                            } else {
                                var validator_1 = J$.W(5967937, 'validator_1', J$.G(5967929, J$.R(5967921, 'options', options, false, false), 'validator'), validator_1, false, false);
                                constraintCls = J$.W(5968249, 'constraintCls', J$.F(5968241, J$.T(5968233, function () {
                                    jalangiLabel3:
                                        while (true) {
                                            try {
                                                J$.Fe(5968201, arguments.callee, this, arguments);
                                                function CustomConstraint() {
                                                    jalangiLabel0:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(5967945, arguments.callee, this, arguments);
                                                                arguments = J$.N(5967953, 'arguments', arguments, true, false, false);
                                                            } catch (J$e) {
                                                                J$.Ex(5968665, J$e);
                                                            } finally {
                                                                if (J$.Fr(5968673))
                                                                    continue jalangiLabel0;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }
                                                arguments = J$.N(5968209, 'arguments', arguments, true, false, false);
                                                CustomConstraint = J$.N(5968225, 'CustomConstraint', J$.T(5968217, CustomConstraint, 12, false), true, false, false);
                                                J$.P(5968057, J$.G(5967969, J$.R(5967961, 'CustomConstraint', CustomConstraint, false, false), 'prototype'), 'validate', J$.T(5968049, function (value, validationArguments) {
                                                    jalangiLabel1:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(5968017, arguments.callee, this, arguments);
                                                                arguments = J$.N(5968025, 'arguments', arguments, true, false, false);
                                                                value = J$.N(5968033, 'value', value, true, false, false);
                                                                validationArguments = J$.N(5968041, 'validationArguments', validationArguments, true, false, false);
                                                                return J$.Rt(5968009, J$.M(5968001, J$.R(5967977, 'validator_1', validator_1, false, false), 'validate', false)(J$.R(5967985, 'value', value, false, false), J$.R(5967993, 'validationArguments', validationArguments, false, false)));
                                                            } catch (J$e) {
                                                                J$.Ex(5968681, J$e);
                                                            } finally {
                                                                if (J$.Fr(5968689))
                                                                    continue jalangiLabel1;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }, 12, false));
                                                J$.P(5968177, J$.G(5968073, J$.R(5968065, 'CustomConstraint', CustomConstraint, false, false), 'prototype'), 'defaultMessage', J$.T(5968169, function (validationArguments) {
                                                    jalangiLabel2:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(5968145, arguments.callee, this, arguments);
                                                                arguments = J$.N(5968153, 'arguments', arguments, true, false, false);
                                                                validationArguments = J$.N(5968161, 'validationArguments', validationArguments, true, false, false);
                                                                if (J$.C(326056, J$.G(5968089, J$.R(5968081, 'validator_1', validator_1, false, false), 'defaultMessage'))) {
                                                                    return J$.Rt(5968121, J$.M(5968113, J$.R(5968097, 'validator_1', validator_1, false, false), 'defaultMessage', false)(J$.R(5968105, 'validationArguments', validationArguments, false, false)));
                                                                }
                                                                return J$.Rt(5968137, J$.T(5968129, '', 21, false));
                                                            } catch (J$e) {
                                                                J$.Ex(5968697, J$e);
                                                            } finally {
                                                                if (J$.Fr(5968705))
                                                                    continue jalangiLabel2;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }, 12, false));
                                                return J$.Rt(5968193, J$.R(5968185, 'CustomConstraint', CustomConstraint, false, false));
                                            } catch (J$e) {
                                                J$.Ex(5968713, J$e);
                                            } finally {
                                                if (J$.Fr(5968721))
                                                    continue jalangiLabel3;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), false)(), constraintCls, false, false);
                                J$.M(5968345, J$.M(5968281, J$.R(5968257, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(5968273, J$.R(5968265, 'MetadataStorage_1', MetadataStorage_1, false, true), 'MetadataStorage')), 'addConstraintMetadata', false)(J$.M(5968337, J$.R(5968289, 'ConstraintMetadata_1', ConstraintMetadata_1, false, true), 'ConstraintMetadata', true)(J$.R(5968297, 'constraintCls', constraintCls, false, false), J$.G(5968313, J$.R(5968305, 'options', options, false, false), 'name'), J$.G(5968329, J$.R(5968321, 'options', options, false, false), 'async')));
                            }
                            var validationMetadataArgs = J$.W(5968457, 'validationMetadataArgs', J$.T(5968449, {
                                type: J$.G(5968369, J$.G(5968361, J$.R(5968353, 'ValidationTypes_1', ValidationTypes_1, false, true), 'ValidationTypes'), 'CUSTOM_VALIDATION'),
                                target: J$.G(5968385, J$.R(5968377, 'options', options, false, false), 'target'),
                                propertyName: J$.G(5968401, J$.R(5968393, 'options', options, false, false), 'propertyName'),
                                validationOptions: J$.G(5968417, J$.R(5968409, 'options', options, false, false), 'options'),
                                constraintCls: J$.R(5968425, 'constraintCls', constraintCls, false, false),
                                constraints: J$.G(5968441, J$.R(5968433, 'options', options, false, false), 'constraints')
                            }, 11, false), validationMetadataArgs, false, false);
                            J$.M(5968521, J$.M(5968489, J$.R(5968465, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(5968481, J$.R(5968473, 'MetadataStorage_1', MetadataStorage_1, false, true), 'MetadataStorage')), 'addValidationMetadata', false)(J$.M(5968513, J$.R(5968497, 'ValidationMetadata_1', ValidationMetadata_1, false, true), 'ValidationMetadata', true)(J$.R(5968505, 'validationMetadataArgs', validationMetadataArgs, false, false)));
                        } catch (J$e) {
                            J$.Ex(5968729, J$e);
                        } finally {
                            if (J$.Fr(5968737))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5968609, 'MetadataStorage_1', MetadataStorage_1, false, false, false);
            J$.N(5968617, 'ConstraintMetadata_1', ConstraintMetadata_1, false, false, false);
            J$.N(5968625, 'ValidationMetadata_1', ValidationMetadata_1, false, false, false);
            J$.N(5968633, 'ValidationTypes_1', ValidationTypes_1, false, false, false);
            J$.N(5968641, 'container_1', container_1, false, false, false);
            registerDecorator = J$.N(5968657, 'registerDecorator', J$.T(5968649, registerDecorator, 12, false), true, false, false);
            J$.T(5967657, 'use strict', 21, false);
            J$.M(5967705, J$.I(typeof Object === 'undefined' ? Object = J$.R(5967665, 'Object', undefined, true, true) : Object = J$.R(5967665, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(5967673, 'exports', undefined, true, true) : exports = J$.R(5967673, 'exports', exports, true, true)), J$.T(5967681, '__esModule', 21, false), J$.T(5967697, { value: J$.T(5967689, true, 23, false) }, 11, false));
            var MetadataStorage_1 = J$.W(5967737, 'MetadataStorage_1', J$.F(5967729, J$.I(typeof require === 'undefined' ? require = J$.R(5967713, 'require', undefined, true, true) : require = J$.R(5967713, 'require', require, true, true)), false)(J$.T(5967721, './metadata/MetadataStorage', 21, false)), MetadataStorage_1, false, true);
            var ConstraintMetadata_1 = J$.W(5967769, 'ConstraintMetadata_1', J$.F(5967761, J$.I(typeof require === 'undefined' ? require = J$.R(5967745, 'require', undefined, true, true) : require = J$.R(5967745, 'require', require, true, true)), false)(J$.T(5967753, './metadata/ConstraintMetadata', 21, false)), ConstraintMetadata_1, false, true);
            var ValidationMetadata_1 = J$.W(5967801, 'ValidationMetadata_1', J$.F(5967793, J$.I(typeof require === 'undefined' ? require = J$.R(5967777, 'require', undefined, true, true) : require = J$.R(5967777, 'require', require, true, true)), false)(J$.T(5967785, './metadata/ValidationMetadata', 21, false)), ValidationMetadata_1, false, true);
            var ValidationTypes_1 = J$.W(5967833, 'ValidationTypes_1', J$.F(5967825, J$.I(typeof require === 'undefined' ? require = J$.R(5967809, 'require', undefined, true, true) : require = J$.R(5967809, 'require', require, true, true)), false)(J$.T(5967817, './validation/ValidationTypes', 21, false)), ValidationTypes_1, false, true);
            var container_1 = J$.W(5967865, 'container_1', J$.F(5967857, J$.I(typeof require === 'undefined' ? require = J$.R(5967841, 'require', undefined, true, true) : require = J$.R(5967841, 'require', require, true, true)), false)(J$.T(5967849, './container', 21, false)), container_1, false, true);
            J$.P(5968593, J$.I(typeof exports === 'undefined' ? exports = J$.R(5968577, 'exports', undefined, true, true) : exports = J$.R(5968577, 'exports', exports, true, true)), 'registerDecorator', J$.R(5968585, 'registerDecorator', registerDecorator, false, true));
        } catch (J$e) {
            J$.Ex(5968745, J$e);
        } finally {
            if (J$.Sr(5968753))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

