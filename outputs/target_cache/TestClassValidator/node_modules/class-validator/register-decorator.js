J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(1327521, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/register-decorator.js');
            function registerDecorator(options) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1327449, arguments.callee, this, arguments);
                            arguments = J$.N(1327457, 'arguments', arguments, true, false, false);
                            options = J$.N(1327465, 'options', options, true, false, false);
                            J$.N(1327473, 'constraintCls', constraintCls, false, false, false);
                            J$.N(1327481, 'validator_1', validator_1, false, false, false);
                            J$.N(1327489, 'validationMetadataArgs', validationMetadataArgs, false, false, false);
                            var constraintCls;
                            if (J$.C(75544, J$.B(96962, 'instanceof', J$.G(1326801, J$.R(1326793, 'options', options, false, false), 'validator'), J$.I(typeof Function === 'undefined' ? Function = J$.R(1326809, 'Function', undefined, true, true) : Function = J$.R(1326809, 'Function', Function, true, true))))) {
                                constraintCls = J$.W(1326833, 'constraintCls', J$.G(1326825, J$.R(1326817, 'options', options, false, false), 'validator'), constraintCls, false, false);
                            } else {
                                var validator_1 = J$.W(1326857, 'validator_1', J$.G(1326849, J$.R(1326841, 'options', options, false, false), 'validator'), validator_1, false, false);
                                constraintCls = J$.W(1327169, 'constraintCls', J$.F(1327161, J$.T(1327153, function () {
                                    jalangiLabel3:
                                        while (true) {
                                            try {
                                                J$.Fe(1327121, arguments.callee, this, arguments);
                                                function CustomConstraint() {
                                                    jalangiLabel0:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(1326865, arguments.callee, this, arguments);
                                                                arguments = J$.N(1326873, 'arguments', arguments, true, false, false);
                                                            } catch (J$e) {
                                                                J$.Ex(1327585, J$e);
                                                            } finally {
                                                                if (J$.Fr(1327593))
                                                                    continue jalangiLabel0;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }
                                                arguments = J$.N(1327129, 'arguments', arguments, true, false, false);
                                                CustomConstraint = J$.N(1327145, 'CustomConstraint', J$.T(1327137, CustomConstraint, 12, false), true, false, false);
                                                J$.P(1326977, J$.G(1326889, J$.R(1326881, 'CustomConstraint', CustomConstraint, false, false), 'prototype'), 'validate', J$.T(1326969, function (value, validationArguments) {
                                                    jalangiLabel1:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(1326937, arguments.callee, this, arguments);
                                                                arguments = J$.N(1326945, 'arguments', arguments, true, false, false);
                                                                value = J$.N(1326953, 'value', value, true, false, false);
                                                                validationArguments = J$.N(1326961, 'validationArguments', validationArguments, true, false, false);
                                                                return J$.Rt(1326929, J$.M(1326921, J$.R(1326897, 'validator_1', validator_1, false, false), 'validate', false)(J$.R(1326905, 'value', value, false, false), J$.R(1326913, 'validationArguments', validationArguments, false, false)));
                                                            } catch (J$e) {
                                                                J$.Ex(1327601, J$e);
                                                            } finally {
                                                                if (J$.Fr(1327609))
                                                                    continue jalangiLabel1;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }, 12, false));
                                                J$.P(1327097, J$.G(1326993, J$.R(1326985, 'CustomConstraint', CustomConstraint, false, false), 'prototype'), 'defaultMessage', J$.T(1327089, function (validationArguments) {
                                                    jalangiLabel2:
                                                        while (true) {
                                                            try {
                                                                J$.Fe(1327065, arguments.callee, this, arguments);
                                                                arguments = J$.N(1327073, 'arguments', arguments, true, false, false);
                                                                validationArguments = J$.N(1327081, 'validationArguments', validationArguments, true, false, false);
                                                                if (J$.C(75536, J$.G(1327009, J$.R(1327001, 'validator_1', validator_1, false, false), 'defaultMessage'))) {
                                                                    return J$.Rt(1327041, J$.M(1327033, J$.R(1327017, 'validator_1', validator_1, false, false), 'defaultMessage', false)(J$.R(1327025, 'validationArguments', validationArguments, false, false)));
                                                                }
                                                                return J$.Rt(1327057, J$.T(1327049, '', 21, false));
                                                            } catch (J$e) {
                                                                J$.Ex(1327617, J$e);
                                                            } finally {
                                                                if (J$.Fr(1327625))
                                                                    continue jalangiLabel2;
                                                                else
                                                                    return J$.Ra();
                                                            }
                                                        }
                                                }, 12, false));
                                                return J$.Rt(1327113, J$.R(1327105, 'CustomConstraint', CustomConstraint, false, false));
                                            } catch (J$e) {
                                                J$.Ex(1327633, J$e);
                                            } finally {
                                                if (J$.Fr(1327641))
                                                    continue jalangiLabel3;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), false)(), constraintCls, false, false);
                                J$.M(1327265, J$.M(1327201, J$.R(1327177, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(1327193, J$.R(1327185, 'MetadataStorage_1', MetadataStorage_1, false, true), 'MetadataStorage')), 'addConstraintMetadata', false)(J$.M(1327257, J$.R(1327209, 'ConstraintMetadata_1', ConstraintMetadata_1, false, true), 'ConstraintMetadata', true)(J$.R(1327217, 'constraintCls', constraintCls, false, false), J$.G(1327233, J$.R(1327225, 'options', options, false, false), 'name'), J$.G(1327249, J$.R(1327241, 'options', options, false, false), 'async')));
                            }
                            var validationMetadataArgs = J$.W(1327377, 'validationMetadataArgs', J$.T(1327369, {
                                type: J$.G(1327289, J$.G(1327281, J$.R(1327273, 'ValidationTypes_1', ValidationTypes_1, false, true), 'ValidationTypes'), 'CUSTOM_VALIDATION'),
                                target: J$.G(1327305, J$.R(1327297, 'options', options, false, false), 'target'),
                                propertyName: J$.G(1327321, J$.R(1327313, 'options', options, false, false), 'propertyName'),
                                validationOptions: J$.G(1327337, J$.R(1327329, 'options', options, false, false), 'options'),
                                constraintCls: J$.R(1327345, 'constraintCls', constraintCls, false, false),
                                constraints: J$.G(1327361, J$.R(1327353, 'options', options, false, false), 'constraints')
                            }, 11, false), validationMetadataArgs, false, false);
                            J$.M(1327441, J$.M(1327409, J$.R(1327385, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(1327401, J$.R(1327393, 'MetadataStorage_1', MetadataStorage_1, false, true), 'MetadataStorage')), 'addValidationMetadata', false)(J$.M(1327433, J$.R(1327417, 'ValidationMetadata_1', ValidationMetadata_1, false, true), 'ValidationMetadata', true)(J$.R(1327425, 'validationMetadataArgs', validationMetadataArgs, false, false)));
                        } catch (J$e) {
                            J$.Ex(1327649, J$e);
                        } finally {
                            if (J$.Fr(1327657))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1327529, 'MetadataStorage_1', MetadataStorage_1, false, false, false);
            J$.N(1327537, 'ConstraintMetadata_1', ConstraintMetadata_1, false, false, false);
            J$.N(1327545, 'ValidationMetadata_1', ValidationMetadata_1, false, false, false);
            J$.N(1327553, 'ValidationTypes_1', ValidationTypes_1, false, false, false);
            J$.N(1327561, 'container_1', container_1, false, false, false);
            registerDecorator = J$.N(1327577, 'registerDecorator', J$.T(1327569, registerDecorator, 12, false), true, false, false);
            J$.T(1326577, 'use strict', 21, false);
            J$.M(1326625, J$.I(typeof Object === 'undefined' ? Object = J$.R(1326585, 'Object', undefined, true, true) : Object = J$.R(1326585, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(1326593, 'exports', undefined, true, true) : exports = J$.R(1326593, 'exports', exports, true, true)), J$.T(1326601, '__esModule', 21, false), J$.T(1326617, { value: J$.T(1326609, true, 23, false) }, 11, false));
            var MetadataStorage_1 = J$.W(1326657, 'MetadataStorage_1', J$.F(1326649, J$.I(typeof require === 'undefined' ? require = J$.R(1326633, 'require', undefined, true, true) : require = J$.R(1326633, 'require', require, true, true)), false)(J$.T(1326641, './metadata/MetadataStorage', 21, false)), MetadataStorage_1, false, true);
            var ConstraintMetadata_1 = J$.W(1326689, 'ConstraintMetadata_1', J$.F(1326681, J$.I(typeof require === 'undefined' ? require = J$.R(1326665, 'require', undefined, true, true) : require = J$.R(1326665, 'require', require, true, true)), false)(J$.T(1326673, './metadata/ConstraintMetadata', 21, false)), ConstraintMetadata_1, false, true);
            var ValidationMetadata_1 = J$.W(1326721, 'ValidationMetadata_1', J$.F(1326713, J$.I(typeof require === 'undefined' ? require = J$.R(1326697, 'require', undefined, true, true) : require = J$.R(1326697, 'require', require, true, true)), false)(J$.T(1326705, './metadata/ValidationMetadata', 21, false)), ValidationMetadata_1, false, true);
            var ValidationTypes_1 = J$.W(1326753, 'ValidationTypes_1', J$.F(1326745, J$.I(typeof require === 'undefined' ? require = J$.R(1326729, 'require', undefined, true, true) : require = J$.R(1326729, 'require', require, true, true)), false)(J$.T(1326737, './validation/ValidationTypes', 21, false)), ValidationTypes_1, false, true);
            var container_1 = J$.W(1326785, 'container_1', J$.F(1326777, J$.I(typeof require === 'undefined' ? require = J$.R(1326761, 'require', undefined, true, true) : require = J$.R(1326761, 'require', require, true, true)), false)(J$.T(1326769, './container', 21, false)), container_1, false, true);
            J$.P(1327513, J$.I(typeof exports === 'undefined' ? exports = J$.R(1327497, 'exports', undefined, true, true) : exports = J$.R(1327497, 'exports', exports, true, true)), 'registerDecorator', J$.R(1327505, 'registerDecorator', registerDecorator, false, true));
        } catch (J$e) {
            J$.Ex(1327665, J$e);
        } finally {
            if (J$.Sr(1327673))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

