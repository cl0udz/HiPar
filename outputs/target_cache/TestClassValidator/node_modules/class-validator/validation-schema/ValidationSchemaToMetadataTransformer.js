J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(6005577, '/home/james/nodejs/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/validation-schema/ValidationSchemaToMetadataTransformer.js');
            J$.N(6005585, 'ValidationMetadata_1', ValidationMetadata_1, false, false, false);
            J$.N(6005593, 'ValidationTypes_1', ValidationTypes_1, false, false, false);
            J$.N(6005601, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false, false);
            J$.T(6004753, 'use strict', 21, false);
            J$.M(6004801, J$.I(typeof Object === 'undefined' ? Object = J$.R(6004761, 'Object', undefined, true, true) : Object = J$.R(6004761, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(6004769, 'exports', undefined, true, true) : exports = J$.R(6004769, 'exports', exports, true, true)), J$.T(6004777, '__esModule', 21, false), J$.T(6004793, { value: J$.T(6004785, true, 23, false) }, 11, false));
            var ValidationMetadata_1 = J$.W(6004833, 'ValidationMetadata_1', J$.F(6004825, J$.I(typeof require === 'undefined' ? require = J$.R(6004809, 'require', undefined, true, true) : require = J$.R(6004809, 'require', require, true, true)), false)(J$.T(6004817, '../metadata/ValidationMetadata', 21, false)), ValidationMetadata_1, false, true);
            var ValidationTypes_1 = J$.W(6004865, 'ValidationTypes_1', J$.F(6004857, J$.I(typeof require === 'undefined' ? require = J$.R(6004841, 'require', undefined, true, true) : require = J$.R(6004841, 'require', require, true, true)), false)(J$.T(6004849, '../validation/ValidationTypes', 21, false)), ValidationTypes_1, false, true);
            var ValidationSchemaToMetadataTransformer = J$.W(6005545, 'ValidationSchemaToMetadataTransformer', J$.F(6005537, J$.T(6005529, function () {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(6005497, arguments.callee, this, arguments);
                            function ValidationSchemaToMetadataTransformer() {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6004873, arguments.callee, this, arguments);
                                            arguments = J$.N(6004881, 'arguments', arguments, true, false, false);
                                        } catch (J$e) {
                                            J$.Ex(6005609, J$e);
                                        } finally {
                                            if (J$.Fr(6005617))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(6005505, 'arguments', arguments, true, false, false);
                            ValidationSchemaToMetadataTransformer = J$.N(6005521, 'ValidationSchemaToMetadataTransformer', J$.T(6005513, ValidationSchemaToMetadataTransformer, 12, false), true, false, false);
                            J$.P(6005473, J$.G(6004897, J$.R(6004889, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false), 'prototype'), 'transform', J$.T(6005465, function (schema) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(6005433, arguments.callee, this, arguments);
                                            arguments = J$.N(6005441, 'arguments', arguments, true, false, false);
                                            schema = J$.N(6005449, 'schema', schema, true, false, false);
                                            J$.N(6005457, 'metadatas', metadatas, false, false, false);
                                            var metadatas = J$.W(6004913, 'metadatas', J$.T(6004905, [], 10, false), metadatas, false, false);
                                            J$.M(6005409, J$.M(6004945, J$.I(typeof Object === 'undefined' ? Object = J$.R(6004921, 'Object', undefined, true, true) : Object = J$.R(6004921, 'Object', Object, true, true)), 'keys', false)(J$.G(6004937, J$.R(6004929, 'schema', schema, false, false), 'properties')), 'forEach', false)(J$.T(6005401, function (property) {
                                                jalangiLabel2:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(6005377, arguments.callee, this, arguments);
                                                            arguments = J$.N(6005385, 'arguments', arguments, true, false, false);
                                                            property = J$.N(6005393, 'property', property, true, false, false);
                                                            J$.M(6005369, J$.G(6004977, J$.G(6004961, J$.R(6004953, 'schema', schema, false, false), 'properties'), J$.R(6004969, 'property', property, false, false)), 'forEach', false)(J$.T(6005361, function (validation) {
                                                                jalangiLabel1:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(6005321, arguments.callee, this, arguments);
                                                                            arguments = J$.N(6005329, 'arguments', arguments, true, false, false);
                                                                            validation = J$.N(6005337, 'validation', validation, true, false, false);
                                                                            J$.N(6005345, 'validationOptions', validationOptions, false, false, false);
                                                                            J$.N(6005353, 'args', args, false, false, false);
                                                                            if (J$.C(328872, J$.U(616362, '!', J$.M(6005017, J$.G(6004993, J$.R(6004985, 'ValidationTypes_1', ValidationTypes_1, false, true), 'ValidationTypes'), 'isValid', false)(J$.G(6005009, J$.R(6005001, 'validation', validation, false, false), 'type')))))
                                                                                throw J$.F(6005097, J$.I(typeof Error === 'undefined' ? Error = J$.R(6005025, 'Error', undefined, true, true) : Error = J$.R(6005025, 'Error', Error, true, true)), true)(J$.B(616402, '+', J$.B(616394, '+', J$.B(616386, '+', J$.B(616378, '+', J$.B(616370, '+', J$.T(6005033, 'Validation schema ', 21, false), J$.G(6005049, J$.R(6005041, 'schema', schema, false, false), 'name')), J$.T(6005057, '#', 21, false)), J$.R(6005065, 'property', property, false, false)), J$.T(6005073, ' as incorrect type ', 21, false)), J$.G(6005089, J$.R(6005081, 'validation', validation, false, false), 'type')));
                                                                            var validationOptions = J$.W(6005177, 'validationOptions', J$.T(6005169, {
                                                                                message: J$.G(6005113, J$.R(6005105, 'validation', validation, false, false), 'message'),
                                                                                groups: J$.G(6005129, J$.R(6005121, 'validation', validation, false, false), 'groups'),
                                                                                always: J$.G(6005145, J$.R(6005137, 'validation', validation, false, false), 'always'),
                                                                                each: J$.G(6005161, J$.R(6005153, 'validation', validation, false, false), 'each')
                                                                            }, 11, false), validationOptions, false, false);
                                                                            var args = J$.W(6005273, 'args', J$.T(6005265, {
                                                                                type: J$.G(6005193, J$.R(6005185, 'validation', validation, false, false), 'type'),
                                                                                target: J$.G(6005209, J$.R(6005201, 'schema', schema, false, false), 'name'),
                                                                                propertyName: J$.R(6005217, 'property', property, false, false),
                                                                                constraints: J$.G(6005233, J$.R(6005225, 'validation', validation, false, false), 'constraints'),
                                                                                validationTypeOptions: J$.G(6005249, J$.R(6005241, 'validation', validation, false, false), 'options'),
                                                                                validationOptions: J$.R(6005257, 'validationOptions', validationOptions, false, false)
                                                                            }, 11, false), args, false, false);
                                                                            J$.M(6005313, J$.R(6005281, 'metadatas', metadatas, false, false), 'push', false)(J$.M(6005305, J$.R(6005289, 'ValidationMetadata_1', ValidationMetadata_1, false, true), 'ValidationMetadata', true)(J$.R(6005297, 'args', args, false, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(6005625, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(6005633))
                                                                                continue jalangiLabel1;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false));
                                                        } catch (J$e) {
                                                            J$.Ex(6005641, J$e);
                                                        } finally {
                                                            if (J$.Fr(6005649))
                                                                continue jalangiLabel2;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            return J$.Rt(6005425, J$.R(6005417, 'metadatas', metadatas, false, false));
                                        } catch (J$e) {
                                            J$.Ex(6005657, J$e);
                                        } finally {
                                            if (J$.Fr(6005665))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6005489, J$.R(6005481, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false));
                        } catch (J$e) {
                            J$.Ex(6005673, J$e);
                        } finally {
                            if (J$.Fr(6005681))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), false)(), ValidationSchemaToMetadataTransformer, false, true);
            J$.P(6005569, J$.I(typeof exports === 'undefined' ? exports = J$.R(6005553, 'exports', undefined, true, true) : exports = J$.R(6005553, 'exports', exports, true, true)), 'ValidationSchemaToMetadataTransformer', J$.R(6005561, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, true));
        } catch (J$e) {
            J$.Ex(6005689, J$e);
        } finally {
            if (J$.Sr(6005697))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

