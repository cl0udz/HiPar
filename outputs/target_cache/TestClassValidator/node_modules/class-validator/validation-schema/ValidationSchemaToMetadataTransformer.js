J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(2222281, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/validation-schema/ValidationSchemaToMetadataTransformer.js');
            J$.N(2222289, 'ValidationMetadata_1', ValidationMetadata_1, false, false, false);
            J$.N(2222297, 'ValidationTypes_1', ValidationTypes_1, false, false, false);
            J$.N(2222305, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false, false);
            J$.T(2221457, 'use strict', 21, false);
            J$.M(2221505, J$.I(typeof Object === 'undefined' ? Object = J$.R(2221465, 'Object', undefined, true, true) : Object = J$.R(2221465, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(2221473, 'exports', undefined, true, true) : exports = J$.R(2221473, 'exports', exports, true, true)), J$.T(2221481, '__esModule', 21, false), J$.T(2221497, { value: J$.T(2221489, true, 23, false) }, 11, false));
            var ValidationMetadata_1 = J$.W(2221537, 'ValidationMetadata_1', J$.F(2221529, J$.I(typeof require === 'undefined' ? require = J$.R(2221513, 'require', undefined, true, true) : require = J$.R(2221513, 'require', require, true, true)), false)(J$.T(2221521, '../metadata/ValidationMetadata', 21, false)), ValidationMetadata_1, false, true);
            var ValidationTypes_1 = J$.W(2221569, 'ValidationTypes_1', J$.F(2221561, J$.I(typeof require === 'undefined' ? require = J$.R(2221545, 'require', undefined, true, true) : require = J$.R(2221545, 'require', require, true, true)), false)(J$.T(2221553, '../validation/ValidationTypes', 21, false)), ValidationTypes_1, false, true);
            var ValidationSchemaToMetadataTransformer = J$.W(2222249, 'ValidationSchemaToMetadataTransformer', J$.F(2222241, J$.T(2222233, function () {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2222201, arguments.callee, this, arguments);
                            function ValidationSchemaToMetadataTransformer() {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2221577, arguments.callee, this, arguments);
                                            arguments = J$.N(2221585, 'arguments', arguments, true, false, false);
                                        } catch (J$e) {
                                            J$.Ex(2222313, J$e);
                                        } finally {
                                            if (J$.Fr(2222321))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(2222209, 'arguments', arguments, true, false, false);
                            ValidationSchemaToMetadataTransformer = J$.N(2222225, 'ValidationSchemaToMetadataTransformer', J$.T(2222217, ValidationSchemaToMetadataTransformer, 12, false), true, false, false);
                            J$.P(2222177, J$.G(2221601, J$.R(2221593, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false), 'prototype'), 'transform', J$.T(2222169, function (schema) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(2222137, arguments.callee, this, arguments);
                                            arguments = J$.N(2222145, 'arguments', arguments, true, false, false);
                                            schema = J$.N(2222153, 'schema', schema, true, false, false);
                                            J$.N(2222161, 'metadatas', metadatas, false, false, false);
                                            var metadatas = J$.W(2221617, 'metadatas', J$.T(2221609, [], 10, false), metadatas, false, false);
                                            J$.M(2222113, J$.M(2221649, J$.I(typeof Object === 'undefined' ? Object = J$.R(2221625, 'Object', undefined, true, true) : Object = J$.R(2221625, 'Object', Object, true, true)), 'keys', false)(J$.G(2221641, J$.R(2221633, 'schema', schema, false, false), 'properties')), 'forEach', false)(J$.T(2222105, function (property) {
                                                jalangiLabel2:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(2222081, arguments.callee, this, arguments);
                                                            arguments = J$.N(2222089, 'arguments', arguments, true, false, false);
                                                            property = J$.N(2222097, 'property', property, true, false, false);
                                                            J$.M(2222073, J$.G(2221681, J$.G(2221665, J$.R(2221657, 'schema', schema, false, false), 'properties'), J$.R(2221673, 'property', property, false, false)), 'forEach', false)(J$.T(2222065, function (validation) {
                                                                jalangiLabel1:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(2222025, arguments.callee, this, arguments);
                                                                            arguments = J$.N(2222033, 'arguments', arguments, true, false, false);
                                                                            validation = J$.N(2222041, 'validation', validation, true, false, false);
                                                                            J$.N(2222049, 'validationOptions', validationOptions, false, false, false);
                                                                            J$.N(2222057, 'args', args, false, false, false);
                                                                            if (J$.C(132352, J$.U(268946, '!', J$.M(2221721, J$.G(2221697, J$.R(2221689, 'ValidationTypes_1', ValidationTypes_1, false, true), 'ValidationTypes'), 'isValid', false)(J$.G(2221713, J$.R(2221705, 'validation', validation, false, false), 'type')))))
                                                                                throw J$.F(2221801, J$.I(typeof Error === 'undefined' ? Error = J$.R(2221729, 'Error', undefined, true, true) : Error = J$.R(2221729, 'Error', Error, true, true)), true)(J$.B(268986, '+', J$.B(268978, '+', J$.B(268970, '+', J$.B(268962, '+', J$.B(268954, '+', J$.T(2221737, 'Validation schema ', 21, false), J$.G(2221753, J$.R(2221745, 'schema', schema, false, false), 'name')), J$.T(2221761, '#', 21, false)), J$.R(2221769, 'property', property, false, false)), J$.T(2221777, ' as incorrect type ', 21, false)), J$.G(2221793, J$.R(2221785, 'validation', validation, false, false), 'type')));
                                                                            var validationOptions = J$.W(2221881, 'validationOptions', J$.T(2221873, {
                                                                                message: J$.G(2221817, J$.R(2221809, 'validation', validation, false, false), 'message'),
                                                                                groups: J$.G(2221833, J$.R(2221825, 'validation', validation, false, false), 'groups'),
                                                                                always: J$.G(2221849, J$.R(2221841, 'validation', validation, false, false), 'always'),
                                                                                each: J$.G(2221865, J$.R(2221857, 'validation', validation, false, false), 'each')
                                                                            }, 11, false), validationOptions, false, false);
                                                                            var args = J$.W(2221977, 'args', J$.T(2221969, {
                                                                                type: J$.G(2221897, J$.R(2221889, 'validation', validation, false, false), 'type'),
                                                                                target: J$.G(2221913, J$.R(2221905, 'schema', schema, false, false), 'name'),
                                                                                propertyName: J$.R(2221921, 'property', property, false, false),
                                                                                constraints: J$.G(2221937, J$.R(2221929, 'validation', validation, false, false), 'constraints'),
                                                                                validationTypeOptions: J$.G(2221953, J$.R(2221945, 'validation', validation, false, false), 'options'),
                                                                                validationOptions: J$.R(2221961, 'validationOptions', validationOptions, false, false)
                                                                            }, 11, false), args, false, false);
                                                                            J$.M(2222017, J$.R(2221985, 'metadatas', metadatas, false, false), 'push', false)(J$.M(2222009, J$.R(2221993, 'ValidationMetadata_1', ValidationMetadata_1, false, true), 'ValidationMetadata', true)(J$.R(2222001, 'args', args, false, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(2222329, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(2222337))
                                                                                continue jalangiLabel1;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false));
                                                        } catch (J$e) {
                                                            J$.Ex(2222345, J$e);
                                                        } finally {
                                                            if (J$.Fr(2222353))
                                                                continue jalangiLabel2;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            return J$.Rt(2222129, J$.R(2222121, 'metadatas', metadatas, false, false));
                                        } catch (J$e) {
                                            J$.Ex(2222361, J$e);
                                        } finally {
                                            if (J$.Fr(2222369))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(2222193, J$.R(2222185, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, false));
                        } catch (J$e) {
                            J$.Ex(2222377, J$e);
                        } finally {
                            if (J$.Fr(2222385))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), false)(), ValidationSchemaToMetadataTransformer, false, true);
            J$.P(2222273, J$.I(typeof exports === 'undefined' ? exports = J$.R(2222257, 'exports', undefined, true, true) : exports = J$.R(2222257, 'exports', exports, true, true)), 'ValidationSchemaToMetadataTransformer', J$.R(2222265, 'ValidationSchemaToMetadataTransformer', ValidationSchemaToMetadataTransformer, false, true));
        } catch (J$e) {
            J$.Ex(2222393, J$e);
        } finally {
            if (J$.Sr(2222401))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

