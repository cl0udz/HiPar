J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(2033537, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestClassValidator/node_modules/class-validator/index.js');
            function __export(m) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2032337, arguments.callee, this, arguments);
                            arguments = J$.N(2032345, 'arguments', arguments, true, false, false);
                            m = J$.N(2032353, 'm', m, true, false, false);
                            J$.N(2032361, 'p', p, false, false, false);
                            for (var p in J$.H(2032321, J$.R(2032241, 'm', m, false, false))) {
                                J$.N(2032329, 'p', p, false, true, false);
                                {
                                    if (J$.C(120640, J$.U(253730, '!', J$.M(2032265, J$.I(typeof exports === 'undefined' ? exports = J$.R(2032249, 'exports', undefined, true, true) : exports = J$.R(2032249, 'exports', exports, true, true)), 'hasOwnProperty', false)(J$.R(2032257, 'p', p, false, false)))))
                                        J$.P(2032313, J$.I(typeof exports === 'undefined' ? exports = J$.R(2032273, 'exports', undefined, true, true) : exports = J$.R(2032273, 'exports', exports, true, true)), J$.R(2032281, 'p', p, false, false), J$.G(2032305, J$.R(2032289, 'm', m, false, false), J$.R(2032297, 'p', p, false, false)));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(2033649, J$e);
                        } finally {
                            if (J$.Fr(2033657))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2032945, arguments.callee, this, arguments);
                            arguments = J$.N(2032953, 'arguments', arguments, true, false, false);
                            schemaNameOrObject = J$.N(2032961, 'schemaNameOrObject', schemaNameOrObject, true, false, false);
                            objectOrValidationOptions = J$.N(2032969, 'objectOrValidationOptions', objectOrValidationOptions, true, false, false);
                            maybeValidatorOptions = J$.N(2032977, 'maybeValidatorOptions', maybeValidatorOptions, true, false, false);
                            if (J$.C(120648, J$.B(253746, '===', J$.U(253738, 'typeof', J$.R(2032793, 'schemaNameOrObject', schemaNameOrObject, false, false)), J$.T(2032801, 'string', 21, false)))) {
                                return J$.Rt(2032873, J$.M(2032865, J$.M(2032833, J$.R(2032809, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2032825, J$.R(2032817, 'Validator_1', Validator_1, false, true), 'Validator')), 'validate', false)(J$.R(2032841, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2032849, 'objectOrValidationOptions', objectOrValidationOptions, false, false), J$.R(2032857, 'maybeValidatorOptions', maybeValidatorOptions, false, false)));
                            } else {
                                return J$.Rt(2032937, J$.M(2032929, J$.M(2032905, J$.R(2032881, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2032897, J$.R(2032889, 'Validator_1', Validator_1, false, true), 'Validator')), 'validate', false)(J$.R(2032913, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2032921, 'objectOrValidationOptions', objectOrValidationOptions, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(2033665, J$e);
                        } finally {
                            if (J$.Fr(2033673))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2033161, arguments.callee, this, arguments);
                            arguments = J$.N(2033169, 'arguments', arguments, true, false, false);
                            schemaNameOrObject = J$.N(2033177, 'schemaNameOrObject', schemaNameOrObject, true, false, false);
                            objectOrValidationOptions = J$.N(2033185, 'objectOrValidationOptions', objectOrValidationOptions, true, false, false);
                            maybeValidatorOptions = J$.N(2033193, 'maybeValidatorOptions', maybeValidatorOptions, true, false, false);
                            if (J$.C(120656, J$.B(253762, '===', J$.U(253754, 'typeof', J$.R(2033009, 'schemaNameOrObject', schemaNameOrObject, false, false)), J$.T(2033017, 'string', 21, false)))) {
                                return J$.Rt(2033089, J$.M(2033081, J$.M(2033049, J$.R(2033025, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2033041, J$.R(2033033, 'Validator_1', Validator_1, false, true), 'Validator')), 'validateOrReject', false)(J$.R(2033057, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2033065, 'objectOrValidationOptions', objectOrValidationOptions, false, false), J$.R(2033073, 'maybeValidatorOptions', maybeValidatorOptions, false, false)));
                            } else {
                                return J$.Rt(2033153, J$.M(2033145, J$.M(2033121, J$.R(2033097, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2033113, J$.R(2033105, 'Validator_1', Validator_1, false, true), 'Validator')), 'validateOrReject', false)(J$.R(2033129, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2033137, 'objectOrValidationOptions', objectOrValidationOptions, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(2033681, J$e);
                        } finally {
                            if (J$.Fr(2033689))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(2033377, arguments.callee, this, arguments);
                            arguments = J$.N(2033385, 'arguments', arguments, true, false, false);
                            schemaNameOrObject = J$.N(2033393, 'schemaNameOrObject', schemaNameOrObject, true, false, false);
                            objectOrValidationOptions = J$.N(2033401, 'objectOrValidationOptions', objectOrValidationOptions, true, false, false);
                            maybeValidatorOptions = J$.N(2033409, 'maybeValidatorOptions', maybeValidatorOptions, true, false, false);
                            if (J$.C(120664, J$.B(253778, '===', J$.U(253770, 'typeof', J$.R(2033225, 'schemaNameOrObject', schemaNameOrObject, false, false)), J$.T(2033233, 'string', 21, false)))) {
                                return J$.Rt(2033305, J$.M(2033297, J$.M(2033265, J$.R(2033241, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2033257, J$.R(2033249, 'Validator_1', Validator_1, false, true), 'Validator')), 'validateSync', false)(J$.R(2033273, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2033281, 'objectOrValidationOptions', objectOrValidationOptions, false, false), J$.R(2033289, 'maybeValidatorOptions', maybeValidatorOptions, false, false)));
                            } else {
                                return J$.Rt(2033369, J$.M(2033361, J$.M(2033337, J$.R(2033313, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2033329, J$.R(2033321, 'Validator_1', Validator_1, false, true), 'Validator')), 'validateSync', false)(J$.R(2033345, 'schemaNameOrObject', schemaNameOrObject, false, false), J$.R(2033353, 'objectOrValidationOptions', objectOrValidationOptions, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(2033697, J$e);
                        } finally {
                            if (J$.Fr(2033705))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function registerSchema(schema) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2033489, arguments.callee, this, arguments);
                            arguments = J$.N(2033497, 'arguments', arguments, true, false, false);
                            schema = J$.N(2033505, 'schema', schema, true, false, false);
                            J$.M(2033481, J$.M(2033465, J$.R(2033441, 'container_1', container_1, false, true), 'getFromContainer', false)(J$.G(2033457, J$.R(2033449, 'MetadataStorage_1', MetadataStorage_1, false, true), 'MetadataStorage')), 'addValidationSchema', false)(J$.R(2033473, 'schema', schema, false, false));
                        } catch (J$e) {
                            J$.Ex(2033713, J$e);
                        } finally {
                            if (J$.Fr(2033721))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            __export = J$.N(2033553, '__export', J$.T(2033545, __export, 12, false), true, false, false);
            J$.N(2033561, 'MetadataStorage_1', MetadataStorage_1, false, false, false);
            J$.N(2033569, 'Validator_1', Validator_1, false, false, false);
            J$.N(2033577, 'container_1', container_1, false, false, false);
            validate = J$.N(2033593, 'validate', J$.T(2033585, validate, 12, false), true, false, false);
            validateOrReject = J$.N(2033609, 'validateOrReject', J$.T(2033601, validateOrReject, 12, false), true, false, false);
            validateSync = J$.N(2033625, 'validateSync', J$.T(2033617, validateSync, 12, false), true, false, false);
            registerSchema = J$.N(2033641, 'registerSchema', J$.T(2033633, registerSchema, 12, false), true, false, false);
            J$.T(2032233, 'use strict', 21, false);
            J$.M(2032409, J$.I(typeof Object === 'undefined' ? Object = J$.R(2032369, 'Object', undefined, true, true) : Object = J$.R(2032369, 'Object', Object, true, true)), 'defineProperty', false)(J$.I(typeof exports === 'undefined' ? exports = J$.R(2032377, 'exports', undefined, true, true) : exports = J$.R(2032377, 'exports', exports, true, true)), J$.T(2032385, '__esModule', 21, false), J$.T(2032401, { value: J$.T(2032393, true, 23, false) }, 11, false));
            var MetadataStorage_1 = J$.W(2032441, 'MetadataStorage_1', J$.F(2032433, J$.I(typeof require === 'undefined' ? require = J$.R(2032417, 'require', undefined, true, true) : require = J$.R(2032417, 'require', require, true, true)), false)(J$.T(2032425, './metadata/MetadataStorage', 21, false)), MetadataStorage_1, false, true);
            var Validator_1 = J$.W(2032473, 'Validator_1', J$.F(2032465, J$.I(typeof require === 'undefined' ? require = J$.R(2032449, 'require', undefined, true, true) : require = J$.R(2032449, 'require', require, true, true)), false)(J$.T(2032457, './validation/Validator', 21, false)), Validator_1, false, true);
            var container_1 = J$.W(2032505, 'container_1', J$.F(2032497, J$.I(typeof require === 'undefined' ? require = J$.R(2032481, 'require', undefined, true, true) : require = J$.R(2032481, 'require', require, true, true)), false)(J$.T(2032489, './container', 21, false)), container_1, false, true);
            J$.F(2032545, J$.R(2032513, '__export', __export, false, true), false)(J$.F(2032537, J$.I(typeof require === 'undefined' ? require = J$.R(2032521, 'require', undefined, true, true) : require = J$.R(2032521, 'require', require, true, true)), false)(J$.T(2032529, './container', 21, false)));
            J$.F(2032585, J$.R(2032553, '__export', __export, false, true), false)(J$.F(2032577, J$.I(typeof require === 'undefined' ? require = J$.R(2032561, 'require', undefined, true, true) : require = J$.R(2032561, 'require', require, true, true)), false)(J$.T(2032569, './decorator/decorators', 21, false)));
            J$.F(2032625, J$.R(2032593, '__export', __export, false, true), false)(J$.F(2032617, J$.I(typeof require === 'undefined' ? require = J$.R(2032601, 'require', undefined, true, true) : require = J$.R(2032601, 'require', require, true, true)), false)(J$.T(2032609, './validation/ValidationError', 21, false)));
            J$.F(2032665, J$.R(2032633, '__export', __export, false, true), false)(J$.F(2032657, J$.I(typeof require === 'undefined' ? require = J$.R(2032641, 'require', undefined, true, true) : require = J$.R(2032641, 'require', require, true, true)), false)(J$.T(2032649, './validation/ValidationTypes', 21, false)));
            J$.F(2032705, J$.R(2032673, '__export', __export, false, true), false)(J$.F(2032697, J$.I(typeof require === 'undefined' ? require = J$.R(2032681, 'require', undefined, true, true) : require = J$.R(2032681, 'require', require, true, true)), false)(J$.T(2032689, './validation/Validator', 21, false)));
            J$.F(2032745, J$.R(2032713, '__export', __export, false, true), false)(J$.F(2032737, J$.I(typeof require === 'undefined' ? require = J$.R(2032721, 'require', undefined, true, true) : require = J$.R(2032721, 'require', require, true, true)), false)(J$.T(2032729, './register-decorator', 21, false)));
            J$.F(2032785, J$.R(2032753, '__export', __export, false, true), false)(J$.F(2032777, J$.I(typeof require === 'undefined' ? require = J$.R(2032761, 'require', undefined, true, true) : require = J$.R(2032761, 'require', require, true, true)), false)(J$.T(2032769, './metadata/MetadataStorage', 21, false)));
            J$.P(2033001, J$.I(typeof exports === 'undefined' ? exports = J$.R(2032985, 'exports', undefined, true, true) : exports = J$.R(2032985, 'exports', exports, true, true)), 'validate', J$.R(2032993, 'validate', validate, false, true));
            J$.P(2033217, J$.I(typeof exports === 'undefined' ? exports = J$.R(2033201, 'exports', undefined, true, true) : exports = J$.R(2033201, 'exports', exports, true, true)), 'validateOrReject', J$.R(2033209, 'validateOrReject', validateOrReject, false, true));
            J$.P(2033433, J$.I(typeof exports === 'undefined' ? exports = J$.R(2033417, 'exports', undefined, true, true) : exports = J$.R(2033417, 'exports', exports, true, true)), 'validateSync', J$.R(2033425, 'validateSync', validateSync, false, true));
            J$.P(2033529, J$.I(typeof exports === 'undefined' ? exports = J$.R(2033513, 'exports', undefined, true, true) : exports = J$.R(2033513, 'exports', exports, true, true)), 'registerSchema', J$.R(2033521, 'registerSchema', registerSchema, false, true));
        } catch (J$e) {
            J$.Ex(2033729, J$e);
        } finally {
            if (J$.Sr(2033737))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

