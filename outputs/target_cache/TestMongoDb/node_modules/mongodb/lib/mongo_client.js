J$.noInstrEval = false;
jalangiLabel17:
    while (true) {
        try {
            J$.Se(1059497, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/mongodb/lib/mongo_client.js');
            function MongoClient(url, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1056281, arguments.callee, this, arguments);
                            arguments = J$.N(1056289, 'arguments', arguments, true, false, false);
                            url = J$.N(1056297, 'url', url, true, false, false);
                            options = J$.N(1056305, 'options', options, true, false, false);
                            J$.N(1056313, 'promiseLibrary', promiseLibrary, false, false, false);
                            if (J$.C(64200, J$.U(107594, '!', J$.B(107586, 'instanceof', J$.R(1055985, 'this', this, false, false), J$.R(1055993, 'MongoClient', MongoClient, false, true)))))
                                return J$.Rt(1056033, J$.F(1056025, J$.R(1056001, 'MongoClient', MongoClient, false, true), true)(J$.R(1056009, 'url', url, false, false), J$.R(1056017, 'options', options, false, false)));
                            J$.M(1056057, J$.R(1056041, 'EventEmitter', EventEmitter, false, true), 'call', false)(J$.R(1056049, 'this', this, false, false));
                            J$.P(1056193, J$.R(1056065, 'this', this, false, false), 's', J$.T(1056185, {
                                url: J$.R(1056073, 'url', url, false, false),
                                options: J$.C(64208, J$.R(1056081, 'options', options, false, false)) ? J$._() : J$.T(1056089, {}, 11, false),
                                promiseLibrary: J$.T(1056097, null, 25, false),
                                dbCache: J$.F(1056113, J$.I(typeof Map === 'undefined' ? Map = J$.R(1056105, 'Map', undefined, true, true) : Map = J$.R(1056105, 'Map', Map, true, true)), true)(),
                                sessions: J$.F(1056129, J$.I(typeof Set === 'undefined' ? Set = J$.R(1056121, 'Set', undefined, true, true) : Set = J$.R(1056121, 'Set', Set, true, true)), true)(),
                                writeConcern: J$.M(1056153, J$.R(1056137, 'WriteConcern', WriteConcern, false, true), 'fromOptions', false)(J$.R(1056145, 'options', options, false, false)),
                                namespace: J$.F(1056177, J$.R(1056161, 'MongoDBNamespace', MongoDBNamespace, false, true), true)(J$.T(1056169, 'admin', 21, false))
                            }, 11, false));
                            var promiseLibrary = J$.W(1056241, 'promiseLibrary', J$.C(64216, J$.G(1056225, J$.G(1056217, J$.G(1056209, J$.R(1056201, 'this', this, false, false), 's'), 'options'), 'promiseLibrary')) ? J$._() : J$.I(typeof Promise === 'undefined' ? Promise = J$.R(1056233, 'Promise', undefined, true, true) : Promise = J$.R(1056233, 'Promise', Promise, true, true)), promiseLibrary, false, false);
                            J$.P(1056273, J$.G(1056257, J$.R(1056249, 'this', this, false, false), 's'), 'promiseLibrary', J$.R(1056265, 'promiseLibrary', promiseLibrary, false, false));
                        } catch (J$e) {
                            J$.Ex(1059617, J$e);
                        } finally {
                            if (J$.Fr(1059625))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1059505, 'ChangeStream', ChangeStream, false, false, false);
            J$.N(1059513, 'Db', Db, false, false, false);
            J$.N(1059521, 'EventEmitter', EventEmitter, false, false, false);
            J$.N(1059529, 'executeOperation', executeOperation, false, false, false);
            J$.N(1059537, 'inherits', inherits, false, false, false);
            J$.N(1059545, 'MongoError', MongoError, false, false, false);
            J$.N(1059553, 'deprecate', deprecate, false, false, false);
            J$.N(1059561, 'WriteConcern', WriteConcern, false, false, false);
            J$.N(1059569, 'MongoDBNamespace', MongoDBNamespace, false, false, false);
            J$.N(1059577, 'ReadPreference', ReadPreference, false, false, false);
            J$.N(1059585, 'ConnectOperation', ConnectOperation, false, false, false);
            J$.N(1059593, 'CloseOperation', CloseOperation, false, false, false);
            MongoClient = J$.N(1059609, 'MongoClient', J$.T(1059601, MongoClient, 12, false), true, false, false);
            J$.T(1055553, 'use strict', 21, false);
            var ChangeStream = J$.W(1055585, 'ChangeStream', J$.F(1055577, J$.I(typeof require === 'undefined' ? require = J$.R(1055561, 'require', undefined, true, true) : require = J$.R(1055561, 'require', require, true, true)), false)(J$.T(1055569, './change_stream', 21, false)), ChangeStream, false, true);
            var Db = J$.W(1055617, 'Db', J$.F(1055609, J$.I(typeof require === 'undefined' ? require = J$.R(1055593, 'require', undefined, true, true) : require = J$.R(1055593, 'require', require, true, true)), false)(J$.T(1055601, './db', 21, false)), Db, false, true);
            var EventEmitter = J$.W(1055657, 'EventEmitter', J$.G(1055649, J$.F(1055641, J$.I(typeof require === 'undefined' ? require = J$.R(1055625, 'require', undefined, true, true) : require = J$.R(1055625, 'require', require, true, true)), false)(J$.T(1055633, 'events', 21, false)), 'EventEmitter'), EventEmitter, false, true);
            var executeOperation = J$.W(1055689, 'executeOperation', J$.F(1055681, J$.I(typeof require === 'undefined' ? require = J$.R(1055665, 'require', undefined, true, true) : require = J$.R(1055665, 'require', require, true, true)), false)(J$.T(1055673, './operations/execute_operation', 21, false)), executeOperation, false, true);
            var inherits = J$.W(1055729, 'inherits', J$.G(1055721, J$.F(1055713, J$.I(typeof require === 'undefined' ? require = J$.R(1055697, 'require', undefined, true, true) : require = J$.R(1055697, 'require', require, true, true)), false)(J$.T(1055705, 'util', 21, false)), 'inherits'), inherits, false, true);
            var MongoError = J$.W(1055769, 'MongoError', J$.G(1055761, J$.F(1055753, J$.I(typeof require === 'undefined' ? require = J$.R(1055737, 'require', undefined, true, true) : require = J$.R(1055737, 'require', require, true, true)), false)(J$.T(1055745, './core', 21, false)), 'MongoError'), MongoError, false, true);
            var deprecate = J$.W(1055809, 'deprecate', J$.G(1055801, J$.F(1055793, J$.I(typeof require === 'undefined' ? require = J$.R(1055777, 'require', undefined, true, true) : require = J$.R(1055777, 'require', require, true, true)), false)(J$.T(1055785, 'util', 21, false)), 'deprecate'), deprecate, false, true);
            var WriteConcern = J$.W(1055841, 'WriteConcern', J$.F(1055833, J$.I(typeof require === 'undefined' ? require = J$.R(1055817, 'require', undefined, true, true) : require = J$.R(1055817, 'require', require, true, true)), false)(J$.T(1055825, './write_concern', 21, false)), WriteConcern, false, true);
            var MongoDBNamespace = J$.W(1055881, 'MongoDBNamespace', J$.G(1055873, J$.F(1055865, J$.I(typeof require === 'undefined' ? require = J$.R(1055849, 'require', undefined, true, true) : require = J$.R(1055849, 'require', require, true, true)), false)(J$.T(1055857, './utils', 21, false)), 'MongoDBNamespace'), MongoDBNamespace, false, true);
            var ReadPreference = J$.W(1055913, 'ReadPreference', J$.F(1055905, J$.I(typeof require === 'undefined' ? require = J$.R(1055889, 'require', undefined, true, true) : require = J$.R(1055889, 'require', require, true, true)), false)(J$.T(1055897, './core/topologies/read_preference', 21, false)), ReadPreference, false, true);
            var ConnectOperation = J$.W(1055945, 'ConnectOperation', J$.F(1055937, J$.I(typeof require === 'undefined' ? require = J$.R(1055921, 'require', undefined, true, true) : require = J$.R(1055921, 'require', require, true, true)), false)(J$.T(1055929, './operations/connect', 21, false)), ConnectOperation, false, true);
            var CloseOperation = J$.W(1055977, 'CloseOperation', J$.F(1055969, J$.I(typeof require === 'undefined' ? require = J$.R(1055953, 'require', undefined, true, true) : require = J$.R(1055953, 'require', require, true, true)), false)(J$.T(1055961, './operations/close', 21, false)), CloseOperation, false, true);
            J$.F(1056345, J$.R(1056321, 'inherits', inherits, false, true), false)(J$.R(1056329, 'MongoClient', MongoClient, false, true), J$.R(1056337, 'EventEmitter', EventEmitter, false, true));
            J$.M(1056457, J$.I(typeof Object === 'undefined' ? Object = J$.R(1056353, 'Object', undefined, true, true) : Object = J$.R(1056353, 'Object', Object, true, true)), 'defineProperty', false)(J$.G(1056369, J$.R(1056361, 'MongoClient', MongoClient, false, true), 'prototype'), J$.T(1056377, 'writeConcern', 21, false), J$.T(1056449, {
                enumerable: J$.T(1056385, true, 23, false),
                get: J$.T(1056441, function get() {
                    jalangiLabel1:
                        while (true) {
                            try {
                                J$.Fe(1056425, arguments.callee, this, arguments);
                                arguments = J$.N(1056433, 'arguments', arguments, true, false, false);
                                return J$.Rt(1056417, J$.G(1056409, J$.G(1056401, J$.R(1056393, 'this', this, false, false), 's'), 'writeConcern'));
                            } catch (J$e) {
                                J$.Ex(1059633, J$e);
                            } finally {
                                if (J$.Fr(1059641))
                                    continue jalangiLabel1;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
            J$.M(1056561, J$.I(typeof Object === 'undefined' ? Object = J$.R(1056465, 'Object', undefined, true, true) : Object = J$.R(1056465, 'Object', Object, true, true)), 'defineProperty', false)(J$.G(1056481, J$.R(1056473, 'MongoClient', MongoClient, false, true), 'prototype'), J$.T(1056489, 'readPreference', 21, false), J$.T(1056553, {
                enumerable: J$.T(1056497, true, 23, false),
                get: J$.T(1056545, function get() {
                    jalangiLabel2:
                        while (true) {
                            try {
                                J$.Fe(1056529, arguments.callee, this, arguments);
                                arguments = J$.N(1056537, 'arguments', arguments, true, false, false);
                                return J$.Rt(1056521, J$.G(1056513, J$.R(1056505, 'ReadPreference', ReadPreference, false, true), 'primary'));
                            } catch (J$e) {
                                J$.Ex(1059649, J$e);
                            } finally {
                                if (J$.Fr(1059657))
                                    continue jalangiLabel2;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
            J$.P(1056745, J$.G(1056577, J$.R(1056569, 'MongoClient', MongoClient, false, true), 'prototype'), 'connect', J$.T(1056737, function (callback) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1056705, arguments.callee, this, arguments);
                            arguments = J$.N(1056713, 'arguments', arguments, true, false, false);
                            callback = J$.N(1056721, 'callback', callback, true, false, false);
                            J$.N(1056729, 'operation', operation, false, false, false);
                            if (J$.C(64224, J$.B(107610, '===', J$.U(107602, 'typeof', J$.R(1056585, 'callback', callback, false, false)), J$.T(1056593, 'string', 21, false)))) {
                                throw J$.F(1056617, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(1056601, 'TypeError', undefined, true, true) : TypeError = J$.R(1056601, 'TypeError', TypeError, true, true)), true)(J$.T(1056609, '`connect` only accepts a callback', 21, false));
                            }
                            var operation = J$.W(1056649, 'operation', J$.F(1056641, J$.R(1056625, 'ConnectOperation', ConnectOperation, false, true), true)(J$.R(1056633, 'this', this, false, false)), operation, false, false);
                            return J$.Rt(1056697, J$.F(1056689, J$.R(1056657, 'executeOperation', executeOperation, false, true), false)(J$.R(1056665, 'this', this, false, false), J$.R(1056673, 'operation', operation, false, false), J$.R(1056681, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(1059665, J$e);
                        } finally {
                            if (J$.Fr(1059673))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1056929, J$.G(1056761, J$.R(1056753, 'MongoClient', MongoClient, false, true), 'prototype'), 'logout', J$.F(1056921, J$.R(1056769, 'deprecate', deprecate, false, true), false)(J$.T(1056905, function (options, callback) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1056873, arguments.callee, this, arguments);
                            arguments = J$.N(1056881, 'arguments', arguments, true, false, false);
                            options = J$.N(1056889, 'options', options, true, false, false);
                            callback = J$.N(1056897, 'callback', callback, true, false, false);
                            if (J$.C(64232, J$.B(107626, '===', J$.U(107618, 'typeof', J$.R(1056777, 'options', options, false, false)), J$.T(1056785, 'function', 21, false))))
                                callback = J$.W(1056801, 'callback', J$.R(1056793, 'options', options, false, false), callback, false, false), options = J$.W(1056817, 'options', J$.T(1056809, {}, 11, false), options, false, false);
                            if (J$.C(64240, J$.B(107642, '===', J$.U(107634, 'typeof', J$.R(1056825, 'callback', callback, false, false)), J$.T(1056833, 'function', 21, false))))
                                J$.F(1056865, J$.R(1056841, 'callback', callback, false, false), false)(J$.T(1056849, null, 25, false), J$.T(1056857, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(1059681, J$e);
                        } finally {
                            if (J$.Fr(1059689))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), J$.T(1056913, 'Multiple authentication is prohibited on a connected client, please only authenticate once per MongoClient', 21, false)));
            J$.P(1057137, J$.G(1056945, J$.R(1056937, 'MongoClient', MongoClient, false, true), 'prototype'), 'close', J$.T(1057129, function (force, callback) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1057089, arguments.callee, this, arguments);
                            arguments = J$.N(1057097, 'arguments', arguments, true, false, false);
                            force = J$.N(1057105, 'force', force, true, false, false);
                            callback = J$.N(1057113, 'callback', callback, true, false, false);
                            J$.N(1057121, 'operation', operation, false, false, false);
                            if (J$.C(64248, J$.B(107658, '===', J$.U(107650, 'typeof', J$.R(1056953, 'force', force, false, false)), J$.T(1056961, 'function', 21, false))))
                                callback = J$.W(1056977, 'callback', J$.R(1056969, 'force', force, false, false), callback, false, false), force = J$.W(1056993, 'force', J$.T(1056985, false, 23, false), force, false, false);
                            var operation = J$.W(1057033, 'operation', J$.F(1057025, J$.R(1057001, 'CloseOperation', CloseOperation, false, true), true)(J$.R(1057009, 'this', this, false, false), J$.R(1057017, 'force', force, false, false)), operation, false, false);
                            return J$.Rt(1057081, J$.F(1057073, J$.R(1057041, 'executeOperation', executeOperation, false, true), false)(J$.R(1057049, 'this', this, false, false), J$.R(1057057, 'operation', operation, false, false), J$.R(1057065, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(1059697, J$e);
                        } finally {
                            if (J$.Fr(1059705))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1057665, J$.G(1057153, J$.R(1057145, 'MongoClient', MongoClient, false, true), 'prototype'), 'db', J$.T(1057657, function (dbName, options) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1057609, arguments.callee, this, arguments);
                            arguments = J$.N(1057617, 'arguments', arguments, true, false, false);
                            dbName = J$.N(1057625, 'dbName', dbName, true, false, false);
                            options = J$.N(1057633, 'options', options, true, false, false);
                            J$.N(1057641, 'finalOptions', finalOptions, false, false, false);
                            J$.N(1057649, 'db', db, false, false, false);
                            options = J$.W(1057177, 'options', J$.C(64256, J$.R(1057161, 'options', options, false, false)) ? J$._() : J$.T(1057169, {}, 11, false), options, false, false);
                            if (J$.C(64264, J$.U(107666, '!', J$.R(1057185, 'dbName', dbName, false, false)))) {
                                dbName = J$.W(1057225, 'dbName', J$.G(1057217, J$.G(1057209, J$.G(1057201, J$.R(1057193, 'this', this, false, false), 's'), 'options'), 'dbName'), dbName, false, false);
                            }
                            var finalOptions = J$.W(1057289, 'finalOptions', J$.M(1057281, J$.I(typeof Object === 'undefined' ? Object = J$.R(1057233, 'Object', undefined, true, true) : Object = J$.R(1057233, 'Object', Object, true, true)), 'assign', false)(J$.T(1057241, {}, 11, false), J$.G(1057265, J$.G(1057257, J$.R(1057249, 'this', this, false, false), 's'), 'options'), J$.R(1057273, 'options', options, false, false)), finalOptions, false, false);
                            if (J$.C(64280, J$.C(64272, J$.M(1057329, J$.G(1057313, J$.G(1057305, J$.R(1057297, 'this', this, false, false), 's'), 'dbCache'), 'has', false)(J$.R(1057321, 'dbName', dbName, false, false))) ? J$.B(107674, '!==', J$.G(1057345, J$.R(1057337, 'finalOptions', finalOptions, false, false), 'returnNonCachedInstance'), J$.T(1057353, true, 23, false)) : J$._())) {
                                return J$.Rt(1057401, J$.M(1057393, J$.G(1057377, J$.G(1057369, J$.R(1057361, 'this', this, false, false), 's'), 'dbCache'), 'get', false)(J$.R(1057385, 'dbName', dbName, false, false)));
                            }
                            J$.P(1057441, J$.R(1057409, 'finalOptions', finalOptions, false, false), 'promiseLibrary', J$.G(1057433, J$.G(1057425, J$.R(1057417, 'this', this, false, false), 's'), 'promiseLibrary'));
                            if (J$.C(64288, J$.U(107682, '!', J$.G(1057457, J$.R(1057449, 'this', this, false, false), 'topology')))) {
                                throw J$.F(1057481, J$.R(1057465, 'MongoError', MongoError, false, true), true)(J$.T(1057473, 'MongoClient must be connected before calling MongoClient.prototype.db', 21, false));
                            }
                            var db = J$.W(1057537, 'db', J$.F(1057529, J$.R(1057489, 'Db', Db, false, true), true)(J$.R(1057497, 'dbName', dbName, false, false), J$.G(1057513, J$.R(1057505, 'this', this, false, false), 'topology'), J$.R(1057521, 'finalOptions', finalOptions, false, false)), db, false, false);
                            J$.M(1057585, J$.G(1057561, J$.G(1057553, J$.R(1057545, 'this', this, false, false), 's'), 'dbCache'), 'set', false)(J$.R(1057569, 'dbName', dbName, false, false), J$.R(1057577, 'db', db, false, false));
                            return J$.Rt(1057601, J$.R(1057593, 'db', db, false, false));
                        } catch (J$e) {
                            J$.Ex(1059713, J$e);
                        } finally {
                            if (J$.Fr(1059721))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1057817, J$.G(1057681, J$.R(1057673, 'MongoClient', MongoClient, false, true), 'prototype'), 'isConnected', J$.T(1057809, function (options) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1057785, arguments.callee, this, arguments);
                            arguments = J$.N(1057793, 'arguments', arguments, true, false, false);
                            options = J$.N(1057801, 'options', options, true, false, false);
                            options = J$.W(1057705, 'options', J$.C(64296, J$.R(1057689, 'options', options, false, false)) ? J$._() : J$.T(1057697, {}, 11, false), options, false, false);
                            if (J$.C(64304, J$.U(107690, '!', J$.G(1057721, J$.R(1057713, 'this', this, false, false), 'topology'))))
                                return J$.Rt(1057737, J$.T(1057729, false, 23, false));
                            return J$.Rt(1057777, J$.M(1057769, J$.G(1057753, J$.R(1057745, 'this', this, false, false), 'topology'), 'isConnected', false)(J$.R(1057761, 'options', options, false, false)));
                        } catch (J$e) {
                            J$.Ex(1059729, J$e);
                        } finally {
                            if (J$.Fr(1059737))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1058177, J$.R(1057825, 'MongoClient', MongoClient, false, true), 'connect', J$.T(1058169, function (url, options, callback) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1058113, arguments.callee, this, arguments);
                            arguments = J$.N(1058121, 'arguments', arguments, true, false, false);
                            url = J$.N(1058129, 'url', url, true, false, false);
                            options = J$.N(1058137, 'options', options, true, false, false);
                            callback = J$.N(1058145, 'callback', callback, true, false, false);
                            J$.N(1058153, 'args', args, false, false, false);
                            J$.N(1058161, 'mongoClient', mongoClient, false, false, false);
                            var args = J$.W(1057881, 'args', J$.M(1057873, J$.G(1057849, J$.G(1057841, J$.I(typeof Array === 'undefined' ? Array = J$.R(1057833, 'Array', undefined, true, true) : Array = J$.R(1057833, 'Array', Array, true, true)), 'prototype'), 'slice'), 'call', false)(J$.I(typeof arguments === 'undefined' ? arguments = J$.R(1057857, 'arguments', undefined, true, true) : arguments = J$.R(1057857, 'arguments', arguments, true, true)), J$.T(1057865, 1, 22, false)), args, false, false);
                            callback = J$.W(1057961, 'callback', J$.C(64312, J$.B(107714, '===', J$.U(107706, 'typeof', J$.G(1057921, J$.R(1057889, 'args', args, false, false), J$.B(107698, '-', J$.G(1057905, J$.R(1057897, 'args', args, false, false), 'length'), J$.T(1057913, 1, 22, false)))), J$.T(1057929, 'function', 21, false))) ? J$.M(1057945, J$.R(1057937, 'args', args, false, false), 'pop', false)() : J$.T(1057953, undefined, 24, false), callback, false, false);
                            options = J$.W(1058009, 'options', J$.C(64320, J$.G(1057977, J$.R(1057969, 'args', args, false, false), 'length')) ? J$.M(1057993, J$.R(1057985, 'args', args, false, false), 'shift', false)() : J$.T(1058001, null, 25, false), options, false, false);
                            options = J$.W(1058033, 'options', J$.C(64328, J$.R(1058017, 'options', options, false, false)) ? J$._() : J$.T(1058025, {}, 11, false), options, false, false);
                            var mongoClient = J$.W(1058073, 'mongoClient', J$.F(1058065, J$.R(1058041, 'MongoClient', MongoClient, false, true), true)(J$.R(1058049, 'url', url, false, false), J$.R(1058057, 'options', options, false, false)), mongoClient, false, false);
                            return J$.Rt(1058105, J$.M(1058097, J$.R(1058081, 'mongoClient', mongoClient, false, false), 'connect', false)(J$.R(1058089, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(1059745, J$e);
                        } finally {
                            if (J$.Fr(1059753))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1058433, J$.G(1058193, J$.R(1058185, 'MongoClient', MongoClient, false, true), 'prototype'), 'startSession', J$.T(1058425, function (options) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1058401, arguments.callee, this, arguments);
                            arguments = J$.N(1058409, 'arguments', arguments, true, false, false);
                            options = J$.N(1058417, 'options', options, true, false, false);
                            options = J$.W(1058241, 'options', J$.M(1058233, J$.I(typeof Object === 'undefined' ? Object = J$.R(1058201, 'Object', undefined, true, true) : Object = J$.R(1058201, 'Object', Object, true, true)), 'assign', false)(J$.T(1058217, { explicit: J$.T(1058209, true, 23, false) }, 11, false), J$.R(1058225, 'options', options, false, false)), options, false, false);
                            if (J$.C(64336, J$.U(107722, '!', J$.G(1058257, J$.R(1058249, 'this', this, false, false), 'topology')))) {
                                throw J$.F(1058281, J$.R(1058265, 'MongoError', MongoError, false, true), true)(J$.T(1058273, 'Must connect to a server before calling this method', 21, false));
                            }
                            if (J$.C(64344, J$.U(107730, '!', J$.M(1058305, J$.G(1058297, J$.R(1058289, 'this', this, false, false), 'topology'), 'hasSessionSupport', false)()))) {
                                throw J$.F(1058329, J$.R(1058313, 'MongoError', MongoError, false, true), true)(J$.T(1058321, 'Current topology does not support sessions', 21, false));
                            }
                            return J$.Rt(1058393, J$.M(1058385, J$.G(1058345, J$.R(1058337, 'this', this, false, false), 'topology'), 'startSession', false)(J$.R(1058353, 'options', options, false, false), J$.G(1058377, J$.G(1058369, J$.R(1058361, 'this', this, false, false), 's'), 'options')));
                        } catch (J$e) {
                            J$.Ex(1059761, J$e);
                        } finally {
                            if (J$.Fr(1059769))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1059161, J$.G(1058449, J$.R(1058441, 'MongoClient', MongoClient, false, true), 'prototype'), 'withSession', J$.T(1059153, function (options, operation) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(1059097, arguments.callee, this, arguments);
                            arguments = J$.N(1059105, 'arguments', arguments, true, false, false);
                            options = J$.N(1059113, 'options', options, true, false, false);
                            operation = J$.N(1059121, 'operation', operation, true, false, false);
                            J$.N(1059129, 'session', session, false, false, false);
                            J$.N(1059137, '_cleanupHandler', _cleanupHandler, false, false, false);
                            J$.N(1059145, 'result', result, false, false, false);
                            if (J$.C(64352, J$.B(107746, '===', J$.U(107738, 'typeof', J$.R(1058457, 'options', options, false, false)), J$.T(1058465, 'function', 21, false))))
                                operation = J$.W(1058481, 'operation', J$.R(1058473, 'options', options, false, false), operation, false, false), options = J$.W(1058497, 'options', J$.T(1058489, undefined, 24, false), options, false, false);
                            var session = J$.W(1058529, 'session', J$.M(1058521, J$.R(1058505, 'this', this, false, false), 'startSession', false)(J$.R(1058513, 'options', options, false, false)), session, false, false);
                            var _cleanupHandler = J$.W(1058777, '_cleanupHandler', J$.T(1058769, function cleanupHandler(err, result, opts) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(1058729, arguments.callee, this, arguments);
                                            arguments = J$.N(1058737, 'arguments', arguments, true, false, false);
                                            err = J$.N(1058745, 'err', err, true, false, false);
                                            result = J$.N(1058753, 'result', result, true, false, false);
                                            opts = J$.N(1058761, 'opts', opts, true, false, false);
                                            _cleanupHandler = J$.W(1058585, '_cleanupHandler', J$.T(1058577, function cleanupHandler() {
                                                jalangiLabel10:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(1058561, arguments.callee, this, arguments);
                                                            arguments = J$.N(1058569, 'arguments', arguments, true, false, false);
                                                            throw J$.F(1058553, J$.I(typeof ReferenceError === 'undefined' ? ReferenceError = J$.R(1058537, 'ReferenceError', undefined, true, true) : ReferenceError = J$.R(1058537, 'ReferenceError', ReferenceError, true, true)), true)(J$.T(1058545, 'cleanupHandler was called too many times', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(1059777, J$e);
                                                        } finally {
                                                            if (J$.Fr(1059785))
                                                                continue jalangiLabel10;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false), _cleanupHandler, false, false);
                                            opts = J$.W(1058633, 'opts', J$.M(1058625, J$.I(typeof Object === 'undefined' ? Object = J$.R(1058593, 'Object', undefined, true, true) : Object = J$.R(1058593, 'Object', Object, true, true)), 'assign', false)(J$.T(1058609, { 'throw': J$.T(1058601, true, 23, false) }, 11, false), J$.R(1058617, 'opts', opts, false, false)), opts, false, false);
                                            J$.M(1058649, J$.R(1058641, 'session', session, false, false), 'endSession', false)();
                                            if (J$.C(64368, J$.R(1058657, 'err', err, false, false))) {
                                                if (J$.C(64360, J$.G(1058681, J$.R(1058665, 'opts', opts, false, false), J$.T(1058673, 'throw', 21, false))))
                                                    throw J$.R(1058689, 'err', err, false, false);
                                                return J$.Rt(1058721, J$.M(1058713, J$.I(typeof Promise === 'undefined' ? Promise = J$.R(1058697, 'Promise', undefined, true, true) : Promise = J$.R(1058697, 'Promise', Promise, true, true)), 'reject', false)(J$.R(1058705, 'err', err, false, false)));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(1059793, J$e);
                                        } finally {
                                            if (J$.Fr(1059801))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), _cleanupHandler, false, false);
                            try {
                                var result = J$.W(1058809, 'result', J$.F(1058801, J$.R(1058785, 'operation', operation, false, false), false)(J$.R(1058793, 'session', session, false, false)), result, false, false);
                                return J$.Rt(1059025, J$.M(1059017, J$.M(1058913, J$.M(1058833, J$.I(typeof Promise === 'undefined' ? Promise = J$.R(1058817, 'Promise', undefined, true, true) : Promise = J$.R(1058817, 'Promise', Promise, true, true)), 'resolve', false)(J$.R(1058825, 'result', result, false, false)), 'then', false)(J$.T(1058905, function (result) {
                                    jalangiLabel12:
                                        while (true) {
                                            try {
                                                J$.Fe(1058881, arguments.callee, this, arguments);
                                                arguments = J$.N(1058889, 'arguments', arguments, true, false, false);
                                                result = J$.N(1058897, 'result', result, true, false, false);
                                                return J$.Rt(1058873, J$.F(1058865, J$.R(1058841, '_cleanupHandler', _cleanupHandler, false, false), false)(J$.T(1058849, null, 25, false), J$.R(1058857, 'result', result, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(1059809, J$e);
                                            } finally {
                                                if (J$.Fr(1059817))
                                                    continue jalangiLabel12;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), J$.T(1058921, 'catch', 21, false), false)(J$.T(1059009, function (err) {
                                    jalangiLabel13:
                                        while (true) {
                                            try {
                                                J$.Fe(1058985, arguments.callee, this, arguments);
                                                arguments = J$.N(1058993, 'arguments', arguments, true, false, false);
                                                err = J$.N(1059001, 'err', err, true, false, false);
                                                return J$.Rt(1058977, J$.F(1058969, J$.R(1058929, '_cleanupHandler', _cleanupHandler, false, false), false)(J$.R(1058937, 'err', err, false, false), J$.T(1058945, null, 25, false), J$.T(1058961, { 'throw': J$.T(1058953, true, 23, false) }, 11, false)));
                                            } catch (J$e) {
                                                J$.Ex(1059825, J$e);
                                            } finally {
                                                if (J$.Fr(1059833))
                                                    continue jalangiLabel13;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)));
                            } catch (err) {
                                J$.N(1059089, 'err', err, false, false, true);
                                return J$.Rt(1059081, J$.F(1059073, J$.R(1059033, '_cleanupHandler', _cleanupHandler, false, false), false)(J$.R(1059041, 'err', err, false, false), J$.T(1059049, null, 25, false), J$.T(1059065, { 'throw': J$.T(1059057, false, 23, false) }, 11, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(1059841, J$e);
                        } finally {
                            if (J$.Fr(1059849))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1059377, J$.G(1059177, J$.R(1059169, 'MongoClient', MongoClient, false, true), 'prototype'), 'watch', J$.T(1059369, function (pipeline, options) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(1059337, arguments.callee, this, arguments);
                            arguments = J$.N(1059345, 'arguments', arguments, true, false, false);
                            pipeline = J$.N(1059353, 'pipeline', pipeline, true, false, false);
                            options = J$.N(1059361, 'options', options, true, false, false);
                            pipeline = J$.W(1059201, 'pipeline', J$.C(64376, J$.R(1059185, 'pipeline', pipeline, false, false)) ? J$._() : J$.T(1059193, [], 10, false), pipeline, false, false);
                            options = J$.W(1059225, 'options', J$.C(64384, J$.R(1059209, 'options', options, false, false)) ? J$._() : J$.T(1059217, {}, 11, false), options, false, false);
                            if (J$.C(64392, J$.U(107754, '!', J$.M(1059249, J$.I(typeof Array === 'undefined' ? Array = J$.R(1059233, 'Array', undefined, true, true) : Array = J$.R(1059233, 'Array', Array, true, true)), 'isArray', false)(J$.R(1059241, 'pipeline', pipeline, false, false))))) {
                                options = J$.W(1059265, 'options', J$.R(1059257, 'pipeline', pipeline, false, false), options, false, false);
                                pipeline = J$.W(1059281, 'pipeline', J$.T(1059273, [], 10, false), pipeline, false, false);
                            }
                            return J$.Rt(1059329, J$.F(1059321, J$.R(1059289, 'ChangeStream', ChangeStream, false, true), true)(J$.R(1059297, 'this', this, false, false), J$.R(1059305, 'pipeline', pipeline, false, false), J$.R(1059313, 'options', options, false, false)));
                        } catch (J$e) {
                            J$.Ex(1059857, J$e);
                        } finally {
                            if (J$.Fr(1059865))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1059465, J$.G(1059393, J$.R(1059385, 'MongoClient', MongoClient, false, true), 'prototype'), 'getLogger', J$.T(1059457, function () {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(1059441, arguments.callee, this, arguments);
                            arguments = J$.N(1059449, 'arguments', arguments, true, false, false);
                            return J$.Rt(1059433, J$.G(1059425, J$.G(1059417, J$.G(1059409, J$.R(1059401, 'this', this, false, false), 's'), 'options'), 'logger'));
                        } catch (J$e) {
                            J$.Ex(1059873, J$e);
                        } finally {
                            if (J$.Fr(1059881))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1059489, J$.I(typeof module === 'undefined' ? module = J$.R(1059473, 'module', undefined, true, true) : module = J$.R(1059473, 'module', module, true, true)), 'exports', J$.R(1059481, 'MongoClient', MongoClient, false, true));
        } catch (J$e) {
            J$.Ex(1059889, J$e);
        } finally {
            if (J$.Sr(1059897))
                continue jalangiLabel17;
            else
                break jalangiLabel17;
        }
    }
// JALANGI DO NOT INSTRUMENT

