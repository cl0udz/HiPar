J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(947921, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/mongodb/lib/core/wireprotocol/compression.js');
            J$.N(947929, 'Snappy', Snappy, false, false, false);
            J$.N(947937, 'zlib', zlib, false, false, false);
            J$.N(947945, 'compressorIDs', compressorIDs, false, false, false);
            J$.N(947953, 'uncompressibleCommands', uncompressibleCommands, false, false, false);
            J$.N(947961, 'compress', compress, false, false, false);
            J$.N(947969, 'decompress', decompress, false, false, false);
            J$.T(947073, 'use strict', 21, false);
            var Snappy = J$.W(947137, 'Snappy', J$.M(947105, J$.F(947097, J$.I(typeof require === 'undefined' ? require = J$.R(947081, 'require', undefined, true, true) : require = J$.R(947081, 'require', require, true, true)), false)(J$.T(947089, '../connection/utils', 21, false)), 'retrieveSnappy', false)(), Snappy, false, true), zlib = J$.W(947145, 'zlib', J$.F(947129, J$.I(typeof require === 'undefined' ? require = J$.R(947113, 'require', undefined, true, true) : require = J$.R(947113, 'require', require, true, true)), false)(J$.T(947121, 'zlib', 21, false)), zlib, false, true);
            var compressorIDs = J$.W(947177, 'compressorIDs', J$.T(947169, {
                snappy: J$.T(947153, 1, 22, false),
                zlib: J$.T(947161, 2, 22, false)
            }, 11, false), compressorIDs, false, true);
            var uncompressibleCommands = J$.W(947273, 'uncompressibleCommands', J$.T(947265, [
                J$.T(947185, 'ismaster', 21, false),
                J$.T(947193, 'saslStart', 21, false),
                J$.T(947201, 'saslContinue', 21, false),
                J$.T(947209, 'getnonce', 21, false),
                J$.T(947217, 'authenticate', 21, false),
                J$.T(947225, 'createUser', 21, false),
                J$.T(947233, 'updateUser', 21, false),
                J$.T(947241, 'copydbSaslStart', 21, false),
                J$.T(947249, 'copydbgetnonce', 21, false),
                J$.T(947257, 'copydb', 21, false)
            ], 10, false), uncompressibleCommands, false, true);
            var compress = J$.W(947585, 'compress', J$.T(947577, function compress(self, dataToBeCompressed, callback) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(947529, arguments.callee, this, arguments);
                            arguments = J$.N(947537, 'arguments', arguments, true, false, false);
                            self = J$.N(947545, 'self', self, true, false, false);
                            dataToBeCompressed = J$.N(947553, 'dataToBeCompressed', dataToBeCompressed, true, false, false);
                            callback = J$.N(947561, 'callback', callback, true, false, false);
                            J$.N(947569, 'zlibOptions', zlibOptions, false, false, false);
                            switch (J$.C1(56976, J$.G(947297, J$.G(947289, J$.R(947281, 'self', self, false, false), 'options'), 'agreedCompressor'))) {
                            case J$.C2(56984, J$.T(947337, 'snappy', 21, false)):
                                J$.M(947329, J$.R(947305, 'Snappy', Snappy, false, true), 'compress', false)(J$.R(947313, 'dataToBeCompressed', dataToBeCompressed, false, false), J$.R(947321, 'callback', callback, false, false));
                                break;
                            case J$.C2(56992, J$.T(947465, 'zlib', 21, false)):
                                var zlibOptions = J$.W(947353, 'zlibOptions', J$.T(947345, {}, 11, false), zlibOptions, false, false);
                                if (J$.C(56968, J$.G(947377, J$.G(947369, J$.R(947361, 'self', self, false, false), 'options'), 'zlibCompressionLevel'))) {
                                    J$.P(947417, J$.R(947385, 'zlibOptions', zlibOptions, false, false), 'level', J$.G(947409, J$.G(947401, J$.R(947393, 'self', self, false, false), 'options'), 'zlibCompressionLevel'));
                                }
                                J$.M(947457, J$.R(947425, 'zlib', zlib, false, true), 'deflate', false)(J$.R(947433, 'dataToBeCompressed', dataToBeCompressed, false, false), J$.R(947441, 'zlibOptions', zlibOptions, false, false), J$.R(947449, 'callback', callback, false, false));
                                break;
                            default:
                                throw J$.F(947521, J$.I(typeof Error === 'undefined' ? Error = J$.R(947473, 'Error', undefined, true, true) : Error = J$.R(947473, 'Error', Error, true, true)), true)(J$.B(100594, '+', J$.B(100586, '+', J$.T(947481, 'Attempt to compress message using unknown compressor "', 21, false), J$.G(947505, J$.G(947497, J$.R(947489, 'self', self, false, false), 'options'), 'agreedCompressor')), J$.T(947513, '".', 21, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(947977, J$e);
                        } finally {
                            if (J$.Fr(947985))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), compress, false, true);
            var decompress = J$.W(947857, 'decompress', J$.T(947849, function decompress(compressorID, compressedData, callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(947809, arguments.callee, this, arguments);
                            arguments = J$.N(947817, 'arguments', arguments, true, false, false);
                            compressorID = J$.N(947825, 'compressorID', compressorID, true, false, false);
                            compressedData = J$.N(947833, 'compressedData', compressedData, true, false, false);
                            callback = J$.N(947841, 'callback', callback, true, false, false);
                            if (J$.C(57008, J$.C(57000, J$.B(100602, '<', J$.R(947593, 'compressorID', compressorID, false, false), J$.T(947601, 0, 22, false))) ? J$._() : J$.B(100610, '>', J$.R(947609, 'compressorID', compressorID, false, false), J$.G(947625, J$.R(947617, 'compressorIDs', compressorIDs, false, true), 'length')))) {
                                throw J$.F(947665, J$.I(typeof Error === 'undefined' ? Error = J$.R(947633, 'Error', undefined, true, true) : Error = J$.R(947633, 'Error', Error, true, true)), true)(J$.B(100626, '+', J$.B(100618, '+', J$.T(947641, 'Server sent message compressed using an unsupported compressor. (Received compressor ID ', 21, false), J$.R(947649, 'compressorID', compressorID, false, false)), J$.T(947657, ')', 21, false)));
                            }
                            switch (J$.C1(57016, J$.R(947673, 'compressorID', compressorID, false, false))) {
                            case J$.C2(57024, J$.G(947721, J$.R(947713, 'compressorIDs', compressorIDs, false, true), 'snappy')):
                                J$.M(947705, J$.R(947681, 'Snappy', Snappy, false, true), 'uncompress', false)(J$.R(947689, 'compressedData', compressedData, false, false), J$.R(947697, 'callback', callback, false, false));
                                break;
                            case J$.C2(57032, J$.G(947769, J$.R(947761, 'compressorIDs', compressorIDs, false, true), 'zlib')):
                                J$.M(947753, J$.R(947729, 'zlib', zlib, false, true), 'inflate', false)(J$.R(947737, 'compressedData', compressedData, false, false), J$.R(947745, 'callback', callback, false, false));
                                break;
                            default:
                                J$.F(947801, J$.R(947777, 'callback', callback, false, false), false)(J$.T(947785, null, 25, false), J$.R(947793, 'compressedData', compressedData, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(947993, J$e);
                        } finally {
                            if (J$.Fr(948001))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), decompress, false, true);
            J$.P(947913, J$.I(typeof module === 'undefined' ? module = J$.R(947865, 'module', undefined, true, true) : module = J$.R(947865, 'module', module, true, true)), 'exports', J$.T(947905, {
                compressorIDs: J$.R(947873, 'compressorIDs', compressorIDs, false, true),
                uncompressibleCommands: J$.R(947881, 'uncompressibleCommands', uncompressibleCommands, false, true),
                compress: J$.R(947889, 'compress', compress, false, true),
                decompress: J$.R(947897, 'decompress', decompress, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(948009, J$e);
        } finally {
            if (J$.Sr(948017))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

