J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(727377, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/mongodb/lib/core/connection/utils.js');
            function debugOptions(debugFields, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(726889, arguments.callee, this, arguments);
                            arguments = J$.N(726897, 'arguments', arguments, true, false, false);
                            debugFields = J$.N(726905, 'debugFields', debugFields, true, false, false);
                            options = J$.N(726913, 'options', options, true, false, false);
                            J$.N(726921, 'finaloptions', finaloptions, false, false, false);
                            var finaloptions = J$.W(726769, 'finaloptions', J$.T(726761, {}, 11, false), finaloptions, false, false);
                            J$.M(726865, J$.R(726777, 'debugFields', debugFields, false, false), 'forEach', false)(J$.T(726857, function (n) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(726833, arguments.callee, this, arguments);
                                            arguments = J$.N(726841, 'arguments', arguments, true, false, false);
                                            n = J$.N(726849, 'n', n, true, false, false);
                                            J$.P(726825, J$.R(726785, 'finaloptions', finaloptions, false, false), J$.R(726793, 'n', n, false, false), J$.G(726817, J$.R(726801, 'options', options, false, false), J$.R(726809, 'n', n, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(727457, J$e);
                                        } finally {
                                            if (J$.Fr(727465))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(726881, J$.R(726873, 'finaloptions', finaloptions, false, false));
                        } catch (J$e) {
                            J$.Ex(727473, J$e);
                        } finally {
                            if (J$.Fr(727481))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function retrieveBSON() {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(727105, arguments.callee, this, arguments);
                            arguments = J$.N(727113, 'arguments', arguments, true, false, false);
                            J$.N(727121, 'BSON', BSON, false, false, false);
                            J$.N(727129, 'optionalBSON', optionalBSON, false, false, false);
                            var BSON = J$.W(726953, 'BSON', J$.F(726945, J$.I(typeof require === 'undefined' ? require = J$.R(726929, 'require', undefined, true, true) : require = J$.R(726929, 'require', require, true, true)), false)(J$.T(726937, 'bson', 21, false)), BSON, false, false);
                            J$.P(726985, J$.R(726961, 'BSON', BSON, false, false), J$.T(726969, 'native', 21, false), J$.T(726977, false, 23, false));
                            try {
                                var optionalBSON = J$.W(727017, 'optionalBSON', J$.F(727009, J$.R(726993, 'require_optional', require_optional, false, true), false)(J$.T(727001, 'bson-ext', 21, false)), optionalBSON, false, false);
                                if (J$.C(41824, J$.R(727025, 'optionalBSON', optionalBSON, false, false))) {
                                    J$.P(727057, J$.R(727033, 'optionalBSON', optionalBSON, false, false), J$.T(727041, 'native', 21, false), J$.T(727049, true, 23, false));
                                    return J$.Rt(727073, J$.R(727065, 'optionalBSON', optionalBSON, false, false));
                                }
                            } catch (err) {
                                J$.N(727081, 'err', err, false, false, true);
                            }
                            return J$.Rt(727097, J$.R(727089, 'BSON', BSON, false, false));
                        } catch (J$e) {
                            J$.Ex(727489, J$e);
                        } finally {
                            if (J$.Fr(727497))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function noSnappyWarning() {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(727161, arguments.callee, this, arguments);
                            arguments = J$.N(727169, 'arguments', arguments, true, false, false);
                            throw J$.F(727153, J$.I(typeof Error === 'undefined' ? Error = J$.R(727137, 'Error', undefined, true, true) : Error = J$.R(727137, 'Error', Error, true, true)), true)(J$.T(727145, 'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.', 21, false));
                        } catch (J$e) {
                            J$.Ex(727505, J$e);
                        } finally {
                            if (J$.Fr(727513))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function retrieveSnappy() {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(727305, arguments.callee, this, arguments);
                            arguments = J$.N(727313, 'arguments', arguments, true, false, false);
                            J$.N(727321, 'snappy', snappy, false, false, false);
                            var snappy = J$.W(727185, 'snappy', J$.T(727177, null, 25, false), snappy, false, false);
                            try {
                                snappy = J$.W(727217, 'snappy', J$.F(727209, J$.R(727193, 'require_optional', require_optional, false, true), false)(J$.T(727201, 'snappy', 21, false)), snappy, false, false);
                            } catch (error) {
                                J$.N(727225, 'error', error, false, false, true);
                            }
                            if (J$.C(41832, J$.U(87674, '!', J$.R(727233, 'snappy', snappy, false, false)))) {
                                snappy = J$.W(727281, 'snappy', J$.T(727273, {
                                    compress: J$.R(727241, 'noSnappyWarning', noSnappyWarning, false, true),
                                    uncompress: J$.R(727249, 'noSnappyWarning', noSnappyWarning, false, true),
                                    compressSync: J$.R(727257, 'noSnappyWarning', noSnappyWarning, false, true),
                                    uncompressSync: J$.R(727265, 'noSnappyWarning', noSnappyWarning, false, true)
                                }, 11, false), snappy, false, false);
                            }
                            return J$.Rt(727297, J$.R(727289, 'snappy', snappy, false, false));
                        } catch (J$e) {
                            J$.Ex(727521, J$e);
                        } finally {
                            if (J$.Fr(727529))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(727385, 'require_optional', require_optional, false, false, false);
            debugOptions = J$.N(727401, 'debugOptions', J$.T(727393, debugOptions, 12, false), true, false, false);
            retrieveBSON = J$.N(727417, 'retrieveBSON', J$.T(727409, retrieveBSON, 12, false), true, false, false);
            noSnappyWarning = J$.N(727433, 'noSnappyWarning', J$.T(727425, noSnappyWarning, 12, false), true, false, false);
            retrieveSnappy = J$.N(727449, 'retrieveSnappy', J$.T(727441, retrieveSnappy, 12, false), true, false, false);
            J$.T(726721, 'use strict', 21, false);
            var require_optional = J$.W(726753, 'require_optional', J$.F(726745, J$.I(typeof require === 'undefined' ? require = J$.R(726729, 'require', undefined, true, true) : require = J$.R(726729, 'require', require, true, true)), false)(J$.T(726737, 'require_optional', 21, false)), require_optional, false, true);
            J$.P(727369, J$.I(typeof module === 'undefined' ? module = J$.R(727329, 'module', undefined, true, true) : module = J$.R(727329, 'module', module, true, true)), 'exports', J$.T(727361, {
                debugOptions: J$.R(727337, 'debugOptions', debugOptions, false, true),
                retrieveBSON: J$.R(727345, 'retrieveBSON', retrieveBSON, false, true),
                retrieveSnappy: J$.R(727353, 'retrieveSnappy', retrieveSnappy, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(727537, J$e);
        } finally {
            if (J$.Sr(727545))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

