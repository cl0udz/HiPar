J$.noInstrEval = false;
jalangiLabel24:
    while (true) {
        try {
            J$.Se(940505, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/mongodb/lib/core/uri_parser.js');
            function matchesParentDomain(srvAddress, parentDomain) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(929817, arguments.callee, this, arguments);
                            arguments = J$.N(929825, 'arguments', arguments, true, false, false);
                            srvAddress = J$.N(929833, 'srvAddress', srvAddress, true, false, false);
                            parentDomain = J$.N(929841, 'parentDomain', parentDomain, true, false, false);
                            J$.N(929849, 'regex', regex, false, false, false);
                            J$.N(929857, 'srv', srv, false, false, false);
                            J$.N(929865, 'parent', parent, false, false, false);
                            var regex = J$.W(929665, 'regex', J$.T(929657, /^.*?\./, 14, false), regex, false, false);
                            var srv = J$.W(929721, 'srv', J$.M(929713, J$.T(929673, '.', 21, false), 'concat', false)(J$.M(929705, J$.R(929681, 'srvAddress', srvAddress, false, false), 'replace', false)(J$.R(929689, 'regex', regex, false, false), J$.T(929697, '', 21, false))), srv, false, false);
                            var parent = J$.W(929777, 'parent', J$.M(929769, J$.T(929729, '.', 21, false), 'concat', false)(J$.M(929761, J$.R(929737, 'parentDomain', parentDomain, false, false), 'replace', false)(J$.R(929745, 'regex', regex, false, false), J$.T(929753, '', 21, false))), parent, false, false);
                            return J$.Rt(929809, J$.M(929801, J$.R(929785, 'srv', srv, false, false), 'endsWith', false)(J$.R(929793, 'parent', parent, false, false)));
                        } catch (J$e) {
                            J$.Ex(940785, J$e);
                        } finally {
                            if (J$.Fr(940793))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseSrvConnectionString(uri, options, callback) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(931705, arguments.callee, this, arguments);
                            arguments = J$.N(931713, 'arguments', arguments, true, false, false);
                            uri = J$.N(931721, 'uri', uri, true, false, false);
                            options = J$.N(931729, 'options', options, true, false, false);
                            callback = J$.N(931737, 'callback', callback, true, false, false);
                            J$.N(931745, 'result', result, false, false, false);
                            J$.N(931753, 'lookupAddress', lookupAddress, false, false, false);
                            var result = J$.W(929905, 'result', J$.M(929897, J$.R(929873, 'URL', URL, false, true), 'parse', false)(J$.R(929881, 'uri', uri, false, false), J$.T(929889, true, 23, false)), result, false, false);
                            if (J$.C(55552, J$.B(99346, '<', J$.G(929945, J$.M(929937, J$.G(929921, J$.R(929913, 'result', result, false, false), 'hostname'), 'split', false)(J$.T(929929, '.', 21, false)), 'length'), J$.T(929953, 3, 22, false)))) {
                                return J$.Rt(930001, J$.F(929993, J$.R(929961, 'callback', callback, false, false), false)(J$.F(929985, J$.R(929969, 'MongoParseError', MongoParseError, false, true), true)(J$.T(929977, 'URI does not have hostname, domain name and tld', 21, false))));
                            }
                            J$.P(930057, J$.R(930009, 'result', result, false, false), 'domainLength', J$.G(930049, J$.M(930041, J$.G(930025, J$.R(930017, 'result', result, false, false), 'hostname'), 'split', false)(J$.T(930033, '.', 21, false)), 'length'));
                            if (J$.C(55568, J$.C(55560, J$.G(930073, J$.R(930065, 'result', result, false, false), 'pathname')) ? J$.M(930105, J$.G(930089, J$.R(930081, 'result', result, false, false), 'pathname'), 'match', false)(J$.T(930097, ',', 21, false)) : J$._())) {
                                return J$.Rt(930153, J$.F(930145, J$.R(930113, 'callback', callback, false, false), false)(J$.F(930137, J$.R(930121, 'MongoParseError', MongoParseError, false, true), true)(J$.T(930129, 'Invalid URI, cannot contain multiple hostnames', 21, false))));
                            }
                            if (J$.C(55576, J$.G(930169, J$.R(930161, 'result', result, false, false), 'port'))) {
                                return J$.Rt(930241, J$.F(930233, J$.R(930177, 'callback', callback, false, false), false)(J$.F(930225, J$.R(930185, 'MongoParseError', MongoParseError, false, true), true)(J$.M(930217, J$.T(930193, 'Ports not accepted with \'', 21, false), 'concat', false)(J$.R(930201, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true), J$.T(930209, '\' URIs', 21, false)))));
                            }
                            var lookupAddress = J$.W(930265, 'lookupAddress', J$.G(930257, J$.R(930249, 'result', result, false, false), 'host'), lookupAddress, false, false);
                            J$.M(931697, J$.R(930273, 'dns', dns, false, true), 'resolveSrv', false)(J$.M(930297, J$.T(930281, '_mongodb._tcp.', 21, false), 'concat', false)(J$.R(930289, 'lookupAddress', lookupAddress, false, false)), J$.T(931689, function (err, addresses) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(931649, arguments.callee, this, arguments);
                                            arguments = J$.N(931657, 'arguments', arguments, true, false, false);
                                            err = J$.N(931665, 'err', err, true, false, false);
                                            addresses = J$.N(931673, 'addresses', addresses, true, false, false);
                                            J$.N(931681, 'i', i, false, false, false);
                                            if (J$.C(55584, J$.R(930305, 'err', err, false, false)))
                                                return J$.Rt(930337, J$.F(930329, J$.R(930313, 'callback', callback, false, false), false)(J$.R(930321, 'err', err, false, false)));
                                            if (J$.C(55592, J$.B(99354, '===', J$.G(930353, J$.R(930345, 'addresses', addresses, false, false), 'length'), J$.T(930361, 0, 22, false)))) {
                                                return J$.Rt(930409, J$.F(930401, J$.R(930369, 'callback', callback, false, false), false)(J$.F(930393, J$.R(930377, 'MongoParseError', MongoParseError, false, true), true)(J$.T(930385, 'No addresses found at host', 21, false))));
                                            }
                                            for (var i = J$.W(930425, 'i', J$.T(930417, 0, 22, false), i, false, false); J$.C(55608, J$.B(99362, '<', J$.R(930433, 'i', i, false, false), J$.G(930449, J$.R(930441, 'addresses', addresses, false, false), 'length'))); J$.B(99386, '-', i = J$.W(930465, 'i', J$.B(99378, '+', J$.U(99370, '+', J$.R(930457, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                if (J$.C(55600, J$.U(99394, '!', J$.F(930545, J$.R(930473, 'matchesParentDomain', matchesParentDomain, false, true), false)(J$.G(930505, J$.G(930497, J$.R(930481, 'addresses', addresses, false, false), J$.R(930489, 'i', i, false, false)), 'name'), J$.G(930521, J$.R(930513, 'result', result, false, false), 'hostname'), J$.G(930537, J$.R(930529, 'result', result, false, false), 'domainLength'))))) {
                                                    return J$.Rt(930593, J$.F(930585, J$.R(930553, 'callback', callback, false, false), false)(J$.F(930577, J$.R(930561, 'MongoParseError', MongoParseError, false, true), true)(J$.T(930569, 'Server record does not share hostname with parent URI', 21, false))));
                                                }
                                            }
                                            J$.P(930617, J$.R(930601, 'result', result, false, false), 'protocol', J$.T(930609, 'mongodb', 21, false));
                                            J$.P(930769, J$.R(930625, 'result', result, false, false), 'host', J$.M(930761, J$.M(930745, J$.R(930633, 'addresses', addresses, false, false), 'map', false)(J$.T(930737, function (address) {
                                                jalangiLabel1:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(930713, arguments.callee, this, arguments);
                                                            arguments = J$.N(930721, 'arguments', arguments, true, false, false);
                                                            address = J$.N(930729, 'address', address, true, false, false);
                                                            return J$.Rt(930705, J$.M(930697, J$.M(930673, J$.T(930641, '', 21, false), 'concat', false)(J$.G(930657, J$.R(930649, 'address', address, false, false), 'name'), J$.T(930665, ':', 21, false)), 'concat', false)(J$.G(930689, J$.R(930681, 'address', address, false, false), 'port')));
                                                        } catch (J$e) {
                                                            J$.Ex(940801, J$e);
                                                        } finally {
                                                            if (J$.Fr(940809))
                                                                continue jalangiLabel1;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false)), 'join', false)(J$.T(930753, ',', 21, false)));
                                            if (J$.C(55640, J$.C(55632, J$.U(99410, '!', J$.B(99402, 'in', J$.T(930777, 'ssl', 21, false), J$.R(930785, 'options', options, false, false)))) ? J$.C(55624, J$.C(55616, J$.U(99418, '!', J$.G(930801, J$.R(930793, 'result', result, false, false), 'search'))) ? J$._() : J$.U(99434, '!', J$.B(99426, 'in', J$.T(930809, 'ssl', 21, false), J$.G(930825, J$.R(930817, 'result', result, false, false), 'query')))) ? J$._() : J$.B(99442, '===', J$.G(930849, J$.G(930841, J$.R(930833, 'result', result, false, false), 'query'), 'ssl'), J$.T(930857, null, 25, false)) : J$._())) {
                                                J$.P(930889, J$.G(930873, J$.R(930865, 'result', result, false, false), 'query'), 'ssl', J$.T(930881, true, 23, false));
                                            }
                                            J$.M(931641, J$.R(930897, 'dns', dns, false, true), 'resolveTxt', false)(J$.R(930905, 'lookupAddress', lookupAddress, false, false), J$.T(931633, function (err, record) {
                                                jalangiLabel4:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(931593, arguments.callee, this, arguments);
                                                            arguments = J$.N(931601, 'arguments', arguments, true, false, false);
                                                            err = J$.N(931609, 'err', err, true, false, false);
                                                            record = J$.N(931617, 'record', record, true, false, false);
                                                            J$.N(931625, 'finalString', finalString, false, false, false);
                                                            if (J$.C(55656, J$.R(930913, 'err', err, false, false))) {
                                                                if (J$.C(55648, J$.B(99450, '!==', J$.G(930929, J$.R(930921, 'err', err, false, false), 'code'), J$.T(930937, 'ENODATA', 21, false)))) {
                                                                    return J$.Rt(930969, J$.F(930961, J$.R(930945, 'callback', callback, false, false), false)(J$.R(930953, 'err', err, false, false)));
                                                                }
                                                                record = J$.W(930985, 'record', J$.T(930977, null, 25, false), record, false, false);
                                                            }
                                                            if (J$.C(55688, J$.R(930993, 'record', record, false, false))) {
                                                                if (J$.C(55664, J$.B(99458, '>', J$.G(931009, J$.R(931001, 'record', record, false, false), 'length'), J$.T(931017, 1, 22, false)))) {
                                                                    return J$.Rt(931065, J$.F(931057, J$.R(931025, 'callback', callback, false, false), false)(J$.F(931049, J$.R(931033, 'MongoParseError', MongoParseError, false, true), true)(J$.T(931041, 'Multiple text records not allowed', 21, false))));
                                                                }
                                                                record = J$.W(931129, 'record', J$.M(931121, J$.R(931073, 'qs', qs, false, true), 'parse', false)(J$.M(931113, J$.G(931097, J$.R(931081, 'record', record, false, false), J$.T(931089, 0, 22, false)), 'join', false)(J$.T(931105, '', 21, false))), record, false, false);
                                                                if (J$.C(55680, J$.M(931233, J$.M(931153, J$.I(typeof Object === 'undefined' ? Object = J$.R(931137, 'Object', undefined, true, true) : Object = J$.R(931137, 'Object', Object, true, true)), 'keys', false)(J$.R(931145, 'record', record, false, false)), 'some', false)(J$.T(931225, function (key) {
                                                                        jalangiLabel2:
                                                                            while (true) {
                                                                                try {
                                                                                    J$.Fe(931201, arguments.callee, this, arguments);
                                                                                    arguments = J$.N(931209, 'arguments', arguments, true, false, false);
                                                                                    key = J$.N(931217, 'key', key, true, false, false);
                                                                                    return J$.Rt(931193, J$.C(55672, J$.B(99466, '!==', J$.R(931161, 'key', key, false, false), J$.T(931169, 'authSource', 21, false))) ? J$.B(99474, '!==', J$.R(931177, 'key', key, false, false), J$.T(931185, 'replicaSet', 21, false)) : J$._());
                                                                                } catch (J$e) {
                                                                                    J$.Ex(940817, J$e);
                                                                                } finally {
                                                                                    if (J$.Fr(940825))
                                                                                        continue jalangiLabel2;
                                                                                    else
                                                                                        return J$.Ra();
                                                                                }
                                                                            }
                                                                    }, 12, false)))) {
                                                                    return J$.Rt(931281, J$.F(931273, J$.R(931241, 'callback', callback, false, false), false)(J$.F(931265, J$.R(931249, 'MongoParseError', MongoParseError, false, true), true)(J$.T(931257, 'Text record must only set `authSource` or `replicaSet`', 21, false))));
                                                                }
                                                                J$.M(931321, J$.I(typeof Object === 'undefined' ? Object = J$.R(931289, 'Object', undefined, true, true) : Object = J$.R(931289, 'Object', Object, true, true)), 'assign', false)(J$.G(931305, J$.R(931297, 'result', result, false, false), 'query'), J$.R(931313, 'record', record, false, false));
                                                            }
                                                            J$.P(931369, J$.R(931329, 'result', result, false, false), 'search', J$.M(931361, J$.R(931337, 'qs', qs, false, true), 'stringify', false)(J$.G(931353, J$.R(931345, 'result', result, false, false), 'query')));
                                                            var finalString = J$.W(931401, 'finalString', J$.M(931393, J$.R(931377, 'URL', URL, false, true), 'format', false)(J$.R(931385, 'result', result, false, false)), finalString, false, false);
                                                            J$.F(931585, J$.R(931409, 'parseConnectionString', parseConnectionString, false, true), false)(J$.R(931417, 'finalString', finalString, false, false), J$.R(931425, 'options', options, false, false), J$.T(931577, function (err, ret) {
                                                                jalangiLabel3:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(931545, arguments.callee, this, arguments);
                                                                            arguments = J$.N(931553, 'arguments', arguments, true, false, false);
                                                                            err = J$.N(931561, 'err', err, true, false, false);
                                                                            ret = J$.N(931569, 'ret', ret, true, false, false);
                                                                            if (J$.C(55696, J$.R(931433, 'err', err, false, false))) {
                                                                                J$.F(931457, J$.R(931441, 'callback', callback, false, false), false)(J$.R(931449, 'err', err, false, false));
                                                                                return J$.Rt(931465, undefined);
                                                                            }
                                                                            J$.F(931537, J$.R(931473, 'callback', callback, false, false), false)(J$.T(931481, null, 25, false), J$.M(931529, J$.I(typeof Object === 'undefined' ? Object = J$.R(931489, 'Object', undefined, true, true) : Object = J$.R(931489, 'Object', Object, true, true)), 'assign', false)(J$.T(931497, {}, 11, false), J$.R(931505, 'ret', ret, false, false), J$.T(931521, { srvHost: J$.R(931513, 'lookupAddress', lookupAddress, false, false) }, 11, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(940833, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(940841))
                                                                                continue jalangiLabel3;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false));
                                                        } catch (J$e) {
                                                            J$.Ex(940849, J$e);
                                                        } finally {
                                                            if (J$.Fr(940857))
                                                                continue jalangiLabel4;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(940865, J$e);
                                        } finally {
                                            if (J$.Fr(940873))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(940881, J$e);
                        } finally {
                            if (J$.Fr(940889))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQueryStringItemValue(key, value) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(932585, arguments.callee, this, arguments);
                            arguments = J$.N(932593, 'arguments', arguments, true, false, false);
                            key = J$.N(932601, 'key', key, true, false, false);
                            value = J$.N(932609, 'value', value, true, false, false);
                            J$.N(932617, 'numericValue', numericValue, false, false, false);
                            if (J$.C(55768, J$.M(931777, J$.I(typeof Array === 'undefined' ? Array = J$.R(931761, 'Array', undefined, true, true) : Array = J$.R(931761, 'Array', Array, true, true)), 'isArray', false)(J$.R(931769, 'value', value, false, false)))) {
                                value = J$.W(931881, 'value', J$.M(931873, J$.R(931785, 'value', value, false, false), 'filter', false)(J$.T(931865, function (v, idx) {
                                    jalangiLabel7:
                                        while (true) {
                                            try {
                                                J$.Fe(931833, arguments.callee, this, arguments);
                                                arguments = J$.N(931841, 'arguments', arguments, true, false, false);
                                                v = J$.N(931849, 'v', v, true, false, false);
                                                idx = J$.N(931857, 'idx', idx, true, false, false);
                                                return J$.Rt(931825, J$.B(99482, '===', J$.M(931809, J$.R(931793, 'value', value, false, false), 'indexOf', false)(J$.R(931801, 'v', v, false, false)), J$.R(931817, 'idx', idx, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(940897, J$e);
                                            } finally {
                                                if (J$.Fr(940905))
                                                    continue jalangiLabel7;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), value, false, false);
                                if (J$.C(55704, J$.B(99490, '===', J$.G(931897, J$.R(931889, 'value', value, false, false), 'length'), J$.T(931905, 1, 22, false))))
                                    value = J$.W(931937, 'value', J$.G(931929, J$.R(931913, 'value', value, false, false), J$.T(931921, 0, 22, false)), value, false, false);
                            } else if (J$.C(55760, J$.B(99498, '>', J$.M(931961, J$.R(931945, 'value', value, false, false), 'indexOf', false)(J$.T(931953, ':', 21, false)), J$.T(931969, 0, 22, false)))) {
                                value = J$.W(932201, 'value', J$.M(932193, J$.M(931993, J$.R(931977, 'value', value, false, false), 'split', false)(J$.T(931985, ',', 21, false)), 'reduce', false)(J$.T(932177, function (result, pair) {
                                    jalangiLabel8:
                                        while (true) {
                                            try {
                                                J$.Fe(932137, arguments.callee, this, arguments);
                                                arguments = J$.N(932145, 'arguments', arguments, true, false, false);
                                                result = J$.N(932153, 'result', result, true, false, false);
                                                pair = J$.N(932161, 'pair', pair, true, false, false);
                                                J$.N(932169, 'parts', parts, false, false, false);
                                                var parts = J$.W(932025, 'parts', J$.M(932017, J$.R(932001, 'pair', pair, false, false), 'split', false)(J$.T(932009, ':', 21, false)), parts, false, false);
                                                J$.P(932113, J$.R(932033, 'result', result, false, false), J$.G(932057, J$.R(932041, 'parts', parts, false, false), J$.T(932049, 0, 22, false)), J$.F(932105, J$.R(932065, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(932073, 'key', key, false, false), J$.G(932097, J$.R(932081, 'parts', parts, false, false), J$.T(932089, 1, 22, false))));
                                                return J$.Rt(932129, J$.R(932121, 'result', result, false, false));
                                            } catch (J$e) {
                                                J$.Ex(940913, J$e);
                                            } finally {
                                                if (J$.Fr(940921))
                                                    continue jalangiLabel8;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), J$.T(932185, {}, 11, false)), value, false, false);
                            } else if (J$.C(55752, J$.B(99506, '>', J$.M(932225, J$.R(932209, 'value', value, false, false), 'indexOf', false)(J$.T(932217, ',', 21, false)), J$.T(932233, 0, 22, false)))) {
                                value = J$.W(932345, 'value', J$.M(932337, J$.M(932257, J$.R(932241, 'value', value, false, false), 'split', false)(J$.T(932249, ',', 21, false)), 'map', false)(J$.T(932329, function (v) {
                                    jalangiLabel9:
                                        while (true) {
                                            try {
                                                J$.Fe(932305, arguments.callee, this, arguments);
                                                arguments = J$.N(932313, 'arguments', arguments, true, false, false);
                                                v = J$.N(932321, 'v', v, true, false, false);
                                                return J$.Rt(932297, J$.F(932289, J$.R(932265, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(932273, 'key', key, false, false), J$.R(932281, 'v', v, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(940929, J$e);
                                            } finally {
                                                if (J$.Fr(940937))
                                                    continue jalangiLabel9;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), value, false, false);
                            } else if (J$.C(55744, J$.C(55712, J$.B(99514, '===', J$.M(932361, J$.R(932353, 'value', value, false, false), 'toLowerCase', false)(), J$.T(932369, 'true', 21, false))) ? J$._() : J$.B(99522, '===', J$.M(932385, J$.R(932377, 'value', value, false, false), 'toLowerCase', false)(), J$.T(932393, 'false', 21, false)))) {
                                value = J$.W(932425, 'value', J$.B(99530, '===', J$.M(932409, J$.R(932401, 'value', value, false, false), 'toLowerCase', false)(), J$.T(932417, 'true', 21, false)), value, false, false);
                            } else if (J$.C(55736, J$.C(55720, J$.U(99538, '!', J$.M(932449, J$.I(typeof Number === 'undefined' ? Number = J$.R(932433, 'Number', undefined, true, true) : Number = J$.R(932433, 'Number', Number, true, true)), 'isNaN', false)(J$.R(932441, 'value', value, false, false)))) ? J$.U(99546, '!', J$.M(932473, J$.R(932457, 'STRING_OPTIONS', STRING_OPTIONS, false, true), 'has', false)(J$.R(932465, 'key', key, false, false))) : J$._())) {
                                var numericValue = J$.W(932505, 'numericValue', J$.F(932497, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(932481, 'parseFloat', undefined, true, true) : parseFloat = J$.R(932481, 'parseFloat', parseFloat, true, true)), false)(J$.R(932489, 'value', value, false, false)), numericValue, false, false);
                                if (J$.C(55728, J$.U(99554, '!', J$.M(932529, J$.I(typeof Number === 'undefined' ? Number = J$.R(932513, 'Number', undefined, true, true) : Number = J$.R(932513, 'Number', Number, true, true)), 'isNaN', false)(J$.R(932521, 'numericValue', numericValue, false, false))))) {
                                    value = J$.W(932561, 'value', J$.F(932553, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(932537, 'parseFloat', undefined, true, true) : parseFloat = J$.R(932537, 'parseFloat', parseFloat, true, true)), false)(J$.R(932545, 'value', value, false, false)), value, false, false);
                                }
                            }
                            return J$.Rt(932577, J$.R(932569, 'value', value, false, false));
                        } catch (J$e) {
                            J$.Ex(940945, J$e);
                        } finally {
                            if (J$.Fr(940953))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function applyConnectionStringOption(obj, key, value, options) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(934257, arguments.callee, this, arguments);
                            arguments = J$.N(934265, 'arguments', arguments, true, false, false);
                            obj = J$.N(934273, 'obj', obj, true, false, false);
                            key = J$.N(934281, 'key', key, true, false, false);
                            value = J$.N(934289, 'value', value, true, false, false);
                            options = J$.N(934297, 'options', options, true, false, false);
                            if (J$.C(55784, J$.B(99562, '===', J$.R(933129, 'key', key, false, false), J$.T(933137, 'journal', 21, false)))) {
                                key = J$.W(933153, 'key', J$.T(933145, 'j', 21, false), key, false, false);
                            } else if (J$.C(55776, J$.B(99570, '===', J$.R(933161, 'key', key, false, false), J$.T(933169, 'wtimeoutms', 21, false)))) {
                                key = J$.W(933185, 'key', J$.T(933177, 'wtimeout', 21, false), key, false, false);
                            }
                            if (J$.C(55816, J$.M(933209, J$.R(933193, 'BOOLEAN_OPTIONS', BOOLEAN_OPTIONS, false, true), 'has', false)(J$.R(933201, 'key', key, false, false)))) {
                                value = J$.W(933249, 'value', J$.C(55792, J$.B(99578, '===', J$.R(933217, 'value', value, false, false), J$.T(933225, 'true', 21, false))) ? J$._() : J$.B(99586, '===', J$.R(933233, 'value', value, false, false), J$.T(933241, true, 23, false)), value, false, false);
                            } else if (J$.C(55808, J$.B(99594, '===', J$.R(933257, 'key', key, false, false), J$.T(933265, 'appname', 21, false)))) {
                                value = J$.W(933297, 'value', J$.F(933289, J$.I(typeof decodeURIComponent === 'undefined' ? decodeURIComponent = J$.R(933273, 'decodeURIComponent', undefined, true, true) : decodeURIComponent = J$.R(933273, 'decodeURIComponent', decodeURIComponent, true, true)), false)(J$.R(933281, 'value', value, false, false)), value, false, false);
                            } else if (J$.C(55800, J$.B(99602, '===', J$.R(933305, 'key', key, false, false), J$.T(933313, 'readconcernlevel', 21, false)))) {
                                J$.P(933345, J$.R(933321, 'obj', obj, false, false), J$.T(933329, 'readConcernLevel', 21, false), J$.R(933337, 'value', value, false, false));
                                key = J$.W(933361, 'key', J$.T(933353, 'readconcern', 21, false), key, false, false);
                                value = J$.W(933385, 'value', J$.T(933377, { level: J$.R(933369, 'value', value, false, false) }, 11, false), value, false, false);
                            }
                            if (J$.C(55848, J$.B(99610, '===', J$.R(933393, 'key', key, false, false), J$.T(933401, 'compressors', 21, false)))) {
                                value = J$.W(933457, 'value', J$.C(55824, J$.M(933425, J$.I(typeof Array === 'undefined' ? Array = J$.R(933409, 'Array', undefined, true, true) : Array = J$.R(933409, 'Array', Array, true, true)), 'isArray', false)(J$.R(933417, 'value', value, false, false))) ? J$.R(933433, 'value', value, false, false) : J$.T(933449, [J$.R(933441, 'value', value, false, false)], 10, false), value, false, false);
                                if (J$.C(55840, J$.U(99634, '!', J$.M(933545, J$.R(933465, 'value', value, false, false), 'every', false)(J$.T(933537, function (c) {
                                        jalangiLabel11:
                                            while (true) {
                                                try {
                                                    J$.Fe(933513, arguments.callee, this, arguments);
                                                    arguments = J$.N(933521, 'arguments', arguments, true, false, false);
                                                    c = J$.N(933529, 'c', c, true, false, false);
                                                    return J$.Rt(933505, J$.C(55832, J$.B(99618, '===', J$.R(933473, 'c', c, false, false), J$.T(933481, 'snappy', 21, false))) ? J$._() : J$.B(99626, '===', J$.R(933489, 'c', c, false, false), J$.T(933497, 'zlib', 21, false)));
                                                } catch (J$e) {
                                                    J$.Ex(940961, J$e);
                                                } finally {
                                                    if (J$.Fr(940969))
                                                        continue jalangiLabel11;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false))))) {
                                    throw J$.F(933569, J$.R(933553, 'MongoParseError', MongoParseError, false, true), true)(J$.T(933561, 'Value for `compressors` must be at least one of: `snappy`, `zlib`', 21, false));
                                }
                            }
                            if (J$.C(55864, J$.C(55856, J$.B(99642, '===', J$.R(933577, 'key', key, false, false), J$.T(933585, 'authmechanism', 21, false))) ? J$.U(99650, '!', J$.M(933609, J$.R(933593, 'AUTH_MECHANISMS', AUTH_MECHANISMS, false, true), 'has', false)(J$.R(933601, 'value', value, false, false))) : J$._())) {
                                throw J$.F(933633, J$.R(933617, 'MongoParseError', MongoParseError, false, true), true)(J$.T(933625, 'Value for `authMechanism` must be one of: `DEFAULT`, `GSSAPI`, `PLAIN`, `MONGODB-X509`, `SCRAM-SHA-1`, `SCRAM-SHA-256`', 21, false));
                            }
                            if (J$.C(55880, J$.C(55872, J$.B(99658, '===', J$.R(933641, 'key', key, false, false), J$.T(933649, 'readpreference', 21, false))) ? J$.U(99666, '!', J$.M(933673, J$.R(933657, 'ReadPreference', ReadPreference, false, true), 'isValid', false)(J$.R(933665, 'value', value, false, false))) : J$._())) {
                                throw J$.F(933697, J$.R(933681, 'MongoParseError', MongoParseError, false, true), true)(J$.T(933689, 'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`', 21, false));
                            }
                            if (J$.C(55904, J$.C(55896, J$.B(99674, '===', J$.R(933705, 'key', key, false, false), J$.T(933713, 'zlibcompressionlevel', 21, false))) ? J$.C(55888, J$.B(99690, '<', J$.R(933721, 'value', value, false, false), J$.U(99682, '-', J$.T(933729, 1, 22, false)))) ? J$._() : J$.B(99698, '>', J$.R(933737, 'value', value, false, false), J$.T(933745, 9, 22, false)) : J$._())) {
                                throw J$.F(933769, J$.R(933753, 'MongoParseError', MongoParseError, false, true), true)(J$.T(933761, 'zlibCompressionLevel must be an integer between -1 and 9', 21, false));
                            }
                            if (J$.C(55928, J$.C(55912, J$.B(99706, '===', J$.R(933777, 'key', key, false, false), J$.T(933785, 'compressors', 21, false))) ? J$._() : J$.B(99714, '===', J$.R(933793, 'key', key, false, false), J$.T(933801, 'zlibcompressionlevel', 21, false)))) {
                                J$.P(933841, J$.R(933809, 'obj', obj, false, false), 'compression', J$.C(55920, J$.G(933825, J$.R(933817, 'obj', obj, false, false), 'compression')) ? J$._() : J$.T(933833, {}, 11, false));
                                obj = J$.W(933865, 'obj', J$.G(933857, J$.R(933849, 'obj', obj, false, false), 'compression'), obj, false, false);
                            }
                            if (J$.C(55960, J$.B(99722, '===', J$.R(933873, 'key', key, false, false), J$.T(933881, 'authmechanismproperties', 21, false)))) {
                                if (J$.C(55936, J$.B(99738, '===', J$.U(99730, 'typeof', J$.G(933897, J$.R(933889, 'value', value, false, false), 'SERVICE_NAME')), J$.T(933905, 'string', 21, false))))
                                    J$.P(933937, J$.R(933913, 'obj', obj, false, false), 'gssapiServiceName', J$.G(933929, J$.R(933921, 'value', value, false, false), 'SERVICE_NAME'));
                                if (J$.C(55944, J$.B(99754, '===', J$.U(99746, 'typeof', J$.G(933953, J$.R(933945, 'value', value, false, false), 'SERVICE_REALM')), J$.T(933961, 'string', 21, false))))
                                    J$.P(933993, J$.R(933969, 'obj', obj, false, false), 'gssapiServiceRealm', J$.G(933985, J$.R(933977, 'value', value, false, false), 'SERVICE_REALM'));
                                if (J$.C(55952, J$.B(99770, '!==', J$.U(99762, 'typeof', J$.G(934009, J$.R(934001, 'value', value, false, false), 'CANONICALIZE_HOST_NAME')), J$.T(934017, 'undefined', 21, false)))) {
                                    J$.P(934049, J$.R(934025, 'obj', obj, false, false), 'gssapiCanonicalizeHostName', J$.G(934041, J$.R(934033, 'value', value, false, false), 'CANONICALIZE_HOST_NAME'));
                                }
                            }
                            if (J$.C(55976, J$.C(55968, J$.B(99778, '===', J$.R(934057, 'key', key, false, false), J$.T(934065, 'readpreferencetags', 21, false))) ? J$.M(934089, J$.I(typeof Array === 'undefined' ? Array = J$.R(934073, 'Array', undefined, true, true) : Array = J$.R(934073, 'Array', Array, true, true)), 'isArray', false)(J$.R(934081, 'value', value, false, false)) : J$._())) {
                                value = J$.W(934121, 'value', J$.F(934113, J$.R(934097, 'splitArrayOfMultipleReadPreferenceTags', splitArrayOfMultipleReadPreferenceTags, false, true), false)(J$.R(934105, 'value', value, false, false)), value, false, false);
                            }
                            if (J$.C(55992, J$.C(55984, J$.G(934137, J$.R(934129, 'options', options, false, false), 'caseTranslate')) ? J$.G(934161, J$.R(934145, 'CASE_TRANSLATION', CASE_TRANSLATION, false, true), J$.R(934153, 'key', key, false, false)) : J$._())) {
                                J$.P(934209, J$.R(934169, 'obj', obj, false, false), J$.G(934193, J$.R(934177, 'CASE_TRANSLATION', CASE_TRANSLATION, false, true), J$.R(934185, 'key', key, false, false)), J$.R(934201, 'value', value, false, false));
                                return J$.Rt(934217, undefined);
                            }
                            J$.P(934249, J$.R(934225, 'obj', obj, false, false), J$.R(934233, 'key', key, false, false), J$.R(934241, 'value', value, false, false));
                        } catch (J$e) {
                            J$.Ex(940977, J$e);
                        } finally {
                            if (J$.Fr(940985))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function splitArrayOfMultipleReadPreferenceTags(value) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(934761, arguments.callee, this, arguments);
                            arguments = J$.N(934769, 'arguments', arguments, true, false, false);
                            value = J$.N(934777, 'value', value, true, false, false);
                            J$.N(934785, 'parsedTags', parsedTags, false, false, false);
                            J$.N(934793, '_loop', _loop, false, false, false);
                            J$.N(934801, 'i', i, false, false, false);
                            var parsedTags = J$.W(934385, 'parsedTags', J$.T(934377, [], 10, false), parsedTags, false, false);
                            var _loop = J$.W(934657, '_loop', J$.T(934649, function _loop(i) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(934625, arguments.callee, this, arguments);
                                            arguments = J$.N(934633, 'arguments', arguments, true, false, false);
                                            i = J$.N(934641, 'i', i, true, false, false);
                                            J$.P(934417, J$.R(934393, 'parsedTags', parsedTags, false, false), J$.R(934401, 'i', i, false, false), J$.T(934409, {}, 11, false));
                                            J$.M(934617, J$.M(934457, J$.G(934441, J$.R(934425, 'value', value, false, false), J$.R(934433, 'i', i, false, false)), 'split', false)(J$.T(934449, ',', 21, false)), 'forEach', false)(J$.T(934609, function (individualTag) {
                                                jalangiLabel13:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(934577, arguments.callee, this, arguments);
                                                            arguments = J$.N(934585, 'arguments', arguments, true, false, false);
                                                            individualTag = J$.N(934593, 'individualTag', individualTag, true, false, false);
                                                            J$.N(934601, 'splitTag', splitTag, false, false, false);
                                                            var splitTag = J$.W(934489, 'splitTag', J$.M(934481, J$.R(934465, 'individualTag', individualTag, false, false), 'split', false)(J$.T(934473, ':', 21, false)), splitTag, false, false);
                                                            J$.P(934569, J$.G(934513, J$.R(934497, 'parsedTags', parsedTags, false, false), J$.R(934505, 'i', i, false, false)), J$.G(934537, J$.R(934521, 'splitTag', splitTag, false, false), J$.T(934529, 0, 22, false)), J$.G(934561, J$.R(934545, 'splitTag', splitTag, false, false), J$.T(934553, 1, 22, false)));
                                                        } catch (J$e) {
                                                            J$.Ex(940993, J$e);
                                                        } finally {
                                                            if (J$.Fr(941001))
                                                                continue jalangiLabel13;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(941009, J$e);
                                        } finally {
                                            if (J$.Fr(941017))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), _loop, false, false);
                            for (var i = J$.W(934673, 'i', J$.T(934665, 0, 22, false), i, false, false); J$.C(56000, J$.B(99786, '<', J$.R(934681, 'i', i, false, false), J$.G(934697, J$.R(934689, 'value', value, false, false), 'length'))); J$.B(99810, '-', i = J$.W(934713, 'i', J$.B(99802, '+', J$.U(99794, '+', J$.R(934705, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.F(934737, J$.R(934721, '_loop', _loop, false, false), false)(J$.R(934729, 'i', i, false, false));
                            }
                            return J$.Rt(934753, J$.R(934745, 'parsedTags', parsedTags, false, false));
                        } catch (J$e) {
                            J$.Ex(941025, J$e);
                        } finally {
                            if (J$.Fr(941033))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function applyAuthExpectations(parsed) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(935921, arguments.callee, this, arguments);
                            arguments = J$.N(935929, 'arguments', arguments, true, false, false);
                            parsed = J$.N(935937, 'parsed', parsed, true, false, false);
                            J$.N(935945, 'options', options, false, false, false);
                            J$.N(935953, 'authSource', authSource, false, false, false);
                            J$.N(935961, 'authMechanism', authMechanism, false, false, false);
                            if (J$.C(56008, J$.B(99818, '==', J$.G(934817, J$.R(934809, 'parsed', parsed, false, false), 'options'), J$.T(934825, null, 25, false)))) {
                                return J$.Rt(934833, undefined);
                            }
                            var options = J$.W(934857, 'options', J$.G(934849, J$.R(934841, 'parsed', parsed, false, false), 'options'), options, false, false);
                            var authSource = J$.W(934897, 'authSource', J$.C(56016, J$.G(934873, J$.R(934865, 'options', options, false, false), 'authsource')) ? J$._() : J$.G(934889, J$.R(934881, 'options', options, false, false), 'authSource'), authSource, false, false);
                            if (J$.C(56024, J$.B(99826, '!=', J$.R(934905, 'authSource', authSource, false, false), J$.T(934913, null, 25, false)))) {
                                J$.P(934985, J$.R(934921, 'parsed', parsed, false, false), 'auth', J$.M(934977, J$.I(typeof Object === 'undefined' ? Object = J$.R(934929, 'Object', undefined, true, true) : Object = J$.R(934929, 'Object', Object, true, true)), 'assign', false)(J$.T(934937, {}, 11, false), J$.G(934953, J$.R(934945, 'parsed', parsed, false, false), 'auth'), J$.T(934969, { db: J$.R(934961, 'authSource', authSource, false, false) }, 11, false)));
                            }
                            var authMechanism = J$.W(935025, 'authMechanism', J$.C(56032, J$.G(935001, J$.R(934993, 'options', options, false, false), 'authmechanism')) ? J$._() : J$.G(935017, J$.R(935009, 'options', options, false, false), 'authMechanism'), authMechanism, false, false);
                            if (J$.C(56152, J$.B(99834, '!=', J$.R(935033, 'authMechanism', authMechanism, false, false), J$.T(935041, null, 25, false)))) {
                                if (J$.C(56056, J$.C(56048, J$.M(935065, J$.R(935049, 'USERNAME_REQUIRED_MECHANISMS', USERNAME_REQUIRED_MECHANISMS, false, true), 'has', false)(J$.R(935057, 'authMechanism', authMechanism, false, false))) ? J$.C(56040, J$.U(99842, '!', J$.G(935081, J$.R(935073, 'parsed', parsed, false, false), 'auth'))) ? J$._() : J$.B(99850, '==', J$.G(935105, J$.G(935097, J$.R(935089, 'parsed', parsed, false, false), 'auth'), 'username'), J$.T(935113, null, 25, false)) : J$._())) {
                                    throw J$.F(935161, J$.R(935121, 'MongoParseError', MongoParseError, false, true), true)(J$.M(935153, J$.T(935129, 'Username required for mechanism `', 21, false), 'concat', false)(J$.R(935137, 'authMechanism', authMechanism, false, false), J$.T(935145, '`', 21, false)));
                                }
                                if (J$.C(56080, J$.B(99858, '===', J$.R(935169, 'authMechanism', authMechanism, false, false), J$.T(935177, 'GSSAPI', 21, false)))) {
                                    if (J$.C(56072, J$.C(56064, J$.B(99866, '!=', J$.R(935185, 'authSource', authSource, false, false), J$.T(935193, null, 25, false))) ? J$.B(99874, '!==', J$.R(935201, 'authSource', authSource, false, false), J$.T(935209, '$external', 21, false)) : J$._())) {
                                        throw J$.F(935281, J$.R(935217, 'MongoParseError', MongoParseError, false, true), true)(J$.M(935273, J$.M(935249, J$.T(935225, 'Invalid source `', 21, false), 'concat', false)(J$.R(935233, 'authSource', authSource, false, false), J$.T(935241, '` for mechanism `', 21, false)), 'concat', false)(J$.R(935257, 'authMechanism', authMechanism, false, false), J$.T(935265, '` specified.', 21, false)));
                                    }
                                    J$.P(935353, J$.R(935289, 'parsed', parsed, false, false), 'auth', J$.M(935345, J$.I(typeof Object === 'undefined' ? Object = J$.R(935297, 'Object', undefined, true, true) : Object = J$.R(935297, 'Object', Object, true, true)), 'assign', false)(J$.T(935305, {}, 11, false), J$.G(935321, J$.R(935313, 'parsed', parsed, false, false), 'auth'), J$.T(935337, { db: J$.T(935329, '$external', 21, false) }, 11, false)));
                                }
                                if (J$.C(56120, J$.B(99882, '===', J$.R(935361, 'authMechanism', authMechanism, false, false), J$.T(935369, 'MONGODB-X509', 21, false)))) {
                                    if (J$.C(56096, J$.C(56088, J$.G(935385, J$.R(935377, 'parsed', parsed, false, false), 'auth')) ? J$.B(99890, '!=', J$.G(935409, J$.G(935401, J$.R(935393, 'parsed', parsed, false, false), 'auth'), 'password'), J$.T(935417, null, 25, false)) : J$._())) {
                                        throw J$.F(935465, J$.R(935425, 'MongoParseError', MongoParseError, false, true), true)(J$.M(935457, J$.T(935433, 'Password not allowed for mechanism `', 21, false), 'concat', false)(J$.R(935441, 'authMechanism', authMechanism, false, false), J$.T(935449, '`', 21, false)));
                                    }
                                    if (J$.C(56112, J$.C(56104, J$.B(99898, '!=', J$.R(935473, 'authSource', authSource, false, false), J$.T(935481, null, 25, false))) ? J$.B(99906, '!==', J$.R(935489, 'authSource', authSource, false, false), J$.T(935497, '$external', 21, false)) : J$._())) {
                                        throw J$.F(935569, J$.R(935505, 'MongoParseError', MongoParseError, false, true), true)(J$.M(935561, J$.M(935537, J$.T(935513, 'Invalid source `', 21, false), 'concat', false)(J$.R(935521, 'authSource', authSource, false, false), J$.T(935529, '` for mechanism `', 21, false)), 'concat', false)(J$.R(935545, 'authMechanism', authMechanism, false, false), J$.T(935553, '` specified.', 21, false)));
                                    }
                                    J$.P(935641, J$.R(935577, 'parsed', parsed, false, false), 'auth', J$.M(935633, J$.I(typeof Object === 'undefined' ? Object = J$.R(935585, 'Object', undefined, true, true) : Object = J$.R(935585, 'Object', Object, true, true)), 'assign', false)(J$.T(935593, {}, 11, false), J$.G(935609, J$.R(935601, 'parsed', parsed, false, false), 'auth'), J$.T(935625, { db: J$.T(935617, '$external', 21, false) }, 11, false)));
                                }
                                if (J$.C(56144, J$.B(99914, '===', J$.R(935649, 'authMechanism', authMechanism, false, false), J$.T(935657, 'PLAIN', 21, false)))) {
                                    if (J$.C(56136, J$.C(56128, J$.G(935673, J$.R(935665, 'parsed', parsed, false, false), 'auth')) ? J$.B(99922, '==', J$.G(935697, J$.G(935689, J$.R(935681, 'parsed', parsed, false, false), 'auth'), 'db'), J$.T(935705, null, 25, false)) : J$._())) {
                                        J$.P(935777, J$.R(935713, 'parsed', parsed, false, false), 'auth', J$.M(935769, J$.I(typeof Object === 'undefined' ? Object = J$.R(935721, 'Object', undefined, true, true) : Object = J$.R(935721, 'Object', Object, true, true)), 'assign', false)(J$.T(935729, {}, 11, false), J$.G(935745, J$.R(935737, 'parsed', parsed, false, false), 'auth'), J$.T(935761, { db: J$.T(935753, '$external', 21, false) }, 11, false)));
                                    }
                                }
                            }
                            if (J$.C(56168, J$.C(56160, J$.G(935793, J$.R(935785, 'parsed', parsed, false, false), 'auth')) ? J$.B(99930, '==', J$.G(935817, J$.G(935809, J$.R(935801, 'parsed', parsed, false, false), 'auth'), 'db'), J$.T(935825, null, 25, false)) : J$._())) {
                                J$.P(935897, J$.R(935833, 'parsed', parsed, false, false), 'auth', J$.M(935889, J$.I(typeof Object === 'undefined' ? Object = J$.R(935841, 'Object', undefined, true, true) : Object = J$.R(935841, 'Object', Object, true, true)), 'assign', false)(J$.T(935849, {}, 11, false), J$.G(935865, J$.R(935857, 'parsed', parsed, false, false), 'auth'), J$.T(935881, { db: J$.T(935873, 'admin', 21, false) }, 11, false)));
                            }
                            return J$.Rt(935913, J$.R(935905, 'parsed', parsed, false, false));
                        } catch (J$e) {
                            J$.Ex(941041, J$e);
                        } finally {
                            if (J$.Fr(941049))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQueryString(query, options) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(936385, arguments.callee, this, arguments);
                            arguments = J$.N(936393, 'arguments', arguments, true, false, false);
                            query = J$.N(936401, 'query', query, true, false, false);
                            options = J$.N(936409, 'options', options, true, false, false);
                            J$.N(936417, 'result', result, false, false, false);
                            J$.N(936425, 'parsedQueryString', parsedQueryString, false, false, false);
                            J$.N(936433, 'key', key, false, false, false);
                            J$.N(936441, 'value', value, false, false, false);
                            J$.N(936449, 'normalizedKey', normalizedKey, false, false, false);
                            J$.N(936457, 'parsedValue', parsedValue, false, false, false);
                            var result = J$.W(935977, 'result', J$.T(935969, {}, 11, false), result, false, false);
                            var parsedQueryString = J$.W(936009, 'parsedQueryString', J$.M(936001, J$.R(935985, 'qs', qs, false, true), 'parse', false)(J$.R(935993, 'query', query, false, false)), parsedQueryString, false, false);
                            J$.F(936033, J$.R(936017, 'checkTLSOptions', checkTLSOptions, false, true), false)(J$.R(936025, 'parsedQueryString', parsedQueryString, false, false));
                            for (var key in J$.H(936249, J$.R(936041, 'parsedQueryString', parsedQueryString, false, false))) {
                                J$.N(936257, 'key', key, false, true, false);
                                {
                                    {
                                        var value = J$.W(936073, 'value', J$.G(936065, J$.R(936049, 'parsedQueryString', parsedQueryString, false, false), J$.R(936057, 'key', key, false, false)), value, false, false);
                                        if (J$.C(56184, J$.C(56176, J$.B(99938, '===', J$.R(936081, 'value', value, false, false), J$.T(936089, '', 21, false))) ? J$._() : J$.B(99946, '==', J$.R(936097, 'value', value, false, false), J$.T(936105, null, 25, false)))) {
                                            throw J$.F(936129, J$.R(936113, 'MongoParseError', MongoParseError, false, true), true)(J$.T(936121, 'Incomplete key value pair for option', 21, false));
                                        }
                                        var normalizedKey = J$.W(936153, 'normalizedKey', J$.M(936145, J$.R(936137, 'key', key, false, false), 'toLowerCase', false)(), normalizedKey, false, false);
                                        var parsedValue = J$.W(936193, 'parsedValue', J$.F(936185, J$.R(936161, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(936169, 'normalizedKey', normalizedKey, false, false), J$.R(936177, 'value', value, false, false)), parsedValue, false, false);
                                        J$.F(936241, J$.R(936201, 'applyConnectionStringOption', applyConnectionStringOption, false, true), false)(J$.R(936209, 'result', result, false, false), J$.R(936217, 'normalizedKey', normalizedKey, false, false), J$.R(936225, 'parsedValue', parsedValue, false, false), J$.R(936233, 'options', options, false, false));
                                    }
                                }
                            }
                            if (J$.C(56200, J$.C(56192, J$.G(936273, J$.R(936265, 'result', result, false, false), 'wtimeout')) ? J$.G(936289, J$.R(936281, 'result', result, false, false), 'wtimeoutms') : J$._())) {
                                J$.B(99954, 'delete', J$.R(936297, 'result', result, false, false), 'wtimeout');
                                J$.M(936321, J$.I(typeof console === 'undefined' ? console = J$.R(936305, 'console', undefined, true, true) : console = J$.R(936305, 'console', console, true, true)), 'warn', false)(J$.T(936313, 'Unsupported option `wtimeout` specified', 21, false));
                            }
                            return J$.Rt(936377, J$.C(56208, J$.G(936353, J$.M(936345, J$.I(typeof Object === 'undefined' ? Object = J$.R(936329, 'Object', undefined, true, true) : Object = J$.R(936329, 'Object', Object, true, true)), 'keys', false)(J$.R(936337, 'result', result, false, false)), 'length')) ? J$.R(936361, 'result', result, false, false) : J$.T(936369, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(941057, J$e);
                        } finally {
                            if (J$.Fr(941065))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function checkTLSOptions(queryString) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(936785, arguments.callee, this, arguments);
                            arguments = J$.N(936793, 'arguments', arguments, true, false, false);
                            queryString = J$.N(936801, 'queryString', queryString, true, false, false);
                            J$.N(936809, 'queryStringKeys', queryStringKeys, false, false, false);
                            J$.N(936817, 'tlsValue', tlsValue, false, false, false);
                            J$.N(936825, 'sslValue', sslValue, false, false, false);
                            var queryStringKeys = J$.W(936489, 'queryStringKeys', J$.M(936481, J$.I(typeof Object === 'undefined' ? Object = J$.R(936465, 'Object', undefined, true, true) : Object = J$.R(936465, 'Object', Object, true, true)), 'keys', false)(J$.R(936473, 'queryString', queryString, false, false)), queryStringKeys, false, false);
                            if (J$.C(56232, J$.C(56224, J$.B(99970, '!==', J$.M(936513, J$.R(936497, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(936505, 'tlsInsecure', 21, false)), J$.U(99962, '-', J$.T(936521, 1, 22, false)))) ? J$.C(56216, J$.B(99986, '!==', J$.M(936545, J$.R(936529, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(936537, 'tlsAllowInvalidCertificates', 21, false)), J$.U(99978, '-', J$.T(936553, 1, 22, false)))) ? J$._() : J$.B(100002, '!==', J$.M(936577, J$.R(936561, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(936569, 'tlsAllowInvalidHostnames', 21, false)), J$.U(99994, '-', J$.T(936585, 1, 22, false))) : J$._())) {
                                throw J$.F(936609, J$.R(936593, 'MongoParseError', MongoParseError, false, true), true)(J$.T(936601, 'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.', 21, false));
                            }
                            var tlsValue = J$.W(936657, 'tlsValue', J$.F(936649, J$.R(936617, 'assertTlsOptionsAreEqual', assertTlsOptionsAreEqual, false, true), false)(J$.T(936625, 'tls', 21, false), J$.R(936633, 'queryString', queryString, false, false), J$.R(936641, 'queryStringKeys', queryStringKeys, false, false)), tlsValue, false, false);
                            var sslValue = J$.W(936705, 'sslValue', J$.F(936697, J$.R(936665, 'assertTlsOptionsAreEqual', assertTlsOptionsAreEqual, false, true), false)(J$.T(936673, 'ssl', 21, false), J$.R(936681, 'queryString', queryString, false, false), J$.R(936689, 'queryStringKeys', queryStringKeys, false, false)), sslValue, false, false);
                            if (J$.C(56256, J$.C(56240, J$.B(100010, '!=', J$.R(936713, 'tlsValue', tlsValue, false, false), J$.T(936721, null, 25, false))) ? J$.B(100018, '!=', J$.R(936729, 'sslValue', sslValue, false, false), J$.T(936737, null, 25, false)) : J$._())) {
                                if (J$.C(56248, J$.B(100026, '!==', J$.R(936745, 'tlsValue', tlsValue, false, false), J$.R(936753, 'sslValue', sslValue, false, false)))) {
                                    throw J$.F(936777, J$.R(936761, 'MongoParseError', MongoParseError, false, true), true)(J$.T(936769, 'All values of `tls` and `ssl` must be the same.', 21, false));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(941073, J$e);
                        } finally {
                            if (J$.Fr(941081))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(937209, arguments.callee, this, arguments);
                            arguments = J$.N(937217, 'arguments', arguments, true, false, false);
                            optionName = J$.N(937225, 'optionName', optionName, true, false, false);
                            queryString = J$.N(937233, 'queryString', queryString, true, false, false);
                            queryStringKeys = J$.N(937241, 'queryStringKeys', queryStringKeys, true, false, false);
                            J$.N(937249, 'queryStringHasTLSOption', queryStringHasTLSOption, false, false, false);
                            J$.N(937257, 'optionValue', optionValue, false, false, false);
                            J$.N(937265, 'firstValue', firstValue, false, false, false);
                            var queryStringHasTLSOption = J$.W(936865, 'queryStringHasTLSOption', J$.B(100042, '!==', J$.M(936849, J$.R(936833, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.R(936841, 'optionName', optionName, false, false)), J$.U(100034, '-', J$.T(936857, 1, 22, false))), queryStringHasTLSOption, false, false);
                            var optionValue;
                            if (J$.C(56264, J$.M(936905, J$.I(typeof Array === 'undefined' ? Array = J$.R(936873, 'Array', undefined, true, true) : Array = J$.R(936873, 'Array', Array, true, true)), 'isArray', false)(J$.G(936897, J$.R(936881, 'queryString', queryString, false, false), J$.R(936889, 'optionName', optionName, false, false))))) {
                                optionValue = J$.W(936953, 'optionValue', J$.G(936945, J$.G(936929, J$.R(936913, 'queryString', queryString, false, false), J$.R(936921, 'optionName', optionName, false, false)), J$.T(936937, 0, 22, false)), optionValue, false, false);
                            } else {
                                optionValue = J$.W(936985, 'optionValue', J$.G(936977, J$.R(936961, 'queryString', queryString, false, false), J$.R(936969, 'optionName', optionName, false, false)), optionValue, false, false);
                            }
                            if (J$.C(56288, J$.R(936993, 'queryStringHasTLSOption', queryStringHasTLSOption, false, false))) {
                                if (J$.C(56280, J$.M(937033, J$.I(typeof Array === 'undefined' ? Array = J$.R(937001, 'Array', undefined, true, true) : Array = J$.R(937001, 'Array', Array, true, true)), 'isArray', false)(J$.G(937025, J$.R(937009, 'queryString', queryString, false, false), J$.R(937017, 'optionName', optionName, false, false))))) {
                                    var firstValue = J$.W(937081, 'firstValue', J$.G(937073, J$.G(937057, J$.R(937041, 'queryString', queryString, false, false), J$.R(937049, 'optionName', optionName, false, false)), J$.T(937065, 0, 22, false)), firstValue, false, false);
                                    J$.M(937185, J$.G(937105, J$.R(937089, 'queryString', queryString, false, false), J$.R(937097, 'optionName', optionName, false, false)), 'forEach', false)(J$.T(937177, function (tlsValue) {
                                        jalangiLabel19:
                                            while (true) {
                                                try {
                                                    J$.Fe(937153, arguments.callee, this, arguments);
                                                    arguments = J$.N(937161, 'arguments', arguments, true, false, false);
                                                    tlsValue = J$.N(937169, 'tlsValue', tlsValue, true, false, false);
                                                    if (J$.C(56272, J$.B(100050, '!==', J$.R(937113, 'tlsValue', tlsValue, false, false), J$.R(937121, 'firstValue', firstValue, false, false)))) {
                                                        throw J$.F(937145, J$.R(937129, 'MongoParseError', MongoParseError, false, true), true)(J$.T(937137, 'All values of ${optionName} must be the same.', 21, false));
                                                    }
                                                } catch (J$e) {
                                                    J$.Ex(941089, J$e);
                                                } finally {
                                                    if (J$.Fr(941097))
                                                        continue jalangiLabel19;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false));
                                }
                            }
                            return J$.Rt(937201, J$.R(937193, 'optionValue', optionValue, false, false));
                        } catch (J$e) {
                            J$.Ex(941105, J$e);
                        } finally {
                            if (J$.Fr(941113))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseConnectionString(uri, options, callback) {
                jalangiLabel23:
                    while (true) {
                        try {
                            J$.Fe(940345, arguments.callee, this, arguments);
                            arguments = J$.N(940353, 'arguments', arguments, true, false, false);
                            uri = J$.N(940361, 'uri', uri, true, false, false);
                            options = J$.N(940369, 'options', options, true, false, false);
                            callback = J$.N(940377, 'callback', callback, true, false, false);
                            J$.N(940385, 'cap', cap, false, false, false);
                            J$.N(940393, 'protocol', protocol, false, false, false);
                            J$.N(940401, 'dbAndQuery', dbAndQuery, false, false, false);
                            J$.N(940409, 'db', db, false, false, false);
                            J$.N(940417, 'query', query, false, false, false);
                            J$.N(940425, 'parsedOptions', parsedOptions, false, false, false);
                            J$.N(940433, 'auth', auth, false, false, false);
                            J$.N(940441, 'authorityParts', authorityParts, false, false, false);
                            J$.N(940449, 'authParts', authParts, false, false, false);
                            J$.N(940457, 'hostParsingError', hostParsingError, false, false, false);
                            J$.N(940465, 'hosts', hosts, false, false, false);
                            J$.N(940473, 'result', result, false, false, false);
                            if (J$.C(56296, J$.B(100066, '===', J$.U(100058, 'typeof', J$.R(937337, 'options', options, false, false)), J$.T(937345, 'function', 21, false))))
                                callback = J$.W(937361, 'callback', J$.R(937353, 'options', options, false, false), callback, false, false), options = J$.W(937377, 'options', J$.T(937369, {}, 11, false), options, false, false);
                            options = J$.W(937433, 'options', J$.M(937425, J$.I(typeof Object === 'undefined' ? Object = J$.R(937385, 'Object', undefined, true, true) : Object = J$.R(937385, 'Object', Object, true, true)), 'assign', false)(J$.T(937393, {}, 11, false), J$.T(937409, { caseTranslate: J$.T(937401, true, 23, false) }, 11, false), J$.R(937417, 'options', options, false, false)), options, false, false);
                            try {
                                J$.M(937457, J$.R(937441, 'URL', URL, false, true), 'parse', false)(J$.R(937449, 'uri', uri, false, false));
                            } catch (e) {
                                J$.N(937513, 'e', e, false, false, true);
                                return J$.Rt(937505, J$.F(937497, J$.R(937465, 'callback', callback, false, false), false)(J$.F(937489, J$.R(937473, 'MongoParseError', MongoParseError, false, true), true)(J$.T(937481, 'URI malformed, cannot be parsed', 21, false))));
                            }
                            var cap = J$.W(937545, 'cap', J$.M(937537, J$.R(937521, 'uri', uri, false, false), 'match', false)(J$.R(937529, 'HOSTS_RX', HOSTS_RX, false, true)), cap, false, false);
                            if (J$.C(56304, J$.U(100074, '!', J$.R(937553, 'cap', cap, false, false)))) {
                                return J$.Rt(937601, J$.F(937593, J$.R(937561, 'callback', callback, false, false), false)(J$.F(937585, J$.R(937569, 'MongoParseError', MongoParseError, false, true), true)(J$.T(937577, 'Invalid connection string', 21, false))));
                            }
                            var protocol = J$.W(937633, 'protocol', J$.G(937625, J$.R(937609, 'cap', cap, false, false), J$.T(937617, 1, 22, false)), protocol, false, false);
                            if (J$.C(56312, J$.B(100090, '===', J$.M(937657, J$.R(937641, 'SUPPORTED_PROTOCOLS', SUPPORTED_PROTOCOLS, false, true), 'indexOf', false)(J$.R(937649, 'protocol', protocol, false, false)), J$.U(100082, '-', J$.T(937665, 1, 22, false))))) {
                                return J$.Rt(937713, J$.F(937705, J$.R(937673, 'callback', callback, false, false), false)(J$.F(937697, J$.R(937681, 'MongoParseError', MongoParseError, false, true), true)(J$.T(937689, 'Invalid protocol provided', 21, false))));
                            }
                            if (J$.C(56320, J$.B(100098, '===', J$.R(937721, 'protocol', protocol, false, false), J$.R(937729, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true)))) {
                                return J$.Rt(937777, J$.F(937769, J$.R(937737, 'parseSrvConnectionString', parseSrvConnectionString, false, true), false)(J$.R(937745, 'uri', uri, false, false), J$.R(937753, 'options', options, false, false), J$.R(937761, 'callback', callback, false, false)));
                            }
                            var dbAndQuery = J$.W(937825, 'dbAndQuery', J$.M(937817, J$.G(937801, J$.R(937785, 'cap', cap, false, false), J$.T(937793, 4, 22, false)), 'split', false)(J$.T(937809, '?', 21, false)), dbAndQuery, false, false);
                            var db = J$.W(937889, 'db', J$.C(56328, J$.B(100106, '>', J$.G(937841, J$.R(937833, 'dbAndQuery', dbAndQuery, false, false), 'length'), J$.T(937849, 0, 22, false))) ? J$.G(937873, J$.R(937857, 'dbAndQuery', dbAndQuery, false, false), J$.T(937865, 0, 22, false)) : J$.T(937881, null, 25, false), db, false, false);
                            var query = J$.W(937953, 'query', J$.C(56336, J$.B(100114, '>', J$.G(937905, J$.R(937897, 'dbAndQuery', dbAndQuery, false, false), 'length'), J$.T(937913, 1, 22, false))) ? J$.G(937937, J$.R(937921, 'dbAndQuery', dbAndQuery, false, false), J$.T(937929, 1, 22, false)) : J$.T(937945, null, 25, false), query, false, false);
                            var parsedOptions;
                            try {
                                parsedOptions = J$.W(937993, 'parsedOptions', J$.F(937985, J$.R(937961, 'parseQueryString', parseQueryString, false, true), false)(J$.R(937969, 'query', query, false, false), J$.R(937977, 'options', options, false, false)), parsedOptions, false, false);
                            } catch (parseError) {
                                J$.N(938033, 'parseError', parseError, false, false, true);
                                return J$.Rt(938025, J$.F(938017, J$.R(938001, 'callback', callback, false, false), false)(J$.R(938009, 'parseError', parseError, false, false)));
                            }
                            parsedOptions = J$.W(938081, 'parsedOptions', J$.M(938073, J$.I(typeof Object === 'undefined' ? Object = J$.R(938041, 'Object', undefined, true, true) : Object = J$.R(938041, 'Object', Object, true, true)), 'assign', false)(J$.T(938049, {}, 11, false), J$.R(938057, 'parsedOptions', parsedOptions, false, false), J$.R(938065, 'options', options, false, false)), parsedOptions, false, false);
                            var auth = J$.W(938169, 'auth', J$.T(938161, {
                                username: J$.T(938089, null, 25, false),
                                password: J$.T(938097, null, 25, false),
                                db: J$.C(56352, J$.C(56344, J$.R(938105, 'db', db, false, false)) ? J$.B(100122, '!==', J$.R(938113, 'db', db, false, false), J$.T(938121, '', 21, false)) : J$._()) ? J$.M(938145, J$.R(938129, 'qs', qs, false, true), 'unescape', false)(J$.R(938137, 'db', db, false, false)) : J$.T(938153, null, 25, false)
                            }, 11, false), auth, false, false);
                            if (J$.C(56408, J$.G(938185, J$.R(938177, 'parsedOptions', parsedOptions, false, false), 'auth'))) {
                                if (J$.C(56360, J$.G(938209, J$.G(938201, J$.R(938193, 'parsedOptions', parsedOptions, false, false), 'auth'), 'username')))
                                    J$.P(938249, J$.R(938217, 'auth', auth, false, false), 'username', J$.G(938241, J$.G(938233, J$.R(938225, 'parsedOptions', parsedOptions, false, false), 'auth'), 'username'));
                                if (J$.C(56368, J$.G(938273, J$.G(938265, J$.R(938257, 'parsedOptions', parsedOptions, false, false), 'auth'), 'user')))
                                    J$.P(938313, J$.R(938281, 'auth', auth, false, false), 'username', J$.G(938305, J$.G(938297, J$.R(938289, 'parsedOptions', parsedOptions, false, false), 'auth'), 'user'));
                                if (J$.C(56376, J$.G(938337, J$.G(938329, J$.R(938321, 'parsedOptions', parsedOptions, false, false), 'auth'), 'password')))
                                    J$.P(938377, J$.R(938345, 'auth', auth, false, false), 'password', J$.G(938369, J$.G(938361, J$.R(938353, 'parsedOptions', parsedOptions, false, false), 'auth'), 'password'));
                            } else {
                                if (J$.C(56384, J$.G(938393, J$.R(938385, 'parsedOptions', parsedOptions, false, false), 'username')))
                                    J$.P(938425, J$.R(938401, 'auth', auth, false, false), 'username', J$.G(938417, J$.R(938409, 'parsedOptions', parsedOptions, false, false), 'username'));
                                if (J$.C(56392, J$.G(938441, J$.R(938433, 'parsedOptions', parsedOptions, false, false), 'user')))
                                    J$.P(938473, J$.R(938449, 'auth', auth, false, false), 'username', J$.G(938465, J$.R(938457, 'parsedOptions', parsedOptions, false, false), 'user'));
                                if (J$.C(56400, J$.G(938489, J$.R(938481, 'parsedOptions', parsedOptions, false, false), 'password')))
                                    J$.P(938521, J$.R(938497, 'auth', auth, false, false), 'password', J$.G(938513, J$.R(938505, 'parsedOptions', parsedOptions, false, false), 'password'));
                            }
                            if (J$.C(56416, J$.B(100138, '!==', J$.M(938593, J$.G(938577, J$.M(938561, J$.G(938545, J$.R(938529, 'cap', cap, false, false), J$.T(938537, 4, 22, false)), 'split', false)(J$.T(938553, '?', 21, false)), J$.T(938569, 0, 22, false)), 'indexOf', false)(J$.T(938585, '@', 21, false)), J$.U(100130, '-', J$.T(938601, 1, 22, false))))) {
                                return J$.Rt(938649, J$.F(938641, J$.R(938609, 'callback', callback, false, false), false)(J$.F(938633, J$.R(938617, 'MongoParseError', MongoParseError, false, true), true)(J$.T(938625, 'Unescaped slash in userinfo section', 21, false))));
                            }
                            var authorityParts = J$.W(938697, 'authorityParts', J$.M(938689, J$.G(938673, J$.R(938657, 'cap', cap, false, false), J$.T(938665, 3, 22, false)), 'split', false)(J$.T(938681, '@', 21, false)), authorityParts, false, false);
                            if (J$.C(56424, J$.B(100146, '>', J$.G(938713, J$.R(938705, 'authorityParts', authorityParts, false, false), 'length'), J$.T(938721, 2, 22, false)))) {
                                return J$.Rt(938769, J$.F(938761, J$.R(938729, 'callback', callback, false, false), false)(J$.F(938753, J$.R(938737, 'MongoParseError', MongoParseError, false, true), true)(J$.T(938745, 'Unescaped at-sign in authority section', 21, false))));
                            }
                            if (J$.C(56464, J$.B(100154, '>', J$.G(938785, J$.R(938777, 'authorityParts', authorityParts, false, false), 'length'), J$.T(938793, 1, 22, false)))) {
                                var authParts = J$.W(938833, 'authParts', J$.M(938825, J$.M(938809, J$.R(938801, 'authorityParts', authorityParts, false, false), 'shift', false)(), 'split', false)(J$.T(938817, ':', 21, false)), authParts, false, false);
                                if (J$.C(56432, J$.B(100162, '>', J$.G(938849, J$.R(938841, 'authParts', authParts, false, false), 'length'), J$.T(938857, 2, 22, false)))) {
                                    return J$.Rt(938905, J$.F(938897, J$.R(938865, 'callback', callback, false, false), false)(J$.F(938889, J$.R(938873, 'MongoParseError', MongoParseError, false, true), true)(J$.T(938881, 'Unescaped colon in authority section', 21, false))));
                                }
                                if (J$.C(56440, J$.U(100170, '!', J$.G(938921, J$.R(938913, 'auth', auth, false, false), 'username'))))
                                    J$.P(938977, J$.R(938929, 'auth', auth, false, false), 'username', J$.M(938969, J$.R(938937, 'qs', qs, false, true), 'unescape', false)(J$.G(938961, J$.R(938945, 'authParts', authParts, false, false), J$.T(938953, 0, 22, false))));
                                if (J$.C(56456, J$.U(100178, '!', J$.G(938993, J$.R(938985, 'auth', auth, false, false), 'password'))))
                                    J$.P(939081, J$.R(939001, 'auth', auth, false, false), 'password', J$.C(56448, J$.G(939025, J$.R(939009, 'authParts', authParts, false, false), J$.T(939017, 1, 22, false))) ? J$.M(939065, J$.R(939033, 'qs', qs, false, true), 'unescape', false)(J$.G(939057, J$.R(939041, 'authParts', authParts, false, false), J$.T(939049, 1, 22, false))) : J$.T(939073, null, 25, false));
                            }
                            var hostParsingError = J$.W(939097, 'hostParsingError', J$.T(939089, null, 25, false), hostParsingError, false, false);
                            var hosts = J$.W(939825, 'hosts', J$.M(939817, J$.M(939761, J$.M(939129, J$.M(939113, J$.R(939105, 'authorityParts', authorityParts, false, false), 'shift', false)(), 'split', false)(J$.T(939121, ',', 21, false)), 'map', false)(J$.T(939753, function (host) {
                                jalangiLabel21:
                                    while (true) {
                                        try {
                                            J$.Fe(939713, arguments.callee, this, arguments);
                                            arguments = J$.N(939721, 'arguments', arguments, true, false, false);
                                            host = J$.N(939729, 'host', host, true, false, false);
                                            J$.N(939737, 'parsedHost', parsedHost, false, false, false);
                                            J$.N(939745, 'result', result, false, false, false);
                                            var parsedHost = J$.W(939177, 'parsedHost', J$.M(939169, J$.R(939137, 'URL', URL, false, true), 'parse', false)(J$.M(939161, J$.T(939145, 'mongodb://', 21, false), 'concat', false)(J$.R(939153, 'host', host, false, false))), parsedHost, false, false);
                                            if (J$.C(56472, J$.B(100186, '===', J$.G(939193, J$.R(939185, 'parsedHost', parsedHost, false, false), 'path'), J$.T(939201, '/:', 21, false)))) {
                                                hostParsingError = J$.W(939233, 'hostParsingError', J$.F(939225, J$.R(939209, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939217, 'Double colon in host identifier', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(939249, J$.T(939241, null, 25, false));
                                            }
                                            if (J$.C(56480, J$.M(939273, J$.R(939257, 'host', host, false, false), 'match', false)(J$.T(939265, /\.sock/, 14, false)))) {
                                                J$.P(939313, J$.R(939281, 'parsedHost', parsedHost, false, false), 'hostname', J$.M(939305, J$.R(939289, 'qs', qs, false, true), 'unescape', false)(J$.R(939297, 'host', host, false, false)));
                                                J$.P(939337, J$.R(939321, 'parsedHost', parsedHost, false, false), 'port', J$.T(939329, null, 25, false));
                                            }
                                            if (J$.C(56488, J$.M(939369, J$.I(typeof Number === 'undefined' ? Number = J$.R(939345, 'Number', undefined, true, true) : Number = J$.R(939345, 'Number', Number, true, true)), 'isNaN', false)(J$.G(939361, J$.R(939353, 'parsedHost', parsedHost, false, false), 'port')))) {
                                                hostParsingError = J$.W(939401, 'hostParsingError', J$.F(939393, J$.R(939377, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939385, 'Invalid port (non-numeric string)', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(939409, undefined);
                                            }
                                            var result = J$.W(939497, 'result', J$.T(939489, {
                                                host: J$.G(939425, J$.R(939417, 'parsedHost', parsedHost, false, false), 'hostname'),
                                                port: J$.C(56496, J$.G(939441, J$.R(939433, 'parsedHost', parsedHost, false, false), 'port')) ? J$.F(939473, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(939449, 'parseInt', undefined, true, true) : parseInt = J$.R(939449, 'parseInt', parseInt, true, true)), false)(J$.G(939465, J$.R(939457, 'parsedHost', parsedHost, false, false), 'port')) : J$.T(939481, 27017, 22, false)
                                            }, 11, false), result, false, false);
                                            if (J$.C(56504, J$.B(100194, '===', J$.G(939513, J$.R(939505, 'result', result, false, false), 'port'), J$.T(939521, 0, 22, false)))) {
                                                hostParsingError = J$.W(939553, 'hostParsingError', J$.F(939545, J$.R(939529, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939537, 'Invalid port (zero) with hostname', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(939561, undefined);
                                            }
                                            if (J$.C(56512, J$.B(100202, '>', J$.G(939577, J$.R(939569, 'result', result, false, false), 'port'), J$.T(939585, 65535, 22, false)))) {
                                                hostParsingError = J$.W(939617, 'hostParsingError', J$.F(939609, J$.R(939593, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939601, 'Invalid port (larger than 65535) with hostname', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(939625, undefined);
                                            }
                                            if (J$.C(56520, J$.B(100210, '<', J$.G(939641, J$.R(939633, 'result', result, false, false), 'port'), J$.T(939649, 0, 22, false)))) {
                                                hostParsingError = J$.W(939681, 'hostParsingError', J$.F(939673, J$.R(939657, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939665, 'Invalid port (negative number)', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(939689, undefined);
                                            }
                                            return J$.Rt(939705, J$.R(939697, 'result', result, false, false));
                                        } catch (J$e) {
                                            J$.Ex(941121, J$e);
                                        } finally {
                                            if (J$.Fr(941129))
                                                continue jalangiLabel21;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'filter', false)(J$.T(939809, function (host) {
                                jalangiLabel22:
                                    while (true) {
                                        try {
                                            J$.Fe(939785, arguments.callee, this, arguments);
                                            arguments = J$.N(939793, 'arguments', arguments, true, false, false);
                                            host = J$.N(939801, 'host', host, true, false, false);
                                            return J$.Rt(939777, J$.U(100226, '!', J$.U(100218, '!', J$.R(939769, 'host', host, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(941137, J$e);
                                        } finally {
                                            if (J$.Fr(941145))
                                                continue jalangiLabel22;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), hosts, false, false);
                            if (J$.C(56528, J$.R(939833, 'hostParsingError', hostParsingError, false, false))) {
                                return J$.Rt(939865, J$.F(939857, J$.R(939841, 'callback', callback, false, false), false)(J$.R(939849, 'hostParsingError', hostParsingError, false, false)));
                            }
                            if (J$.C(56552, J$.C(56544, J$.C(56536, J$.B(100234, '===', J$.G(939881, J$.R(939873, 'hosts', hosts, false, false), 'length'), J$.T(939889, 0, 22, false))) ? J$._() : J$.B(100242, '===', J$.G(939921, J$.G(939913, J$.R(939897, 'hosts', hosts, false, false), J$.T(939905, 0, 22, false)), 'host'), J$.T(939929, '', 21, false))) ? J$._() : J$.B(100250, '===', J$.G(939961, J$.G(939953, J$.R(939937, 'hosts', hosts, false, false), J$.T(939945, 0, 22, false)), 'host'), J$.T(939969, null, 25, false)))) {
                                return J$.Rt(940017, J$.F(940009, J$.R(939977, 'callback', callback, false, false), false)(J$.F(940001, J$.R(939985, 'MongoParseError', MongoParseError, false, true), true)(J$.T(939993, 'No hostname or hostnames provided in connection string', 21, false))));
                            }
                            var result = J$.W(940137, 'result', J$.T(940129, {
                                hosts: J$.R(940025, 'hosts', hosts, false, false),
                                auth: J$.C(56568, J$.C(56560, J$.G(940041, J$.R(940033, 'auth', auth, false, false), 'db')) ? J$._() : J$.G(940057, J$.R(940049, 'auth', auth, false, false), 'username')) ? J$.R(940065, 'auth', auth, false, false) : J$.T(940073, null, 25, false),
                                options: J$.C(56576, J$.G(940105, J$.M(940097, J$.I(typeof Object === 'undefined' ? Object = J$.R(940081, 'Object', undefined, true, true) : Object = J$.R(940081, 'Object', Object, true, true)), 'keys', false)(J$.R(940089, 'parsedOptions', parsedOptions, false, false)), 'length')) ? J$.R(940113, 'parsedOptions', parsedOptions, false, false) : J$.T(940121, null, 25, false)
                            }, 11, false), result, false, false);
                            if (J$.C(56592, J$.C(56584, J$.G(940153, J$.R(940145, 'result', result, false, false), 'auth')) ? J$.G(940177, J$.G(940169, J$.R(940161, 'result', result, false, false), 'auth'), 'db') : J$._())) {
                                J$.P(940217, J$.R(940185, 'result', result, false, false), 'defaultDatabase', J$.G(940209, J$.G(940201, J$.R(940193, 'result', result, false, false), 'auth'), 'db'));
                            } else {
                                J$.P(940241, J$.R(940225, 'result', result, false, false), 'defaultDatabase', J$.T(940233, 'test', 21, false));
                            }
                            try {
                                J$.F(940265, J$.R(940249, 'applyAuthExpectations', applyAuthExpectations, false, true), false)(J$.R(940257, 'result', result, false, false));
                            } catch (authError) {
                                J$.N(940305, 'authError', authError, false, false, true);
                                return J$.Rt(940297, J$.F(940289, J$.R(940273, 'callback', callback, false, false), false)(J$.R(940281, 'authError', authError, false, false)));
                            }
                            J$.F(940337, J$.R(940313, 'callback', callback, false, false), false)(J$.T(940321, null, 25, false), J$.R(940329, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(941153, J$e);
                        } finally {
                            if (J$.Fr(941161))
                                continue jalangiLabel23;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(940513, 'URL', URL, false, false, false);
            J$.N(940521, 'qs', qs, false, false, false);
            J$.N(940529, 'dns', dns, false, false, false);
            J$.N(940537, 'MongoParseError', MongoParseError, false, false, false);
            J$.N(940545, 'ReadPreference', ReadPreference, false, false, false);
            J$.N(940553, 'HOSTS_RX', HOSTS_RX, false, false, false);
            matchesParentDomain = J$.N(940569, 'matchesParentDomain', J$.T(940561, matchesParentDomain, 12, false), true, false, false);
            parseSrvConnectionString = J$.N(940585, 'parseSrvConnectionString', J$.T(940577, parseSrvConnectionString, 12, false), true, false, false);
            parseQueryStringItemValue = J$.N(940601, 'parseQueryStringItemValue', J$.T(940593, parseQueryStringItemValue, 12, false), true, false, false);
            J$.N(940609, 'BOOLEAN_OPTIONS', BOOLEAN_OPTIONS, false, false, false);
            J$.N(940617, 'STRING_OPTIONS', STRING_OPTIONS, false, false, false);
            J$.N(940625, 'AUTH_MECHANISMS', AUTH_MECHANISMS, false, false, false);
            J$.N(940633, 'CASE_TRANSLATION', CASE_TRANSLATION, false, false, false);
            applyConnectionStringOption = J$.N(940649, 'applyConnectionStringOption', J$.T(940641, applyConnectionStringOption, 12, false), true, false, false);
            J$.N(940657, 'USERNAME_REQUIRED_MECHANISMS', USERNAME_REQUIRED_MECHANISMS, false, false, false);
            splitArrayOfMultipleReadPreferenceTags = J$.N(940673, 'splitArrayOfMultipleReadPreferenceTags', J$.T(940665, splitArrayOfMultipleReadPreferenceTags, 12, false), true, false, false);
            applyAuthExpectations = J$.N(940689, 'applyAuthExpectations', J$.T(940681, applyAuthExpectations, 12, false), true, false, false);
            parseQueryString = J$.N(940705, 'parseQueryString', J$.T(940697, parseQueryString, 12, false), true, false, false);
            checkTLSOptions = J$.N(940721, 'checkTLSOptions', J$.T(940713, checkTLSOptions, 12, false), true, false, false);
            assertTlsOptionsAreEqual = J$.N(940737, 'assertTlsOptionsAreEqual', J$.T(940729, assertTlsOptionsAreEqual, 12, false), true, false, false);
            J$.N(940745, 'PROTOCOL_MONGODB', PROTOCOL_MONGODB, false, false, false);
            J$.N(940753, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, false, false);
            J$.N(940761, 'SUPPORTED_PROTOCOLS', SUPPORTED_PROTOCOLS, false, false, false);
            parseConnectionString = J$.N(940777, 'parseConnectionString', J$.T(940769, parseConnectionString, 12, false), true, false, false);
            J$.T(929465, 'use strict', 21, false);
            var URL = J$.W(929497, 'URL', J$.F(929489, J$.I(typeof require === 'undefined' ? require = J$.R(929473, 'require', undefined, true, true) : require = J$.R(929473, 'require', require, true, true)), false)(J$.T(929481, 'url', 21, false)), URL, false, true);
            var qs = J$.W(929529, 'qs', J$.F(929521, J$.I(typeof require === 'undefined' ? require = J$.R(929505, 'require', undefined, true, true) : require = J$.R(929505, 'require', require, true, true)), false)(J$.T(929513, 'querystring', 21, false)), qs, false, true);
            var dns = J$.W(929561, 'dns', J$.F(929553, J$.I(typeof require === 'undefined' ? require = J$.R(929537, 'require', undefined, true, true) : require = J$.R(929537, 'require', require, true, true)), false)(J$.T(929545, 'dns', 21, false)), dns, false, true);
            var MongoParseError = J$.W(929601, 'MongoParseError', J$.G(929593, J$.F(929585, J$.I(typeof require === 'undefined' ? require = J$.R(929569, 'require', undefined, true, true) : require = J$.R(929569, 'require', require, true, true)), false)(J$.T(929577, './error', 21, false)), 'MongoParseError'), MongoParseError, false, true);
            var ReadPreference = J$.W(929633, 'ReadPreference', J$.F(929625, J$.I(typeof require === 'undefined' ? require = J$.R(929609, 'require', undefined, true, true) : require = J$.R(929609, 'require', require, true, true)), false)(J$.T(929617, './topologies/read_preference', 21, false)), ReadPreference, false, true);
            var HOSTS_RX = J$.W(929649, 'HOSTS_RX', J$.T(929641, /(mongodb(?:\+srv|)):\/\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\/|)(.*)/, 14, false), HOSTS_RX, false, true);
            var BOOLEAN_OPTIONS = J$.W(932705, 'BOOLEAN_OPTIONS', J$.F(932697, J$.I(typeof Set === 'undefined' ? Set = J$.R(932625, 'Set', undefined, true, true) : Set = J$.R(932625, 'Set', Set, true, true)), true)(J$.T(932689, [
                J$.T(932633, 'slaveok', 21, false),
                J$.T(932641, 'slave_ok', 21, false),
                J$.T(932649, 'sslvalidate', 21, false),
                J$.T(932657, 'fsync', 21, false),
                J$.T(932665, 'safe', 21, false),
                J$.T(932673, 'retrywrites', 21, false),
                J$.T(932681, 'j', 21, false)
            ], 10, false)), BOOLEAN_OPTIONS, false, true);
            var STRING_OPTIONS = J$.W(932753, 'STRING_OPTIONS', J$.F(932745, J$.I(typeof Set === 'undefined' ? Set = J$.R(932713, 'Set', undefined, true, true) : Set = J$.R(932713, 'Set', Set, true, true)), true)(J$.T(932737, [
                J$.T(932721, 'authsource', 21, false),
                J$.T(932729, 'replicaset', 21, false)
            ], 10, false)), STRING_OPTIONS, false, true);
            var AUTH_MECHANISMS = J$.W(932841, 'AUTH_MECHANISMS', J$.F(932833, J$.I(typeof Set === 'undefined' ? Set = J$.R(932761, 'Set', undefined, true, true) : Set = J$.R(932761, 'Set', Set, true, true)), true)(J$.T(932825, [
                J$.T(932769, 'GSSAPI', 21, false),
                J$.T(932777, 'MONGODB-X509', 21, false),
                J$.T(932785, 'MONGODB-CR', 21, false),
                J$.T(932793, 'DEFAULT', 21, false),
                J$.T(932801, 'SCRAM-SHA-1', 21, false),
                J$.T(932809, 'SCRAM-SHA-256', 21, false),
                J$.T(932817, 'PLAIN', 21, false)
            ], 10, false)), AUTH_MECHANISMS, false, true);
            var CASE_TRANSLATION = J$.W(933121, 'CASE_TRANSLATION', J$.T(933113, {
                replicaset: J$.T(932849, 'replicaSet', 21, false),
                connecttimeoutms: J$.T(932857, 'connectTimeoutMS', 21, false),
                sockettimeoutms: J$.T(932865, 'socketTimeoutMS', 21, false),
                maxpoolsize: J$.T(932873, 'maxPoolSize', 21, false),
                minpoolsize: J$.T(932881, 'minPoolSize', 21, false),
                maxidletimems: J$.T(932889, 'maxIdleTimeMS', 21, false),
                waitqueuemultiple: J$.T(932897, 'waitQueueMultiple', 21, false),
                waitqueuetimeoutms: J$.T(932905, 'waitQueueTimeoutMS', 21, false),
                wtimeoutms: J$.T(932913, 'wtimeoutMS', 21, false),
                readconcern: J$.T(932921, 'readConcern', 21, false),
                readconcernlevel: J$.T(932929, 'readConcernLevel', 21, false),
                readpreference: J$.T(932937, 'readPreference', 21, false),
                maxstalenessseconds: J$.T(932945, 'maxStalenessSeconds', 21, false),
                readpreferencetags: J$.T(932953, 'readPreferenceTags', 21, false),
                authsource: J$.T(932961, 'authSource', 21, false),
                authmechanism: J$.T(932969, 'authMechanism', 21, false),
                authmechanismproperties: J$.T(932977, 'authMechanismProperties', 21, false),
                gssapiservicename: J$.T(932985, 'gssapiServiceName', 21, false),
                localthresholdms: J$.T(932993, 'localThresholdMS', 21, false),
                serverselectiontimeoutms: J$.T(933001, 'serverSelectionTimeoutMS', 21, false),
                serverselectiontryonce: J$.T(933009, 'serverSelectionTryOnce', 21, false),
                heartbeatfrequencyms: J$.T(933017, 'heartbeatFrequencyMS', 21, false),
                retrywrites: J$.T(933025, 'retryWrites', 21, false),
                uuidrepresentation: J$.T(933033, 'uuidRepresentation', 21, false),
                zlibcompressionlevel: J$.T(933041, 'zlibCompressionLevel', 21, false),
                tlsallowinvalidcertificates: J$.T(933049, 'tlsAllowInvalidCertificates', 21, false),
                tlsallowinvalidhostnames: J$.T(933057, 'tlsAllowInvalidHostnames', 21, false),
                tlsinsecure: J$.T(933065, 'tlsInsecure', 21, false),
                tlscafile: J$.T(933073, 'tlsCAFile', 21, false),
                tlscertificatekeyfile: J$.T(933081, 'tlsCertificateKeyFile', 21, false),
                tlscertificatekeyfilepassword: J$.T(933089, 'tlsCertificateKeyFilePassword', 21, false),
                wtimeout: J$.T(933097, 'wTimeoutMS', 21, false),
                j: J$.T(933105, 'journal', 21, false)
            }, 11, false), CASE_TRANSLATION, false, true);
            var USERNAME_REQUIRED_MECHANISMS = J$.W(934369, 'USERNAME_REQUIRED_MECHANISMS', J$.F(934361, J$.I(typeof Set === 'undefined' ? Set = J$.R(934305, 'Set', undefined, true, true) : Set = J$.R(934305, 'Set', Set, true, true)), true)(J$.T(934353, [
                J$.T(934313, 'GSSAPI', 21, false),
                J$.T(934321, 'MONGODB-CR', 21, false),
                J$.T(934329, 'PLAIN', 21, false),
                J$.T(934337, 'SCRAM-SHA-1', 21, false),
                J$.T(934345, 'SCRAM-SHA-256', 21, false)
            ], 10, false)), USERNAME_REQUIRED_MECHANISMS, false, true);
            var PROTOCOL_MONGODB = J$.W(937281, 'PROTOCOL_MONGODB', J$.T(937273, 'mongodb', 21, false), PROTOCOL_MONGODB, false, true);
            var PROTOCOL_MONGODB_SRV = J$.W(937297, 'PROTOCOL_MONGODB_SRV', J$.T(937289, 'mongodb+srv', 21, false), PROTOCOL_MONGODB_SRV, false, true);
            var SUPPORTED_PROTOCOLS = J$.W(937329, 'SUPPORTED_PROTOCOLS', J$.T(937321, [
                J$.R(937305, 'PROTOCOL_MONGODB', PROTOCOL_MONGODB, false, true),
                J$.R(937313, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true)
            ], 10, false), SUPPORTED_PROTOCOLS, false, true);
            J$.P(940497, J$.I(typeof module === 'undefined' ? module = J$.R(940481, 'module', undefined, true, true) : module = J$.R(940481, 'module', module, true, true)), 'exports', J$.R(940489, 'parseConnectionString', parseConnectionString, false, true));
        } catch (J$e) {
            J$.Ex(941169, J$e);
        } finally {
            if (J$.Sr(941177))
                continue jalangiLabel24;
            else
                break jalangiLabel24;
        }
    }
// JALANGI DO NOT INSTRUMENT

