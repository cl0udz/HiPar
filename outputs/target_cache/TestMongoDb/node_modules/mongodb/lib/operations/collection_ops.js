J$.noInstrEval = false;
jalangiLabel17:
    while (true) {
        try {
            J$.Se(1086393, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/mongodb/lib/operations/collection_ops.js');
            function checkForAtomicOperators(update) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1081649, arguments.callee, this, arguments);
                            arguments = J$.N(1081657, 'arguments', arguments, true, false, false);
                            update = J$.N(1081665, 'update', update, true, false, false);
                            J$.N(1081673, 'keys', keys, false, false, false);
                            if (J$.C(65984, J$.M(1081361, J$.I(typeof Array === 'undefined' ? Array = J$.R(1081345, 'Array', undefined, true, true) : Array = J$.R(1081345, 'Array', Array, true, true)), 'isArray', false)(J$.R(1081353, 'update', update, false, false)))) {
                                return J$.Rt(1081473, J$.M(1081465, J$.R(1081369, 'update', update, false, false), 'reduce', false)(J$.T(1081449, function (err, u) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(1081417, arguments.callee, this, arguments);
                                                arguments = J$.N(1081425, 'arguments', arguments, true, false, false);
                                                err = J$.N(1081433, 'err', err, true, false, false);
                                                u = J$.N(1081441, 'u', u, true, false, false);
                                                return J$.Rt(1081409, J$.C(65976, J$.R(1081377, 'err', err, false, false)) ? J$._() : J$.F(1081401, J$.R(1081385, 'checkForAtomicOperators', checkForAtomicOperators, false, true), false)(J$.R(1081393, 'u', u, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(1086705, J$e);
                                            } finally {
                                                if (J$.Fr(1086713))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), J$.T(1081457, null, 25, false)));
                            }
                            var keys = J$.W(1081505, 'keys', J$.M(1081497, J$.I(typeof Object === 'undefined' ? Object = J$.R(1081481, 'Object', undefined, true, true) : Object = J$.R(1081481, 'Object', Object, true, true)), 'keys', false)(J$.R(1081489, 'update', update, false, false)), keys, false, false);
                            if (J$.C(65992, J$.B(109330, '===', J$.G(1081521, J$.R(1081513, 'keys', keys, false, false), 'length'), J$.T(1081529, 0, 22, false)))) {
                                return J$.Rt(1081561, J$.F(1081553, J$.R(1081537, 'toError', toError, false, true), false)(J$.T(1081545, 'The update operation document must contain at least one atomic operator.', 21, false)));
                            }
                            if (J$.C(66000, J$.B(109338, '!==', J$.G(1081601, J$.G(1081585, J$.R(1081569, 'keys', keys, false, false), J$.T(1081577, 0, 22, false)), J$.T(1081593, 0, 22, false)), J$.T(1081609, '$', 21, false)))) {
                                return J$.Rt(1081641, J$.F(1081633, J$.R(1081617, 'toError', toError, false, true), false)(J$.T(1081625, 'the update operation document must contain atomic operators.', 21, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(1086721, J$e);
                        } finally {
                            if (J$.Fr(1086729))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createIndex(coll, fieldOrSpec, options, callback) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1081761, arguments.callee, this, arguments);
                            arguments = J$.N(1081769, 'arguments', arguments, true, false, false);
                            coll = J$.N(1081777, 'coll', coll, true, false, false);
                            fieldOrSpec = J$.N(1081785, 'fieldOrSpec', fieldOrSpec, true, false, false);
                            options = J$.N(1081793, 'options', options, true, false, false);
                            callback = J$.N(1081801, 'callback', callback, true, false, false);
                            J$.F(1081753, J$.R(1081681, 'createIndexDb', createIndexDb, false, true), false)(J$.G(1081705, J$.G(1081697, J$.R(1081689, 'coll', coll, false, false), 's'), 'db'), J$.G(1081721, J$.R(1081713, 'coll', coll, false, false), 'collectionName'), J$.R(1081729, 'fieldOrSpec', fieldOrSpec, false, false), J$.R(1081737, 'options', options, false, false), J$.R(1081745, 'callback', callback, false, false));
                        } catch (J$e) {
                            J$.Ex(1086737, J$e);
                        } finally {
                            if (J$.Fr(1086745))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createIndexes(coll, indexSpecs, options, callback) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1082425, arguments.callee, this, arguments);
                            arguments = J$.N(1082433, 'arguments', arguments, true, false, false);
                            coll = J$.N(1082441, 'coll', coll, true, false, false);
                            indexSpecs = J$.N(1082449, 'indexSpecs', indexSpecs, true, false, false);
                            options = J$.N(1082457, 'options', options, true, false, false);
                            callback = J$.N(1082465, 'callback', callback, true, false, false);
                            J$.N(1082473, 'capabilities', capabilities, false, false, false);
                            J$.N(1082481, 'i', i, false, false, false);
                            J$.N(1082489, 'keys', keys, false, false, false);
                            J$.N(1082497, 'name', name, false, false, false);
                            var capabilities = J$.W(1081841, 'capabilities', J$.M(1081833, J$.G(1081825, J$.G(1081817, J$.R(1081809, 'coll', coll, false, false), 's'), 'topology'), 'capabilities', false)(), capabilities, false, false);
                            for (var i = J$.W(1081857, 'i', J$.T(1081849, 0, 22, false), i, false, false); J$.C(66040, J$.B(109346, '<', J$.R(1081865, 'i', i, false, false), J$.G(1081881, J$.R(1081873, 'indexSpecs', indexSpecs, false, false), 'length'))); J$.B(109370, '-', i = J$.W(1081897, 'i', J$.B(109362, '+', J$.U(109354, '+', J$.R(1081889, 'i', i, false, false)), 1), i, false, false), 1)) {
                                if (J$.C(66032, J$.B(109378, '==', J$.G(1081929, J$.G(1081921, J$.R(1081905, 'indexSpecs', indexSpecs, false, false), J$.R(1081913, 'i', i, false, false)), 'name'), J$.T(1081937, null, 25, false)))) {
                                    var keys = J$.W(1081953, 'keys', J$.T(1081945, [], 10, false), keys, false, false);
                                    if (J$.C(66024, J$.C(66016, J$.C(66008, J$.G(1081985, J$.G(1081977, J$.R(1081961, 'indexSpecs', indexSpecs, false, false), J$.R(1081969, 'i', i, false, false)), 'collation')) ? J$.R(1081993, 'capabilities', capabilities, false, false) : J$._()) ? J$.U(109386, '!', J$.G(1082009, J$.R(1082001, 'capabilities', capabilities, false, false), 'commandsTakeCollation')) : J$._())) {
                                        return J$.Rt(1082057, J$.F(1082049, J$.R(1082017, 'callback', callback, false, false), false)(J$.F(1082041, J$.R(1082025, 'MongoError', MongoError, false, true), true)(J$.T(1082033, 'server/primary/mongos does not support collation', 21, false))));
                                    }
                                    for (var name in J$.H(1082201, J$.G(1082089, J$.G(1082081, J$.R(1082065, 'indexSpecs', indexSpecs, false, false), J$.R(1082073, 'i', i, false, false)), 'key'))) {
                                        J$.N(1082209, 'name', name, false, true, false);
                                        {
                                            {
                                                J$.M(1082193, J$.R(1082097, 'keys', keys, false, false), 'push', false)(J$.M(1082185, J$.M(1082129, J$.T(1082105, '', 21, false), 'concat', false)(J$.R(1082113, 'name', name, false, false), J$.T(1082121, '_', 21, false)), 'concat', false)(J$.G(1082177, J$.G(1082161, J$.G(1082153, J$.R(1082137, 'indexSpecs', indexSpecs, false, false), J$.R(1082145, 'i', i, false, false)), 'key'), J$.R(1082169, 'name', name, false, false))));
                                            }
                                        }
                                    }
                                    J$.P(1082265, J$.G(1082233, J$.R(1082217, 'indexSpecs', indexSpecs, false, false), J$.R(1082225, 'i', i, false, false)), 'name', J$.M(1082257, J$.R(1082241, 'keys', keys, false, false), 'join', false)(J$.T(1082249, '_', 21, false)));
                                }
                            }
                            options = J$.W(1082329, 'options', J$.M(1082321, J$.I(typeof Object === 'undefined' ? Object = J$.R(1082273, 'Object', undefined, true, true) : Object = J$.R(1082273, 'Object', Object, true, true)), 'assign', false)(J$.T(1082281, {}, 11, false), J$.R(1082289, 'options', options, false, false), J$.T(1082313, { readPreference: J$.G(1082305, J$.R(1082297, 'ReadPreference', ReadPreference, false, true), 'PRIMARY') }, 11, false)), options, false, false);
                            J$.F(1082417, J$.R(1082337, 'executeCommand', executeCommand, false, true), false)(J$.G(1082361, J$.G(1082353, J$.R(1082345, 'coll', coll, false, false), 's'), 'db'), J$.T(1082393, {
                                createIndexes: J$.G(1082377, J$.R(1082369, 'coll', coll, false, false), 'collectionName'),
                                indexes: J$.R(1082385, 'indexSpecs', indexSpecs, false, false)
                            }, 11, false), J$.R(1082401, 'options', options, false, false), J$.R(1082409, 'callback', callback, false, false));
                        } catch (J$e) {
                            J$.Ex(1086753, J$e);
                        } finally {
                            if (J$.Fr(1086761))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function ensureIndex(coll, fieldOrSpec, options, callback) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1082585, arguments.callee, this, arguments);
                            arguments = J$.N(1082593, 'arguments', arguments, true, false, false);
                            coll = J$.N(1082601, 'coll', coll, true, false, false);
                            fieldOrSpec = J$.N(1082609, 'fieldOrSpec', fieldOrSpec, true, false, false);
                            options = J$.N(1082617, 'options', options, true, false, false);
                            callback = J$.N(1082625, 'callback', callback, true, false, false);
                            J$.F(1082577, J$.R(1082505, 'ensureIndexDb', ensureIndexDb, false, true), false)(J$.G(1082529, J$.G(1082521, J$.R(1082513, 'coll', coll, false, false), 's'), 'db'), J$.G(1082545, J$.R(1082537, 'coll', coll, false, false), 'collectionName'), J$.R(1082553, 'fieldOrSpec', fieldOrSpec, false, false), J$.R(1082561, 'options', options, false, false), J$.R(1082569, 'callback', callback, false, false));
                        } catch (J$e) {
                            J$.Ex(1086769, J$e);
                        } finally {
                            if (J$.Fr(1086777))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function group(coll, keys, condition, initial, reduce, finalize, command, options, callback) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1083993, arguments.callee, this, arguments);
                            arguments = J$.N(1084001, 'arguments', arguments, true, false, false);
                            coll = J$.N(1084009, 'coll', coll, true, false, false);
                            keys = J$.N(1084017, 'keys', keys, true, false, false);
                            condition = J$.N(1084025, 'condition', condition, true, false, false);
                            initial = J$.N(1084033, 'initial', initial, true, false, false);
                            reduce = J$.N(1084041, 'reduce', reduce, true, false, false);
                            finalize = J$.N(1084049, 'finalize', finalize, true, false, false);
                            command = J$.N(1084057, 'command', command, true, false, false);
                            options = J$.N(1084065, 'options', options, true, false, false);
                            callback = J$.N(1084073, 'callback', callback, true, false, false);
                            J$.N(1084081, 'reduceFunction', reduceFunction, false, false, false);
                            J$.N(1084089, 'selector', selector, false, false, false);
                            J$.N(1084097, 'hash', hash, false, false, false);
                            J$.N(1084105, 'scope', scope, false, false, false);
                            J$.N(1084113, 'groupfn', groupfn, false, false, false);
                            if (J$.C(66152, J$.R(1082633, 'command', command, false, false))) {
                                var reduceFunction = J$.W(1082705, 'reduceFunction', J$.C(66056, J$.C(66048, J$.R(1082641, 'reduce', reduce, false, false)) ? J$.B(109394, '===', J$.G(1082657, J$.R(1082649, 'reduce', reduce, false, false), '_bsontype'), J$.T(1082665, 'Code', 21, false)) : J$._()) ? J$.R(1082673, 'reduce', reduce, false, false) : J$.F(1082697, J$.R(1082681, 'Code', Code, false, true), true)(J$.R(1082689, 'reduce', reduce, false, false)), reduceFunction, false, false);
                                var selector = J$.W(1082777, 'selector', J$.T(1082769, {
                                    group: J$.T(1082761, {
                                        ns: J$.G(1082721, J$.R(1082713, 'coll', coll, false, false), 'collectionName'),
                                        $reduce: J$.R(1082729, 'reduceFunction', reduceFunction, false, false),
                                        cond: J$.R(1082737, 'condition', condition, false, false),
                                        initial: J$.R(1082745, 'initial', initial, false, false),
                                        out: J$.T(1082753, 'inline', 21, false)
                                    }, 11, false)
                                }, 11, false), selector, false, false);
                                if (J$.C(66064, J$.B(109402, '!=', J$.R(1082785, 'finalize', finalize, false, false), J$.T(1082793, null, 25, false))))
                                    J$.P(1082833, J$.G(1082809, J$.R(1082801, 'selector', selector, false, false), 'group'), J$.T(1082817, 'finalize', 21, false), J$.R(1082825, 'finalize', finalize, false, false));
                                if (J$.C(66104, J$.C(66080, J$.B(109418, '===', J$.T(1082841, 'function', 21, false), J$.U(109410, 'typeof', J$.R(1082849, 'keys', keys, false, false)))) ? J$._() : J$.C(66072, J$.R(1082857, 'keys', keys, false, false)) ? J$.B(109426, '===', J$.G(1082873, J$.R(1082865, 'keys', keys, false, false), '_bsontype'), J$.T(1082881, 'Code', 21, false)) : J$._())) {
                                    J$.P(1082969, J$.G(1082897, J$.R(1082889, 'selector', selector, false, false), 'group'), '$keyf', J$.C(66096, J$.C(66088, J$.R(1082905, 'keys', keys, false, false)) ? J$.B(109434, '===', J$.G(1082921, J$.R(1082913, 'keys', keys, false, false), '_bsontype'), J$.T(1082929, 'Code', 21, false)) : J$._()) ? J$.R(1082937, 'keys', keys, false, false) : J$.F(1082961, J$.R(1082945, 'Code', Code, false, true), true)(J$.R(1082953, 'keys', keys, false, false)));
                                } else {
                                    var hash = J$.W(1082985, 'hash', J$.T(1082977, {}, 11, false), hash, false, false);
                                    J$.M(1083065, J$.R(1082993, 'keys', keys, false, false), 'forEach', false)(J$.T(1083057, function (key) {
                                        jalangiLabel5:
                                            while (true) {
                                                try {
                                                    J$.Fe(1083033, arguments.callee, this, arguments);
                                                    arguments = J$.N(1083041, 'arguments', arguments, true, false, false);
                                                    key = J$.N(1083049, 'key', key, true, false, false);
                                                    J$.P(1083025, J$.R(1083001, 'hash', hash, false, false), J$.R(1083009, 'key', key, false, false), J$.T(1083017, 1, 22, false));
                                                } catch (J$e) {
                                                    J$.Ex(1086785, J$e);
                                                } finally {
                                                    if (J$.Fr(1086793))
                                                        continue jalangiLabel5;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false));
                                    J$.P(1083097, J$.G(1083081, J$.R(1083073, 'selector', selector, false, false), 'group'), 'key', J$.R(1083089, 'hash', hash, false, false));
                                }
                                options = J$.W(1083137, 'options', J$.M(1083129, J$.I(typeof Object === 'undefined' ? Object = J$.R(1083105, 'Object', undefined, true, true) : Object = J$.R(1083105, 'Object', Object, true, true)), 'assign', false)(J$.T(1083113, {}, 11, false), J$.R(1083121, 'options', options, false, false)), options, false, false);
                                J$.P(1083185, J$.R(1083145, 'options', options, false, false), 'readPreference', J$.F(1083177, J$.R(1083153, 'resolveReadPreference', resolveReadPreference, false, true), false)(J$.R(1083161, 'coll', coll, false, false), J$.R(1083169, 'options', options, false, false)));
                                J$.F(1083225, J$.R(1083193, 'decorateWithReadConcern', decorateWithReadConcern, false, true), false)(J$.R(1083201, 'selector', selector, false, false), J$.R(1083209, 'coll', coll, false, false), J$.R(1083217, 'options', options, false, false));
                                try {
                                    J$.F(1083265, J$.R(1083233, 'decorateWithCollation', decorateWithCollation, false, true), false)(J$.R(1083241, 'selector', selector, false, false), J$.R(1083249, 'coll', coll, false, false), J$.R(1083257, 'options', options, false, false));
                                } catch (err) {
                                    J$.N(1083313, 'err', err, false, false, true);
                                    return J$.Rt(1083305, J$.F(1083297, J$.R(1083273, 'callback', callback, false, false), false)(J$.R(1083281, 'err', err, false, false), J$.T(1083289, null, 25, false)));
                                }
                                J$.F(1083513, J$.R(1083321, 'executeCommand', executeCommand, false, true), false)(J$.G(1083345, J$.G(1083337, J$.R(1083329, 'coll', coll, false, false), 's'), 'db'), J$.R(1083353, 'selector', selector, false, false), J$.R(1083361, 'options', options, false, false), J$.T(1083505, function (err, result) {
                                    jalangiLabel6:
                                        while (true) {
                                            try {
                                                J$.Fe(1083473, arguments.callee, this, arguments);
                                                arguments = J$.N(1083481, 'arguments', arguments, true, false, false);
                                                err = J$.N(1083489, 'err', err, true, false, false);
                                                result = J$.N(1083497, 'result', result, true, false, false);
                                                if (J$.C(66112, J$.R(1083369, 'err', err, false, false)))
                                                    return J$.Rt(1083417, J$.F(1083409, J$.R(1083377, 'handleCallback', handleCallback, false, true), false)(J$.R(1083385, 'callback', callback, false, false), J$.R(1083393, 'err', err, false, false), J$.T(1083401, null, 25, false)));
                                                J$.F(1083465, J$.R(1083425, 'handleCallback', handleCallback, false, true), false)(J$.R(1083433, 'callback', callback, false, false), J$.T(1083441, null, 25, false), J$.G(1083457, J$.R(1083449, 'result', result, false, false), 'retval'));
                                            } catch (J$e) {
                                                J$.Ex(1086801, J$e);
                                            } finally {
                                                if (J$.Fr(1086809))
                                                    continue jalangiLabel6;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            } else {
                                var scope = J$.W(1083585, 'scope', J$.C(66128, J$.C(66120, J$.B(109442, '!=', J$.R(1083521, 'reduce', reduce, false, false), J$.T(1083529, null, 25, false))) ? J$.B(109450, '===', J$.G(1083545, J$.R(1083537, 'reduce', reduce, false, false), '_bsontype'), J$.T(1083553, 'Code', 21, false)) : J$._()) ? J$.G(1083569, J$.R(1083561, 'reduce', reduce, false, false), 'scope') : J$.T(1083577, {}, 11, false), scope, false, false);
                                J$.P(1083617, J$.R(1083593, 'scope', scope, false, false), 'ns', J$.G(1083609, J$.R(1083601, 'coll', coll, false, false), 'collectionName'));
                                J$.P(1083641, J$.R(1083625, 'scope', scope, false, false), 'keys', J$.R(1083633, 'keys', keys, false, false));
                                J$.P(1083665, J$.R(1083649, 'scope', scope, false, false), 'condition', J$.R(1083657, 'condition', condition, false, false));
                                J$.P(1083689, J$.R(1083673, 'scope', scope, false, false), 'initial', J$.R(1083681, 'initial', initial, false, false));
                                var groupfn = J$.W(1083745, 'groupfn', J$.M(1083737, J$.R(1083697, 'groupFunction', groupFunction, false, true), 'replace', false)(J$.T(1083705, / reduce;/, 14, false), J$.B(109458, '+', J$.M(1083721, J$.R(1083713, 'reduce', reduce, false, false), 'toString', false)(), J$.T(1083729, ';', 21, false))), groupfn, false, false);
                                J$.F(1083985, J$.R(1083753, 'evaluate', evaluate, false, true), false)(J$.G(1083777, J$.G(1083769, J$.R(1083761, 'coll', coll, false, false), 's'), 'db'), J$.F(1083809, J$.R(1083785, 'Code', Code, false, true), true)(J$.R(1083793, 'groupfn', groupfn, false, false), J$.R(1083801, 'scope', scope, false, false)), J$.T(1083817, null, 25, false), J$.R(1083825, 'options', options, false, false), J$.T(1083977, function (err, results) {
                                    jalangiLabel7:
                                        while (true) {
                                            try {
                                                J$.Fe(1083945, arguments.callee, this, arguments);
                                                arguments = J$.N(1083953, 'arguments', arguments, true, false, false);
                                                err = J$.N(1083961, 'err', err, true, false, false);
                                                results = J$.N(1083969, 'results', results, true, false, false);
                                                if (J$.C(66136, J$.R(1083833, 'err', err, false, false)))
                                                    return J$.Rt(1083881, J$.F(1083873, J$.R(1083841, 'handleCallback', handleCallback, false, true), false)(J$.R(1083849, 'callback', callback, false, false), J$.R(1083857, 'err', err, false, false), J$.T(1083865, null, 25, false)));
                                                J$.F(1083937, J$.R(1083889, 'handleCallback', handleCallback, false, true), false)(J$.R(1083897, 'callback', callback, false, false), J$.T(1083905, null, 25, false), J$.C(66144, J$.G(1083921, J$.R(1083913, 'results', results, false, false), 'result')) ? J$._() : J$.R(1083929, 'results', results, false, false));
                                            } catch (J$e) {
                                                J$.Ex(1086817, J$e);
                                            } finally {
                                                if (J$.Fr(1086825))
                                                    continue jalangiLabel7;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            }
                        } catch (J$e) {
                            J$.Ex(1086833, J$e);
                        } finally {
                            if (J$.Fr(1086841))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function indexes(coll, options, callback) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1084249, arguments.callee, this, arguments);
                            arguments = J$.N(1084257, 'arguments', arguments, true, false, false);
                            coll = J$.N(1084265, 'coll', coll, true, false, false);
                            options = J$.N(1084273, 'options', options, true, false, false);
                            callback = J$.N(1084281, 'callback', callback, true, false, false);
                            options = J$.W(1084169, 'options', J$.M(1084161, J$.I(typeof Object === 'undefined' ? Object = J$.R(1084121, 'Object', undefined, true, true) : Object = J$.R(1084121, 'Object', Object, true, true)), 'assign', false)(J$.T(1084129, {}, 11, false), J$.T(1084145, { full: J$.T(1084137, true, 23, false) }, 11, false), J$.R(1084153, 'options', options, false, false)), options, false, false);
                            J$.F(1084241, J$.R(1084177, 'indexInformationDb', indexInformationDb, false, true), false)(J$.G(1084201, J$.G(1084193, J$.R(1084185, 'coll', coll, false, false), 's'), 'db'), J$.G(1084217, J$.R(1084209, 'coll', coll, false, false), 'collectionName'), J$.R(1084225, 'options', options, false, false), J$.R(1084233, 'callback', callback, false, false));
                        } catch (J$e) {
                            J$.Ex(1086849, J$e);
                        } finally {
                            if (J$.Fr(1086857))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function indexExists(coll, indexes, options, callback) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(1084729, arguments.callee, this, arguments);
                            arguments = J$.N(1084737, 'arguments', arguments, true, false, false);
                            coll = J$.N(1084745, 'coll', coll, true, false, false);
                            indexes = J$.N(1084753, 'indexes', indexes, true, false, false);
                            options = J$.N(1084761, 'options', options, true, false, false);
                            callback = J$.N(1084769, 'callback', callback, true, false, false);
                            J$.F(1084721, J$.R(1084289, 'indexInformation', indexInformation, false, true), false)(J$.R(1084297, 'coll', coll, false, false), J$.R(1084305, 'options', options, false, false), J$.T(1084713, function (err, indexInformation) {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(1084673, arguments.callee, this, arguments);
                                            arguments = J$.N(1084681, 'arguments', arguments, true, false, false);
                                            err = J$.N(1084689, 'err', err, true, false, false);
                                            indexInformation = J$.N(1084697, 'indexInformation', indexInformation, true, false, false);
                                            J$.N(1084705, 'i', i, false, false, false);
                                            if (J$.C(66160, J$.B(109466, '!=', J$.R(1084313, 'err', err, false, false), J$.T(1084321, null, 25, false))))
                                                return J$.Rt(1084369, J$.F(1084361, J$.R(1084329, 'handleCallback', handleCallback, false, true), false)(J$.R(1084337, 'callback', callback, false, false), J$.R(1084345, 'err', err, false, false), J$.T(1084353, null, 25, false)));
                                            if (J$.C(66168, J$.U(109474, '!', J$.M(1084393, J$.I(typeof Array === 'undefined' ? Array = J$.R(1084377, 'Array', undefined, true, true) : Array = J$.R(1084377, 'Array', Array, true, true)), 'isArray', false)(J$.R(1084385, 'indexes', indexes, false, false)))))
                                                return J$.Rt(1084465, J$.F(1084457, J$.R(1084401, 'handleCallback', handleCallback, false, true), false)(J$.R(1084409, 'callback', callback, false, false), J$.T(1084417, null, 25, false), J$.B(109482, '!=', J$.G(1084441, J$.R(1084425, 'indexInformation', indexInformation, false, false), J$.R(1084433, 'indexes', indexes, false, false)), J$.T(1084449, null, 25, false))));
                                            for (var i = J$.W(1084481, 'i', J$.T(1084473, 0, 22, false), i, false, false); J$.C(66184, J$.B(109490, '<', J$.R(1084489, 'i', i, false, false), J$.G(1084505, J$.R(1084497, 'indexes', indexes, false, false), 'length'))); J$.B(109514, '-', i = J$.W(1084521, 'i', J$.B(109506, '+', J$.U(109498, '+', J$.R(1084513, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                if (J$.C(66176, J$.B(109522, '==', J$.G(1084561, J$.R(1084529, 'indexInformation', indexInformation, false, false), J$.G(1084553, J$.R(1084537, 'indexes', indexes, false, false), J$.R(1084545, 'i', i, false, false))), J$.T(1084569, null, 25, false)))) {
                                                    return J$.Rt(1084617, J$.F(1084609, J$.R(1084577, 'handleCallback', handleCallback, false, true), false)(J$.R(1084585, 'callback', callback, false, false), J$.T(1084593, null, 25, false), J$.T(1084601, false, 23, false)));
                                                }
                                            }
                                            return J$.Rt(1084665, J$.F(1084657, J$.R(1084625, 'handleCallback', handleCallback, false, true), false)(J$.R(1084633, 'callback', callback, false, false), J$.T(1084641, null, 25, false), J$.T(1084649, true, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(1086865, J$e);
                                        } finally {
                                            if (J$.Fr(1086873))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(1086881, J$e);
                        } finally {
                            if (J$.Fr(1086889))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function indexInformation(coll, options, callback) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(1084849, arguments.callee, this, arguments);
                            arguments = J$.N(1084857, 'arguments', arguments, true, false, false);
                            coll = J$.N(1084865, 'coll', coll, true, false, false);
                            options = J$.N(1084873, 'options', options, true, false, false);
                            callback = J$.N(1084881, 'callback', callback, true, false, false);
                            J$.F(1084841, J$.R(1084777, 'indexInformationDb', indexInformationDb, false, true), false)(J$.G(1084801, J$.G(1084793, J$.R(1084785, 'coll', coll, false, false), 's'), 'db'), J$.G(1084817, J$.R(1084809, 'coll', coll, false, false), 'collectionName'), J$.R(1084825, 'options', options, false, false), J$.R(1084833, 'callback', callback, false, false));
                        } catch (J$e) {
                            J$.Ex(1086897, J$e);
                        } finally {
                            if (J$.Fr(1086905))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parallelCollectionScan(coll, options, callback) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(1085673, arguments.callee, this, arguments);
                            arguments = J$.N(1085681, 'arguments', arguments, true, false, false);
                            coll = J$.N(1085689, 'coll', coll, true, false, false);
                            options = J$.N(1085697, 'options', options, true, false, false);
                            callback = J$.N(1085705, 'callback', callback, true, false, false);
                            J$.N(1085713, 'commandObject', commandObject, false, false, false);
                            J$.N(1085721, 'raw', raw, false, false, false);
                            var commandObject = J$.W(1084929, 'commandObject', J$.T(1084921, {
                                parallelCollectionScan: J$.G(1084897, J$.R(1084889, 'coll', coll, false, false), 'collectionName'),
                                numCursors: J$.G(1084913, J$.R(1084905, 'options', options, false, false), 'numCursors')
                            }, 11, false), commandObject, false, false);
                            J$.F(1084969, J$.R(1084937, 'decorateWithReadConcern', decorateWithReadConcern, false, true), false)(J$.R(1084945, 'commandObject', commandObject, false, false), J$.R(1084953, 'coll', coll, false, false), J$.R(1084961, 'options', options, false, false));
                            var raw = J$.W(1084993, 'raw', J$.G(1084985, J$.R(1084977, 'options', options, false, false), 'raw'), raw, false, false);
                            J$.B(109530, 'delete', J$.R(1085001, 'options', options, false, false), J$.T(1085009, 'raw', 21, false));
                            J$.F(1085665, J$.R(1085017, 'executeCommand', executeCommand, false, true), false)(J$.G(1085041, J$.G(1085033, J$.R(1085025, 'coll', coll, false, false), 's'), 'db'), J$.R(1085049, 'commandObject', commandObject, false, false), J$.R(1085057, 'options', options, false, false), J$.T(1085657, function (err, result) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(1085593, arguments.callee, this, arguments);
                                            arguments = J$.N(1085601, 'arguments', arguments, true, false, false);
                                            err = J$.N(1085609, 'err', err, true, false, false);
                                            result = J$.N(1085617, 'result', result, true, false, false);
                                            J$.N(1085625, 'cursors', cursors, false, false, false);
                                            J$.N(1085633, 'i', i, false, false, false);
                                            J$.N(1085641, 'rawId', rawId, false, false, false);
                                            J$.N(1085649, 'cursorId', cursorId, false, false, false);
                                            if (J$.C(66192, J$.R(1085065, 'err', err, false, false)))
                                                return J$.Rt(1085113, J$.F(1085105, J$.R(1085073, 'handleCallback', handleCallback, false, true), false)(J$.R(1085081, 'callback', callback, false, false), J$.R(1085089, 'err', err, false, false), J$.T(1085097, null, 25, false)));
                                            if (J$.C(66200, J$.B(109538, '==', J$.R(1085121, 'result', result, false, false), J$.T(1085129, null, 25, false))))
                                                return J$.Rt(1085193, J$.F(1085185, J$.R(1085137, 'handleCallback', handleCallback, false, true), false)(J$.R(1085145, 'callback', callback, false, false), J$.F(1085169, J$.I(typeof Error === 'undefined' ? Error = J$.R(1085153, 'Error', undefined, true, true) : Error = J$.R(1085153, 'Error', Error, true, true)), true)(J$.T(1085161, 'no result returned for parallelCollectionScan', 21, false)), J$.T(1085177, null, 25, false)));
                                            options = J$.W(1085241, 'options', J$.M(1085233, J$.I(typeof Object === 'undefined' ? Object = J$.R(1085201, 'Object', undefined, true, true) : Object = J$.R(1085201, 'Object', Object, true, true)), 'assign', false)(J$.T(1085217, { explicitlyIgnoreSession: J$.T(1085209, true, 23, false) }, 11, false), J$.R(1085225, 'options', options, false, false)), options, false, false);
                                            var cursors = J$.W(1085257, 'cursors', J$.T(1085249, [], 10, false), cursors, false, false);
                                            if (J$.C(66208, J$.R(1085265, 'raw', raw, false, false)))
                                                J$.P(1085289, J$.R(1085273, 'options', options, false, false), 'raw', J$.R(1085281, 'raw', raw, false, false));
                                            for (var i = J$.W(1085305, 'i', J$.T(1085297, 0, 22, false), i, false, false); J$.C(66224, J$.B(109546, '<', J$.R(1085313, 'i', i, false, false), J$.G(1085337, J$.G(1085329, J$.R(1085321, 'result', result, false, false), 'cursors'), 'length'))); J$.B(109570, '-', i = J$.W(1085353, 'i', J$.B(109562, '+', J$.U(109554, '+', J$.R(1085345, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                var rawId = J$.W(1085409, 'rawId', J$.G(1085401, J$.G(1085393, J$.G(1085385, J$.G(1085369, J$.R(1085361, 'result', result, false, false), 'cursors'), J$.R(1085377, 'i', i, false, false)), 'cursor'), 'id'), rawId, false, false);
                                                var cursorId = J$.W(1085465, 'cursorId', J$.C(66216, J$.B(109586, '===', J$.U(109578, 'typeof', J$.R(1085417, 'rawId', rawId, false, false)), J$.T(1085425, 'number', 21, false))) ? J$.M(1085449, J$.R(1085433, 'Long', Long, false, true), 'fromNumber', false)(J$.R(1085441, 'rawId', rawId, false, false)) : J$.R(1085457, 'rawId', rawId, false, false), cursorId, false, false);
                                                J$.M(1085545, J$.R(1085473, 'cursors', cursors, false, false), 'push', false)(J$.M(1085537, J$.G(1085497, J$.G(1085489, J$.R(1085481, 'coll', coll, false, false), 's'), 'topology'), 'cursor', false)(J$.G(1085513, J$.R(1085505, 'coll', coll, false, false), 'namespace'), J$.R(1085521, 'cursorId', cursorId, false, false), J$.R(1085529, 'options', options, false, false)));
                                            }
                                            J$.F(1085585, J$.R(1085553, 'handleCallback', handleCallback, false, true), false)(J$.R(1085561, 'callback', callback, false, false), J$.T(1085569, null, 25, false), J$.R(1085577, 'cursors', cursors, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1086913, J$e);
                                        } finally {
                                            if (J$.Fr(1086921))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(1086929, J$e);
                        } finally {
                            if (J$.Fr(1086937))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function save(coll, doc, options, callback) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(1086233, arguments.callee, this, arguments);
                            arguments = J$.N(1086241, 'arguments', arguments, true, false, false);
                            coll = J$.N(1086249, 'coll', coll, true, false, false);
                            doc = J$.N(1086257, 'doc', doc, true, false, false);
                            options = J$.N(1086265, 'options', options, true, false, false);
                            callback = J$.N(1086273, 'callback', callback, true, false, false);
                            J$.N(1086281, 'finalOptions', finalOptions, false, false, false);
                            var finalOptions = J$.W(1085825, 'finalOptions', J$.F(1085817, J$.R(1085729, 'applyWriteConcern', applyWriteConcern, false, true), false)(J$.M(1085761, J$.I(typeof Object === 'undefined' ? Object = J$.R(1085737, 'Object', undefined, true, true) : Object = J$.R(1085737, 'Object', Object, true, true)), 'assign', false)(J$.T(1085745, {}, 11, false), J$.R(1085753, 'options', options, false, false)), J$.T(1085801, {
                                db: J$.G(1085785, J$.G(1085777, J$.R(1085769, 'coll', coll, false, false), 's'), 'db'),
                                collection: J$.R(1085793, 'coll', coll, false, false)
                            }, 11, false), J$.R(1085809, 'options', options, false, false)), finalOptions, false, false);
                            if (J$.C(66232, J$.B(109594, '!=', J$.G(1085841, J$.R(1085833, 'doc', doc, false, false), '_id'), J$.T(1085849, null, 25, false)))) {
                                J$.P(1085873, J$.R(1085857, 'finalOptions', finalOptions, false, false), 'upsert', J$.T(1085865, true, 23, false));
                                return J$.Rt(1085953, J$.F(1085945, J$.R(1085881, 'updateDocuments', updateDocuments, false, true), false)(J$.R(1085889, 'coll', coll, false, false), J$.T(1085913, { _id: J$.G(1085905, J$.R(1085897, 'doc', doc, false, false), '_id') }, 11, false), J$.R(1085921, 'doc', doc, false, false), J$.R(1085929, 'finalOptions', finalOptions, false, false), J$.R(1085937, 'callback', callback, false, false)));
                            }
                            J$.F(1086225, J$.R(1085961, 'insertDocuments', insertDocuments, false, true), false)(J$.R(1085969, 'coll', coll, false, false), J$.T(1085985, [J$.R(1085977, 'doc', doc, false, false)], 10, false), J$.R(1085993, 'finalOptions', finalOptions, false, false), J$.T(1086217, function (err, result) {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(1086185, arguments.callee, this, arguments);
                                            arguments = J$.N(1086193, 'arguments', arguments, true, false, false);
                                            err = J$.N(1086201, 'err', err, true, false, false);
                                            result = J$.N(1086209, 'result', result, true, false, false);
                                            if (J$.C(66240, J$.B(109602, '==', J$.R(1086001, 'callback', callback, false, false), J$.T(1086009, null, 25, false))))
                                                return J$.Rt(1086017, undefined);
                                            if (J$.C(66248, J$.B(109610, '==', J$.R(1086025, 'doc', doc, false, false), J$.T(1086033, null, 25, false))))
                                                return J$.Rt(1086081, J$.F(1086073, J$.R(1086041, 'handleCallback', handleCallback, false, true), false)(J$.R(1086049, 'callback', callback, false, false), J$.T(1086057, null, 25, false), J$.T(1086065, null, 25, false)));
                                            if (J$.C(66256, J$.R(1086089, 'err', err, false, false)))
                                                return J$.Rt(1086137, J$.F(1086129, J$.R(1086097, 'handleCallback', handleCallback, false, true), false)(J$.R(1086105, 'callback', callback, false, false), J$.R(1086113, 'err', err, false, false), J$.T(1086121, null, 25, false)));
                                            J$.F(1086177, J$.R(1086145, 'handleCallback', handleCallback, false, true), false)(J$.R(1086153, 'callback', callback, false, false), J$.T(1086161, null, 25, false), J$.R(1086169, 'result', result, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1086945, J$e);
                                        } finally {
                                            if (J$.Fr(1086953))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(1086961, J$e);
                        } finally {
                            if (J$.Fr(1086969))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1086401, 'applyWriteConcern', applyWriteConcern, false, false, false);
            J$.N(1086409, 'Code', Code, false, false, false);
            J$.N(1086417, 'createIndexDb', createIndexDb, false, false, false);
            J$.N(1086425, 'decorateWithCollation', decorateWithCollation, false, false, false);
            J$.N(1086433, 'decorateWithReadConcern', decorateWithReadConcern, false, false, false);
            J$.N(1086441, 'ensureIndexDb', ensureIndexDb, false, false, false);
            J$.N(1086449, 'evaluate', evaluate, false, false, false);
            J$.N(1086457, 'executeCommand', executeCommand, false, false, false);
            J$.N(1086465, 'resolveReadPreference', resolveReadPreference, false, false, false);
            J$.N(1086473, 'handleCallback', handleCallback, false, false, false);
            J$.N(1086481, 'indexInformationDb', indexInformationDb, false, false, false);
            J$.N(1086489, 'Long', Long, false, false, false);
            J$.N(1086497, 'MongoError', MongoError, false, false, false);
            J$.N(1086505, 'ReadPreference', ReadPreference, false, false, false);
            J$.N(1086513, 'toError', toError, false, false, false);
            J$.N(1086521, 'insertDocuments', insertDocuments, false, false, false);
            J$.N(1086529, 'updateDocuments', updateDocuments, false, false, false);
            J$.N(1086537, 'groupFunction', groupFunction, false, false, false);
            checkForAtomicOperators = J$.N(1086553, 'checkForAtomicOperators', J$.T(1086545, checkForAtomicOperators, 12, false), true, false, false);
            createIndex = J$.N(1086569, 'createIndex', J$.T(1086561, createIndex, 12, false), true, false, false);
            createIndexes = J$.N(1086585, 'createIndexes', J$.T(1086577, createIndexes, 12, false), true, false, false);
            ensureIndex = J$.N(1086601, 'ensureIndex', J$.T(1086593, ensureIndex, 12, false), true, false, false);
            group = J$.N(1086617, 'group', J$.T(1086609, group, 12, false), true, false, false);
            indexes = J$.N(1086633, 'indexes', J$.T(1086625, indexes, 12, false), true, false, false);
            indexExists = J$.N(1086649, 'indexExists', J$.T(1086641, indexExists, 12, false), true, false, false);
            indexInformation = J$.N(1086665, 'indexInformation', J$.T(1086657, indexInformation, 12, false), true, false, false);
            parallelCollectionScan = J$.N(1086681, 'parallelCollectionScan', J$.T(1086673, parallelCollectionScan, 12, false), true, false, false);
            save = J$.N(1086697, 'save', J$.T(1086689, save, 12, false), true, false, false);
            J$.T(1080625, 'use strict', 21, false);
            var applyWriteConcern = J$.W(1080665, 'applyWriteConcern', J$.G(1080657, J$.F(1080649, J$.I(typeof require === 'undefined' ? require = J$.R(1080633, 'require', undefined, true, true) : require = J$.R(1080633, 'require', require, true, true)), false)(J$.T(1080641, '../utils', 21, false)), 'applyWriteConcern'), applyWriteConcern, false, true);
            var Code = J$.W(1080713, 'Code', J$.G(1080705, J$.G(1080697, J$.F(1080689, J$.I(typeof require === 'undefined' ? require = J$.R(1080673, 'require', undefined, true, true) : require = J$.R(1080673, 'require', require, true, true)), false)(J$.T(1080681, '../core', 21, false)), 'BSON'), 'Code'), Code, false, true);
            var createIndexDb = J$.W(1080753, 'createIndexDb', J$.G(1080745, J$.F(1080737, J$.I(typeof require === 'undefined' ? require = J$.R(1080721, 'require', undefined, true, true) : require = J$.R(1080721, 'require', require, true, true)), false)(J$.T(1080729, './db_ops', 21, false)), 'createIndex'), createIndexDb, false, true);
            var decorateWithCollation = J$.W(1080793, 'decorateWithCollation', J$.G(1080785, J$.F(1080777, J$.I(typeof require === 'undefined' ? require = J$.R(1080761, 'require', undefined, true, true) : require = J$.R(1080761, 'require', require, true, true)), false)(J$.T(1080769, '../utils', 21, false)), 'decorateWithCollation'), decorateWithCollation, false, true);
            var decorateWithReadConcern = J$.W(1080833, 'decorateWithReadConcern', J$.G(1080825, J$.F(1080817, J$.I(typeof require === 'undefined' ? require = J$.R(1080801, 'require', undefined, true, true) : require = J$.R(1080801, 'require', require, true, true)), false)(J$.T(1080809, '../utils', 21, false)), 'decorateWithReadConcern'), decorateWithReadConcern, false, true);
            var ensureIndexDb = J$.W(1080873, 'ensureIndexDb', J$.G(1080865, J$.F(1080857, J$.I(typeof require === 'undefined' ? require = J$.R(1080841, 'require', undefined, true, true) : require = J$.R(1080841, 'require', require, true, true)), false)(J$.T(1080849, './db_ops', 21, false)), 'ensureIndex'), ensureIndexDb, false, true);
            var evaluate = J$.W(1080913, 'evaluate', J$.G(1080905, J$.F(1080897, J$.I(typeof require === 'undefined' ? require = J$.R(1080881, 'require', undefined, true, true) : require = J$.R(1080881, 'require', require, true, true)), false)(J$.T(1080889, './db_ops', 21, false)), 'evaluate'), evaluate, false, true);
            var executeCommand = J$.W(1080953, 'executeCommand', J$.G(1080945, J$.F(1080937, J$.I(typeof require === 'undefined' ? require = J$.R(1080921, 'require', undefined, true, true) : require = J$.R(1080921, 'require', require, true, true)), false)(J$.T(1080929, './db_ops', 21, false)), 'executeCommand'), executeCommand, false, true);
            var resolveReadPreference = J$.W(1080993, 'resolveReadPreference', J$.G(1080985, J$.F(1080977, J$.I(typeof require === 'undefined' ? require = J$.R(1080961, 'require', undefined, true, true) : require = J$.R(1080961, 'require', require, true, true)), false)(J$.T(1080969, '../utils', 21, false)), 'resolveReadPreference'), resolveReadPreference, false, true);
            var handleCallback = J$.W(1081033, 'handleCallback', J$.G(1081025, J$.F(1081017, J$.I(typeof require === 'undefined' ? require = J$.R(1081001, 'require', undefined, true, true) : require = J$.R(1081001, 'require', require, true, true)), false)(J$.T(1081009, '../utils', 21, false)), 'handleCallback'), handleCallback, false, true);
            var indexInformationDb = J$.W(1081073, 'indexInformationDb', J$.G(1081065, J$.F(1081057, J$.I(typeof require === 'undefined' ? require = J$.R(1081041, 'require', undefined, true, true) : require = J$.R(1081041, 'require', require, true, true)), false)(J$.T(1081049, './db_ops', 21, false)), 'indexInformation'), indexInformationDb, false, true);
            var Long = J$.W(1081121, 'Long', J$.G(1081113, J$.G(1081105, J$.F(1081097, J$.I(typeof require === 'undefined' ? require = J$.R(1081081, 'require', undefined, true, true) : require = J$.R(1081081, 'require', require, true, true)), false)(J$.T(1081089, '../core', 21, false)), 'BSON'), 'Long'), Long, false, true);
            var MongoError = J$.W(1081161, 'MongoError', J$.G(1081153, J$.F(1081145, J$.I(typeof require === 'undefined' ? require = J$.R(1081129, 'require', undefined, true, true) : require = J$.R(1081129, 'require', require, true, true)), false)(J$.T(1081137, '../core', 21, false)), 'MongoError'), MongoError, false, true);
            var ReadPreference = J$.W(1081201, 'ReadPreference', J$.G(1081193, J$.F(1081185, J$.I(typeof require === 'undefined' ? require = J$.R(1081169, 'require', undefined, true, true) : require = J$.R(1081169, 'require', require, true, true)), false)(J$.T(1081177, '../core', 21, false)), 'ReadPreference'), ReadPreference, false, true);
            var toError = J$.W(1081241, 'toError', J$.G(1081233, J$.F(1081225, J$.I(typeof require === 'undefined' ? require = J$.R(1081209, 'require', undefined, true, true) : require = J$.R(1081209, 'require', require, true, true)), false)(J$.T(1081217, '../utils', 21, false)), 'toError'), toError, false, true);
            var insertDocuments = J$.W(1081281, 'insertDocuments', J$.G(1081273, J$.F(1081265, J$.I(typeof require === 'undefined' ? require = J$.R(1081249, 'require', undefined, true, true) : require = J$.R(1081249, 'require', require, true, true)), false)(J$.T(1081257, './common_functions', 21, false)), 'insertDocuments'), insertDocuments, false, true);
            var updateDocuments = J$.W(1081321, 'updateDocuments', J$.G(1081313, J$.F(1081305, J$.I(typeof require === 'undefined' ? require = J$.R(1081289, 'require', undefined, true, true) : require = J$.R(1081289, 'require', require, true, true)), false)(J$.T(1081297, './common_functions', 21, false)), 'updateDocuments'), updateDocuments, false, true);
            var groupFunction = J$.W(1081337, 'groupFunction', J$.T(1081329, 'function () {\nvar c = db[ns].find(condition);\nvar map = new Map();\nvar reduce_function = reduce;\n\nwhile (c.hasNext()) {\nvar obj = c.next();\nvar key = {};\n\nfor (var i = 0, len = keys.length; i < len; ++i) {\nvar k = keys[i];\nkey[k] = obj[k];\n}\n\nvar aggObj = map.get(key);\n\nif (aggObj == null) {\nvar newObj = Object.extend({}, key);\naggObj = Object.extend(newObj, initial);\nmap.put(key, aggObj);\n}\n\nreduce_function(obj, aggObj);\n}\n\nreturn { "result": map.values() };\n}', 21, false), groupFunction, false, true);
            J$.P(1086385, J$.I(typeof module === 'undefined' ? module = J$.R(1086289, 'module', undefined, true, true) : module = J$.R(1086289, 'module', module, true, true)), 'exports', J$.T(1086377, {
                checkForAtomicOperators: J$.R(1086297, 'checkForAtomicOperators', checkForAtomicOperators, false, true),
                createIndex: J$.R(1086305, 'createIndex', createIndex, false, true),
                createIndexes: J$.R(1086313, 'createIndexes', createIndexes, false, true),
                ensureIndex: J$.R(1086321, 'ensureIndex', ensureIndex, false, true),
                group: J$.R(1086329, 'group', group, false, true),
                indexes: J$.R(1086337, 'indexes', indexes, false, true),
                indexExists: J$.R(1086345, 'indexExists', indexExists, false, true),
                indexInformation: J$.R(1086353, 'indexInformation', indexInformation, false, true),
                parallelCollectionScan: J$.R(1086361, 'parallelCollectionScan', parallelCollectionScan, false, true),
                save: J$.R(1086369, 'save', save, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(1086977, J$e);
        } finally {
            if (J$.Sr(1086985))
                continue jalangiLabel17;
            else
                break jalangiLabel17;
        }
    }
// JALANGI DO NOT INSTRUMENT

