J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(1412553, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/saslprep/index.js');
            function toCodePoints(input) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1411233, arguments.callee, this, arguments);
                            arguments = J$.N(1411241, 'arguments', arguments, true, false, false);
                            input = J$.N(1411249, 'input', input, true, false, false);
                            J$.N(1411257, 'codepoints', codepoints, false, false, false);
                            J$.N(1411265, 'size', size, false, false, false);
                            J$.N(1411273, 'i', i, false, false, false);
                            J$.N(1411281, 'before', before, false, false, false);
                            J$.N(1411289, 'next', next, false, false, false);
                            var codepoints = J$.W(1410857, 'codepoints', J$.T(1410849, [], 10, false), codepoints, false, false);
                            var size = J$.W(1410881, 'size', J$.G(1410873, J$.R(1410865, 'input', input, false, false), 'length'), size, false, false);
                            for (var i = J$.W(1410897, 'i', J$.T(1410889, 0, 22, false), i, false, false); J$.C(89264, J$.B(131802, '<', J$.R(1410905, 'i', i, false, false), J$.R(1410913, 'size', size, false, false))); i = J$.W(1410937, 'i', J$.B(131810, '+', J$.R(1410929, 'i', i, false, false), J$.T(1410921, 1, 22, false)), i, false, false)) {
                                var before = J$.W(1410969, 'before', J$.M(1410961, J$.R(1410945, 'input', input, false, false), 'charCodeAt', false)(J$.R(1410953, 'i', i, false, false)), before, false, false);
                                if (J$.C(89256, J$.C(89232, J$.C(89224, J$.B(131818, '>=', J$.R(1410977, 'before', before, false, false), J$.T(1410985, 55296, 22, false))) ? J$.B(131826, '<=', J$.R(1410993, 'before', before, false, false), J$.T(1411001, 56319, 22, false)) : J$._()) ? J$.B(131842, '>', J$.R(1411009, 'size', size, false, false), J$.B(131834, '+', J$.R(1411017, 'i', i, false, false), J$.T(1411025, 1, 22, false))) : J$._())) {
                                    var next = J$.W(1411065, 'next', J$.M(1411057, J$.R(1411033, 'input', input, false, false), 'charCodeAt', false)(J$.B(131850, '+', J$.R(1411041, 'i', i, false, false), J$.T(1411049, 1, 22, false))), next, false, false);
                                    if (J$.C(89248, J$.C(89240, J$.B(131858, '>=', J$.R(1411073, 'next', next, false, false), J$.T(1411081, 56320, 22, false))) ? J$.B(131866, '<=', J$.R(1411089, 'next', next, false, false), J$.T(1411097, 57343, 22, false)) : J$._())) {
                                        J$.M(1411161, J$.R(1411105, 'codepoints', codepoints, false, false), 'push', false)(J$.B(131906, '+', J$.B(131898, '-', J$.B(131890, '+', J$.B(131882, '*', J$.B(131874, '-', J$.R(1411113, 'before', before, false, false), J$.T(1411121, 55296, 22, false)), J$.T(1411129, 1024, 22, false)), J$.R(1411137, 'next', next, false, false)), J$.T(1411145, 56320, 22, false)), J$.T(1411153, 65536, 22, false)));
                                        i = J$.W(1411185, 'i', J$.B(131914, '+', J$.R(1411177, 'i', i, false, false), J$.T(1411169, 1, 22, false)), i, false, false);
                                        continue;
                                    }
                                }
                                J$.M(1411209, J$.R(1411193, 'codepoints', codepoints, false, false), 'push', false)(J$.R(1411201, 'before', before, false, false));
                            }
                            return J$.Rt(1411225, J$.R(1411217, 'codepoints', codepoints, false, false));
                        } catch (J$e) {
                            J$.Ex(1412737, J$e);
                        } finally {
                            if (J$.Fr(1412745))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function saslprep(input) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(1412449, arguments.callee, this, arguments);
                            arguments = J$.N(1412457, 'arguments', arguments, true, false, false);
                            input = J$.N(1412465, 'input', input, true, false, false);
                            J$.N(1412473, 'opts', opts, false, false, false);
                            J$.N(1412481, 'mapped_input', mapped_input, false, false, false);
                            J$.N(1412489, 'normalized_input', normalized_input, false, false, false);
                            J$.N(1412497, 'normalized_map', normalized_map, false, false, false);
                            J$.N(1412505, 'hasProhibited', hasProhibited, false, false, false);
                            J$.N(1412513, 'hasUnassigned', hasUnassigned, false, false, false);
                            J$.N(1412521, 'hasBidiRAL', hasBidiRAL, false, false, false);
                            J$.N(1412529, 'hasBidiL', hasBidiL, false, false, false);
                            J$.N(1412537, 'isFirstBidiRAL', isFirstBidiRAL, false, false, false);
                            J$.N(1412545, 'isLastBidiRAL', isLastBidiRAL, false, false, false);
                            var opts = J$.W(1411385, 'opts', J$.C(89280, J$.C(89272, J$.B(131922, '>', J$.G(1411305, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(1411297, 'arguments', undefined, true, true) : arguments = J$.R(1411297, 'arguments', arguments, true, true)), 'length'), J$.T(1411313, 1, 22, false))) ? J$.B(131930, '!==', J$.G(1411337, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(1411321, 'arguments', undefined, true, true) : arguments = J$.R(1411321, 'arguments', arguments, true, true)), J$.T(1411329, 1, 22, false)), J$.T(1411345, undefined, 24, false)) : J$._()) ? J$.G(1411369, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(1411353, 'arguments', undefined, true, true) : arguments = J$.R(1411353, 'arguments', arguments, true, true)), J$.T(1411361, 1, 22, false)) : J$.T(1411377, {}, 11, false), opts, false, false);
                            if (J$.C(89288, J$.B(131946, '!==', J$.U(131938, 'typeof', J$.R(1411393, 'input', input, false, false)), J$.T(1411401, 'string', 21, false)))) {
                                throw J$.F(1411425, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(1411409, 'TypeError', undefined, true, true) : TypeError = J$.R(1411409, 'TypeError', TypeError, true, true)), true)(J$.T(1411417, 'Expected string.', 21, false));
                            }
                            if (J$.C(89296, J$.B(131954, '===', J$.G(1411441, J$.R(1411433, 'input', input, false, false), 'length'), J$.T(1411449, 0, 22, false)))) {
                                return J$.Rt(1411465, J$.T(1411457, '', 21, false));
                            }
                            var mapped_input = J$.W(1411657, 'mapped_input', J$.M(1411649, J$.M(1411577, J$.F(1411489, J$.R(1411473, 'toCodePoints', toCodePoints, false, true), false)(J$.R(1411481, 'input', input, false, false)), 'map', false)(J$.T(1411569, function (character) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(1411545, arguments.callee, this, arguments);
                                            arguments = J$.N(1411553, 'arguments', arguments, true, false, false);
                                            character = J$.N(1411561, 'character', character, true, false, false);
                                            return J$.Rt(1411537, J$.C(89304, J$.M(1411513, J$.R(1411497, 'mapping2space', mapping2space, false, true), 'get', false)(J$.R(1411505, 'character', character, false, false))) ? J$.T(1411521, 32, 22, false) : J$.R(1411529, 'character', character, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1412753, J$e);
                                        } finally {
                                            if (J$.Fr(1412761))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'filter', false)(J$.T(1411641, function (character) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(1411617, arguments.callee, this, arguments);
                                            arguments = J$.N(1411625, 'arguments', arguments, true, false, false);
                                            character = J$.N(1411633, 'character', character, true, false, false);
                                            return J$.Rt(1411609, J$.U(131962, '!', J$.M(1411601, J$.R(1411585, 'mapping2nothing', mapping2nothing, false, true), 'get', false)(J$.R(1411593, 'character', character, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(1412769, J$e);
                                        } finally {
                                            if (J$.Fr(1412777))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), mapped_input, false, false);
                            var normalized_input = J$.W(1411721, 'normalized_input', J$.M(1411713, J$.M(1411697, J$.G(1411673, J$.I(typeof String === 'undefined' ? String = J$.R(1411665, 'String', undefined, true, true) : String = J$.R(1411665, 'String', String, true, true)), 'fromCodePoint'), 'apply', false)(J$.T(1411681, null, 25, false), J$.R(1411689, 'mapped_input', mapped_input, false, false)), 'normalize', false)(J$.T(1411705, 'NFKC', 21, false)), normalized_input, false, false);
                            var normalized_map = J$.W(1411753, 'normalized_map', J$.F(1411745, J$.R(1411729, 'toCodePoints', toCodePoints, false, true), false)(J$.R(1411737, 'normalized_input', normalized_input, false, false)), normalized_map, false, false);
                            var hasProhibited = J$.W(1411841, 'hasProhibited', J$.M(1411833, J$.R(1411761, 'normalized_map', normalized_map, false, false), 'some', false)(J$.T(1411825, function (character) {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(1411801, arguments.callee, this, arguments);
                                            arguments = J$.N(1411809, 'arguments', arguments, true, false, false);
                                            character = J$.N(1411817, 'character', character, true, false, false);
                                            return J$.Rt(1411793, J$.M(1411785, J$.R(1411769, 'prohibited_characters', prohibited_characters, false, true), 'get', false)(J$.R(1411777, 'character', character, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1412785, J$e);
                                        } finally {
                                            if (J$.Fr(1412793))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), hasProhibited, false, false);
                            if (J$.C(89312, J$.R(1411849, 'hasProhibited', hasProhibited, false, false))) {
                                throw J$.F(1411873, J$.I(typeof Error === 'undefined' ? Error = J$.R(1411857, 'Error', undefined, true, true) : Error = J$.R(1411857, 'Error', Error, true, true)), true)(J$.T(1411865, 'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3', 21, false));
                            }
                            if (J$.C(89328, J$.B(131970, '!==', J$.G(1411889, J$.R(1411881, 'opts', opts, false, false), 'allowUnassigned'), J$.T(1411897, true, 23, false)))) {
                                var hasUnassigned = J$.W(1411985, 'hasUnassigned', J$.M(1411977, J$.R(1411905, 'normalized_map', normalized_map, false, false), 'some', false)(J$.T(1411969, function (character) {
                                    jalangiLabel7:
                                        while (true) {
                                            try {
                                                J$.Fe(1411945, arguments.callee, this, arguments);
                                                arguments = J$.N(1411953, 'arguments', arguments, true, false, false);
                                                character = J$.N(1411961, 'character', character, true, false, false);
                                                return J$.Rt(1411937, J$.M(1411929, J$.R(1411913, 'unassigned_code_points', unassigned_code_points, false, true), 'get', false)(J$.R(1411921, 'character', character, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(1412801, J$e);
                                            } finally {
                                                if (J$.Fr(1412809))
                                                    continue jalangiLabel7;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), hasUnassigned, false, false);
                                if (J$.C(89320, J$.R(1411993, 'hasUnassigned', hasUnassigned, false, false))) {
                                    throw J$.F(1412017, J$.I(typeof Error === 'undefined' ? Error = J$.R(1412001, 'Error', undefined, true, true) : Error = J$.R(1412001, 'Error', Error, true, true)), true)(J$.T(1412009, 'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5', 21, false));
                                }
                            }
                            var hasBidiRAL = J$.W(1412105, 'hasBidiRAL', J$.M(1412097, J$.R(1412025, 'normalized_map', normalized_map, false, false), 'some', false)(J$.T(1412089, function (character) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(1412065, arguments.callee, this, arguments);
                                            arguments = J$.N(1412073, 'arguments', arguments, true, false, false);
                                            character = J$.N(1412081, 'character', character, true, false, false);
                                            return J$.Rt(1412057, J$.M(1412049, J$.R(1412033, 'bidirectional_r_al', bidirectional_r_al, false, true), 'get', false)(J$.R(1412041, 'character', character, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1412817, J$e);
                                        } finally {
                                            if (J$.Fr(1412825))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), hasBidiRAL, false, false);
                            var hasBidiL = J$.W(1412193, 'hasBidiL', J$.M(1412185, J$.R(1412113, 'normalized_map', normalized_map, false, false), 'some', false)(J$.T(1412177, function (character) {
                                jalangiLabel9:
                                    while (true) {
                                        try {
                                            J$.Fe(1412153, arguments.callee, this, arguments);
                                            arguments = J$.N(1412161, 'arguments', arguments, true, false, false);
                                            character = J$.N(1412169, 'character', character, true, false, false);
                                            return J$.Rt(1412145, J$.M(1412137, J$.R(1412121, 'bidirectional_l', bidirectional_l, false, true), 'get', false)(J$.R(1412129, 'character', character, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1412833, J$e);
                                        } finally {
                                            if (J$.Fr(1412841))
                                                continue jalangiLabel9;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), hasBidiL, false, false);
                            if (J$.C(89344, J$.C(89336, J$.R(1412201, 'hasBidiRAL', hasBidiRAL, false, false)) ? J$.R(1412209, 'hasBidiL', hasBidiL, false, false) : J$._())) {
                                throw J$.F(1412241, J$.I(typeof Error === 'undefined' ? Error = J$.R(1412217, 'Error', undefined, true, true) : Error = J$.R(1412217, 'Error', Error, true, true)), true)(J$.B(131978, '+', J$.T(1412225, 'String must not contain RandALCat and LCat at the same time,', 21, false), J$.T(1412233, ' see https://tools.ietf.org/html/rfc3454#section-6', 21, false)));
                            }
                            var isFirstBidiRAL = J$.W(1412305, 'isFirstBidiRAL', J$.M(1412297, J$.R(1412249, 'bidirectional_r_al', bidirectional_r_al, false, true), 'get', false)(J$.F(1412289, J$.R(1412257, 'getCodePoint', getCodePoint, false, true), false)(J$.F(1412281, J$.R(1412265, 'first', first, false, true), false)(J$.R(1412273, 'normalized_input', normalized_input, false, false)))), isFirstBidiRAL, false, false);
                            var isLastBidiRAL = J$.W(1412369, 'isLastBidiRAL', J$.M(1412361, J$.R(1412313, 'bidirectional_r_al', bidirectional_r_al, false, true), 'get', false)(J$.F(1412353, J$.R(1412321, 'getCodePoint', getCodePoint, false, true), false)(J$.F(1412345, J$.R(1412329, 'last', last, false, true), false)(J$.R(1412337, 'normalized_input', normalized_input, false, false)))), isLastBidiRAL, false, false);
                            if (J$.C(89368, J$.C(89360, J$.R(1412377, 'hasBidiRAL', hasBidiRAL, false, false)) ? J$.U(131986, '!', J$.C(89352, J$.R(1412385, 'isFirstBidiRAL', isFirstBidiRAL, false, false)) ? J$.R(1412393, 'isLastBidiRAL', isLastBidiRAL, false, false) : J$._()) : J$._())) {
                                throw J$.F(1412425, J$.I(typeof Error === 'undefined' ? Error = J$.R(1412401, 'Error', undefined, true, true) : Error = J$.R(1412401, 'Error', Error, true, true)), true)(J$.B(131994, '+', J$.T(1412409, 'Bidirectional RandALCat character must be the first and the last', 21, false), J$.T(1412417, ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6', 21, false)));
                            }
                            return J$.Rt(1412441, J$.R(1412433, 'normalized_input', normalized_input, false, false));
                        } catch (J$e) {
                            J$.Ex(1412849, J$e);
                        } finally {
                            if (J$.Fr(1412857))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1412561, '_require', _require, false, false, false);
            J$.N(1412569, 'unassigned_code_points', unassigned_code_points, false, false, false);
            J$.N(1412577, 'commonly_mapped_to_nothing', commonly_mapped_to_nothing, false, false, false);
            J$.N(1412585, 'non_ASCII_space_characters', non_ASCII_space_characters, false, false, false);
            J$.N(1412593, 'prohibited_characters', prohibited_characters, false, false, false);
            J$.N(1412601, 'bidirectional_r_al', bidirectional_r_al, false, false, false);
            J$.N(1412609, 'bidirectional_l', bidirectional_l, false, false, false);
            J$.N(1412617, 'mapping2space', mapping2space, false, false, false);
            J$.N(1412625, 'mapping2nothing', mapping2nothing, false, false, false);
            J$.N(1412633, 'getCodePoint', getCodePoint, false, false, false);
            J$.N(1412641, 'first', first, false, false, false);
            J$.N(1412649, 'last', last, false, false, false);
            toCodePoints = J$.N(1412665, 'toCodePoints', J$.T(1412657, toCodePoints, 12, false), true, false, false);
            saslprep = J$.N(1412681, 'saslprep', J$.T(1412673, saslprep, 12, false), true, false, false);
            J$.T(1410377, 'use strict', 21, false);
            var _require = J$.W(1410505, '_require', J$.F(1410401, J$.I(typeof require === 'undefined' ? require = J$.R(1410385, 'require', undefined, true, true) : require = J$.R(1410385, 'require', require, true, true)), false)(J$.T(1410393, './lib/memory-code-points', 21, false)), _require, false, true), unassigned_code_points = J$.W(1410513, 'unassigned_code_points', J$.G(1410417, J$.R(1410409, '_require', _require, false, true), 'unassigned_code_points'), unassigned_code_points, false, true), commonly_mapped_to_nothing = J$.W(1410521, 'commonly_mapped_to_nothing', J$.G(1410433, J$.R(1410425, '_require', _require, false, true), 'commonly_mapped_to_nothing'), commonly_mapped_to_nothing, false, true), non_ASCII_space_characters = J$.W(1410529, 'non_ASCII_space_characters', J$.G(1410449, J$.R(1410441, '_require', _require, false, true), 'non_ASCII_space_characters'), non_ASCII_space_characters, false, true), prohibited_characters = J$.W(1410537, 'prohibited_characters', J$.G(1410465, J$.R(1410457, '_require', _require, false, true), 'prohibited_characters'), prohibited_characters, false, true), bidirectional_r_al = J$.W(1410545, 'bidirectional_r_al', J$.G(1410481, J$.R(1410473, '_require', _require, false, true), 'bidirectional_r_al'), bidirectional_r_al, false, true), bidirectional_l = J$.W(1410553, 'bidirectional_l', J$.G(1410497, J$.R(1410489, '_require', _require, false, true), 'bidirectional_l'), bidirectional_l, false, true);
            J$.P(1410577, J$.I(typeof module === 'undefined' ? module = J$.R(1410561, 'module', undefined, true, true) : module = J$.R(1410561, 'module', module, true, true)), 'exports', J$.R(1410569, 'saslprep', saslprep, false, true));
            var mapping2space = J$.W(1410593, 'mapping2space', J$.R(1410585, 'non_ASCII_space_characters', non_ASCII_space_characters, false, true), mapping2space, false, true);
            var mapping2nothing = J$.W(1410609, 'mapping2nothing', J$.R(1410601, 'commonly_mapped_to_nothing', commonly_mapped_to_nothing, false, true), mapping2nothing, false, true);
            var getCodePoint = J$.W(1410681, 'getCodePoint', J$.T(1410673, function getCodePoint(character) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1410649, arguments.callee, this, arguments);
                            arguments = J$.N(1410657, 'arguments', arguments, true, false, false);
                            character = J$.N(1410665, 'character', character, true, false, false);
                            return J$.Rt(1410641, J$.M(1410633, J$.R(1410617, 'character', character, false, false), 'codePointAt', false)(J$.T(1410625, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(1412689, J$e);
                        } finally {
                            if (J$.Fr(1412697))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), getCodePoint, false, true);
            var first = J$.W(1410753, 'first', J$.T(1410745, function first(x) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1410721, arguments.callee, this, arguments);
                            arguments = J$.N(1410729, 'arguments', arguments, true, false, false);
                            x = J$.N(1410737, 'x', x, true, false, false);
                            return J$.Rt(1410713, J$.G(1410705, J$.R(1410689, 'x', x, false, false), J$.T(1410697, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(1412705, J$e);
                        } finally {
                            if (J$.Fr(1412713))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), first, false, true);
            var last = J$.W(1410841, 'last', J$.T(1410833, function last(x) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1410809, arguments.callee, this, arguments);
                            arguments = J$.N(1410817, 'arguments', arguments, true, false, false);
                            x = J$.N(1410825, 'x', x, true, false, false);
                            return J$.Rt(1410801, J$.G(1410793, J$.R(1410761, 'x', x, false, false), J$.B(131794, '-', J$.G(1410777, J$.R(1410769, 'x', x, false, false), 'length'), J$.T(1410785, 1, 22, false))));
                        } catch (J$e) {
                            J$.Ex(1412721, J$e);
                        } finally {
                            if (J$.Fr(1412729))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), last, false, true);
        } catch (J$e) {
            J$.Ex(1412865, J$e);
        } finally {
            if (J$.Sr(1412873))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

