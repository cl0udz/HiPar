J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(1410217, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/saslprep/generate-code-points.js');
            function traverse(bits, src) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1409697, arguments.callee, this, arguments);
                            arguments = J$.N(1409705, 'arguments', arguments, true, false, false);
                            bits = J$.N(1409713, 'bits', bits, true, false, false);
                            src = J$.N(1409721, 'src', src, true, false, false);
                            J$.N(1409729, '_iteratorNormalCompletion', _iteratorNormalCompletion, false, false, false);
                            J$.N(1409737, '_didIteratorError', _didIteratorError, false, false, false);
                            J$.N(1409745, '_iteratorError', _iteratorError, false, false, false);
                            J$.N(1409753, '_iterator', _iterator, false, false, false);
                            J$.N(1409761, '_step', _step, false, false, false);
                            J$.N(1409769, 'code', code, false, false, false);
                            J$.N(1409777, 'buffer', buffer, false, false, false);
                            var _iteratorNormalCompletion = J$.W(1409289, '_iteratorNormalCompletion', J$.T(1409281, true, 23, false), _iteratorNormalCompletion, false, false);
                            var _didIteratorError = J$.W(1409305, '_didIteratorError', J$.T(1409297, false, 23, false), _didIteratorError, false, false);
                            var _iteratorError = J$.W(1409321, '_iteratorError', J$.T(1409313, undefined, 24, false), _iteratorError, false, false);
                            try {
                                for (var _iterator = J$.W(1409369, '_iterator', J$.M(1409361, J$.M(1409337, J$.R(1409329, 'src', src, false, false), 'keys', false)(), J$.G(1409353, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1409345, 'Symbol', undefined, true, true) : Symbol = J$.R(1409345, 'Symbol', Symbol, true, true)), 'iterator'), false)(), _iterator, false, false), _step; J$.C(89192, J$.U(131770, '!', _iteratorNormalCompletion = J$.W(1409409, '_iteratorNormalCompletion', J$.G(1409401, _step = J$.W(1409393, '_step', J$.M(1409385, J$.R(1409377, '_iterator', _iterator, false, false), 'next', false)(), _step, false, false), 'done'), _iteratorNormalCompletion, false, false))); _iteratorNormalCompletion = J$.W(1409425, '_iteratorNormalCompletion', J$.T(1409417, true, 23, false), _iteratorNormalCompletion, false, false)) {
                                    var code = J$.W(1409449, 'code', J$.G(1409441, J$.R(1409433, '_step', _step, false, false), 'value'), code, false, false);
                                    J$.M(1409481, J$.R(1409457, 'bits', bits, false, false), 'set', false)(J$.R(1409465, 'code', code, false, false), J$.T(1409473, true, 23, false));
                                }
                            } catch (err) {
                                J$.N(1409521, 'err', err, false, false, true);
                                _didIteratorError = J$.W(1409497, '_didIteratorError', J$.T(1409489, true, 23, false), _didIteratorError, false, false);
                                _iteratorError = J$.W(1409513, '_iteratorError', J$.R(1409505, 'err', err, false, false), _iteratorError, false, false);
                            } finally {
                                try {
                                    if (J$.C(89208, J$.C(89200, J$.U(131778, '!', J$.R(1409529, '_iteratorNormalCompletion', _iteratorNormalCompletion, false, false))) ? J$.B(131786, '!=', J$.G(1409553, J$.R(1409537, '_iterator', _iterator, false, false), J$.T(1409545, 'return', 21, false)), J$.T(1409561, null, 25, false)) : J$._())) {
                                        J$.M(1409585, J$.R(1409569, '_iterator', _iterator, false, false), J$.T(1409577, 'return', 21, false), false)();
                                    }
                                } finally {
                                    if (J$.C(89216, J$.R(1409593, '_didIteratorError', _didIteratorError, false, false))) {
                                        throw J$.R(1409601, '_iteratorError', _iteratorError, false, false);
                                    }
                                }
                            }
                            var buffer = J$.W(1409625, 'buffer', J$.M(1409617, J$.R(1409609, 'bits', bits, false, false), 'toBuffer', false)(), buffer, false, false);
                            return J$.Rt(1409689, J$.M(1409681, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(1409633, 'Buffer', undefined, true, true) : Buffer = J$.R(1409633, 'Buffer', Buffer, true, true)), 'concat', false)(J$.T(1409673, [
                                J$.F(1409657, J$.R(1409641, 'createSize', createSize, false, true), false)(J$.R(1409649, 'buffer', buffer, false, false)),
                                J$.R(1409665, 'buffer', buffer, false, false)
                            ], 10, false)));
                        } catch (J$e) {
                            J$.Ex(1410329, J$e);
                        } finally {
                            if (J$.Fr(1410337))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createSize(buffer) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1409865, arguments.callee, this, arguments);
                            arguments = J$.N(1409873, 'arguments', arguments, true, false, false);
                            buffer = J$.N(1409881, 'buffer', buffer, true, false, false);
                            J$.N(1409889, 'buf', buf, false, false, false);
                            var buf = J$.W(1409809, 'buf', J$.M(1409801, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(1409785, 'Buffer', undefined, true, true) : Buffer = J$.R(1409785, 'Buffer', Buffer, true, true)), 'alloc', false)(J$.T(1409793, 4, 22, false)), buf, false, false);
                            J$.M(1409841, J$.R(1409817, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.G(1409833, J$.R(1409825, 'buffer', buffer, false, false), 'length'));
                            return J$.Rt(1409857, J$.R(1409849, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(1410345, J$e);
                        } finally {
                            if (J$.Fr(1410353))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1410225, 'bitfield', bitfield, false, false, false);
            J$.N(1410233, 'codePoints', codePoints, false, false, false);
            J$.N(1410241, 'unassigned_code_points', unassigned_code_points, false, false, false);
            J$.N(1410249, 'commonly_mapped_to_nothing', commonly_mapped_to_nothing, false, false, false);
            J$.N(1410257, 'non_ascii_space_characters', non_ascii_space_characters, false, false, false);
            J$.N(1410265, 'prohibited_characters', prohibited_characters, false, false, false);
            J$.N(1410273, 'bidirectional_r_al', bidirectional_r_al, false, false, false);
            J$.N(1410281, 'bidirectional_l', bidirectional_l, false, false, false);
            traverse = J$.N(1410297, 'traverse', J$.T(1410289, traverse, 12, false), true, false, false);
            createSize = J$.N(1410313, 'createSize', J$.T(1410305, createSize, 12, false), true, false, false);
            J$.N(1410321, 'memory', memory, false, false, false);
            J$.T(1409065, 'use strict', 21, false);
            var bitfield = J$.W(1409097, 'bitfield', J$.F(1409089, J$.I(typeof require === 'undefined' ? require = J$.R(1409073, 'require', undefined, true, true) : require = J$.R(1409073, 'require', require, true, true)), false)(J$.T(1409081, 'sparse-bitfield', 21, false)), bitfield, false, true);
            var codePoints = J$.W(1409129, 'codePoints', J$.F(1409121, J$.I(typeof require === 'undefined' ? require = J$.R(1409105, 'require', undefined, true, true) : require = J$.R(1409105, 'require', require, true, true)), false)(J$.T(1409113, './lib/code-points', 21, false)), codePoints, false, true);
            var unassigned_code_points = J$.W(1409153, 'unassigned_code_points', J$.F(1409145, J$.R(1409137, 'bitfield', bitfield, false, true), false)(), unassigned_code_points, false, true);
            var commonly_mapped_to_nothing = J$.W(1409177, 'commonly_mapped_to_nothing', J$.F(1409169, J$.R(1409161, 'bitfield', bitfield, false, true), false)(), commonly_mapped_to_nothing, false, true);
            var non_ascii_space_characters = J$.W(1409201, 'non_ascii_space_characters', J$.F(1409193, J$.R(1409185, 'bitfield', bitfield, false, true), false)(), non_ascii_space_characters, false, true);
            var prohibited_characters = J$.W(1409225, 'prohibited_characters', J$.F(1409217, J$.R(1409209, 'bitfield', bitfield, false, true), false)(), prohibited_characters, false, true);
            var bidirectional_r_al = J$.W(1409249, 'bidirectional_r_al', J$.F(1409241, J$.R(1409233, 'bitfield', bitfield, false, true), false)(), bidirectional_r_al, false, true);
            var bidirectional_l = J$.W(1409273, 'bidirectional_l', J$.F(1409265, J$.R(1409257, 'bitfield', bitfield, false, true), false)(), bidirectional_l, false, true);
            var memory = J$.W(1409905, 'memory', J$.T(1409897, [], 10, false), memory, false, true);
            J$.M(1410161, J$.R(1409913, 'memory', memory, false, true), 'push', false)(J$.F(1409953, J$.R(1409921, 'traverse', traverse, false, true), false)(J$.R(1409929, 'unassigned_code_points', unassigned_code_points, false, true), J$.G(1409945, J$.R(1409937, 'codePoints', codePoints, false, true), 'unassigned_code_points')), J$.F(1409993, J$.R(1409961, 'traverse', traverse, false, true), false)(J$.R(1409969, 'commonly_mapped_to_nothing', commonly_mapped_to_nothing, false, true), J$.G(1409985, J$.R(1409977, 'codePoints', codePoints, false, true), 'commonly_mapped_to_nothing')), J$.F(1410033, J$.R(1410001, 'traverse', traverse, false, true), false)(J$.R(1410009, 'non_ascii_space_characters', non_ascii_space_characters, false, true), J$.G(1410025, J$.R(1410017, 'codePoints', codePoints, false, true), 'non_ASCII_space_characters')), J$.F(1410073, J$.R(1410041, 'traverse', traverse, false, true), false)(J$.R(1410049, 'prohibited_characters', prohibited_characters, false, true), J$.G(1410065, J$.R(1410057, 'codePoints', codePoints, false, true), 'prohibited_characters')), J$.F(1410113, J$.R(1410081, 'traverse', traverse, false, true), false)(J$.R(1410089, 'bidirectional_r_al', bidirectional_r_al, false, true), J$.G(1410105, J$.R(1410097, 'codePoints', codePoints, false, true), 'bidirectional_r_al')), J$.F(1410153, J$.R(1410121, 'traverse', traverse, false, true), false)(J$.R(1410129, 'bidirectional_l', bidirectional_l, false, true), J$.G(1410145, J$.R(1410137, 'codePoints', codePoints, false, true), 'bidirectional_l')));
            J$.M(1410209, J$.G(1410177, J$.I(typeof process === 'undefined' ? process = J$.R(1410169, 'process', undefined, true, true) : process = J$.R(1410169, 'process', process, true, true)), 'stdout'), 'write', false)(J$.M(1410201, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(1410185, 'Buffer', undefined, true, true) : Buffer = J$.R(1410185, 'Buffer', Buffer, true, true)), 'concat', false)(J$.R(1410193, 'memory', memory, false, true)));
        } catch (J$e) {
            J$.Ex(1410361, J$e);
        } finally {
            if (J$.Sr(1410369))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

