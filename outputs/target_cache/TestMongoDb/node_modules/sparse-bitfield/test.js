J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(1487193, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestMongoDb/node_modules/sparse-bitfield/test.js');
            J$.N(1487201, 'alloc', alloc, false, false, false);
            J$.N(1487209, 'tape', tape, false, false, false);
            J$.N(1487217, 'bitfield', bitfield, false, false, false);
            J$.T(1484721, 'use strict', 21, false);
            var alloc = J$.W(1484753, 'alloc', J$.F(1484745, J$.I(typeof require === 'undefined' ? require = J$.R(1484729, 'require', undefined, true, true) : require = J$.R(1484729, 'require', require, true, true)), false)(J$.T(1484737, 'buffer-alloc', 21, false)), alloc, false, true);
            var tape = J$.W(1484785, 'tape', J$.F(1484777, J$.I(typeof require === 'undefined' ? require = J$.R(1484761, 'require', undefined, true, true) : require = J$.R(1484761, 'require', require, true, true)), false)(J$.T(1484769, 'tape', 21, false)), tape, false, true);
            var bitfield = J$.W(1484817, 'bitfield', J$.F(1484809, J$.I(typeof require === 'undefined' ? require = J$.R(1484793, 'require', undefined, true, true) : require = J$.R(1484793, 'require', require, true, true)), false)(J$.T(1484801, './', 21, false)), bitfield, false, true);
            J$.F(1485209, J$.R(1484825, 'tape', tape, false, true), false)(J$.T(1484833, 'set and get', 21, false), J$.T(1485201, function (t) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1485169, arguments.callee, this, arguments);
                            arguments = J$.N(1485177, 'arguments', arguments, true, false, false);
                            t = J$.N(1485185, 't', t, true, false, false);
                            J$.N(1485193, 'bits', bits, false, false, false);
                            var bits = J$.W(1484857, 'bits', J$.F(1484849, J$.R(1484841, 'bitfield', bitfield, false, true), false)(), bits, false, false);
                            J$.M(1484913, J$.R(1484865, 't', t, false, false), 'same', false)(J$.M(1484889, J$.R(1484873, 'bits', bits, false, false), 'get', false)(J$.T(1484881, 0, 22, false)), J$.T(1484897, false, 23, false), J$.T(1484905, 'first bit is false', 21, false));
                            J$.M(1484945, J$.R(1484921, 'bits', bits, false, false), 'set', false)(J$.T(1484929, 0, 22, false), J$.T(1484937, true, 23, false));
                            J$.M(1485001, J$.R(1484953, 't', t, false, false), 'same', false)(J$.M(1484977, J$.R(1484961, 'bits', bits, false, false), 'get', false)(J$.T(1484969, 0, 22, false)), J$.T(1484985, true, 23, false), J$.T(1484993, 'first bit is true', 21, false));
                            J$.M(1485057, J$.R(1485009, 't', t, false, false), 'same', false)(J$.M(1485033, J$.R(1485017, 'bits', bits, false, false), 'get', false)(J$.T(1485025, 1, 22, false)), J$.T(1485041, false, 23, false), J$.T(1485049, 'second bit is false', 21, false));
                            J$.M(1485089, J$.R(1485065, 'bits', bits, false, false), 'set', false)(J$.T(1485073, 0, 22, false), J$.T(1485081, false, 23, false));
                            J$.M(1485145, J$.R(1485097, 't', t, false, false), 'same', false)(J$.M(1485121, J$.R(1485105, 'bits', bits, false, false), 'get', false)(J$.T(1485113, 0, 22, false)), J$.T(1485129, false, 23, false), J$.T(1485137, 'first bit is reset', 21, false));
                            J$.M(1485161, J$.R(1485153, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487225, J$e);
                        } finally {
                            if (J$.Fr(1487233))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(1485609, J$.R(1485217, 'tape', tape, false, true), false)(J$.T(1485225, 'set large and get', 21, false), J$.T(1485601, function (t) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1485569, arguments.callee, this, arguments);
                            arguments = J$.N(1485577, 'arguments', arguments, true, false, false);
                            t = J$.N(1485585, 't', t, true, false, false);
                            J$.N(1485593, 'bits', bits, false, false, false);
                            var bits = J$.W(1485249, 'bits', J$.F(1485241, J$.R(1485233, 'bitfield', bitfield, false, true), false)(), bits, false, false);
                            J$.M(1485305, J$.R(1485257, 't', t, false, false), 'same', false)(J$.M(1485281, J$.R(1485265, 'bits', bits, false, false), 'get', false)(J$.T(1485273, 9999999999999, 22, false)), J$.T(1485289, false, 23, false), J$.T(1485297, 'large bit is false', 21, false));
                            J$.M(1485337, J$.R(1485313, 'bits', bits, false, false), 'set', false)(J$.T(1485321, 9999999999999, 22, false), J$.T(1485329, true, 23, false));
                            J$.M(1485393, J$.R(1485345, 't', t, false, false), 'same', false)(J$.M(1485369, J$.R(1485353, 'bits', bits, false, false), 'get', false)(J$.T(1485361, 9999999999999, 22, false)), J$.T(1485377, true, 23, false), J$.T(1485385, 'large bit is true', 21, false));
                            J$.M(1485457, J$.R(1485401, 't', t, false, false), 'same', false)(J$.M(1485433, J$.R(1485409, 'bits', bits, false, false), 'get', false)(J$.B(138258, '+', J$.T(1485417, 9999999999999, 22, false), J$.T(1485425, 1, 22, false))), J$.T(1485441, false, 23, false), J$.T(1485449, 'large bit + 1 is false', 21, false));
                            J$.M(1485489, J$.R(1485465, 'bits', bits, false, false), 'set', false)(J$.T(1485473, 9999999999999, 22, false), J$.T(1485481, false, 23, false));
                            J$.M(1485545, J$.R(1485497, 't', t, false, false), 'same', false)(J$.M(1485521, J$.R(1485505, 'bits', bits, false, false), 'get', false)(J$.T(1485513, 9999999999999, 22, false)), J$.T(1485529, false, 23, false), J$.T(1485537, 'large bit is reset', 21, false));
                            J$.M(1485561, J$.R(1485553, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487241, J$e);
                        } finally {
                            if (J$.Fr(1487249))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(1486129, J$.R(1485617, 'tape', tape, false, true), false)(J$.T(1485625, 'get and set buffer', 21, false), J$.T(1486121, function (t) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1486073, arguments.callee, this, arguments);
                            arguments = J$.N(1486081, 'arguments', arguments, true, false, false);
                            t = J$.N(1486089, 't', t, true, false, false);
                            J$.N(1486097, 'bits', bits, false, false, false);
                            J$.N(1486105, 'bits2', bits2, false, false, false);
                            J$.N(1486113, 'upd', upd, false, false, false);
                            var bits = J$.W(1485665, 'bits', J$.F(1485657, J$.R(1485633, 'bitfield', bitfield, false, true), false)(J$.T(1485649, { trackUpdates: J$.T(1485641, true, 23, false) }, 11, false)), bits, false, false);
                            J$.M(1485729, J$.R(1485673, 't', t, false, false), 'same', false)(J$.M(1485713, J$.G(1485689, J$.R(1485681, 'bits', bits, false, false), 'pages'), 'get', false)(J$.T(1485697, 0, 22, false), J$.T(1485705, true, 23, false)), J$.T(1485721, undefined, 24, false));
                            J$.M(1485825, J$.R(1485737, 't', t, false, false), 'same', false)(J$.M(1485809, J$.G(1485753, J$.R(1485745, 'bits', bits, false, false), 'pages'), 'get', false)(J$.M(1485793, J$.I(typeof Math === 'undefined' ? Math = J$.R(1485761, 'Math', undefined, true, true) : Math = J$.R(1485761, 'Math', Math, true, true)), 'floor', false)(J$.B(138274, '/', J$.B(138266, '/', J$.T(1485769, 9999999999999, 22, false), J$.T(1485777, 8, 22, false)), J$.T(1485785, 1024, 22, false))), J$.T(1485801, true, 23, false)), J$.T(1485817, undefined, 24, false));
                            J$.M(1485857, J$.R(1485833, 'bits', bits, false, false), 'set', false)(J$.T(1485841, 9999999999999, 22, false), J$.T(1485849, true, 23, false));
                            var bits2 = J$.W(1485881, 'bits2', J$.F(1485873, J$.R(1485865, 'bitfield', bitfield, false, true), false)(), bits2, false, false);
                            var upd = J$.W(1485913, 'upd', J$.M(1485905, J$.G(1485897, J$.R(1485889, 'bits', bits, false, false), 'pages'), 'lastUpdate', false)(), upd, false, false);
                            J$.M(1485993, J$.G(1485929, J$.R(1485921, 'bits2', bits2, false, false), 'pages'), 'set', false)(J$.M(1485969, J$.I(typeof Math === 'undefined' ? Math = J$.R(1485937, 'Math', undefined, true, true) : Math = J$.R(1485937, 'Math', Math, true, true)), 'floor', false)(J$.B(138282, '/', J$.G(1485953, J$.R(1485945, 'upd', upd, false, false), 'offset'), J$.T(1485961, 1024, 22, false))), J$.G(1485985, J$.R(1485977, 'upd', upd, false, false), 'buffer'));
                            J$.M(1486049, J$.R(1486001, 't', t, false, false), 'same', false)(J$.M(1486025, J$.R(1486009, 'bits2', bits2, false, false), 'get', false)(J$.T(1486017, 9999999999999, 22, false)), J$.T(1486033, true, 23, false), J$.T(1486041, 'bit is set', 21, false));
                            J$.M(1486065, J$.R(1486057, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487257, J$e);
                        } finally {
                            if (J$.Fr(1487265))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(1486561, J$.R(1486137, 'tape', tape, false, true), false)(J$.T(1486145, 'toBuffer', 21, false), J$.T(1486553, function (t) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1486521, arguments.callee, this, arguments);
                            arguments = J$.N(1486529, 'arguments', arguments, true, false, false);
                            t = J$.N(1486537, 't', t, true, false, false);
                            J$.N(1486545, 'bits', bits, false, false, false);
                            var bits = J$.W(1486169, 'bits', J$.F(1486161, J$.R(1486153, 'bitfield', bitfield, false, true), false)(), bits, false, false);
                            J$.M(1486225, J$.R(1486177, 't', t, false, false), 'same', false)(J$.M(1486193, J$.R(1486185, 'bits', bits, false, false), 'toBuffer', false)(), J$.F(1486217, J$.R(1486201, 'alloc', alloc, false, true), false)(J$.T(1486209, 0, 22, false)));
                            J$.M(1486257, J$.R(1486233, 'bits', bits, false, false), 'set', false)(J$.T(1486241, 0, 22, false), J$.T(1486249, true, 23, false));
                            J$.M(1486329, J$.R(1486265, 't', t, false, false), 'same', false)(J$.M(1486281, J$.R(1486273, 'bits', bits, false, false), 'toBuffer', false)(), J$.G(1486321, J$.M(1486313, J$.G(1486297, J$.R(1486289, 'bits', bits, false, false), 'pages'), 'get', false)(J$.T(1486305, 0, 22, false)), 'buffer'));
                            J$.M(1486361, J$.R(1486337, 'bits', bits, false, false), 'set', false)(J$.T(1486345, 9000, 22, false), J$.T(1486353, true, 23, false));
                            J$.M(1486497, J$.R(1486369, 't', t, false, false), 'same', false)(J$.M(1486385, J$.R(1486377, 'bits', bits, false, false), 'toBuffer', false)(), J$.M(1486489, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(1486393, 'Buffer', undefined, true, true) : Buffer = J$.R(1486393, 'Buffer', Buffer, true, true)), 'concat', false)(J$.T(1486481, [
                                J$.G(1486433, J$.M(1486425, J$.G(1486409, J$.R(1486401, 'bits', bits, false, false), 'pages'), 'get', false)(J$.T(1486417, 0, 22, false)), 'buffer'),
                                J$.G(1486473, J$.M(1486465, J$.G(1486449, J$.R(1486441, 'bits', bits, false, false), 'pages'), 'get', false)(J$.T(1486457, 1, 22, false)), 'buffer')
                            ], 10, false)));
                            J$.M(1486513, J$.R(1486505, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487273, J$e);
                        } finally {
                            if (J$.Fr(1487281))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(1486873, J$.R(1486569, 'tape', tape, false, true), false)(J$.T(1486577, 'pass in buffer', 21, false), J$.T(1486865, function (t) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1486825, arguments.callee, this, arguments);
                            arguments = J$.N(1486833, 'arguments', arguments, true, false, false);
                            t = J$.N(1486841, 't', t, true, false, false);
                            J$.N(1486849, 'bits', bits, false, false, false);
                            J$.N(1486857, 'clone', clone, false, false, false);
                            var bits = J$.W(1486601, 'bits', J$.F(1486593, J$.R(1486585, 'bitfield', bitfield, false, true), false)(), bits, false, false);
                            J$.M(1486633, J$.R(1486609, 'bits', bits, false, false), 'set', false)(J$.T(1486617, 0, 22, false), J$.T(1486625, true, 23, false));
                            J$.M(1486665, J$.R(1486641, 'bits', bits, false, false), 'set', false)(J$.T(1486649, 9000, 22, false), J$.T(1486657, true, 23, false));
                            var clone = J$.W(1486705, 'clone', J$.F(1486697, J$.R(1486673, 'bitfield', bitfield, false, true), false)(J$.M(1486689, J$.R(1486681, 'bits', bits, false, false), 'toBuffer', false)()), clone, false, false);
                            J$.M(1486753, J$.R(1486713, 't', t, false, false), 'same', false)(J$.M(1486737, J$.R(1486721, 'clone', clone, false, false), 'get', false)(J$.T(1486729, 0, 22, false)), J$.T(1486745, true, 23, false));
                            J$.M(1486801, J$.R(1486761, 't', t, false, false), 'same', false)(J$.M(1486785, J$.R(1486769, 'clone', clone, false, false), 'get', false)(J$.T(1486777, 9000, 22, false)), J$.T(1486793, true, 23, false));
                            J$.M(1486817, J$.R(1486809, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487289, J$e);
                        } finally {
                            if (J$.Fr(1487297))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(1487185, J$.R(1486881, 'tape', tape, false, true), false)(J$.T(1486889, 'set small buffer', 21, false), J$.T(1487177, function (t) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1487137, arguments.callee, this, arguments);
                            arguments = J$.N(1487145, 'arguments', arguments, true, false, false);
                            t = J$.N(1487153, 't', t, true, false, false);
                            J$.N(1487161, 'buf', buf, false, false, false);
                            J$.N(1487169, 'bits', bits, false, false, false);
                            var buf = J$.W(1486921, 'buf', J$.F(1486913, J$.R(1486897, 'alloc', alloc, false, true), false)(J$.T(1486905, 1, 22, false)), buf, false, false);
                            J$.P(1486953, J$.R(1486929, 'buf', buf, false, false), J$.T(1486937, 0, 22, false), J$.T(1486945, 255, 22, false));
                            var bits = J$.W(1486985, 'bits', J$.F(1486977, J$.R(1486961, 'bitfield', bitfield, false, true), false)(J$.R(1486969, 'buf', buf, false, false)), bits, false, false);
                            J$.M(1487033, J$.R(1486993, 't', t, false, false), 'same', false)(J$.M(1487017, J$.R(1487001, 'bits', bits, false, false), 'get', false)(J$.T(1487009, 0, 22, false)), J$.T(1487025, true, 23, false));
                            J$.M(1487113, J$.R(1487041, 't', t, false, false), 'same', false)(J$.G(1487089, J$.G(1487081, J$.M(1487073, J$.G(1487057, J$.R(1487049, 'bits', bits, false, false), 'pages'), 'get', false)(J$.T(1487065, 0, 22, false)), 'buffer'), 'length'), J$.G(1487105, J$.R(1487097, 'bits', bits, false, false), 'pageSize'));
                            J$.M(1487129, J$.R(1487121, 't', t, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(1487305, J$e);
                        } finally {
                            if (J$.Fr(1487313))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(1487321, J$e);
        } finally {
            if (J$.Sr(1487329))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

