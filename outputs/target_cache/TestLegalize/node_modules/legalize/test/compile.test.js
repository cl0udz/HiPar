J$.noInstrEval = false;
jalangiLabel30:
    while (true) {
        try {
            J$.Se(3029585, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestLegalize/node_modules/legalize/test/compile.test.js');
            function checkSchemaBuilder(which) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(3028969, arguments.callee, this, arguments);
                            arguments = J$.N(3028977, 'arguments', arguments, true, false, false);
                            which = J$.N(3028985, 'which', which, true, false, false);
                            return J$.Rt(3028961, J$.T(3028953, function (key) {
                                jalangiLabel23:
                                    while (true) {
                                        try {
                                            J$.Fe(3028929, arguments.callee, this, arguments);
                                            arguments = J$.N(3028937, 'arguments', arguments, true, false, false);
                                            key = J$.N(3028945, 'key', key, true, false, false);
                                            J$.F(3028745, J$.I(typeof it === 'undefined' ? it = J$.R(3028593, 'it', undefined, true, true) : it = J$.R(3028593, 'it', it, true, true)), false)(J$.B(211842, '+', J$.B(211834, '+', J$.B(211826, '+', J$.R(3028601, 'which', which, false, false), J$.T(3028609, '().', 21, false)), J$.R(3028617, 'key', key, false, false)), J$.T(3028625, ' should be a function', 21, false)), J$.T(3028737, function () {
                                                jalangiLabel21:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3028721, arguments.callee, this, arguments);
                                                            arguments = J$.N(3028729, 'arguments', arguments, true, false, false);
                                                            J$.M(3028713, J$.G(3028697, J$.G(3028689, J$.F(3028681, J$.R(3028633, 'expect', expect, false, true), false)(J$.G(3028673, J$.M(3028657, J$.R(3028641, 'L', L, false, true), J$.R(3028649, 'which', which, false, false), false)(), J$.R(3028665, 'key', key, false, false))), 'to'), 'be'), 'a', false)(J$.T(3028705, 'function', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029969, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029977))
                                                                continue jalangiLabel21;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.F(3028921, J$.I(typeof it === 'undefined' ? it = J$.R(3028753, 'it', undefined, true, true) : it = J$.R(3028753, 'it', it, true, true)), false)(J$.B(211866, '+', J$.B(211858, '+', J$.B(211850, '+', J$.R(3028761, 'which', which, false, false), J$.T(3028769, '().', 21, false)), J$.R(3028777, 'key', key, false, false)), J$.T(3028785, ' chained should still be a function', 21, false)), J$.T(3028913, function () {
                                                jalangiLabel22:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3028897, arguments.callee, this, arguments);
                                                            arguments = J$.N(3028905, 'arguments', arguments, true, false, false);
                                                            J$.M(3028889, J$.G(3028873, J$.G(3028865, J$.F(3028857, J$.R(3028793, 'expect', expect, false, true), false)(J$.G(3028849, J$.M(3028833, J$.M(3028817, J$.R(3028801, 'L', L, false, true), J$.R(3028809, 'which', which, false, false), false)(), J$.R(3028825, 'key', key, false, false), false)(), J$.R(3028841, 'key', key, false, false))), 'to'), 'be'), 'a', false)(J$.T(3028881, 'function', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029985, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029993))
                                                                continue jalangiLabel22;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3030001, J$e);
                                        } finally {
                                            if (J$.Fr(3030009))
                                                continue jalangiLabel23;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3030017, J$e);
                        } finally {
                            if (J$.Fr(3030025))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3029593, 'expect', expect, false, false, false);
            J$.N(3029601, 'L', L, false, false, false);
            J$.N(3029609, 'validators', validators, false, false, false);
            checkSchemaBuilder = J$.N(3029625, 'checkSchemaBuilder', J$.T(3029617, checkSchemaBuilder, 12, false), true, false, false);
            J$.T(3026497, 'use strict', 21, false);
            var expect = J$.W(3026537, 'expect', J$.G(3026529, J$.F(3026521, J$.I(typeof require === 'undefined' ? require = J$.R(3026505, 'require', undefined, true, true) : require = J$.R(3026505, 'require', require, true, true)), false)(J$.T(3026513, 'chai', 21, false)), 'expect'), expect, false, true);
            var L = J$.W(3026569, 'L', J$.F(3026561, J$.I(typeof require === 'undefined' ? require = J$.R(3026545, 'require', undefined, true, true) : require = J$.R(3026545, 'require', require, true, true)), false)(J$.T(3026553, '../src/legalize-node.js', 21, false)), L, false, true);
            var validators = J$.W(3026641, 'validators', J$.T(3026633, [
                J$.T(3026577, 'any', 21, false),
                J$.T(3026585, 'bool', 21, false),
                J$.T(3026593, 'number', 21, false),
                J$.T(3026601, 'string', 21, false),
                J$.T(3026609, 'object', 21, false),
                J$.T(3026617, 'func', 21, false),
                J$.T(3026625, 'array', 21, false)
            ], 10, false), validators, false, true);
            J$.F(3026921, J$.I(typeof describe === 'undefined' ? describe = J$.R(3026649, 'describe', undefined, true, true) : describe = J$.R(3026649, 'describe', describe, true, true)), false)(J$.T(3026657, 'default value', 21, false), J$.T(3026913, function () {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3026897, arguments.callee, this, arguments);
                            arguments = J$.N(3026905, 'arguments', arguments, true, false, false);
                            J$.M(3026889, J$.R(3026665, 'validators', validators, false, true), 'forEach', false)(J$.T(3026881, function (v) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3026857, arguments.callee, this, arguments);
                                            arguments = J$.N(3026865, 'arguments', arguments, true, false, false);
                                            v = J$.N(3026873, 'v', v, true, false, false);
                                            J$.F(3026849, J$.I(typeof it === 'undefined' ? it = J$.R(3026673, 'it', undefined, true, true) : it = J$.R(3026673, 'it', it, true, true)), false)(J$.B(211770, '+', J$.R(3026681, 'v', v, false, false), J$.T(3026689, '().default(...) should have given default value.', 21, false)), J$.T(3026841, function () {
                                                jalangiLabel0:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3026817, arguments.callee, this, arguments);
                                                            arguments = J$.N(3026825, 'arguments', arguments, true, false, false);
                                                            J$.N(3026833, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3026745, 'schema', J$.M(3026737, J$.M(3026729, J$.M(3026713, J$.R(3026697, 'L', L, false, true), J$.R(3026705, 'v', v, false, false), false)(), 'default', false)(J$.T(3026721, 'foobar', 21, false)), 'compile', false)(), schema, false, false);
                                                            J$.M(3026809, J$.G(3026785, J$.G(3026777, J$.F(3026769, J$.R(3026753, 'expect', expect, false, true), false)(J$.R(3026761, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(3026793, 'defaultValue', 21, false), J$.T(3026801, 'foobar', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029633, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029641))
                                                                continue jalangiLabel0;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029649, J$e);
                                        } finally {
                                            if (J$.Fr(3029657))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029665, J$e);
                        } finally {
                            if (J$.Fr(3029673))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3027185, J$.I(typeof describe === 'undefined' ? describe = J$.R(3026929, 'describe', undefined, true, true) : describe = J$.R(3026929, 'describe', describe, true, true)), false)(J$.T(3026937, 'default presence', 21, false), J$.T(3027177, function () {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3027161, arguments.callee, this, arguments);
                            arguments = J$.N(3027169, 'arguments', arguments, true, false, false);
                            J$.M(3027153, J$.R(3026945, 'validators', validators, false, true), 'forEach', false)(J$.T(3027145, function (v) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(3027121, arguments.callee, this, arguments);
                                            arguments = J$.N(3027129, 'arguments', arguments, true, false, false);
                                            v = J$.N(3027137, 'v', v, true, false, false);
                                            J$.F(3027113, J$.I(typeof it === 'undefined' ? it = J$.R(3026953, 'it', undefined, true, true) : it = J$.R(3026953, 'it', it, true, true)), false)(J$.B(211778, '+', J$.R(3026961, 'v', v, false, false), J$.T(3026969, '() should not have any default presence', 21, false)), J$.T(3027105, function () {
                                                jalangiLabel3:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3027081, arguments.callee, this, arguments);
                                                            arguments = J$.N(3027089, 'arguments', arguments, true, false, false);
                                                            J$.N(3027097, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3027009, 'schema', J$.M(3027001, J$.M(3026993, J$.R(3026977, 'L', L, false, true), J$.R(3026985, 'v', v, false, false), false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(3027073, J$.G(3027057, J$.G(3027049, J$.G(3027041, J$.F(3027033, J$.R(3027017, 'expect', expect, false, true), false)(J$.R(3027025, 'schema', schema, false, false)), 'to'), 'not'), 'have'), 'property', false)(J$.T(3027065, 'presence', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029681, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029689))
                                                                continue jalangiLabel3;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029697, J$e);
                                        } finally {
                                            if (J$.Fr(3029705))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029713, J$e);
                        } finally {
                            if (J$.Fr(3029721))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3027465, J$.I(typeof describe === 'undefined' ? describe = J$.R(3027193, 'describe', undefined, true, true) : describe = J$.R(3027193, 'describe', describe, true, true)), false)(J$.T(3027201, 'required().forbidden() -> forbidden should overwrite presence', 21, false), J$.T(3027457, function () {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3027441, arguments.callee, this, arguments);
                            arguments = J$.N(3027449, 'arguments', arguments, true, false, false);
                            J$.M(3027433, J$.R(3027209, 'validators', validators, false, true), 'forEach', false)(J$.T(3027425, function (v) {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(3027401, arguments.callee, this, arguments);
                                            arguments = J$.N(3027409, 'arguments', arguments, true, false, false);
                                            v = J$.N(3027417, 'v', v, true, false, false);
                                            J$.F(3027393, J$.I(typeof it === 'undefined' ? it = J$.R(3027217, 'it', undefined, true, true) : it = J$.R(3027217, 'it', it, true, true)), false)(J$.B(211786, '+', J$.R(3027225, 'v', v, false, false), J$.T(3027233, '().required().forbidden() should have presence: `forbidden\'', 21, false)), J$.T(3027385, function () {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3027361, arguments.callee, this, arguments);
                                                            arguments = J$.N(3027369, 'arguments', arguments, true, false, false);
                                                            J$.N(3027377, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3027289, 'schema', J$.M(3027281, J$.M(3027273, J$.M(3027265, J$.M(3027257, J$.R(3027241, 'L', L, false, true), J$.R(3027249, 'v', v, false, false), false)(), 'required', false)(), 'forbidden', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(3027353, J$.G(3027329, J$.G(3027321, J$.F(3027313, J$.R(3027297, 'expect', expect, false, true), false)(J$.R(3027305, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(3027337, 'presence', 21, false), J$.T(3027345, 'forbidden', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029729, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029737))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029745, J$e);
                                        } finally {
                                            if (J$.Fr(3029753))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029761, J$e);
                        } finally {
                            if (J$.Fr(3029769))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3027737, J$.I(typeof describe === 'undefined' ? describe = J$.R(3027473, 'describe', undefined, true, true) : describe = J$.R(3027473, 'describe', describe, true, true)), false)(J$.T(3027481, 'required()', 21, false), J$.T(3027729, function () {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(3027713, arguments.callee, this, arguments);
                            arguments = J$.N(3027721, 'arguments', arguments, true, false, false);
                            J$.M(3027705, J$.R(3027489, 'validators', validators, false, true), 'forEach', false)(J$.T(3027697, function (v) {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(3027673, arguments.callee, this, arguments);
                                            arguments = J$.N(3027681, 'arguments', arguments, true, false, false);
                                            v = J$.N(3027689, 'v', v, true, false, false);
                                            J$.F(3027665, J$.I(typeof it === 'undefined' ? it = J$.R(3027497, 'it', undefined, true, true) : it = J$.R(3027497, 'it', it, true, true)), false)(J$.B(211794, '+', J$.R(3027505, 'v', v, false, false), J$.T(3027513, '().required() should have presence: `required\'', 21, false)), J$.T(3027657, function () {
                                                jalangiLabel9:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3027633, arguments.callee, this, arguments);
                                                            arguments = J$.N(3027641, 'arguments', arguments, true, false, false);
                                                            J$.N(3027649, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3027561, 'schema', J$.M(3027553, J$.M(3027545, J$.M(3027537, J$.R(3027521, 'L', L, false, true), J$.R(3027529, 'v', v, false, false), false)(), 'required', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(3027625, J$.G(3027601, J$.G(3027593, J$.F(3027585, J$.R(3027569, 'expect', expect, false, true), false)(J$.R(3027577, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(3027609, 'presence', 21, false), J$.T(3027617, 'required', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029777, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029785))
                                                                continue jalangiLabel9;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029793, J$e);
                                        } finally {
                                            if (J$.Fr(3029801))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029809, J$e);
                        } finally {
                            if (J$.Fr(3029817))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3028009, J$.I(typeof describe === 'undefined' ? describe = J$.R(3027745, 'describe', undefined, true, true) : describe = J$.R(3027745, 'describe', describe, true, true)), false)(J$.T(3027753, 'forbidden()', 21, false), J$.T(3028001, function () {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(3027985, arguments.callee, this, arguments);
                            arguments = J$.N(3027993, 'arguments', arguments, true, false, false);
                            J$.M(3027977, J$.R(3027761, 'validators', validators, false, true), 'forEach', false)(J$.T(3027969, function (v) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(3027945, arguments.callee, this, arguments);
                                            arguments = J$.N(3027953, 'arguments', arguments, true, false, false);
                                            v = J$.N(3027961, 'v', v, true, false, false);
                                            J$.F(3027937, J$.I(typeof it === 'undefined' ? it = J$.R(3027769, 'it', undefined, true, true) : it = J$.R(3027769, 'it', it, true, true)), false)(J$.B(211802, '+', J$.R(3027777, 'v', v, false, false), J$.T(3027785, '().forbidden() should have presence: `forbidden\'', 21, false)), J$.T(3027929, function () {
                                                jalangiLabel12:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3027905, arguments.callee, this, arguments);
                                                            arguments = J$.N(3027913, 'arguments', arguments, true, false, false);
                                                            J$.N(3027921, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3027833, 'schema', J$.M(3027825, J$.M(3027817, J$.M(3027809, J$.R(3027793, 'L', L, false, true), J$.R(3027801, 'v', v, false, false), false)(), 'forbidden', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(3027897, J$.G(3027873, J$.G(3027865, J$.F(3027857, J$.R(3027841, 'expect', expect, false, true), false)(J$.R(3027849, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(3027881, 'presence', 21, false), J$.T(3027889, 'forbidden', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029825, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029833))
                                                                continue jalangiLabel12;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029841, J$e);
                                        } finally {
                                            if (J$.Fr(3029849))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029857, J$e);
                        } finally {
                            if (J$.Fr(3029865))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3028281, J$.I(typeof describe === 'undefined' ? describe = J$.R(3028017, 'describe', undefined, true, true) : describe = J$.R(3028017, 'describe', describe, true, true)), false)(J$.T(3028025, 'optional()', 21, false), J$.T(3028273, function () {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(3028257, arguments.callee, this, arguments);
                            arguments = J$.N(3028265, 'arguments', arguments, true, false, false);
                            J$.M(3028249, J$.R(3028033, 'validators', validators, false, true), 'forEach', false)(J$.T(3028241, function (v) {
                                jalangiLabel16:
                                    while (true) {
                                        try {
                                            J$.Fe(3028217, arguments.callee, this, arguments);
                                            arguments = J$.N(3028225, 'arguments', arguments, true, false, false);
                                            v = J$.N(3028233, 'v', v, true, false, false);
                                            J$.F(3028209, J$.I(typeof it === 'undefined' ? it = J$.R(3028041, 'it', undefined, true, true) : it = J$.R(3028041, 'it', it, true, true)), false)(J$.B(211810, '+', J$.R(3028049, 'v', v, false, false), J$.T(3028057, '().optional() should have presence: `optional\'', 21, false)), J$.T(3028201, function () {
                                                jalangiLabel15:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3028177, arguments.callee, this, arguments);
                                                            arguments = J$.N(3028185, 'arguments', arguments, true, false, false);
                                                            J$.N(3028193, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3028105, 'schema', J$.M(3028097, J$.M(3028089, J$.M(3028081, J$.R(3028065, 'L', L, false, true), J$.R(3028073, 'v', v, false, false), false)(), 'optional', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(3028169, J$.G(3028145, J$.G(3028137, J$.F(3028129, J$.R(3028113, 'expect', expect, false, true), false)(J$.R(3028121, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(3028153, 'presence', 21, false), J$.T(3028161, 'optional', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029873, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029881))
                                                                continue jalangiLabel15;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029889, J$e);
                                        } finally {
                                            if (J$.Fr(3029897))
                                                continue jalangiLabel16;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029905, J$e);
                        } finally {
                            if (J$.Fr(3029913))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3028585, J$.I(typeof describe === 'undefined' ? describe = J$.R(3028289, 'describe', undefined, true, true) : describe = J$.R(3028289, 'describe', describe, true, true)), false)(J$.T(3028297, 'valid() values', 21, false), J$.T(3028577, function () {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(3028561, arguments.callee, this, arguments);
                            arguments = J$.N(3028569, 'arguments', arguments, true, false, false);
                            J$.M(3028553, J$.R(3028305, 'validators', validators, false, true), 'forEach', false)(J$.T(3028545, function (v) {
                                jalangiLabel19:
                                    while (true) {
                                        try {
                                            J$.Fe(3028521, arguments.callee, this, arguments);
                                            arguments = J$.N(3028529, 'arguments', arguments, true, false, false);
                                            v = J$.N(3028537, 'v', v, true, false, false);
                                            J$.F(3028513, J$.I(typeof it === 'undefined' ? it = J$.R(3028313, 'it', undefined, true, true) : it = J$.R(3028313, 'it', it, true, true)), false)(J$.B(211818, '+', J$.R(3028321, 'v', v, false, false), J$.T(3028329, '().valid(...).valid() should have given valid values.', 21, false)), J$.T(3028505, function () {
                                                jalangiLabel18:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3028481, arguments.callee, this, arguments);
                                                            arguments = J$.N(3028489, 'arguments', arguments, true, false, false);
                                                            J$.N(3028497, 'schema', schema, false, false, false);
                                                            var schema = J$.W(3028401, 'schema', J$.M(3028393, J$.M(3028385, J$.M(3028369, J$.M(3028353, J$.R(3028337, 'L', L, false, true), J$.R(3028345, 'v', v, false, false), false)(), 'valid', false)(J$.T(3028361, 19, 22, false)), 'valid', false)(J$.T(3028377, 'qwerty', 21, false)), 'compile', false)(), schema, false, false);
                                                            J$.M(3028473, J$.G(3028441, J$.F(3028433, J$.R(3028409, 'expect', expect, false, true), false)(J$.G(3028425, J$.R(3028417, 'schema', schema, false, false), 'valid')), 'to'), 'eql', false)(J$.T(3028465, [
                                                                J$.T(3028449, 19, 22, false),
                                                                J$.T(3028457, 'qwerty', 21, false)
                                                            ], 10, false));
                                                        } catch (J$e) {
                                                            J$.Ex(3029921, J$e);
                                                        } finally {
                                                            if (J$.Fr(3029929))
                                                                continue jalangiLabel18;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(3029937, J$e);
                                        } finally {
                                            if (J$.Fr(3029945))
                                                continue jalangiLabel19;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3029953, J$e);
                        } finally {
                            if (J$.Fr(3029961))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3029089, J$.I(typeof describe === 'undefined' ? describe = J$.R(3028993, 'describe', undefined, true, true) : describe = J$.R(3028993, 'describe', describe, true, true)), false)(J$.T(3029001, 'object() schema builders', 21, false), J$.T(3029081, function () {
                jalangiLabel25:
                    while (true) {
                        try {
                            J$.Fe(3029065, arguments.callee, this, arguments);
                            arguments = J$.N(3029073, 'arguments', arguments, true, false, false);
                            J$.M(3029057, J$.T(3029025, [
                                J$.T(3029009, 'keys', 21, false),
                                J$.T(3029017, 'type', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(3029049, J$.R(3029033, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(3029041, 'object', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3030033, J$e);
                        } finally {
                            if (J$.Fr(3030041))
                                continue jalangiLabel25;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3029209, J$.I(typeof describe === 'undefined' ? describe = J$.R(3029097, 'describe', undefined, true, true) : describe = J$.R(3029097, 'describe', describe, true, true)), false)(J$.T(3029105, 'number() schema builders', 21, false), J$.T(3029201, function () {
                jalangiLabel26:
                    while (true) {
                        try {
                            J$.Fe(3029185, arguments.callee, this, arguments);
                            arguments = J$.N(3029193, 'arguments', arguments, true, false, false);
                            J$.M(3029177, J$.T(3029145, [
                                J$.T(3029113, 'min', 21, false),
                                J$.T(3029121, 'max', 21, false),
                                J$.T(3029129, 'lesser', 21, false),
                                J$.T(3029137, 'greater', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(3029169, J$.R(3029153, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(3029161, 'number', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3030049, J$e);
                        } finally {
                            if (J$.Fr(3030057))
                                continue jalangiLabel26;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3029337, J$.I(typeof describe === 'undefined' ? describe = J$.R(3029217, 'describe', undefined, true, true) : describe = J$.R(3029217, 'describe', describe, true, true)), false)(J$.T(3029225, 'string() schema builders', 21, false), J$.T(3029329, function () {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(3029313, arguments.callee, this, arguments);
                            arguments = J$.N(3029321, 'arguments', arguments, true, false, false);
                            J$.M(3029305, J$.T(3029273, [
                                J$.T(3029233, 'minLength', 21, false),
                                J$.T(3029241, 'maxLength', 21, false),
                                J$.T(3029249, 'length', 21, false),
                                J$.T(3029257, 'match', 21, false),
                                J$.T(3029265, 'url', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(3029297, J$.R(3029281, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(3029289, 'string', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3030065, J$e);
                        } finally {
                            if (J$.Fr(3030073))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(3029577, J$.I(typeof describe === 'undefined' ? describe = J$.R(3029345, 'describe', undefined, true, true) : describe = J$.R(3029345, 'describe', describe, true, true)), false)(J$.T(3029353, 'alternative() shorthand', 21, false), J$.T(3029569, function () {
                jalangiLabel29:
                    while (true) {
                        try {
                            J$.Fe(3029553, arguments.callee, this, arguments);
                            arguments = J$.N(3029561, 'arguments', arguments, true, false, false);
                            J$.F(3029545, J$.I(typeof it === 'undefined' ? it = J$.R(3029361, 'it', undefined, true, true) : it = J$.R(3029361, 'it', it, true, true)), false)(J$.T(3029369, 'It compiles [ \'a\', \'b\', /^[a-z]+$/ ].', 21, false), J$.T(3029537, function () {
                                jalangiLabel28:
                                    while (true) {
                                        try {
                                            J$.Fe(3029505, arguments.callee, this, arguments);
                                            arguments = J$.N(3029513, 'arguments', arguments, true, false, false);
                                            J$.N(3029521, 'schema', schema, false, false, false);
                                            J$.N(3029529, 'compiledSchema', compiledSchema, false, false, false);
                                            var schema = J$.W(3029409, 'schema', J$.T(3029401, [
                                                J$.T(3029377, 'a', 21, false),
                                                J$.T(3029385, 'b', 21, false),
                                                J$.T(3029393, /^[a-z]+$/, 14, false)
                                            ], 10, false), schema, false, false);
                                            var compiledSchema = J$.W(3029441, 'compiledSchema', J$.M(3029433, J$.R(3029417, 'L', L, false, true), 'compile', false)(J$.R(3029425, 'schema', schema, false, false)), compiledSchema, false, false);
                                            J$.M(3029497, J$.G(3029489, J$.G(3029481, J$.G(3029473, J$.F(3029465, J$.R(3029449, 'expect', expect, false, true), false)(J$.R(3029457, 'compiledSchema', compiledSchema, false, false)), 'not'), 'to'), 'be'), 'undefined', false)();
                                        } catch (J$e) {
                                            J$.Ex(3030081, J$e);
                                        } finally {
                                            if (J$.Fr(3030089))
                                                continue jalangiLabel28;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3030097, J$e);
                        } finally {
                            if (J$.Fr(3030105))
                                continue jalangiLabel29;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3030113, J$e);
        } finally {
            if (J$.Sr(3030121))
                continue jalangiLabel30;
            else
                break jalangiLabel30;
        }
    }
// JALANGI DO NOT INSTRUMENT

