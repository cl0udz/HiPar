J$.noInstrEval = false;
jalangiLabel30:
    while (true) {
        try {
            J$.Se(104169, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestLegalize/node_modules/legalize/test/compile.test.js');
            function checkSchemaBuilder(which) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(103553, arguments.callee, this, arguments);
                            arguments = J$.N(103561, 'arguments', arguments, true, false, false);
                            which = J$.N(103569, 'which', which, true, false, false);
                            return J$.Rt(103545, J$.T(103537, function (key) {
                                jalangiLabel23:
                                    while (true) {
                                        try {
                                            J$.Fe(103513, arguments.callee, this, arguments);
                                            arguments = J$.N(103521, 'arguments', arguments, true, false, false);
                                            key = J$.N(103529, 'key', key, true, false, false);
                                            J$.F(103329, J$.I(typeof it === 'undefined' ? it = J$.R(103177, 'it', undefined, true, true) : it = J$.R(103177, 'it', it, true, true)), false)(J$.B(9594, '+', J$.B(9586, '+', J$.B(9578, '+', J$.R(103185, 'which', which, false, false), J$.T(103193, '().', 21, false)), J$.R(103201, 'key', key, false, false)), J$.T(103209, ' should be a function', 21, false)), J$.T(103321, function () {
                                                jalangiLabel21:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(103305, arguments.callee, this, arguments);
                                                            arguments = J$.N(103313, 'arguments', arguments, true, false, false);
                                                            J$.M(103297, J$.G(103281, J$.G(103273, J$.F(103265, J$.R(103217, 'expect', expect, false, true), false)(J$.G(103257, J$.M(103241, J$.R(103225, 'L', L, false, true), J$.R(103233, 'which', which, false, false), false)(), J$.R(103249, 'key', key, false, false))), 'to'), 'be'), 'a', false)(J$.T(103289, 'function', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104553, J$e);
                                                        } finally {
                                                            if (J$.Fr(104561))
                                                                continue jalangiLabel21;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.F(103505, J$.I(typeof it === 'undefined' ? it = J$.R(103337, 'it', undefined, true, true) : it = J$.R(103337, 'it', it, true, true)), false)(J$.B(9618, '+', J$.B(9610, '+', J$.B(9602, '+', J$.R(103345, 'which', which, false, false), J$.T(103353, '().', 21, false)), J$.R(103361, 'key', key, false, false)), J$.T(103369, ' chained should still be a function', 21, false)), J$.T(103497, function () {
                                                jalangiLabel22:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(103481, arguments.callee, this, arguments);
                                                            arguments = J$.N(103489, 'arguments', arguments, true, false, false);
                                                            J$.M(103473, J$.G(103457, J$.G(103449, J$.F(103441, J$.R(103377, 'expect', expect, false, true), false)(J$.G(103433, J$.M(103417, J$.M(103401, J$.R(103385, 'L', L, false, true), J$.R(103393, 'which', which, false, false), false)(), J$.R(103409, 'key', key, false, false), false)(), J$.R(103425, 'key', key, false, false))), 'to'), 'be'), 'a', false)(J$.T(103465, 'function', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104569, J$e);
                                                        } finally {
                                                            if (J$.Fr(104577))
                                                                continue jalangiLabel22;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104585, J$e);
                                        } finally {
                                            if (J$.Fr(104593))
                                                continue jalangiLabel23;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104601, J$e);
                        } finally {
                            if (J$.Fr(104609))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(104177, 'expect', expect, false, false, false);
            J$.N(104185, 'L', L, false, false, false);
            J$.N(104193, 'validators', validators, false, false, false);
            checkSchemaBuilder = J$.N(104209, 'checkSchemaBuilder', J$.T(104201, checkSchemaBuilder, 12, false), true, false, false);
            J$.T(101081, 'use strict', 21, false);
            var expect = J$.W(101121, 'expect', J$.G(101113, J$.F(101105, J$.I(typeof require === 'undefined' ? require = J$.R(101089, 'require', undefined, true, true) : require = J$.R(101089, 'require', require, true, true)), false)(J$.T(101097, 'chai', 21, false)), 'expect'), expect, false, true);
            var L = J$.W(101153, 'L', J$.F(101145, J$.I(typeof require === 'undefined' ? require = J$.R(101129, 'require', undefined, true, true) : require = J$.R(101129, 'require', require, true, true)), false)(J$.T(101137, '../src/legalize-node.js', 21, false)), L, false, true);
            var validators = J$.W(101225, 'validators', J$.T(101217, [
                J$.T(101161, 'any', 21, false),
                J$.T(101169, 'bool', 21, false),
                J$.T(101177, 'number', 21, false),
                J$.T(101185, 'string', 21, false),
                J$.T(101193, 'object', 21, false),
                J$.T(101201, 'func', 21, false),
                J$.T(101209, 'array', 21, false)
            ], 10, false), validators, false, true);
            J$.F(101505, J$.I(typeof describe === 'undefined' ? describe = J$.R(101233, 'describe', undefined, true, true) : describe = J$.R(101233, 'describe', describe, true, true)), false)(J$.T(101241, 'default value', 21, false), J$.T(101497, function () {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(101481, arguments.callee, this, arguments);
                            arguments = J$.N(101489, 'arguments', arguments, true, false, false);
                            J$.M(101473, J$.R(101249, 'validators', validators, false, true), 'forEach', false)(J$.T(101465, function (v) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(101441, arguments.callee, this, arguments);
                                            arguments = J$.N(101449, 'arguments', arguments, true, false, false);
                                            v = J$.N(101457, 'v', v, true, false, false);
                                            J$.F(101433, J$.I(typeof it === 'undefined' ? it = J$.R(101257, 'it', undefined, true, true) : it = J$.R(101257, 'it', it, true, true)), false)(J$.B(9522, '+', J$.R(101265, 'v', v, false, false), J$.T(101273, '().default(...) should have given default value.', 21, false)), J$.T(101425, function () {
                                                jalangiLabel0:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(101401, arguments.callee, this, arguments);
                                                            arguments = J$.N(101409, 'arguments', arguments, true, false, false);
                                                            J$.N(101417, 'schema', schema, false, false, false);
                                                            var schema = J$.W(101329, 'schema', J$.M(101321, J$.M(101313, J$.M(101297, J$.R(101281, 'L', L, false, true), J$.R(101289, 'v', v, false, false), false)(), 'default', false)(J$.T(101305, 'foobar', 21, false)), 'compile', false)(), schema, false, false);
                                                            J$.M(101393, J$.G(101369, J$.G(101361, J$.F(101353, J$.R(101337, 'expect', expect, false, true), false)(J$.R(101345, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(101377, 'defaultValue', 21, false), J$.T(101385, 'foobar', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104217, J$e);
                                                        } finally {
                                                            if (J$.Fr(104225))
                                                                continue jalangiLabel0;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104233, J$e);
                                        } finally {
                                            if (J$.Fr(104241))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104249, J$e);
                        } finally {
                            if (J$.Fr(104257))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(101769, J$.I(typeof describe === 'undefined' ? describe = J$.R(101513, 'describe', undefined, true, true) : describe = J$.R(101513, 'describe', describe, true, true)), false)(J$.T(101521, 'default presence', 21, false), J$.T(101761, function () {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(101745, arguments.callee, this, arguments);
                            arguments = J$.N(101753, 'arguments', arguments, true, false, false);
                            J$.M(101737, J$.R(101529, 'validators', validators, false, true), 'forEach', false)(J$.T(101729, function (v) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(101705, arguments.callee, this, arguments);
                                            arguments = J$.N(101713, 'arguments', arguments, true, false, false);
                                            v = J$.N(101721, 'v', v, true, false, false);
                                            J$.F(101697, J$.I(typeof it === 'undefined' ? it = J$.R(101537, 'it', undefined, true, true) : it = J$.R(101537, 'it', it, true, true)), false)(J$.B(9530, '+', J$.R(101545, 'v', v, false, false), J$.T(101553, '() should not have any default presence', 21, false)), J$.T(101689, function () {
                                                jalangiLabel3:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(101665, arguments.callee, this, arguments);
                                                            arguments = J$.N(101673, 'arguments', arguments, true, false, false);
                                                            J$.N(101681, 'schema', schema, false, false, false);
                                                            var schema = J$.W(101593, 'schema', J$.M(101585, J$.M(101577, J$.R(101561, 'L', L, false, true), J$.R(101569, 'v', v, false, false), false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(101657, J$.G(101641, J$.G(101633, J$.G(101625, J$.F(101617, J$.R(101601, 'expect', expect, false, true), false)(J$.R(101609, 'schema', schema, false, false)), 'to'), 'not'), 'have'), 'property', false)(J$.T(101649, 'presence', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104265, J$e);
                                                        } finally {
                                                            if (J$.Fr(104273))
                                                                continue jalangiLabel3;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104281, J$e);
                                        } finally {
                                            if (J$.Fr(104289))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104297, J$e);
                        } finally {
                            if (J$.Fr(104305))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(102049, J$.I(typeof describe === 'undefined' ? describe = J$.R(101777, 'describe', undefined, true, true) : describe = J$.R(101777, 'describe', describe, true, true)), false)(J$.T(101785, 'required().forbidden() -> forbidden should overwrite presence', 21, false), J$.T(102041, function () {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(102025, arguments.callee, this, arguments);
                            arguments = J$.N(102033, 'arguments', arguments, true, false, false);
                            J$.M(102017, J$.R(101793, 'validators', validators, false, true), 'forEach', false)(J$.T(102009, function (v) {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(101985, arguments.callee, this, arguments);
                                            arguments = J$.N(101993, 'arguments', arguments, true, false, false);
                                            v = J$.N(102001, 'v', v, true, false, false);
                                            J$.F(101977, J$.I(typeof it === 'undefined' ? it = J$.R(101801, 'it', undefined, true, true) : it = J$.R(101801, 'it', it, true, true)), false)(J$.B(9538, '+', J$.R(101809, 'v', v, false, false), J$.T(101817, '().required().forbidden() should have presence: `forbidden\'', 21, false)), J$.T(101969, function () {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(101945, arguments.callee, this, arguments);
                                                            arguments = J$.N(101953, 'arguments', arguments, true, false, false);
                                                            J$.N(101961, 'schema', schema, false, false, false);
                                                            var schema = J$.W(101873, 'schema', J$.M(101865, J$.M(101857, J$.M(101849, J$.M(101841, J$.R(101825, 'L', L, false, true), J$.R(101833, 'v', v, false, false), false)(), 'required', false)(), 'forbidden', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(101937, J$.G(101913, J$.G(101905, J$.F(101897, J$.R(101881, 'expect', expect, false, true), false)(J$.R(101889, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(101921, 'presence', 21, false), J$.T(101929, 'forbidden', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104313, J$e);
                                                        } finally {
                                                            if (J$.Fr(104321))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104329, J$e);
                                        } finally {
                                            if (J$.Fr(104337))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104345, J$e);
                        } finally {
                            if (J$.Fr(104353))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(102321, J$.I(typeof describe === 'undefined' ? describe = J$.R(102057, 'describe', undefined, true, true) : describe = J$.R(102057, 'describe', describe, true, true)), false)(J$.T(102065, 'required()', 21, false), J$.T(102313, function () {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(102297, arguments.callee, this, arguments);
                            arguments = J$.N(102305, 'arguments', arguments, true, false, false);
                            J$.M(102289, J$.R(102073, 'validators', validators, false, true), 'forEach', false)(J$.T(102281, function (v) {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(102257, arguments.callee, this, arguments);
                                            arguments = J$.N(102265, 'arguments', arguments, true, false, false);
                                            v = J$.N(102273, 'v', v, true, false, false);
                                            J$.F(102249, J$.I(typeof it === 'undefined' ? it = J$.R(102081, 'it', undefined, true, true) : it = J$.R(102081, 'it', it, true, true)), false)(J$.B(9546, '+', J$.R(102089, 'v', v, false, false), J$.T(102097, '().required() should have presence: `required\'', 21, false)), J$.T(102241, function () {
                                                jalangiLabel9:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(102217, arguments.callee, this, arguments);
                                                            arguments = J$.N(102225, 'arguments', arguments, true, false, false);
                                                            J$.N(102233, 'schema', schema, false, false, false);
                                                            var schema = J$.W(102145, 'schema', J$.M(102137, J$.M(102129, J$.M(102121, J$.R(102105, 'L', L, false, true), J$.R(102113, 'v', v, false, false), false)(), 'required', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(102209, J$.G(102185, J$.G(102177, J$.F(102169, J$.R(102153, 'expect', expect, false, true), false)(J$.R(102161, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(102193, 'presence', 21, false), J$.T(102201, 'required', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104361, J$e);
                                                        } finally {
                                                            if (J$.Fr(104369))
                                                                continue jalangiLabel9;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104377, J$e);
                                        } finally {
                                            if (J$.Fr(104385))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104393, J$e);
                        } finally {
                            if (J$.Fr(104401))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(102593, J$.I(typeof describe === 'undefined' ? describe = J$.R(102329, 'describe', undefined, true, true) : describe = J$.R(102329, 'describe', describe, true, true)), false)(J$.T(102337, 'forbidden()', 21, false), J$.T(102585, function () {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(102569, arguments.callee, this, arguments);
                            arguments = J$.N(102577, 'arguments', arguments, true, false, false);
                            J$.M(102561, J$.R(102345, 'validators', validators, false, true), 'forEach', false)(J$.T(102553, function (v) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(102529, arguments.callee, this, arguments);
                                            arguments = J$.N(102537, 'arguments', arguments, true, false, false);
                                            v = J$.N(102545, 'v', v, true, false, false);
                                            J$.F(102521, J$.I(typeof it === 'undefined' ? it = J$.R(102353, 'it', undefined, true, true) : it = J$.R(102353, 'it', it, true, true)), false)(J$.B(9554, '+', J$.R(102361, 'v', v, false, false), J$.T(102369, '().forbidden() should have presence: `forbidden\'', 21, false)), J$.T(102513, function () {
                                                jalangiLabel12:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(102489, arguments.callee, this, arguments);
                                                            arguments = J$.N(102497, 'arguments', arguments, true, false, false);
                                                            J$.N(102505, 'schema', schema, false, false, false);
                                                            var schema = J$.W(102417, 'schema', J$.M(102409, J$.M(102401, J$.M(102393, J$.R(102377, 'L', L, false, true), J$.R(102385, 'v', v, false, false), false)(), 'forbidden', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(102481, J$.G(102457, J$.G(102449, J$.F(102441, J$.R(102425, 'expect', expect, false, true), false)(J$.R(102433, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(102465, 'presence', 21, false), J$.T(102473, 'forbidden', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104409, J$e);
                                                        } finally {
                                                            if (J$.Fr(104417))
                                                                continue jalangiLabel12;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104425, J$e);
                                        } finally {
                                            if (J$.Fr(104433))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104441, J$e);
                        } finally {
                            if (J$.Fr(104449))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(102865, J$.I(typeof describe === 'undefined' ? describe = J$.R(102601, 'describe', undefined, true, true) : describe = J$.R(102601, 'describe', describe, true, true)), false)(J$.T(102609, 'optional()', 21, false), J$.T(102857, function () {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(102841, arguments.callee, this, arguments);
                            arguments = J$.N(102849, 'arguments', arguments, true, false, false);
                            J$.M(102833, J$.R(102617, 'validators', validators, false, true), 'forEach', false)(J$.T(102825, function (v) {
                                jalangiLabel16:
                                    while (true) {
                                        try {
                                            J$.Fe(102801, arguments.callee, this, arguments);
                                            arguments = J$.N(102809, 'arguments', arguments, true, false, false);
                                            v = J$.N(102817, 'v', v, true, false, false);
                                            J$.F(102793, J$.I(typeof it === 'undefined' ? it = J$.R(102625, 'it', undefined, true, true) : it = J$.R(102625, 'it', it, true, true)), false)(J$.B(9562, '+', J$.R(102633, 'v', v, false, false), J$.T(102641, '().optional() should have presence: `optional\'', 21, false)), J$.T(102785, function () {
                                                jalangiLabel15:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(102761, arguments.callee, this, arguments);
                                                            arguments = J$.N(102769, 'arguments', arguments, true, false, false);
                                                            J$.N(102777, 'schema', schema, false, false, false);
                                                            var schema = J$.W(102689, 'schema', J$.M(102681, J$.M(102673, J$.M(102665, J$.R(102649, 'L', L, false, true), J$.R(102657, 'v', v, false, false), false)(), 'optional', false)(), 'compile', false)(), schema, false, false);
                                                            J$.M(102753, J$.G(102729, J$.G(102721, J$.F(102713, J$.R(102697, 'expect', expect, false, true), false)(J$.R(102705, 'schema', schema, false, false)), 'to'), 'have'), 'property', false)(J$.T(102737, 'presence', 21, false), J$.T(102745, 'optional', 21, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104457, J$e);
                                                        } finally {
                                                            if (J$.Fr(104465))
                                                                continue jalangiLabel15;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104473, J$e);
                                        } finally {
                                            if (J$.Fr(104481))
                                                continue jalangiLabel16;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104489, J$e);
                        } finally {
                            if (J$.Fr(104497))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(103169, J$.I(typeof describe === 'undefined' ? describe = J$.R(102873, 'describe', undefined, true, true) : describe = J$.R(102873, 'describe', describe, true, true)), false)(J$.T(102881, 'valid() values', 21, false), J$.T(103161, function () {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(103145, arguments.callee, this, arguments);
                            arguments = J$.N(103153, 'arguments', arguments, true, false, false);
                            J$.M(103137, J$.R(102889, 'validators', validators, false, true), 'forEach', false)(J$.T(103129, function (v) {
                                jalangiLabel19:
                                    while (true) {
                                        try {
                                            J$.Fe(103105, arguments.callee, this, arguments);
                                            arguments = J$.N(103113, 'arguments', arguments, true, false, false);
                                            v = J$.N(103121, 'v', v, true, false, false);
                                            J$.F(103097, J$.I(typeof it === 'undefined' ? it = J$.R(102897, 'it', undefined, true, true) : it = J$.R(102897, 'it', it, true, true)), false)(J$.B(9570, '+', J$.R(102905, 'v', v, false, false), J$.T(102913, '().valid(...).valid() should have given valid values.', 21, false)), J$.T(103089, function () {
                                                jalangiLabel18:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(103065, arguments.callee, this, arguments);
                                                            arguments = J$.N(103073, 'arguments', arguments, true, false, false);
                                                            J$.N(103081, 'schema', schema, false, false, false);
                                                            var schema = J$.W(102985, 'schema', J$.M(102977, J$.M(102969, J$.M(102953, J$.M(102937, J$.R(102921, 'L', L, false, true), J$.R(102929, 'v', v, false, false), false)(), 'valid', false)(J$.T(102945, 19, 22, false)), 'valid', false)(J$.T(102961, 'qwerty', 21, false)), 'compile', false)(), schema, false, false);
                                                            J$.M(103057, J$.G(103025, J$.F(103017, J$.R(102993, 'expect', expect, false, true), false)(J$.G(103009, J$.R(103001, 'schema', schema, false, false), 'valid')), 'to'), 'eql', false)(J$.T(103049, [
                                                                J$.T(103033, 19, 22, false),
                                                                J$.T(103041, 'qwerty', 21, false)
                                                            ], 10, false));
                                                        } catch (J$e) {
                                                            J$.Ex(104505, J$e);
                                                        } finally {
                                                            if (J$.Fr(104513))
                                                                continue jalangiLabel18;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(104521, J$e);
                                        } finally {
                                            if (J$.Fr(104529))
                                                continue jalangiLabel19;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104537, J$e);
                        } finally {
                            if (J$.Fr(104545))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(103673, J$.I(typeof describe === 'undefined' ? describe = J$.R(103577, 'describe', undefined, true, true) : describe = J$.R(103577, 'describe', describe, true, true)), false)(J$.T(103585, 'object() schema builders', 21, false), J$.T(103665, function () {
                jalangiLabel25:
                    while (true) {
                        try {
                            J$.Fe(103649, arguments.callee, this, arguments);
                            arguments = J$.N(103657, 'arguments', arguments, true, false, false);
                            J$.M(103641, J$.T(103609, [
                                J$.T(103593, 'keys', 21, false),
                                J$.T(103601, 'type', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(103633, J$.R(103617, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(103625, 'object', 21, false)));
                        } catch (J$e) {
                            J$.Ex(104617, J$e);
                        } finally {
                            if (J$.Fr(104625))
                                continue jalangiLabel25;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(103793, J$.I(typeof describe === 'undefined' ? describe = J$.R(103681, 'describe', undefined, true, true) : describe = J$.R(103681, 'describe', describe, true, true)), false)(J$.T(103689, 'number() schema builders', 21, false), J$.T(103785, function () {
                jalangiLabel26:
                    while (true) {
                        try {
                            J$.Fe(103769, arguments.callee, this, arguments);
                            arguments = J$.N(103777, 'arguments', arguments, true, false, false);
                            J$.M(103761, J$.T(103729, [
                                J$.T(103697, 'min', 21, false),
                                J$.T(103705, 'max', 21, false),
                                J$.T(103713, 'lesser', 21, false),
                                J$.T(103721, 'greater', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(103753, J$.R(103737, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(103745, 'number', 21, false)));
                        } catch (J$e) {
                            J$.Ex(104633, J$e);
                        } finally {
                            if (J$.Fr(104641))
                                continue jalangiLabel26;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(103921, J$.I(typeof describe === 'undefined' ? describe = J$.R(103801, 'describe', undefined, true, true) : describe = J$.R(103801, 'describe', describe, true, true)), false)(J$.T(103809, 'string() schema builders', 21, false), J$.T(103913, function () {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(103897, arguments.callee, this, arguments);
                            arguments = J$.N(103905, 'arguments', arguments, true, false, false);
                            J$.M(103889, J$.T(103857, [
                                J$.T(103817, 'minLength', 21, false),
                                J$.T(103825, 'maxLength', 21, false),
                                J$.T(103833, 'length', 21, false),
                                J$.T(103841, 'match', 21, false),
                                J$.T(103849, 'url', 21, false)
                            ], 10, false), 'forEach', false)(J$.F(103881, J$.R(103865, 'checkSchemaBuilder', checkSchemaBuilder, false, true), false)(J$.T(103873, 'string', 21, false)));
                        } catch (J$e) {
                            J$.Ex(104649, J$e);
                        } finally {
                            if (J$.Fr(104657))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(104161, J$.I(typeof describe === 'undefined' ? describe = J$.R(103929, 'describe', undefined, true, true) : describe = J$.R(103929, 'describe', describe, true, true)), false)(J$.T(103937, 'alternative() shorthand', 21, false), J$.T(104153, function () {
                jalangiLabel29:
                    while (true) {
                        try {
                            J$.Fe(104137, arguments.callee, this, arguments);
                            arguments = J$.N(104145, 'arguments', arguments, true, false, false);
                            J$.F(104129, J$.I(typeof it === 'undefined' ? it = J$.R(103945, 'it', undefined, true, true) : it = J$.R(103945, 'it', it, true, true)), false)(J$.T(103953, 'It compiles [ \'a\', \'b\', /^[a-z]+$/ ].', 21, false), J$.T(104121, function () {
                                jalangiLabel28:
                                    while (true) {
                                        try {
                                            J$.Fe(104089, arguments.callee, this, arguments);
                                            arguments = J$.N(104097, 'arguments', arguments, true, false, false);
                                            J$.N(104105, 'schema', schema, false, false, false);
                                            J$.N(104113, 'compiledSchema', compiledSchema, false, false, false);
                                            var schema = J$.W(103993, 'schema', J$.T(103985, [
                                                J$.T(103961, 'a', 21, false),
                                                J$.T(103969, 'b', 21, false),
                                                J$.T(103977, /^[a-z]+$/, 14, false)
                                            ], 10, false), schema, false, false);
                                            var compiledSchema = J$.W(104025, 'compiledSchema', J$.M(104017, J$.R(104001, 'L', L, false, true), 'compile', false)(J$.R(104009, 'schema', schema, false, false)), compiledSchema, false, false);
                                            J$.M(104081, J$.G(104073, J$.G(104065, J$.G(104057, J$.F(104049, J$.R(104033, 'expect', expect, false, true), false)(J$.R(104041, 'compiledSchema', compiledSchema, false, false)), 'not'), 'to'), 'be'), 'undefined', false)();
                                        } catch (J$e) {
                                            J$.Ex(104665, J$e);
                                        } finally {
                                            if (J$.Fr(104673))
                                                continue jalangiLabel28;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(104681, J$e);
                        } finally {
                            if (J$.Fr(104689))
                                continue jalangiLabel29;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(104697, J$e);
        } finally {
            if (J$.Sr(104705))
                continue jalangiLabel30;
            else
                break jalangiLabel30;
        }
    }
// JALANGI DO NOT INSTRUMENT

