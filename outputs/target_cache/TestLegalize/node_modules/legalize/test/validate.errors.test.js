J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(121049, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestLegalize/node_modules/legalize/test/validate.errors.test.js');
            J$.N(121057, 'expect', expect, false, false, false);
            J$.N(121065, 'L', L, false, false, false);
            J$.T(119553, 'use strict', 21, false);
            var expect = J$.W(119593, 'expect', J$.G(119585, J$.F(119577, J$.I(typeof require === 'undefined' ? require = J$.R(119561, 'require', undefined, true, true) : require = J$.R(119561, 'require', require, true, true)), false)(J$.T(119569, 'chai', 21, false)), 'expect'), expect, false, true);
            var L = J$.W(119625, 'L', J$.F(119617, J$.I(typeof require === 'undefined' ? require = J$.R(119601, 'require', undefined, true, true) : require = J$.R(119601, 'require', require, true, true)), false)(J$.T(119609, '../src/legalize-node.js', 21, false)), L, false, true);
            J$.F(121041, J$.I(typeof describe === 'undefined' ? describe = J$.R(119633, 'describe', undefined, true, true) : describe = J$.R(119633, 'describe', describe, true, true)), false)(J$.T(119641, 'error reporting', 21, false), J$.T(121033, function () {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(121017, arguments.callee, this, arguments);
                            arguments = J$.N(121025, 'arguments', arguments, true, false, false);
                            J$.F(120049, J$.I(typeof it === 'undefined' ? it = J$.R(119649, 'it', undefined, true, true) : it = J$.R(119649, 'it', it, true, true)), false)(J$.T(119657, 'returns \'required_missing\' error for missing required keys', 21, false), J$.T(120041, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(120009, arguments.callee, this, arguments);
                                            arguments = J$.N(120017, 'arguments', arguments, true, false, false);
                                            J$.N(120025, 'schema', schema, false, false, false);
                                            J$.N(120033, 'result', result, false, false, false);
                                            var schema = J$.W(119721, 'schema', J$.T(119713, {
                                                a: J$.M(119681, J$.M(119673, J$.R(119665, 'L', L, false, true), 'string', false)(), 'required', false)(),
                                                b: J$.M(119705, J$.M(119697, J$.R(119689, 'L', L, false, true), 'string', false)(), 'optional', false)()
                                            }, 11, false), schema, false, false);
                                            var result = J$.W(119769, 'result', J$.M(119761, J$.R(119729, 'L', L, false, true), 'validate', false)(J$.T(119745, { b: J$.T(119737, 'foobar', 21, false) }, 11, false), J$.R(119753, 'schema', schema, false, false)), result, false, false);
                                            J$.M(119825, J$.G(119817, J$.G(119809, J$.F(119801, J$.R(119777, 'expect', expect, false, true), false)(J$.U(9882, '!', J$.G(119793, J$.R(119785, 'result', result, false, false), 'error'))), 'to'), 'be'), 'false', false)();
                                            J$.M(119913, J$.G(119897, J$.G(119889, J$.F(119881, J$.R(119833, 'expect', expect, false, true), false)(J$.G(119873, J$.G(119865, J$.G(119849, J$.R(119841, 'result', result, false, false), 'error'), J$.T(119857, 0, 22, false)), 'type')), 'to'), 'be'), 'equal', false)(J$.T(119905, 'required_missing', 21, false));
                                            J$.M(120001, J$.G(119985, J$.G(119977, J$.F(119969, J$.R(119921, 'expect', expect, false, true), false)(J$.G(119961, J$.G(119953, J$.G(119937, J$.R(119929, 'result', result, false, false), 'error'), J$.T(119945, 0, 22, false)), 'sourcePath')), 'to'), 'be'), 'equal', false)(J$.T(119993, '/a', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(121073, J$e);
                                        } finally {
                                            if (J$.Fr(121081))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(120473, J$.I(typeof it === 'undefined' ? it = J$.R(120057, 'it', undefined, true, true) : it = J$.R(120057, 'it', it, true, true)), false)(J$.T(120065, 'returns \'invalid_value\' error for invalid() required() value', 21, false), J$.T(120465, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(120433, arguments.callee, this, arguments);
                                            arguments = J$.N(120441, 'arguments', arguments, true, false, false);
                                            J$.N(120449, 'schema', schema, false, false, false);
                                            J$.N(120457, 'result', result, false, false, false);
                                            var schema = J$.W(120121, 'schema', J$.T(120113, { x: J$.M(120105, J$.M(120097, J$.M(120081, J$.R(120073, 'L', L, false, true), 'any', false)(), 'invalid', false)(J$.T(120089, 17, 22, false)), 'required', false)() }, 11, false), schema, false, false);
                                            var result = J$.W(120169, 'result', J$.M(120161, J$.R(120129, 'L', L, false, true), 'validate', false)(J$.T(120145, { x: J$.T(120137, 17, 22, false) }, 11, false), J$.R(120153, 'schema', schema, false, false)), result, false, false);
                                            J$.M(120193, J$.I(typeof console === 'undefined' ? console = J$.R(120177, 'console', undefined, true, true) : console = J$.R(120177, 'console', console, true, true)), 'log', false)(J$.R(120185, 'result', result, false, false));
                                            J$.M(120249, J$.G(120241, J$.G(120233, J$.F(120225, J$.R(120201, 'expect', expect, false, true), false)(J$.U(9890, '!', J$.G(120217, J$.R(120209, 'result', result, false, false), 'error'))), 'to'), 'be'), 'false', false)();
                                            J$.M(120337, J$.G(120321, J$.G(120313, J$.F(120305, J$.R(120257, 'expect', expect, false, true), false)(J$.G(120297, J$.G(120289, J$.G(120273, J$.R(120265, 'result', result, false, false), 'error'), J$.T(120281, 0, 22, false)), 'type')), 'to'), 'be'), 'equal', false)(J$.T(120329, 'invalid_value', 21, false));
                                            J$.M(120425, J$.G(120409, J$.G(120401, J$.F(120393, J$.R(120345, 'expect', expect, false, true), false)(J$.G(120385, J$.G(120377, J$.G(120361, J$.R(120353, 'result', result, false, false), 'error'), J$.T(120369, 0, 22, false)), 'sourcePath')), 'to'), 'be'), 'equal', false)(J$.T(120417, '/x', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(121089, J$e);
                                        } finally {
                                            if (J$.Fr(121097))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(120769, J$.I(typeof it === 'undefined' ? it = J$.R(120481, 'it', undefined, true, true) : it = J$.R(120481, 'it', it, true, true)), false)(J$.T(120489, '\'no_alternative_matched\' is returned if alternatives() did not match', 21, false), J$.T(120761, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(120729, arguments.callee, this, arguments);
                                            arguments = J$.N(120737, 'arguments', arguments, true, false, false);
                                            J$.N(120745, 'schema', schema, false, false, false);
                                            J$.N(120753, 'result', result, false, false, false);
                                            var schema = J$.W(120537, 'schema', J$.T(120529, [
                                                J$.M(120505, J$.R(120497, 'L', L, false, true), 'string', false)(),
                                                J$.M(120521, J$.R(120513, 'L', L, false, true), 'number', false)()
                                            ], 10, false), schema, false, false);
                                            var result = J$.W(120577, 'result', J$.M(120569, J$.R(120545, 'L', L, false, true), 'validate', false)(J$.T(120553, true, 23, false), J$.R(120561, 'schema', schema, false, false)), result, false, false);
                                            J$.M(120633, J$.G(120625, J$.G(120617, J$.F(120609, J$.R(120585, 'expect', expect, false, true), false)(J$.U(9898, '!', J$.G(120601, J$.R(120593, 'result', result, false, false), 'error'))), 'to'), 'be'), 'false', false)();
                                            J$.M(120721, J$.G(120705, J$.G(120697, J$.F(120689, J$.R(120641, 'expect', expect, false, true), false)(J$.G(120681, J$.G(120673, J$.G(120657, J$.R(120649, 'result', result, false, false), 'error'), J$.T(120665, 0, 22, false)), 'type')), 'to'), 'be'), 'equal', false)(J$.T(120713, 'no_alternative_matched', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(121105, J$e);
                                        } finally {
                                            if (J$.Fr(121113))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(121009, J$.I(typeof it === 'undefined' ? it = J$.R(120777, 'it', undefined, true, true) : it = J$.R(120777, 'it', it, true, true)), false)(J$.T(120785, 'no error is thrown if no any().invalid() value is encountered', 21, false), J$.T(121001, function () {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(120969, arguments.callee, this, arguments);
                                            arguments = J$.N(120977, 'arguments', arguments, true, false, false);
                                            J$.N(120985, 'schema', schema, false, false, false);
                                            J$.N(120993, 'result', result, false, false, false);
                                            var schema = J$.W(120841, 'schema', J$.M(120833, J$.M(120817, J$.M(120801, J$.R(120793, 'L', L, false, true), 'any', false)(), 'invalid', false)(J$.T(120809, 3, 22, false)), 'invalid', false)(J$.T(120825, 4, 22, false)), schema, false, false);
                                            var result = J$.W(120881, 'result', J$.M(120873, J$.R(120849, 'L', L, false, true), 'validate', false)(J$.T(120857, 17, 22, false), J$.R(120865, 'schema', schema, false, false)), result, false, false);
                                            J$.M(120905, J$.I(typeof console === 'undefined' ? console = J$.R(120889, 'console', undefined, true, true) : console = J$.R(120889, 'console', console, true, true)), 'log', false)(J$.R(120897, 'result', result, false, false));
                                            J$.M(120961, J$.G(120953, J$.G(120945, J$.F(120937, J$.R(120913, 'expect', expect, false, true), false)(J$.U(9906, '!', J$.G(120929, J$.R(120921, 'result', result, false, false), 'error'))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(121121, J$e);
                                        } finally {
                                            if (J$.Fr(121129))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(121137, J$e);
                        } finally {
                            if (J$.Fr(121145))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(121153, J$e);
        } finally {
            if (J$.Sr(121161))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

