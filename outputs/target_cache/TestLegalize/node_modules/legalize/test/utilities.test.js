J$.noInstrEval = false;
jalangiLabel28:
    while (true) {
        try {
            J$.Se(111417, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestLegalize/node_modules/legalize/test/utilities.test.js');
            J$.N(111425, 'expect', expect, false, false, false);
            J$.N(111433, 'core', core, false, false, false);
            J$.T(105937, 'use strict', 21, false);
            var expect = J$.W(105977, 'expect', J$.G(105969, J$.F(105961, J$.I(typeof require === 'undefined' ? require = J$.R(105945, 'require', undefined, true, true) : require = J$.R(105945, 'require', require, true, true)), false)(J$.T(105953, 'chai', 21, false)), 'expect'), expect, false, true);
            var core = J$.W(106009, 'core', J$.F(106001, J$.I(typeof require === 'undefined' ? require = J$.R(105985, 'require', undefined, true, true) : require = J$.R(105985, 'require', require, true, true)), false)(J$.T(105993, '../src/legalize.js', 21, false)), core, false, true);
            J$.F(111409, J$.I(typeof describe === 'undefined' ? describe = J$.R(106017, 'describe', undefined, true, true) : describe = J$.R(106017, 'describe', describe, true, true)), false)(J$.T(106025, 'utilities', 21, false), J$.T(111401, function () {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(111385, arguments.callee, this, arguments);
                            arguments = J$.N(111393, 'arguments', arguments, true, false, false);
                            J$.F(106249, J$.I(typeof it === 'undefined' ? it = J$.R(106033, 'it', undefined, true, true) : it = J$.R(106033, 'it', it, true, true)), false)(J$.T(106041, '#isFunction should return true when given a function', 21, false), J$.T(106241, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(106225, arguments.callee, this, arguments);
                                            arguments = J$.N(106233, 'arguments', arguments, true, false, false);
                                            J$.M(106137, J$.G(106121, J$.G(106113, J$.G(106105, J$.F(106097, J$.R(106049, 'expect', expect, false, true), false)(J$.M(106089, J$.R(106057, 'core', core, false, true), 'isFunction', false)(J$.T(106081, function () {
                                                jalangiLabel0:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(106065, arguments.callee, this, arguments);
                                                            arguments = J$.N(106073, 'arguments', arguments, true, false, false);
                                                        } catch (J$e) {
                                                            J$.Ex(111441, J$e);
                                                        } finally {
                                                            if (J$.Fr(111449))
                                                                continue jalangiLabel0;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106129, true, 23, false));
                                            J$.M(106217, J$.G(106201, J$.G(106193, J$.G(106185, J$.F(106177, J$.R(106145, 'expect', expect, false, true), false)(J$.M(106169, J$.R(106153, 'core', core, false, true), 'isFunction', false)(J$.T(106161, {}, 11, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106209, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111457, J$e);
                                        } finally {
                                            if (J$.Fr(111465))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(106617, J$.I(typeof it === 'undefined' ? it = J$.R(106257, 'it', undefined, true, true) : it = J$.R(106257, 'it', it, true, true)), false)(J$.T(106265, '#isFunction should return false when not given a function', 21, false), J$.T(106609, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(106593, arguments.callee, this, arguments);
                                            arguments = J$.N(106601, 'arguments', arguments, true, false, false);
                                            J$.M(106345, J$.G(106329, J$.G(106321, J$.G(106313, J$.F(106305, J$.R(106273, 'expect', expect, false, true), false)(J$.M(106297, J$.R(106281, 'core', core, false, true), 'isFunction', false)(J$.T(106289, {}, 11, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106337, false, 23, false));
                                            J$.M(106425, J$.G(106409, J$.G(106401, J$.G(106393, J$.F(106385, J$.R(106353, 'expect', expect, false, true), false)(J$.M(106377, J$.R(106361, 'core', core, false, true), 'isFunction', false)(J$.T(106369, '', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106417, false, 23, false));
                                            J$.M(106505, J$.G(106489, J$.G(106481, J$.G(106473, J$.F(106465, J$.R(106433, 'expect', expect, false, true), false)(J$.M(106457, J$.R(106441, 'core', core, false, true), 'isFunction', false)(J$.T(106449, undefined, 24, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106497, false, 23, false));
                                            J$.M(106585, J$.G(106569, J$.G(106561, J$.G(106553, J$.F(106545, J$.R(106513, 'expect', expect, false, true), false)(J$.M(106537, J$.R(106521, 'core', core, false, true), 'isFunction', false)(J$.T(106529, null, 25, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(106577, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111473, J$e);
                                        } finally {
                                            if (J$.Fr(111481))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(106737, J$.I(typeof it === 'undefined' ? it = J$.R(106625, 'it', undefined, true, true) : it = J$.R(106625, 'it', it, true, true)), false)(J$.T(106633, '#isObject should return true if passed an object', 21, false), J$.T(106729, function () {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(106713, arguments.callee, this, arguments);
                                            arguments = J$.N(106721, 'arguments', arguments, true, false, false);
                                            J$.M(106705, J$.G(106689, J$.G(106681, J$.F(106673, J$.R(106641, 'expect', expect, false, true), false)(J$.M(106665, J$.R(106649, 'core', core, false, true), 'isObject', false)(J$.T(106657, {}, 11, false))), 'to'), 'be'), 'equal', false)(J$.T(106697, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111489, J$e);
                                        } finally {
                                            if (J$.Fr(111497))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(106857, J$.I(typeof it === 'undefined' ? it = J$.R(106745, 'it', undefined, true, true) : it = J$.R(106745, 'it', it, true, true)), false)(J$.T(106753, '#isObject should return false if passed `null\'', 21, false), J$.T(106849, function () {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(106833, arguments.callee, this, arguments);
                                            arguments = J$.N(106841, 'arguments', arguments, true, false, false);
                                            J$.M(106825, J$.G(106809, J$.G(106801, J$.F(106793, J$.R(106761, 'expect', expect, false, true), false)(J$.M(106785, J$.R(106769, 'core', core, false, true), 'isObject', false)(J$.T(106777, null, 25, false))), 'to'), 'be'), 'equal', false)(J$.T(106817, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111505, J$e);
                                        } finally {
                                            if (J$.Fr(111513))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(106977, J$.I(typeof it === 'undefined' ? it = J$.R(106865, 'it', undefined, true, true) : it = J$.R(106865, 'it', it, true, true)), false)(J$.T(106873, '#isEmpty should return true for the empty string', 21, false), J$.T(106969, function () {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(106953, arguments.callee, this, arguments);
                                            arguments = J$.N(106961, 'arguments', arguments, true, false, false);
                                            J$.M(106945, J$.G(106929, J$.G(106921, J$.F(106913, J$.R(106881, 'expect', expect, false, true), false)(J$.M(106905, J$.R(106889, 'core', core, false, true), 'isEmpty', false)(J$.T(106897, '', 21, false))), 'to'), 'be'), 'equal', false)(J$.T(106937, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111521, J$e);
                                        } finally {
                                            if (J$.Fr(111529))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107097, J$.I(typeof it === 'undefined' ? it = J$.R(106985, 'it', undefined, true, true) : it = J$.R(106985, 'it', it, true, true)), false)(J$.T(106993, '#isEmpty should return true for the empty object', 21, false), J$.T(107089, function () {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(107073, arguments.callee, this, arguments);
                                            arguments = J$.N(107081, 'arguments', arguments, true, false, false);
                                            J$.M(107065, J$.G(107049, J$.G(107041, J$.F(107033, J$.R(107001, 'expect', expect, false, true), false)(J$.M(107025, J$.R(107009, 'core', core, false, true), 'isEmpty', false)(J$.T(107017, {}, 11, false))), 'to'), 'be'), 'equal', false)(J$.T(107057, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111537, J$e);
                                        } finally {
                                            if (J$.Fr(111545))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107217, J$.I(typeof it === 'undefined' ? it = J$.R(107105, 'it', undefined, true, true) : it = J$.R(107105, 'it', it, true, true)), false)(J$.T(107113, '#isUndefined should return true for `undefined\'', 21, false), J$.T(107209, function () {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(107193, arguments.callee, this, arguments);
                                            arguments = J$.N(107201, 'arguments', arguments, true, false, false);
                                            J$.M(107185, J$.G(107169, J$.G(107161, J$.F(107153, J$.R(107121, 'expect', expect, false, true), false)(J$.M(107145, J$.R(107129, 'core', core, false, true), 'isUndefined', false)(J$.T(107137, undefined, 24, false))), 'to'), 'be'), 'equal', false)(J$.T(107177, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111553, J$e);
                                        } finally {
                                            if (J$.Fr(111561))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107337, J$.I(typeof it === 'undefined' ? it = J$.R(107225, 'it', undefined, true, true) : it = J$.R(107225, 'it', it, true, true)), false)(J$.T(107233, '#isUndefined should return true for `null\'', 21, false), J$.T(107329, function () {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(107313, arguments.callee, this, arguments);
                                            arguments = J$.N(107321, 'arguments', arguments, true, false, false);
                                            J$.M(107305, J$.G(107289, J$.G(107281, J$.F(107273, J$.R(107241, 'expect', expect, false, true), false)(J$.M(107265, J$.R(107249, 'core', core, false, true), 'isUndefined', false)(J$.T(107257, null, 25, false))), 'to'), 'be'), 'equal', false)(J$.T(107297, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111569, J$e);
                                        } finally {
                                            if (J$.Fr(111577))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107465, J$.I(typeof it === 'undefined' ? it = J$.R(107345, 'it', undefined, true, true) : it = J$.R(107345, 'it', it, true, true)), false)(J$.T(107353, '#isDefined should return false for `undefined\'', 21, false), J$.T(107457, function () {
                                jalangiLabel9:
                                    while (true) {
                                        try {
                                            J$.Fe(107441, arguments.callee, this, arguments);
                                            arguments = J$.N(107449, 'arguments', arguments, true, false, false);
                                            J$.M(107433, J$.G(107417, J$.G(107409, J$.G(107401, J$.F(107393, J$.R(107361, 'expect', expect, false, true), false)(J$.M(107385, J$.R(107369, 'core', core, false, true), 'isDefined', false)(J$.T(107377, undefined, 24, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(107425, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111585, J$e);
                                        } finally {
                                            if (J$.Fr(111593))
                                                continue jalangiLabel9;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107593, J$.I(typeof it === 'undefined' ? it = J$.R(107473, 'it', undefined, true, true) : it = J$.R(107473, 'it', it, true, true)), false)(J$.T(107481, '#isDefined should return false for `null\'', 21, false), J$.T(107585, function () {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(107569, arguments.callee, this, arguments);
                                            arguments = J$.N(107577, 'arguments', arguments, true, false, false);
                                            J$.M(107561, J$.G(107545, J$.G(107537, J$.G(107529, J$.F(107521, J$.R(107489, 'expect', expect, false, true), false)(J$.M(107513, J$.R(107497, 'core', core, false, true), 'isDefined', false)(J$.T(107505, null, 25, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(107553, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111601, J$e);
                                        } finally {
                                            if (J$.Fr(111609))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107737, J$.I(typeof it === 'undefined' ? it = J$.R(107601, 'it', undefined, true, true) : it = J$.R(107601, 'it', it, true, true)), false)(J$.T(107609, '#getLength should return 2 for { a: ..., b: ... }', 21, false), J$.T(107729, function () {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(107713, arguments.callee, this, arguments);
                                            arguments = J$.N(107721, 'arguments', arguments, true, false, false);
                                            J$.M(107705, J$.G(107689, J$.G(107681, J$.G(107673, J$.F(107665, J$.R(107617, 'expect', expect, false, true), false)(J$.M(107657, J$.R(107625, 'core', core, false, true), 'getLength', false)(J$.T(107649, {
                                                a: J$.T(107633, null, 25, false),
                                                b: J$.T(107641, null, 25, false)
                                            }, 11, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(107697, 2, 22, false));
                                        } catch (J$e) {
                                            J$.Ex(111617, J$e);
                                        } finally {
                                            if (J$.Fr(111625))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(107865, J$.I(typeof it === 'undefined' ? it = J$.R(107745, 'it', undefined, true, true) : it = J$.R(107745, 'it', it, true, true)), false)(J$.T(107753, '#getLength should return 10 for \'0123456789\'', 21, false), J$.T(107857, function () {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(107841, arguments.callee, this, arguments);
                                            arguments = J$.N(107849, 'arguments', arguments, true, false, false);
                                            J$.M(107833, J$.G(107817, J$.G(107809, J$.G(107801, J$.F(107793, J$.R(107761, 'expect', expect, false, true), false)(J$.M(107785, J$.R(107769, 'core', core, false, true), 'getLength', false)(J$.T(107777, '0123456789', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(107825, 10, 22, false));
                                        } catch (J$e) {
                                            J$.Ex(111633, J$e);
                                        } finally {
                                            if (J$.Fr(111641))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(108017, J$.I(typeof it === 'undefined' ? it = J$.R(107873, 'it', undefined, true, true) : it = J$.R(107873, 'it', it, true, true)), false)(J$.T(107881, '#getLength should return 3 for `[1, \'hello\', {}]\'', 21, false), J$.T(108009, function () {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(107993, arguments.callee, this, arguments);
                                            arguments = J$.N(108001, 'arguments', arguments, true, false, false);
                                            J$.M(107985, J$.G(107969, J$.G(107961, J$.G(107953, J$.F(107945, J$.R(107889, 'expect', expect, false, true), false)(J$.M(107937, J$.R(107897, 'core', core, false, true), 'getLength', false)(J$.T(107929, [
                                                J$.T(107905, 1, 22, false),
                                                J$.T(107913, 'hello', 21, false),
                                                J$.T(107921, {}, 11, false)
                                            ], 10, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(107977, 3, 22, false));
                                        } catch (J$e) {
                                            J$.Ex(111649, J$e);
                                        } finally {
                                            if (J$.Fr(111657))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(108209, J$.I(typeof it === 'undefined' ? it = J$.R(108025, 'it', undefined, true, true) : it = J$.R(108025, 'it', it, true, true)), false)(J$.T(108033, '#getLength should return `undefined\' if not object, array, or string', 21, false), J$.T(108201, function () {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(108185, arguments.callee, this, arguments);
                                            arguments = J$.N(108193, 'arguments', arguments, true, false, false);
                                            J$.M(108113, J$.G(108105, J$.G(108097, J$.F(108089, J$.R(108041, 'expect', expect, false, true), false)(J$.M(108081, J$.R(108049, 'core', core, false, true), 'getLength', false)(J$.T(108073, function () {
                                                jalangiLabel14:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(108057, arguments.callee, this, arguments);
                                                            arguments = J$.N(108065, 'arguments', arguments, true, false, false);
                                                        } catch (J$e) {
                                                            J$.Ex(111665, J$e);
                                                        } finally {
                                                            if (J$.Fr(111673))
                                                                continue jalangiLabel14;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false))), 'to'), 'be'), 'undefined', false)();
                                            J$.M(108177, J$.G(108169, J$.G(108161, J$.F(108153, J$.R(108121, 'expect', expect, false, true), false)(J$.M(108145, J$.R(108129, 'core', core, false, true), 'getLength', false)(J$.T(108137, 0.01, 22, false))), 'to'), 'be'), 'undefined', false)();
                                        } catch (J$e) {
                                            J$.Ex(111681, J$e);
                                        } finally {
                                            if (J$.Fr(111689))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(108417, J$.I(typeof it === 'undefined' ? it = J$.R(108217, 'it', undefined, true, true) : it = J$.R(108217, 'it', it, true, true)), false)(J$.T(108225, '#isNumber should return true when given a number', 21, false), J$.T(108409, function () {
                                jalangiLabel16:
                                    while (true) {
                                        try {
                                            J$.Fe(108393, arguments.callee, this, arguments);
                                            arguments = J$.N(108401, 'arguments', arguments, true, false, false);
                                            J$.M(108305, J$.G(108289, J$.G(108281, J$.G(108273, J$.F(108265, J$.R(108233, 'expect', expect, false, true), false)(J$.M(108257, J$.R(108241, 'core', core, false, true), 'isNumber', false)(J$.T(108249, 1.7e-22, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108297, true, 23, false));
                                            J$.M(108385, J$.G(108369, J$.G(108361, J$.G(108353, J$.F(108345, J$.R(108313, 'expect', expect, false, true), false)(J$.M(108337, J$.R(108321, 'core', core, false, true), 'isNumber', false)(J$.T(108329, NaN, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108377, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111697, J$e);
                                        } finally {
                                            if (J$.Fr(111705))
                                                continue jalangiLabel16;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(108705, J$.I(typeof it === 'undefined' ? it = J$.R(108425, 'it', undefined, true, true) : it = J$.R(108425, 'it', it, true, true)), false)(J$.T(108433, '#isNumber should return  when not given a number', 21, false), J$.T(108697, function () {
                                jalangiLabel17:
                                    while (true) {
                                        try {
                                            J$.Fe(108681, arguments.callee, this, arguments);
                                            arguments = J$.N(108689, 'arguments', arguments, true, false, false);
                                            J$.M(108513, J$.G(108497, J$.G(108489, J$.G(108481, J$.F(108473, J$.R(108441, 'expect', expect, false, true), false)(J$.M(108465, J$.R(108449, 'core', core, false, true), 'isNumber', false)(J$.T(108457, '123', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108505, false, 23, false));
                                            J$.M(108593, J$.G(108577, J$.G(108569, J$.G(108561, J$.F(108553, J$.R(108521, 'expect', expect, false, true), false)(J$.M(108545, J$.R(108529, 'core', core, false, true), 'isNumber', false)(J$.T(108537, /hello/, 14, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108585, false, 23, false));
                                            J$.M(108673, J$.G(108657, J$.G(108649, J$.G(108641, J$.F(108633, J$.R(108601, 'expect', expect, false, true), false)(J$.M(108625, J$.R(108609, 'core', core, false, true), 'isNumber', false)(J$.T(108617, {}, 11, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108665, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111713, J$e);
                                        } finally {
                                            if (J$.Fr(111721))
                                                continue jalangiLabel17;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(109313, J$.I(typeof it === 'undefined' ? it = J$.R(108713, 'it', undefined, true, true) : it = J$.R(108713, 'it', it, true, true)), false)(J$.T(108721, '#isNumeric should work for strings and numbers', 21, false), J$.T(109305, function () {
                                jalangiLabel18:
                                    while (true) {
                                        try {
                                            J$.Fe(109289, arguments.callee, this, arguments);
                                            arguments = J$.N(109297, 'arguments', arguments, true, false, false);
                                            J$.M(108801, J$.G(108785, J$.G(108777, J$.G(108769, J$.F(108761, J$.R(108729, 'expect', expect, false, true), false)(J$.M(108753, J$.R(108737, 'core', core, false, true), 'isNumeric', false)(J$.T(108745, 3475, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108793, true, 23, false));
                                            J$.M(108881, J$.G(108865, J$.G(108857, J$.G(108849, J$.F(108841, J$.R(108809, 'expect', expect, false, true), false)(J$.M(108833, J$.R(108817, 'core', core, false, true), 'isNumeric', false)(J$.T(108825, 34.5, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108873, true, 23, false));
                                            J$.M(108961, J$.G(108945, J$.G(108937, J$.G(108929, J$.F(108921, J$.R(108889, 'expect', expect, false, true), false)(J$.M(108913, J$.R(108897, 'core', core, false, true), 'isNumeric', false)(J$.T(108905, '-23984', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(108953, true, 23, false));
                                            J$.M(109041, J$.G(109025, J$.G(109017, J$.G(109009, J$.F(109001, J$.R(108969, 'expect', expect, false, true), false)(J$.M(108993, J$.R(108977, 'core', core, false, true), 'isNumeric', false)(J$.T(108985, '34234', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109033, true, 23, false));
                                            J$.M(109121, J$.G(109105, J$.G(109097, J$.G(109089, J$.F(109081, J$.R(109049, 'expect', expect, false, true), false)(J$.M(109073, J$.R(109057, 'core', core, false, true), 'isNumeric', false)(J$.T(109065, '34.3e+75', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109113, true, 23, false));
                                            J$.M(109201, J$.G(109185, J$.G(109177, J$.G(109169, J$.F(109161, J$.R(109129, 'expect', expect, false, true), false)(J$.M(109153, J$.R(109137, 'core', core, false, true), 'isNumeric', false)(J$.T(109145, '34e75', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109193, true, 23, false));
                                            J$.M(109281, J$.G(109265, J$.G(109257, J$.G(109249, J$.F(109241, J$.R(109209, 'expect', expect, false, true), false)(J$.M(109233, J$.R(109217, 'core', core, false, true), 'isNumeric', false)(J$.T(109225, '34e-75', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109273, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111729, J$e);
                                        } finally {
                                            if (J$.Fr(111737))
                                                continue jalangiLabel18;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(109761, J$.I(typeof it === 'undefined' ? it = J$.R(109321, 'it', undefined, true, true) : it = J$.R(109321, 'it', it, true, true)), false)(J$.T(109329, '#isNumeric should not work for string that to not contain a number', 21, false), J$.T(109753, function () {
                                jalangiLabel19:
                                    while (true) {
                                        try {
                                            J$.Fe(109737, arguments.callee, this, arguments);
                                            arguments = J$.N(109745, 'arguments', arguments, true, false, false);
                                            J$.M(109409, J$.G(109393, J$.G(109385, J$.G(109377, J$.F(109369, J$.R(109337, 'expect', expect, false, true), false)(J$.M(109361, J$.R(109345, 'core', core, false, true), 'isNumeric', false)(J$.T(109353, 'sohrgo', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109401, false, 23, false));
                                            J$.M(109489, J$.G(109473, J$.G(109465, J$.G(109457, J$.F(109449, J$.R(109417, 'expect', expect, false, true), false)(J$.M(109441, J$.R(109425, 'core', core, false, true), 'isNumeric', false)(J$.T(109433, /hello/, 14, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109481, false, 23, false));
                                            J$.M(109569, J$.G(109553, J$.G(109545, J$.G(109537, J$.F(109529, J$.R(109497, 'expect', expect, false, true), false)(J$.M(109521, J$.R(109505, 'core', core, false, true), 'isNumeric', false)(J$.T(109513, {}, 11, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109561, false, 23, false));
                                            J$.M(109649, J$.G(109633, J$.G(109625, J$.G(109617, J$.F(109609, J$.R(109577, 'expect', expect, false, true), false)(J$.M(109601, J$.R(109585, 'core', core, false, true), 'isNumeric', false)(J$.T(109593, 'as3e4234', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109641, false, 23, false));
                                            J$.M(109729, J$.G(109713, J$.G(109705, J$.G(109697, J$.F(109689, J$.R(109657, 'expect', expect, false, true), false)(J$.M(109681, J$.R(109665, 'core', core, false, true), 'isNumeric', false)(J$.T(109673, 'as3e4234', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109721, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111745, J$e);
                                        } finally {
                                            if (J$.Fr(111753))
                                                continue jalangiLabel19;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(110049, J$.I(typeof it === 'undefined' ? it = J$.R(109769, 'it', undefined, true, true) : it = J$.R(109769, 'it', it, true, true)), false)(J$.T(109777, '#isInteger should not work for numbers that are not integers', 21, false), J$.T(110041, function () {
                                jalangiLabel20:
                                    while (true) {
                                        try {
                                            J$.Fe(110025, arguments.callee, this, arguments);
                                            arguments = J$.N(110033, 'arguments', arguments, true, false, false);
                                            J$.M(109857, J$.G(109841, J$.G(109833, J$.G(109825, J$.F(109817, J$.R(109785, 'expect', expect, false, true), false)(J$.M(109809, J$.R(109793, 'core', core, false, true), 'isInteger', false)(J$.T(109801, 31.9, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109849, false, 23, false));
                                            J$.M(109937, J$.G(109921, J$.G(109913, J$.G(109905, J$.F(109897, J$.R(109865, 'expect', expect, false, true), false)(J$.M(109889, J$.R(109873, 'core', core, false, true), 'isInteger', false)(J$.T(109881, NaN, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(109929, false, 23, false));
                                            J$.M(110017, J$.G(110001, J$.G(109993, J$.G(109985, J$.F(109977, J$.R(109945, 'expect', expect, false, true), false)(J$.M(109969, J$.R(109953, 'core', core, false, true), 'isInteger', false)(J$.T(109961, '39.3', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(110009, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111761, J$e);
                                        } finally {
                                            if (J$.Fr(111769))
                                                continue jalangiLabel20;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(110337, J$.I(typeof it === 'undefined' ? it = J$.R(110057, 'it', undefined, true, true) : it = J$.R(110057, 'it', it, true, true)), false)(J$.T(110065, '#isInteger should only work for numbers that are integers', 21, false), J$.T(110329, function () {
                                jalangiLabel21:
                                    while (true) {
                                        try {
                                            J$.Fe(110313, arguments.callee, this, arguments);
                                            arguments = J$.N(110321, 'arguments', arguments, true, false, false);
                                            J$.M(110145, J$.G(110129, J$.G(110121, J$.G(110113, J$.F(110105, J$.R(110073, 'expect', expect, false, true), false)(J$.M(110097, J$.R(110081, 'core', core, false, true), 'isInteger', false)(J$.T(110089, 41, 22, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(110137, true, 23, false));
                                            J$.M(110225, J$.G(110209, J$.G(110201, J$.G(110193, J$.F(110185, J$.R(110153, 'expect', expect, false, true), false)(J$.M(110177, J$.R(110161, 'core', core, false, true), 'isInteger', false)(J$.T(110169, '39.0', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(110217, true, 23, false));
                                            J$.M(110305, J$.G(110289, J$.G(110281, J$.G(110273, J$.F(110265, J$.R(110233, 'expect', expect, false, true), false)(J$.M(110257, J$.R(110241, 'core', core, false, true), 'isInteger', false)(J$.T(110249, '47', 21, false))), 'to'), 'be'), 'be'), 'equal', false)(J$.T(110297, true, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(111777, J$e);
                                        } finally {
                                            if (J$.Fr(111785))
                                                continue jalangiLabel21;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(110753, J$.I(typeof it === 'undefined' ? it = J$.R(110345, 'it', undefined, true, true) : it = J$.R(110345, 'it', it, true, true)), false)(J$.T(110353, '#cast with target type = source type', 21, false), J$.T(110745, function () {
                                jalangiLabel22:
                                    while (true) {
                                        try {
                                            J$.Fe(110713, arguments.callee, this, arguments);
                                            arguments = J$.N(110721, 'arguments', arguments, true, false, false);
                                            J$.N(110729, 'array', array, false, false, false);
                                            J$.N(110737, 'object', object, false, false, false);
                                            J$.M(110433, J$.G(110417, J$.G(110409, J$.F(110401, J$.R(110361, 'expect', expect, false, true), false)(J$.M(110393, J$.R(110369, 'core', core, false, true), 'cast', false)(J$.T(110377, '24234', 21, false), J$.T(110385, 'string', 21, false))), 'to'), 'be'), 'equal', false)(J$.T(110425, '24234', 21, false));
                                            J$.M(110513, J$.G(110497, J$.G(110489, J$.F(110481, J$.R(110441, 'expect', expect, false, true), false)(J$.M(110473, J$.R(110449, 'core', core, false, true), 'cast', false)(J$.T(110457, 34758, 22, false), J$.T(110465, 'number', 21, false))), 'to'), 'be'), 'equal', false)(J$.T(110505, 34758, 22, false));
                                            var array = J$.W(110529, 'array', J$.T(110521, [], 10, false), array, false, false);
                                            J$.M(110609, J$.G(110593, J$.G(110585, J$.F(110577, J$.R(110537, 'expect', expect, false, true), false)(J$.M(110569, J$.R(110545, 'core', core, false, true), 'cast', false)(J$.R(110553, 'array', array, false, false), J$.T(110561, 'array', 21, false))), 'to'), 'be'), 'equal', false)(J$.R(110601, 'array', array, false, false));
                                            var object = J$.W(110625, 'object', J$.T(110617, {}, 11, false), object, false, false);
                                            J$.M(110705, J$.G(110689, J$.G(110681, J$.F(110673, J$.R(110633, 'expect', expect, false, true), false)(J$.M(110665, J$.R(110641, 'core', core, false, true), 'cast', false)(J$.R(110649, 'object', object, false, false), J$.T(110657, 'object', 21, false))), 'to'), 'be'), 'equal', false)(J$.R(110697, 'object', object, false, false));
                                        } catch (J$e) {
                                            J$.Ex(111793, J$e);
                                        } finally {
                                            if (J$.Fr(111801))
                                                continue jalangiLabel22;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(110945, J$.I(typeof it === 'undefined' ? it = J$.R(110761, 'it', undefined, true, true) : it = J$.R(110761, 'it', it, true, true)), false)(J$.T(110769, '#cast converts stringified boolean values', 21, false), J$.T(110937, function () {
                                jalangiLabel23:
                                    while (true) {
                                        try {
                                            J$.Fe(110921, arguments.callee, this, arguments);
                                            arguments = J$.N(110929, 'arguments', arguments, true, false, false);
                                            J$.M(110841, J$.G(110833, J$.G(110825, J$.F(110817, J$.R(110777, 'expect', expect, false, true), false)(J$.M(110809, J$.R(110785, 'core', core, false, true), 'cast', false)(J$.T(110793, 'true', 21, false), J$.T(110801, 'boolean', 21, false))), 'to'), 'be'), 'true', false)();
                                            J$.M(110913, J$.G(110905, J$.G(110897, J$.F(110889, J$.R(110849, 'expect', expect, false, true), false)(J$.M(110881, J$.R(110857, 'core', core, false, true), 'cast', false)(J$.T(110865, 'false', 21, false), J$.T(110873, 'boolean', 21, false))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(111809, J$e);
                                        } finally {
                                            if (J$.Fr(111817))
                                                continue jalangiLabel23;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(111137, J$.I(typeof it === 'undefined' ? it = J$.R(110953, 'it', undefined, true, true) : it = J$.R(110953, 'it', it, true, true)), false)(J$.T(110961, '#cast converts numeric boolean values', 21, false), J$.T(111129, function () {
                                jalangiLabel24:
                                    while (true) {
                                        try {
                                            J$.Fe(111113, arguments.callee, this, arguments);
                                            arguments = J$.N(111121, 'arguments', arguments, true, false, false);
                                            J$.M(111033, J$.G(111025, J$.G(111017, J$.F(111009, J$.R(110969, 'expect', expect, false, true), false)(J$.M(111001, J$.R(110977, 'core', core, false, true), 'cast', false)(J$.T(110985, '1', 21, false), J$.T(110993, 'boolean', 21, false))), 'to'), 'be'), 'true', false)();
                                            J$.M(111105, J$.G(111097, J$.G(111089, J$.F(111081, J$.R(111041, 'expect', expect, false, true), false)(J$.M(111073, J$.R(111049, 'core', core, false, true), 'cast', false)(J$.T(111057, '0', 21, false), J$.T(111065, 'boolean', 21, false))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(111825, J$e);
                                        } finally {
                                            if (J$.Fr(111833))
                                                continue jalangiLabel24;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(111257, J$.I(typeof it === 'undefined' ? it = J$.R(111145, 'it', undefined, true, true) : it = J$.R(111145, 'it', it, true, true)), false)(J$.T(111153, '#cast returns undefined for object', 21, false), J$.T(111249, function () {
                                jalangiLabel25:
                                    while (true) {
                                        try {
                                            J$.Fe(111233, arguments.callee, this, arguments);
                                            arguments = J$.N(111241, 'arguments', arguments, true, false, false);
                                            J$.M(111225, J$.G(111217, J$.G(111209, J$.F(111201, J$.R(111161, 'expect', expect, false, true), false)(J$.M(111193, J$.R(111169, 'core', core, false, true), 'cast', false)(J$.T(111177, '1', 21, false), J$.T(111185, 'object', 21, false))), 'to'), 'be'), 'undefined', false)();
                                        } catch (J$e) {
                                            J$.Ex(111841, J$e);
                                        } finally {
                                            if (J$.Fr(111849))
                                                continue jalangiLabel25;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(111377, J$.I(typeof it === 'undefined' ? it = J$.R(111265, 'it', undefined, true, true) : it = J$.R(111265, 'it', it, true, true)), false)(J$.T(111273, '#equals treats two NaN values as equal', 21, false), J$.T(111369, function () {
                                jalangiLabel26:
                                    while (true) {
                                        try {
                                            J$.Fe(111353, arguments.callee, this, arguments);
                                            arguments = J$.N(111361, 'arguments', arguments, true, false, false);
                                            J$.M(111345, J$.G(111337, J$.G(111329, J$.F(111321, J$.R(111281, 'expect', expect, false, true), false)(J$.M(111313, J$.R(111289, 'core', core, false, true), 'equals', false)(J$.T(111297, NaN, 22, false), J$.T(111305, NaN, 22, false))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(111857, J$e);
                                        } finally {
                                            if (J$.Fr(111865))
                                                continue jalangiLabel26;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(111873, J$e);
                        } finally {
                            if (J$.Fr(111881))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(111889, J$e);
        } finally {
            if (J$.Sr(111897))
                continue jalangiLabel28;
            else
                break jalangiLabel28;
        }
    }
// JALANGI DO NOT INSTRUMENT

