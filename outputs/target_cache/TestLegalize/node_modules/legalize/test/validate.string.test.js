J$.noInstrEval = false;
jalangiLabel9:
    while (true) {
        try {
            J$.Se(128657, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestLegalize/node_modules/legalize/test/validate.string.test.js');
            J$.N(128665, 'expect', expect, false, false, false);
            J$.N(128673, 'L', L, false, false, false);
            J$.T(127217, 'use strict', 21, false);
            var expect = J$.W(127257, 'expect', J$.G(127249, J$.F(127241, J$.I(typeof require === 'undefined' ? require = J$.R(127225, 'require', undefined, true, true) : require = J$.R(127225, 'require', require, true, true)), false)(J$.T(127233, 'chai', 21, false)), 'expect'), expect, false, true);
            var L = J$.W(127289, 'L', J$.F(127281, J$.I(typeof require === 'undefined' ? require = J$.R(127265, 'require', undefined, true, true) : require = J$.R(127265, 'require', require, true, true)), false)(J$.T(127273, '../src/legalize-node.js', 21, false)), L, false, true);
            J$.F(128649, J$.I(typeof describe === 'undefined' ? describe = J$.R(127297, 'describe', undefined, true, true) : describe = J$.R(127297, 'describe', describe, true, true)), false)(J$.T(127305, 'string validations', 21, false), J$.T(128641, function () {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(128625, arguments.callee, this, arguments);
                            arguments = J$.N(128633, 'arguments', arguments, true, false, false);
                            J$.F(127481, J$.I(typeof it === 'undefined' ? it = J$.R(127313, 'it', undefined, true, true) : it = J$.R(127313, 'it', it, true, true)), false)(J$.T(127321, 'string().matches(/^[0-9]+$/) accepts strings that match', 21, false), J$.T(127473, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(127449, arguments.callee, this, arguments);
                                            arguments = J$.N(127457, 'arguments', arguments, true, false, false);
                                            J$.N(127465, 'schema', schema, false, false, false);
                                            var schema = J$.W(127361, 'schema', J$.M(127353, J$.M(127337, J$.R(127329, 'L', L, false, true), 'string', false)(), 'match', false)(J$.T(127345, /^[0-9]+$/, 14, false)), schema, false, false);
                                            J$.M(127441, J$.G(127433, J$.G(127425, J$.F(127417, J$.R(127369, 'expect', expect, false, true), false)(J$.U(10154, '!', J$.G(127409, J$.M(127401, J$.R(127377, 'L', L, false, true), 'validate', false)(J$.T(127385, '30485', 21, false), J$.R(127393, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(128681, J$e);
                                        } finally {
                                            if (J$.Fr(128689))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(127657, J$.I(typeof it === 'undefined' ? it = J$.R(127489, 'it', undefined, true, true) : it = J$.R(127489, 'it', it, true, true)), false)(J$.T(127497, 'string().matches(/^[0-9]+$/) rejects strings that do not match', 21, false), J$.T(127649, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(127625, arguments.callee, this, arguments);
                                            arguments = J$.N(127633, 'arguments', arguments, true, false, false);
                                            J$.N(127641, 'schema', schema, false, false, false);
                                            var schema = J$.W(127537, 'schema', J$.M(127529, J$.M(127513, J$.R(127505, 'L', L, false, true), 'string', false)(), 'match', false)(J$.T(127521, /^[0-9]+$/, 14, false)), schema, false, false);
                                            J$.M(127617, J$.G(127609, J$.G(127601, J$.F(127593, J$.R(127545, 'expect', expect, false, true), false)(J$.U(10162, '!', J$.G(127585, J$.M(127577, J$.R(127553, 'L', L, false, true), 'validate', false)(J$.T(127561, '304a85', 21, false), J$.R(127569, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(128697, J$e);
                                        } finally {
                                            if (J$.Fr(128705))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(127825, J$.I(typeof it === 'undefined' ? it = J$.R(127665, 'it', undefined, true, true) : it = J$.R(127665, 'it', it, true, true)), false)(J$.T(127673, 'string().lowercase() matches lower case strings', 21, false), J$.T(127817, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(127793, arguments.callee, this, arguments);
                                            arguments = J$.N(127801, 'arguments', arguments, true, false, false);
                                            J$.N(127809, 'schema', schema, false, false, false);
                                            var schema = J$.W(127705, 'schema', J$.M(127697, J$.M(127689, J$.R(127681, 'L', L, false, true), 'string', false)(), 'lowercase', false)(), schema, false, false);
                                            J$.M(127785, J$.G(127777, J$.G(127769, J$.F(127761, J$.R(127713, 'expect', expect, false, true), false)(J$.U(10170, '!', J$.G(127753, J$.M(127745, J$.R(127721, 'L', L, false, true), 'validate', false)(J$.T(127729, 'abcdef', 21, false), J$.R(127737, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(128713, J$e);
                                        } finally {
                                            if (J$.Fr(128721))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(127993, J$.I(typeof it === 'undefined' ? it = J$.R(127833, 'it', undefined, true, true) : it = J$.R(127833, 'it', it, true, true)), false)(J$.T(127841, 'string().lowercase() rejects strings that contain upper case letters', 21, false), J$.T(127985, function () {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(127961, arguments.callee, this, arguments);
                                            arguments = J$.N(127969, 'arguments', arguments, true, false, false);
                                            J$.N(127977, 'schema', schema, false, false, false);
                                            var schema = J$.W(127873, 'schema', J$.M(127865, J$.M(127857, J$.R(127849, 'L', L, false, true), 'string', false)(), 'lowercase', false)(), schema, false, false);
                                            J$.M(127953, J$.G(127945, J$.G(127937, J$.F(127929, J$.R(127881, 'expect', expect, false, true), false)(J$.U(10178, '!', J$.G(127921, J$.M(127913, J$.R(127889, 'L', L, false, true), 'validate', false)(J$.T(127897, 'abcDef', 21, false), J$.R(127905, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(128729, J$e);
                                        } finally {
                                            if (J$.Fr(128737))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(128161, J$.I(typeof it === 'undefined' ? it = J$.R(128001, 'it', undefined, true, true) : it = J$.R(128001, 'it', it, true, true)), false)(J$.T(128009, 'string().uppercase() matches upper case strings', 21, false), J$.T(128153, function () {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(128129, arguments.callee, this, arguments);
                                            arguments = J$.N(128137, 'arguments', arguments, true, false, false);
                                            J$.N(128145, 'schema', schema, false, false, false);
                                            var schema = J$.W(128041, 'schema', J$.M(128033, J$.M(128025, J$.R(128017, 'L', L, false, true), 'string', false)(), 'uppercase', false)(), schema, false, false);
                                            J$.M(128121, J$.G(128113, J$.G(128105, J$.F(128097, J$.R(128049, 'expect', expect, false, true), false)(J$.U(10186, '!', J$.G(128089, J$.M(128081, J$.R(128057, 'L', L, false, true), 'validate', false)(J$.T(128065, 'ABCDEF', 21, false), J$.R(128073, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(128745, J$e);
                                        } finally {
                                            if (J$.Fr(128753))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(128329, J$.I(typeof it === 'undefined' ? it = J$.R(128169, 'it', undefined, true, true) : it = J$.R(128169, 'it', it, true, true)), false)(J$.T(128177, 'string().uppercase() rejects strings that contain lower case letters', 21, false), J$.T(128321, function () {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(128297, arguments.callee, this, arguments);
                                            arguments = J$.N(128305, 'arguments', arguments, true, false, false);
                                            J$.N(128313, 'schema', schema, false, false, false);
                                            var schema = J$.W(128209, 'schema', J$.M(128201, J$.M(128193, J$.R(128185, 'L', L, false, true), 'string', false)(), 'uppercase', false)(), schema, false, false);
                                            J$.M(128289, J$.G(128281, J$.G(128273, J$.F(128265, J$.R(128217, 'expect', expect, false, true), false)(J$.U(10194, '!', J$.G(128257, J$.M(128249, J$.R(128225, 'L', L, false, true), 'validate', false)(J$.T(128233, 'abcDef', 21, false), J$.R(128241, 'schema', schema, false, false)), 'error'))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(128761, J$e);
                                        } finally {
                                            if (J$.Fr(128769))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(128473, J$.I(typeof it === 'undefined' ? it = J$.R(128337, 'it', undefined, true, true) : it = J$.R(128337, 'it', it, true, true)), false)(J$.T(128345, 'string().url() accepts urls', 21, false), J$.T(128465, function () {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(128449, arguments.callee, this, arguments);
                                            arguments = J$.N(128457, 'arguments', arguments, true, false, false);
                                            J$.M(128441, J$.G(128433, J$.G(128425, J$.F(128417, J$.R(128353, 'expect', expect, false, true), false)(J$.U(10202, '!', J$.G(128409, J$.M(128401, J$.R(128361, 'L', L, false, true), 'validate', false)(J$.T(128369, 'http://localhost/', 21, false), J$.M(128393, J$.M(128385, J$.R(128377, 'L', L, false, true), 'string', false)(), 'url', false)()), 'error'))), 'to'), 'be'), 'true', false)();
                                        } catch (J$e) {
                                            J$.Ex(128777, J$e);
                                        } finally {
                                            if (J$.Fr(128785))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(128617, J$.I(typeof it === 'undefined' ? it = J$.R(128481, 'it', undefined, true, true) : it = J$.R(128481, 'it', it, true, true)), false)(J$.T(128489, 'string().url() rejects non-urls', 21, false), J$.T(128609, function () {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(128593, arguments.callee, this, arguments);
                                            arguments = J$.N(128601, 'arguments', arguments, true, false, false);
                                            J$.M(128585, J$.G(128577, J$.G(128569, J$.F(128561, J$.R(128497, 'expect', expect, false, true), false)(J$.U(10210, '!', J$.G(128553, J$.M(128545, J$.R(128505, 'L', L, false, true), 'validate', false)(J$.T(128513, 'www.localhost.com', 21, false), J$.M(128537, J$.M(128529, J$.R(128521, 'L', L, false, true), 'string', false)(), 'url', false)()), 'error'))), 'to'), 'be'), 'false', false)();
                                        } catch (J$e) {
                                            J$.Ex(128793, J$e);
                                        } finally {
                                            if (J$.Fr(128801))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(128809, J$e);
                        } finally {
                            if (J$.Fr(128817))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(128825, J$e);
        } finally {
            if (J$.Sr(128833))
                continue jalangiLabel9;
            else
                break jalangiLabel9;
        }
    }
// JALANGI DO NOT INSTRUMENT

