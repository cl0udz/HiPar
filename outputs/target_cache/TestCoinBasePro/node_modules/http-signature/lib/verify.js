J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(930425, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/http-signature/lib/verify.js');
            J$.N(930433, 'assert', assert, false, false, false);
            J$.N(930441, 'crypto', crypto, false, false, false);
            J$.N(930449, 'sshpk', sshpk, false, false, false);
            J$.N(930457, 'utils', utils, false, false, false);
            J$.N(930465, 'HASH_ALGOS', HASH_ALGOS, false, false, false);
            J$.N(930473, 'PK_ALGOS', PK_ALGOS, false, false, false);
            J$.N(930481, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(930489, 'HttpSignatureError', HttpSignatureError, false, false, false);
            J$.N(930497, 'validateAlgorithm', validateAlgorithm, false, false, false);
            J$.T(928833, 'use strict', 21, false);
            J$.F(928857, J$.I(typeof require === 'undefined' ? require = J$.R(928841, 'require', undefined, true, true) : require = J$.R(928841, 'require', require, true, true)), false)(J$.T(928849, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(928881, J$.I(typeof require === 'undefined' ? require = J$.R(928865, 'require', undefined, true, true) : require = J$.R(928865, 'require', require, true, true)), false)(J$.T(928873, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(928905, J$.I(typeof require === 'undefined' ? require = J$.R(928889, 'require', undefined, true, true) : require = J$.R(928889, 'require', require, true, true)), false)(J$.T(928897, 'core-js/modules/es.regexp.to-string', 21, false));
            var assert = J$.W(928937, 'assert', J$.F(928929, J$.I(typeof require === 'undefined' ? require = J$.R(928913, 'require', undefined, true, true) : require = J$.R(928913, 'require', require, true, true)), false)(J$.T(928921, 'assert-plus', 21, false)), assert, false, true);
            var crypto = J$.W(928969, 'crypto', J$.F(928961, J$.I(typeof require === 'undefined' ? require = J$.R(928945, 'require', undefined, true, true) : require = J$.R(928945, 'require', require, true, true)), false)(J$.T(928953, 'crypto', 21, false)), crypto, false, true);
            var sshpk = J$.W(929001, 'sshpk', J$.F(928993, J$.I(typeof require === 'undefined' ? require = J$.R(928977, 'require', undefined, true, true) : require = J$.R(928977, 'require', require, true, true)), false)(J$.T(928985, 'sshpk', 21, false)), sshpk, false, true);
            var utils = J$.W(929033, 'utils', J$.F(929025, J$.I(typeof require === 'undefined' ? require = J$.R(929009, 'require', undefined, true, true) : require = J$.R(929009, 'require', require, true, true)), false)(J$.T(929017, './utils', 21, false)), utils, false, true);
            var HASH_ALGOS = J$.W(929057, 'HASH_ALGOS', J$.G(929049, J$.R(929041, 'utils', utils, false, true), 'HASH_ALGOS'), HASH_ALGOS, false, true);
            var PK_ALGOS = J$.W(929081, 'PK_ALGOS', J$.G(929073, J$.R(929065, 'utils', utils, false, true), 'PK_ALGOS'), PK_ALGOS, false, true);
            var InvalidAlgorithmError = J$.W(929105, 'InvalidAlgorithmError', J$.G(929097, J$.R(929089, 'utils', utils, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var HttpSignatureError = J$.W(929129, 'HttpSignatureError', J$.G(929121, J$.R(929113, 'utils', utils, false, true), 'HttpSignatureError'), HttpSignatureError, false, true);
            var validateAlgorithm = J$.W(929153, 'validateAlgorithm', J$.G(929145, J$.R(929137, 'utils', utils, false, true), 'validateAlgorithm'), validateAlgorithm, false, true);
            J$.P(930417, J$.I(typeof module === 'undefined' ? module = J$.R(929161, 'module', undefined, true, true) : module = J$.R(929161, 'module', module, true, true)), 'exports', J$.T(930409, {
                verifySignature: J$.T(929665, function verifySignature(parsedSignature, pubkey) {
                    jalangiLabel0:
                        while (true) {
                            try {
                                J$.Fe(929617, arguments.callee, this, arguments);
                                arguments = J$.N(929625, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(929633, 'parsedSignature', parsedSignature, true, false, false);
                                pubkey = J$.N(929641, 'pubkey', pubkey, true, false, false);
                                J$.N(929649, 'alg', alg, false, false, false);
                                J$.N(929657, 'v', v, false, false, false);
                                J$.M(929193, J$.R(929169, 'assert', assert, false, true), 'object', false)(J$.R(929177, 'parsedSignature', parsedSignature, false, false), J$.T(929185, 'parsedSignature', 21, false));
                                if (J$.C(55768, J$.C(55760, J$.B(148194, '===', J$.U(148186, 'typeof', J$.R(929201, 'pubkey', pubkey, false, false)), J$.T(929209, 'string', 21, false))) ? J$._() : J$.M(929233, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(929217, 'Buffer', undefined, true, true) : Buffer = J$.R(929217, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(929225, 'pubkey', pubkey, false, false))))
                                    pubkey = J$.W(929265, 'pubkey', J$.M(929257, J$.R(929241, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(929249, 'pubkey', pubkey, false, false)), pubkey, false, false);
                                J$.M(929345, J$.R(929273, 'assert', assert, false, true), 'ok', false)(J$.M(929329, J$.G(929289, J$.R(929281, 'sshpk', sshpk, false, true), 'Key'), 'isKey', false)(J$.R(929297, 'pubkey', pubkey, false, false), J$.T(929321, [
                                    J$.T(929305, 1, 22, false),
                                    J$.T(929313, 1, 22, false)
                                ], 10, false)), J$.T(929337, 'pubkey must be a sshpk.Key', 21, false));
                                var alg = J$.W(929385, 'alg', J$.F(929377, J$.R(929353, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(929369, J$.R(929361, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(55784, J$.C(55776, J$.B(148202, '===', J$.G(929409, J$.R(929393, 'alg', alg, false, false), J$.T(929401, 0, 22, false)), J$.T(929417, 'hmac', 21, false))) ? J$._() : J$.B(148210, '!==', J$.G(929441, J$.R(929425, 'alg', alg, false, false), J$.T(929433, 0, 22, false)), J$.G(929457, J$.R(929449, 'pubkey', pubkey, false, false), 'type'))))
                                    return J$.Rt(929473, J$.T(929465, false, 23, false));
                                var v = J$.W(929521, 'v', J$.M(929513, J$.R(929481, 'pubkey', pubkey, false, false), 'createVerify', false)(J$.G(929505, J$.R(929489, 'alg', alg, false, false), J$.T(929497, 1, 22, false))), v, false, false);
                                J$.M(929553, J$.R(929529, 'v', v, false, false), 'update', false)(J$.G(929545, J$.R(929537, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                return J$.Rt(929609, J$.M(929601, J$.R(929561, 'v', v, false, false), 'verify', false)(J$.G(929585, J$.G(929577, J$.R(929569, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(929593, 'base64', 21, false)));
                            } catch (J$e) {
                                J$.Ex(930505, J$e);
                            } finally {
                                if (J$.Fr(930513))
                                    continue jalangiLabel0;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false),
                verifyHMAC: J$.T(930401, function verifyHMAC(parsedSignature, secret) {
                    jalangiLabel1:
                        while (true) {
                            try {
                                J$.Fe(930329, arguments.callee, this, arguments);
                                arguments = J$.N(930337, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(930345, 'parsedSignature', parsedSignature, true, false, false);
                                secret = J$.N(930353, 'secret', secret, true, false, false);
                                J$.N(930361, 'alg', alg, false, false, false);
                                J$.N(930369, 'hashAlg', hashAlg, false, false, false);
                                J$.N(930377, 'hmac', hmac, false, false, false);
                                J$.N(930385, 'h1', h1, false, false, false);
                                J$.N(930393, 'h2', h2, false, false, false);
                                J$.M(929697, J$.R(929673, 'assert', assert, false, true), 'object', false)(J$.R(929681, 'parsedSignature', parsedSignature, false, false), J$.T(929689, 'parsedHMAC', 21, false));
                                J$.M(929729, J$.R(929705, 'assert', assert, false, true), 'string', false)(J$.R(929713, 'secret', secret, false, false), J$.T(929721, 'secret', 21, false));
                                var alg = J$.W(929769, 'alg', J$.F(929761, J$.R(929737, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(929753, J$.R(929745, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(55792, J$.B(148218, '!==', J$.G(929793, J$.R(929777, 'alg', alg, false, false), J$.T(929785, 0, 22, false)), J$.T(929801, 'hmac', 21, false))))
                                    return J$.Rt(929817, J$.T(929809, false, 23, false));
                                var hashAlg = J$.W(929857, 'hashAlg', J$.M(929849, J$.G(929841, J$.R(929825, 'alg', alg, false, false), J$.T(929833, 1, 22, false)), 'toUpperCase', false)(), hashAlg, false, false);
                                var hmac = J$.W(929897, 'hmac', J$.M(929889, J$.R(929865, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(929873, 'hashAlg', hashAlg, false, false), J$.R(929881, 'secret', secret, false, false)), hmac, false, false);
                                J$.M(929929, J$.R(929905, 'hmac', hmac, false, false), 'update', false)(J$.G(929921, J$.R(929913, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                var h1 = J$.W(929969, 'h1', J$.M(929961, J$.R(929937, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(929945, 'hashAlg', hashAlg, false, false), J$.R(929953, 'secret', secret, false, false)), h1, false, false);
                                J$.M(930001, J$.R(929977, 'h1', h1, false, false), 'update', false)(J$.M(929993, J$.R(929985, 'hmac', hmac, false, false), 'digest', false)());
                                h1 = J$.W(930025, 'h1', J$.M(930017, J$.R(930009, 'h1', h1, false, false), 'digest', false)(), h1, false, false);
                                var h2 = J$.W(930065, 'h2', J$.M(930057, J$.R(930033, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(930041, 'hashAlg', hashAlg, false, false), J$.R(930049, 'secret', secret, false, false)), h2, false, false);
                                J$.M(930129, J$.R(930073, 'h2', h2, false, false), 'update', false)(J$.F(930121, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(930081, 'Buffer', undefined, true, true) : Buffer = J$.R(930081, 'Buffer', Buffer, true, true)), true)(J$.G(930105, J$.G(930097, J$.R(930089, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(930113, 'base64', 21, false)));
                                h2 = J$.W(930153, 'h2', J$.M(930145, J$.R(930137, 'h2', h2, false, false), 'digest', false)(), h2, false, false);
                                if (J$.C(55800, J$.B(148234, '===', J$.U(148226, 'typeof', J$.R(930161, 'h1', h1, false, false)), J$.T(930169, 'string', 21, false))))
                                    return J$.Rt(930193, J$.B(148242, '===', J$.R(930177, 'h1', h1, false, false), J$.R(930185, 'h2', h2, false, false)));
                                if (J$.C(55816, J$.C(55808, J$.M(930217, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(930201, 'Buffer', undefined, true, true) : Buffer = J$.R(930201, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(930209, 'h1', h1, false, false))) ? J$.U(148250, '!', J$.G(930233, J$.R(930225, 'h1', h1, false, false), 'equals')) : J$._()))
                                    return J$.Rt(930289, J$.B(148258, '===', J$.M(930257, J$.R(930241, 'h1', h1, false, false), 'toString', false)(J$.T(930249, 'binary', 21, false)), J$.M(930281, J$.R(930265, 'h2', h2, false, false), 'toString', false)(J$.T(930273, 'binary', 21, false))));
                                return J$.Rt(930321, J$.M(930313, J$.R(930297, 'h1', h1, false, false), 'equals', false)(J$.R(930305, 'h2', h2, false, false)));
                            } catch (J$e) {
                                J$.Ex(930521, J$e);
                            } finally {
                                if (J$.Fr(930529))
                                    continue jalangiLabel1;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(930537, J$e);
        } finally {
            if (J$.Sr(930545))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

