J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(373801, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/ajv/lib/compile/error_classes.js');
            function ValidationError(errors) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(373353, arguments.callee, this, arguments);
                            arguments = J$.N(373361, 'arguments', arguments, true, false, false);
                            errors = J$.N(373369, 'errors', errors, true, false, false);
                            J$.P(373281, J$.R(373265, 'this', this, false, false), 'message', J$.T(373273, 'validation failed', 21, false));
                            J$.P(373305, J$.R(373289, 'this', this, false, false), 'errors', J$.R(373297, 'errors', errors, false, false));
                            J$.P(373345, J$.R(373313, 'this', this, false, false), 'ajv', J$.P(373337, J$.R(373321, 'this', this, false, false), 'validation', J$.T(373329, true, 23, false)));
                        } catch (J$e) {
                            J$.Ex(373865, J$e);
                        } finally {
                            if (J$.Fr(373873))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function MissingRefError(baseId, ref, message) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(373641, arguments.callee, this, arguments);
                            arguments = J$.N(373649, 'arguments', arguments, true, false, false);
                            baseId = J$.N(373657, 'baseId', baseId, true, false, false);
                            ref = J$.N(373665, 'ref', ref, true, false, false);
                            message = J$.N(373673, 'message', message, true, false, false);
                            J$.P(373521, J$.R(373473, 'this', this, false, false), 'message', J$.C(25104, J$.R(373481, 'message', message, false, false)) ? J$._() : J$.M(373513, J$.R(373489, 'MissingRefError', MissingRefError, false, true), 'message', false)(J$.R(373497, 'baseId', baseId, false, false), J$.R(373505, 'ref', ref, false, false)));
                            J$.P(373569, J$.R(373529, 'this', this, false, false), 'missingRef', J$.M(373561, J$.R(373537, 'resolve', resolve, false, true), 'url', false)(J$.R(373545, 'baseId', baseId, false, false), J$.R(373553, 'ref', ref, false, false)));
                            J$.P(373633, J$.R(373577, 'this', this, false, false), 'missingSchema', J$.M(373625, J$.R(373585, 'resolve', resolve, false, true), 'normalizeId', false)(J$.M(373617, J$.R(373593, 'resolve', resolve, false, true), 'fullPath', false)(J$.G(373609, J$.R(373601, 'this', this, false, false), 'missingRef'))));
                        } catch (J$e) {
                            J$.Ex(373897, J$e);
                        } finally {
                            if (J$.Fr(373905))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function errorSubclass(Subclass) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(373777, arguments.callee, this, arguments);
                            arguments = J$.N(373785, 'arguments', arguments, true, false, false);
                            Subclass = J$.N(373793, 'Subclass', Subclass, true, false, false);
                            J$.P(373721, J$.R(373681, 'Subclass', Subclass, false, false), 'prototype', J$.M(373713, J$.I(typeof Object === 'undefined' ? Object = J$.R(373689, 'Object', undefined, true, true) : Object = J$.R(373689, 'Object', Object, true, true)), 'create', false)(J$.G(373705, J$.I(typeof Error === 'undefined' ? Error = J$.R(373697, 'Error', undefined, true, true) : Error = J$.R(373697, 'Error', Error, true, true)), 'prototype')));
                            J$.P(373753, J$.G(373737, J$.R(373729, 'Subclass', Subclass, false, false), 'prototype'), 'constructor', J$.R(373745, 'Subclass', Subclass, false, false));
                            return J$.Rt(373769, J$.R(373761, 'Subclass', Subclass, false, false));
                        } catch (J$e) {
                            J$.Ex(373913, J$e);
                        } finally {
                            if (J$.Fr(373921))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(373809, 'resolve', resolve, false, false, false);
            ValidationError = J$.N(373825, 'ValidationError', J$.T(373817, ValidationError, 12, false), true, false, false);
            MissingRefError = J$.N(373841, 'MissingRefError', J$.T(373833, MissingRefError, 12, false), true, false, false);
            errorSubclass = J$.N(373857, 'errorSubclass', J$.T(373849, errorSubclass, 12, false), true, false, false);
            J$.T(373129, 'use strict', 21, false);
            J$.F(373153, J$.I(typeof require === 'undefined' ? require = J$.R(373137, 'require', undefined, true, true) : require = J$.R(373137, 'require', require, true, true)), false)(J$.T(373145, 'core-js/modules/es.object.create', 21, false));
            var resolve = J$.W(373185, 'resolve', J$.F(373177, J$.I(typeof require === 'undefined' ? require = J$.R(373161, 'require', undefined, true, true) : require = J$.R(373161, 'require', require, true, true)), false)(J$.T(373169, './resolve', 21, false)), resolve, false, true);
            J$.P(373257, J$.I(typeof module === 'undefined' ? module = J$.R(373193, 'module', undefined, true, true) : module = J$.R(373193, 'module', module, true, true)), 'exports', J$.T(373249, {
                Validation: J$.F(373217, J$.R(373201, 'errorSubclass', errorSubclass, false, true), false)(J$.R(373209, 'ValidationError', ValidationError, false, true)),
                MissingRef: J$.F(373241, J$.R(373225, 'errorSubclass', errorSubclass, false, true), false)(J$.R(373233, 'MissingRefError', MissingRefError, false, true))
            }, 11, false));
            J$.P(373465, J$.R(373377, 'MissingRefError', MissingRefError, false, true), 'message', J$.T(373457, function (baseId, ref) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(373425, arguments.callee, this, arguments);
                            arguments = J$.N(373433, 'arguments', arguments, true, false, false);
                            baseId = J$.N(373441, 'baseId', baseId, true, false, false);
                            ref = J$.N(373449, 'ref', ref, true, false, false);
                            return J$.Rt(373417, J$.B(79018, '+', J$.B(79010, '+', J$.B(79002, '+', J$.T(373385, 'can\'t resolve reference ', 21, false), J$.R(373393, 'ref', ref, false, false)), J$.T(373401, ' from id ', 21, false)), J$.R(373409, 'baseId', baseId, false, false)));
                        } catch (J$e) {
                            J$.Ex(373881, J$e);
                        } finally {
                            if (J$.Fr(373889))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(373929, J$e);
        } finally {
            if (J$.Sr(373937))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

