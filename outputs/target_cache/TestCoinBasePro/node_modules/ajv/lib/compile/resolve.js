J$.noInstrEval = false;
jalangiLabel16:
    while (true) {
        try {
            J$.Se(391545, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/ajv/lib/compile/resolve.js');
            function _typeof(obj) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(385401, arguments.callee, this, arguments);
                            arguments = J$.N(385409, 'arguments', arguments, true, false, false);
                            obj = J$.N(385417, 'obj', obj, true, false, false);
                            if (J$.C(25792, J$.C(25752, J$.B(79914, '===', J$.U(79906, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(385137, 'Symbol', undefined, true, true) : Symbol = J$.R(385137, 'Symbol', Symbol, true, true))), J$.T(385145, 'function', 21, false))) ? J$.B(79930, '===', J$.U(79922, 'typeof', J$.G(385161, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(385153, 'Symbol', undefined, true, true) : Symbol = J$.R(385153, 'Symbol', Symbol, true, true)), 'iterator')), J$.T(385169, 'symbol', 21, false)) : J$._())) {
                                _typeof = J$.W(385225, '_typeof', J$.T(385217, function _typeof(obj) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(385193, arguments.callee, this, arguments);
                                                arguments = J$.N(385201, 'arguments', arguments, true, false, false);
                                                obj = J$.N(385209, 'obj', obj, true, false, false);
                                                return J$.Rt(385185, J$.U(79938, 'typeof', J$.R(385177, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(391825, J$e);
                                            } finally {
                                                if (J$.Fr(391833))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            } else {
                                _typeof = J$.W(385361, '_typeof', J$.T(385353, function _typeof(obj) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(385329, arguments.callee, this, arguments);
                                                arguments = J$.N(385337, 'arguments', arguments, true, false, false);
                                                obj = J$.N(385345, 'obj', obj, true, false, false);
                                                return J$.Rt(385321, J$.C(25784, J$.C(25776, J$.C(25768, J$.C(25760, J$.R(385233, 'obj', obj, false, false)) ? J$.B(79954, '===', J$.U(79946, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(385241, 'Symbol', undefined, true, true) : Symbol = J$.R(385241, 'Symbol', Symbol, true, true))), J$.T(385249, 'function', 21, false)) : J$._()) ? J$.B(79962, '===', J$.G(385265, J$.R(385257, 'obj', obj, false, false), 'constructor'), J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(385273, 'Symbol', undefined, true, true) : Symbol = J$.R(385273, 'Symbol', Symbol, true, true))) : J$._()) ? J$.B(79970, '!==', J$.R(385281, 'obj', obj, false, false), J$.G(385297, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(385289, 'Symbol', undefined, true, true) : Symbol = J$.R(385289, 'Symbol', Symbol, true, true)), 'prototype')) : J$._()) ? J$.T(385305, 'symbol', 21, false) : J$.U(79978, 'typeof', J$.R(385313, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(391841, J$e);
                                            } finally {
                                                if (J$.Fr(391849))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            }
                            return J$.Rt(385393, J$.F(385385, J$.R(385369, '_typeof', _typeof, false, true), false)(J$.R(385377, 'obj', obj, false, false)));
                        } catch (J$e) {
                            J$.Ex(391857, J$e);
                        } finally {
                            if (J$.Fr(391865))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolve(compile, root, ref) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(386505, arguments.callee, this, arguments);
                            arguments = J$.N(386513, 'arguments', arguments, true, false, false);
                            compile = J$.N(386521, 'compile', compile, true, false, false);
                            root = J$.N(386529, 'root', root, true, false, false);
                            ref = J$.N(386537, 'ref', ref, true, false, false);
                            J$.N(386545, 'refVal', refVal, false, false, false);
                            J$.N(386553, 'res', res, false, false, false);
                            J$.N(386561, 'schema', schema, false, false, false);
                            J$.N(386569, 'v', v, false, false, false);
                            J$.N(386577, 'baseId', baseId, false, false, false);
                            var refVal = J$.W(385785, 'refVal', J$.G(385777, J$.G(385761, J$.R(385753, 'this', this, false, false), '_refs'), J$.R(385769, 'ref', ref, false, false)), refVal, false, false);
                            if (J$.C(25808, J$.B(79994, '==', J$.U(79986, 'typeof', J$.R(385793, 'refVal', refVal, false, false)), J$.T(385801, 'string', 21, false)))) {
                                if (J$.C(25800, J$.G(385833, J$.G(385817, J$.R(385809, 'this', this, false, false), '_refs'), J$.R(385825, 'refVal', refVal, false, false))))
                                    refVal = J$.W(385873, 'refVal', J$.G(385865, J$.G(385849, J$.R(385841, 'this', this, false, false), '_refs'), J$.R(385857, 'refVal', refVal, false, false)), refVal, false, false);
                                else
                                    return J$.Rt(385929, J$.M(385921, J$.R(385881, 'resolve', resolve, false, true), 'call', false)(J$.R(385889, 'this', this, false, false), J$.R(385897, 'compile', compile, false, false), J$.R(385905, 'root', root, false, false), J$.R(385913, 'refVal', refVal, false, false)));
                            }
                            refVal = J$.W(385977, 'refVal', J$.C(25816, J$.R(385937, 'refVal', refVal, false, false)) ? J$._() : J$.G(385969, J$.G(385953, J$.R(385945, 'this', this, false, false), '_schemas'), J$.R(385961, 'ref', ref, false, false)), refVal, false, false);
                            if (J$.C(25840, J$.B(80002, 'instanceof', J$.R(385985, 'refVal', refVal, false, false), J$.R(385993, 'SchemaObject', SchemaObject, false, true)))) {
                                return J$.Rt(386113, J$.C(25832, J$.F(386049, J$.R(386001, 'inlineRef', inlineRef, false, true), false)(J$.G(386017, J$.R(386009, 'refVal', refVal, false, false), 'schema'), J$.G(386041, J$.G(386033, J$.R(386025, 'this', this, false, false), '_opts'), 'inlineRefs'))) ? J$.G(386065, J$.R(386057, 'refVal', refVal, false, false), 'schema') : J$.C(25824, J$.G(386081, J$.R(386073, 'refVal', refVal, false, false), 'validate')) ? J$._() : J$.M(386105, J$.R(386089, 'this', this, false, false), '_compile', false)(J$.R(386097, 'refVal', refVal, false, false)));
                            }
                            var res = J$.W(386161, 'res', J$.M(386153, J$.R(386121, 'resolveSchema', resolveSchema, false, true), 'call', false)(J$.R(386129, 'this', this, false, false), J$.R(386137, 'root', root, false, false), J$.R(386145, 'ref', ref, false, false)), res, false, false);
                            var schema, v, baseId;
                            if (J$.C(25848, J$.R(386169, 'res', res, false, false))) {
                                schema = J$.W(386193, 'schema', J$.G(386185, J$.R(386177, 'res', res, false, false), 'schema'), schema, false, false);
                                root = J$.W(386217, 'root', J$.G(386209, J$.R(386201, 'res', res, false, false), 'root'), root, false, false);
                                baseId = J$.W(386241, 'baseId', J$.G(386233, J$.R(386225, 'res', res, false, false), 'baseId'), baseId, false, false);
                            }
                            if (J$.C(25880, J$.B(80010, 'instanceof', J$.R(386249, 'schema', schema, false, false), J$.R(386257, 'SchemaObject', SchemaObject, false, true)))) {
                                v = J$.W(386345, 'v', J$.C(25856, J$.G(386273, J$.R(386265, 'schema', schema, false, false), 'validate')) ? J$._() : J$.M(386337, J$.R(386281, 'compile', compile, false, false), 'call', false)(J$.R(386289, 'this', this, false, false), J$.G(386305, J$.R(386297, 'schema', schema, false, false), 'schema'), J$.R(386313, 'root', root, false, false), J$.T(386321, undefined, 24, false), J$.R(386329, 'baseId', baseId, false, false)), v, false, false);
                            } else if (J$.C(25872, J$.B(80018, '!==', J$.R(386353, 'schema', schema, false, false), J$.T(386361, undefined, 24, false)))) {
                                v = J$.W(386481, 'v', J$.C(25864, J$.F(386409, J$.R(386369, 'inlineRef', inlineRef, false, true), false)(J$.R(386377, 'schema', schema, false, false), J$.G(386401, J$.G(386393, J$.R(386385, 'this', this, false, false), '_opts'), 'inlineRefs'))) ? J$.R(386417, 'schema', schema, false, false) : J$.M(386473, J$.R(386425, 'compile', compile, false, false), 'call', false)(J$.R(386433, 'this', this, false, false), J$.R(386441, 'schema', schema, false, false), J$.R(386449, 'root', root, false, false), J$.T(386457, undefined, 24, false), J$.R(386465, 'baseId', baseId, false, false)), v, false, false);
                            }
                            return J$.Rt(386497, J$.R(386489, 'v', v, false, false));
                        } catch (J$e) {
                            J$.Ex(391873, J$e);
                        } finally {
                            if (J$.Fr(391881))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolveSchema(root, ref) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(387329, arguments.callee, this, arguments);
                            arguments = J$.N(387337, 'arguments', arguments, true, false, false);
                            root = J$.N(387345, 'root', root, true, false, false);
                            ref = J$.N(387353, 'ref', ref, true, false, false);
                            J$.N(387361, 'p', p, false, false, false);
                            J$.N(387369, 'refPath', refPath, false, false, false);
                            J$.N(387377, 'baseId', baseId, false, false, false);
                            J$.N(387385, 'id', id, false, false, false);
                            J$.N(387393, 'refVal', refVal, false, false, false);
                            var p = J$.W(386681, 'p', J$.M(386601, J$.R(386585, 'URI', URI, false, true), 'parse', false)(J$.R(386593, 'ref', ref, false, false)), p, false, false), refPath = J$.W(386689, 'refPath', J$.F(386625, J$.R(386609, '_getFullPath', _getFullPath, false, true), false)(J$.R(386617, 'p', p, false, false)), refPath, false, false), baseId = J$.W(386697, 'baseId', J$.F(386673, J$.R(386633, 'getFullPath', getFullPath, false, true), false)(J$.M(386665, J$.R(386641, 'this', this, false, false), '_getId', false)(J$.G(386657, J$.R(386649, 'root', root, false, false), 'schema'))), baseId, false, false);
                            if (J$.C(25952, J$.C(25888, J$.B(80026, '===', J$.G(386737, J$.M(386729, J$.I(typeof Object === 'undefined' ? Object = J$.R(386705, 'Object', undefined, true, true) : Object = J$.R(386705, 'Object', Object, true, true)), 'keys', false)(J$.G(386721, J$.R(386713, 'root', root, false, false), 'schema')), 'length'), J$.T(386745, 0, 22, false))) ? J$._() : J$.B(80034, '!==', J$.R(386753, 'refPath', refPath, false, false), J$.R(386761, 'baseId', baseId, false, false)))) {
                                var id = J$.W(386793, 'id', J$.F(386785, J$.R(386769, 'normalizeId', normalizeId, false, true), false)(J$.R(386777, 'refPath', refPath, false, false)), id, false, false);
                                var refVal = J$.W(386833, 'refVal', J$.G(386825, J$.G(386809, J$.R(386801, 'this', this, false, false), '_refs'), J$.R(386817, 'id', id, false, false)), refVal, false, false);
                                if (J$.C(25936, J$.B(80050, '==', J$.U(80042, 'typeof', J$.R(386841, 'refVal', refVal, false, false)), J$.T(386849, 'string', 21, false)))) {
                                    return J$.Rt(386905, J$.M(386897, J$.R(386857, 'resolveRecursive', resolveRecursive, false, true), 'call', false)(J$.R(386865, 'this', this, false, false), J$.R(386873, 'root', root, false, false), J$.R(386881, 'refVal', refVal, false, false), J$.R(386889, 'p', p, false, false)));
                                } else if (J$.C(25928, J$.B(80058, 'instanceof', J$.R(386913, 'refVal', refVal, false, false), J$.R(386921, 'SchemaObject', SchemaObject, false, true)))) {
                                    if (J$.C(25896, J$.U(80066, '!', J$.G(386937, J$.R(386929, 'refVal', refVal, false, false), 'validate'))))
                                        J$.M(386961, J$.R(386945, 'this', this, false, false), '_compile', false)(J$.R(386953, 'refVal', refVal, false, false));
                                    root = J$.W(386977, 'root', J$.R(386969, 'refVal', refVal, false, false), root, false, false);
                                } else {
                                    refVal = J$.W(387017, 'refVal', J$.G(387009, J$.G(386993, J$.R(386985, 'this', this, false, false), '_schemas'), J$.R(387001, 'id', id, false, false)), refVal, false, false);
                                    if (J$.C(25920, J$.B(80074, 'instanceof', J$.R(387025, 'refVal', refVal, false, false), J$.R(387033, 'SchemaObject', SchemaObject, false, true)))) {
                                        if (J$.C(25904, J$.U(80082, '!', J$.G(387049, J$.R(387041, 'refVal', refVal, false, false), 'validate'))))
                                            J$.M(387073, J$.R(387057, 'this', this, false, false), '_compile', false)(J$.R(387065, 'refVal', refVal, false, false));
                                        if (J$.C(25912, J$.B(80090, '==', J$.R(387081, 'id', id, false, false), J$.F(387105, J$.R(387089, 'normalizeId', normalizeId, false, true), false)(J$.R(387097, 'ref', ref, false, false)))))
                                            return J$.Rt(387145, J$.T(387137, {
                                                schema: J$.R(387113, 'refVal', refVal, false, false),
                                                root: J$.R(387121, 'root', root, false, false),
                                                baseId: J$.R(387129, 'baseId', baseId, false, false)
                                            }, 11, false));
                                        root = J$.W(387161, 'root', J$.R(387153, 'refVal', refVal, false, false), root, false, false);
                                    } else {
                                        return J$.Rt(387169, undefined);
                                    }
                                }
                                if (J$.C(25944, J$.U(80098, '!', J$.G(387185, J$.R(387177, 'root', root, false, false), 'schema'))))
                                    return J$.Rt(387193, undefined);
                                baseId = J$.W(387249, 'baseId', J$.F(387241, J$.R(387201, 'getFullPath', getFullPath, false, true), false)(J$.M(387233, J$.R(387209, 'this', this, false, false), '_getId', false)(J$.G(387225, J$.R(387217, 'root', root, false, false), 'schema'))), baseId, false, false);
                            }
                            return J$.Rt(387321, J$.M(387313, J$.R(387257, 'getJsonPointer', getJsonPointer, false, true), 'call', false)(J$.R(387265, 'this', this, false, false), J$.R(387273, 'p', p, false, false), J$.R(387281, 'baseId', baseId, false, false), J$.G(387297, J$.R(387289, 'root', root, false, false), 'schema'), J$.R(387305, 'root', root, false, false)));
                        } catch (J$e) {
                            J$.Ex(391889, J$e);
                        } finally {
                            if (J$.Fr(391897))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolveRecursive(root, ref, parsedRef) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(387673, arguments.callee, this, arguments);
                            arguments = J$.N(387681, 'arguments', arguments, true, false, false);
                            root = J$.N(387689, 'root', root, true, false, false);
                            ref = J$.N(387697, 'ref', ref, true, false, false);
                            parsedRef = J$.N(387705, 'parsedRef', parsedRef, true, false, false);
                            J$.N(387713, 'res', res, false, false, false);
                            J$.N(387721, 'schema', schema, false, false, false);
                            J$.N(387729, 'baseId', baseId, false, false, false);
                            J$.N(387737, 'id', id, false, false, false);
                            var res = J$.W(387441, 'res', J$.M(387433, J$.R(387401, 'resolveSchema', resolveSchema, false, true), 'call', false)(J$.R(387409, 'this', this, false, false), J$.R(387417, 'root', root, false, false), J$.R(387425, 'ref', ref, false, false)), res, false, false);
                            if (J$.C(25968, J$.R(387449, 'res', res, false, false))) {
                                var schema = J$.W(387473, 'schema', J$.G(387465, J$.R(387457, 'res', res, false, false), 'schema'), schema, false, false);
                                var baseId = J$.W(387497, 'baseId', J$.G(387489, J$.R(387481, 'res', res, false, false), 'baseId'), baseId, false, false);
                                root = J$.W(387521, 'root', J$.G(387513, J$.R(387505, 'res', res, false, false), 'root'), root, false, false);
                                var id = J$.W(387553, 'id', J$.M(387545, J$.R(387529, 'this', this, false, false), '_getId', false)(J$.R(387537, 'schema', schema, false, false)), id, false, false);
                                if (J$.C(25960, J$.R(387561, 'id', id, false, false)))
                                    baseId = J$.W(387601, 'baseId', J$.F(387593, J$.R(387569, 'resolveUrl', resolveUrl, false, true), false)(J$.R(387577, 'baseId', baseId, false, false), J$.R(387585, 'id', id, false, false)), baseId, false, false);
                                return J$.Rt(387665, J$.M(387657, J$.R(387609, 'getJsonPointer', getJsonPointer, false, true), 'call', false)(J$.R(387617, 'this', this, false, false), J$.R(387625, 'parsedRef', parsedRef, false, false), J$.R(387633, 'baseId', baseId, false, false), J$.R(387641, 'schema', schema, false, false), J$.R(387649, 'root', root, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(391905, J$e);
                        } finally {
                            if (J$.Fr(391913))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getJsonPointer(parsedRef, baseId, schema, root) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(388505, arguments.callee, this, arguments);
                            arguments = J$.N(388513, 'arguments', arguments, true, false, false);
                            parsedRef = J$.N(388521, 'parsedRef', parsedRef, true, false, false);
                            baseId = J$.N(388529, 'baseId', baseId, true, false, false);
                            schema = J$.N(388537, 'schema', schema, true, false, false);
                            root = J$.N(388545, 'root', root, true, false, false);
                            J$.N(388553, 'parts', parts, false, false, false);
                            J$.N(388561, 'i', i, false, false, false);
                            J$.N(388569, 'part', part, false, false, false);
                            J$.N(388577, 'id', id, false, false, false);
                            J$.N(388585, '$ref', $ref, false, false, false);
                            J$.N(388593, 'res', res, false, false, false);
                            J$.P(387849, J$.R(387817, 'parsedRef', parsedRef, false, false), 'fragment', J$.C(25976, J$.G(387833, J$.R(387825, 'parsedRef', parsedRef, false, false), 'fragment')) ? J$._() : J$.T(387841, '', 21, false));
                            if (J$.C(25984, J$.B(80106, '!=', J$.M(387889, J$.G(387865, J$.R(387857, 'parsedRef', parsedRef, false, false), 'fragment'), 'slice', false)(J$.T(387873, 0, 22, false), J$.T(387881, 1, 22, false)), J$.T(387897, '/', 21, false))))
                                return J$.Rt(387905, undefined);
                            var parts = J$.W(387945, 'parts', J$.M(387937, J$.G(387921, J$.R(387913, 'parsedRef', parsedRef, false, false), 'fragment'), 'split', false)(J$.T(387929, '/', 21, false)), parts, false, false);
                            for (var i = J$.W(387961, 'i', J$.T(387953, 1, 22, false), i, false, false); J$.C(26040, J$.B(80114, '<', J$.R(387969, 'i', i, false, false), J$.G(387985, J$.R(387977, 'parts', parts, false, false), 'length'))); J$.B(80138, '-', i = J$.W(388001, 'i', J$.B(80130, '+', J$.U(80122, '+', J$.R(387993, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var part = J$.W(388033, 'part', J$.G(388025, J$.R(388009, 'parts', parts, false, false), J$.R(388017, 'i', i, false, false)), part, false, false);
                                if (J$.C(26032, J$.R(388041, 'part', part, false, false))) {
                                    part = J$.W(388073, 'part', J$.M(388065, J$.R(388049, 'util', util, false, true), 'unescapeFragment', false)(J$.R(388057, 'part', part, false, false)), part, false, false);
                                    schema = J$.W(388105, 'schema', J$.G(388097, J$.R(388081, 'schema', schema, false, false), J$.R(388089, 'part', part, false, false)), schema, false, false);
                                    if (J$.C(25992, J$.B(80146, '===', J$.R(388113, 'schema', schema, false, false), J$.T(388121, undefined, 24, false))))
                                        break;
                                    var id;
                                    if (J$.C(26024, J$.U(80154, '!', J$.G(388145, J$.R(388129, 'PREVENT_SCOPE_CHANGE', PREVENT_SCOPE_CHANGE, false, true), J$.R(388137, 'part', part, false, false))))) {
                                        id = J$.W(388177, 'id', J$.M(388169, J$.R(388153, 'this', this, false, false), '_getId', false)(J$.R(388161, 'schema', schema, false, false)), id, false, false);
                                        if (J$.C(26000, J$.R(388185, 'id', id, false, false)))
                                            baseId = J$.W(388225, 'baseId', J$.F(388217, J$.R(388193, 'resolveUrl', resolveUrl, false, true), false)(J$.R(388201, 'baseId', baseId, false, false), J$.R(388209, 'id', id, false, false)), baseId, false, false);
                                        if (J$.C(26016, J$.G(388241, J$.R(388233, 'schema', schema, false, false), '$ref'))) {
                                            var $ref = J$.W(388289, '$ref', J$.F(388281, J$.R(388249, 'resolveUrl', resolveUrl, false, true), false)(J$.R(388257, 'baseId', baseId, false, false), J$.G(388273, J$.R(388265, 'schema', schema, false, false), '$ref')), $ref, false, false);
                                            var res = J$.W(388337, 'res', J$.M(388329, J$.R(388297, 'resolveSchema', resolveSchema, false, true), 'call', false)(J$.R(388305, 'this', this, false, false), J$.R(388313, 'root', root, false, false), J$.R(388321, '$ref', $ref, false, false)), res, false, false);
                                            if (J$.C(26008, J$.R(388345, 'res', res, false, false))) {
                                                schema = J$.W(388369, 'schema', J$.G(388361, J$.R(388353, 'res', res, false, false), 'schema'), schema, false, false);
                                                root = J$.W(388393, 'root', J$.G(388385, J$.R(388377, 'res', res, false, false), 'root'), root, false, false);
                                                baseId = J$.W(388417, 'baseId', J$.G(388409, J$.R(388401, 'res', res, false, false), 'baseId'), baseId, false, false);
                                            }
                                        }
                                    }
                                }
                            }
                            if (J$.C(26056, J$.C(26048, J$.B(80162, '!==', J$.R(388425, 'schema', schema, false, false), J$.T(388433, undefined, 24, false))) ? J$.B(80170, '!==', J$.R(388441, 'schema', schema, false, false), J$.G(388457, J$.R(388449, 'root', root, false, false), 'schema')) : J$._()))
                                return J$.Rt(388497, J$.T(388489, {
                                    schema: J$.R(388465, 'schema', schema, false, false),
                                    root: J$.R(388473, 'root', root, false, false),
                                    baseId: J$.R(388481, 'baseId', baseId, false, false)
                                }, 11, false));
                        } catch (J$e) {
                            J$.Ex(391921, J$e);
                        } finally {
                            if (J$.Fr(391929))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function inlineRef(schema, limit) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(388897, arguments.callee, this, arguments);
                            arguments = J$.N(388905, 'arguments', arguments, true, false, false);
                            schema = J$.N(388913, 'schema', schema, true, false, false);
                            limit = J$.N(388921, 'limit', limit, true, false, false);
                            if (J$.C(26064, J$.B(80178, '===', J$.R(388753, 'limit', limit, false, false), J$.T(388761, false, 23, false))))
                                return J$.Rt(388777, J$.T(388769, false, 23, false));
                            if (J$.C(26088, J$.C(26072, J$.B(80186, '===', J$.R(388785, 'limit', limit, false, false), J$.T(388793, undefined, 24, false))) ? J$._() : J$.B(80194, '===', J$.R(388801, 'limit', limit, false, false), J$.T(388809, true, 23, false))))
                                return J$.Rt(388841, J$.F(388833, J$.R(388817, 'checkNoRef', checkNoRef, false, true), false)(J$.R(388825, 'schema', schema, false, false)));
                            else if (J$.C(26080, J$.R(388849, 'limit', limit, false, false)))
                                return J$.Rt(388889, J$.B(80202, '<=', J$.F(388873, J$.R(388857, 'countKeys', countKeys, false, true), false)(J$.R(388865, 'schema', schema, false, false)), J$.R(388881, 'limit', limit, false, false)));
                        } catch (J$e) {
                            J$.Ex(391937, J$e);
                        } finally {
                            if (J$.Fr(391945))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function checkNoRef(schema) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(389289, arguments.callee, this, arguments);
                            arguments = J$.N(389297, 'arguments', arguments, true, false, false);
                            schema = J$.N(389305, 'schema', schema, true, false, false);
                            J$.N(389313, 'item', item, false, false, false);
                            J$.N(389321, 'i', i, false, false, false);
                            J$.N(389329, 'key', key, false, false, false);
                            var item;
                            if (J$.C(26144, J$.M(388945, J$.I(typeof Array === 'undefined' ? Array = J$.R(388929, 'Array', undefined, true, true) : Array = J$.R(388929, 'Array', Array, true, true)), 'isArray', false)(J$.R(388937, 'schema', schema, false, false)))) {
                                for (var i = J$.W(388961, 'i', J$.T(388953, 0, 22, false), i, false, false); J$.C(26112, J$.B(80210, '<', J$.R(388969, 'i', i, false, false), J$.G(388985, J$.R(388977, 'schema', schema, false, false), 'length'))); J$.B(80234, '-', i = J$.W(389001, 'i', J$.B(80226, '+', J$.U(80218, '+', J$.R(388993, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    item = J$.W(389033, 'item', J$.G(389025, J$.R(389009, 'schema', schema, false, false), J$.R(389017, 'i', i, false, false)), item, false, false);
                                    if (J$.C(26104, J$.C(26096, J$.B(80242, '==', J$.F(389057, J$.R(389041, '_typeof', _typeof, false, true), false)(J$.R(389049, 'item', item, false, false)), J$.T(389065, 'object', 21, false))) ? J$.U(80250, '!', J$.F(389089, J$.R(389073, 'checkNoRef', checkNoRef, false, true), false)(J$.R(389081, 'item', item, false, false))) : J$._()))
                                        return J$.Rt(389105, J$.T(389097, false, 23, false));
                                }
                            } else {
                                for (var key in J$.H(389257, J$.R(389113, 'schema', schema, false, false))) {
                                    J$.N(389265, 'key', key, false, true, false);
                                    {
                                        {
                                            if (J$.C(26120, J$.B(80258, '==', J$.R(389121, 'key', key, false, false), J$.T(389129, '$ref', 21, false))))
                                                return J$.Rt(389145, J$.T(389137, false, 23, false));
                                            item = J$.W(389177, 'item', J$.G(389169, J$.R(389153, 'schema', schema, false, false), J$.R(389161, 'key', key, false, false)), item, false, false);
                                            if (J$.C(26136, J$.C(26128, J$.B(80266, '==', J$.F(389201, J$.R(389185, '_typeof', _typeof, false, true), false)(J$.R(389193, 'item', item, false, false)), J$.T(389209, 'object', 21, false))) ? J$.U(80274, '!', J$.F(389233, J$.R(389217, 'checkNoRef', checkNoRef, false, true), false)(J$.R(389225, 'item', item, false, false))) : J$._()))
                                                return J$.Rt(389249, J$.T(389241, false, 23, false));
                                        }
                                    }
                                }
                            }
                            return J$.Rt(389281, J$.T(389273, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(391953, J$e);
                        } finally {
                            if (J$.Fr(391961))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function countKeys(schema) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(389825, arguments.callee, this, arguments);
                            arguments = J$.N(389833, 'arguments', arguments, true, false, false);
                            schema = J$.N(389841, 'schema', schema, true, false, false);
                            J$.N(389849, 'count', count, false, false, false);
                            J$.N(389857, 'item', item, false, false, false);
                            J$.N(389865, 'i', i, false, false, false);
                            J$.N(389873, 'key', key, false, false, false);
                            var count = J$.W(389345, 'count', J$.T(389337, 0, 22, false), count, false, false), item;
                            if (J$.C(26208, J$.M(389369, J$.I(typeof Array === 'undefined' ? Array = J$.R(389353, 'Array', undefined, true, true) : Array = J$.R(389353, 'Array', Array, true, true)), 'isArray', false)(J$.R(389361, 'schema', schema, false, false)))) {
                                for (var i = J$.W(389385, 'i', J$.T(389377, 0, 22, false), i, false, false); J$.C(26168, J$.B(80282, '<', J$.R(389393, 'i', i, false, false), J$.G(389409, J$.R(389401, 'schema', schema, false, false), 'length'))); J$.B(80306, '-', i = J$.W(389425, 'i', J$.B(80298, '+', J$.U(80290, '+', J$.R(389417, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    item = J$.W(389457, 'item', J$.G(389449, J$.R(389433, 'schema', schema, false, false), J$.R(389441, 'i', i, false, false)), item, false, false);
                                    if (J$.C(26152, J$.B(80314, '==', J$.F(389481, J$.R(389465, '_typeof', _typeof, false, true), false)(J$.R(389473, 'item', item, false, false)), J$.T(389489, 'object', 21, false))))
                                        count = J$.W(389529, 'count', J$.B(80322, '+', J$.R(389521, 'count', count, false, false), J$.F(389513, J$.R(389497, 'countKeys', countKeys, false, true), false)(J$.R(389505, 'item', item, false, false))), count, false, false);
                                    if (J$.C(26160, J$.B(80330, '==', J$.R(389537, 'count', count, false, false), J$.T(389545, Infinity, 22, false))))
                                        return J$.Rt(389561, J$.T(389553, Infinity, 22, false));
                                }
                            } else {
                                for (var key in J$.H(389793, J$.R(389569, 'schema', schema, false, false))) {
                                    J$.N(389801, 'key', key, false, true, false);
                                    {
                                        {
                                            if (J$.C(26176, J$.B(80338, '==', J$.R(389577, 'key', key, false, false), J$.T(389585, '$ref', 21, false))))
                                                return J$.Rt(389601, J$.T(389593, Infinity, 22, false));
                                            if (J$.C(26200, J$.G(389625, J$.R(389609, 'SIMPLE_INLINED', SIMPLE_INLINED, false, true), J$.R(389617, 'key', key, false, false)))) {
                                                J$.B(80362, '-', count = J$.W(389641, 'count', J$.B(80354, '+', J$.U(80346, '+', J$.R(389633, 'count', count, false, false)), 1), count, false, false), 1);
                                            } else {
                                                item = J$.W(389673, 'item', J$.G(389665, J$.R(389649, 'schema', schema, false, false), J$.R(389657, 'key', key, false, false)), item, false, false);
                                                if (J$.C(26184, J$.B(80370, '==', J$.F(389697, J$.R(389681, '_typeof', _typeof, false, true), false)(J$.R(389689, 'item', item, false, false)), J$.T(389705, 'object', 21, false))))
                                                    count = J$.W(389753, 'count', J$.B(80386, '+', J$.R(389745, 'count', count, false, false), J$.B(80378, '+', J$.F(389729, J$.R(389713, 'countKeys', countKeys, false, true), false)(J$.R(389721, 'item', item, false, false)), J$.T(389737, 1, 22, false))), count, false, false);
                                                if (J$.C(26192, J$.B(80394, '==', J$.R(389761, 'count', count, false, false), J$.T(389769, Infinity, 22, false))))
                                                    return J$.Rt(389785, J$.T(389777, Infinity, 22, false));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(389817, J$.R(389809, 'count', count, false, false));
                        } catch (J$e) {
                            J$.Ex(391969, J$e);
                        } finally {
                            if (J$.Fr(391977))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getFullPath(id, normalize) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(389993, arguments.callee, this, arguments);
                            arguments = J$.N(390001, 'arguments', arguments, true, false, false);
                            id = J$.N(390009, 'id', id, true, false, false);
                            normalize = J$.N(390017, 'normalize', normalize, true, false, false);
                            J$.N(390025, 'p', p, false, false, false);
                            if (J$.C(26216, J$.B(80402, '!==', J$.R(389881, 'normalize', normalize, false, false), J$.T(389889, false, 23, false))))
                                id = J$.W(389921, 'id', J$.F(389913, J$.R(389897, 'normalizeId', normalizeId, false, true), false)(J$.R(389905, 'id', id, false, false)), id, false, false);
                            var p = J$.W(389953, 'p', J$.M(389945, J$.R(389929, 'URI', URI, false, true), 'parse', false)(J$.R(389937, 'id', id, false, false)), p, false, false);
                            return J$.Rt(389985, J$.F(389977, J$.R(389961, '_getFullPath', _getFullPath, false, true), false)(J$.R(389969, 'p', p, false, false)));
                        } catch (J$e) {
                            J$.Ex(391985, J$e);
                        } finally {
                            if (J$.Fr(391993))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _getFullPath(p) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(390105, arguments.callee, this, arguments);
                            arguments = J$.N(390113, 'arguments', arguments, true, false, false);
                            p = J$.N(390121, 'p', p, true, false, false);
                            return J$.Rt(390097, J$.B(80410, '+', J$.G(390081, J$.M(390065, J$.M(390049, J$.R(390033, 'URI', URI, false, true), 'serialize', false)(J$.R(390041, 'p', p, false, false)), 'split', false)(J$.T(390057, '#', 21, false)), J$.T(390073, 0, 22, false)), J$.T(390089, '#', 21, false)));
                        } catch (J$e) {
                            J$.Ex(392001, J$e);
                        } finally {
                            if (J$.Fr(392009))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function normalizeId(id) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(390201, arguments.callee, this, arguments);
                            arguments = J$.N(390209, 'arguments', arguments, true, false, false);
                            id = J$.N(390217, 'id', id, true, false, false);
                            return J$.Rt(390193, J$.C(26224, J$.R(390145, 'id', id, false, false)) ? J$.M(390177, J$.R(390153, 'id', id, false, false), 'replace', false)(J$.R(390161, 'TRAILING_SLASH_HASH', TRAILING_SLASH_HASH, false, true), J$.T(390169, '', 21, false)) : J$.T(390185, '', 21, false));
                        } catch (J$e) {
                            J$.Ex(392017, J$e);
                        } finally {
                            if (J$.Fr(392025))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolveUrl(baseId, id) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(390297, arguments.callee, this, arguments);
                            arguments = J$.N(390305, 'arguments', arguments, true, false, false);
                            baseId = J$.N(390313, 'baseId', baseId, true, false, false);
                            id = J$.N(390321, 'id', id, true, false, false);
                            id = J$.W(390249, 'id', J$.F(390241, J$.R(390225, 'normalizeId', normalizeId, false, true), false)(J$.R(390233, 'id', id, false, false)), id, false, false);
                            return J$.Rt(390289, J$.M(390281, J$.R(390257, 'URI', URI, false, true), 'resolve', false)(J$.R(390265, 'baseId', baseId, false, false), J$.R(390273, 'id', id, false, false)));
                        } catch (J$e) {
                            J$.Ex(392033, J$e);
                        } finally {
                            if (J$.Fr(392041))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolveIds(schema) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(391481, arguments.callee, this, arguments);
                            arguments = J$.N(391489, 'arguments', arguments, true, false, false);
                            schema = J$.N(391497, 'schema', schema, true, false, false);
                            J$.N(391505, 'schemaId', schemaId, false, false, false);
                            J$.N(391513, 'baseIds', baseIds, false, false, false);
                            J$.N(391521, 'fullPaths', fullPaths, false, false, false);
                            J$.N(391529, 'localRefs', localRefs, false, false, false);
                            J$.N(391537, 'self', self, false, false, false);
                            var schemaId = J$.W(390369, 'schemaId', J$.F(390361, J$.R(390329, 'normalizeId', normalizeId, false, true), false)(J$.M(390353, J$.R(390337, 'this', this, false, false), '_getId', false)(J$.R(390345, 'schema', schema, false, false))), schemaId, false, false);
                            var baseIds = J$.W(390393, 'baseIds', J$.T(390385, { '': J$.R(390377, 'schemaId', schemaId, false, false) }, 11, false), baseIds, false, false);
                            var fullPaths = J$.W(390441, 'fullPaths', J$.T(390433, { '': J$.F(390425, J$.R(390401, 'getFullPath', getFullPath, false, true), false)(J$.R(390409, 'schemaId', schemaId, false, false), J$.T(390417, false, 23, false)) }, 11, false), fullPaths, false, false);
                            var localRefs = J$.W(390457, 'localRefs', J$.T(390449, {}, 11, false), localRefs, false, false);
                            var self = J$.W(390473, 'self', J$.R(390465, 'this', this, false, false), self, false, false);
                            J$.F(391457, J$.R(390481, 'traverse', traverse, false, true), false)(J$.R(390489, 'schema', schema, false, false), J$.T(390505, { allKeys: J$.T(390497, true, 23, false) }, 11, false), J$.T(391449, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(391345, arguments.callee, this, arguments);
                                            arguments = J$.N(391353, 'arguments', arguments, true, false, false);
                                            sch = J$.N(391361, 'sch', sch, true, false, false);
                                            jsonPtr = J$.N(391369, 'jsonPtr', jsonPtr, true, false, false);
                                            rootSchema = J$.N(391377, 'rootSchema', rootSchema, true, false, false);
                                            parentJsonPtr = J$.N(391385, 'parentJsonPtr', parentJsonPtr, true, false, false);
                                            parentKeyword = J$.N(391393, 'parentKeyword', parentKeyword, true, false, false);
                                            parentSchema = J$.N(391401, 'parentSchema', parentSchema, true, false, false);
                                            keyIndex = J$.N(391409, 'keyIndex', keyIndex, true, false, false);
                                            J$.N(391417, 'id', id, false, false, false);
                                            J$.N(391425, 'baseId', baseId, false, false, false);
                                            J$.N(391433, 'fullPath', fullPath, false, false, false);
                                            J$.N(391441, 'refVal', refVal, false, false, false);
                                            if (J$.C(26232, J$.B(80418, '===', J$.R(390513, 'jsonPtr', jsonPtr, false, false), J$.T(390521, '', 21, false))))
                                                return J$.Rt(390529, undefined);
                                            var id = J$.W(390561, 'id', J$.M(390553, J$.R(390537, 'self', self, false, false), '_getId', false)(J$.R(390545, 'sch', sch, false, false)), id, false, false);
                                            var baseId = J$.W(390593, 'baseId', J$.G(390585, J$.R(390569, 'baseIds', baseIds, false, false), J$.R(390577, 'parentJsonPtr', parentJsonPtr, false, false)), baseId, false, false);
                                            var fullPath = J$.W(390641, 'fullPath', J$.B(80434, '+', J$.B(80426, '+', J$.G(390617, J$.R(390601, 'fullPaths', fullPaths, false, false), J$.R(390609, 'parentJsonPtr', parentJsonPtr, false, false)), J$.T(390625, '/', 21, false)), J$.R(390633, 'parentKeyword', parentKeyword, false, false)), fullPath, false, false);
                                            if (J$.C(26248, J$.B(80442, '!==', J$.R(390649, 'keyIndex', keyIndex, false, false), J$.T(390657, undefined, 24, false))))
                                                fullPath = J$.W(390729, 'fullPath', J$.B(80474, '+', J$.R(390721, 'fullPath', fullPath, false, false), J$.B(80466, '+', J$.T(390665, '/', 21, false), J$.C(26240, J$.B(80458, '==', J$.U(80450, 'typeof', J$.R(390673, 'keyIndex', keyIndex, false, false)), J$.T(390681, 'number', 21, false))) ? J$.R(390689, 'keyIndex', keyIndex, false, false) : J$.M(390713, J$.R(390697, 'util', util, false, true), 'escapeFragment', false)(J$.R(390705, 'keyIndex', keyIndex, false, false)))), fullPath, false, false);
                                            if (J$.C(26328, J$.B(80490, '==', J$.U(80482, 'typeof', J$.R(390737, 'id', id, false, false)), J$.T(390745, 'string', 21, false)))) {
                                                id = J$.W(390825, 'id', baseId = J$.W(390817, 'baseId', J$.F(390809, J$.R(390753, 'normalizeId', normalizeId, false, true), false)(J$.C(26256, J$.R(390761, 'baseId', baseId, false, false)) ? J$.M(390793, J$.R(390769, 'URI', URI, false, true), 'resolve', false)(J$.R(390777, 'baseId', baseId, false, false), J$.R(390785, 'id', id, false, false)) : J$.R(390801, 'id', id, false, false)), baseId, false, false), id, false, false);
                                                var refVal = J$.W(390865, 'refVal', J$.G(390857, J$.G(390841, J$.R(390833, 'self', self, false, false), '_refs'), J$.R(390849, 'id', id, false, false)), refVal, false, false);
                                                if (J$.C(26264, J$.B(80506, '==', J$.U(80498, 'typeof', J$.R(390873, 'refVal', refVal, false, false)), J$.T(390881, 'string', 21, false))))
                                                    refVal = J$.W(390921, 'refVal', J$.G(390913, J$.G(390897, J$.R(390889, 'self', self, false, false), '_refs'), J$.R(390905, 'refVal', refVal, false, false)), refVal, false, false);
                                                if (J$.C(26320, J$.C(26272, J$.R(390929, 'refVal', refVal, false, false)) ? J$.G(390945, J$.R(390937, 'refVal', refVal, false, false), 'schema') : J$._())) {
                                                    if (J$.C(26280, J$.U(80514, '!', J$.F(390985, J$.R(390953, 'equal', equal, false, true), false)(J$.R(390961, 'sch', sch, false, false), J$.G(390977, J$.R(390969, 'refVal', refVal, false, false), 'schema')))))
                                                        throw J$.F(391025, J$.I(typeof Error === 'undefined' ? Error = J$.R(390993, 'Error', undefined, true, true) : Error = J$.R(390993, 'Error', Error, true, true)), true)(J$.B(80530, '+', J$.B(80522, '+', J$.T(391001, 'id "', 21, false), J$.R(391009, 'id', id, false, false)), J$.T(391017, '" resolves to more than one schema', 21, false)));
                                                } else if (J$.C(26312, J$.B(80538, '!=', J$.R(391033, 'id', id, false, false), J$.F(391057, J$.R(391041, 'normalizeId', normalizeId, false, true), false)(J$.R(391049, 'fullPath', fullPath, false, false))))) {
                                                    if (J$.C(26304, J$.B(80546, '==', J$.G(391081, J$.R(391065, 'id', id, false, false), J$.T(391073, 0, 22, false)), J$.T(391089, '#', 21, false)))) {
                                                        if (J$.C(26296, J$.C(26288, J$.G(391113, J$.R(391097, 'localRefs', localRefs, false, false), J$.R(391105, 'id', id, false, false))) ? J$.U(80554, '!', J$.F(391161, J$.R(391121, 'equal', equal, false, true), false)(J$.R(391129, 'sch', sch, false, false), J$.G(391153, J$.R(391137, 'localRefs', localRefs, false, false), J$.R(391145, 'id', id, false, false)))) : J$._()))
                                                            throw J$.F(391201, J$.I(typeof Error === 'undefined' ? Error = J$.R(391169, 'Error', undefined, true, true) : Error = J$.R(391169, 'Error', Error, true, true)), true)(J$.B(80570, '+', J$.B(80562, '+', J$.T(391177, 'id "', 21, false), J$.R(391185, 'id', id, false, false)), J$.T(391193, '" resolves to more than one schema', 21, false)));
                                                        J$.P(391233, J$.R(391209, 'localRefs', localRefs, false, false), J$.R(391217, 'id', id, false, false), J$.R(391225, 'sch', sch, false, false));
                                                    } else {
                                                        J$.P(391273, J$.G(391249, J$.R(391241, 'self', self, false, false), '_refs'), J$.R(391257, 'id', id, false, false), J$.R(391265, 'fullPath', fullPath, false, false));
                                                    }
                                                }
                                            }
                                            J$.P(391305, J$.R(391281, 'baseIds', baseIds, false, false), J$.R(391289, 'jsonPtr', jsonPtr, false, false), J$.R(391297, 'baseId', baseId, false, false));
                                            J$.P(391337, J$.R(391313, 'fullPaths', fullPaths, false, false), J$.R(391321, 'jsonPtr', jsonPtr, false, false), J$.R(391329, 'fullPath', fullPath, false, false));
                                        } catch (J$e) {
                                            J$.Ex(392049, J$e);
                                        } finally {
                                            if (J$.Fr(392057))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(391473, J$.R(391465, 'localRefs', localRefs, false, false));
                        } catch (J$e) {
                            J$.Ex(392065, J$e);
                        } finally {
                            if (J$.Fr(392073))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            _typeof = J$.N(391561, '_typeof', J$.T(391553, _typeof, 12, false), true, false, false);
            J$.N(391569, 'URI', URI, false, false, false);
            J$.N(391577, 'equal', equal, false, false, false);
            J$.N(391585, 'util', util, false, false, false);
            J$.N(391593, 'SchemaObject', SchemaObject, false, false, false);
            J$.N(391601, 'traverse', traverse, false, false, false);
            resolve = J$.N(391617, 'resolve', J$.T(391609, resolve, 12, false), true, false, false);
            resolveSchema = J$.N(391633, 'resolveSchema', J$.T(391625, resolveSchema, 12, false), true, false, false);
            resolveRecursive = J$.N(391649, 'resolveRecursive', J$.T(391641, resolveRecursive, 12, false), true, false, false);
            J$.N(391657, 'PREVENT_SCOPE_CHANGE', PREVENT_SCOPE_CHANGE, false, false, false);
            getJsonPointer = J$.N(391673, 'getJsonPointer', J$.T(391665, getJsonPointer, 12, false), true, false, false);
            J$.N(391681, 'SIMPLE_INLINED', SIMPLE_INLINED, false, false, false);
            inlineRef = J$.N(391697, 'inlineRef', J$.T(391689, inlineRef, 12, false), true, false, false);
            checkNoRef = J$.N(391713, 'checkNoRef', J$.T(391705, checkNoRef, 12, false), true, false, false);
            countKeys = J$.N(391729, 'countKeys', J$.T(391721, countKeys, 12, false), true, false, false);
            getFullPath = J$.N(391745, 'getFullPath', J$.T(391737, getFullPath, 12, false), true, false, false);
            _getFullPath = J$.N(391761, '_getFullPath', J$.T(391753, _getFullPath, 12, false), true, false, false);
            J$.N(391769, 'TRAILING_SLASH_HASH', TRAILING_SLASH_HASH, false, false, false);
            normalizeId = J$.N(391785, 'normalizeId', J$.T(391777, normalizeId, 12, false), true, false, false);
            resolveUrl = J$.N(391801, 'resolveUrl', J$.T(391793, resolveUrl, 12, false), true, false, false);
            resolveIds = J$.N(391817, 'resolveIds', J$.T(391809, resolveIds, 12, false), true, false, false);
            J$.T(384817, 'use strict', 21, false);
            J$.F(384841, J$.I(typeof require === 'undefined' ? require = J$.R(384825, 'require', undefined, true, true) : require = J$.R(384825, 'require', require, true, true)), false)(J$.T(384833, 'core-js/modules/es.symbol', 21, false));
            J$.F(384865, J$.I(typeof require === 'undefined' ? require = J$.R(384849, 'require', undefined, true, true) : require = J$.R(384849, 'require', require, true, true)), false)(J$.T(384857, 'core-js/modules/es.symbol.description', 21, false));
            J$.F(384889, J$.I(typeof require === 'undefined' ? require = J$.R(384873, 'require', undefined, true, true) : require = J$.R(384873, 'require', require, true, true)), false)(J$.T(384881, 'core-js/modules/es.symbol.iterator', 21, false));
            J$.F(384913, J$.I(typeof require === 'undefined' ? require = J$.R(384897, 'require', undefined, true, true) : require = J$.R(384897, 'require', require, true, true)), false)(J$.T(384905, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(384937, J$.I(typeof require === 'undefined' ? require = J$.R(384921, 'require', undefined, true, true) : require = J$.R(384921, 'require', require, true, true)), false)(J$.T(384929, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(384961, J$.I(typeof require === 'undefined' ? require = J$.R(384945, 'require', undefined, true, true) : require = J$.R(384945, 'require', require, true, true)), false)(J$.T(384953, 'core-js/modules/es.array.slice', 21, false));
            J$.F(384985, J$.I(typeof require === 'undefined' ? require = J$.R(384969, 'require', undefined, true, true) : require = J$.R(384969, 'require', require, true, true)), false)(J$.T(384977, 'core-js/modules/es.object.keys', 21, false));
            J$.F(385009, J$.I(typeof require === 'undefined' ? require = J$.R(384993, 'require', undefined, true, true) : require = J$.R(384993, 'require', require, true, true)), false)(J$.T(385001, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(385033, J$.I(typeof require === 'undefined' ? require = J$.R(385017, 'require', undefined, true, true) : require = J$.R(385017, 'require', require, true, true)), false)(J$.T(385025, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(385057, J$.I(typeof require === 'undefined' ? require = J$.R(385041, 'require', undefined, true, true) : require = J$.R(385041, 'require', require, true, true)), false)(J$.T(385049, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(385081, J$.I(typeof require === 'undefined' ? require = J$.R(385065, 'require', undefined, true, true) : require = J$.R(385065, 'require', require, true, true)), false)(J$.T(385073, 'core-js/modules/es.string.replace', 21, false));
            J$.F(385105, J$.I(typeof require === 'undefined' ? require = J$.R(385089, 'require', undefined, true, true) : require = J$.R(385089, 'require', require, true, true)), false)(J$.T(385097, 'core-js/modules/es.string.split', 21, false));
            J$.F(385129, J$.I(typeof require === 'undefined' ? require = J$.R(385113, 'require', undefined, true, true) : require = J$.R(385113, 'require', require, true, true)), false)(J$.T(385121, 'core-js/modules/web.dom-collections.iterator', 21, false));
            var URI = J$.W(385545, 'URI', J$.F(385441, J$.I(typeof require === 'undefined' ? require = J$.R(385425, 'require', undefined, true, true) : require = J$.R(385425, 'require', require, true, true)), false)(J$.T(385433, 'uri-js', 21, false)), URI, false, true), equal = J$.W(385553, 'equal', J$.F(385465, J$.I(typeof require === 'undefined' ? require = J$.R(385449, 'require', undefined, true, true) : require = J$.R(385449, 'require', require, true, true)), false)(J$.T(385457, 'fast-deep-equal', 21, false)), equal, false, true), util = J$.W(385561, 'util', J$.F(385489, J$.I(typeof require === 'undefined' ? require = J$.R(385473, 'require', undefined, true, true) : require = J$.R(385473, 'require', require, true, true)), false)(J$.T(385481, './util', 21, false)), util, false, true), SchemaObject = J$.W(385569, 'SchemaObject', J$.F(385513, J$.I(typeof require === 'undefined' ? require = J$.R(385497, 'require', undefined, true, true) : require = J$.R(385497, 'require', require, true, true)), false)(J$.T(385505, './schema_obj', 21, false)), SchemaObject, false, true), traverse = J$.W(385577, 'traverse', J$.F(385537, J$.I(typeof require === 'undefined' ? require = J$.R(385521, 'require', undefined, true, true) : require = J$.R(385521, 'require', require, true, true)), false)(J$.T(385529, 'json-schema-traverse', 21, false)), traverse, false, true);
            J$.P(385601, J$.I(typeof module === 'undefined' ? module = J$.R(385585, 'module', undefined, true, true) : module = J$.R(385585, 'module', module, true, true)), 'exports', J$.R(385593, 'resolve', resolve, false, true));
            J$.P(385625, J$.R(385609, 'resolve', resolve, false, true), 'normalizeId', J$.R(385617, 'normalizeId', normalizeId, false, true));
            J$.P(385649, J$.R(385633, 'resolve', resolve, false, true), 'fullPath', J$.R(385641, 'getFullPath', getFullPath, false, true));
            J$.P(385673, J$.R(385657, 'resolve', resolve, false, true), 'url', J$.R(385665, 'resolveUrl', resolveUrl, false, true));
            J$.P(385697, J$.R(385681, 'resolve', resolve, false, true), 'ids', J$.R(385689, 'resolveIds', resolveIds, false, true));
            J$.P(385721, J$.R(385705, 'resolve', resolve, false, true), 'inlineRef', J$.R(385713, 'inlineRef', inlineRef, false, true));
            J$.P(385745, J$.R(385729, 'resolve', resolve, false, true), 'schema', J$.R(385737, 'resolveSchema', resolveSchema, false, true));
            var PREVENT_SCOPE_CHANGE = J$.W(387809, 'PREVENT_SCOPE_CHANGE', J$.M(387801, J$.R(387745, 'util', util, false, true), 'toHash', false)(J$.T(387793, [
                J$.T(387753, 'properties', 21, false),
                J$.T(387761, 'patternProperties', 21, false),
                J$.T(387769, 'enum', 21, false),
                J$.T(387777, 'dependencies', 21, false),
                J$.T(387785, 'definitions', 21, false)
            ], 10, false)), PREVENT_SCOPE_CHANGE, false, true);
            var SIMPLE_INLINED = J$.W(388745, 'SIMPLE_INLINED', J$.M(388737, J$.R(388601, 'util', util, false, true), 'toHash', false)(J$.T(388729, [
                J$.T(388609, 'type', 21, false),
                J$.T(388617, 'format', 21, false),
                J$.T(388625, 'pattern', 21, false),
                J$.T(388633, 'maxLength', 21, false),
                J$.T(388641, 'minLength', 21, false),
                J$.T(388649, 'maxProperties', 21, false),
                J$.T(388657, 'minProperties', 21, false),
                J$.T(388665, 'maxItems', 21, false),
                J$.T(388673, 'minItems', 21, false),
                J$.T(388681, 'maximum', 21, false),
                J$.T(388689, 'minimum', 21, false),
                J$.T(388697, 'uniqueItems', 21, false),
                J$.T(388705, 'multipleOf', 21, false),
                J$.T(388713, 'required', 21, false),
                J$.T(388721, 'enum', 21, false)
            ], 10, false)), SIMPLE_INLINED, false, true);
            var TRAILING_SLASH_HASH = J$.W(390137, 'TRAILING_SLASH_HASH', J$.T(390129, /#\/?$/, 14, false), TRAILING_SLASH_HASH, false, true);
        } catch (J$e) {
            J$.Ex(392081, J$e);
        } finally {
            if (J$.Sr(392089))
                continue jalangiLabel16;
            else
                break jalangiLabel16;
        }
    }
// JALANGI DO NOT INSTRUMENT

