J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(420337, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/ajv/lib/dotjs/const.js');
            J$.T(418817, 'use strict', 21, false);
            J$.P(420329, J$.I(typeof module === 'undefined' ? module = J$.R(418825, 'module', undefined, true, true) : module = J$.R(418825, 'module', module, true, true)), 'exports', J$.T(420321, function generate_const(it, $keyword, $ruleType) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(420177, arguments.callee, this, arguments);
                            arguments = J$.N(420185, 'arguments', arguments, true, false, false);
                            it = J$.N(420193, 'it', it, true, false, false);
                            $keyword = J$.N(420201, '$keyword', $keyword, true, false, false);
                            $ruleType = J$.N(420209, '$ruleType', $ruleType, true, false, false);
                            J$.N(420217, 'out', out, false, false, false);
                            J$.N(420225, '$lvl', $lvl, false, false, false);
                            J$.N(420233, '$dataLvl', $dataLvl, false, false, false);
                            J$.N(420241, '$schema', $schema, false, false, false);
                            J$.N(420249, '$schemaPath', $schemaPath, false, false, false);
                            J$.N(420257, '$errSchemaPath', $errSchemaPath, false, false, false);
                            J$.N(420265, '$breakOnError', $breakOnError, false, false, false);
                            J$.N(420273, '$data', $data, false, false, false);
                            J$.N(420281, '$valid', $valid, false, false, false);
                            J$.N(420289, '$isData', $isData, false, false, false);
                            J$.N(420297, '$schemaValue', $schemaValue, false, false, false);
                            J$.N(420305, '$$outStack', $$outStack, false, false, false);
                            J$.N(420313, '__err', __err, false, false, false);
                            var out = J$.W(418841, 'out', J$.T(418833, ' ', 21, false), out, false, false);
                            var $lvl = J$.W(418865, '$lvl', J$.G(418857, J$.R(418849, 'it', it, false, false), 'level'), $lvl, false, false);
                            var $dataLvl = J$.W(418889, '$dataLvl', J$.G(418881, J$.R(418873, 'it', it, false, false), 'dataLevel'), $dataLvl, false, false);
                            var $schema = J$.W(418929, '$schema', J$.G(418921, J$.G(418905, J$.R(418897, 'it', it, false, false), 'schema'), J$.R(418913, '$keyword', $keyword, false, false)), $schema, false, false);
                            var $schemaPath = J$.W(418985, '$schemaPath', J$.B(86618, '+', J$.G(418945, J$.R(418937, 'it', it, false, false), 'schemaPath'), J$.M(418977, J$.G(418961, J$.R(418953, 'it', it, false, false), 'util'), 'getProperty', false)(J$.R(418969, '$keyword', $keyword, false, false))), $schemaPath, false, false);
                            var $errSchemaPath = J$.W(419025, '$errSchemaPath', J$.B(86634, '+', J$.B(86626, '+', J$.G(419001, J$.R(418993, 'it', it, false, false), 'errSchemaPath'), J$.T(419009, '/', 21, false)), J$.R(419017, '$keyword', $keyword, false, false)), $errSchemaPath, false, false);
                            var $breakOnError = J$.W(419057, '$breakOnError', J$.U(86642, '!', J$.G(419049, J$.G(419041, J$.R(419033, 'it', it, false, false), 'opts'), 'allErrors')), $breakOnError, false, false);
                            var $data = J$.W(419089, '$data', J$.B(86650, '+', J$.T(419065, 'data', 21, false), J$.C(28008, J$.R(419073, '$dataLvl', $dataLvl, false, false)) ? J$._() : J$.T(419081, '', 21, false)), $data, false, false);
                            var $valid = J$.W(419113, '$valid', J$.B(86658, '+', J$.T(419097, 'valid', 21, false), J$.R(419105, '$lvl', $lvl, false, false)), $valid, false, false);
                            var $isData = J$.W(419169, '$isData', J$.C(28024, J$.C(28016, J$.G(419137, J$.G(419129, J$.R(419121, 'it', it, false, false), 'opts'), '$data')) ? J$.R(419145, '$schema', $schema, false, false) : J$._()) ? J$.G(419161, J$.R(419153, '$schema', $schema, false, false), '$data') : J$._(), $isData, false, false), $schemaValue;
                            if (J$.C(28032, J$.R(419177, '$isData', $isData, false, false))) {
                                out = J$.W(419289, 'out', J$.B(86698, '+', J$.R(419281, 'out', out, false, false), J$.B(86690, '+', J$.B(86682, '+', J$.B(86674, '+', J$.B(86666, '+', J$.T(419185, ' var schema', 21, false), J$.R(419193, '$lvl', $lvl, false, false)), J$.T(419201, ' = ', 21, false)), J$.M(419265, J$.G(419217, J$.R(419209, 'it', it, false, false), 'util'), 'getData', false)(J$.G(419233, J$.R(419225, '$schema', $schema, false, false), '$data'), J$.R(419241, '$dataLvl', $dataLvl, false, false), J$.G(419257, J$.R(419249, 'it', it, false, false), 'dataPathArr'))), J$.T(419273, '; ', 21, false))), out, false, false);
                                $schemaValue = J$.W(419313, '$schemaValue', J$.B(86706, '+', J$.T(419297, 'schema', 21, false), J$.R(419305, '$lvl', $lvl, false, false)), $schemaValue, false, false);
                            } else {
                                $schemaValue = J$.W(419329, '$schemaValue', J$.R(419321, '$schema', $schema, false, false), $schemaValue, false, false);
                            }
                            if (J$.C(28040, J$.U(86714, '!', J$.R(419337, '$isData', $isData, false, false)))) {
                                out = J$.W(419393, 'out', J$.B(86754, '+', J$.R(419385, 'out', out, false, false), J$.B(86746, '+', J$.B(86738, '+', J$.B(86730, '+', J$.B(86722, '+', J$.T(419345, ' var schema', 21, false), J$.R(419353, '$lvl', $lvl, false, false)), J$.T(419361, ' = validate.schema', 21, false)), J$.R(419369, '$schemaPath', $schemaPath, false, false)), J$.T(419377, ';', 21, false))), out, false, false);
                            }
                            out = J$.W(419481, 'out', J$.B(86826, '+', J$.R(419473, 'out', out, false, false), J$.B(86818, '+', J$.B(86810, '+', J$.B(86802, '+', J$.B(86794, '+', J$.B(86786, '+', J$.B(86778, '+', J$.B(86770, '+', J$.B(86762, '+', J$.T(419401, 'var ', 21, false), J$.R(419409, '$valid', $valid, false, false)), J$.T(419417, ' = equal(', 21, false)), J$.R(419425, '$data', $data, false, false)), J$.T(419433, ', schema', 21, false)), J$.R(419441, '$lvl', $lvl, false, false)), J$.T(419449, '); if (!', 21, false)), J$.R(419457, '$valid', $valid, false, false)), J$.T(419465, ') {   ', 21, false))), out, false, false);
                            var $$outStack = J$.W(419505, '$$outStack', J$.C(28048, J$.R(419489, '$$outStack', $$outStack, false, false)) ? J$._() : J$.T(419497, [], 10, false), $$outStack, false, false);
                            J$.M(419529, J$.R(419513, '$$outStack', $$outStack, false, false), 'push', false)(J$.R(419521, 'out', out, false, false));
                            out = J$.W(419545, 'out', J$.T(419537, '', 21, false), out, false, false);
                            if (J$.C(28072, J$.B(86834, '!==', J$.G(419561, J$.R(419553, 'it', it, false, false), 'createErrors'), J$.T(419569, false, 23, false)))) {
                                out = J$.W(419689, 'out', J$.B(86906, '+', J$.R(419681, 'out', out, false, false), J$.B(86898, '+', J$.B(86890, '+', J$.B(86882, '+', J$.B(86874, '+', J$.B(86866, '+', J$.B(86858, '+', J$.B(86850, '+', J$.B(86842, '+', J$.T(419577, ' { keyword: \'', 21, false), J$.T(419585, 'const', 21, false)), J$.T(419593, '\' , dataPath: (dataPath || \'\') + ', 21, false)), J$.G(419609, J$.R(419601, 'it', it, false, false), 'errorPath')), J$.T(419617, ' , schemaPath: ', 21, false)), J$.M(419649, J$.G(419633, J$.R(419625, 'it', it, false, false), 'util'), 'toQuotedString', false)(J$.R(419641, '$errSchemaPath', $errSchemaPath, false, false))), J$.T(419657, ' , params: { allowedValue: schema', 21, false)), J$.R(419665, '$lvl', $lvl, false, false)), J$.T(419673, ' } ', 21, false))), out, false, false);
                                if (J$.C(28056, J$.B(86914, '!==', J$.G(419713, J$.G(419705, J$.R(419697, 'it', it, false, false), 'opts'), 'messages'), J$.T(419721, false, 23, false)))) {
                                    out = J$.W(419745, 'out', J$.B(86922, '+', J$.R(419737, 'out', out, false, false), J$.T(419729, ' , message: \'should be equal to constant\' ', 21, false)), out, false, false);
                                }
                                if (J$.C(28064, J$.G(419769, J$.G(419761, J$.R(419753, 'it', it, false, false), 'opts'), 'verbose'))) {
                                    out = J$.W(419849, 'out', J$.B(86978, '+', J$.R(419841, 'out', out, false, false), J$.B(86970, '+', J$.B(86962, '+', J$.B(86954, '+', J$.B(86946, '+', J$.B(86938, '+', J$.B(86930, '+', J$.T(419777, ' , schema: validate.schema', 21, false), J$.R(419785, '$schemaPath', $schemaPath, false, false)), J$.T(419793, ' , parentSchema: validate.schema', 21, false)), J$.G(419809, J$.R(419801, 'it', it, false, false), 'schemaPath')), J$.T(419817, ' , data: ', 21, false)), J$.R(419825, '$data', $data, false, false)), J$.T(419833, ' ', 21, false))), out, false, false);
                                }
                                out = J$.W(419873, 'out', J$.B(86986, '+', J$.R(419865, 'out', out, false, false), J$.T(419857, ' } ', 21, false)), out, false, false);
                            } else {
                                out = J$.W(419897, 'out', J$.B(86994, '+', J$.R(419889, 'out', out, false, false), J$.T(419881, ' {} ', 21, false)), out, false, false);
                            }
                            var __err = J$.W(419913, '__err', J$.R(419905, 'out', out, false, false), __err, false, false);
                            out = J$.W(419937, 'out', J$.M(419929, J$.R(419921, '$$outStack', $$outStack, false, false), 'pop', false)(), out, false, false);
                            if (J$.C(28096, J$.C(28080, J$.U(87002, '!', J$.G(419953, J$.R(419945, 'it', it, false, false), 'compositeRule'))) ? J$.R(419961, '$breakOnError', $breakOnError, false, false) : J$._())) {
                                if (J$.C(28088, J$.G(419977, J$.R(419969, 'it', it, false, false), 'async'))) {
                                    out = J$.W(420017, 'out', J$.B(87026, '+', J$.R(420009, 'out', out, false, false), J$.B(87018, '+', J$.B(87010, '+', J$.T(419985, ' throw new ValidationError([', 21, false), J$.R(419993, '__err', __err, false, false)), J$.T(420001, ']); ', 21, false))), out, false, false);
                                } else {
                                    out = J$.W(420057, 'out', J$.B(87050, '+', J$.R(420049, 'out', out, false, false), J$.B(87042, '+', J$.B(87034, '+', J$.T(420025, ' validate.errors = [', 21, false), J$.R(420033, '__err', __err, false, false)), J$.T(420041, ']; return false; ', 21, false))), out, false, false);
                                }
                            } else {
                                out = J$.W(420097, 'out', J$.B(87074, '+', J$.R(420089, 'out', out, false, false), J$.B(87066, '+', J$.B(87058, '+', J$.T(420065, ' var err = ', 21, false), J$.R(420073, '__err', __err, false, false)), J$.T(420081, ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ', 21, false))), out, false, false);
                            }
                            out = J$.W(420121, 'out', J$.B(87082, '+', J$.R(420113, 'out', out, false, false), J$.T(420105, ' }', 21, false)), out, false, false);
                            if (J$.C(28104, J$.R(420129, '$breakOnError', $breakOnError, false, false))) {
                                out = J$.W(420153, 'out', J$.B(87090, '+', J$.R(420145, 'out', out, false, false), J$.T(420137, ' else { ', 21, false)), out, false, false);
                            }
                            return J$.Rt(420169, J$.R(420161, 'out', out, false, false));
                        } catch (J$e) {
                            J$.Ex(420345, J$e);
                        } finally {
                            if (J$.Fr(420353))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(420361, J$e);
        } finally {
            if (J$.Sr(420369))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

