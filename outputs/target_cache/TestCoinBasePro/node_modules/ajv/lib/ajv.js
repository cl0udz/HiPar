J$.noInstrEval = false;
jalangiLabel31:
    while (true) {
        try {
            J$.Se(369553, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/ajv/lib/ajv.js');
            function _typeof(obj) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(359857, arguments.callee, this, arguments);
                            arguments = J$.N(359865, 'arguments', arguments, true, false, false);
                            obj = J$.N(359873, 'obj', obj, true, false, false);
                            if (J$.C(24200, J$.C(24160, J$.B(78218, '===', J$.U(78210, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(359593, 'Symbol', undefined, true, true) : Symbol = J$.R(359593, 'Symbol', Symbol, true, true))), J$.T(359601, 'function', 21, false))) ? J$.B(78234, '===', J$.U(78226, 'typeof', J$.G(359617, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(359609, 'Symbol', undefined, true, true) : Symbol = J$.R(359609, 'Symbol', Symbol, true, true)), 'iterator')), J$.T(359625, 'symbol', 21, false)) : J$._())) {
                                _typeof = J$.W(359681, '_typeof', J$.T(359673, function _typeof(obj) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(359649, arguments.callee, this, arguments);
                                                arguments = J$.N(359657, 'arguments', arguments, true, false, false);
                                                obj = J$.N(359665, 'obj', obj, true, false, false);
                                                return J$.Rt(359641, J$.U(78242, 'typeof', J$.R(359633, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(370121, J$e);
                                            } finally {
                                                if (J$.Fr(370129))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            } else {
                                _typeof = J$.W(359817, '_typeof', J$.T(359809, function _typeof(obj) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(359785, arguments.callee, this, arguments);
                                                arguments = J$.N(359793, 'arguments', arguments, true, false, false);
                                                obj = J$.N(359801, 'obj', obj, true, false, false);
                                                return J$.Rt(359777, J$.C(24192, J$.C(24184, J$.C(24176, J$.C(24168, J$.R(359689, 'obj', obj, false, false)) ? J$.B(78258, '===', J$.U(78250, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(359697, 'Symbol', undefined, true, true) : Symbol = J$.R(359697, 'Symbol', Symbol, true, true))), J$.T(359705, 'function', 21, false)) : J$._()) ? J$.B(78266, '===', J$.G(359721, J$.R(359713, 'obj', obj, false, false), 'constructor'), J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(359729, 'Symbol', undefined, true, true) : Symbol = J$.R(359729, 'Symbol', Symbol, true, true))) : J$._()) ? J$.B(78274, '!==', J$.R(359737, 'obj', obj, false, false), J$.G(359753, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(359745, 'Symbol', undefined, true, true) : Symbol = J$.R(359745, 'Symbol', Symbol, true, true)), 'prototype')) : J$._()) ? J$.T(359761, 'symbol', 21, false) : J$.U(78282, 'typeof', J$.R(359769, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(370137, J$e);
                                            } finally {
                                                if (J$.Fr(370145))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            }
                            return J$.Rt(359849, J$.F(359841, J$.R(359825, '_typeof', _typeof, false, true), false)(J$.R(359833, 'obj', obj, false, false)));
                        } catch (J$e) {
                            J$.Ex(370153, J$e);
                        } finally {
                            if (J$.Fr(370161))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Ajv(opts) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(361809, arguments.callee, this, arguments);
                            arguments = J$.N(361817, 'arguments', arguments, true, false, false);
                            opts = J$.N(361825, 'opts', opts, true, false, false);
                            if (J$.C(24208, J$.U(78298, '!', J$.B(78290, 'instanceof', J$.R(360993, 'this', this, false, false), J$.R(361001, 'Ajv', Ajv, false, true)))))
                                return J$.Rt(361033, J$.F(361025, J$.R(361009, 'Ajv', Ajv, false, true), true)(J$.R(361017, 'opts', opts, false, false)));
                            opts = J$.W(361089, 'opts', J$.P(361081, J$.R(361041, 'this', this, false, false), '_opts', J$.C(24216, J$.M(361065, J$.R(361049, 'util', util, false, true), 'copy', false)(J$.R(361057, 'opts', opts, false, false))) ? J$._() : J$.T(361073, {}, 11, false)), opts, false, false);
                            J$.F(361113, J$.R(361097, 'setLogger', setLogger, false, true), false)(J$.R(361105, 'this', this, false, false));
                            J$.P(361137, J$.R(361121, 'this', this, false, false), '_schemas', J$.T(361129, {}, 11, false));
                            J$.P(361161, J$.R(361145, 'this', this, false, false), '_refs', J$.T(361153, {}, 11, false));
                            J$.P(361185, J$.R(361169, 'this', this, false, false), '_fragments', J$.T(361177, {}, 11, false));
                            J$.P(361233, J$.R(361193, 'this', this, false, false), '_formats', J$.F(361225, J$.R(361201, 'formats', formats, false, true), false)(J$.G(361217, J$.R(361209, 'opts', opts, false, false), 'format')));
                            J$.P(361281, J$.R(361241, 'this', this, false, false), '_cache', J$.C(24224, J$.G(361257, J$.R(361249, 'opts', opts, false, false), 'cache')) ? J$._() : J$.F(361273, J$.R(361265, 'Cache', Cache, false, true), true)());
                            J$.P(361305, J$.R(361289, 'this', this, false, false), '_loadingSchemas', J$.T(361297, {}, 11, false));
                            J$.P(361329, J$.R(361313, 'this', this, false, false), '_compilations', J$.T(361321, [], 10, false));
                            J$.P(361361, J$.R(361337, 'this', this, false, false), 'RULES', J$.F(361353, J$.R(361345, 'rules', rules, false, true), false)());
                            J$.P(361401, J$.R(361369, 'this', this, false, false), '_getId', J$.F(361393, J$.R(361377, 'chooseGetId', chooseGetId, false, true), false)(J$.R(361385, 'opts', opts, false, false)));
                            J$.P(361441, J$.R(361409, 'opts', opts, false, false), 'loopRequired', J$.C(24232, J$.G(361425, J$.R(361417, 'opts', opts, false, false), 'loopRequired')) ? J$._() : J$.T(361433, Infinity, 22, false));
                            if (J$.C(24240, J$.B(78306, '==', J$.G(361457, J$.R(361449, 'opts', opts, false, false), 'errorDataPath'), J$.T(361465, 'property', 21, false))))
                                J$.P(361489, J$.R(361473, 'opts', opts, false, false), '_errorDataPathProperty', J$.T(361481, true, 23, false));
                            if (J$.C(24248, J$.B(78314, '===', J$.G(361505, J$.R(361497, 'opts', opts, false, false), 'serialize'), J$.T(361513, undefined, 24, false))))
                                J$.P(361537, J$.R(361521, 'opts', opts, false, false), 'serialize', J$.R(361529, 'stableStringify', stableStringify, false, true));
                            J$.P(361577, J$.R(361545, 'this', this, false, false), '_metaOpts', J$.F(361569, J$.R(361553, 'getMetaSchemaOptions', getMetaSchemaOptions, false, true), false)(J$.R(361561, 'this', this, false, false)));
                            if (J$.C(24256, J$.G(361593, J$.R(361585, 'opts', opts, false, false), 'formats')))
                                J$.F(361617, J$.R(361601, 'addInitialFormats', addInitialFormats, false, true), false)(J$.R(361609, 'this', this, false, false));
                            J$.F(361641, J$.R(361625, 'addDefaultMetaSchema', addDefaultMetaSchema, false, true), false)(J$.R(361633, 'this', this, false, false));
                            if (J$.C(24264, J$.B(78322, '==', J$.F(361673, J$.R(361649, '_typeof', _typeof, false, true), false)(J$.G(361665, J$.R(361657, 'opts', opts, false, false), 'meta')), J$.T(361681, 'object', 21, false))))
                                J$.M(361713, J$.R(361689, 'this', this, false, false), 'addMetaSchema', false)(J$.G(361705, J$.R(361697, 'opts', opts, false, false), 'meta'));
                            if (J$.C(24272, J$.G(361729, J$.R(361721, 'opts', opts, false, false), 'nullable')))
                                J$.M(361777, J$.R(361737, 'this', this, false, false), 'addKeyword', false)(J$.T(361745, 'nullable', 21, false), J$.T(361769, { metaSchema: J$.T(361761, { type: J$.T(361753, 'boolean', 21, false) }, 11, false) }, 11, false));
                            J$.F(361801, J$.R(361785, 'addInitialSchemas', addInitialSchemas, false, true), false)(J$.R(361793, 'this', this, false, false));
                        } catch (J$e) {
                            J$.Ex(370169, J$e);
                        } finally {
                            if (J$.Fr(370177))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validate(schemaKeyRef, data) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(362113, arguments.callee, this, arguments);
                            arguments = J$.N(362121, 'arguments', arguments, true, false, false);
                            schemaKeyRef = J$.N(362129, 'schemaKeyRef', schemaKeyRef, true, false, false);
                            data = J$.N(362137, 'data', data, true, false, false);
                            J$.N(362145, 'v', v, false, false, false);
                            J$.N(362153, 'schemaObj', schemaObj, false, false, false);
                            J$.N(362161, 'valid', valid, false, false, false);
                            var v;
                            if (J$.C(24296, J$.B(78338, '==', J$.U(78330, 'typeof', J$.R(361833, 'schemaKeyRef', schemaKeyRef, false, false)), J$.T(361841, 'string', 21, false)))) {
                                v = J$.W(361873, 'v', J$.M(361865, J$.R(361849, 'this', this, false, false), 'getSchema', false)(J$.R(361857, 'schemaKeyRef', schemaKeyRef, false, false)), v, false, false);
                                if (J$.C(24280, J$.U(78346, '!', J$.R(361881, 'v', v, false, false))))
                                    throw J$.F(361921, J$.I(typeof Error === 'undefined' ? Error = J$.R(361889, 'Error', undefined, true, true) : Error = J$.R(361889, 'Error', Error, true, true)), true)(J$.B(78362, '+', J$.B(78354, '+', J$.T(361897, 'no schema with key or ref "', 21, false), J$.R(361905, 'schemaKeyRef', schemaKeyRef, false, false)), J$.T(361913, '"', 21, false)));
                            } else {
                                var schemaObj = J$.W(361953, 'schemaObj', J$.M(361945, J$.R(361929, 'this', this, false, false), '_addSchema', false)(J$.R(361937, 'schemaKeyRef', schemaKeyRef, false, false)), schemaObj, false, false);
                                v = J$.W(362001, 'v', J$.C(24288, J$.G(361969, J$.R(361961, 'schemaObj', schemaObj, false, false), 'validate')) ? J$._() : J$.M(361993, J$.R(361977, 'this', this, false, false), '_compile', false)(J$.R(361985, 'schemaObj', schemaObj, false, false)), v, false, false);
                            }
                            var valid = J$.W(362033, 'valid', J$.F(362025, J$.R(362009, 'v', v, false, false), false)(J$.R(362017, 'data', data, false, false)), valid, false, false);
                            if (J$.C(24304, J$.B(78370, '!==', J$.G(362049, J$.R(362041, 'v', v, false, false), '$async'), J$.T(362057, true, 23, false))))
                                J$.P(362089, J$.R(362065, 'this', this, false, false), 'errors', J$.G(362081, J$.R(362073, 'v', v, false, false), 'errors'));
                            return J$.Rt(362105, J$.R(362097, 'valid', valid, false, false));
                        } catch (J$e) {
                            J$.Ex(370185, J$e);
                        } finally {
                            if (J$.Fr(370193))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compile(schema, _meta) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(362265, arguments.callee, this, arguments);
                            arguments = J$.N(362273, 'arguments', arguments, true, false, false);
                            schema = J$.N(362281, 'schema', schema, true, false, false);
                            _meta = J$.N(362289, '_meta', _meta, true, false, false);
                            J$.N(362297, 'schemaObj', schemaObj, false, false, false);
                            var schemaObj = J$.W(362209, 'schemaObj', J$.M(362201, J$.R(362169, 'this', this, false, false), '_addSchema', false)(J$.R(362177, 'schema', schema, false, false), J$.T(362185, undefined, 24, false), J$.R(362193, '_meta', _meta, false, false)), schemaObj, false, false);
                            return J$.Rt(362257, J$.C(24312, J$.G(362225, J$.R(362217, 'schemaObj', schemaObj, false, false), 'validate')) ? J$._() : J$.M(362249, J$.R(362233, 'this', this, false, false), '_compile', false)(J$.R(362241, 'schemaObj', schemaObj, false, false)));
                        } catch (J$e) {
                            J$.Ex(370201, J$e);
                        } finally {
                            if (J$.Fr(370209))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addSchema(schema, key, _skipValidation, _meta) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(362721, arguments.callee, this, arguments);
                            arguments = J$.N(362729, 'arguments', arguments, true, false, false);
                            schema = J$.N(362737, 'schema', schema, true, false, false);
                            key = J$.N(362745, 'key', key, true, false, false);
                            _skipValidation = J$.N(362753, '_skipValidation', _skipValidation, true, false, false);
                            _meta = J$.N(362761, '_meta', _meta, true, false, false);
                            J$.N(362769, 'i', i, false, false, false);
                            J$.N(362777, 'id', id, false, false, false);
                            if (J$.C(24328, J$.M(362321, J$.I(typeof Array === 'undefined' ? Array = J$.R(362305, 'Array', undefined, true, true) : Array = J$.R(362305, 'Array', Array, true, true)), 'isArray', false)(J$.R(362313, 'schema', schema, false, false)))) {
                                for (var i = J$.W(362337, 'i', J$.T(362329, 0, 22, false), i, false, false); J$.C(24320, J$.B(78378, '<', J$.R(362345, 'i', i, false, false), J$.G(362361, J$.R(362353, 'schema', schema, false, false), 'length'))); J$.B(78402, '-', i = J$.W(362377, 'i', J$.B(78394, '+', J$.U(78386, '+', J$.R(362369, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    J$.M(362441, J$.R(362385, 'this', this, false, false), 'addSchema', false)(J$.G(362409, J$.R(362393, 'schema', schema, false, false), J$.R(362401, 'i', i, false, false)), J$.T(362417, undefined, 24, false), J$.R(362425, '_skipValidation', _skipValidation, false, false), J$.R(362433, '_meta', _meta, false, false));
                                }
                                return J$.Rt(362457, J$.R(362449, 'this', this, false, false));
                            }
                            var id = J$.W(362489, 'id', J$.M(362481, J$.R(362465, 'this', this, false, false), '_getId', false)(J$.R(362473, 'schema', schema, false, false)), id, false, false);
                            if (J$.C(24344, J$.C(24336, J$.B(78410, '!==', J$.R(362497, 'id', id, false, false), J$.T(362505, undefined, 24, false))) ? J$.B(78426, '!=', J$.U(78418, 'typeof', J$.R(362513, 'id', id, false, false)), J$.T(362521, 'string', 21, false)) : J$._()))
                                throw J$.F(362545, J$.I(typeof Error === 'undefined' ? Error = J$.R(362529, 'Error', undefined, true, true) : Error = J$.R(362529, 'Error', Error, true, true)), true)(J$.T(362537, 'schema id must be string', 21, false));
                            key = J$.W(362585, 'key', J$.M(362577, J$.R(362553, 'resolve', resolve, false, true), 'normalizeId', false)(J$.C(24352, J$.R(362561, 'key', key, false, false)) ? J$._() : J$.R(362569, 'id', id, false, false)), key, false, false);
                            J$.F(362617, J$.R(362593, 'checkUnique', checkUnique, false, true), false)(J$.R(362601, 'this', this, false, false), J$.R(362609, 'key', key, false, false));
                            J$.P(362697, J$.G(362633, J$.R(362625, 'this', this, false, false), '_schemas'), J$.R(362641, 'key', key, false, false), J$.M(362689, J$.R(362649, 'this', this, false, false), '_addSchema', false)(J$.R(362657, 'schema', schema, false, false), J$.R(362665, '_skipValidation', _skipValidation, false, false), J$.R(362673, '_meta', _meta, false, false), J$.T(362681, true, 23, false)));
                            return J$.Rt(362713, J$.R(362705, 'this', this, false, false));
                        } catch (J$e) {
                            J$.Ex(370217, J$e);
                        } finally {
                            if (J$.Fr(370225))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addMetaSchema(schema, key, skipValidation) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(362849, arguments.callee, this, arguments);
                            arguments = J$.N(362857, 'arguments', arguments, true, false, false);
                            schema = J$.N(362865, 'schema', schema, true, false, false);
                            key = J$.N(362873, 'key', key, true, false, false);
                            skipValidation = J$.N(362881, 'skipValidation', skipValidation, true, false, false);
                            J$.M(362825, J$.R(362785, 'this', this, false, false), 'addSchema', false)(J$.R(362793, 'schema', schema, false, false), J$.R(362801, 'key', key, false, false), J$.R(362809, 'skipValidation', skipValidation, false, false), J$.T(362817, true, 23, false));
                            return J$.Rt(362841, J$.R(362833, 'this', this, false, false));
                        } catch (J$e) {
                            J$.Ex(370233, J$e);
                        } finally {
                            if (J$.Fr(370241))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateSchema(schema, throwOrLogError) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(363305, arguments.callee, this, arguments);
                            arguments = J$.N(363313, 'arguments', arguments, true, false, false);
                            schema = J$.N(363321, 'schema', schema, true, false, false);
                            throwOrLogError = J$.N(363329, 'throwOrLogError', throwOrLogError, true, false, false);
                            J$.N(363337, '$schema', $schema, false, false, false);
                            J$.N(363345, 'valid', valid, false, false, false);
                            J$.N(363353, 'message', message, false, false, false);
                            var $schema = J$.W(362905, '$schema', J$.G(362897, J$.R(362889, 'schema', schema, false, false), '$schema'), $schema, false, false);
                            if (J$.C(24368, J$.C(24360, J$.B(78434, '!==', J$.R(362913, '$schema', $schema, false, false), J$.T(362921, undefined, 24, false))) ? J$.B(78450, '!=', J$.U(78442, 'typeof', J$.R(362929, '$schema', $schema, false, false)), J$.T(362937, 'string', 21, false)) : J$._()))
                                throw J$.F(362961, J$.I(typeof Error === 'undefined' ? Error = J$.R(362945, 'Error', undefined, true, true) : Error = J$.R(362945, 'Error', Error, true, true)), true)(J$.T(362953, '$schema must be a string', 21, false));
                            $schema = J$.W(363025, '$schema', J$.C(24384, J$.C(24376, J$.R(362969, '$schema', $schema, false, false)) ? J$._() : J$.G(362993, J$.G(362985, J$.R(362977, 'this', this, false, false), '_opts'), 'defaultMeta')) ? J$._() : J$.F(363017, J$.R(363001, 'defaultMeta', defaultMeta, false, true), false)(J$.R(363009, 'this', this, false, false)), $schema, false, false);
                            if (J$.C(24392, J$.U(78458, '!', J$.R(363033, '$schema', $schema, false, false)))) {
                                J$.M(363065, J$.G(363049, J$.R(363041, 'this', this, false, false), 'logger'), 'warn', false)(J$.T(363057, 'meta-schema not available', 21, false));
                                J$.P(363089, J$.R(363073, 'this', this, false, false), 'errors', J$.T(363081, null, 25, false));
                                return J$.Rt(363105, J$.T(363097, true, 23, false));
                            }
                            var valid = J$.W(363145, 'valid', J$.M(363137, J$.R(363113, 'this', this, false, false), 'validate', false)(J$.R(363121, '$schema', $schema, false, false), J$.R(363129, 'schema', schema, false, false)), valid, false, false);
                            if (J$.C(24416, J$.C(24400, J$.U(78466, '!', J$.R(363153, 'valid', valid, false, false))) ? J$.R(363161, 'throwOrLogError', throwOrLogError, false, false) : J$._())) {
                                var message = J$.W(363193, 'message', J$.B(78474, '+', J$.T(363169, 'schema is invalid: ', 21, false), J$.M(363185, J$.R(363177, 'this', this, false, false), 'errorsText', false)()), message, false, false);
                                if (J$.C(24408, J$.B(78482, '==', J$.G(363217, J$.G(363209, J$.R(363201, 'this', this, false, false), '_opts'), 'validateSchema'), J$.T(363225, 'log', 21, false))))
                                    J$.M(363257, J$.G(363241, J$.R(363233, 'this', this, false, false), 'logger'), 'error', false)(J$.R(363249, 'message', message, false, false));
                                else
                                    throw J$.F(363281, J$.I(typeof Error === 'undefined' ? Error = J$.R(363265, 'Error', undefined, true, true) : Error = J$.R(363265, 'Error', Error, true, true)), true)(J$.R(363273, 'message', message, false, false));
                            }
                            return J$.Rt(363297, J$.R(363289, 'valid', valid, false, false));
                        } catch (J$e) {
                            J$.Ex(370249, J$e);
                        } finally {
                            if (J$.Fr(370257))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function defaultMeta(self) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(363553, arguments.callee, this, arguments);
                            arguments = J$.N(363561, 'arguments', arguments, true, false, false);
                            self = J$.N(363569, 'self', self, true, false, false);
                            J$.N(363577, 'meta', meta, false, false, false);
                            var meta = J$.W(363385, 'meta', J$.G(363377, J$.G(363369, J$.R(363361, 'self', self, false, false), '_opts'), 'meta'), meta, false, false);
                            J$.P(363513, J$.G(363401, J$.R(363393, 'self', self, false, false), '_opts'), 'defaultMeta', J$.C(24440, J$.B(78490, '==', J$.F(363425, J$.R(363409, '_typeof', _typeof, false, true), false)(J$.R(363417, 'meta', meta, false, false)), J$.T(363433, 'object', 21, false))) ? J$.C(24424, J$.M(363457, J$.R(363441, 'self', self, false, false), '_getId', false)(J$.R(363449, 'meta', meta, false, false))) ? J$._() : J$.R(363465, 'meta', meta, false, false) : J$.C(24432, J$.M(363489, J$.R(363473, 'self', self, false, false), 'getSchema', false)(J$.R(363481, 'META_SCHEMA_ID', META_SCHEMA_ID, false, true))) ? J$.R(363497, 'META_SCHEMA_ID', META_SCHEMA_ID, false, true) : J$.T(363505, undefined, 24, false));
                            return J$.Rt(363545, J$.G(363537, J$.G(363529, J$.R(363521, 'self', self, false, false), '_opts'), 'defaultMeta'));
                        } catch (J$e) {
                            J$.Ex(370265, J$e);
                        } finally {
                            if (J$.Fr(370273))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getSchema(keyRef) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(363793, arguments.callee, this, arguments);
                            arguments = J$.N(363801, 'arguments', arguments, true, false, false);
                            keyRef = J$.N(363809, 'keyRef', keyRef, true, false, false);
                            J$.N(363817, 'schemaObj', schemaObj, false, false, false);
                            var schemaObj = J$.W(363617, 'schemaObj', J$.F(363609, J$.R(363585, '_getSchemaObj', _getSchemaObj, false, true), false)(J$.R(363593, 'this', this, false, false), J$.R(363601, 'keyRef', keyRef, false, false)), schemaObj, false, false);
                            switch (J$.C1(24456, J$.F(363641, J$.R(363625, '_typeof', _typeof, false, true), false)(J$.R(363633, 'schemaObj', schemaObj, false, false)))) {
                            case J$.C2(24464, J$.T(363697, 'object', 21, false)):
                                return J$.Rt(363689, J$.C(24448, J$.G(363657, J$.R(363649, 'schemaObj', schemaObj, false, false), 'validate')) ? J$._() : J$.M(363681, J$.R(363665, 'this', this, false, false), '_compile', false)(J$.R(363673, 'schemaObj', schemaObj, false, false)));
                            case J$.C2(24472, J$.T(363737, 'string', 21, false)):
                                return J$.Rt(363729, J$.M(363721, J$.R(363705, 'this', this, false, false), 'getSchema', false)(J$.R(363713, 'schemaObj', schemaObj, false, false)));
                            case J$.C2(24480, J$.T(363785, 'undefined', 21, false)):
                                return J$.Rt(363777, J$.F(363769, J$.R(363745, '_getSchemaFragment', _getSchemaFragment, false, true), false)(J$.R(363753, 'this', this, false, false), J$.R(363761, 'keyRef', keyRef, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(370281, J$e);
                        } finally {
                            if (J$.Fr(370289))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _getSchemaFragment(self, ref) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(364153, arguments.callee, this, arguments);
                            arguments = J$.N(364161, 'arguments', arguments, true, false, false);
                            self = J$.N(364169, 'self', self, true, false, false);
                            ref = J$.N(364177, 'ref', ref, true, false, false);
                            J$.N(364185, 'res', res, false, false, false);
                            J$.N(364193, 'schema', schema, false, false, false);
                            J$.N(364201, 'root', root, false, false, false);
                            J$.N(364209, 'baseId', baseId, false, false, false);
                            J$.N(364217, 'v', v, false, false, false);
                            var res = J$.W(363881, 'res', J$.M(363873, J$.G(363833, J$.R(363825, 'resolve', resolve, false, true), 'schema'), 'call', false)(J$.R(363841, 'self', self, false, false), J$.T(363857, { schema: J$.T(363849, {}, 11, false) }, 11, false), J$.R(363865, 'ref', ref, false, false)), res, false, false);
                            if (J$.C(24488, J$.R(363889, 'res', res, false, false))) {
                                var schema = J$.W(363945, 'schema', J$.G(363905, J$.R(363897, 'res', res, false, false), 'schema'), schema, false, false), root = J$.W(363953, 'root', J$.G(363921, J$.R(363913, 'res', res, false, false), 'root'), root, false, false), baseId = J$.W(363961, 'baseId', J$.G(363937, J$.R(363929, 'res', res, false, false), 'baseId'), baseId, false, false);
                                var v = J$.W(364025, 'v', J$.M(364017, J$.R(363969, 'compileSchema', compileSchema, false, true), 'call', false)(J$.R(363977, 'self', self, false, false), J$.R(363985, 'schema', schema, false, false), J$.R(363993, 'root', root, false, false), J$.T(364001, undefined, 24, false), J$.R(364009, 'baseId', baseId, false, false)), v, false, false);
                                J$.P(364129, J$.G(364041, J$.R(364033, 'self', self, false, false), '_fragments'), J$.R(364049, 'ref', ref, false, false), J$.F(364121, J$.R(364057, 'SchemaObject', SchemaObject, false, true), true)(J$.T(364113, {
                                    ref: J$.R(364065, 'ref', ref, false, false),
                                    fragment: J$.T(364073, true, 23, false),
                                    schema: J$.R(364081, 'schema', schema, false, false),
                                    root: J$.R(364089, 'root', root, false, false),
                                    baseId: J$.R(364097, 'baseId', baseId, false, false),
                                    validate: J$.R(364105, 'v', v, false, false)
                                }, 11, false)));
                                return J$.Rt(364145, J$.R(364137, 'v', v, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(370297, J$e);
                        } finally {
                            if (J$.Fr(370305))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _getSchemaObj(self, keyRef) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(364361, arguments.callee, this, arguments);
                            arguments = J$.N(364369, 'arguments', arguments, true, false, false);
                            self = J$.N(364377, 'self', self, true, false, false);
                            keyRef = J$.N(364385, 'keyRef', keyRef, true, false, false);
                            keyRef = J$.W(364249, 'keyRef', J$.M(364241, J$.R(364225, 'resolve', resolve, false, true), 'normalizeId', false)(J$.R(364233, 'keyRef', keyRef, false, false)), keyRef, false, false);
                            return J$.Rt(364353, J$.C(24504, J$.C(24496, J$.G(364281, J$.G(364265, J$.R(364257, 'self', self, false, false), '_schemas'), J$.R(364273, 'keyRef', keyRef, false, false))) ? J$._() : J$.G(364313, J$.G(364297, J$.R(364289, 'self', self, false, false), '_refs'), J$.R(364305, 'keyRef', keyRef, false, false))) ? J$._() : J$.G(364345, J$.G(364329, J$.R(364321, 'self', self, false, false), '_fragments'), J$.R(364337, 'keyRef', keyRef, false, false)));
                        } catch (J$e) {
                            J$.Ex(370313, J$e);
                        } finally {
                            if (J$.Fr(370321))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function removeSchema(schemaKeyRef) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(365089, arguments.callee, this, arguments);
                            arguments = J$.N(365097, 'arguments', arguments, true, false, false);
                            schemaKeyRef = J$.N(365105, 'schemaKeyRef', schemaKeyRef, true, false, false);
                            J$.N(365113, 'schemaObj', schemaObj, false, false, false);
                            J$.N(365121, 'serialize', serialize, false, false, false);
                            J$.N(365129, 'cacheKey', cacheKey, false, false, false);
                            J$.N(365137, 'id', id, false, false, false);
                            if (J$.C(24512, J$.B(78498, 'instanceof', J$.R(364393, 'schemaKeyRef', schemaKeyRef, false, false), J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(364401, 'RegExp', undefined, true, true) : RegExp = J$.R(364401, 'RegExp', RegExp, true, true))))) {
                                J$.F(364449, J$.R(364409, '_removeAllSchemas', _removeAllSchemas, false, true), false)(J$.R(364417, 'this', this, false, false), J$.G(364433, J$.R(364425, 'this', this, false, false), '_schemas'), J$.R(364441, 'schemaKeyRef', schemaKeyRef, false, false));
                                J$.F(364497, J$.R(364457, '_removeAllSchemas', _removeAllSchemas, false, true), false)(J$.R(364465, 'this', this, false, false), J$.G(364481, J$.R(364473, 'this', this, false, false), '_refs'), J$.R(364489, 'schemaKeyRef', schemaKeyRef, false, false));
                                return J$.Rt(364513, J$.R(364505, 'this', this, false, false));
                            }
                            switch (J$.C1(24544, J$.F(364537, J$.R(364521, '_typeof', _typeof, false, true), false)(J$.R(364529, 'schemaKeyRef', schemaKeyRef, false, false)))) {
                            case J$.C2(24552, J$.T(364665, 'undefined', 21, false)):
                                J$.F(364577, J$.R(364545, '_removeAllSchemas', _removeAllSchemas, false, true), false)(J$.R(364553, 'this', this, false, false), J$.G(364569, J$.R(364561, 'this', this, false, false), '_schemas'));
                                J$.F(364617, J$.R(364585, '_removeAllSchemas', _removeAllSchemas, false, true), false)(J$.R(364593, 'this', this, false, false), J$.G(364609, J$.R(364601, 'this', this, false, false), '_refs'));
                                J$.M(364641, J$.G(364633, J$.R(364625, 'this', this, false, false), '_cache'), 'clear', false)();
                                return J$.Rt(364657, J$.R(364649, 'this', this, false, false));
                            case J$.C2(24560, J$.T(364825, 'string', 21, false)):
                                var schemaObj = J$.W(364705, 'schemaObj', J$.F(364697, J$.R(364673, '_getSchemaObj', _getSchemaObj, false, true), false)(J$.R(364681, 'this', this, false, false), J$.R(364689, 'schemaKeyRef', schemaKeyRef, false, false)), schemaObj, false, false);
                                if (J$.C(24520, J$.R(364713, 'schemaObj', schemaObj, false, false)))
                                    J$.M(364753, J$.G(364729, J$.R(364721, 'this', this, false, false), '_cache'), 'del', false)(J$.G(364745, J$.R(364737, 'schemaObj', schemaObj, false, false), 'cacheKey'));
                                J$.B(78506, 'delete', J$.G(364769, J$.R(364761, 'this', this, false, false), '_schemas'), J$.R(364777, 'schemaKeyRef', schemaKeyRef, false, false));
                                J$.B(78514, 'delete', J$.G(364793, J$.R(364785, 'this', this, false, false), '_refs'), J$.R(364801, 'schemaKeyRef', schemaKeyRef, false, false));
                                return J$.Rt(364817, J$.R(364809, 'this', this, false, false));
                            case J$.C2(24568, J$.T(365065, 'object', 21, false)):
                                var serialize = J$.W(364857, 'serialize', J$.G(364849, J$.G(364841, J$.R(364833, 'this', this, false, false), '_opts'), 'serialize'), serialize, false, false);
                                var cacheKey = J$.W(364905, 'cacheKey', J$.C(24528, J$.R(364865, 'serialize', serialize, false, false)) ? J$.F(364889, J$.R(364873, 'serialize', serialize, false, false), false)(J$.R(364881, 'schemaKeyRef', schemaKeyRef, false, false)) : J$.R(364897, 'schemaKeyRef', schemaKeyRef, false, false), cacheKey, false, false);
                                J$.M(364937, J$.G(364921, J$.R(364913, 'this', this, false, false), '_cache'), 'del', false)(J$.R(364929, 'cacheKey', cacheKey, false, false));
                                var id = J$.W(364969, 'id', J$.M(364961, J$.R(364945, 'this', this, false, false), '_getId', false)(J$.R(364953, 'schemaKeyRef', schemaKeyRef, false, false)), id, false, false);
                                if (J$.C(24536, J$.R(364977, 'id', id, false, false))) {
                                    id = J$.W(365009, 'id', J$.M(365001, J$.R(364985, 'resolve', resolve, false, true), 'normalizeId', false)(J$.R(364993, 'id', id, false, false)), id, false, false);
                                    J$.B(78522, 'delete', J$.G(365025, J$.R(365017, 'this', this, false, false), '_schemas'), J$.R(365033, 'id', id, false, false));
                                    J$.B(78530, 'delete', J$.G(365049, J$.R(365041, 'this', this, false, false), '_refs'), J$.R(365057, 'id', id, false, false));
                                }
                            }
                            return J$.Rt(365081, J$.R(365073, 'this', this, false, false));
                        } catch (J$e) {
                            J$.Ex(370329, J$e);
                        } finally {
                            if (J$.Fr(370337))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _removeAllSchemas(self, schemas, regex) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(365305, arguments.callee, this, arguments);
                            arguments = J$.N(365313, 'arguments', arguments, true, false, false);
                            self = J$.N(365321, 'self', self, true, false, false);
                            schemas = J$.N(365329, 'schemas', schemas, true, false, false);
                            regex = J$.N(365337, 'regex', regex, true, false, false);
                            J$.N(365345, 'keyRef', keyRef, false, false, false);
                            J$.N(365353, 'schemaObj', schemaObj, false, false, false);
                            for (var keyRef in J$.H(365289, J$.R(365145, 'schemas', schemas, false, false))) {
                                J$.N(365297, 'keyRef', keyRef, false, true, false);
                                {
                                    {
                                        var schemaObj = J$.W(365177, 'schemaObj', J$.G(365169, J$.R(365153, 'schemas', schemas, false, false), J$.R(365161, 'keyRef', keyRef, false, false)), schemaObj, false, false);
                                        if (J$.C(24592, J$.C(24584, J$.U(78538, '!', J$.G(365193, J$.R(365185, 'schemaObj', schemaObj, false, false), 'meta'))) ? J$.C(24576, J$.U(78546, '!', J$.R(365201, 'regex', regex, false, false))) ? J$._() : J$.M(365225, J$.R(365209, 'regex', regex, false, false), 'test', false)(J$.R(365217, 'keyRef', keyRef, false, false)) : J$._())) {
                                            J$.M(365265, J$.G(365241, J$.R(365233, 'self', self, false, false), '_cache'), 'del', false)(J$.G(365257, J$.R(365249, 'schemaObj', schemaObj, false, false), 'cacheKey'));
                                            J$.B(78554, 'delete', J$.R(365273, 'schemas', schemas, false, false), J$.R(365281, 'keyRef', keyRef, false, false));
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(370345, J$e);
                        } finally {
                            if (J$.Fr(370353))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(366169, arguments.callee, this, arguments);
                            arguments = J$.N(366177, 'arguments', arguments, true, false, false);
                            schema = J$.N(366185, 'schema', schema, true, false, false);
                            skipValidation = J$.N(366193, 'skipValidation', skipValidation, true, false, false);
                            meta = J$.N(366201, 'meta', meta, true, false, false);
                            shouldAddSchema = J$.N(366209, 'shouldAddSchema', shouldAddSchema, true, false, false);
                            J$.N(366217, 'serialize', serialize, false, false, false);
                            J$.N(366225, 'cacheKey', cacheKey, false, false, false);
                            J$.N(366233, 'cached', cached, false, false, false);
                            J$.N(366241, 'id', id, false, false, false);
                            J$.N(366249, 'willValidate', willValidate, false, false, false);
                            J$.N(366257, 'recursiveMeta', recursiveMeta, false, false, false);
                            J$.N(366265, 'localRefs', localRefs, false, false, false);
                            J$.N(366273, 'schemaObj', schemaObj, false, false, false);
                            if (J$.C(24608, J$.C(24600, J$.B(78562, '!=', J$.F(365377, J$.R(365361, '_typeof', _typeof, false, true), false)(J$.R(365369, 'schema', schema, false, false)), J$.T(365385, 'object', 21, false))) ? J$.B(78578, '!=', J$.U(78570, 'typeof', J$.R(365393, 'schema', schema, false, false)), J$.T(365401, 'boolean', 21, false)) : J$._()))
                                throw J$.F(365425, J$.I(typeof Error === 'undefined' ? Error = J$.R(365409, 'Error', undefined, true, true) : Error = J$.R(365409, 'Error', Error, true, true)), true)(J$.T(365417, 'schema should be object or boolean', 21, false));
                            var serialize = J$.W(365457, 'serialize', J$.G(365449, J$.G(365441, J$.R(365433, 'this', this, false, false), '_opts'), 'serialize'), serialize, false, false);
                            var cacheKey = J$.W(365505, 'cacheKey', J$.C(24616, J$.R(365465, 'serialize', serialize, false, false)) ? J$.F(365489, J$.R(365473, 'serialize', serialize, false, false), false)(J$.R(365481, 'schema', schema, false, false)) : J$.R(365497, 'schema', schema, false, false), cacheKey, false, false);
                            var cached = J$.W(365545, 'cached', J$.M(365537, J$.G(365521, J$.R(365513, 'this', this, false, false), '_cache'), 'get', false)(J$.R(365529, 'cacheKey', cacheKey, false, false)), cached, false, false);
                            if (J$.C(24624, J$.R(365553, 'cached', cached, false, false)))
                                return J$.Rt(365569, J$.R(365561, 'cached', cached, false, false));
                            shouldAddSchema = J$.W(365617, 'shouldAddSchema', J$.C(24632, J$.R(365577, 'shouldAddSchema', shouldAddSchema, false, false)) ? J$._() : J$.B(78586, '!==', J$.G(365601, J$.G(365593, J$.R(365585, 'this', this, false, false), '_opts'), 'addUsedSchema'), J$.T(365609, false, 23, false)), shouldAddSchema, false, false);
                            var id = J$.W(365665, 'id', J$.M(365657, J$.R(365625, 'resolve', resolve, false, true), 'normalizeId', false)(J$.M(365649, J$.R(365633, 'this', this, false, false), '_getId', false)(J$.R(365641, 'schema', schema, false, false))), id, false, false);
                            if (J$.C(24648, J$.C(24640, J$.R(365673, 'id', id, false, false)) ? J$.R(365681, 'shouldAddSchema', shouldAddSchema, false, false) : J$._()))
                                J$.F(365713, J$.R(365689, 'checkUnique', checkUnique, false, true), false)(J$.R(365697, 'this', this, false, false), J$.R(365705, 'id', id, false, false));
                            var willValidate = J$.W(365761, 'willValidate', J$.C(24656, J$.B(78594, '!==', J$.G(365737, J$.G(365729, J$.R(365721, 'this', this, false, false), '_opts'), 'validateSchema'), J$.T(365745, false, 23, false))) ? J$.U(78602, '!', J$.R(365753, 'skipValidation', skipValidation, false, false)) : J$._(), willValidate, false, false);
                            var recursiveMeta;
                            if (J$.C(24680, J$.C(24672, J$.R(365769, 'willValidate', willValidate, false, false)) ? J$.U(78618, '!', recursiveMeta = J$.W(365825, 'recursiveMeta', J$.C(24664, J$.R(365777, 'id', id, false, false)) ? J$.B(78610, '==', J$.R(365785, 'id', id, false, false), J$.M(365817, J$.R(365793, 'resolve', resolve, false, true), 'normalizeId', false)(J$.G(365809, J$.R(365801, 'schema', schema, false, false), '$schema'))) : J$._(), recursiveMeta, false, false)) : J$._()))
                                J$.M(365857, J$.R(365833, 'this', this, false, false), 'validateSchema', false)(J$.R(365841, 'schema', schema, false, false), J$.T(365849, true, 23, false));
                            var localRefs = J$.W(365905, 'localRefs', J$.M(365897, J$.G(365873, J$.R(365865, 'resolve', resolve, false, true), 'ids'), 'call', false)(J$.R(365881, 'this', this, false, false), J$.R(365889, 'schema', schema, false, false)), localRefs, false, false);
                            var schemaObj = J$.W(365977, 'schemaObj', J$.F(365969, J$.R(365913, 'SchemaObject', SchemaObject, false, true), true)(J$.T(365961, {
                                id: J$.R(365921, 'id', id, false, false),
                                schema: J$.R(365929, 'schema', schema, false, false),
                                localRefs: J$.R(365937, 'localRefs', localRefs, false, false),
                                cacheKey: J$.R(365945, 'cacheKey', cacheKey, false, false),
                                meta: J$.R(365953, 'meta', meta, false, false)
                            }, 11, false)), schemaObj, false, false);
                            if (J$.C(24696, J$.C(24688, J$.B(78626, '!=', J$.G(366001, J$.R(365985, 'id', id, false, false), J$.T(365993, 0, 22, false)), J$.T(366009, '#', 21, false))) ? J$.R(366017, 'shouldAddSchema', shouldAddSchema, false, false) : J$._()))
                                J$.P(366057, J$.G(366033, J$.R(366025, 'this', this, false, false), '_refs'), J$.R(366041, 'id', id, false, false), J$.R(366049, 'schemaObj', schemaObj, false, false));
                            J$.M(366097, J$.G(366073, J$.R(366065, 'this', this, false, false), '_cache'), 'put', false)(J$.R(366081, 'cacheKey', cacheKey, false, false), J$.R(366089, 'schemaObj', schemaObj, false, false));
                            if (J$.C(24712, J$.C(24704, J$.R(366105, 'willValidate', willValidate, false, false)) ? J$.R(366113, 'recursiveMeta', recursiveMeta, false, false) : J$._()))
                                J$.M(366145, J$.R(366121, 'this', this, false, false), 'validateSchema', false)(J$.R(366129, 'schema', schema, false, false), J$.T(366137, true, 23, false));
                            return J$.Rt(366161, J$.R(366153, 'schemaObj', schemaObj, false, false));
                        } catch (J$e) {
                            J$.Ex(370361, J$e);
                        } finally {
                            if (J$.Fr(370369))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _compile(schemaObj, root) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(367025, arguments.callee, this, arguments);
                            function callValidate() {
                                jalangiLabel16:
                                    while (true) {
                                        try {
                                            J$.Fe(366993, arguments.callee, this, arguments);
                                            arguments = J$.N(367001, 'arguments', arguments, true, false, false);
                                            J$.N(367009, '_validate', _validate, false, false, false);
                                            J$.N(367017, 'result', result, false, false, false);
                                            var _validate = J$.W(366897, '_validate', J$.G(366889, J$.R(366881, 'schemaObj', schemaObj, false, false), 'validate'), _validate, false, false);
                                            var result = J$.W(366937, 'result', J$.M(366929, J$.R(366905, '_validate', _validate, false, false), 'apply', false)(J$.R(366913, 'this', this, false, false), J$.I(typeof arguments === 'undefined' ? arguments = J$.R(366921, 'arguments', undefined, true, true) : arguments = J$.R(366921, 'arguments', arguments, true, true))), result, false, false);
                                            J$.P(366969, J$.R(366945, 'callValidate', callValidate, false, false), 'errors', J$.G(366961, J$.R(366953, '_validate', _validate, false, false), 'errors'));
                                            return J$.Rt(366985, J$.R(366977, 'result', result, false, false));
                                        } catch (J$e) {
                                            J$.Ex(370377, J$e);
                                        } finally {
                                            if (J$.Fr(370385))
                                                continue jalangiLabel16;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(367033, 'arguments', arguments, true, false, false);
                            schemaObj = J$.N(367041, 'schemaObj', schemaObj, true, false, false);
                            root = J$.N(367049, 'root', root, true, false, false);
                            J$.N(367057, 'currentOpts', currentOpts, false, false, false);
                            J$.N(367065, 'v', v, false, false, false);
                            callValidate = J$.N(367081, 'callValidate', J$.T(367073, callValidate, 12, false), true, false, false);
                            if (J$.C(24736, J$.G(366289, J$.R(366281, 'schemaObj', schemaObj, false, false), 'compiling'))) {
                                J$.P(366313, J$.R(366297, 'schemaObj', schemaObj, false, false), 'validate', J$.R(366305, 'callValidate', callValidate, false, false));
                                J$.P(366345, J$.R(366321, 'callValidate', callValidate, false, false), 'schema', J$.G(366337, J$.R(366329, 'schemaObj', schemaObj, false, false), 'schema'));
                                J$.P(366369, J$.R(366353, 'callValidate', callValidate, false, false), 'errors', J$.T(366361, null, 25, false));
                                J$.P(366409, J$.R(366377, 'callValidate', callValidate, false, false), 'root', J$.C(24720, J$.R(366385, 'root', root, false, false)) ? J$.R(366393, 'root', root, false, false) : J$.R(366401, 'callValidate', callValidate, false, false));
                                if (J$.C(24728, J$.B(78634, '===', J$.G(366433, J$.G(366425, J$.R(366417, 'schemaObj', schemaObj, false, false), 'schema'), '$async'), J$.T(366441, true, 23, false))))
                                    J$.P(366465, J$.R(366449, 'callValidate', callValidate, false, false), '$async', J$.T(366457, true, 23, false));
                                return J$.Rt(366481, J$.R(366473, 'callValidate', callValidate, false, false));
                            }
                            J$.P(366505, J$.R(366489, 'schemaObj', schemaObj, false, false), 'compiling', J$.T(366497, true, 23, false));
                            var currentOpts;
                            if (J$.C(24744, J$.G(366521, J$.R(366513, 'schemaObj', schemaObj, false, false), 'meta'))) {
                                currentOpts = J$.W(366545, 'currentOpts', J$.G(366537, J$.R(366529, 'this', this, false, false), '_opts'), currentOpts, false, false);
                                J$.P(366577, J$.R(366553, 'this', this, false, false), '_opts', J$.G(366569, J$.R(366561, 'this', this, false, false), '_metaOpts'));
                            }
                            var v;
                            try {
                                v = J$.W(366649, 'v', J$.M(366641, J$.R(366585, 'compileSchema', compileSchema, false, true), 'call', false)(J$.R(366593, 'this', this, false, false), J$.G(366609, J$.R(366601, 'schemaObj', schemaObj, false, false), 'schema'), J$.R(366617, 'root', root, false, false), J$.G(366633, J$.R(366625, 'schemaObj', schemaObj, false, false), 'localRefs')), v, false, false);
                            } catch (e) {
                                J$.N(366673, 'e', e, false, false, true);
                                J$.B(78642, 'delete', J$.R(366657, 'schemaObj', schemaObj, false, false), 'validate');
                                throw J$.R(366665, 'e', e, false, false);
                            } finally {
                                J$.P(366697, J$.R(366681, 'schemaObj', schemaObj, false, false), 'compiling', J$.T(366689, false, 23, false));
                                if (J$.C(24752, J$.G(366713, J$.R(366705, 'schemaObj', schemaObj, false, false), 'meta')))
                                    J$.P(366737, J$.R(366721, 'this', this, false, false), '_opts', J$.R(366729, 'currentOpts', currentOpts, false, false));
                            }
                            J$.P(366761, J$.R(366745, 'schemaObj', schemaObj, false, false), 'validate', J$.R(366753, 'v', v, false, false));
                            J$.P(366793, J$.R(366769, 'schemaObj', schemaObj, false, false), 'refs', J$.G(366785, J$.R(366777, 'v', v, false, false), 'refs'));
                            J$.P(366825, J$.R(366801, 'schemaObj', schemaObj, false, false), 'refVal', J$.G(366817, J$.R(366809, 'v', v, false, false), 'refVal'));
                            J$.P(366857, J$.R(366833, 'schemaObj', schemaObj, false, false), 'root', J$.G(366849, J$.R(366841, 'v', v, false, false), 'root'));
                            return J$.Rt(366873, J$.R(366865, 'v', v, false, false));
                        } catch (J$e) {
                            J$.Ex(370393, J$e);
                        } finally {
                            if (J$.Fr(370401))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function chooseGetId(opts) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(367169, arguments.callee, this, arguments);
                            arguments = J$.N(367177, 'arguments', arguments, true, false, false);
                            opts = J$.N(367185, 'opts', opts, true, false, false);
                            switch (J$.C1(24760, J$.G(367097, J$.R(367089, 'opts', opts, false, false), 'schemaId'))) {
                            case J$.C2(24768, J$.T(367121, 'auto', 21, false)):
                                return J$.Rt(367113, J$.R(367105, '_get$IdOrId', _get$IdOrId, false, true));
                            case J$.C2(24776, J$.T(367145, 'id', 21, false)):
                                return J$.Rt(367137, J$.R(367129, '_getId', _getId, false, true));
                            default:
                                return J$.Rt(367161, J$.R(367153, '_get$Id', _get$Id, false, true));
                            }
                        } catch (J$e) {
                            J$.Ex(370409, J$e);
                        } finally {
                            if (J$.Fr(370417))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _getId(schema) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(367281, arguments.callee, this, arguments);
                            arguments = J$.N(367289, 'arguments', arguments, true, false, false);
                            schema = J$.N(367297, 'schema', schema, true, false, false);
                            if (J$.C(24784, J$.G(367201, J$.R(367193, 'schema', schema, false, false), '$id')))
                                J$.M(367249, J$.G(367217, J$.R(367209, 'this', this, false, false), 'logger'), 'warn', false)(J$.T(367225, 'schema $id ignored', 21, false), J$.G(367241, J$.R(367233, 'schema', schema, false, false), '$id'));
                            return J$.Rt(367273, J$.G(367265, J$.R(367257, 'schema', schema, false, false), 'id'));
                        } catch (J$e) {
                            J$.Ex(370425, J$e);
                        } finally {
                            if (J$.Fr(370433))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _get$Id(schema) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(367393, arguments.callee, this, arguments);
                            arguments = J$.N(367401, 'arguments', arguments, true, false, false);
                            schema = J$.N(367409, 'schema', schema, true, false, false);
                            if (J$.C(24792, J$.G(367313, J$.R(367305, 'schema', schema, false, false), 'id')))
                                J$.M(367361, J$.G(367329, J$.R(367321, 'this', this, false, false), 'logger'), 'warn', false)(J$.T(367337, 'schema id ignored', 21, false), J$.G(367353, J$.R(367345, 'schema', schema, false, false), 'id'));
                            return J$.Rt(367385, J$.G(367377, J$.R(367369, 'schema', schema, false, false), '$id'));
                        } catch (J$e) {
                            J$.Ex(370441, J$e);
                        } finally {
                            if (J$.Fr(370449))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _get$IdOrId(schema) {
                jalangiLabel21:
                    while (true) {
                        try {
                            J$.Fe(367545, arguments.callee, this, arguments);
                            arguments = J$.N(367553, 'arguments', arguments, true, false, false);
                            schema = J$.N(367561, 'schema', schema, true, false, false);
                            if (J$.C(24816, J$.C(24808, J$.C(24800, J$.G(367425, J$.R(367417, 'schema', schema, false, false), '$id')) ? J$.G(367441, J$.R(367433, 'schema', schema, false, false), 'id') : J$._()) ? J$.B(78650, '!=', J$.G(367457, J$.R(367449, 'schema', schema, false, false), '$id'), J$.G(367473, J$.R(367465, 'schema', schema, false, false), 'id')) : J$._()))
                                throw J$.F(367497, J$.I(typeof Error === 'undefined' ? Error = J$.R(367481, 'Error', undefined, true, true) : Error = J$.R(367481, 'Error', Error, true, true)), true)(J$.T(367489, 'schema $id is different from id', 21, false));
                            return J$.Rt(367537, J$.C(24824, J$.G(367513, J$.R(367505, 'schema', schema, false, false), '$id')) ? J$._() : J$.G(367529, J$.R(367521, 'schema', schema, false, false), 'id'));
                        } catch (J$e) {
                            J$.Ex(370457, J$e);
                        } finally {
                            if (J$.Fr(370465))
                                continue jalangiLabel21;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function errorsText(errors, options) {
                jalangiLabel22:
                    while (true) {
                        try {
                            J$.Fe(367993, arguments.callee, this, arguments);
                            arguments = J$.N(368001, 'arguments', arguments, true, false, false);
                            errors = J$.N(368009, 'errors', errors, true, false, false);
                            options = J$.N(368017, 'options', options, true, false, false);
                            J$.N(368025, 'separator', separator, false, false, false);
                            J$.N(368033, 'dataVar', dataVar, false, false, false);
                            J$.N(368041, 'text', text, false, false, false);
                            J$.N(368049, 'i', i, false, false, false);
                            J$.N(368057, 'e', e, false, false, false);
                            errors = J$.W(367593, 'errors', J$.C(24832, J$.R(367569, 'errors', errors, false, false)) ? J$._() : J$.G(367585, J$.R(367577, 'this', this, false, false), 'errors'), errors, false, false);
                            if (J$.C(24840, J$.U(78658, '!', J$.R(367601, 'errors', errors, false, false))))
                                return J$.Rt(367617, J$.T(367609, 'No errors', 21, false));
                            options = J$.W(367641, 'options', J$.C(24848, J$.R(367625, 'options', options, false, false)) ? J$._() : J$.T(367633, {}, 11, false), options, false, false);
                            var separator = J$.W(367697, 'separator', J$.C(24856, J$.B(78666, '===', J$.G(367657, J$.R(367649, 'options', options, false, false), 'separator'), J$.T(367665, undefined, 24, false))) ? J$.T(367673, ', ', 21, false) : J$.G(367689, J$.R(367681, 'options', options, false, false), 'separator'), separator, false, false);
                            var dataVar = J$.W(367753, 'dataVar', J$.C(24864, J$.B(78674, '===', J$.G(367713, J$.R(367705, 'options', options, false, false), 'dataVar'), J$.T(367721, undefined, 24, false))) ? J$.T(367729, 'data', 21, false) : J$.G(367745, J$.R(367737, 'options', options, false, false), 'dataVar'), dataVar, false, false);
                            var text = J$.W(367769, 'text', J$.T(367761, '', 21, false), text, false, false);
                            for (var i = J$.W(367785, 'i', J$.T(367777, 0, 22, false), i, false, false); J$.C(24880, J$.B(78682, '<', J$.R(367793, 'i', i, false, false), J$.G(367809, J$.R(367801, 'errors', errors, false, false), 'length'))); J$.B(78706, '-', i = J$.W(367825, 'i', J$.B(78698, '+', J$.U(78690, '+', J$.R(367817, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var e = J$.W(367857, 'e', J$.G(367849, J$.R(367833, 'errors', errors, false, false), J$.R(367841, 'i', i, false, false)), e, false, false);
                                if (J$.C(24872, J$.R(367865, 'e', e, false, false)))
                                    text = J$.W(367937, 'text', J$.B(78746, '+', J$.R(367929, 'text', text, false, false), J$.B(78738, '+', J$.B(78730, '+', J$.B(78722, '+', J$.B(78714, '+', J$.R(367873, 'dataVar', dataVar, false, false), J$.G(367889, J$.R(367881, 'e', e, false, false), 'dataPath')), J$.T(367897, ' ', 21, false)), J$.G(367913, J$.R(367905, 'e', e, false, false), 'message')), J$.R(367921, 'separator', separator, false, false))), text, false, false);
                            }
                            return J$.Rt(367985, J$.M(367977, J$.R(367945, 'text', text, false, false), 'slice', false)(J$.T(367953, 0, 22, false), J$.U(78754, '-', J$.G(367969, J$.R(367961, 'separator', separator, false, false), 'length'))));
                        } catch (J$e) {
                            J$.Ex(370473, J$e);
                        } finally {
                            if (J$.Fr(370481))
                                continue jalangiLabel22;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addFormat(name, format) {
                jalangiLabel23:
                    while (true) {
                        try {
                            J$.Fe(368169, arguments.callee, this, arguments);
                            arguments = J$.N(368177, 'arguments', arguments, true, false, false);
                            name = J$.N(368185, 'name', name, true, false, false);
                            format = J$.N(368193, 'format', format, true, false, false);
                            if (J$.C(24888, J$.B(78770, '==', J$.U(78762, 'typeof', J$.R(368065, 'format', format, false, false)), J$.T(368073, 'string', 21, false))))
                                format = J$.W(368105, 'format', J$.F(368097, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(368081, 'RegExp', undefined, true, true) : RegExp = J$.R(368081, 'RegExp', RegExp, true, true)), true)(J$.R(368089, 'format', format, false, false)), format, false, false);
                            J$.P(368145, J$.G(368121, J$.R(368113, 'this', this, false, false), '_formats'), J$.R(368129, 'name', name, false, false), J$.R(368137, 'format', format, false, false));
                            return J$.Rt(368161, J$.R(368153, 'this', this, false, false));
                        } catch (J$e) {
                            J$.Ex(370489, J$e);
                        } finally {
                            if (J$.Fr(370497))
                                continue jalangiLabel23;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addDefaultMetaSchema(self) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(368521, arguments.callee, this, arguments);
                            arguments = J$.N(368529, 'arguments', arguments, true, false, false);
                            self = J$.N(368537, 'self', self, true, false, false);
                            J$.N(368545, '$dataSchema', $dataSchema, false, false, false);
                            J$.N(368553, 'metaSchema', metaSchema, false, false, false);
                            var $dataSchema;
                            if (J$.C(24896, J$.G(368217, J$.G(368209, J$.R(368201, 'self', self, false, false), '_opts'), '$data'))) {
                                $dataSchema = J$.W(368249, '$dataSchema', J$.F(368241, J$.I(typeof require === 'undefined' ? require = J$.R(368225, 'require', undefined, true, true) : require = J$.R(368225, 'require', require, true, true)), false)(J$.T(368233, './refs/data.json', 21, false)), $dataSchema, false, false);
                                J$.M(368297, J$.R(368257, 'self', self, false, false), 'addMetaSchema', false)(J$.R(368265, '$dataSchema', $dataSchema, false, false), J$.G(368281, J$.R(368273, '$dataSchema', $dataSchema, false, false), '$id'), J$.T(368289, true, 23, false));
                            }
                            if (J$.C(24904, J$.B(78778, '===', J$.G(368321, J$.G(368313, J$.R(368305, 'self', self, false, false), '_opts'), 'meta'), J$.T(368329, false, 23, false))))
                                return J$.Rt(368337, undefined);
                            var metaSchema = J$.W(368369, 'metaSchema', J$.F(368361, J$.I(typeof require === 'undefined' ? require = J$.R(368345, 'require', undefined, true, true) : require = J$.R(368345, 'require', require, true, true)), false)(J$.T(368353, './refs/json-schema-draft-07.json', 21, false)), metaSchema, false, false);
                            if (J$.C(24912, J$.G(368393, J$.G(368385, J$.R(368377, 'self', self, false, false), '_opts'), '$data')))
                                metaSchema = J$.W(368433, 'metaSchema', J$.F(368425, J$.R(368401, '$dataMetaSchema', $dataMetaSchema, false, true), false)(J$.R(368409, 'metaSchema', metaSchema, false, false), J$.R(368417, 'META_SUPPORT_DATA', META_SUPPORT_DATA, false, true)), metaSchema, false, false);
                            J$.M(368473, J$.R(368441, 'self', self, false, false), 'addMetaSchema', false)(J$.R(368449, 'metaSchema', metaSchema, false, false), J$.R(368457, 'META_SCHEMA_ID', META_SCHEMA_ID, false, true), J$.T(368465, true, 23, false));
                            J$.P(368513, J$.G(368489, J$.R(368481, 'self', self, false, false), '_refs'), J$.T(368497, 'http://json-schema.org/schema', 21, false), J$.R(368505, 'META_SCHEMA_ID', META_SCHEMA_ID, false, true));
                        } catch (J$e) {
                            J$.Ex(370505, J$e);
                        } finally {
                            if (J$.Fr(370513))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addInitialSchemas(self) {
                jalangiLabel25:
                    while (true) {
                        try {
                            J$.Fe(368729, arguments.callee, this, arguments);
                            arguments = J$.N(368737, 'arguments', arguments, true, false, false);
                            self = J$.N(368745, 'self', self, true, false, false);
                            J$.N(368753, 'optsSchemas', optsSchemas, false, false, false);
                            J$.N(368761, 'key', key, false, false, false);
                            var optsSchemas = J$.W(368585, 'optsSchemas', J$.G(368577, J$.G(368569, J$.R(368561, 'self', self, false, false), '_opts'), 'schemas'), optsSchemas, false, false);
                            if (J$.C(24920, J$.U(78786, '!', J$.R(368593, 'optsSchemas', optsSchemas, false, false))))
                                return J$.Rt(368601, undefined);
                            if (J$.C(24928, J$.M(368625, J$.I(typeof Array === 'undefined' ? Array = J$.R(368609, 'Array', undefined, true, true) : Array = J$.R(368609, 'Array', Array, true, true)), 'isArray', false)(J$.R(368617, 'optsSchemas', optsSchemas, false, false))))
                                J$.M(368649, J$.R(368633, 'self', self, false, false), 'addSchema', false)(J$.R(368641, 'optsSchemas', optsSchemas, false, false));
                            else
                                for (var key in J$.H(368713, J$.R(368657, 'optsSchemas', optsSchemas, false, false))) {
                                    J$.N(368721, 'key', key, false, true, false);
                                    {
                                        {
                                            J$.M(368705, J$.R(368665, 'self', self, false, false), 'addSchema', false)(J$.G(368689, J$.R(368673, 'optsSchemas', optsSchemas, false, false), J$.R(368681, 'key', key, false, false)), J$.R(368697, 'key', key, false, false));
                                        }
                                    }
                                }
                        } catch (J$e) {
                            J$.Ex(370521, J$e);
                        } finally {
                            if (J$.Fr(370529))
                                continue jalangiLabel25;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addInitialFormats(self) {
                jalangiLabel26:
                    while (true) {
                        try {
                            J$.Fe(368889, arguments.callee, this, arguments);
                            arguments = J$.N(368897, 'arguments', arguments, true, false, false);
                            self = J$.N(368905, 'self', self, true, false, false);
                            J$.N(368913, 'name', name, false, false, false);
                            J$.N(368921, 'format', format, false, false, false);
                            for (var name in J$.H(368873, J$.G(368785, J$.G(368777, J$.R(368769, 'self', self, false, false), '_opts'), 'formats'))) {
                                J$.N(368881, 'name', name, false, true, false);
                                {
                                    {
                                        var format = J$.W(368833, 'format', J$.G(368825, J$.G(368809, J$.G(368801, J$.R(368793, 'self', self, false, false), '_opts'), 'formats'), J$.R(368817, 'name', name, false, false)), format, false, false);
                                        J$.M(368865, J$.R(368841, 'self', self, false, false), 'addFormat', false)(J$.R(368849, 'name', name, false, false), J$.R(368857, 'format', format, false, false));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(370537, J$e);
                        } finally {
                            if (J$.Fr(370545))
                                continue jalangiLabel26;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function checkUnique(self, id) {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(369033, arguments.callee, this, arguments);
                            arguments = J$.N(369041, 'arguments', arguments, true, false, false);
                            self = J$.N(369049, 'self', self, true, false, false);
                            id = J$.N(369057, 'id', id, true, false, false);
                            if (J$.C(24944, J$.C(24936, J$.G(368953, J$.G(368937, J$.R(368929, 'self', self, false, false), '_schemas'), J$.R(368945, 'id', id, false, false))) ? J$._() : J$.G(368985, J$.G(368969, J$.R(368961, 'self', self, false, false), '_refs'), J$.R(368977, 'id', id, false, false))))
                                throw J$.F(369025, J$.I(typeof Error === 'undefined' ? Error = J$.R(368993, 'Error', undefined, true, true) : Error = J$.R(368993, 'Error', Error, true, true)), true)(J$.B(78802, '+', J$.B(78794, '+', J$.T(369001, 'schema with key or id "', 21, false), J$.R(369009, 'id', id, false, false)), J$.T(369017, '" already exists', 21, false)));
                        } catch (J$e) {
                            J$.Ex(370553, J$e);
                        } finally {
                            if (J$.Fr(370561))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getMetaSchemaOptions(self) {
                jalangiLabel28:
                    while (true) {
                        try {
                            J$.Fe(369209, arguments.callee, this, arguments);
                            arguments = J$.N(369217, 'arguments', arguments, true, false, false);
                            self = J$.N(369225, 'self', self, true, false, false);
                            J$.N(369233, 'metaOpts', metaOpts, false, false, false);
                            J$.N(369241, 'i', i, false, false, false);
                            var metaOpts = J$.W(369097, 'metaOpts', J$.M(369089, J$.R(369065, 'util', util, false, true), 'copy', false)(J$.G(369081, J$.R(369073, 'self', self, false, false), '_opts')), metaOpts, false, false);
                            for (var i = J$.W(369113, 'i', J$.T(369105, 0, 22, false), i, false, false); J$.C(24952, J$.B(78810, '<', J$.R(369121, 'i', i, false, false), J$.G(369137, J$.R(369129, 'META_IGNORE_OPTIONS', META_IGNORE_OPTIONS, false, true), 'length'))); J$.B(78834, '-', i = J$.W(369153, 'i', J$.B(78826, '+', J$.U(78818, '+', J$.R(369145, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.B(78842, 'delete', J$.R(369161, 'metaOpts', metaOpts, false, false), J$.G(369185, J$.R(369169, 'META_IGNORE_OPTIONS', META_IGNORE_OPTIONS, false, true), J$.R(369177, 'i', i, false, false)));
                            }
                            return J$.Rt(369201, J$.R(369193, 'metaOpts', metaOpts, false, false));
                        } catch (J$e) {
                            J$.Ex(370569, J$e);
                        } finally {
                            if (J$.Fr(370577))
                                continue jalangiLabel28;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function setLogger(self) {
                jalangiLabel29:
                    while (true) {
                        try {
                            J$.Fe(369505, arguments.callee, this, arguments);
                            arguments = J$.N(369513, 'arguments', arguments, true, false, false);
                            self = J$.N(369521, 'self', self, true, false, false);
                            J$.N(369529, 'logger', logger, false, false, false);
                            var logger = J$.W(369273, 'logger', J$.G(369265, J$.G(369257, J$.R(369249, 'self', self, false, false), '_opts'), 'logger'), logger, false, false);
                            if (J$.C(25000, J$.B(78850, '===', J$.R(369281, 'logger', logger, false, false), J$.T(369289, false, 23, false)))) {
                                J$.P(369337, J$.R(369297, 'self', self, false, false), 'logger', J$.T(369329, {
                                    log: J$.R(369305, 'noop', noop, false, true),
                                    warn: J$.R(369313, 'noop', noop, false, true),
                                    error: J$.R(369321, 'noop', noop, false, true)
                                }, 11, false));
                            } else {
                                if (J$.C(24960, J$.B(78858, '===', J$.R(369345, 'logger', logger, false, false), J$.T(369353, undefined, 24, false))))
                                    logger = J$.W(369369, 'logger', J$.I(typeof console === 'undefined' ? console = J$.R(369361, 'console', undefined, true, true) : console = J$.R(369361, 'console', console, true, true)), logger, false, false);
                                if (J$.C(24992, J$.U(78874, '!', J$.C(24984, J$.C(24976, J$.C(24968, J$.B(78866, '==', J$.F(369393, J$.R(369377, '_typeof', _typeof, false, true), false)(J$.R(369385, 'logger', logger, false, false)), J$.T(369401, 'object', 21, false))) ? J$.G(369417, J$.R(369409, 'logger', logger, false, false), 'log') : J$._()) ? J$.G(369433, J$.R(369425, 'logger', logger, false, false), 'warn') : J$._()) ? J$.G(369449, J$.R(369441, 'logger', logger, false, false), 'error') : J$._())))
                                    throw J$.F(369473, J$.I(typeof Error === 'undefined' ? Error = J$.R(369457, 'Error', undefined, true, true) : Error = J$.R(369457, 'Error', Error, true, true)), true)(J$.T(369465, 'logger must implement log, warn and error methods', 21, false));
                                J$.P(369497, J$.R(369481, 'self', self, false, false), 'logger', J$.R(369489, 'logger', logger, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(370585, J$e);
                        } finally {
                            if (J$.Fr(370593))
                                continue jalangiLabel29;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function noop() {
                jalangiLabel30:
                    while (true) {
                        try {
                            J$.Fe(369537, arguments.callee, this, arguments);
                            arguments = J$.N(369545, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(370601, J$e);
                        } finally {
                            if (J$.Fr(370609))
                                continue jalangiLabel30;
                            else
                                return J$.Ra();
                        }
                    }
            }
            _typeof = J$.N(369569, '_typeof', J$.T(369561, _typeof, 12, false), true, false, false);
            J$.N(369577, 'compileSchema', compileSchema, false, false, false);
            J$.N(369585, 'resolve', resolve, false, false, false);
            J$.N(369593, 'Cache', Cache, false, false, false);
            J$.N(369601, 'SchemaObject', SchemaObject, false, false, false);
            J$.N(369609, 'stableStringify', stableStringify, false, false, false);
            J$.N(369617, 'formats', formats, false, false, false);
            J$.N(369625, 'rules', rules, false, false, false);
            J$.N(369633, '$dataMetaSchema', $dataMetaSchema, false, false, false);
            J$.N(369641, 'util', util, false, false, false);
            J$.N(369649, 'customKeyword', customKeyword, false, false, false);
            J$.N(369657, 'errorClasses', errorClasses, false, false, false);
            J$.N(369665, 'META_SCHEMA_ID', META_SCHEMA_ID, false, false, false);
            J$.N(369673, 'META_IGNORE_OPTIONS', META_IGNORE_OPTIONS, false, false, false);
            J$.N(369681, 'META_SUPPORT_DATA', META_SUPPORT_DATA, false, false, false);
            Ajv = J$.N(369697, 'Ajv', J$.T(369689, Ajv, 12, false), true, false, false);
            validate = J$.N(369713, 'validate', J$.T(369705, validate, 12, false), true, false, false);
            compile = J$.N(369729, 'compile', J$.T(369721, compile, 12, false), true, false, false);
            addSchema = J$.N(369745, 'addSchema', J$.T(369737, addSchema, 12, false), true, false, false);
            addMetaSchema = J$.N(369761, 'addMetaSchema', J$.T(369753, addMetaSchema, 12, false), true, false, false);
            validateSchema = J$.N(369777, 'validateSchema', J$.T(369769, validateSchema, 12, false), true, false, false);
            defaultMeta = J$.N(369793, 'defaultMeta', J$.T(369785, defaultMeta, 12, false), true, false, false);
            getSchema = J$.N(369809, 'getSchema', J$.T(369801, getSchema, 12, false), true, false, false);
            _getSchemaFragment = J$.N(369825, '_getSchemaFragment', J$.T(369817, _getSchemaFragment, 12, false), true, false, false);
            _getSchemaObj = J$.N(369841, '_getSchemaObj', J$.T(369833, _getSchemaObj, 12, false), true, false, false);
            removeSchema = J$.N(369857, 'removeSchema', J$.T(369849, removeSchema, 12, false), true, false, false);
            _removeAllSchemas = J$.N(369873, '_removeAllSchemas', J$.T(369865, _removeAllSchemas, 12, false), true, false, false);
            _addSchema = J$.N(369889, '_addSchema', J$.T(369881, _addSchema, 12, false), true, false, false);
            _compile = J$.N(369905, '_compile', J$.T(369897, _compile, 12, false), true, false, false);
            chooseGetId = J$.N(369921, 'chooseGetId', J$.T(369913, chooseGetId, 12, false), true, false, false);
            _getId = J$.N(369937, '_getId', J$.T(369929, _getId, 12, false), true, false, false);
            _get$Id = J$.N(369953, '_get$Id', J$.T(369945, _get$Id, 12, false), true, false, false);
            _get$IdOrId = J$.N(369969, '_get$IdOrId', J$.T(369961, _get$IdOrId, 12, false), true, false, false);
            errorsText = J$.N(369985, 'errorsText', J$.T(369977, errorsText, 12, false), true, false, false);
            addFormat = J$.N(370001, 'addFormat', J$.T(369993, addFormat, 12, false), true, false, false);
            addDefaultMetaSchema = J$.N(370017, 'addDefaultMetaSchema', J$.T(370009, addDefaultMetaSchema, 12, false), true, false, false);
            addInitialSchemas = J$.N(370033, 'addInitialSchemas', J$.T(370025, addInitialSchemas, 12, false), true, false, false);
            addInitialFormats = J$.N(370049, 'addInitialFormats', J$.T(370041, addInitialFormats, 12, false), true, false, false);
            checkUnique = J$.N(370065, 'checkUnique', J$.T(370057, checkUnique, 12, false), true, false, false);
            getMetaSchemaOptions = J$.N(370081, 'getMetaSchemaOptions', J$.T(370073, getMetaSchemaOptions, 12, false), true, false, false);
            setLogger = J$.N(370097, 'setLogger', J$.T(370089, setLogger, 12, false), true, false, false);
            noop = J$.N(370113, 'noop', J$.T(370105, noop, 12, false), true, false, false);
            J$.T(359297, 'use strict', 21, false);
            J$.F(359321, J$.I(typeof require === 'undefined' ? require = J$.R(359305, 'require', undefined, true, true) : require = J$.R(359305, 'require', require, true, true)), false)(J$.T(359313, 'core-js/modules/es.symbol', 21, false));
            J$.F(359345, J$.I(typeof require === 'undefined' ? require = J$.R(359329, 'require', undefined, true, true) : require = J$.R(359329, 'require', require, true, true)), false)(J$.T(359337, 'core-js/modules/es.symbol.description', 21, false));
            J$.F(359369, J$.I(typeof require === 'undefined' ? require = J$.R(359353, 'require', undefined, true, true) : require = J$.R(359353, 'require', require, true, true)), false)(J$.T(359361, 'core-js/modules/es.symbol.iterator', 21, false));
            J$.F(359393, J$.I(typeof require === 'undefined' ? require = J$.R(359377, 'require', undefined, true, true) : require = J$.R(359377, 'require', require, true, true)), false)(J$.T(359385, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(359417, J$.I(typeof require === 'undefined' ? require = J$.R(359401, 'require', undefined, true, true) : require = J$.R(359401, 'require', require, true, true)), false)(J$.T(359409, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(359441, J$.I(typeof require === 'undefined' ? require = J$.R(359425, 'require', undefined, true, true) : require = J$.R(359425, 'require', require, true, true)), false)(J$.T(359433, 'core-js/modules/es.array.slice', 21, false));
            J$.F(359465, J$.I(typeof require === 'undefined' ? require = J$.R(359449, 'require', undefined, true, true) : require = J$.R(359449, 'require', require, true, true)), false)(J$.T(359457, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(359489, J$.I(typeof require === 'undefined' ? require = J$.R(359473, 'require', undefined, true, true) : require = J$.R(359473, 'require', require, true, true)), false)(J$.T(359481, 'core-js/modules/es.regexp.constructor', 21, false));
            J$.F(359513, J$.I(typeof require === 'undefined' ? require = J$.R(359497, 'require', undefined, true, true) : require = J$.R(359497, 'require', require, true, true)), false)(J$.T(359505, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(359537, J$.I(typeof require === 'undefined' ? require = J$.R(359521, 'require', undefined, true, true) : require = J$.R(359521, 'require', require, true, true)), false)(J$.T(359529, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(359561, J$.I(typeof require === 'undefined' ? require = J$.R(359545, 'require', undefined, true, true) : require = J$.R(359545, 'require', require, true, true)), false)(J$.T(359553, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(359585, J$.I(typeof require === 'undefined' ? require = J$.R(359569, 'require', undefined, true, true) : require = J$.R(359569, 'require', require, true, true)), false)(J$.T(359577, 'core-js/modules/web.dom-collections.iterator', 21, false));
            var compileSchema = J$.W(360097, 'compileSchema', J$.F(359897, J$.I(typeof require === 'undefined' ? require = J$.R(359881, 'require', undefined, true, true) : require = J$.R(359881, 'require', require, true, true)), false)(J$.T(359889, './compile', 21, false)), compileSchema, false, true), resolve = J$.W(360105, 'resolve', J$.F(359921, J$.I(typeof require === 'undefined' ? require = J$.R(359905, 'require', undefined, true, true) : require = J$.R(359905, 'require', require, true, true)), false)(J$.T(359913, './compile/resolve', 21, false)), resolve, false, true), Cache = J$.W(360113, 'Cache', J$.F(359945, J$.I(typeof require === 'undefined' ? require = J$.R(359929, 'require', undefined, true, true) : require = J$.R(359929, 'require', require, true, true)), false)(J$.T(359937, './cache', 21, false)), Cache, false, true), SchemaObject = J$.W(360121, 'SchemaObject', J$.F(359969, J$.I(typeof require === 'undefined' ? require = J$.R(359953, 'require', undefined, true, true) : require = J$.R(359953, 'require', require, true, true)), false)(J$.T(359961, './compile/schema_obj', 21, false)), SchemaObject, false, true), stableStringify = J$.W(360129, 'stableStringify', J$.F(359993, J$.I(typeof require === 'undefined' ? require = J$.R(359977, 'require', undefined, true, true) : require = J$.R(359977, 'require', require, true, true)), false)(J$.T(359985, 'fast-json-stable-stringify', 21, false)), stableStringify, false, true), formats = J$.W(360137, 'formats', J$.F(360017, J$.I(typeof require === 'undefined' ? require = J$.R(360001, 'require', undefined, true, true) : require = J$.R(360001, 'require', require, true, true)), false)(J$.T(360009, './compile/formats', 21, false)), formats, false, true), rules = J$.W(360145, 'rules', J$.F(360041, J$.I(typeof require === 'undefined' ? require = J$.R(360025, 'require', undefined, true, true) : require = J$.R(360025, 'require', require, true, true)), false)(J$.T(360033, './compile/rules', 21, false)), rules, false, true), $dataMetaSchema = J$.W(360153, '$dataMetaSchema', J$.F(360065, J$.I(typeof require === 'undefined' ? require = J$.R(360049, 'require', undefined, true, true) : require = J$.R(360049, 'require', require, true, true)), false)(J$.T(360057, './data', 21, false)), $dataMetaSchema, false, true), util = J$.W(360161, 'util', J$.F(360089, J$.I(typeof require === 'undefined' ? require = J$.R(360073, 'require', undefined, true, true) : require = J$.R(360073, 'require', require, true, true)), false)(J$.T(360081, './compile/util', 21, false)), util, false, true);
            J$.P(360185, J$.I(typeof module === 'undefined' ? module = J$.R(360169, 'module', undefined, true, true) : module = J$.R(360169, 'module', module, true, true)), 'exports', J$.R(360177, 'Ajv', Ajv, false, true));
            J$.P(360217, J$.G(360201, J$.R(360193, 'Ajv', Ajv, false, true), 'prototype'), 'validate', J$.R(360209, 'validate', validate, false, true));
            J$.P(360249, J$.G(360233, J$.R(360225, 'Ajv', Ajv, false, true), 'prototype'), 'compile', J$.R(360241, 'compile', compile, false, true));
            J$.P(360281, J$.G(360265, J$.R(360257, 'Ajv', Ajv, false, true), 'prototype'), 'addSchema', J$.R(360273, 'addSchema', addSchema, false, true));
            J$.P(360313, J$.G(360297, J$.R(360289, 'Ajv', Ajv, false, true), 'prototype'), 'addMetaSchema', J$.R(360305, 'addMetaSchema', addMetaSchema, false, true));
            J$.P(360345, J$.G(360329, J$.R(360321, 'Ajv', Ajv, false, true), 'prototype'), 'validateSchema', J$.R(360337, 'validateSchema', validateSchema, false, true));
            J$.P(360377, J$.G(360361, J$.R(360353, 'Ajv', Ajv, false, true), 'prototype'), 'getSchema', J$.R(360369, 'getSchema', getSchema, false, true));
            J$.P(360409, J$.G(360393, J$.R(360385, 'Ajv', Ajv, false, true), 'prototype'), 'removeSchema', J$.R(360401, 'removeSchema', removeSchema, false, true));
            J$.P(360441, J$.G(360425, J$.R(360417, 'Ajv', Ajv, false, true), 'prototype'), 'addFormat', J$.R(360433, 'addFormat', addFormat, false, true));
            J$.P(360473, J$.G(360457, J$.R(360449, 'Ajv', Ajv, false, true), 'prototype'), 'errorsText', J$.R(360465, 'errorsText', errorsText, false, true));
            J$.P(360505, J$.G(360489, J$.R(360481, 'Ajv', Ajv, false, true), 'prototype'), '_addSchema', J$.R(360497, '_addSchema', _addSchema, false, true));
            J$.P(360537, J$.G(360521, J$.R(360513, 'Ajv', Ajv, false, true), 'prototype'), '_compile', J$.R(360529, '_compile', _compile, false, true));
            J$.P(360585, J$.G(360553, J$.R(360545, 'Ajv', Ajv, false, true), 'prototype'), 'compileAsync', J$.F(360577, J$.I(typeof require === 'undefined' ? require = J$.R(360561, 'require', undefined, true, true) : require = J$.R(360561, 'require', require, true, true)), false)(J$.T(360569, './compile/async', 21, false)));
            var customKeyword = J$.W(360617, 'customKeyword', J$.F(360609, J$.I(typeof require === 'undefined' ? require = J$.R(360593, 'require', undefined, true, true) : require = J$.R(360593, 'require', require, true, true)), false)(J$.T(360601, './keyword', 21, false)), customKeyword, false, true);
            J$.P(360657, J$.G(360633, J$.R(360625, 'Ajv', Ajv, false, true), 'prototype'), 'addKeyword', J$.G(360649, J$.R(360641, 'customKeyword', customKeyword, false, true), 'add'));
            J$.P(360697, J$.G(360673, J$.R(360665, 'Ajv', Ajv, false, true), 'prototype'), 'getKeyword', J$.G(360689, J$.R(360681, 'customKeyword', customKeyword, false, true), 'get'));
            J$.P(360737, J$.G(360713, J$.R(360705, 'Ajv', Ajv, false, true), 'prototype'), 'removeKeyword', J$.G(360729, J$.R(360721, 'customKeyword', customKeyword, false, true), 'remove'));
            J$.P(360777, J$.G(360753, J$.R(360745, 'Ajv', Ajv, false, true), 'prototype'), 'validateKeyword', J$.G(360769, J$.R(360761, 'customKeyword', customKeyword, false, true), 'validate'));
            var errorClasses = J$.W(360809, 'errorClasses', J$.F(360801, J$.I(typeof require === 'undefined' ? require = J$.R(360785, 'require', undefined, true, true) : require = J$.R(360785, 'require', require, true, true)), false)(J$.T(360793, './compile/error_classes', 21, false)), errorClasses, false, true);
            J$.P(360841, J$.R(360817, 'Ajv', Ajv, false, true), 'ValidationError', J$.G(360833, J$.R(360825, 'errorClasses', errorClasses, false, true), 'Validation'));
            J$.P(360873, J$.R(360849, 'Ajv', Ajv, false, true), 'MissingRefError', J$.G(360865, J$.R(360857, 'errorClasses', errorClasses, false, true), 'MissingRef'));
            J$.P(360897, J$.R(360881, 'Ajv', Ajv, false, true), '$dataMetaSchema', J$.R(360889, '$dataMetaSchema', $dataMetaSchema, false, true));
            var META_SCHEMA_ID = J$.W(360913, 'META_SCHEMA_ID', J$.T(360905, 'http://json-schema.org/draft-07/schema', 21, false), META_SCHEMA_ID, false, true);
            var META_IGNORE_OPTIONS = J$.W(360961, 'META_IGNORE_OPTIONS', J$.T(360953, [
                J$.T(360921, 'removeAdditional', 21, false),
                J$.T(360929, 'useDefaults', 21, false),
                J$.T(360937, 'coerceTypes', 21, false),
                J$.T(360945, 'strictDefaults', 21, false)
            ], 10, false), META_IGNORE_OPTIONS, false, true);
            var META_SUPPORT_DATA = J$.W(360985, 'META_SUPPORT_DATA', J$.T(360977, [J$.T(360969, '/properties', 21, false)], 10, false), META_SUPPORT_DATA, false, true);
        } catch (J$e) {
            J$.Ex(370617, J$e);
        } finally {
            if (J$.Sr(370625))
                continue jalangiLabel31;
            else
                break jalangiLabel31;
        }
    }
// JALANGI DO NOT INSTRUMENT

