J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(536825, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/asynckit/lib/state.js');
            function state(list, sortMethod) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(536777, arguments.callee, this, arguments);
                            arguments = J$.N(536785, 'arguments', arguments, true, false, false);
                            list = J$.N(536793, 'list', list, true, false, false);
                            sortMethod = J$.N(536801, 'sortMethod', sortMethod, true, false, false);
                            J$.N(536809, 'isNamedList', isNamedList, false, false, false);
                            J$.N(536817, 'initState', initState, false, false, false);
                            var isNamedList = J$.W(536585, 'isNamedList', J$.U(114858, '!', J$.M(536425, J$.I(typeof Array === 'undefined' ? Array = J$.R(536409, 'Array', undefined, true, true) : Array = J$.R(536409, 'Array', Array, true, true)), 'isArray', false)(J$.R(536417, 'list', list, false, false))), isNamedList, false, false), initState = J$.W(536593, 'initState', J$.T(536577, {
                                    index: J$.T(536433, 0, 22, false),
                                    keyedList: J$.C(35496, J$.C(35488, J$.R(536441, 'isNamedList', isNamedList, false, false)) ? J$._() : J$.R(536449, 'sortMethod', sortMethod, false, false)) ? J$.M(536473, J$.I(typeof Object === 'undefined' ? Object = J$.R(536457, 'Object', undefined, true, true) : Object = J$.R(536457, 'Object', Object, true, true)), 'keys', false)(J$.R(536465, 'list', list, false, false)) : J$.T(536481, null, 25, false),
                                    jobs: J$.T(536489, {}, 11, false),
                                    results: J$.C(35504, J$.R(536497, 'isNamedList', isNamedList, false, false)) ? J$.T(536505, {}, 11, false) : J$.T(536513, [], 10, false),
                                    size: J$.C(35512, J$.R(536521, 'isNamedList', isNamedList, false, false)) ? J$.G(536553, J$.M(536545, J$.I(typeof Object === 'undefined' ? Object = J$.R(536529, 'Object', undefined, true, true) : Object = J$.R(536529, 'Object', Object, true, true)), 'keys', false)(J$.R(536537, 'list', list, false, false)), 'length') : J$.G(536569, J$.R(536561, 'list', list, false, false), 'length')
                                }, 11, false), initState, false, false);
                            if (J$.C(35528, J$.R(536601, 'sortMethod', sortMethod, false, false))) {
                                J$.M(536753, J$.G(536617, J$.R(536609, 'initState', initState, false, false), 'keyedList'), 'sort', false)(J$.C(35520, J$.R(536625, 'isNamedList', isNamedList, false, false)) ? J$.R(536633, 'sortMethod', sortMethod, false, false) : J$.T(536745, function (a, b) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(536713, arguments.callee, this, arguments);
                                                arguments = J$.N(536721, 'arguments', arguments, true, false, false);
                                                a = J$.N(536729, 'a', a, true, false, false);
                                                b = J$.N(536737, 'b', b, true, false, false);
                                                return J$.Rt(536705, J$.F(536697, J$.R(536641, 'sortMethod', sortMethod, false, false), false)(J$.G(536665, J$.R(536649, 'list', list, false, false), J$.R(536657, 'a', a, false, false)), J$.G(536689, J$.R(536673, 'list', list, false, false), J$.R(536681, 'b', b, false, false))));
                                            } catch (J$e) {
                                                J$.Ex(536849, J$e);
                                            } finally {
                                                if (J$.Fr(536857))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            }
                            return J$.Rt(536769, J$.R(536761, 'initState', initState, false, false));
                        } catch (J$e) {
                            J$.Ex(536865, J$e);
                        } finally {
                            if (J$.Fr(536873))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            state = J$.N(536841, 'state', J$.T(536833, state, 12, false), true, false, false);
            J$.T(536305, 'use strict', 21, false);
            J$.F(536329, J$.I(typeof require === 'undefined' ? require = J$.R(536313, 'require', undefined, true, true) : require = J$.R(536313, 'require', require, true, true)), false)(J$.T(536321, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(536353, J$.I(typeof require === 'undefined' ? require = J$.R(536337, 'require', undefined, true, true) : require = J$.R(536337, 'require', require, true, true)), false)(J$.T(536345, 'core-js/modules/es.array.sort', 21, false));
            J$.F(536377, J$.I(typeof require === 'undefined' ? require = J$.R(536361, 'require', undefined, true, true) : require = J$.R(536361, 'require', require, true, true)), false)(J$.T(536369, 'core-js/modules/es.object.keys', 21, false));
            J$.P(536401, J$.I(typeof module === 'undefined' ? module = J$.R(536385, 'module', undefined, true, true) : module = J$.R(536385, 'module', module, true, true)), 'exports', J$.R(536393, 'state', state, false, true));
        } catch (J$e) {
            J$.Ex(536881, J$e);
        } finally {
            if (J$.Sr(536889))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

