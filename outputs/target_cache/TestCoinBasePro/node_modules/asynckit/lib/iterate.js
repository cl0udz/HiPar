J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(533913, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/asynckit/lib/iterate.js');
            function iterate(list, iterator, state, callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(533641, arguments.callee, this, arguments);
                            arguments = J$.N(533649, 'arguments', arguments, true, false, false);
                            list = J$.N(533657, 'list', list, true, false, false);
                            iterator = J$.N(533665, 'iterator', iterator, true, false, false);
                            state = J$.N(533673, 'state', state, true, false, false);
                            callback = J$.N(533681, 'callback', callback, true, false, false);
                            J$.N(533689, 'key', key, false, false, false);
                            var key = J$.W(533337, 'key', J$.C(35400, J$.G(533265, J$.R(533249, 'state', state, false, false), J$.T(533257, 'keyedList', 21, false))) ? J$.G(533313, J$.G(533289, J$.R(533273, 'state', state, false, false), J$.T(533281, 'keyedList', 21, false)), J$.G(533305, J$.R(533297, 'state', state, false, false), 'index')) : J$.G(533329, J$.R(533321, 'state', state, false, false), 'index'), key, false, false);
                            J$.P(533633, J$.G(533353, J$.R(533345, 'state', state, false, false), 'jobs'), J$.R(533361, 'key', key, false, false), J$.F(533625, J$.R(533369, 'runJob', runJob, false, true), false)(J$.R(533377, 'iterator', iterator, false, false), J$.R(533385, 'key', key, false, false), J$.G(533409, J$.R(533393, 'list', list, false, false), J$.R(533401, 'key', key, false, false)), J$.T(533617, function (error, output) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(533585, arguments.callee, this, arguments);
                                            arguments = J$.N(533593, 'arguments', arguments, true, false, false);
                                            error = J$.N(533601, 'error', error, true, false, false);
                                            output = J$.N(533609, 'output', output, true, false, false);
                                            if (J$.C(35408, J$.U(114746, '!', J$.B(114738, 'in', J$.R(533417, 'key', key, false, false), J$.G(533433, J$.R(533425, 'state', state, false, false), 'jobs'))))) {
                                                return J$.Rt(533441, undefined);
                                            }
                                            J$.B(114754, 'delete', J$.G(533457, J$.R(533449, 'state', state, false, false), 'jobs'), J$.R(533465, 'key', key, false, false));
                                            if (J$.C(35416, J$.R(533473, 'error', error, false, false))) {
                                                J$.F(533497, J$.R(533481, 'abort', abort, false, true), false)(J$.R(533489, 'state', state, false, false));
                                            } else {
                                                J$.P(533537, J$.G(533513, J$.R(533505, 'state', state, false, false), 'results'), J$.R(533521, 'key', key, false, false), J$.R(533529, 'output', output, false, false));
                                            }
                                            J$.F(533577, J$.R(533545, 'callback', callback, false, false), false)(J$.R(533553, 'error', error, false, false), J$.G(533569, J$.R(533561, 'state', state, false, false), 'results'));
                                        } catch (J$e) {
                                            J$.Ex(533969, J$e);
                                        } finally {
                                            if (J$.Fr(533977))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(533985, J$e);
                        } finally {
                            if (J$.Fr(533993))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function runJob(iterator, key, item, callback) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(533857, arguments.callee, this, arguments);
                            arguments = J$.N(533865, 'arguments', arguments, true, false, false);
                            iterator = J$.N(533873, 'iterator', iterator, true, false, false);
                            key = J$.N(533881, 'key', key, true, false, false);
                            item = J$.N(533889, 'item', item, true, false, false);
                            callback = J$.N(533897, 'callback', callback, true, false, false);
                            J$.N(533905, 'aborter', aborter, false, false, false);
                            var aborter;
                            if (J$.C(35424, J$.B(114762, '==', J$.G(533705, J$.R(533697, 'iterator', iterator, false, false), 'length'), J$.T(533713, 2, 22, false)))) {
                                aborter = J$.W(533769, 'aborter', J$.F(533761, J$.R(533721, 'iterator', iterator, false, false), false)(J$.R(533729, 'item', item, false, false), J$.F(533753, J$.R(533737, 'async', async, false, true), false)(J$.R(533745, 'callback', callback, false, false))), aborter, false, false);
                            } else {
                                aborter = J$.W(533833, 'aborter', J$.F(533825, J$.R(533777, 'iterator', iterator, false, false), false)(J$.R(533785, 'item', item, false, false), J$.R(533793, 'key', key, false, false), J$.F(533817, J$.R(533801, 'async', async, false, true), false)(J$.R(533809, 'callback', callback, false, false))), aborter, false, false);
                            }
                            return J$.Rt(533849, J$.R(533841, 'aborter', aborter, false, false));
                        } catch (J$e) {
                            J$.Ex(534001, J$e);
                        } finally {
                            if (J$.Fr(534009))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(533921, 'async', async, false, false, false);
            J$.N(533929, 'abort', abort, false, false, false);
            iterate = J$.N(533945, 'iterate', J$.T(533937, iterate, 12, false), true, false, false);
            runJob = J$.N(533961, 'runJob', J$.T(533953, runJob, 12, false), true, false, false);
            J$.T(533153, 'use strict', 21, false);
            var async = J$.W(533209, 'async', J$.F(533177, J$.I(typeof require === 'undefined' ? require = J$.R(533161, 'require', undefined, true, true) : require = J$.R(533161, 'require', require, true, true)), false)(J$.T(533169, './async.js', 21, false)), async, false, true), abort = J$.W(533217, 'abort', J$.F(533201, J$.I(typeof require === 'undefined' ? require = J$.R(533185, 'require', undefined, true, true) : require = J$.R(533185, 'require', require, true, true)), false)(J$.T(533193, './abort.js', 21, false)), abort, false, true);
            J$.P(533241, J$.I(typeof module === 'undefined' ? module = J$.R(533225, 'module', undefined, true, true) : module = J$.R(533225, 'module', module, true, true)), 'exports', J$.R(533233, 'iterate', iterate, false, true));
        } catch (J$e) {
            J$.Ex(534017, J$e);
        } finally {
            if (J$.Sr(534025))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

