J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(2074025, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/uuid/lib/v35.js');
            function uuidToBytes(uuid) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2072913, arguments.callee, this, arguments);
                            arguments = J$.N(2072921, 'arguments', arguments, true, false, false);
                            uuid = J$.N(2072929, 'uuid', uuid, true, false, false);
                            J$.N(2072937, 'bytes', bytes, false, false, false);
                            var bytes = J$.W(2072785, 'bytes', J$.T(2072777, [], 10, false), bytes, false, false);
                            J$.M(2072889, J$.R(2072793, 'uuid', uuid, false, false), 'replace', false)(J$.T(2072801, /[a-fA-F0-9]{2}/g, 14, false), J$.T(2072881, function (hex) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2072857, arguments.callee, this, arguments);
                                            arguments = J$.N(2072865, 'arguments', arguments, true, false, false);
                                            hex = J$.N(2072873, 'hex', hex, true, false, false);
                                            J$.M(2072849, J$.R(2072809, 'bytes', bytes, false, false), 'push', false)(J$.F(2072841, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(2072817, 'parseInt', undefined, true, true) : parseInt = J$.R(2072817, 'parseInt', parseInt, true, true)), false)(J$.R(2072825, 'hex', hex, false, false), J$.T(2072833, 16, 22, false)));
                                        } catch (J$e) {
                                            J$.Ex(2074073, J$e);
                                        } finally {
                                            if (J$.Fr(2074081))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(2072905, J$.R(2072897, 'bytes', bytes, false, false));
                        } catch (J$e) {
                            J$.Ex(2074089, J$e);
                        } finally {
                            if (J$.Fr(2074097))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function stringToBytes(str) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2073153, arguments.callee, this, arguments);
                            arguments = J$.N(2073161, 'arguments', arguments, true, false, false);
                            str = J$.N(2073169, 'str', str, true, false, false);
                            J$.N(2073177, 'bytes', bytes, false, false, false);
                            J$.N(2073185, 'i', i, false, false, false);
                            str = J$.W(2072985, 'str', J$.F(2072977, J$.I(typeof unescape === 'undefined' ? unescape = J$.R(2072945, 'unescape', undefined, true, true) : unescape = J$.R(2072945, 'unescape', unescape, true, true)), false)(J$.F(2072969, J$.I(typeof encodeURIComponent === 'undefined' ? encodeURIComponent = J$.R(2072953, 'encodeURIComponent', undefined, true, true) : encodeURIComponent = J$.R(2072953, 'encodeURIComponent', encodeURIComponent, true, true)), false)(J$.R(2072961, 'str', str, false, false))), str, false, false);
                            var bytes = J$.W(2073025, 'bytes', J$.F(2073017, J$.I(typeof Array === 'undefined' ? Array = J$.R(2072993, 'Array', undefined, true, true) : Array = J$.R(2072993, 'Array', Array, true, true)), true)(J$.G(2073009, J$.R(2073001, 'str', str, false, false), 'length')), bytes, false, false);
                            for (var i = J$.W(2073041, 'i', J$.T(2073033, 0, 22, false), i, false, false); J$.C(97136, J$.B(280762, '<', J$.R(2073049, 'i', i, false, false), J$.G(2073065, J$.R(2073057, 'str', str, false, false), 'length'))); J$.B(280786, '-', i = J$.W(2073081, 'i', J$.B(280778, '+', J$.U(280770, '+', J$.R(2073073, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(2073129, J$.R(2073089, 'bytes', bytes, false, false), J$.R(2073097, 'i', i, false, false), J$.M(2073121, J$.R(2073105, 'str', str, false, false), 'charCodeAt', false)(J$.R(2073113, 'i', i, false, false)));
                            }
                            return J$.Rt(2073145, J$.R(2073137, 'bytes', bytes, false, false));
                        } catch (J$e) {
                            J$.Ex(2074105, J$e);
                        } finally {
                            if (J$.Fr(2074113))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2074033, 'bytesToUuid', bytesToUuid, false, false, false);
            uuidToBytes = J$.N(2074049, 'uuidToBytes', J$.T(2074041, uuidToBytes, 12, false), true, false, false);
            stringToBytes = J$.N(2074065, 'stringToBytes', J$.T(2074057, stringToBytes, 12, false), true, false, false);
            J$.T(2072593, 'use strict', 21, false);
            J$.F(2072617, J$.I(typeof require === 'undefined' ? require = J$.R(2072601, 'require', undefined, true, true) : require = J$.R(2072601, 'require', require, true, true)), false)(J$.T(2072609, 'core-js/modules/es.array.concat', 21, false));
            J$.F(2072641, J$.I(typeof require === 'undefined' ? require = J$.R(2072625, 'require', undefined, true, true) : require = J$.R(2072625, 'require', require, true, true)), false)(J$.T(2072633, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(2072665, J$.I(typeof require === 'undefined' ? require = J$.R(2072649, 'require', undefined, true, true) : require = J$.R(2072649, 'require', require, true, true)), false)(J$.T(2072657, 'core-js/modules/es.function.name', 21, false));
            J$.F(2072689, J$.I(typeof require === 'undefined' ? require = J$.R(2072673, 'require', undefined, true, true) : require = J$.R(2072673, 'require', require, true, true)), false)(J$.T(2072681, 'core-js/modules/es.parse-int', 21, false));
            J$.F(2072713, J$.I(typeof require === 'undefined' ? require = J$.R(2072697, 'require', undefined, true, true) : require = J$.R(2072697, 'require', require, true, true)), false)(J$.T(2072705, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(2072737, J$.I(typeof require === 'undefined' ? require = J$.R(2072721, 'require', undefined, true, true) : require = J$.R(2072721, 'require', require, true, true)), false)(J$.T(2072729, 'core-js/modules/es.string.replace', 21, false));
            var bytesToUuid = J$.W(2072769, 'bytesToUuid', J$.F(2072761, J$.I(typeof require === 'undefined' ? require = J$.R(2072745, 'require', undefined, true, true) : require = J$.R(2072745, 'require', require, true, true)), false)(J$.T(2072753, './bytesToUuid', 21, false)), bytesToUuid, false, true);
            J$.P(2074017, J$.I(typeof module === 'undefined' ? module = J$.R(2073193, 'module', undefined, true, true) : module = J$.R(2073193, 'module', module, true, true)), 'exports', J$.T(2074009, function (name, version, hashfunc) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2073961, arguments.callee, this, arguments);
                            arguments = J$.N(2073969, 'arguments', arguments, true, false, false);
                            name = J$.N(2073977, 'name', name, true, false, false);
                            version = J$.N(2073985, 'version', version, true, false, false);
                            hashfunc = J$.N(2073993, 'hashfunc', hashfunc, true, false, false);
                            J$.N(2074001, 'generateUUID', generateUUID, false, false, false);
                            var generateUUID = J$.W(2073857, 'generateUUID', J$.T(2073849, function generateUUID(value, namespace, buf, offset) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(2073777, arguments.callee, this, arguments);
                                            arguments = J$.N(2073785, 'arguments', arguments, true, false, false);
                                            value = J$.N(2073793, 'value', value, true, false, false);
                                            namespace = J$.N(2073801, 'namespace', namespace, true, false, false);
                                            buf = J$.N(2073809, 'buf', buf, true, false, false);
                                            offset = J$.N(2073817, 'offset', offset, true, false, false);
                                            J$.N(2073825, 'off', off, false, false, false);
                                            J$.N(2073833, 'bytes', bytes, false, false, false);
                                            J$.N(2073841, 'idx', idx, false, false, false);
                                            var off = J$.W(2073225, 'off', J$.C(97152, J$.C(97144, J$.R(2073201, 'buf', buf, false, false)) ? J$.R(2073209, 'offset', offset, false, false) : J$._()) ? J$._() : J$.T(2073217, 0, 22, false), off, false, false);
                                            if (J$.C(97160, J$.B(280802, '==', J$.U(280794, 'typeof', J$.R(2073233, 'value', value, false, false)), J$.T(2073241, 'string', 21, false))))
                                                value = J$.W(2073273, 'value', J$.F(2073265, J$.R(2073249, 'stringToBytes', stringToBytes, false, true), false)(J$.R(2073257, 'value', value, false, false)), value, false, false);
                                            if (J$.C(97168, J$.B(280818, '==', J$.U(280810, 'typeof', J$.R(2073281, 'namespace', namespace, false, false)), J$.T(2073289, 'string', 21, false))))
                                                namespace = J$.W(2073321, 'namespace', J$.F(2073313, J$.R(2073297, 'uuidToBytes', uuidToBytes, false, true), false)(J$.R(2073305, 'namespace', namespace, false, false)), namespace, false, false);
                                            if (J$.C(97176, J$.U(280826, '!', J$.M(2073345, J$.I(typeof Array === 'undefined' ? Array = J$.R(2073329, 'Array', undefined, true, true) : Array = J$.R(2073329, 'Array', Array, true, true)), 'isArray', false)(J$.R(2073337, 'value', value, false, false)))))
                                                throw J$.F(2073369, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(2073353, 'TypeError', undefined, true, true) : TypeError = J$.R(2073353, 'TypeError', TypeError, true, true)), false)(J$.T(2073361, 'value must be an array of bytes', 21, false));
                                            if (J$.C(97192, J$.C(97184, J$.U(280834, '!', J$.M(2073393, J$.I(typeof Array === 'undefined' ? Array = J$.R(2073377, 'Array', undefined, true, true) : Array = J$.R(2073377, 'Array', Array, true, true)), 'isArray', false)(J$.R(2073385, 'namespace', namespace, false, false)))) ? J$._() : J$.B(280842, '!==', J$.G(2073409, J$.R(2073401, 'namespace', namespace, false, false), 'length'), J$.T(2073417, 16, 22, false))))
                                                throw J$.F(2073441, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(2073425, 'TypeError', undefined, true, true) : TypeError = J$.R(2073425, 'TypeError', TypeError, true, true)), false)(J$.T(2073433, 'namespace must be uuid string or an Array of 16 byte values', 21, false));
                                            var bytes = J$.W(2073489, 'bytes', J$.F(2073481, J$.R(2073449, 'hashfunc', hashfunc, false, false), false)(J$.M(2073473, J$.R(2073457, 'namespace', namespace, false, false), 'concat', false)(J$.R(2073465, 'value', value, false, false))), bytes, false, false);
                                            J$.P(2073553, J$.R(2073497, 'bytes', bytes, false, false), J$.T(2073505, 6, 22, false), J$.B(280858, '|', J$.B(280850, '&', J$.G(2073529, J$.R(2073513, 'bytes', bytes, false, false), J$.T(2073521, 6, 22, false)), J$.T(2073537, 15, 22, false)), J$.R(2073545, 'version', version, false, false)));
                                            J$.P(2073617, J$.R(2073561, 'bytes', bytes, false, false), J$.T(2073569, 8, 22, false), J$.B(280874, '|', J$.B(280866, '&', J$.G(2073593, J$.R(2073577, 'bytes', bytes, false, false), J$.T(2073585, 8, 22, false)), J$.T(2073601, 63, 22, false)), J$.T(2073609, 128, 22, false)));
                                            if (J$.C(97208, J$.R(2073625, 'buf', buf, false, false))) {
                                                for (var idx = J$.W(2073641, 'idx', J$.T(2073633, 0, 22, false), idx, false, false); J$.C(97200, J$.B(280882, '<', J$.R(2073649, 'idx', idx, false, false), J$.T(2073657, 16, 22, false))); idx = J$.W(2073673, 'idx', J$.B(280898, '+', J$.U(280890, '+', J$.R(2073665, 'idx', idx, false, false)), 1), idx, false, false)) {
                                                    J$.P(2073729, J$.R(2073681, 'buf', buf, false, false), J$.B(280906, '+', J$.R(2073689, 'off', off, false, false), J$.R(2073697, 'idx', idx, false, false)), J$.G(2073721, J$.R(2073705, 'bytes', bytes, false, false), J$.R(2073713, 'idx', idx, false, false)));
                                                }
                                            }
                                            return J$.Rt(2073769, J$.C(97216, J$.R(2073737, 'buf', buf, false, false)) ? J$._() : J$.F(2073761, J$.R(2073745, 'bytesToUuid', bytesToUuid, false, true), false)(J$.R(2073753, 'bytes', bytes, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(2074121, J$e);
                                        } finally {
                                            if (J$.Fr(2074129))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), generateUUID, false, false);
                            try {
                                J$.P(2073881, J$.R(2073865, 'generateUUID', generateUUID, false, false), 'name', J$.R(2073873, 'name', name, false, false));
                            } catch (err) {
                                J$.N(2073889, 'err', err, false, false, true);
                            }
                            J$.P(2073913, J$.R(2073897, 'generateUUID', generateUUID, false, false), 'DNS', J$.T(2073905, '6ba7b810-9dad-11d1-80b4-00c04fd430c8', 21, false));
                            J$.P(2073937, J$.R(2073921, 'generateUUID', generateUUID, false, false), 'URL', J$.T(2073929, '6ba7b811-9dad-11d1-80b4-00c04fd430c8', 21, false));
                            return J$.Rt(2073953, J$.R(2073945, 'generateUUID', generateUUID, false, false));
                        } catch (J$e) {
                            J$.Ex(2074137, J$e);
                        } finally {
                            if (J$.Fr(2074145))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(2074153, J$e);
        } finally {
            if (J$.Sr(2074161))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

