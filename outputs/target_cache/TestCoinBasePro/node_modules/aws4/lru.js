J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(555481, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/aws4/lru.js');
            function LruCache(size) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(553713, arguments.callee, this, arguments);
                            arguments = J$.N(553721, 'arguments', arguments, true, false, false);
                            size = J$.N(553729, 'size', size, true, false, false);
                            J$.P(553633, J$.R(553609, 'this', this, false, false), 'capacity', J$.B(115802, '|', J$.R(553617, 'size', size, false, false), J$.T(553625, 0, 22, false)));
                            J$.P(553673, J$.R(553641, 'this', this, false, false), 'map', J$.M(553665, J$.I(typeof Object === 'undefined' ? Object = J$.R(553649, 'Object', undefined, true, true) : Object = J$.R(553649, 'Object', Object, true, true)), 'create', false)(J$.T(553657, null, 25, false)));
                            J$.P(553705, J$.R(553681, 'this', this, false, false), 'list', J$.F(553697, J$.R(553689, 'DoublyLinkedList', DoublyLinkedList, false, true), true)());
                        } catch (J$e) {
                            J$.Ex(555553, J$e);
                        } finally {
                            if (J$.Fr(555561))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function DoublyLinkedList() {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(554561, arguments.callee, this, arguments);
                            arguments = J$.N(554569, 'arguments', arguments, true, false, false);
                            J$.P(554529, J$.R(554513, 'this', this, false, false), 'firstNode', J$.T(554521, null, 25, false));
                            J$.P(554553, J$.R(554537, 'this', this, false, false), 'lastNode', J$.T(554545, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(555633, J$e);
                        } finally {
                            if (J$.Fr(555641))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function DoublyLinkedNode(key, val) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(555449, arguments.callee, this, arguments);
                            arguments = J$.N(555457, 'arguments', arguments, true, false, false);
                            key = J$.N(555465, 'key', key, true, false, false);
                            val = J$.N(555473, 'val', val, true, false, false);
                            J$.P(555369, J$.R(555353, 'this', this, false, false), 'key', J$.R(555361, 'key', key, false, false));
                            J$.P(555393, J$.R(555377, 'this', this, false, false), 'val', J$.R(555385, 'val', val, false, false));
                            J$.P(555417, J$.R(555401, 'this', this, false, false), 'prev', J$.T(555409, null, 25, false));
                            J$.P(555441, J$.R(555425, 'this', this, false, false), 'next', J$.T(555433, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(555697, J$e);
                        } finally {
                            if (J$.Fr(555705))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            LruCache = J$.N(555497, 'LruCache', J$.T(555489, LruCache, 12, false), true, false, false);
            DoublyLinkedList = J$.N(555513, 'DoublyLinkedList', J$.T(555505, DoublyLinkedList, 12, false), true, false, false);
            DoublyLinkedNode = J$.N(555529, 'DoublyLinkedNode', J$.T(555521, DoublyLinkedNode, 12, false), true, false, false);
            J$.T(553473, 'use strict', 21, false);
            J$.F(553497, J$.I(typeof require === 'undefined' ? require = J$.R(553481, 'require', undefined, true, true) : require = J$.R(553481, 'require', require, true, true)), false)(J$.T(553489, 'core-js/modules/es.array.map', 21, false));
            J$.F(553521, J$.I(typeof require === 'undefined' ? require = J$.R(553505, 'require', undefined, true, true) : require = J$.R(553505, 'require', require, true, true)), false)(J$.T(553513, 'core-js/modules/es.object.create', 21, false));
            J$.P(553601, J$.I(typeof module === 'undefined' ? module = J$.R(553529, 'module', undefined, true, true) : module = J$.R(553529, 'module', module, true, true)), 'exports', J$.T(553593, function (size) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(553569, arguments.callee, this, arguments);
                            arguments = J$.N(553577, 'arguments', arguments, true, false, false);
                            size = J$.N(553585, 'size', size, true, false, false);
                            return J$.Rt(553561, J$.F(553553, J$.R(553537, 'LruCache', LruCache, false, true), true)(J$.R(553545, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(555537, J$e);
                        } finally {
                            if (J$.Fr(555545))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(553913, J$.G(553745, J$.R(553737, 'LruCache', LruCache, false, true), 'prototype'), 'get', J$.T(553905, function (key) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(553873, arguments.callee, this, arguments);
                            arguments = J$.N(553881, 'arguments', arguments, true, false, false);
                            key = J$.N(553889, 'key', key, true, false, false);
                            J$.N(553897, 'node', node, false, false, false);
                            var node = J$.W(553785, 'node', J$.G(553777, J$.G(553761, J$.R(553753, 'this', this, false, false), 'map'), J$.R(553769, 'key', key, false, false)), node, false, false);
                            if (J$.C(36480, J$.B(115810, '==', J$.R(553793, 'node', node, false, false), J$.T(553801, null, 25, false))))
                                return J$.Rt(553817, J$.T(553809, undefined, 24, false));
                            J$.M(553841, J$.R(553825, 'this', this, false, false), 'used', false)(J$.R(553833, 'node', node, false, false));
                            return J$.Rt(553865, J$.G(553857, J$.R(553849, 'node', node, false, false), 'val'));
                        } catch (J$e) {
                            J$.Ex(555569, J$e);
                        } finally {
                            if (J$.Fr(555577))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(554265, J$.G(553929, J$.R(553921, 'LruCache', LruCache, false, true), 'prototype'), 'set', J$.T(554257, function (key, val) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(554217, arguments.callee, this, arguments);
                            arguments = J$.N(554225, 'arguments', arguments, true, false, false);
                            key = J$.N(554233, 'key', key, true, false, false);
                            val = J$.N(554241, 'val', val, true, false, false);
                            J$.N(554249, 'node', node, false, false, false);
                            var node = J$.W(553969, 'node', J$.G(553961, J$.G(553945, J$.R(553937, 'this', this, false, false), 'map'), J$.R(553953, 'key', key, false, false)), node, false, false);
                            if (J$.C(36504, J$.B(115818, '!=', J$.R(553977, 'node', node, false, false), J$.T(553985, null, 25, false)))) {
                                J$.P(554009, J$.R(553993, 'node', node, false, false), 'val', J$.R(554001, 'val', val, false, false));
                            } else {
                                if (J$.C(36488, J$.U(115826, '!', J$.G(554025, J$.R(554017, 'this', this, false, false), 'capacity'))))
                                    J$.M(554041, J$.R(554033, 'this', this, false, false), 'prune', false)();
                                if (J$.C(36496, J$.U(115834, '!', J$.G(554057, J$.R(554049, 'this', this, false, false), 'capacity'))))
                                    return J$.Rt(554073, J$.T(554065, false, 23, false));
                                node = J$.W(554113, 'node', J$.F(554105, J$.R(554081, 'DoublyLinkedNode', DoublyLinkedNode, false, true), true)(J$.R(554089, 'key', key, false, false), J$.R(554097, 'val', val, false, false)), node, false, false);
                                J$.P(554153, J$.G(554129, J$.R(554121, 'this', this, false, false), 'map'), J$.R(554137, 'key', key, false, false), J$.R(554145, 'node', node, false, false));
                                J$.B(115842, '+', J$.A(554169, J$.R(554161, 'this', this, false, false), 'capacity', '-')(1), 1);
                            }
                            J$.M(554193, J$.R(554177, 'this', this, false, false), 'used', false)(J$.R(554185, 'node', node, false, false));
                            return J$.Rt(554209, J$.T(554201, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(555585, J$e);
                        } finally {
                            if (J$.Fr(555593))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(554353, J$.G(554281, J$.R(554273, 'LruCache', LruCache, false, true), 'prototype'), 'used', J$.T(554345, function (node) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(554321, arguments.callee, this, arguments);
                            arguments = J$.N(554329, 'arguments', arguments, true, false, false);
                            node = J$.N(554337, 'node', node, true, false, false);
                            J$.M(554313, J$.G(554297, J$.R(554289, 'this', this, false, false), 'list'), 'moveToFront', false)(J$.R(554305, 'node', node, false, false));
                        } catch (J$e) {
                            J$.Ex(555601, J$e);
                        } finally {
                            if (J$.Fr(555609))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(554505, J$.G(554369, J$.R(554361, 'LruCache', LruCache, false, true), 'prototype'), 'prune', J$.T(554497, function () {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(554473, arguments.callee, this, arguments);
                            arguments = J$.N(554481, 'arguments', arguments, true, false, false);
                            J$.N(554489, 'node', node, false, false, false);
                            var node = J$.W(554401, 'node', J$.M(554393, J$.G(554385, J$.R(554377, 'this', this, false, false), 'list'), 'pop', false)(), node, false, false);
                            if (J$.C(36512, J$.B(115850, '!=', J$.R(554409, 'node', node, false, false), J$.T(554417, null, 25, false)))) {
                                J$.B(115858, 'delete', J$.G(554433, J$.R(554425, 'this', this, false, false), 'map'), J$.G(554449, J$.R(554441, 'node', node, false, false), 'key'));
                                J$.B(115866, '-', J$.A(554465, J$.R(554457, 'this', this, false, false), 'capacity', '+')(1), 1);
                            }
                        } catch (J$e) {
                            J$.Ex(555617, J$e);
                        } finally {
                            if (J$.Fr(555625))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(554913, J$.G(554585, J$.R(554577, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'moveToFront', J$.T(554905, function (node) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(554881, arguments.callee, this, arguments);
                            arguments = J$.N(554889, 'arguments', arguments, true, false, false);
                            node = J$.N(554897, 'node', node, true, false, false);
                            if (J$.C(36520, J$.B(115874, '==', J$.G(554601, J$.R(554593, 'this', this, false, false), 'firstNode'), J$.R(554609, 'node', node, false, false))))
                                return J$.Rt(554617, undefined);
                            J$.M(554641, J$.R(554625, 'this', this, false, false), 'remove', false)(J$.R(554633, 'node', node, false, false));
                            if (J$.C(36528, J$.B(115882, '==', J$.G(554657, J$.R(554649, 'this', this, false, false), 'firstNode'), J$.T(554665, null, 25, false)))) {
                                J$.P(554689, J$.R(554673, 'this', this, false, false), 'firstNode', J$.R(554681, 'node', node, false, false));
                                J$.P(554713, J$.R(554697, 'this', this, false, false), 'lastNode', J$.R(554705, 'node', node, false, false));
                                J$.P(554737, J$.R(554721, 'node', node, false, false), 'prev', J$.T(554729, null, 25, false));
                                J$.P(554761, J$.R(554745, 'node', node, false, false), 'next', J$.T(554753, null, 25, false));
                            } else {
                                J$.P(554785, J$.R(554769, 'node', node, false, false), 'prev', J$.T(554777, null, 25, false));
                                J$.P(554817, J$.R(554793, 'node', node, false, false), 'next', J$.G(554809, J$.R(554801, 'this', this, false, false), 'firstNode'));
                                J$.P(554849, J$.G(554833, J$.R(554825, 'node', node, false, false), 'next'), 'prev', J$.R(554841, 'node', node, false, false));
                                J$.P(554873, J$.R(554857, 'this', this, false, false), 'firstNode', J$.R(554865, 'node', node, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(555649, J$e);
                        } finally {
                            if (J$.Fr(555657))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(555049, J$.G(554929, J$.R(554921, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'pop', J$.T(555041, function () {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(555017, arguments.callee, this, arguments);
                            arguments = J$.N(555025, 'arguments', arguments, true, false, false);
                            J$.N(555033, 'lastNode', lastNode, false, false, false);
                            var lastNode = J$.W(554953, 'lastNode', J$.G(554945, J$.R(554937, 'this', this, false, false), 'lastNode'), lastNode, false, false);
                            if (J$.C(36536, J$.B(115890, '!=', J$.R(554961, 'lastNode', lastNode, false, false), J$.T(554969, null, 25, false)))) {
                                J$.M(554993, J$.R(554977, 'this', this, false, false), 'remove', false)(J$.R(554985, 'lastNode', lastNode, false, false));
                            }
                            return J$.Rt(555009, J$.R(555001, 'lastNode', lastNode, false, false));
                        } catch (J$e) {
                            J$.Ex(555665, J$e);
                        } finally {
                            if (J$.Fr(555673))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(555345, J$.G(555065, J$.R(555057, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'remove', J$.T(555337, function (node) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(555313, arguments.callee, this, arguments);
                            arguments = J$.N(555321, 'arguments', arguments, true, false, false);
                            node = J$.N(555329, 'node', node, true, false, false);
                            if (J$.C(36552, J$.B(115898, '==', J$.G(555081, J$.R(555073, 'this', this, false, false), 'firstNode'), J$.R(555089, 'node', node, false, false)))) {
                                J$.P(555121, J$.R(555097, 'this', this, false, false), 'firstNode', J$.G(555113, J$.R(555105, 'node', node, false, false), 'next'));
                            } else if (J$.C(36544, J$.B(115906, '!=', J$.G(555137, J$.R(555129, 'node', node, false, false), 'prev'), J$.T(555145, null, 25, false)))) {
                                J$.P(555185, J$.G(555161, J$.R(555153, 'node', node, false, false), 'prev'), 'next', J$.G(555177, J$.R(555169, 'node', node, false, false), 'next'));
                            }
                            if (J$.C(36568, J$.B(115914, '==', J$.G(555201, J$.R(555193, 'this', this, false, false), 'lastNode'), J$.R(555209, 'node', node, false, false)))) {
                                J$.P(555241, J$.R(555217, 'this', this, false, false), 'lastNode', J$.G(555233, J$.R(555225, 'node', node, false, false), 'prev'));
                            } else if (J$.C(36560, J$.B(115922, '!=', J$.G(555257, J$.R(555249, 'node', node, false, false), 'next'), J$.T(555265, null, 25, false)))) {
                                J$.P(555305, J$.G(555281, J$.R(555273, 'node', node, false, false), 'next'), 'prev', J$.G(555297, J$.R(555289, 'node', node, false, false), 'prev'));
                            }
                        } catch (J$e) {
                            J$.Ex(555681, J$e);
                        } finally {
                            if (J$.Fr(555689))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(555713, J$e);
        } finally {
            if (J$.Sr(555721))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

