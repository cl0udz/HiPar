J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(694113, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/bintrees/lib/bintree.js');
            function Node(data) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(692513, arguments.callee, this, arguments);
                            arguments = J$.N(692521, 'arguments', arguments, true, false, false);
                            data = J$.N(692529, 'data', data, true, false, false);
                            J$.P(692457, J$.R(692441, 'this', this, false, false), 'data', J$.R(692449, 'data', data, false, false));
                            J$.P(692481, J$.R(692465, 'this', this, false, false), 'left', J$.T(692473, null, 25, false));
                            J$.P(692505, J$.R(692489, 'this', this, false, false), 'right', J$.T(692497, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(694161, J$e);
                        } finally {
                            if (J$.Fr(694169))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function BinTree(comparator) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(692833, arguments.callee, this, arguments);
                            arguments = J$.N(692841, 'arguments', arguments, true, false, false);
                            comparator = J$.N(692849, 'comparator', comparator, true, false, false);
                            J$.P(692777, J$.R(692761, 'this', this, false, false), '_root', J$.T(692769, null, 25, false));
                            J$.P(692801, J$.R(692785, 'this', this, false, false), '_comparator', J$.R(692793, 'comparator', comparator, false, false));
                            J$.P(692825, J$.R(692809, 'this', this, false, false), 'size', J$.T(692817, 0, 22, false));
                        } catch (J$e) {
                            J$.Ex(694209, J$e);
                        } finally {
                            if (J$.Fr(694217))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(694121, 'TreeBase', TreeBase, false, false, false);
            Node = J$.N(694137, 'Node', J$.T(694129, Node, 12, false), true, false, false);
            BinTree = J$.N(694153, 'BinTree', J$.T(694145, BinTree, 12, false), true, false, false);
            J$.T(692401, 'use strict', 21, false);
            var TreeBase = J$.W(692433, 'TreeBase', J$.F(692425, J$.I(typeof require === 'undefined' ? require = J$.R(692409, 'require', undefined, true, true) : require = J$.R(692409, 'require', require, true, true)), false)(J$.T(692417, './treebase', 21, false)), TreeBase, false, true);
            J$.P(692633, J$.G(692545, J$.R(692537, 'Node', Node, false, true), 'prototype'), 'get_child', J$.T(692625, function (dir) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(692601, arguments.callee, this, arguments);
                            arguments = J$.N(692609, 'arguments', arguments, true, false, false);
                            dir = J$.N(692617, 'dir', dir, true, false, false);
                            return J$.Rt(692593, J$.C(46288, J$.R(692553, 'dir', dir, false, false)) ? J$.G(692569, J$.R(692561, 'this', this, false, false), 'right') : J$.G(692585, J$.R(692577, 'this', this, false, false), 'left'));
                        } catch (J$e) {
                            J$.Ex(694177, J$e);
                        } finally {
                            if (J$.Fr(694185))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(692753, J$.G(692649, J$.R(692641, 'Node', Node, false, true), 'prototype'), 'set_child', J$.T(692745, function (dir, val) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(692713, arguments.callee, this, arguments);
                            arguments = J$.N(692721, 'arguments', arguments, true, false, false);
                            dir = J$.N(692729, 'dir', dir, true, false, false);
                            val = J$.N(692737, 'val', val, true, false, false);
                            if (J$.C(46296, J$.R(692657, 'dir', dir, false, false))) {
                                J$.P(692681, J$.R(692665, 'this', this, false, false), 'right', J$.R(692673, 'val', val, false, false));
                            } else {
                                J$.P(692705, J$.R(692689, 'this', this, false, false), 'left', J$.R(692697, 'val', val, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(694193, J$e);
                        } finally {
                            if (J$.Fr(694201))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(692881, J$.R(692857, 'BinTree', BinTree, false, true), 'prototype', J$.F(692873, J$.R(692865, 'TreeBase', TreeBase, false, true), true)());
            J$.P(693417, J$.G(692897, J$.R(692889, 'BinTree', BinTree, false, true), 'prototype'), 'insert', J$.T(693409, function (data) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(693361, arguments.callee, this, arguments);
                            arguments = J$.N(693369, 'arguments', arguments, true, false, false);
                            data = J$.N(693377, 'data', data, true, false, false);
                            J$.N(693385, 'dir', dir, false, false, false);
                            J$.N(693393, 'p', p, false, false, false);
                            J$.N(693401, 'node', node, false, false, false);
                            if (J$.C(46304, J$.B(135738, '===', J$.G(692913, J$.R(692905, 'this', this, false, false), '_root'), J$.T(692921, null, 25, false)))) {
                                J$.P(692961, J$.R(692929, 'this', this, false, false), '_root', J$.F(692953, J$.R(692937, 'Node', Node, false, true), true)(J$.R(692945, 'data', data, false, false)));
                                J$.B(135746, '-', J$.A(692977, J$.R(692969, 'this', this, false, false), 'size', '+')(1), 1);
                                return J$.Rt(692993, J$.T(692985, true, 23, false));
                            }
                            var dir = J$.W(693009, 'dir', J$.T(693001, 0, 22, false), dir, false, false);
                            var p = J$.W(693025, 'p', J$.T(693017, null, 25, false), p, false, false);
                            var node = J$.W(693049, 'node', J$.G(693041, J$.R(693033, 'this', this, false, false), '_root'), node, false, false);
                            while (J$.C(46328, J$.T(693057, true, 23, false))) {
                                if (J$.C(46312, J$.B(135754, '===', J$.R(693065, 'node', node, false, false), J$.T(693073, null, 25, false)))) {
                                    node = J$.W(693105, 'node', J$.F(693097, J$.R(693081, 'Node', Node, false, true), true)(J$.R(693089, 'data', data, false, false)), node, false, false);
                                    J$.M(693137, J$.R(693113, 'p', p, false, false), 'set_child', false)(J$.R(693121, 'dir', dir, false, false), J$.R(693129, 'node', node, false, false));
                                    ret = J$.W(693153, 'ret', J$.T(693145, true, 23, false), J$.I(typeof ret === 'undefined' ? undefined : ret), true, true);
                                    J$.B(135762, '-', J$.A(693169, J$.R(693161, 'this', this, false, false), 'size', '+')(1), 1);
                                    return J$.Rt(693185, J$.T(693177, true, 23, false));
                                }
                                if (J$.C(46320, J$.B(135770, '===', J$.M(693225, J$.R(693193, 'this', this, false, false), '_comparator', false)(J$.G(693209, J$.R(693201, 'node', node, false, false), 'data'), J$.R(693217, 'data', data, false, false)), J$.T(693233, 0, 22, false)))) {
                                    return J$.Rt(693249, J$.T(693241, false, 23, false));
                                }
                                dir = J$.W(693305, 'dir', J$.B(135778, '<', J$.M(693289, J$.R(693257, 'this', this, false, false), '_comparator', false)(J$.G(693273, J$.R(693265, 'node', node, false, false), 'data'), J$.R(693281, 'data', data, false, false)), J$.T(693297, 0, 22, false)), dir, false, false);
                                p = J$.W(693321, 'p', J$.R(693313, 'node', node, false, false), p, false, false);
                                node = J$.W(693353, 'node', J$.M(693345, J$.R(693329, 'node', node, false, false), 'get_child', false)(J$.R(693337, 'dir', dir, false, false)), node, false, false);
                            }
                        } catch (J$e) {
                            J$.Ex(694225, J$e);
                        } finally {
                            if (J$.Fr(694233))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(694081, J$.G(693433, J$.R(693425, 'BinTree', BinTree, false, true), 'prototype'), 'remove', J$.T(694073, function (data) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(694001, arguments.callee, this, arguments);
                            arguments = J$.N(694009, 'arguments', arguments, true, false, false);
                            data = J$.N(694017, 'data', data, true, false, false);
                            J$.N(694025, 'head', head, false, false, false);
                            J$.N(694033, 'node', node, false, false, false);
                            J$.N(694041, 'p', p, false, false, false);
                            J$.N(694049, 'found', found, false, false, false);
                            J$.N(694057, 'dir', dir, false, false, false);
                            J$.N(694065, 'cmp', cmp, false, false, false);
                            if (J$.C(46336, J$.B(135786, '===', J$.G(693449, J$.R(693441, 'this', this, false, false), '_root'), J$.T(693457, null, 25, false)))) {
                                return J$.Rt(693473, J$.T(693465, false, 23, false));
                            }
                            var head = J$.W(693505, 'head', J$.F(693497, J$.R(693481, 'Node', Node, false, true), true)(J$.T(693489, undefined, 24, false)), head, false, false);
                            var node = J$.W(693521, 'node', J$.R(693513, 'head', head, false, false), node, false, false);
                            J$.P(693553, J$.R(693529, 'node', node, false, false), 'right', J$.G(693545, J$.R(693537, 'this', this, false, false), '_root'));
                            var p = J$.W(693569, 'p', J$.T(693561, null, 25, false), p, false, false);
                            var found = J$.W(693585, 'found', J$.T(693577, null, 25, false), found, false, false);
                            var dir = J$.W(693601, 'dir', J$.T(693593, 1, 22, false), dir, false, false);
                            while (J$.C(46352, J$.B(135794, '!==', J$.M(693625, J$.R(693609, 'node', node, false, false), 'get_child', false)(J$.R(693617, 'dir', dir, false, false)), J$.T(693633, null, 25, false)))) {
                                p = J$.W(693649, 'p', J$.R(693641, 'node', node, false, false), p, false, false);
                                node = J$.W(693681, 'node', J$.M(693673, J$.R(693657, 'node', node, false, false), 'get_child', false)(J$.R(693665, 'dir', dir, false, false)), node, false, false);
                                var cmp = J$.W(693729, 'cmp', J$.M(693721, J$.R(693689, 'this', this, false, false), '_comparator', false)(J$.R(693697, 'data', data, false, false), J$.G(693713, J$.R(693705, 'node', node, false, false), 'data')), cmp, false, false);
                                dir = J$.W(693753, 'dir', J$.B(135802, '>', J$.R(693737, 'cmp', cmp, false, false), J$.T(693745, 0, 22, false)), dir, false, false);
                                if (J$.C(46344, J$.B(135810, '===', J$.R(693761, 'cmp', cmp, false, false), J$.T(693769, 0, 22, false)))) {
                                    found = J$.W(693785, 'found', J$.R(693777, 'node', node, false, false), found, false, false);
                                }
                            }
                            if (J$.C(46360, J$.B(135818, '!==', J$.R(693793, 'found', found, false, false), J$.T(693801, null, 25, false)))) {
                                J$.P(693833, J$.R(693809, 'found', found, false, false), 'data', J$.G(693825, J$.R(693817, 'node', node, false, false), 'data'));
                                J$.M(693913, J$.R(693841, 'p', p, false, false), 'set_child', false)(J$.B(135826, '===', J$.G(693857, J$.R(693849, 'p', p, false, false), 'right'), J$.R(693865, 'node', node, false, false)), J$.M(693905, J$.R(693873, 'node', node, false, false), 'get_child', false)(J$.B(135834, '===', J$.G(693889, J$.R(693881, 'node', node, false, false), 'left'), J$.T(693897, null, 25, false))));
                                J$.P(693945, J$.R(693921, 'this', this, false, false), '_root', J$.G(693937, J$.R(693929, 'head', head, false, false), 'right'));
                                J$.B(135842, '+', J$.A(693961, J$.R(693953, 'this', this, false, false), 'size', '-')(1), 1);
                                return J$.Rt(693977, J$.T(693969, true, 23, false));
                            } else {
                                return J$.Rt(693993, J$.T(693985, false, 23, false));
                            }
                        } catch (J$e) {
                            J$.Ex(694241, J$e);
                        } finally {
                            if (J$.Fr(694249))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(694105, J$.I(typeof module === 'undefined' ? module = J$.R(694089, 'module', undefined, true, true) : module = J$.R(694089, 'module', module, true, true)), 'exports', J$.R(694097, 'BinTree', BinTree, false, true));
        } catch (J$e) {
            J$.Ex(694257, J$e);
        } finally {
            if (J$.Sr(694265))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

