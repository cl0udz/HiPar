J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(704873, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/bintrees/test/loader.js');
            function load(filename) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(704113, arguments.callee, this, arguments);
                            arguments = J$.N(704121, 'arguments', arguments, true, false, false);
                            filename = J$.N(704129, 'filename', filename, true, false, false);
                            J$.N(704137, 'ret', ret, false, false, false);
                            J$.N(704145, 'nums', nums, false, false, false);
                            var ret = J$.W(703913, 'ret', J$.T(703905, [], 10, false), ret, false, false);
                            var nums = J$.W(703969, 'nums', J$.M(703961, J$.M(703945, J$.R(703921, 'fs', fs, false, true), 'readFileSync', false)(J$.R(703929, 'filename', filename, false, false), J$.T(703937, 'ascii', 21, false)), 'split', false)(J$.T(703953, '\n', 21, false)), nums, false, false);
                            J$.M(704089, J$.R(703977, 'nums', nums, false, false), 'forEach', false)(J$.T(704081, function (s) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(704049, arguments.callee, this, arguments);
                                            arguments = J$.N(704057, 'arguments', arguments, true, false, false);
                                            s = J$.N(704065, 's', s, true, false, false);
                                            J$.N(704073, 'n', n, false, false, false);
                                            if (J$.C(46896, J$.G(703993, J$.R(703985, 's', s, false, false), 'length'))) {
                                                var n = J$.W(704017, 'n', J$.B(136570, '*', J$.R(704001, 's', s, false, false), J$.T(704009, 1, 22, false)), n, false, false);
                                                J$.M(704041, J$.R(704025, 'ret', ret, false, false), 'push', false)(J$.R(704033, 'n', n, false, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(704993, J$e);
                                        } finally {
                                            if (J$.Fr(705001))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(704105, J$.R(704097, 'ret', ret, false, false));
                        } catch (J$e) {
                            J$.Ex(705009, J$e);
                        } finally {
                            if (J$.Fr(705017))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function get_inserts(tests) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(704241, arguments.callee, this, arguments);
                            arguments = J$.N(704249, 'arguments', arguments, true, false, false);
                            tests = J$.N(704257, 'tests', tests, true, false, false);
                            return J$.Rt(704233, J$.M(704225, J$.R(704153, '_', _, false, true), 'select', false)(J$.R(704161, 'tests', tests, false, false), J$.T(704217, function (n) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(704193, arguments.callee, this, arguments);
                                            arguments = J$.N(704201, 'arguments', arguments, true, false, false);
                                            n = J$.N(704209, 'n', n, true, false, false);
                                            return J$.Rt(704185, J$.B(136578, '>', J$.R(704169, 'n', n, false, false), J$.T(704177, 0, 22, false)));
                                        } catch (J$e) {
                                            J$.Ex(705025, J$e);
                                        } finally {
                                            if (J$.Fr(705033))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(705041, J$e);
                        } finally {
                            if (J$.Fr(705049))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function get_removes(tests) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(704353, arguments.callee, this, arguments);
                            arguments = J$.N(704361, 'arguments', arguments, true, false, false);
                            tests = J$.N(704369, 'tests', tests, true, false, false);
                            return J$.Rt(704345, J$.M(704337, J$.R(704265, '_', _, false, true), 'select', false)(J$.R(704273, 'tests', tests, false, false), J$.T(704329, function (n) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(704305, arguments.callee, this, arguments);
                                            arguments = J$.N(704313, 'arguments', arguments, true, false, false);
                                            n = J$.N(704321, 'n', n, true, false, false);
                                            return J$.Rt(704297, J$.B(136586, '<', J$.R(704281, 'n', n, false, false), J$.T(704289, 0, 22, false)));
                                        } catch (J$e) {
                                            J$.Ex(705057, J$e);
                                        } finally {
                                            if (J$.Fr(705065))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(705073, J$e);
                        } finally {
                            if (J$.Fr(705081))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function new_tree(tree_type) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(704465, arguments.callee, this, arguments);
                            arguments = J$.N(704473, 'arguments', arguments, true, false, false);
                            tree_type = J$.N(704481, 'tree_type', tree_type, true, false, false);
                            return J$.Rt(704457, J$.F(704449, J$.R(704377, 'tree_type', tree_type, false, false), true)(J$.T(704441, function (a, b) {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(704409, arguments.callee, this, arguments);
                                            arguments = J$.N(704417, 'arguments', arguments, true, false, false);
                                            a = J$.N(704425, 'a', a, true, false, false);
                                            b = J$.N(704433, 'b', b, true, false, false);
                                            return J$.Rt(704401, J$.B(136594, '-', J$.R(704385, 'a', a, false, false), J$.R(704393, 'b', b, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(705089, J$e);
                                        } finally {
                                            if (J$.Fr(705097))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(705105, J$e);
                        } finally {
                            if (J$.Fr(705113))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function build_tree(tree_type, inserts) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(704609, arguments.callee, this, arguments);
                            arguments = J$.N(704617, 'arguments', arguments, true, false, false);
                            tree_type = J$.N(704625, 'tree_type', tree_type, true, false, false);
                            inserts = J$.N(704633, 'inserts', inserts, true, false, false);
                            J$.N(704641, 'tree', tree, false, false, false);
                            var tree = J$.W(704513, 'tree', J$.F(704505, J$.R(704489, 'new_tree', new_tree, false, true), false)(J$.R(704497, 'tree_type', tree_type, false, false)), tree, false, false);
                            J$.M(704585, J$.R(704521, 'inserts', inserts, false, false), 'forEach', false)(J$.T(704577, function (n) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(704553, arguments.callee, this, arguments);
                                            arguments = J$.N(704561, 'arguments', arguments, true, false, false);
                                            n = J$.N(704569, 'n', n, true, false, false);
                                            J$.M(704545, J$.R(704529, 'tree', tree, false, false), 'insert', false)(J$.R(704537, 'n', n, false, false));
                                        } catch (J$e) {
                                            J$.Ex(705121, J$e);
                                        } finally {
                                            if (J$.Fr(705129))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(704601, J$.R(704593, 'tree', tree, false, false));
                        } catch (J$e) {
                            J$.Ex(705137, J$e);
                        } finally {
                            if (J$.Fr(705145))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function load_tree(tree_type, filename) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(704753, arguments.callee, this, arguments);
                            arguments = J$.N(704761, 'arguments', arguments, true, false, false);
                            tree_type = J$.N(704769, 'tree_type', tree_type, true, false, false);
                            filename = J$.N(704777, 'filename', filename, true, false, false);
                            J$.N(704785, 'tests', tests, false, false, false);
                            J$.N(704793, 'inserts', inserts, false, false, false);
                            var tests = J$.W(704673, 'tests', J$.F(704665, J$.R(704649, 'load', load, false, true), false)(J$.R(704657, 'filename', filename, false, false)), tests, false, false);
                            var inserts = J$.W(704705, 'inserts', J$.F(704697, J$.R(704681, 'get_inserts', get_inserts, false, true), false)(J$.R(704689, 'tests', tests, false, false)), inserts, false, false);
                            return J$.Rt(704745, J$.F(704737, J$.R(704713, 'build_tree', build_tree, false, true), false)(J$.R(704721, 'tree_type', tree_type, false, false), J$.R(704729, 'inserts', inserts, false, false)));
                        } catch (J$e) {
                            J$.Ex(705153, J$e);
                        } finally {
                            if (J$.Fr(705161))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(704881, 'fs', fs, false, false, false);
            J$.N(704889, '_', _, false, false, false);
            load = J$.N(704905, 'load', J$.T(704897, load, 12, false), true, false, false);
            get_inserts = J$.N(704921, 'get_inserts', J$.T(704913, get_inserts, 12, false), true, false, false);
            get_removes = J$.N(704937, 'get_removes', J$.T(704929, get_removes, 12, false), true, false, false);
            new_tree = J$.N(704953, 'new_tree', J$.T(704945, new_tree, 12, false), true, false, false);
            build_tree = J$.N(704969, 'build_tree', J$.T(704961, build_tree, 12, false), true, false, false);
            load_tree = J$.N(704985, 'load_tree', J$.T(704977, load_tree, 12, false), true, false, false);
            J$.T(703737, 'use strict', 21, false);
            J$.F(703761, J$.I(typeof require === 'undefined' ? require = J$.R(703745, 'require', undefined, true, true) : require = J$.R(703745, 'require', require, true, true)), false)(J$.T(703753, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(703785, J$.I(typeof require === 'undefined' ? require = J$.R(703769, 'require', undefined, true, true) : require = J$.R(703769, 'require', require, true, true)), false)(J$.T(703777, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(703809, J$.I(typeof require === 'undefined' ? require = J$.R(703793, 'require', undefined, true, true) : require = J$.R(703793, 'require', require, true, true)), false)(J$.T(703801, 'core-js/modules/es.string.split', 21, false));
            J$.F(703833, J$.I(typeof require === 'undefined' ? require = J$.R(703817, 'require', undefined, true, true) : require = J$.R(703817, 'require', require, true, true)), false)(J$.T(703825, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var fs = J$.W(703865, 'fs', J$.F(703857, J$.I(typeof require === 'undefined' ? require = J$.R(703841, 'require', undefined, true, true) : require = J$.R(703841, 'require', require, true, true)), false)(J$.T(703849, 'fs', 21, false)), fs, false, true);
            var _ = J$.W(703897, '_', J$.F(703889, J$.I(typeof require === 'undefined' ? require = J$.R(703873, 'require', undefined, true, true) : require = J$.R(703873, 'require', require, true, true)), false)(J$.T(703881, 'underscore', 21, false)), _, false, true);
            J$.P(704865, J$.I(typeof module === 'undefined' ? module = J$.R(704801, 'module', undefined, true, true) : module = J$.R(704801, 'module', module, true, true)), 'exports', J$.T(704857, {
                load: J$.R(704809, 'load', load, false, true),
                get_inserts: J$.R(704817, 'get_inserts', get_inserts, false, true),
                get_removes: J$.R(704825, 'get_removes', get_removes, false, true),
                new_tree: J$.R(704833, 'new_tree', new_tree, false, true),
                build_tree: J$.R(704841, 'build_tree', build_tree, false, true),
                load_tree: J$.R(704849, 'load_tree', load_tree, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(705169, J$e);
        } finally {
            if (J$.Sr(705177))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

