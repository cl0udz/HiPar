J$.noInstrEval = false;
jalangiLabel22:
    while (true) {
        try {
            J$.Se(707961, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/bintrees/test/perf_test.js');
            function mean(arr) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(705577, arguments.callee, this, arguments);
                            arguments = J$.N(705585, 'arguments', arguments, true, false, false);
                            arr = J$.N(705593, 'arr', arr, true, false, false);
                            J$.N(705601, 'sum', sum, false, false, false);
                            var sum = J$.W(705465, 'sum', J$.T(705457, 0, 22, false), sum, false, false);
                            J$.M(705537, J$.R(705473, 'arr', arr, false, false), 'forEach', false)(J$.T(705529, function (n) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(705505, arguments.callee, this, arguments);
                                            arguments = J$.N(705513, 'arguments', arguments, true, false, false);
                                            n = J$.N(705521, 'n', n, true, false, false);
                                            sum = J$.W(705497, 'sum', J$.B(136610, '+', J$.R(705489, 'sum', sum, false, false), J$.R(705481, 'n', n, false, false)), sum, false, false);
                                        } catch (J$e) {
                                            J$.Ex(708137, J$e);
                                        } finally {
                                            if (J$.Fr(708145))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(705569, J$.B(136618, '/', J$.R(705545, 'sum', sum, false, false), J$.G(705561, J$.R(705553, 'arr', arr, false, false), 'length')));
                        } catch (J$e) {
                            J$.Ex(708153, J$e);
                        } finally {
                            if (J$.Fr(708161))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function timeit(f) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(705809, arguments.callee, this, arguments);
                            arguments = J$.N(705817, 'arguments', arguments, true, false, false);
                            f = J$.N(705825, 'f', f, true, false, false);
                            J$.N(705833, 'diffs', diffs, false, false, false);
                            J$.N(705841, 'i', i, false, false, false);
                            J$.N(705849, 'start', start, false, false, false);
                            J$.N(705857, 'end', end, false, false, false);
                            J$.N(705865, 'diff', diff, false, false, false);
                            var diffs = J$.W(705617, 'diffs', J$.T(705609, [], 10, false), diffs, false, false);
                            for (var i = J$.W(705633, 'i', J$.T(705625, 0, 22, false), i, false, false); J$.C(46904, J$.B(136626, '<', J$.R(705641, 'i', i, false, false), J$.R(705649, 'NUM_TIMES', NUM_TIMES, false, true))); J$.B(136650, '-', i = J$.W(705665, 'i', J$.B(136642, '+', J$.U(136634, '+', J$.R(705657, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var start = J$.W(705689, 'start', J$.M(705681, J$.I(typeof Date === 'undefined' ? Date = J$.R(705673, 'Date', undefined, true, true) : Date = J$.R(705673, 'Date', Date, true, true)), 'now', false)(), start, false, false);
                                J$.F(705705, J$.R(705697, 'f', f, false, false), false)();
                                var end = J$.W(705729, 'end', J$.M(705721, J$.I(typeof Date === 'undefined' ? Date = J$.R(705713, 'Date', undefined, true, true) : Date = J$.R(705713, 'Date', Date, true, true)), 'now', false)(), end, false, false);
                                var diff = J$.W(705761, 'diff', J$.B(136666, '/', J$.B(136658, '-', J$.R(705737, 'end', end, false, false), J$.R(705745, 'start', start, false, false)), J$.T(705753, 1000, 22, false)), diff, false, false);
                                J$.M(705785, J$.R(705769, 'diffs', diffs, false, false), 'push', false)(J$.R(705777, 'diff', diff, false, false));
                            }
                            return J$.Rt(705801, J$.R(705793, 'diffs', diffs, false, false));
                        } catch (J$e) {
                            J$.Ex(708169, J$e);
                        } finally {
                            if (J$.Fr(708177))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function print_times(arr) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(705921, arguments.callee, this, arguments);
                            arguments = J$.N(705929, 'arguments', arguments, true, false, false);
                            arr = J$.N(705937, 'arr', arr, true, false, false);
                            J$.M(705913, J$.I(typeof console === 'undefined' ? console = J$.R(705873, 'console', undefined, true, true) : console = J$.R(705873, 'console', console, true, true)), 'log', false)(J$.T(705881, 'Mean: ', 21, false), J$.F(705905, J$.R(705889, 'mean', mean, false, true), false)(J$.R(705897, 'arr', arr, false, false)));
                        } catch (J$e) {
                            J$.Ex(708185, J$e);
                        } finally {
                            if (J$.Fr(708193))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function build(tree_class, test_path) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(706121, arguments.callee, this, arguments);
                            arguments = J$.N(706129, 'arguments', arguments, true, false, false);
                            tree_class = J$.N(706137, 'tree_class', tree_class, true, false, false);
                            test_path = J$.N(706145, 'test_path', test_path, true, false, false);
                            J$.N(706153, 'tests', tests, false, false, false);
                            J$.N(706161, 'inserts', inserts, false, false, false);
                            var tests = J$.W(705969, 'tests', J$.M(705961, J$.R(705945, 'loader', loader, false, true), 'load', false)(J$.R(705953, 'test_path', test_path, false, false)), tests, false, false);
                            var inserts = J$.W(706001, 'inserts', J$.M(705993, J$.R(705977, 'loader', loader, false, true), 'get_inserts', false)(J$.R(705985, 'tests', tests, false, false)), inserts, false, false);
                            J$.M(706025, J$.I(typeof console === 'undefined' ? console = J$.R(706009, 'console', undefined, true, true) : console = J$.R(706009, 'console', console, true, true)), 'log', false)(J$.T(706017, 'build tree...', 21, false));
                            J$.F(706113, J$.R(706033, 'print_times', print_times, false, true), false)(J$.F(706105, J$.R(706041, 'timeit', timeit, false, true), false)(J$.T(706097, function () {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(706081, arguments.callee, this, arguments);
                                            arguments = J$.N(706089, 'arguments', arguments, true, false, false);
                                            J$.M(706073, J$.R(706049, 'loader', loader, false, true), 'build_tree', false)(J$.R(706057, 'tree_class', tree_class, false, false), J$.R(706065, 'inserts', inserts, false, false));
                                        } catch (J$e) {
                                            J$.Ex(708201, J$e);
                                        } finally {
                                            if (J$.Fr(708209))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(708217, J$e);
                        } finally {
                            if (J$.Fr(708225))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function build_destroy(tree_class, test_path) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(706465, arguments.callee, this, arguments);
                            arguments = J$.N(706473, 'arguments', arguments, true, false, false);
                            tree_class = J$.N(706481, 'tree_class', tree_class, true, false, false);
                            test_path = J$.N(706489, 'test_path', test_path, true, false, false);
                            J$.N(706497, 'tests', tests, false, false, false);
                            J$.N(706505, 'inserts', inserts, false, false, false);
                            J$.N(706513, 'removes', removes, false, false, false);
                            var tests = J$.W(706193, 'tests', J$.M(706185, J$.R(706169, 'loader', loader, false, true), 'load', false)(J$.R(706177, 'test_path', test_path, false, false)), tests, false, false);
                            var inserts = J$.W(706225, 'inserts', J$.M(706217, J$.R(706201, 'loader', loader, false, true), 'get_inserts', false)(J$.R(706209, 'tests', tests, false, false)), inserts, false, false);
                            var removes = J$.W(706257, 'removes', J$.M(706249, J$.R(706233, 'loader', loader, false, true), 'get_removes', false)(J$.R(706241, 'tests', tests, false, false)), removes, false, false);
                            J$.M(706281, J$.I(typeof console === 'undefined' ? console = J$.R(706265, 'console', undefined, true, true) : console = J$.R(706265, 'console', console, true, true)), 'log', false)(J$.T(706273, 'build/destroy tree...', 21, false));
                            J$.F(706457, J$.R(706289, 'print_times', print_times, false, true), false)(J$.F(706449, J$.R(706297, 'timeit', timeit, false, true), false)(J$.T(706441, function () {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(706417, arguments.callee, this, arguments);
                                            arguments = J$.N(706425, 'arguments', arguments, true, false, false);
                                            J$.N(706433, 'tree', tree, false, false, false);
                                            var tree = J$.W(706337, 'tree', J$.M(706329, J$.R(706305, 'loader', loader, false, true), 'build_tree', false)(J$.R(706313, 'tree_class', tree_class, false, false), J$.R(706321, 'inserts', inserts, false, false)), tree, false, false);
                                            J$.M(706409, J$.R(706345, 'removes', removes, false, false), 'forEach', false)(J$.T(706401, function (n) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(706377, arguments.callee, this, arguments);
                                                            arguments = J$.N(706385, 'arguments', arguments, true, false, false);
                                                            n = J$.N(706393, 'n', n, true, false, false);
                                                            J$.M(706369, J$.R(706353, 'tree', tree, false, false), 'remove', false)(J$.R(706361, 'n', n, false, false));
                                                        } catch (J$e) {
                                                            J$.Ex(708233, J$e);
                                                        } finally {
                                                            if (J$.Fr(708241))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(708249, J$e);
                                        } finally {
                                            if (J$.Fr(708257))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(708265, J$e);
                        } finally {
                            if (J$.Fr(708273))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function find(tree_class, test_path) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(706777, arguments.callee, this, arguments);
                            arguments = J$.N(706785, 'arguments', arguments, true, false, false);
                            tree_class = J$.N(706793, 'tree_class', tree_class, true, false, false);
                            test_path = J$.N(706801, 'test_path', test_path, true, false, false);
                            J$.N(706809, 'tests', tests, false, false, false);
                            J$.N(706817, 'inserts', inserts, false, false, false);
                            J$.N(706825, 'tree', tree, false, false, false);
                            var tests = J$.W(706545, 'tests', J$.M(706537, J$.R(706521, 'loader', loader, false, true), 'load', false)(J$.R(706529, 'test_path', test_path, false, false)), tests, false, false);
                            var inserts = J$.W(706577, 'inserts', J$.M(706569, J$.R(706553, 'loader', loader, false, true), 'get_inserts', false)(J$.R(706561, 'tests', tests, false, false)), inserts, false, false);
                            var tree = J$.W(706617, 'tree', J$.M(706609, J$.R(706585, 'loader', loader, false, true), 'build_tree', false)(J$.R(706593, 'tree_class', tree_class, false, false), J$.R(706601, 'inserts', inserts, false, false)), tree, false, false);
                            J$.M(706641, J$.I(typeof console === 'undefined' ? console = J$.R(706625, 'console', undefined, true, true) : console = J$.R(706625, 'console', console, true, true)), 'log', false)(J$.T(706633, 'find all nodes...', 21, false));
                            J$.F(706769, J$.R(706649, 'print_times', print_times, false, true), false)(J$.F(706761, J$.R(706657, 'timeit', timeit, false, true), false)(J$.T(706753, function () {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(706737, arguments.callee, this, arguments);
                                            arguments = J$.N(706745, 'arguments', arguments, true, false, false);
                                            J$.M(706729, J$.R(706665, 'inserts', inserts, false, false), 'forEach', false)(J$.T(706721, function (n) {
                                                jalangiLabel9:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(706697, arguments.callee, this, arguments);
                                                            arguments = J$.N(706705, 'arguments', arguments, true, false, false);
                                                            n = J$.N(706713, 'n', n, true, false, false);
                                                            J$.M(706689, J$.R(706673, 'tree', tree, false, false), 'find', false)(J$.R(706681, 'n', n, false, false));
                                                        } catch (J$e) {
                                                            J$.Ex(708281, J$e);
                                                        } finally {
                                                            if (J$.Fr(708289))
                                                                continue jalangiLabel9;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(708297, J$e);
                                        } finally {
                                            if (J$.Fr(708305))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(708313, J$e);
                        } finally {
                            if (J$.Fr(708321))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function interleaved(tree_class, test_path) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(707153, arguments.callee, this, arguments);
                            arguments = J$.N(707161, 'arguments', arguments, true, false, false);
                            tree_class = J$.N(707169, 'tree_class', tree_class, true, false, false);
                            test_path = J$.N(707177, 'test_path', test_path, true, false, false);
                            J$.N(707185, 'tests', tests, false, false, false);
                            var tests = J$.W(706857, 'tests', J$.M(706849, J$.R(706833, 'loader', loader, false, true), 'load', false)(J$.R(706841, 'test_path', test_path, false, false)), tests, false, false);
                            J$.M(706881, J$.I(typeof console === 'undefined' ? console = J$.R(706865, 'console', undefined, true, true) : console = J$.R(706865, 'console', console, true, true)), 'log', false)(J$.T(706873, 'interleaved build/destroy...', 21, false));
                            J$.F(707145, J$.R(706889, 'print_times', print_times, false, true), false)(J$.F(707137, J$.R(706897, 'timeit', timeit, false, true), false)(J$.T(707129, function () {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(707105, arguments.callee, this, arguments);
                                            arguments = J$.N(707113, 'arguments', arguments, true, false, false);
                                            J$.N(707121, 'tree', tree, false, false, false);
                                            var tree = J$.W(706985, 'tree', J$.F(706977, J$.R(706905, 'tree_class', tree_class, false, false), true)(J$.T(706969, function (a, b) {
                                                jalangiLabel12:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(706937, arguments.callee, this, arguments);
                                                            arguments = J$.N(706945, 'arguments', arguments, true, false, false);
                                                            a = J$.N(706953, 'a', a, true, false, false);
                                                            b = J$.N(706961, 'b', b, true, false, false);
                                                            return J$.Rt(706929, J$.B(136674, '-', J$.R(706913, 'a', a, false, false), J$.R(706921, 'b', b, false, false)));
                                                        } catch (J$e) {
                                                            J$.Ex(708329, J$e);
                                                        } finally {
                                                            if (J$.Fr(708337))
                                                                continue jalangiLabel12;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false)), tree, false, false);
                                            J$.M(707097, J$.R(706993, 'tests', tests, false, false), 'forEach', false)(J$.T(707089, function (n) {
                                                jalangiLabel13:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(707065, arguments.callee, this, arguments);
                                                            arguments = J$.N(707073, 'arguments', arguments, true, false, false);
                                                            n = J$.N(707081, 'n', n, true, false, false);
                                                            if (J$.C(46912, J$.B(136682, '>', J$.R(707001, 'n', n, false, false), J$.T(707009, 0, 22, false))))
                                                                J$.M(707033, J$.R(707017, 'tree', tree, false, false), 'insert', false)(J$.R(707025, 'n', n, false, false));
                                                            else
                                                                J$.M(707057, J$.R(707041, 'tree', tree, false, false), 'remove', false)(J$.R(707049, 'n', n, false, false));
                                                        } catch (J$e) {
                                                            J$.Ex(708345, J$e);
                                                        } finally {
                                                            if (J$.Fr(708353))
                                                                continue jalangiLabel13;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(708361, J$e);
                                        } finally {
                                            if (J$.Fr(708369))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(708377, J$e);
                        } finally {
                            if (J$.Fr(708385))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(707969, 'fs', fs, false, false, false);
            J$.N(707977, 'loader', loader, false, false, false);
            J$.N(707985, 'NUM_TIMES', NUM_TIMES, false, false, false);
            J$.N(707993, 'BASE_DIR', BASE_DIR, false, false, false);
            J$.N(708001, 'TREES', TREES, false, false, false);
            mean = J$.N(708017, 'mean', J$.T(708009, mean, 12, false), true, false, false);
            timeit = J$.N(708033, 'timeit', J$.T(708025, timeit, 12, false), true, false, false);
            print_times = J$.N(708049, 'print_times', J$.T(708041, print_times, 12, false), true, false, false);
            build = J$.N(708065, 'build', J$.T(708057, build, 12, false), true, false, false);
            build_destroy = J$.N(708081, 'build_destroy', J$.T(708073, build_destroy, 12, false), true, false, false);
            find = J$.N(708097, 'find', J$.T(708089, find, 12, false), true, false, false);
            interleaved = J$.N(708113, 'interleaved', J$.T(708105, interleaved, 12, false), true, false, false);
            J$.N(708121, 'tests', tests, false, false, false);
            J$.N(708129, 'test_funcs', test_funcs, false, false, false);
            J$.T(705185, 'use strict', 21, false);
            J$.F(705209, J$.I(typeof require === 'undefined' ? require = J$.R(705193, 'require', undefined, true, true) : require = J$.R(705193, 'require', require, true, true)), false)(J$.T(705201, 'core-js/modules/es.array.find', 21, false));
            J$.F(705233, J$.I(typeof require === 'undefined' ? require = J$.R(705217, 'require', undefined, true, true) : require = J$.R(705217, 'require', require, true, true)), false)(J$.T(705225, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(705257, J$.I(typeof require === 'undefined' ? require = J$.R(705241, 'require', undefined, true, true) : require = J$.R(705241, 'require', require, true, true)), false)(J$.T(705249, 'core-js/modules/es.date.now', 21, false));
            J$.F(705281, J$.I(typeof require === 'undefined' ? require = J$.R(705265, 'require', undefined, true, true) : require = J$.R(705265, 'require', require, true, true)), false)(J$.T(705273, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(705305, J$.I(typeof require === 'undefined' ? require = J$.R(705289, 'require', undefined, true, true) : require = J$.R(705289, 'require', require, true, true)), false)(J$.T(705297, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var fs = J$.W(705337, 'fs', J$.F(705329, J$.I(typeof require === 'undefined' ? require = J$.R(705313, 'require', undefined, true, true) : require = J$.R(705313, 'require', require, true, true)), false)(J$.T(705321, 'fs', 21, false)), fs, false, true);
            var loader = J$.W(705369, 'loader', J$.F(705361, J$.I(typeof require === 'undefined' ? require = J$.R(705345, 'require', undefined, true, true) : require = J$.R(705345, 'require', require, true, true)), false)(J$.T(705353, './loader', 21, false)), loader, false, true);
            var NUM_TIMES = J$.W(705385, 'NUM_TIMES', J$.T(705377, 10, 22, false), NUM_TIMES, false, true);
            var BASE_DIR = J$.W(705409, 'BASE_DIR', J$.B(136602, '+', J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(705393, '__dirname', undefined, true, true) : __dirname = J$.R(705393, '__dirname', __dirname, true, true)), J$.T(705401, '/perf', 21, false)), BASE_DIR, false, true);
            var TREES = J$.W(705449, 'TREES', J$.T(705441, [
                J$.T(705417, '../test/arrtree', 21, false),
                J$.T(705425, 'rbtree', 21, false),
                J$.T(705433, 'bintree', 21, false)
            ], 10, false), TREES, false, true);
            var tests = J$.W(707217, 'tests', J$.M(707209, J$.R(707193, 'fs', fs, false, true), 'readdirSync', false)(J$.R(707201, 'BASE_DIR', BASE_DIR, false, true)), tests, false, true);
            var test_funcs = J$.W(707233, 'test_funcs', J$.T(707225, {}, 11, false), test_funcs, false, true);
            J$.M(707929, J$.R(707241, 'TREES', TREES, false, true), 'forEach', false)(J$.T(707921, function (tree) {
                jalangiLabel21:
                    while (true) {
                        try {
                            J$.Fe(707889, arguments.callee, this, arguments);
                            arguments = J$.N(707897, 'arguments', arguments, true, false, false);
                            tree = J$.N(707905, 'tree', tree, true, false, false);
                            J$.N(707913, 'tree_class', tree_class, false, false, false);
                            var tree_class = J$.W(707281, 'tree_class', J$.F(707273, J$.I(typeof require === 'undefined' ? require = J$.R(707249, 'require', undefined, true, true) : require = J$.R(707249, 'require', require, true, true)), false)(J$.B(136690, '+', J$.T(707257, '../lib/', 21, false), J$.R(707265, 'tree', tree, false, false))), tree_class, false, false);
                            J$.M(707881, J$.R(707289, 'tests', tests, false, true), 'forEach', false)(J$.T(707873, function (test) {
                                jalangiLabel20:
                                    while (true) {
                                        try {
                                            J$.Fe(707841, arguments.callee, this, arguments);
                                            arguments = J$.N(707849, 'arguments', arguments, true, false, false);
                                            test = J$.N(707857, 'test', test, true, false, false);
                                            J$.N(707865, 'test_path', test_path, false, false, false);
                                            var test_path = J$.W(707321, 'test_path', J$.B(136706, '+', J$.B(136698, '+', J$.R(707297, 'BASE_DIR', BASE_DIR, false, true), J$.T(707305, '/', 21, false)), J$.R(707313, 'test', test, false, false)), test_path, false, false);
                                            J$.P(707449, J$.R(707329, 'test_funcs', test_funcs, false, true), J$.B(136730, '+', J$.B(136722, '+', J$.B(136714, '+', J$.R(707337, 'tree', tree, false, false), J$.T(707345, '_', 21, false)), J$.R(707353, 'test', test, false, false)), J$.T(707361, '_build', 21, false)), J$.T(707441, function (assert) {
                                                jalangiLabel16:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(707417, arguments.callee, this, arguments);
                                                            arguments = J$.N(707425, 'arguments', arguments, true, false, false);
                                                            assert = J$.N(707433, 'assert', assert, true, false, false);
                                                            J$.F(707393, J$.R(707369, 'build', build, false, true), false)(J$.R(707377, 'tree_class', tree_class, false, false), J$.R(707385, 'test_path', test_path, false, false));
                                                            J$.M(707409, J$.R(707401, 'assert', assert, false, false), 'done', false)();
                                                        } catch (J$e) {
                                                            J$.Ex(708393, J$e);
                                                        } finally {
                                                            if (J$.Fr(708401))
                                                                continue jalangiLabel16;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.P(707577, J$.R(707457, 'test_funcs', test_funcs, false, true), J$.B(136754, '+', J$.B(136746, '+', J$.B(136738, '+', J$.R(707465, 'tree', tree, false, false), J$.T(707473, '_', 21, false)), J$.R(707481, 'test', test, false, false)), J$.T(707489, '_build_destroy', 21, false)), J$.T(707569, function (assert) {
                                                jalangiLabel17:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(707545, arguments.callee, this, arguments);
                                                            arguments = J$.N(707553, 'arguments', arguments, true, false, false);
                                                            assert = J$.N(707561, 'assert', assert, true, false, false);
                                                            J$.F(707521, J$.R(707497, 'build_destroy', build_destroy, false, true), false)(J$.R(707505, 'tree_class', tree_class, false, false), J$.R(707513, 'test_path', test_path, false, false));
                                                            J$.M(707537, J$.R(707529, 'assert', assert, false, false), 'done', false)();
                                                        } catch (J$e) {
                                                            J$.Ex(708409, J$e);
                                                        } finally {
                                                            if (J$.Fr(708417))
                                                                continue jalangiLabel17;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.P(707705, J$.R(707585, 'test_funcs', test_funcs, false, true), J$.B(136778, '+', J$.B(136770, '+', J$.B(136762, '+', J$.R(707593, 'tree', tree, false, false), J$.T(707601, '_', 21, false)), J$.R(707609, 'test', test, false, false)), J$.T(707617, '_find', 21, false)), J$.T(707697, function (assert) {
                                                jalangiLabel18:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(707673, arguments.callee, this, arguments);
                                                            arguments = J$.N(707681, 'arguments', arguments, true, false, false);
                                                            assert = J$.N(707689, 'assert', assert, true, false, false);
                                                            J$.F(707649, J$.R(707625, 'find', find, false, true), false)(J$.R(707633, 'tree_class', tree_class, false, false), J$.R(707641, 'test_path', test_path, false, false));
                                                            J$.M(707665, J$.R(707657, 'assert', assert, false, false), 'done', false)();
                                                        } catch (J$e) {
                                                            J$.Ex(708425, J$e);
                                                        } finally {
                                                            if (J$.Fr(708433))
                                                                continue jalangiLabel18;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.P(707833, J$.R(707713, 'test_funcs', test_funcs, false, true), J$.B(136802, '+', J$.B(136794, '+', J$.B(136786, '+', J$.R(707721, 'tree', tree, false, false), J$.T(707729, '_', 21, false)), J$.R(707737, 'test', test, false, false)), J$.T(707745, '_interleaved', 21, false)), J$.T(707825, function (assert) {
                                                jalangiLabel19:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(707801, arguments.callee, this, arguments);
                                                            arguments = J$.N(707809, 'arguments', arguments, true, false, false);
                                                            assert = J$.N(707817, 'assert', assert, true, false, false);
                                                            J$.F(707777, J$.R(707753, 'interleaved', interleaved, false, true), false)(J$.R(707761, 'tree_class', tree_class, false, false), J$.R(707769, 'test_path', test_path, false, false));
                                                            J$.M(707793, J$.R(707785, 'assert', assert, false, false), 'done', false)();
                                                        } catch (J$e) {
                                                            J$.Ex(708441, J$e);
                                                        } finally {
                                                            if (J$.Fr(708449))
                                                                continue jalangiLabel19;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(708457, J$e);
                                        } finally {
                                            if (J$.Fr(708465))
                                                continue jalangiLabel20;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(708473, J$e);
                        } finally {
                            if (J$.Fr(708481))
                                continue jalangiLabel21;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(707953, J$.I(typeof exports === 'undefined' ? exports = J$.R(707937, 'exports', undefined, true, true) : exports = J$.R(707937, 'exports', exports, true, true)), 'performance', J$.R(707945, 'test_funcs', test_funcs, false, true));
        } catch (J$e) {
            J$.Ex(708489, J$e);
        } finally {
            if (J$.Sr(708497))
                continue jalangiLabel22;
            else
                break jalangiLabel22;
        }
    }
// JALANGI DO NOT INSTRUMENT

