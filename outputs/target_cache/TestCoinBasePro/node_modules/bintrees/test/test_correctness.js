J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(720969, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/bintrees/test/test_correctness.js');
            function bt_assert(root, comparator) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(719073, arguments.callee, this, arguments);
                            arguments = J$.N(719081, 'arguments', arguments, true, false, false);
                            root = J$.N(719089, 'root', root, true, false, false);
                            comparator = J$.N(719097, 'comparator', comparator, true, false, false);
                            J$.N(719105, 'ln', ln, false, false, false);
                            J$.N(719113, 'rn', rn, false, false, false);
                            if (J$.C(47096, J$.B(137506, '===', J$.R(718745, 'root', root, false, false), J$.T(718753, null, 25, false)))) {
                                return J$.Rt(718769, J$.T(718761, true, 23, false));
                            } else {
                                var ln = J$.W(718793, 'ln', J$.G(718785, J$.R(718777, 'root', root, false, false), 'left'), ln, false, false);
                                var rn = J$.W(718817, 'rn', J$.G(718809, J$.R(718801, 'root', root, false, false), 'right'), rn, false, false);
                                J$.M(718993, J$.R(718825, 'assert', assert, false, true), 'equal', false)(J$.C(47080, J$.C(47064, J$.B(137514, '!==', J$.R(718833, 'ln', ln, false, false), J$.T(718841, null, 25, false))) ? J$.B(137522, '>=', J$.F(718889, J$.R(718849, 'comparator', comparator, false, false), false)(J$.G(718865, J$.R(718857, 'ln', ln, false, false), 'data'), J$.G(718881, J$.R(718873, 'root', root, false, false), 'data')), J$.T(718897, 0, 22, false)) : J$._()) ? J$._() : J$.C(47072, J$.B(137530, '!==', J$.R(718905, 'rn', rn, false, false), J$.T(718913, null, 25, false))) ? J$.B(137538, '<=', J$.F(718961, J$.R(718921, 'comparator', comparator, false, false), false)(J$.G(718937, J$.R(718929, 'rn', rn, false, false), 'data'), J$.G(718953, J$.R(718945, 'root', root, false, false), 'data')), J$.T(718969, 0, 22, false)) : J$._(), J$.T(718977, false, 23, false), J$.T(718985, 'binary tree violation', 21, false));
                                return J$.Rt(719065, J$.C(47088, J$.F(719025, J$.R(719001, 'bt_assert', bt_assert, false, true), false)(J$.R(719009, 'ln', ln, false, false), J$.R(719017, 'comparator', comparator, false, false))) ? J$.F(719057, J$.R(719033, 'bt_assert', bt_assert, false, true), false)(J$.R(719041, 'rn', rn, false, false), J$.R(719049, 'comparator', comparator, false, false)) : J$._());
                            }
                        } catch (J$e) {
                            J$.Ex(721121, J$e);
                        } finally {
                            if (J$.Fr(721129))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function is_red(node) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(719161, arguments.callee, this, arguments);
                            arguments = J$.N(719169, 'arguments', arguments, true, false, false);
                            node = J$.N(719177, 'node', node, true, false, false);
                            return J$.Rt(719153, J$.C(47104, J$.B(137546, '!==', J$.R(719121, 'node', node, false, false), J$.T(719129, null, 25, false))) ? J$.G(719145, J$.R(719137, 'node', node, false, false), 'red') : J$._());
                        } catch (J$e) {
                            J$.Ex(721137, J$e);
                        } finally {
                            if (J$.Fr(721145))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function rb_assert(root, comparator) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(719809, arguments.callee, this, arguments);
                            arguments = J$.N(719817, 'arguments', arguments, true, false, false);
                            root = J$.N(719825, 'root', root, true, false, false);
                            comparator = J$.N(719833, 'comparator', comparator, true, false, false);
                            J$.N(719841, 'ln', ln, false, false, false);
                            J$.N(719849, 'rn', rn, false, false, false);
                            J$.N(719857, 'lh', lh, false, false, false);
                            J$.N(719865, 'rh', rh, false, false, false);
                            if (J$.C(47192, J$.B(137554, '===', J$.R(719185, 'root', root, false, false), J$.T(719193, null, 25, false)))) {
                                return J$.Rt(719209, J$.T(719201, 1, 22, false));
                            } else {
                                var ln = J$.W(719233, 'ln', J$.G(719225, J$.R(719217, 'root', root, false, false), 'left'), ln, false, false);
                                var rn = J$.W(719257, 'rn', J$.G(719249, J$.R(719241, 'root', root, false, false), 'right'), rn, false, false);
                                if (J$.C(47120, J$.F(719281, J$.R(719265, 'is_red', is_red, false, true), false)(J$.R(719273, 'root', root, false, false)))) {
                                    J$.M(719361, J$.R(719289, 'assert', assert, false, true), 'equal', false)(J$.C(47112, J$.F(719313, J$.R(719297, 'is_red', is_red, false, true), false)(J$.R(719305, 'ln', ln, false, false))) ? J$._() : J$.F(719337, J$.R(719321, 'is_red', is_red, false, true), false)(J$.R(719329, 'rn', rn, false, false)), J$.T(719345, false, 23, false), J$.T(719353, 'red violation', 21, false));
                                }
                                var lh = J$.W(719401, 'lh', J$.F(719393, J$.R(719369, 'rb_assert', rb_assert, false, true), false)(J$.R(719377, 'ln', ln, false, false), J$.R(719385, 'comparator', comparator, false, false)), lh, false, false);
                                var rh = J$.W(719441, 'rh', J$.F(719433, J$.R(719409, 'rb_assert', rb_assert, false, true), false)(J$.R(719417, 'rn', rn, false, false), J$.R(719425, 'comparator', comparator, false, false)), rh, false, false);
                                J$.M(719617, J$.R(719449, 'assert', assert, false, true), 'equal', false)(J$.C(47144, J$.C(47128, J$.B(137562, '!==', J$.R(719457, 'ln', ln, false, false), J$.T(719465, null, 25, false))) ? J$.B(137570, '>=', J$.F(719513, J$.R(719473, 'comparator', comparator, false, false), false)(J$.G(719489, J$.R(719481, 'ln', ln, false, false), 'data'), J$.G(719505, J$.R(719497, 'root', root, false, false), 'data')), J$.T(719521, 0, 22, false)) : J$._()) ? J$._() : J$.C(47136, J$.B(137578, '!==', J$.R(719529, 'rn', rn, false, false), J$.T(719537, null, 25, false))) ? J$.B(137586, '<=', J$.F(719585, J$.R(719545, 'comparator', comparator, false, false), false)(J$.G(719561, J$.R(719553, 'rn', rn, false, false), 'data'), J$.G(719577, J$.R(719569, 'root', root, false, false), 'data')), J$.T(719593, 0, 22, false)) : J$._(), J$.T(719601, false, 23, false), J$.T(719609, 'binary tree violation', 21, false));
                                J$.M(719697, J$.R(719625, 'assert', assert, false, true), 'equal', false)(J$.C(47160, J$.C(47152, J$.B(137594, '!==', J$.R(719633, 'lh', lh, false, false), J$.T(719641, 0, 22, false))) ? J$.B(137602, '!==', J$.R(719649, 'rh', rh, false, false), J$.T(719657, 0, 22, false)) : J$._()) ? J$.B(137610, '!==', J$.R(719665, 'lh', lh, false, false), J$.R(719673, 'rh', rh, false, false)) : J$._(), J$.T(719681, false, 23, false), J$.T(719689, 'black violation', 21, false));
                                if (J$.C(47184, J$.C(47168, J$.B(137618, '!==', J$.R(719705, 'lh', lh, false, false), J$.T(719713, 0, 22, false))) ? J$.B(137626, '!==', J$.R(719721, 'rh', rh, false, false), J$.T(719729, 0, 22, false)) : J$._())) {
                                    return J$.Rt(719785, J$.C(47176, J$.F(719753, J$.R(719737, 'is_red', is_red, false, true), false)(J$.R(719745, 'root', root, false, false))) ? J$.R(719761, 'lh', lh, false, false) : J$.B(137634, '+', J$.R(719769, 'lh', lh, false, false), J$.T(719777, 1, 22, false)));
                                } else {
                                    return J$.Rt(719801, J$.T(719793, 0, 22, false));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(721153, J$e);
                        } finally {
                            if (J$.Fr(721161))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function tree_assert(tree_name) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(720017, arguments.callee, this, arguments);
                            arguments = J$.N(720025, 'arguments', arguments, true, false, false);
                            tree_name = J$.N(720033, 'tree_name', tree_name, true, false, false);
                            return J$.Rt(720009, J$.T(720001, function (tree) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(719977, arguments.callee, this, arguments);
                                            arguments = J$.N(719985, 'arguments', arguments, true, false, false);
                                            tree = J$.N(719993, 'tree', tree, true, false, false);
                                            return J$.Rt(719969, J$.B(137642, '!==', J$.M(719953, J$.R(719905, 'assert_func', assert_func, false, true), J$.R(719913, 'tree_name', tree_name, false, false), false)(J$.G(719929, J$.R(719921, 'tree', tree, false, false), '_root'), J$.G(719945, J$.R(719937, 'tree', tree, false, false), '_comparator')), J$.T(719961, 0, 22, false)));
                                        } catch (J$e) {
                                            J$.Ex(721169, J$e);
                                        } finally {
                                            if (J$.Fr(721177))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(721185, J$e);
                        } finally {
                            if (J$.Fr(721193))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function run_test(assert, tree_assert, tree_class, test_path) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(720489, arguments.callee, this, arguments);
                            arguments = J$.N(720497, 'arguments', arguments, true, false, false);
                            assert = J$.N(720505, 'assert', assert, true, false, false);
                            tree_assert = J$.N(720513, 'tree_assert', tree_assert, true, false, false);
                            tree_class = J$.N(720521, 'tree_class', tree_class, true, false, false);
                            test_path = J$.N(720529, 'test_path', test_path, true, false, false);
                            J$.N(720537, 'tree', tree, false, false, false);
                            J$.N(720545, 'tests', tests, false, false, false);
                            J$.N(720553, 'elems', elems, false, false, false);
                            var tree = J$.W(720065, 'tree', J$.M(720057, J$.R(720041, 'loader', loader, false, true), 'new_tree', false)(J$.R(720049, 'tree_class', tree_class, false, false)), tree, false, false);
                            var tests = J$.W(720097, 'tests', J$.M(720089, J$.R(720073, 'loader', loader, false, true), 'load', false)(J$.R(720081, 'test_path', test_path, false, false)), tests, false, false);
                            var elems = J$.W(720113, 'elems', J$.T(720105, 0, 22, false), elems, false, false);
                            J$.M(720481, J$.R(720121, 'tests', tests, false, false), 'forEach', false)(J$.T(720473, function (n) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(720449, arguments.callee, this, arguments);
                                            arguments = J$.N(720457, 'arguments', arguments, true, false, false);
                                            n = J$.N(720465, 'n', n, true, false, false);
                                            if (J$.C(47200, J$.B(137650, '>', J$.R(720129, 'n', n, false, false), J$.T(720137, 0, 22, false)))) {
                                                J$.M(720177, J$.R(720145, 'assert', assert, false, false), 'ok', false)(J$.M(720169, J$.R(720153, 'tree', tree, false, false), 'insert', false)(J$.R(720161, 'n', n, false, false)));
                                                J$.M(720225, J$.R(720185, 'assert', assert, false, false), 'equal', false)(J$.M(720209, J$.R(720193, 'tree', tree, false, false), 'find', false)(J$.R(720201, 'n', n, false, false)), J$.R(720217, 'n', n, false, false));
                                                J$.B(137674, '-', elems = J$.W(720241, 'elems', J$.B(137666, '+', J$.U(137658, '+', J$.R(720233, 'elems', elems, false, false)), 1), elems, false, false), 1);
                                            } else {
                                                n = J$.W(720257, 'n', J$.U(137682, '-', J$.R(720249, 'n', n, false, false)), n, false, false);
                                                J$.M(720297, J$.R(720265, 'assert', assert, false, false), 'ok', false)(J$.M(720289, J$.R(720273, 'tree', tree, false, false), 'remove', false)(J$.R(720281, 'n', n, false, false)));
                                                J$.M(720345, J$.R(720305, 'assert', assert, false, false), 'equal', false)(J$.M(720329, J$.R(720313, 'tree', tree, false, false), 'find', false)(J$.R(720321, 'n', n, false, false)), J$.T(720337, null, 25, false));
                                                J$.B(137706, '+', elems = J$.W(720361, 'elems', J$.B(137698, '-', J$.U(137690, '+', J$.R(720353, 'elems', elems, false, false)), 1), elems, false, false), 1);
                                            }
                                            J$.M(720401, J$.R(720369, 'assert', assert, false, false), 'equal', false)(J$.G(720385, J$.R(720377, 'tree', tree, false, false), 'size'), J$.R(720393, 'elems', elems, false, false));
                                            J$.M(720441, J$.R(720409, 'assert', assert, false, false), 'ok', false)(J$.F(720433, J$.R(720417, 'tree_assert', tree_assert, false, false), false)(J$.R(720425, 'tree', tree, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(721201, J$e);
                                        } finally {
                                            if (J$.Fr(721209))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(721217, J$e);
                        } finally {
                            if (J$.Fr(721225))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(720977, 'fs', fs, false, false, false);
            J$.N(720985, 'assert', assert, false, false, false);
            J$.N(720993, 'loader', loader, false, false, false);
            J$.N(721001, 'BASE_DIR', BASE_DIR, false, false, false);
            J$.N(721009, 'TREES', TREES, false, false, false);
            bt_assert = J$.N(721025, 'bt_assert', J$.T(721017, bt_assert, 12, false), true, false, false);
            is_red = J$.N(721041, 'is_red', J$.T(721033, is_red, 12, false), true, false, false);
            rb_assert = J$.N(721057, 'rb_assert', J$.T(721049, rb_assert, 12, false), true, false, false);
            J$.N(721065, 'assert_func', assert_func, false, false, false);
            tree_assert = J$.N(721081, 'tree_assert', J$.T(721073, tree_assert, 12, false), true, false, false);
            run_test = J$.N(721097, 'run_test', J$.T(721089, run_test, 12, false), true, false, false);
            J$.N(721105, 'tests', tests, false, false, false);
            J$.N(721113, 'test_funcs', test_funcs, false, false, false);
            J$.T(718513, 'use strict', 21, false);
            J$.F(718537, J$.I(typeof require === 'undefined' ? require = J$.R(718521, 'require', undefined, true, true) : require = J$.R(718521, 'require', require, true, true)), false)(J$.T(718529, 'core-js/modules/es.array.find', 21, false));
            J$.F(718561, J$.I(typeof require === 'undefined' ? require = J$.R(718545, 'require', undefined, true, true) : require = J$.R(718545, 'require', require, true, true)), false)(J$.T(718553, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(718585, J$.I(typeof require === 'undefined' ? require = J$.R(718569, 'require', undefined, true, true) : require = J$.R(718569, 'require', require, true, true)), false)(J$.T(718577, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var fs = J$.W(718617, 'fs', J$.F(718609, J$.I(typeof require === 'undefined' ? require = J$.R(718593, 'require', undefined, true, true) : require = J$.R(718593, 'require', require, true, true)), false)(J$.T(718601, 'fs', 21, false)), fs, false, true);
            var assert = J$.W(718649, 'assert', J$.F(718641, J$.I(typeof require === 'undefined' ? require = J$.R(718625, 'require', undefined, true, true) : require = J$.R(718625, 'require', require, true, true)), false)(J$.T(718633, 'assert', 21, false)), assert, false, true);
            var loader = J$.W(718681, 'loader', J$.F(718673, J$.I(typeof require === 'undefined' ? require = J$.R(718657, 'require', undefined, true, true) : require = J$.R(718657, 'require', require, true, true)), false)(J$.T(718665, './loader', 21, false)), loader, false, true);
            var BASE_DIR = J$.W(718705, 'BASE_DIR', J$.B(137498, '+', J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(718689, '__dirname', undefined, true, true) : __dirname = J$.R(718689, '__dirname', __dirname, true, true)), J$.T(718697, '/samples', 21, false)), BASE_DIR, false, true);
            var TREES = J$.W(718737, 'TREES', J$.T(718729, [
                J$.T(718713, 'rbtree', 21, false),
                J$.T(718721, 'bintree', 21, false)
            ], 10, false), TREES, false, true);
            var assert_func = J$.W(719897, 'assert_func', J$.T(719889, {
                rbtree: J$.R(719873, 'rb_assert', rb_assert, false, true),
                bintree: J$.R(719881, 'bt_assert', bt_assert, false, true)
            }, 11, false), assert_func, false, true);
            var tests = J$.W(720585, 'tests', J$.M(720577, J$.R(720561, 'fs', fs, false, true), 'readdirSync', false)(J$.R(720569, 'BASE_DIR', BASE_DIR, false, true)), tests, false, true);
            var test_funcs = J$.W(720601, 'test_funcs', J$.T(720593, {}, 11, false), test_funcs, false, true);
            J$.M(720937, J$.R(720609, 'TREES', TREES, false, true), 'forEach', false)(J$.T(720929, function (tree) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(720897, arguments.callee, this, arguments);
                            arguments = J$.N(720905, 'arguments', arguments, true, false, false);
                            tree = J$.N(720913, 'tree', tree, true, false, false);
                            J$.N(720921, 'tree_class', tree_class, false, false, false);
                            var tree_class = J$.W(720649, 'tree_class', J$.F(720641, J$.I(typeof require === 'undefined' ? require = J$.R(720617, 'require', undefined, true, true) : require = J$.R(720617, 'require', require, true, true)), false)(J$.B(137714, '+', J$.T(720625, '../lib/', 21, false), J$.R(720633, 'tree', tree, false, false))), tree_class, false, false);
                            J$.M(720889, J$.R(720657, 'tests', tests, false, true), 'forEach', false)(J$.T(720881, function (test) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(720849, arguments.callee, this, arguments);
                                            arguments = J$.N(720857, 'arguments', arguments, true, false, false);
                                            test = J$.N(720865, 'test', test, true, false, false);
                                            J$.N(720873, 'test_path', test_path, false, false, false);
                                            var test_path = J$.W(720689, 'test_path', J$.B(137730, '+', J$.B(137722, '+', J$.R(720665, 'BASE_DIR', BASE_DIR, false, true), J$.T(720673, '/', 21, false)), J$.R(720681, 'test', test, false, false)), test_path, false, false);
                                            J$.P(720841, J$.R(720697, 'test_funcs', test_funcs, false, true), J$.B(137746, '+', J$.B(137738, '+', J$.R(720705, 'tree', tree, false, false), J$.T(720713, '_', 21, false)), J$.R(720721, 'test', test, false, false)), J$.T(720833, function (assert) {
                                                jalangiLabel7:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(720809, arguments.callee, this, arguments);
                                                            arguments = J$.N(720817, 'arguments', arguments, true, false, false);
                                                            assert = J$.N(720825, 'assert', assert, true, false, false);
                                                            J$.F(720785, J$.R(720729, 'run_test', run_test, false, true), false)(J$.R(720737, 'assert', assert, false, false), J$.F(720761, J$.R(720745, 'tree_assert', tree_assert, false, true), false)(J$.R(720753, 'tree', tree, false, false)), J$.R(720769, 'tree_class', tree_class, false, false), J$.R(720777, 'test_path', test_path, false, false));
                                                            J$.M(720801, J$.R(720793, 'assert', assert, false, false), 'done', false)();
                                                        } catch (J$e) {
                                                            J$.Ex(721233, J$e);
                                                        } finally {
                                                            if (J$.Fr(721241))
                                                                continue jalangiLabel7;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(721249, J$e);
                                        } finally {
                                            if (J$.Fr(721257))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(721265, J$e);
                        } finally {
                            if (J$.Fr(721273))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(720961, J$.I(typeof exports === 'undefined' ? exports = J$.R(720945, 'exports', undefined, true, true) : exports = J$.R(720945, 'exports', exports, true, true)), 'correctness', J$.R(720953, 'test_funcs', test_funcs, false, true));
        } catch (J$e) {
            J$.Ex(721281, J$e);
        } finally {
            if (J$.Sr(721289))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

