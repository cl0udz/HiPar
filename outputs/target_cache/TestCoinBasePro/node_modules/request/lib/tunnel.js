J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(1332497, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/request/lib/tunnel.js');
            function constructProxyHost(uriObject) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1330185, arguments.callee, this, arguments);
                            arguments = J$.N(1330193, 'arguments', arguments, true, false, false);
                            uriObject = J$.N(1330201, 'uriObject', uriObject, true, false, false);
                            J$.N(1330209, 'port', port, false, false, false);
                            J$.N(1330217, 'protocol', protocol, false, false, false);
                            J$.N(1330225, 'proxyHost', proxyHost, false, false, false);
                            var port = J$.W(1330009, 'port', J$.G(1330001, J$.R(1329993, 'uriObject', uriObject, false, false), 'port'), port, false, false);
                            var protocol = J$.W(1330033, 'protocol', J$.G(1330025, J$.R(1330017, 'uriObject', uriObject, false, false), 'protocol'), protocol, false, false);
                            var proxyHost = J$.W(1330065, 'proxyHost', J$.B(173602, '+', J$.G(1330049, J$.R(1330041, 'uriObject', uriObject, false, false), 'hostname'), J$.T(1330057, ':', 21, false)), proxyHost, false, false);
                            if (J$.C(69032, J$.R(1330073, 'port', port, false, false))) {
                                proxyHost = J$.W(1330097, 'proxyHost', J$.B(173610, '+', J$.R(1330089, 'proxyHost', proxyHost, false, false), J$.R(1330081, 'port', port, false, false)), proxyHost, false, false);
                            } else if (J$.C(69024, J$.B(173618, '===', J$.R(1330105, 'protocol', protocol, false, false), J$.T(1330113, 'https:', 21, false)))) {
                                proxyHost = J$.W(1330137, 'proxyHost', J$.B(173626, '+', J$.R(1330129, 'proxyHost', proxyHost, false, false), J$.T(1330121, '443', 21, false)), proxyHost, false, false);
                            } else {
                                proxyHost = J$.W(1330161, 'proxyHost', J$.B(173634, '+', J$.R(1330153, 'proxyHost', proxyHost, false, false), J$.T(1330145, '80', 21, false)), proxyHost, false, false);
                            }
                            return J$.Rt(1330177, J$.R(1330169, 'proxyHost', proxyHost, false, false));
                        } catch (J$e) {
                            J$.Ex(1332633, J$e);
                        } finally {
                            if (J$.Fr(1332641))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1330593, arguments.callee, this, arguments);
                            arguments = J$.N(1330601, 'arguments', arguments, true, false, false);
                            headers = J$.N(1330609, 'headers', headers, true, false, false);
                            proxyHeaderWhiteList = J$.N(1330617, 'proxyHeaderWhiteList', proxyHeaderWhiteList, true, false, false);
                            J$.N(1330625, 'whiteList', whiteList, false, false, false);
                            var whiteList = J$.W(1330353, 'whiteList', J$.M(1330345, J$.R(1330233, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false), 'reduce', false)(J$.T(1330329, function (set, header) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(1330297, arguments.callee, this, arguments);
                                            arguments = J$.N(1330305, 'arguments', arguments, true, false, false);
                                            set = J$.N(1330313, 'set', set, true, false, false);
                                            header = J$.N(1330321, 'header', header, true, false, false);
                                            J$.P(1330273, J$.R(1330241, 'set', set, false, false), J$.M(1330257, J$.R(1330249, 'header', header, false, false), 'toLowerCase', false)(), J$.T(1330265, true, 23, false));
                                            return J$.Rt(1330289, J$.R(1330281, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1332649, J$e);
                                        } finally {
                                            if (J$.Fr(1332657))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(1330337, {}, 11, false)), whiteList, false, false);
                            return J$.Rt(1330585, J$.M(1330577, J$.M(1330457, J$.M(1330377, J$.I(typeof Object === 'undefined' ? Object = J$.R(1330361, 'Object', undefined, true, true) : Object = J$.R(1330361, 'Object', Object, true, true)), 'keys', false)(J$.R(1330369, 'headers', headers, false, false)), 'filter', false)(J$.T(1330449, function (header) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(1330425, arguments.callee, this, arguments);
                                            arguments = J$.N(1330433, 'arguments', arguments, true, false, false);
                                            header = J$.N(1330441, 'header', header, true, false, false);
                                            return J$.Rt(1330417, J$.G(1330409, J$.R(1330385, 'whiteList', whiteList, false, false), J$.M(1330401, J$.R(1330393, 'header', header, false, false), 'toLowerCase', false)()));
                                        } catch (J$e) {
                                            J$.Ex(1332665, J$e);
                                        } finally {
                                            if (J$.Fr(1332673))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'reduce', false)(J$.T(1330561, function (set, header) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(1330529, arguments.callee, this, arguments);
                                            arguments = J$.N(1330537, 'arguments', arguments, true, false, false);
                                            set = J$.N(1330545, 'set', set, true, false, false);
                                            header = J$.N(1330553, 'header', header, true, false, false);
                                            J$.P(1330505, J$.R(1330465, 'set', set, false, false), J$.R(1330473, 'header', header, false, false), J$.G(1330497, J$.R(1330481, 'headers', headers, false, false), J$.R(1330489, 'header', header, false, false)));
                                            return J$.Rt(1330521, J$.R(1330513, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1332681, J$e);
                                        } finally {
                                            if (J$.Fr(1332689))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(1330569, {}, 11, false)));
                        } catch (J$e) {
                            J$.Ex(1332697, J$e);
                        } finally {
                            if (J$.Fr(1332705))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelOptions(request, proxyHeaders) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1330913, arguments.callee, this, arguments);
                            arguments = J$.N(1330921, 'arguments', arguments, true, false, false);
                            request = J$.N(1330929, 'request', request, true, false, false);
                            proxyHeaders = J$.N(1330937, 'proxyHeaders', proxyHeaders, true, false, false);
                            J$.N(1330945, 'proxy', proxy, false, false, false);
                            J$.N(1330953, 'tunnelOptions', tunnelOptions, false, false, false);
                            var proxy = J$.W(1330649, 'proxy', J$.G(1330641, J$.R(1330633, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelOptions = J$.W(1330889, 'tunnelOptions', J$.T(1330881, {
                                proxy: J$.T(1330713, {
                                    host: J$.G(1330665, J$.R(1330657, 'proxy', proxy, false, false), 'hostname'),
                                    port: J$.U(173642, '+', J$.G(1330681, J$.R(1330673, 'proxy', proxy, false, false), 'port')),
                                    proxyAuth: J$.G(1330697, J$.R(1330689, 'proxy', proxy, false, false), 'auth'),
                                    headers: J$.R(1330705, 'proxyHeaders', proxyHeaders, false, false)
                                }, 11, false),
                                headers: J$.G(1330729, J$.R(1330721, 'request', request, false, false), 'headers'),
                                ca: J$.G(1330745, J$.R(1330737, 'request', request, false, false), 'ca'),
                                cert: J$.G(1330761, J$.R(1330753, 'request', request, false, false), 'cert'),
                                key: J$.G(1330777, J$.R(1330769, 'request', request, false, false), 'key'),
                                passphrase: J$.G(1330793, J$.R(1330785, 'request', request, false, false), 'passphrase'),
                                pfx: J$.G(1330809, J$.R(1330801, 'request', request, false, false), 'pfx'),
                                ciphers: J$.G(1330825, J$.R(1330817, 'request', request, false, false), 'ciphers'),
                                rejectUnauthorized: J$.G(1330841, J$.R(1330833, 'request', request, false, false), 'rejectUnauthorized'),
                                secureOptions: J$.G(1330857, J$.R(1330849, 'request', request, false, false), 'secureOptions'),
                                secureProtocol: J$.G(1330873, J$.R(1330865, 'request', request, false, false), 'secureProtocol')
                            }, 11, false), tunnelOptions, false, false);
                            return J$.Rt(1330905, J$.R(1330897, 'tunnelOptions', tunnelOptions, false, false));
                        } catch (J$e) {
                            J$.Ex(1332713, J$e);
                        } finally {
                            if (J$.Fr(1332721))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelFnName(uri, proxy) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1331105, arguments.callee, this, arguments);
                            arguments = J$.N(1331113, 'arguments', arguments, true, false, false);
                            uri = J$.N(1331121, 'uri', uri, true, false, false);
                            proxy = J$.N(1331129, 'proxy', proxy, true, false, false);
                            J$.N(1331137, 'uriProtocol', uriProtocol, false, false, false);
                            J$.N(1331145, 'proxyProtocol', proxyProtocol, false, false, false);
                            var uriProtocol = J$.W(1331001, 'uriProtocol', J$.C(69040, J$.B(173650, '===', J$.G(1330969, J$.R(1330961, 'uri', uri, false, false), 'protocol'), J$.T(1330977, 'https:', 21, false))) ? J$.T(1330985, 'https', 21, false) : J$.T(1330993, 'http', 21, false), uriProtocol, false, false);
                            var proxyProtocol = J$.W(1331049, 'proxyProtocol', J$.C(69048, J$.B(173658, '===', J$.G(1331017, J$.R(1331009, 'proxy', proxy, false, false), 'protocol'), J$.T(1331025, 'https:', 21, false))) ? J$.T(1331033, 'Https', 21, false) : J$.T(1331041, 'Http', 21, false), proxyProtocol, false, false);
                            return J$.Rt(1331097, J$.M(1331089, J$.T(1331073, [
                                J$.R(1331057, 'uriProtocol', uriProtocol, false, false),
                                J$.R(1331065, 'proxyProtocol', proxyProtocol, false, false)
                            ], 10, false), 'join', false)(J$.T(1331081, 'Over', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1332729, J$e);
                        } finally {
                            if (J$.Fr(1332737))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getTunnelFn(request) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1331273, arguments.callee, this, arguments);
                            arguments = J$.N(1331281, 'arguments', arguments, true, false, false);
                            request = J$.N(1331289, 'request', request, true, false, false);
                            J$.N(1331297, 'uri', uri, false, false, false);
                            J$.N(1331305, 'proxy', proxy, false, false, false);
                            J$.N(1331313, 'tunnelFnName', tunnelFnName, false, false, false);
                            var uri = J$.W(1331169, 'uri', J$.G(1331161, J$.R(1331153, 'request', request, false, false), 'uri'), uri, false, false);
                            var proxy = J$.W(1331193, 'proxy', J$.G(1331185, J$.R(1331177, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelFnName = J$.W(1331233, 'tunnelFnName', J$.F(1331225, J$.R(1331201, 'constructTunnelFnName', constructTunnelFnName, false, true), false)(J$.R(1331209, 'uri', uri, false, false), J$.R(1331217, 'proxy', proxy, false, false)), tunnelFnName, false, false);
                            return J$.Rt(1331265, J$.G(1331257, J$.R(1331241, 'tunnel', tunnel, false, true), J$.R(1331249, 'tunnelFnName', tunnelFnName, false, false)));
                        } catch (J$e) {
                            J$.Ex(1332745, J$e);
                        } finally {
                            if (J$.Fr(1332753))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Tunnel(request) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1331449, arguments.callee, this, arguments);
                            arguments = J$.N(1331457, 'arguments', arguments, true, false, false);
                            request = J$.N(1331465, 'request', request, true, false, false);
                            J$.P(1331337, J$.R(1331321, 'this', this, false, false), 'request', J$.R(1331329, 'request', request, false, false));
                            J$.P(1331361, J$.R(1331345, 'this', this, false, false), 'proxyHeaderWhiteList', J$.R(1331353, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
                            J$.P(1331385, J$.R(1331369, 'this', this, false, false), 'proxyHeaderExclusiveList', J$.T(1331377, [], 10, false));
                            if (J$.C(69056, J$.B(173674, '!==', J$.U(173666, 'typeof', J$.G(1331401, J$.R(1331393, 'request', request, false, false), 'tunnel')), J$.T(1331409, 'undefined', 21, false)))) {
                                J$.P(1331441, J$.R(1331417, 'this', this, false, false), 'tunnelOverride', J$.G(1331433, J$.R(1331425, 'request', request, false, false), 'tunnel'));
                            }
                        } catch (J$e) {
                            J$.Ex(1332761, J$e);
                        } finally {
                            if (J$.Fr(1332769))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1332505, 'url', url, false, false, false);
            J$.N(1332513, 'tunnel', tunnel, false, false, false);
            J$.N(1332521, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, false, false);
            J$.N(1332529, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, false, false);
            constructProxyHost = J$.N(1332545, 'constructProxyHost', J$.T(1332537, constructProxyHost, 12, false), true, false, false);
            constructProxyHeaderWhiteList = J$.N(1332561, 'constructProxyHeaderWhiteList', J$.T(1332553, constructProxyHeaderWhiteList, 12, false), true, false, false);
            constructTunnelOptions = J$.N(1332577, 'constructTunnelOptions', J$.T(1332569, constructTunnelOptions, 12, false), true, false, false);
            constructTunnelFnName = J$.N(1332593, 'constructTunnelFnName', J$.T(1332585, constructTunnelFnName, 12, false), true, false, false);
            getTunnelFn = J$.N(1332609, 'getTunnelFn', J$.T(1332601, getTunnelFn, 12, false), true, false, false);
            Tunnel = J$.N(1332625, 'Tunnel', J$.T(1332617, Tunnel, 12, false), true, false, false);
            J$.T(1329545, 'use strict', 21, false);
            J$.F(1329569, J$.I(typeof require === 'undefined' ? require = J$.R(1329553, 'require', undefined, true, true) : require = J$.R(1329553, 'require', require, true, true)), false)(J$.T(1329561, 'core-js/modules/es.array.concat', 21, false));
            J$.F(1329593, J$.I(typeof require === 'undefined' ? require = J$.R(1329577, 'require', undefined, true, true) : require = J$.R(1329577, 'require', require, true, true)), false)(J$.T(1329585, 'core-js/modules/es.array.filter', 21, false));
            J$.F(1329617, J$.I(typeof require === 'undefined' ? require = J$.R(1329601, 'require', undefined, true, true) : require = J$.R(1329601, 'require', require, true, true)), false)(J$.T(1329609, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(1329641, J$.I(typeof require === 'undefined' ? require = J$.R(1329625, 'require', undefined, true, true) : require = J$.R(1329625, 'require', require, true, true)), false)(J$.T(1329633, 'core-js/modules/es.array.join', 21, false));
            J$.F(1329665, J$.I(typeof require === 'undefined' ? require = J$.R(1329649, 'require', undefined, true, true) : require = J$.R(1329649, 'require', require, true, true)), false)(J$.T(1329657, 'core-js/modules/es.array.reduce', 21, false));
            J$.F(1329689, J$.I(typeof require === 'undefined' ? require = J$.R(1329673, 'require', undefined, true, true) : require = J$.R(1329673, 'require', require, true, true)), false)(J$.T(1329681, 'core-js/modules/es.object.keys', 21, false));
            J$.F(1329713, J$.I(typeof require === 'undefined' ? require = J$.R(1329697, 'require', undefined, true, true) : require = J$.R(1329697, 'require', require, true, true)), false)(J$.T(1329705, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var url = J$.W(1329745, 'url', J$.F(1329737, J$.I(typeof require === 'undefined' ? require = J$.R(1329721, 'require', undefined, true, true) : require = J$.R(1329721, 'require', require, true, true)), false)(J$.T(1329729, 'url', 21, false)), url, false, true);
            var tunnel = J$.W(1329777, 'tunnel', J$.F(1329769, J$.I(typeof require === 'undefined' ? require = J$.R(1329753, 'require', undefined, true, true) : require = J$.R(1329753, 'require', require, true, true)), false)(J$.T(1329761, 'tunnel-agent', 21, false)), tunnel, false, true);
            var defaultProxyHeaderWhiteList = J$.W(1329961, 'defaultProxyHeaderWhiteList', J$.T(1329953, [
                J$.T(1329785, 'accept', 21, false),
                J$.T(1329793, 'accept-charset', 21, false),
                J$.T(1329801, 'accept-encoding', 21, false),
                J$.T(1329809, 'accept-language', 21, false),
                J$.T(1329817, 'accept-ranges', 21, false),
                J$.T(1329825, 'cache-control', 21, false),
                J$.T(1329833, 'content-encoding', 21, false),
                J$.T(1329841, 'content-language', 21, false),
                J$.T(1329849, 'content-location', 21, false),
                J$.T(1329857, 'content-md5', 21, false),
                J$.T(1329865, 'content-range', 21, false),
                J$.T(1329873, 'content-type', 21, false),
                J$.T(1329881, 'connection', 21, false),
                J$.T(1329889, 'date', 21, false),
                J$.T(1329897, 'expect', 21, false),
                J$.T(1329905, 'max-forwards', 21, false),
                J$.T(1329913, 'pragma', 21, false),
                J$.T(1329921, 'referer', 21, false),
                J$.T(1329929, 'te', 21, false),
                J$.T(1329937, 'user-agent', 21, false),
                J$.T(1329945, 'via', 21, false)
            ], 10, false), defaultProxyHeaderWhiteList, false, true);
            var defaultProxyHeaderExclusiveList = J$.W(1329985, 'defaultProxyHeaderExclusiveList', J$.T(1329977, [J$.T(1329969, 'proxy-authorization', 21, false)], 10, false), defaultProxyHeaderExclusiveList, false, true);
            J$.P(1331681, J$.G(1331481, J$.R(1331473, 'Tunnel', Tunnel, false, true), 'prototype'), 'isEnabled', J$.T(1331673, function () {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1331641, arguments.callee, this, arguments);
                            arguments = J$.N(1331649, 'arguments', arguments, true, false, false);
                            J$.N(1331657, 'self', self, false, false, false);
                            J$.N(1331665, 'request', request, false, false, false);
                            var self = J$.W(1331497, 'self', J$.R(1331489, 'this', this, false, false), self, false, false);
                            var request = J$.W(1331521, 'request', J$.G(1331513, J$.R(1331505, 'self', self, false, false), 'request'), request, false, false);
                            if (J$.C(69064, J$.B(173690, '!==', J$.U(173682, 'typeof', J$.G(1331537, J$.R(1331529, 'self', self, false, false), 'tunnelOverride')), J$.T(1331545, 'undefined', 21, false)))) {
                                return J$.Rt(1331569, J$.G(1331561, J$.R(1331553, 'self', self, false, false), 'tunnelOverride'));
                            }
                            if (J$.C(69072, J$.B(173698, '===', J$.G(1331593, J$.G(1331585, J$.R(1331577, 'request', request, false, false), 'uri'), 'protocol'), J$.T(1331601, 'https:', 21, false)))) {
                                return J$.Rt(1331617, J$.T(1331609, true, 23, false));
                            }
                            return J$.Rt(1331633, J$.T(1331625, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(1332777, J$e);
                        } finally {
                            if (J$.Fr(1332785))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1332417, J$.G(1331697, J$.R(1331689, 'Tunnel', Tunnel, false, true), 'prototype'), 'setup', J$.T(1332409, function (options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(1332329, arguments.callee, this, arguments);
                            arguments = J$.N(1332337, 'arguments', arguments, true, false, false);
                            options = J$.N(1332345, 'options', options, true, false, false);
                            J$.N(1332353, 'self', self, false, false, false);
                            J$.N(1332361, 'request', request, false, false, false);
                            J$.N(1332369, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false, false);
                            J$.N(1332377, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false, false);
                            J$.N(1332385, 'proxyHeaders', proxyHeaders, false, false, false);
                            J$.N(1332393, 'tunnelFn', tunnelFn, false, false, false);
                            J$.N(1332401, 'tunnelOptions', tunnelOptions, false, false, false);
                            var self = J$.W(1331713, 'self', J$.R(1331705, 'this', this, false, false), self, false, false);
                            var request = J$.W(1331737, 'request', J$.G(1331729, J$.R(1331721, 'self', self, false, false), 'request'), request, false, false);
                            options = J$.W(1331761, 'options', J$.C(69080, J$.R(1331745, 'options', options, false, false)) ? J$._() : J$.T(1331753, {}, 11, false), options, false, false);
                            if (J$.C(69088, J$.B(173714, '===', J$.U(173706, 'typeof', J$.G(1331777, J$.R(1331769, 'request', request, false, false), 'proxy')), J$.T(1331785, 'string', 21, false)))) {
                                J$.P(1331833, J$.R(1331793, 'request', request, false, false), 'proxy', J$.M(1331825, J$.R(1331801, 'url', url, false, true), 'parse', false)(J$.G(1331817, J$.R(1331809, 'request', request, false, false), 'proxy')));
                            }
                            if (J$.C(69104, J$.C(69096, J$.U(173722, '!', J$.G(1331849, J$.R(1331841, 'request', request, false, false), 'proxy'))) ? J$._() : J$.U(173730, '!', J$.G(1331865, J$.R(1331857, 'request', request, false, false), 'tunnel')))) {
                                return J$.Rt(1331881, J$.T(1331873, false, 23, false));
                            }
                            if (J$.C(69112, J$.G(1331897, J$.R(1331889, 'options', options, false, false), 'proxyHeaderWhiteList'))) {
                                J$.P(1331929, J$.R(1331905, 'self', self, false, false), 'proxyHeaderWhiteList', J$.G(1331921, J$.R(1331913, 'options', options, false, false), 'proxyHeaderWhiteList'));
                            }
                            if (J$.C(69120, J$.G(1331945, J$.R(1331937, 'options', options, false, false), 'proxyHeaderExclusiveList'))) {
                                J$.P(1331977, J$.R(1331953, 'self', self, false, false), 'proxyHeaderExclusiveList', J$.G(1331969, J$.R(1331961, 'options', options, false, false), 'proxyHeaderExclusiveList'));
                            }
                            var proxyHeaderExclusiveList = J$.W(1332017, 'proxyHeaderExclusiveList', J$.M(1332009, J$.G(1331993, J$.R(1331985, 'self', self, false, false), 'proxyHeaderExclusiveList'), 'concat', false)(J$.R(1332001, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true)), proxyHeaderExclusiveList, false, false);
                            var proxyHeaderWhiteList = J$.W(1332057, 'proxyHeaderWhiteList', J$.M(1332049, J$.G(1332033, J$.R(1332025, 'self', self, false, false), 'proxyHeaderWhiteList'), 'concat', false)(J$.R(1332041, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false)), proxyHeaderWhiteList, false, false);
                            var proxyHeaders = J$.W(1332105, 'proxyHeaders', J$.F(1332097, J$.R(1332065, 'constructProxyHeaderWhiteList', constructProxyHeaderWhiteList, false, true), false)(J$.G(1332081, J$.R(1332073, 'request', request, false, false), 'headers'), J$.R(1332089, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false)), proxyHeaders, false, false);
                            J$.P(1332153, J$.R(1332113, 'proxyHeaders', proxyHeaders, false, false), 'host', J$.F(1332145, J$.R(1332121, 'constructProxyHost', constructProxyHost, false, true), false)(J$.G(1332137, J$.R(1332129, 'request', request, false, false), 'uri')));
                            J$.M(1332193, J$.R(1332161, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false), 'forEach', false)(J$.G(1332177, J$.R(1332169, 'request', request, false, false), 'removeHeader'), J$.R(1332185, 'request', request, false, false));
                            var tunnelFn = J$.W(1332225, 'tunnelFn', J$.F(1332217, J$.R(1332201, 'getTunnelFn', getTunnelFn, false, true), false)(J$.R(1332209, 'request', request, false, false)), tunnelFn, false, false);
                            var tunnelOptions = J$.W(1332265, 'tunnelOptions', J$.F(1332257, J$.R(1332233, 'constructTunnelOptions', constructTunnelOptions, false, true), false)(J$.R(1332241, 'request', request, false, false), J$.R(1332249, 'proxyHeaders', proxyHeaders, false, false)), tunnelOptions, false, false);
                            J$.P(1332305, J$.R(1332273, 'request', request, false, false), 'agent', J$.F(1332297, J$.R(1332281, 'tunnelFn', tunnelFn, false, false), false)(J$.R(1332289, 'tunnelOptions', tunnelOptions, false, false)));
                            return J$.Rt(1332321, J$.T(1332313, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(1332793, J$e);
                        } finally {
                            if (J$.Fr(1332801))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1332441, J$.R(1332425, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderWhiteList', J$.R(1332433, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
            J$.P(1332465, J$.R(1332449, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderExclusiveList', J$.R(1332457, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true));
            J$.P(1332489, J$.I(typeof exports === 'undefined' ? exports = J$.R(1332473, 'exports', undefined, true, true) : exports = J$.R(1332473, 'exports', exports, true, true)), 'Tunnel', J$.R(1332481, 'Tunnel', Tunnel, false, true));
        } catch (J$e) {
            J$.Ex(1332809, J$e);
        } finally {
            if (J$.Sr(1332817))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

