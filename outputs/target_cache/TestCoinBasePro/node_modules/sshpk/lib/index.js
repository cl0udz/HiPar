J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(1533025, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/index.js');
            J$.N(1533033, 'Key', Key, false, false, false);
            J$.N(1533041, 'Fingerprint', Fingerprint, false, false, false);
            J$.N(1533049, 'Signature', Signature, false, false, false);
            J$.N(1533057, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(1533065, 'Certificate', Certificate, false, false, false);
            J$.N(1533073, 'Identity', Identity, false, false, false);
            J$.N(1533081, 'errs', errs, false, false, false);
            J$.T(1532417, 'use strict', 21, false);
            var Key = J$.W(1532449, 'Key', J$.F(1532441, J$.I(typeof require === 'undefined' ? require = J$.R(1532425, 'require', undefined, true, true) : require = J$.R(1532425, 'require', require, true, true)), false)(J$.T(1532433, './key', 21, false)), Key, false, true);
            var Fingerprint = J$.W(1532481, 'Fingerprint', J$.F(1532473, J$.I(typeof require === 'undefined' ? require = J$.R(1532457, 'require', undefined, true, true) : require = J$.R(1532457, 'require', require, true, true)), false)(J$.T(1532465, './fingerprint', 21, false)), Fingerprint, false, true);
            var Signature = J$.W(1532513, 'Signature', J$.F(1532505, J$.I(typeof require === 'undefined' ? require = J$.R(1532489, 'require', undefined, true, true) : require = J$.R(1532489, 'require', require, true, true)), false)(J$.T(1532497, './signature', 21, false)), Signature, false, true);
            var PrivateKey = J$.W(1532545, 'PrivateKey', J$.F(1532537, J$.I(typeof require === 'undefined' ? require = J$.R(1532521, 'require', undefined, true, true) : require = J$.R(1532521, 'require', require, true, true)), false)(J$.T(1532529, './private-key', 21, false)), PrivateKey, false, true);
            var Certificate = J$.W(1532577, 'Certificate', J$.F(1532569, J$.I(typeof require === 'undefined' ? require = J$.R(1532553, 'require', undefined, true, true) : require = J$.R(1532553, 'require', require, true, true)), false)(J$.T(1532561, './certificate', 21, false)), Certificate, false, true);
            var Identity = J$.W(1532609, 'Identity', J$.F(1532601, J$.I(typeof require === 'undefined' ? require = J$.R(1532585, 'require', undefined, true, true) : require = J$.R(1532585, 'require', require, true, true)), false)(J$.T(1532593, './identity', 21, false)), Identity, false, true);
            var errs = J$.W(1532641, 'errs', J$.F(1532633, J$.I(typeof require === 'undefined' ? require = J$.R(1532617, 'require', undefined, true, true) : require = J$.R(1532617, 'require', require, true, true)), false)(J$.T(1532625, './errors', 21, false)), errs, false, true);
            J$.P(1533017, J$.I(typeof module === 'undefined' ? module = J$.R(1532649, 'module', undefined, true, true) : module = J$.R(1532649, 'module', module, true, true)), 'exports', J$.T(1533009, {
                Key: J$.R(1532657, 'Key', Key, false, true),
                parseKey: J$.G(1532673, J$.R(1532665, 'Key', Key, false, true), 'parse'),
                Fingerprint: J$.R(1532681, 'Fingerprint', Fingerprint, false, true),
                parseFingerprint: J$.G(1532697, J$.R(1532689, 'Fingerprint', Fingerprint, false, true), 'parse'),
                Signature: J$.R(1532705, 'Signature', Signature, false, true),
                parseSignature: J$.G(1532721, J$.R(1532713, 'Signature', Signature, false, true), 'parse'),
                PrivateKey: J$.R(1532729, 'PrivateKey', PrivateKey, false, true),
                parsePrivateKey: J$.G(1532745, J$.R(1532737, 'PrivateKey', PrivateKey, false, true), 'parse'),
                generatePrivateKey: J$.G(1532761, J$.R(1532753, 'PrivateKey', PrivateKey, false, true), 'generate'),
                Certificate: J$.R(1532769, 'Certificate', Certificate, false, true),
                parseCertificate: J$.G(1532785, J$.R(1532777, 'Certificate', Certificate, false, true), 'parse'),
                createSelfSignedCertificate: J$.G(1532801, J$.R(1532793, 'Certificate', Certificate, false, true), 'createSelfSigned'),
                createCertificate: J$.G(1532817, J$.R(1532809, 'Certificate', Certificate, false, true), 'create'),
                Identity: J$.R(1532825, 'Identity', Identity, false, true),
                identityFromDN: J$.G(1532841, J$.R(1532833, 'Identity', Identity, false, true), 'parseDN'),
                identityForHost: J$.G(1532857, J$.R(1532849, 'Identity', Identity, false, true), 'forHost'),
                identityForUser: J$.G(1532873, J$.R(1532865, 'Identity', Identity, false, true), 'forUser'),
                identityForEmail: J$.G(1532889, J$.R(1532881, 'Identity', Identity, false, true), 'forEmail'),
                identityFromArray: J$.G(1532905, J$.R(1532897, 'Identity', Identity, false, true), 'fromArray'),
                FingerprintFormatError: J$.G(1532921, J$.R(1532913, 'errs', errs, false, true), 'FingerprintFormatError'),
                InvalidAlgorithmError: J$.G(1532937, J$.R(1532929, 'errs', errs, false, true), 'InvalidAlgorithmError'),
                KeyParseError: J$.G(1532953, J$.R(1532945, 'errs', errs, false, true), 'KeyParseError'),
                SignatureParseError: J$.G(1532969, J$.R(1532961, 'errs', errs, false, true), 'SignatureParseError'),
                KeyEncryptedError: J$.G(1532985, J$.R(1532977, 'errs', errs, false, true), 'KeyEncryptedError'),
                CertificateParseError: J$.G(1533001, J$.R(1532993, 'errs', errs, false, true), 'CertificateParseError')
            }, 11, false));
        } catch (J$e) {
            J$.Ex(1533089, J$e);
        } finally {
            if (J$.Sr(1533097))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

