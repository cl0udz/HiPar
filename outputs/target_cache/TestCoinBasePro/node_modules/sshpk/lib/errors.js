J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(1429649, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/errors.js');
            function FingerprintFormatError(fp, format) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1428201, arguments.callee, this, arguments);
                            arguments = J$.N(1428209, 'arguments', arguments, true, false, false);
                            fp = J$.N(1428217, 'fp', fp, true, false, false);
                            format = J$.N(1428225, 'format', format, true, false, false);
                            if (J$.C(74216, J$.G(1427969, J$.I(typeof Error === 'undefined' ? Error = J$.R(1427961, 'Error', undefined, true, true) : Error = J$.R(1427961, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1428001, J$.I(typeof Error === 'undefined' ? Error = J$.R(1427977, 'Error', undefined, true, true) : Error = J$.R(1427977, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1427985, 'this', this, false, false), J$.R(1427993, 'FingerprintFormatError', FingerprintFormatError, false, true));
                            J$.P(1428025, J$.R(1428009, 'this', this, false, false), 'name', J$.T(1428017, 'FingerprintFormatError', 21, false));
                            J$.P(1428049, J$.R(1428033, 'this', this, false, false), 'fingerprint', J$.R(1428041, 'fp', fp, false, false));
                            J$.P(1428073, J$.R(1428057, 'this', this, false, false), 'format', J$.R(1428065, 'format', format, false, false));
                            J$.P(1428097, J$.R(1428081, 'this', this, false, false), 'message', J$.T(1428089, 'Fingerprint format is not supported, or is invalid: ', 21, false));
                            if (J$.C(74224, J$.B(179642, '!==', J$.R(1428105, 'fp', fp, false, false), J$.T(1428113, undefined, 24, false))))
                                J$.A(1428145, J$.R(1428121, 'this', this, false, false), 'message', '+')(J$.B(179650, '+', J$.T(1428129, ' fingerprint = ', 21, false), J$.R(1428137, 'fp', fp, false, false)));
                            if (J$.C(74232, J$.B(179658, '!==', J$.R(1428153, 'format', format, false, false), J$.T(1428161, undefined, 24, false))))
                                J$.A(1428193, J$.R(1428169, 'this', this, false, false), 'message', '+')(J$.B(179666, '+', J$.T(1428177, ' format = ', 21, false), J$.R(1428185, 'format', format, false, false)));
                        } catch (J$e) {
                            J$.Ex(1429769, J$e);
                        } finally {
                            if (J$.Fr(1429777))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function InvalidAlgorithmError(alg) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1428401, arguments.callee, this, arguments);
                            arguments = J$.N(1428409, 'arguments', arguments, true, false, false);
                            alg = J$.N(1428417, 'alg', alg, true, false, false);
                            if (J$.C(74240, J$.G(1428273, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428265, 'Error', undefined, true, true) : Error = J$.R(1428265, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1428305, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428281, 'Error', undefined, true, true) : Error = J$.R(1428281, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1428289, 'this', this, false, false), J$.R(1428297, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true));
                            J$.P(1428329, J$.R(1428313, 'this', this, false, false), 'name', J$.T(1428321, 'InvalidAlgorithmError', 21, false));
                            J$.P(1428353, J$.R(1428337, 'this', this, false, false), 'algorithm', J$.R(1428345, 'alg', alg, false, false));
                            J$.P(1428393, J$.R(1428361, 'this', this, false, false), 'message', J$.B(179682, '+', J$.B(179674, '+', J$.T(1428369, 'Algorithm "', 21, false), J$.R(1428377, 'alg', alg, false, false)), J$.T(1428385, '" is not supported', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1429785, J$e);
                        } finally {
                            if (J$.Fr(1429793))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyParseError(name, format, innerErr) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1428673, arguments.callee, this, arguments);
                            arguments = J$.N(1428681, 'arguments', arguments, true, false, false);
                            name = J$.N(1428689, 'name', name, true, false, false);
                            format = J$.N(1428697, 'format', format, true, false, false);
                            innerErr = J$.N(1428705, 'innerErr', innerErr, true, false, false);
                            if (J$.C(74248, J$.G(1428465, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428457, 'Error', undefined, true, true) : Error = J$.R(1428457, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1428497, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428473, 'Error', undefined, true, true) : Error = J$.R(1428473, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1428481, 'this', this, false, false), J$.R(1428489, 'KeyParseError', KeyParseError, false, true));
                            J$.P(1428521, J$.R(1428505, 'this', this, false, false), 'name', J$.T(1428513, 'KeyParseError', 21, false));
                            J$.P(1428545, J$.R(1428529, 'this', this, false, false), 'format', J$.R(1428537, 'format', format, false, false));
                            J$.P(1428569, J$.R(1428553, 'this', this, false, false), 'keyName', J$.R(1428561, 'name', name, false, false));
                            J$.P(1428593, J$.R(1428577, 'this', this, false, false), 'innerErr', J$.R(1428585, 'innerErr', innerErr, false, false));
                            J$.P(1428665, J$.R(1428601, 'this', this, false, false), 'message', J$.B(179722, '+', J$.B(179714, '+', J$.B(179706, '+', J$.B(179698, '+', J$.B(179690, '+', J$.T(1428609, 'Failed to parse ', 21, false), J$.R(1428617, 'name', name, false, false)), J$.T(1428625, ' as a valid ', 21, false)), J$.R(1428633, 'format', format, false, false)), J$.T(1428641, ' format key: ', 21, false)), J$.G(1428657, J$.R(1428649, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(1429801, J$e);
                        } finally {
                            if (J$.Fr(1429809))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SignatureParseError(type, format, innerErr) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1428961, arguments.callee, this, arguments);
                            arguments = J$.N(1428969, 'arguments', arguments, true, false, false);
                            type = J$.N(1428977, 'type', type, true, false, false);
                            format = J$.N(1428985, 'format', format, true, false, false);
                            innerErr = J$.N(1428993, 'innerErr', innerErr, true, false, false);
                            if (J$.C(74256, J$.G(1428753, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428745, 'Error', undefined, true, true) : Error = J$.R(1428745, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1428785, J$.I(typeof Error === 'undefined' ? Error = J$.R(1428761, 'Error', undefined, true, true) : Error = J$.R(1428761, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1428769, 'this', this, false, false), J$.R(1428777, 'SignatureParseError', SignatureParseError, false, true));
                            J$.P(1428809, J$.R(1428793, 'this', this, false, false), 'name', J$.T(1428801, 'SignatureParseError', 21, false));
                            J$.P(1428833, J$.R(1428817, 'this', this, false, false), 'type', J$.R(1428825, 'type', type, false, false));
                            J$.P(1428857, J$.R(1428841, 'this', this, false, false), 'format', J$.R(1428849, 'format', format, false, false));
                            J$.P(1428881, J$.R(1428865, 'this', this, false, false), 'innerErr', J$.R(1428873, 'innerErr', innerErr, false, false));
                            J$.P(1428953, J$.R(1428889, 'this', this, false, false), 'message', J$.B(179762, '+', J$.B(179754, '+', J$.B(179746, '+', J$.B(179738, '+', J$.B(179730, '+', J$.T(1428897, 'Failed to parse the given data as a ', 21, false), J$.R(1428905, 'type', type, false, false)), J$.T(1428913, ' signature in ', 21, false)), J$.R(1428921, 'format', format, false, false)), J$.T(1428929, ' format: ', 21, false)), J$.G(1428945, J$.R(1428937, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(1429817, J$e);
                        } finally {
                            if (J$.Fr(1429825))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function CertificateParseError(name, format, innerErr) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1429249, arguments.callee, this, arguments);
                            arguments = J$.N(1429257, 'arguments', arguments, true, false, false);
                            name = J$.N(1429265, 'name', name, true, false, false);
                            format = J$.N(1429273, 'format', format, true, false, false);
                            innerErr = J$.N(1429281, 'innerErr', innerErr, true, false, false);
                            if (J$.C(74264, J$.G(1429041, J$.I(typeof Error === 'undefined' ? Error = J$.R(1429033, 'Error', undefined, true, true) : Error = J$.R(1429033, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1429073, J$.I(typeof Error === 'undefined' ? Error = J$.R(1429049, 'Error', undefined, true, true) : Error = J$.R(1429049, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1429057, 'this', this, false, false), J$.R(1429065, 'CertificateParseError', CertificateParseError, false, true));
                            J$.P(1429097, J$.R(1429081, 'this', this, false, false), 'name', J$.T(1429089, 'CertificateParseError', 21, false));
                            J$.P(1429121, J$.R(1429105, 'this', this, false, false), 'format', J$.R(1429113, 'format', format, false, false));
                            J$.P(1429145, J$.R(1429129, 'this', this, false, false), 'certName', J$.R(1429137, 'name', name, false, false));
                            J$.P(1429169, J$.R(1429153, 'this', this, false, false), 'innerErr', J$.R(1429161, 'innerErr', innerErr, false, false));
                            J$.P(1429241, J$.R(1429177, 'this', this, false, false), 'message', J$.B(179802, '+', J$.B(179794, '+', J$.B(179786, '+', J$.B(179778, '+', J$.B(179770, '+', J$.T(1429185, 'Failed to parse ', 21, false), J$.R(1429193, 'name', name, false, false)), J$.T(1429201, ' as a valid ', 21, false)), J$.R(1429209, 'format', format, false, false)), J$.T(1429217, ' format certificate: ', 21, false)), J$.G(1429233, J$.R(1429225, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(1429833, J$e);
                        } finally {
                            if (J$.Fr(1429841))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyEncryptedError(name, format) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1429513, arguments.callee, this, arguments);
                            arguments = J$.N(1429521, 'arguments', arguments, true, false, false);
                            name = J$.N(1429529, 'name', name, true, false, false);
                            format = J$.N(1429537, 'format', format, true, false, false);
                            if (J$.C(74272, J$.G(1429329, J$.I(typeof Error === 'undefined' ? Error = J$.R(1429321, 'Error', undefined, true, true) : Error = J$.R(1429321, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(1429361, J$.I(typeof Error === 'undefined' ? Error = J$.R(1429337, 'Error', undefined, true, true) : Error = J$.R(1429337, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(1429345, 'this', this, false, false), J$.R(1429353, 'KeyEncryptedError', KeyEncryptedError, false, true));
                            J$.P(1429385, J$.R(1429369, 'this', this, false, false), 'name', J$.T(1429377, 'KeyEncryptedError', 21, false));
                            J$.P(1429409, J$.R(1429393, 'this', this, false, false), 'format', J$.R(1429401, 'format', format, false, false));
                            J$.P(1429433, J$.R(1429417, 'this', this, false, false), 'keyName', J$.R(1429425, 'name', name, false, false));
                            J$.P(1429505, J$.R(1429441, 'this', this, false, false), 'message', J$.B(179850, '+', J$.B(179842, '+', J$.B(179834, '+', J$.B(179826, '+', J$.B(179818, '+', J$.B(179810, '+', J$.T(1429449, 'The ', 21, false), J$.R(1429457, 'format', format, false, false)), J$.T(1429465, ' format key ', 21, false)), J$.R(1429473, 'name', name, false, false)), J$.T(1429481, ' is ', 21, false)), J$.T(1429489, 'encrypted (password-protected), and no passphrase was ', 21, false)), J$.T(1429497, 'provided in `options`', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1429849, J$e);
                        } finally {
                            if (J$.Fr(1429857))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1429657, 'assert', assert, false, false, false);
            J$.N(1429665, 'util', util, false, false, false);
            FingerprintFormatError = J$.N(1429681, 'FingerprintFormatError', J$.T(1429673, FingerprintFormatError, 12, false), true, false, false);
            InvalidAlgorithmError = J$.N(1429697, 'InvalidAlgorithmError', J$.T(1429689, InvalidAlgorithmError, 12, false), true, false, false);
            KeyParseError = J$.N(1429713, 'KeyParseError', J$.T(1429705, KeyParseError, 12, false), true, false, false);
            SignatureParseError = J$.N(1429729, 'SignatureParseError', J$.T(1429721, SignatureParseError, 12, false), true, false, false);
            CertificateParseError = J$.N(1429745, 'CertificateParseError', J$.T(1429737, CertificateParseError, 12, false), true, false, false);
            KeyEncryptedError = J$.N(1429761, 'KeyEncryptedError', J$.T(1429753, KeyEncryptedError, 12, false), true, false, false);
            J$.T(1427865, 'use strict', 21, false);
            J$.F(1427889, J$.I(typeof require === 'undefined' ? require = J$.R(1427873, 'require', undefined, true, true) : require = J$.R(1427873, 'require', require, true, true)), false)(J$.T(1427881, 'core-js/modules/es.function.name', 21, false));
            var assert = J$.W(1427921, 'assert', J$.F(1427913, J$.I(typeof require === 'undefined' ? require = J$.R(1427897, 'require', undefined, true, true) : require = J$.R(1427897, 'require', require, true, true)), false)(J$.T(1427905, 'assert-plus', 21, false)), assert, false, true);
            var util = J$.W(1427953, 'util', J$.F(1427945, J$.I(typeof require === 'undefined' ? require = J$.R(1427929, 'require', undefined, true, true) : require = J$.R(1427929, 'require', require, true, true)), false)(J$.T(1427937, 'util', 21, false)), util, false, true);
            J$.M(1428257, J$.R(1428233, 'util', util, false, true), 'inherits', false)(J$.R(1428241, 'FingerprintFormatError', FingerprintFormatError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1428249, 'Error', undefined, true, true) : Error = J$.R(1428249, 'Error', Error, true, true)));
            J$.M(1428449, J$.R(1428425, 'util', util, false, true), 'inherits', false)(J$.R(1428433, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1428441, 'Error', undefined, true, true) : Error = J$.R(1428441, 'Error', Error, true, true)));
            J$.M(1428737, J$.R(1428713, 'util', util, false, true), 'inherits', false)(J$.R(1428721, 'KeyParseError', KeyParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1428729, 'Error', undefined, true, true) : Error = J$.R(1428729, 'Error', Error, true, true)));
            J$.M(1429025, J$.R(1429001, 'util', util, false, true), 'inherits', false)(J$.R(1429009, 'SignatureParseError', SignatureParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1429017, 'Error', undefined, true, true) : Error = J$.R(1429017, 'Error', Error, true, true)));
            J$.M(1429313, J$.R(1429289, 'util', util, false, true), 'inherits', false)(J$.R(1429297, 'CertificateParseError', CertificateParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1429305, 'Error', undefined, true, true) : Error = J$.R(1429305, 'Error', Error, true, true)));
            J$.M(1429569, J$.R(1429545, 'util', util, false, true), 'inherits', false)(J$.R(1429553, 'KeyEncryptedError', KeyEncryptedError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(1429561, 'Error', undefined, true, true) : Error = J$.R(1429561, 'Error', Error, true, true)));
            J$.P(1429641, J$.I(typeof module === 'undefined' ? module = J$.R(1429577, 'module', undefined, true, true) : module = J$.R(1429577, 'module', module, true, true)), 'exports', J$.T(1429633, {
                FingerprintFormatError: J$.R(1429585, 'FingerprintFormatError', FingerprintFormatError, false, true),
                InvalidAlgorithmError: J$.R(1429593, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true),
                KeyParseError: J$.R(1429601, 'KeyParseError', KeyParseError, false, true),
                SignatureParseError: J$.R(1429609, 'SignatureParseError', SignatureParseError, false, true),
                KeyEncryptedError: J$.R(1429617, 'KeyEncryptedError', KeyEncryptedError, false, true),
                CertificateParseError: J$.R(1429625, 'CertificateParseError', CertificateParseError, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(1429865, J$e);
        } finally {
            if (J$.Sr(1429873))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

