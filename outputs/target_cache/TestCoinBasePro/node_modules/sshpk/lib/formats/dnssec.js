J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(1446009, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/formats/dnssec.js');
            function read(buf, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1439785, arguments.callee, this, arguments);
                            arguments = J$.N(1439793, 'arguments', arguments, true, false, false);
                            buf = J$.N(1439801, 'buf', buf, true, false, false);
                            options = J$.N(1439809, 'options', options, true, false, false);
                            J$.N(1439817, 'lines', lines, false, false, false);
                            J$.N(1439825, 'algElems', algElems, false, false, false);
                            J$.N(1439833, 'algoNum', algoNum, false, false, false);
                            J$.N(1439841, 'algoName', algoName, false, false, false);
                            J$.N(1439849, 'line', line, false, false, false);
                            if (J$.C(74928, J$.B(180546, '!==', J$.U(180538, 'typeof', J$.R(1439113, 'buf', buf, false, false)), J$.T(1439121, 'string', 21, false)))) {
                                J$.M(1439153, J$.R(1439129, 'assert', assert, false, true), 'buffer', false)(J$.R(1439137, 'buf', buf, false, false), J$.T(1439145, 'buf', 21, false));
                                buf = J$.W(1439185, 'buf', J$.M(1439177, J$.R(1439161, 'buf', buf, false, false), 'toString', false)(J$.T(1439169, 'ascii', 21, false)), buf, false, false);
                            }
                            var lines = J$.W(1439217, 'lines', J$.M(1439209, J$.R(1439193, 'buf', buf, false, false), 'split', false)(J$.T(1439201, '\n', 21, false)), lines, false, false);
                            if (J$.C(74944, J$.M(1439257, J$.G(1439241, J$.R(1439225, 'lines', lines, false, false), J$.T(1439233, 0, 22, false)), 'match', false)(J$.T(1439249, /^Private-key-format\: v1/, 14, false)))) {
                                var algElems = J$.W(1439305, 'algElems', J$.M(1439297, J$.G(1439281, J$.R(1439265, 'lines', lines, false, false), J$.T(1439273, 1, 22, false)), 'split', false)(J$.T(1439289, ' ', 21, false)), algElems, false, false);
                                var algoNum = J$.W(1439361, 'algoNum', J$.F(1439353, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(1439313, 'parseInt', undefined, true, true) : parseInt = J$.R(1439313, 'parseInt', parseInt, true, true)), false)(J$.G(1439337, J$.R(1439321, 'algElems', algElems, false, false), J$.T(1439329, 1, 22, false)), J$.T(1439345, 10, 22, false)), algoNum, false, false);
                                var algoName = J$.W(1439393, 'algoName', J$.G(1439385, J$.R(1439369, 'algElems', algElems, false, false), J$.T(1439377, 2, 22, false)), algoName, false, false);
                                if (J$.C(74936, J$.U(180554, '!', J$.G(1439417, J$.R(1439401, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1439409, 'algoNum', algoNum, false, false)))))
                                    throw J$.F(1439449, J$.I(typeof Error === 'undefined' ? Error = J$.R(1439425, 'Error', undefined, true, true) : Error = J$.R(1439425, 'Error', Error, true, true)), true)(J$.B(180562, '+', J$.T(1439433, 'Unsupported algorithm: ', 21, false), J$.R(1439441, 'algoName', algoName, false, false)));
                                return J$.Rt(1439505, J$.F(1439497, J$.R(1439457, 'readDNSSECPrivateKey', readDNSSECPrivateKey, false, true), false)(J$.R(1439465, 'algoNum', algoNum, false, false), J$.M(1439489, J$.R(1439473, 'lines', lines, false, false), 'slice', false)(J$.T(1439481, 2, 22, false))));
                            }
                            var line = J$.W(1439521, 'line', J$.T(1439513, 0, 22, false), line, false, false);
                            while (J$.C(74952, J$.M(1439561, J$.G(1439545, J$.R(1439529, 'lines', lines, false, false), J$.R(1439537, 'line', line, false, false)), 'match', false)(J$.T(1439553, /^\;/, 14, false)))) {
                                J$.B(180586, '-', line = J$.W(1439577, 'line', J$.B(180578, '+', J$.U(180570, '+', J$.R(1439569, 'line', line, false, false)), 1), line, false, false), 1);
                            }
                            if (J$.C(74976, J$.C(74968, J$.C(74960, J$.M(1439617, J$.G(1439601, J$.R(1439585, 'lines', lines, false, false), J$.R(1439593, 'line', line, false, false)), 'match', false)(J$.T(1439609, /\. IN KEY /, 14, false))) ? J$._() : J$.M(1439657, J$.G(1439641, J$.R(1439625, 'lines', lines, false, false), J$.R(1439633, 'line', line, false, false)), 'match', false)(J$.T(1439649, /\. IN DNSKEY /, 14, false))) ? J$.B(180602, '===', J$.G(1439697, J$.G(1439689, J$.R(1439665, 'lines', lines, false, false), J$.B(180594, '+', J$.R(1439673, 'line', line, false, false), J$.T(1439681, 1, 22, false))), 'length'), J$.T(1439705, 0, 22, false)) : J$._())) {
                                return J$.Rt(1439753, J$.F(1439745, J$.R(1439713, 'readRFC3110', readRFC3110, false, true), false)(J$.G(1439737, J$.R(1439721, 'lines', lines, false, false), J$.R(1439729, 'line', line, false, false))));
                            }
                            throw J$.F(1439777, J$.I(typeof Error === 'undefined' ? Error = J$.R(1439761, 'Error', undefined, true, true) : Error = J$.R(1439761, 'Error', Error, true, true)), true)(J$.T(1439769, 'Cannot parse dnssec key', 21, false));
                        } catch (J$e) {
                            J$.Ex(1446265, J$e);
                        } finally {
                            if (J$.Fr(1446273))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readRFC3110(keyString) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1440921, arguments.callee, this, arguments);
                            arguments = J$.N(1440929, 'arguments', arguments, true, false, false);
                            keyString = J$.N(1440937, 'keyString', keyString, true, false, false);
                            J$.N(1440945, 'elems', elems, false, false, false);
                            J$.N(1440953, 'algorithm', algorithm, false, false, false);
                            J$.N(1440961, 'base64key', base64key, false, false, false);
                            J$.N(1440969, 'keyBuffer', keyBuffer, false, false, false);
                            J$.N(1440977, 'publicExponentLen', publicExponentLen, false, false, false);
                            J$.N(1440985, 'publicExponent', publicExponent, false, false, false);
                            J$.N(1440993, 'modulus', modulus, false, false, false);
                            J$.N(1441001, 'rsaKey', rsaKey, false, false, false);
                            J$.N(1441009, 'curve', curve, false, false, false);
                            J$.N(1441017, 'size', size, false, false, false);
                            J$.N(1441025, 'ecdsaKey', ecdsaKey, false, false, false);
                            var elems = J$.W(1439881, 'elems', J$.M(1439873, J$.R(1439857, 'keyString', keyString, false, false), 'split', false)(J$.T(1439865, ' ', 21, false)), elems, false, false);
                            var algorithm = J$.W(1439937, 'algorithm', J$.F(1439929, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(1439889, 'parseInt', undefined, true, true) : parseInt = J$.R(1439889, 'parseInt', parseInt, true, true)), false)(J$.G(1439913, J$.R(1439897, 'elems', elems, false, false), J$.T(1439905, 5, 22, false)), J$.T(1439921, 10, 22, false)), algorithm, false, false);
                            if (J$.C(74984, J$.U(180610, '!', J$.G(1439961, J$.R(1439945, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1439953, 'algorithm', algorithm, false, false)))))
                                throw J$.F(1439993, J$.I(typeof Error === 'undefined' ? Error = J$.R(1439969, 'Error', undefined, true, true) : Error = J$.R(1439969, 'Error', Error, true, true)), true)(J$.B(180618, '+', J$.T(1439977, 'Unsupported algorithm: ', 21, false), J$.R(1439985, 'algorithm', algorithm, false, false)));
                            var base64key = J$.W(1440049, 'base64key', J$.M(1440041, J$.M(1440033, J$.R(1440001, 'elems', elems, false, false), 'slice', false)(J$.T(1440009, 6, 22, false), J$.G(1440025, J$.R(1440017, 'elems', elems, false, false), 'length')), 'join', false)(), base64key, false, false);
                            var keyBuffer = J$.W(1440089, 'keyBuffer', J$.M(1440081, J$.R(1440057, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1440065, 'base64key', base64key, false, false), J$.T(1440073, 'base64', 21, false)), keyBuffer, false, false);
                            if (J$.C(75008, J$.M(1440129, J$.G(1440113, J$.R(1440097, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1440105, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(1440121, /^RSA-/, 14, false)))) {
                                var publicExponentLen = J$.W(1440161, 'publicExponentLen', J$.M(1440153, J$.R(1440137, 'keyBuffer', keyBuffer, false, false), 'readUInt8', false)(J$.T(1440145, 0, 22, false)), publicExponentLen, false, false);
                                if (J$.C(75000, J$.C(74992, J$.B(180626, '!=', J$.R(1440169, 'publicExponentLen', publicExponentLen, false, false), J$.T(1440177, 3, 22, false))) ? J$.B(180634, '!=', J$.R(1440185, 'publicExponentLen', publicExponentLen, false, false), J$.T(1440193, 1, 22, false)) : J$._()))
                                    throw J$.F(1440225, J$.I(typeof Error === 'undefined' ? Error = J$.R(1440201, 'Error', undefined, true, true) : Error = J$.R(1440201, 'Error', Error, true, true)), true)(J$.B(180642, '+', J$.T(1440209, 'Cannot parse dnssec key: ', 21, false), J$.T(1440217, 'unsupported exponent length', 21, false)));
                                var publicExponent = J$.W(1440273, 'publicExponent', J$.M(1440265, J$.R(1440233, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.T(1440241, 1, 22, false), J$.B(180650, '+', J$.R(1440249, 'publicExponentLen', publicExponentLen, false, false), J$.T(1440257, 1, 22, false))), publicExponent, false, false);
                                publicExponent = J$.W(1440305, 'publicExponent', J$.M(1440297, J$.R(1440281, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(1440289, 'publicExponent', publicExponent, false, false)), publicExponent, false, false);
                                var modulus = J$.W(1440345, 'modulus', J$.M(1440337, J$.R(1440313, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.B(180658, '+', J$.T(1440321, 1, 22, false), J$.R(1440329, 'publicExponentLen', publicExponentLen, false, false))), modulus, false, false);
                                modulus = J$.W(1440377, 'modulus', J$.M(1440369, J$.R(1440353, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(1440361, 'modulus', modulus, false, false)), modulus, false, false);
                                var rsaKey = J$.W(1440409, 'rsaKey', J$.T(1440401, {
                                    type: J$.T(1440385, 'rsa', 21, false),
                                    parts: J$.T(1440393, [], 10, false)
                                }, 11, false), rsaKey, false, false);
                                J$.M(1440457, J$.G(1440425, J$.R(1440417, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(1440449, {
                                    name: J$.T(1440433, 'e', 21, false),
                                    data: J$.R(1440441, 'publicExponent', publicExponent, false, false)
                                }, 11, false));
                                J$.M(1440505, J$.G(1440473, J$.R(1440465, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(1440497, {
                                    name: J$.T(1440481, 'n', 21, false),
                                    data: J$.R(1440489, 'modulus', modulus, false, false)
                                }, 11, false));
                                return J$.Rt(1440537, J$.F(1440529, J$.R(1440513, 'Key', Key, false, true), true)(J$.R(1440521, 'rsaKey', rsaKey, false, false)));
                            }
                            if (J$.C(75032, J$.C(75016, J$.B(180666, '===', J$.G(1440561, J$.R(1440545, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1440553, 'algorithm', algorithm, false, false)), J$.T(1440569, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(180674, '===', J$.G(1440593, J$.R(1440577, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1440585, 'algorithm', algorithm, false, false)), J$.T(1440601, 'ECDSA-P256-SHA256', 21, false)))) {
                                var curve = J$.W(1440617, 'curve', J$.T(1440609, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(1440633, 'size', J$.T(1440625, 384, 22, false), size, false, false);
                                if (J$.C(75024, J$.M(1440673, J$.G(1440657, J$.R(1440641, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1440649, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(1440665, /^ECDSA-P256-SHA256/, 14, false)))) {
                                    curve = J$.W(1440689, 'curve', J$.T(1440681, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(1440705, 'size', J$.T(1440697, 256, 22, false), size, false, false);
                                }
                                var ecdsaKey = J$.W(1440833, 'ecdsaKey', J$.T(1440825, {
                                    type: J$.T(1440713, 'ecdsa', 21, false),
                                    curve: J$.R(1440721, 'curve', curve, false, false),
                                    size: J$.R(1440729, 'size', size, false, false),
                                    parts: J$.T(1440817, [
                                        J$.T(1440769, {
                                            name: J$.T(1440737, 'curve', 21, false),
                                            data: J$.M(1440761, J$.R(1440745, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1440753, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(1440809, {
                                            name: J$.T(1440777, 'Q', 21, false),
                                            data: J$.M(1440801, J$.R(1440785, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(1440793, 'keyBuffer', keyBuffer, false, false))
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(1440865, J$.F(1440857, J$.R(1440841, 'Key', Key, false, true), true)(J$.R(1440849, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(1440913, J$.I(typeof Error === 'undefined' ? Error = J$.R(1440873, 'Error', undefined, true, true) : Error = J$.R(1440873, 'Error', Error, true, true)), true)(J$.B(180682, '+', J$.T(1440881, 'Unsupported algorithm: ', 21, false), J$.G(1440905, J$.R(1440889, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1440897, 'algorithm', algorithm, false, false))));
                        } catch (J$e) {
                            J$.Ex(1446281, J$e);
                        } finally {
                            if (J$.Fr(1446289))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function elementToBuf(e) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1441105, arguments.callee, this, arguments);
                            arguments = J$.N(1441113, 'arguments', arguments, true, false, false);
                            e = J$.N(1441121, 'e', e, true, false, false);
                            return J$.Rt(1441097, J$.M(1441089, J$.R(1441033, 'Buffer', Buffer, false, true), 'from', false)(J$.G(1441073, J$.M(1441057, J$.R(1441041, 'e', e, false, false), 'split', false)(J$.T(1441049, ' ', 21, false)), J$.T(1441065, 1, 22, false)), J$.T(1441081, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1446297, J$e);
                        } finally {
                            if (J$.Fr(1446305))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECRSAPrivateKey(elements) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1442473, arguments.callee, this, arguments);
                            arguments = J$.N(1442481, 'arguments', arguments, true, false, false);
                            elements = J$.N(1442489, 'elements', elements, true, false, false);
                            J$.N(1442497, 'rsaParams', rsaParams, false, false, false);
                            J$.N(1442505, 'key', key, false, false, false);
                            var rsaParams = J$.W(1441137, 'rsaParams', J$.T(1441129, {}, 11, false), rsaParams, false, false);
                            J$.M(1441953, J$.R(1441145, 'elements', elements, false, false), 'forEach', false)(J$.T(1441945, function (element) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(1441921, arguments.callee, this, arguments);
                                            arguments = J$.N(1441929, 'arguments', arguments, true, false, false);
                                            element = J$.N(1441937, 'element', element, true, false, false);
                                            if (J$.C(75096, J$.B(180690, '===', J$.G(1441185, J$.M(1441169, J$.R(1441153, 'element', element, false, false), 'split', false)(J$.T(1441161, ' ', 21, false)), J$.T(1441177, 0, 22, false)), J$.T(1441193, 'Modulus:', 21, false))))
                                                J$.P(1441241, J$.R(1441201, 'rsaParams', rsaParams, false, false), J$.T(1441209, 'n', 21, false), J$.F(1441233, J$.R(1441217, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441225, 'element', element, false, false)));
                                            else if (J$.C(75088, J$.B(180698, '===', J$.G(1441281, J$.M(1441265, J$.R(1441249, 'element', element, false, false), 'split', false)(J$.T(1441257, ' ', 21, false)), J$.T(1441273, 0, 22, false)), J$.T(1441289, 'PublicExponent:', 21, false))))
                                                J$.P(1441337, J$.R(1441297, 'rsaParams', rsaParams, false, false), J$.T(1441305, 'e', 21, false), J$.F(1441329, J$.R(1441313, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441321, 'element', element, false, false)));
                                            else if (J$.C(75080, J$.B(180706, '===', J$.G(1441377, J$.M(1441361, J$.R(1441345, 'element', element, false, false), 'split', false)(J$.T(1441353, ' ', 21, false)), J$.T(1441369, 0, 22, false)), J$.T(1441385, 'PrivateExponent:', 21, false))))
                                                J$.P(1441433, J$.R(1441393, 'rsaParams', rsaParams, false, false), J$.T(1441401, 'd', 21, false), J$.F(1441425, J$.R(1441409, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441417, 'element', element, false, false)));
                                            else if (J$.C(75072, J$.B(180714, '===', J$.G(1441473, J$.M(1441457, J$.R(1441441, 'element', element, false, false), 'split', false)(J$.T(1441449, ' ', 21, false)), J$.T(1441465, 0, 22, false)), J$.T(1441481, 'Prime1:', 21, false))))
                                                J$.P(1441529, J$.R(1441489, 'rsaParams', rsaParams, false, false), J$.T(1441497, 'p', 21, false), J$.F(1441521, J$.R(1441505, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441513, 'element', element, false, false)));
                                            else if (J$.C(75064, J$.B(180722, '===', J$.G(1441569, J$.M(1441553, J$.R(1441537, 'element', element, false, false), 'split', false)(J$.T(1441545, ' ', 21, false)), J$.T(1441561, 0, 22, false)), J$.T(1441577, 'Prime2:', 21, false))))
                                                J$.P(1441625, J$.R(1441585, 'rsaParams', rsaParams, false, false), J$.T(1441593, 'q', 21, false), J$.F(1441617, J$.R(1441601, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441609, 'element', element, false, false)));
                                            else if (J$.C(75056, J$.B(180730, '===', J$.G(1441665, J$.M(1441649, J$.R(1441633, 'element', element, false, false), 'split', false)(J$.T(1441641, ' ', 21, false)), J$.T(1441657, 0, 22, false)), J$.T(1441673, 'Exponent1:', 21, false))))
                                                J$.P(1441721, J$.R(1441681, 'rsaParams', rsaParams, false, false), J$.T(1441689, 'dmodp', 21, false), J$.F(1441713, J$.R(1441697, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441705, 'element', element, false, false)));
                                            else if (J$.C(75048, J$.B(180738, '===', J$.G(1441761, J$.M(1441745, J$.R(1441729, 'element', element, false, false), 'split', false)(J$.T(1441737, ' ', 21, false)), J$.T(1441753, 0, 22, false)), J$.T(1441769, 'Exponent2:', 21, false))))
                                                J$.P(1441817, J$.R(1441777, 'rsaParams', rsaParams, false, false), J$.T(1441785, 'dmodq', 21, false), J$.F(1441809, J$.R(1441793, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441801, 'element', element, false, false)));
                                            else if (J$.C(75040, J$.B(180746, '===', J$.G(1441857, J$.M(1441841, J$.R(1441825, 'element', element, false, false), 'split', false)(J$.T(1441833, ' ', 21, false)), J$.T(1441849, 0, 22, false)), J$.T(1441865, 'Coefficient:', 21, false))))
                                                J$.P(1441913, J$.R(1441873, 'rsaParams', rsaParams, false, false), J$.T(1441881, 'iqmp', 21, false), J$.F(1441905, J$.R(1441889, 'elementToBuf', elementToBuf, false, true), false)(J$.R(1441897, 'element', element, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1446313, J$e);
                                        } finally {
                                            if (J$.Fr(1446321))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            var key = J$.W(1442433, 'key', J$.T(1442425, {
                                type: J$.T(1441961, 'rsa', 21, false),
                                parts: J$.T(1442417, [
                                    J$.T(1442017, {
                                        name: J$.T(1441969, 'e', 21, false),
                                        data: J$.M(1442009, J$.R(1441977, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442001, J$.R(1441985, 'rsaParams', rsaParams, false, false), J$.T(1441993, 'e', 21, false)))
                                    }, 11, false),
                                    J$.T(1442073, {
                                        name: J$.T(1442025, 'n', 21, false),
                                        data: J$.M(1442065, J$.R(1442033, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442057, J$.R(1442041, 'rsaParams', rsaParams, false, false), J$.T(1442049, 'n', 21, false)))
                                    }, 11, false),
                                    J$.T(1442129, {
                                        name: J$.T(1442081, 'd', 21, false),
                                        data: J$.M(1442121, J$.R(1442089, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442113, J$.R(1442097, 'rsaParams', rsaParams, false, false), J$.T(1442105, 'd', 21, false)))
                                    }, 11, false),
                                    J$.T(1442185, {
                                        name: J$.T(1442137, 'p', 21, false),
                                        data: J$.M(1442177, J$.R(1442145, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442169, J$.R(1442153, 'rsaParams', rsaParams, false, false), J$.T(1442161, 'p', 21, false)))
                                    }, 11, false),
                                    J$.T(1442241, {
                                        name: J$.T(1442193, 'q', 21, false),
                                        data: J$.M(1442233, J$.R(1442201, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442225, J$.R(1442209, 'rsaParams', rsaParams, false, false), J$.T(1442217, 'q', 21, false)))
                                    }, 11, false),
                                    J$.T(1442297, {
                                        name: J$.T(1442249, 'dmodp', 21, false),
                                        data: J$.M(1442289, J$.R(1442257, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442281, J$.R(1442265, 'rsaParams', rsaParams, false, false), J$.T(1442273, 'dmodp', 21, false)))
                                    }, 11, false),
                                    J$.T(1442353, {
                                        name: J$.T(1442305, 'dmodq', 21, false),
                                        data: J$.M(1442345, J$.R(1442313, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442337, J$.R(1442321, 'rsaParams', rsaParams, false, false), J$.T(1442329, 'dmodq', 21, false)))
                                    }, 11, false),
                                    J$.T(1442409, {
                                        name: J$.T(1442361, 'iqmp', 21, false),
                                        data: J$.M(1442401, J$.R(1442369, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1442393, J$.R(1442377, 'rsaParams', rsaParams, false, false), J$.T(1442385, 'iqmp', 21, false)))
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1442465, J$.F(1442457, J$.R(1442441, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1442449, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1446329, J$e);
                        } finally {
                            if (J$.Fr(1446337))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECPrivateKey(alg, elements) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1443137, arguments.callee, this, arguments);
                            arguments = J$.N(1443145, 'arguments', arguments, true, false, false);
                            alg = J$.N(1443153, 'alg', alg, true, false, false);
                            elements = J$.N(1443161, 'elements', elements, true, false, false);
                            J$.N(1443169, 'd', d, false, false, false);
                            J$.N(1443177, 'curve', curve, false, false, false);
                            J$.N(1443185, 'size', size, false, false, false);
                            J$.N(1443193, 'publicKey', publicKey, false, false, false);
                            J$.N(1443201, 'Q', Q, false, false, false);
                            J$.N(1443209, 'ecdsaKey', ecdsaKey, false, false, false);
                            if (J$.C(75104, J$.M(1442545, J$.G(1442529, J$.R(1442513, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1442521, 'alg', alg, false, false)), 'match', false)(J$.T(1442537, /^RSA-/, 14, false)))) {
                                return J$.Rt(1442577, J$.F(1442569, J$.R(1442553, 'readDNSSECRSAPrivateKey', readDNSSECRSAPrivateKey, false, true), false)(J$.R(1442561, 'elements', elements, false, false)));
                            }
                            if (J$.C(75128, J$.C(75112, J$.B(180754, '===', J$.G(1442601, J$.R(1442585, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1442593, 'alg', alg, false, false)), J$.T(1442609, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(180762, '===', J$.G(1442633, J$.R(1442617, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1442625, 'alg', alg, false, false)), J$.T(1442641, 'ECDSA-P256-SHA256', 21, false)))) {
                                var d = J$.W(1442729, 'd', J$.M(1442721, J$.R(1442649, 'Buffer', Buffer, false, true), 'from', false)(J$.G(1442705, J$.M(1442689, J$.G(1442673, J$.R(1442657, 'elements', elements, false, false), J$.T(1442665, 0, 22, false)), 'split', false)(J$.T(1442681, ' ', 21, false)), J$.T(1442697, 1, 22, false)), J$.T(1442713, 'base64', 21, false)), d, false, false);
                                var curve = J$.W(1442745, 'curve', J$.T(1442737, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(1442761, 'size', J$.T(1442753, 384, 22, false), size, false, false);
                                if (J$.C(75120, J$.B(180770, '===', J$.G(1442785, J$.R(1442769, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1442777, 'alg', alg, false, false)), J$.T(1442793, 'ECDSA-P256-SHA256', 21, false)))) {
                                    curve = J$.W(1442809, 'curve', J$.T(1442801, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(1442825, 'size', J$.T(1442817, 256, 22, false), size, false, false);
                                }
                                var publicKey = J$.W(1442865, 'publicKey', J$.M(1442857, J$.R(1442833, 'utils', utils, false, true), 'publicFromPrivateECDSA', false)(J$.R(1442841, 'curve', curve, false, false), J$.R(1442849, 'd', d, false, false)), publicKey, false, false);
                                var Q = J$.W(1442913, 'Q', J$.G(1442905, J$.G(1442897, J$.G(1442881, J$.R(1442873, 'publicKey', publicKey, false, false), 'part'), J$.T(1442889, 'Q', 21, false)), 'data'), Q, false, false);
                                var ecdsaKey = J$.W(1443049, 'ecdsaKey', J$.T(1443041, {
                                    type: J$.T(1442921, 'ecdsa', 21, false),
                                    curve: J$.R(1442929, 'curve', curve, false, false),
                                    size: J$.R(1442937, 'size', size, false, false),
                                    parts: J$.T(1443033, [
                                        J$.T(1442977, {
                                            name: J$.T(1442945, 'curve', 21, false),
                                            data: J$.M(1442969, J$.R(1442953, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1442961, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(1443001, {
                                            name: J$.T(1442985, 'd', 21, false),
                                            data: J$.R(1442993, 'd', d, false, false)
                                        }, 11, false),
                                        J$.T(1443025, {
                                            name: J$.T(1443009, 'Q', 21, false),
                                            data: J$.R(1443017, 'Q', Q, false, false)
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(1443081, J$.F(1443073, J$.R(1443057, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1443065, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(1443129, J$.I(typeof Error === 'undefined' ? Error = J$.R(1443089, 'Error', undefined, true, true) : Error = J$.R(1443089, 'Error', Error, true, true)), true)(J$.B(180778, '+', J$.T(1443097, 'Unsupported algorithm: ', 21, false), J$.G(1443121, J$.R(1443105, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(1443113, 'alg', alg, false, false))));
                        } catch (J$e) {
                            J$.Ex(1446345, J$e);
                        } finally {
                            if (J$.Fr(1446353))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dnssecTimestamp(date) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1443425, arguments.callee, this, arguments);
                            arguments = J$.N(1443433, 'arguments', arguments, true, false, false);
                            date = J$.N(1443441, 'date', date, true, false, false);
                            J$.N(1443449, 'year', year, false, false, false);
                            J$.N(1443457, 'month', month, false, false, false);
                            J$.N(1443465, 'timestampStr', timestampStr, false, false, false);
                            var year = J$.W(1443241, 'year', J$.B(180786, '+', J$.M(1443225, J$.R(1443217, 'date', date, false, false), 'getFullYear', false)(), J$.T(1443233, '', 21, false)), year, false, false);
                            var month = J$.W(1443273, 'month', J$.B(180794, '+', J$.M(1443257, J$.R(1443249, 'date', date, false, false), 'getMonth', false)(), J$.T(1443265, 1, 22, false)), month, false, false);
                            var timestampStr = J$.W(1443313, 'timestampStr', J$.B(180810, '+', J$.B(180802, '+', J$.R(1443281, 'year', year, false, false), J$.R(1443289, 'month', month, false, false)), J$.M(1443305, J$.R(1443297, 'date', date, false, false), 'getUTCDate', false)()), timestampStr, false, false);
                            timestampStr = J$.W(1443369, 'timestampStr', J$.B(180834, '+', J$.R(1443361, 'timestampStr', timestampStr, false, false), J$.B(180826, '+', J$.B(180818, '+', J$.T(1443321, '', 21, false), J$.M(1443337, J$.R(1443329, 'date', date, false, false), 'getUTCHours', false)()), J$.M(1443353, J$.R(1443345, 'date', date, false, false), 'getUTCMinutes', false)())), timestampStr, false, false);
                            timestampStr = J$.W(1443401, 'timestampStr', J$.B(180842, '+', J$.R(1443393, 'timestampStr', timestampStr, false, false), J$.M(1443385, J$.R(1443377, 'date', date, false, false), 'getUTCSeconds', false)()), timestampStr, false, false);
                            return J$.Rt(1443417, J$.R(1443409, 'timestampStr', timestampStr, false, false));
                        } catch (J$e) {
                            J$.Ex(1446361, J$e);
                        } finally {
                            if (J$.Fr(1446369))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function rsaAlgFromOptions(opts) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1443657, arguments.callee, this, arguments);
                            arguments = J$.N(1443665, 'arguments', arguments, true, false, false);
                            opts = J$.N(1443673, 'opts', opts, true, false, false);
                            if (J$.C(75168, J$.C(75144, J$.C(75136, J$.U(180850, '!', J$.R(1443473, 'opts', opts, false, false))) ? J$._() : J$.U(180858, '!', J$.G(1443489, J$.R(1443481, 'opts', opts, false, false), 'hashAlgo'))) ? J$._() : J$.B(180866, '===', J$.G(1443505, J$.R(1443497, 'opts', opts, false, false), 'hashAlgo'), J$.T(1443513, 'sha1', 21, false))))
                                return J$.Rt(1443529, J$.T(1443521, '5 (RSASHA1)', 21, false));
                            else if (J$.C(75160, J$.B(180874, '===', J$.G(1443545, J$.R(1443537, 'opts', opts, false, false), 'hashAlgo'), J$.T(1443553, 'sha256', 21, false))))
                                return J$.Rt(1443569, J$.T(1443561, '8 (RSASHA256)', 21, false));
                            else if (J$.C(75152, J$.B(180882, '===', J$.G(1443585, J$.R(1443577, 'opts', opts, false, false), 'hashAlgo'), J$.T(1443593, 'sha512', 21, false))))
                                return J$.Rt(1443609, J$.T(1443601, '10 (RSASHA512)', 21, false));
                            else
                                throw J$.F(1443649, J$.I(typeof Error === 'undefined' ? Error = J$.R(1443617, 'Error', undefined, true, true) : Error = J$.R(1443617, 'Error', Error, true, true)), true)(J$.B(180890, '+', J$.T(1443625, 'Unknown or unsupported hash: ', 21, false), J$.G(1443641, J$.R(1443633, 'opts', opts, false, false), 'hashAlgo')));
                        } catch (J$e) {
                            J$.Ex(1446377, J$e);
                        } finally {
                            if (J$.Fr(1446385))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeRSA(key, options) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1445041, arguments.callee, this, arguments);
                            arguments = J$.N(1445049, 'arguments', arguments, true, false, false);
                            key = J$.N(1445057, 'key', key, true, false, false);
                            options = J$.N(1445065, 'options', options, true, false, false);
                            J$.N(1445073, 'out', out, false, false, false);
                            J$.N(1445081, 'n', n, false, false, false);
                            J$.N(1445089, 'e', e, false, false, false);
                            J$.N(1445097, 'd', d, false, false, false);
                            J$.N(1445105, 'p', p, false, false, false);
                            J$.N(1445113, 'q', q, false, false, false);
                            J$.N(1445121, 'dmodp', dmodp, false, false, false);
                            J$.N(1445129, 'dmodq', dmodq, false, false, false);
                            J$.N(1445137, 'iqmp', iqmp, false, false, false);
                            J$.N(1445145, 'timestamp', timestamp, false, false, false);
                            if (J$.C(75184, J$.C(75176, J$.U(180898, '!', J$.G(1443697, J$.G(1443689, J$.R(1443681, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(180906, '!', J$.G(1443721, J$.G(1443713, J$.R(1443705, 'key', key, false, false), 'part'), 'dmodq')))) {
                                J$.M(1443745, J$.R(1443729, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(1443737, 'key', key, false, false));
                            }
                            var out = J$.W(1443761, 'out', J$.T(1443753, '', 21, false), out, false, false);
                            out = J$.W(1443785, 'out', J$.B(180914, '+', J$.R(1443777, 'out', out, false, false), J$.T(1443769, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            out = J$.W(1443841, 'out', J$.B(180938, '+', J$.R(1443833, 'out', out, false, false), J$.B(180930, '+', J$.B(180922, '+', J$.T(1443793, 'Algorithm: ', 21, false), J$.F(1443817, J$.R(1443801, 'rsaAlgFromOptions', rsaAlgFromOptions, false, true), false)(J$.R(1443809, 'options', options, false, false))), J$.T(1443825, '\n', 21, false))), out, false, false);
                            var n = J$.W(1443905, 'n', J$.M(1443897, J$.R(1443849, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1443889, J$.G(1443881, J$.G(1443865, J$.R(1443857, 'key', key, false, false), 'part'), J$.T(1443873, 'n', 21, false)), 'data')), n, false, false);
                            out = J$.W(1443961, 'out', J$.B(180962, '+', J$.R(1443953, 'out', out, false, false), J$.B(180954, '+', J$.B(180946, '+', J$.T(1443913, 'Modulus: ', 21, false), J$.M(1443937, J$.R(1443921, 'n', n, false, false), 'toString', false)(J$.T(1443929, 'base64', 21, false))), J$.T(1443945, '\n', 21, false))), out, false, false);
                            var e = J$.W(1444025, 'e', J$.M(1444017, J$.R(1443969, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444009, J$.G(1444001, J$.G(1443985, J$.R(1443977, 'key', key, false, false), 'part'), J$.T(1443993, 'e', 21, false)), 'data')), e, false, false);
                            out = J$.W(1444081, 'out', J$.B(180986, '+', J$.R(1444073, 'out', out, false, false), J$.B(180978, '+', J$.B(180970, '+', J$.T(1444033, 'PublicExponent: ', 21, false), J$.M(1444057, J$.R(1444041, 'e', e, false, false), 'toString', false)(J$.T(1444049, 'base64', 21, false))), J$.T(1444065, '\n', 21, false))), out, false, false);
                            var d = J$.W(1444145, 'd', J$.M(1444137, J$.R(1444089, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444129, J$.G(1444121, J$.G(1444105, J$.R(1444097, 'key', key, false, false), 'part'), J$.T(1444113, 'd', 21, false)), 'data')), d, false, false);
                            out = J$.W(1444201, 'out', J$.B(181010, '+', J$.R(1444193, 'out', out, false, false), J$.B(181002, '+', J$.B(180994, '+', J$.T(1444153, 'PrivateExponent: ', 21, false), J$.M(1444177, J$.R(1444161, 'd', d, false, false), 'toString', false)(J$.T(1444169, 'base64', 21, false))), J$.T(1444185, '\n', 21, false))), out, false, false);
                            var p = J$.W(1444265, 'p', J$.M(1444257, J$.R(1444209, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444249, J$.G(1444241, J$.G(1444225, J$.R(1444217, 'key', key, false, false), 'part'), J$.T(1444233, 'p', 21, false)), 'data')), p, false, false);
                            out = J$.W(1444321, 'out', J$.B(181034, '+', J$.R(1444313, 'out', out, false, false), J$.B(181026, '+', J$.B(181018, '+', J$.T(1444273, 'Prime1: ', 21, false), J$.M(1444297, J$.R(1444281, 'p', p, false, false), 'toString', false)(J$.T(1444289, 'base64', 21, false))), J$.T(1444305, '\n', 21, false))), out, false, false);
                            var q = J$.W(1444385, 'q', J$.M(1444377, J$.R(1444329, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444369, J$.G(1444361, J$.G(1444345, J$.R(1444337, 'key', key, false, false), 'part'), J$.T(1444353, 'q', 21, false)), 'data')), q, false, false);
                            out = J$.W(1444441, 'out', J$.B(181058, '+', J$.R(1444433, 'out', out, false, false), J$.B(181050, '+', J$.B(181042, '+', J$.T(1444393, 'Prime2: ', 21, false), J$.M(1444417, J$.R(1444401, 'q', q, false, false), 'toString', false)(J$.T(1444409, 'base64', 21, false))), J$.T(1444425, '\n', 21, false))), out, false, false);
                            var dmodp = J$.W(1444505, 'dmodp', J$.M(1444497, J$.R(1444449, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444489, J$.G(1444481, J$.G(1444465, J$.R(1444457, 'key', key, false, false), 'part'), J$.T(1444473, 'dmodp', 21, false)), 'data')), dmodp, false, false);
                            out = J$.W(1444561, 'out', J$.B(181082, '+', J$.R(1444553, 'out', out, false, false), J$.B(181074, '+', J$.B(181066, '+', J$.T(1444513, 'Exponent1: ', 21, false), J$.M(1444537, J$.R(1444521, 'dmodp', dmodp, false, false), 'toString', false)(J$.T(1444529, 'base64', 21, false))), J$.T(1444545, '\n', 21, false))), out, false, false);
                            var dmodq = J$.W(1444625, 'dmodq', J$.M(1444617, J$.R(1444569, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444609, J$.G(1444601, J$.G(1444585, J$.R(1444577, 'key', key, false, false), 'part'), J$.T(1444593, 'dmodq', 21, false)), 'data')), dmodq, false, false);
                            out = J$.W(1444681, 'out', J$.B(181106, '+', J$.R(1444673, 'out', out, false, false), J$.B(181098, '+', J$.B(181090, '+', J$.T(1444633, 'Exponent2: ', 21, false), J$.M(1444657, J$.R(1444641, 'dmodq', dmodq, false, false), 'toString', false)(J$.T(1444649, 'base64', 21, false))), J$.T(1444665, '\n', 21, false))), out, false, false);
                            var iqmp = J$.W(1444745, 'iqmp', J$.M(1444737, J$.R(1444689, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(1444729, J$.G(1444721, J$.G(1444705, J$.R(1444697, 'key', key, false, false), 'part'), J$.T(1444713, 'iqmp', 21, false)), 'data')), iqmp, false, false);
                            out = J$.W(1444801, 'out', J$.B(181130, '+', J$.R(1444793, 'out', out, false, false), J$.B(181122, '+', J$.B(181114, '+', J$.T(1444753, 'Coefficient: ', 21, false), J$.M(1444777, J$.R(1444761, 'iqmp', iqmp, false, false), 'toString', false)(J$.T(1444769, 'base64', 21, false))), J$.T(1444785, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(1444825, 'timestamp', J$.F(1444817, J$.I(typeof Date === 'undefined' ? Date = J$.R(1444809, 'Date', undefined, true, true) : Date = J$.R(1444809, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(1444881, 'out', J$.B(181154, '+', J$.R(1444873, 'out', out, false, false), J$.B(181146, '+', J$.B(181138, '+', J$.T(1444833, 'Created: ', 21, false), J$.F(1444857, J$.R(1444841, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1444849, 'timestamp', timestamp, false, false))), J$.T(1444865, '\n', 21, false))), out, false, false);
                            out = J$.W(1444937, 'out', J$.B(181178, '+', J$.R(1444929, 'out', out, false, false), J$.B(181170, '+', J$.B(181162, '+', J$.T(1444889, 'Publish: ', 21, false), J$.F(1444913, J$.R(1444897, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1444905, 'timestamp', timestamp, false, false))), J$.T(1444921, '\n', 21, false))), out, false, false);
                            out = J$.W(1444993, 'out', J$.B(181202, '+', J$.R(1444985, 'out', out, false, false), J$.B(181194, '+', J$.B(181186, '+', J$.T(1444945, 'Activate: ', 21, false), J$.F(1444969, J$.R(1444953, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1444961, 'timestamp', timestamp, false, false))), J$.T(1444977, '\n', 21, false))), out, false, false);
                            return J$.Rt(1445033, J$.M(1445025, J$.R(1445001, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1445009, 'out', out, false, false), J$.T(1445017, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1446393, J$e);
                        } finally {
                            if (J$.Fr(1446401))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeECDSA(key, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(1445649, arguments.callee, this, arguments);
                            arguments = J$.N(1445657, 'arguments', arguments, true, false, false);
                            key = J$.N(1445665, 'key', key, true, false, false);
                            options = J$.N(1445673, 'options', options, true, false, false);
                            J$.N(1445681, 'out', out, false, false, false);
                            J$.N(1445689, 'base64Key', base64Key, false, false, false);
                            J$.N(1445697, 'timestamp', timestamp, false, false, false);
                            var out = J$.W(1445161, 'out', J$.T(1445153, '', 21, false), out, false, false);
                            out = J$.W(1445185, 'out', J$.B(181210, '+', J$.R(1445177, 'out', out, false, false), J$.T(1445169, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            if (J$.C(75200, J$.B(181218, '===', J$.G(1445201, J$.R(1445193, 'key', key, false, false), 'curve'), J$.T(1445209, 'nistp256', 21, false)))) {
                                out = J$.W(1445233, 'out', J$.B(181226, '+', J$.R(1445225, 'out', out, false, false), J$.T(1445217, 'Algorithm: 13 (ECDSAP256SHA256)\n', 21, false)), out, false, false);
                            } else if (J$.C(75192, J$.B(181234, '===', J$.G(1445249, J$.R(1445241, 'key', key, false, false), 'curve'), J$.T(1445257, 'nistp384', 21, false)))) {
                                out = J$.W(1445281, 'out', J$.B(181242, '+', J$.R(1445273, 'out', out, false, false), J$.T(1445265, 'Algorithm: 14 (ECDSAP384SHA384)\n', 21, false)), out, false, false);
                            } else {
                                throw J$.F(1445305, J$.I(typeof Error === 'undefined' ? Error = J$.R(1445289, 'Error', undefined, true, true) : Error = J$.R(1445289, 'Error', Error, true, true)), true)(J$.T(1445297, 'Unsupported curve', 21, false));
                            }
                            var base64Key = J$.W(1445369, 'base64Key', J$.M(1445361, J$.G(1445345, J$.G(1445337, J$.G(1445321, J$.R(1445313, 'key', key, false, false), 'part'), J$.T(1445329, 'd', 21, false)), 'data'), 'toString', false)(J$.T(1445353, 'base64', 21, false)), base64Key, false, false);
                            out = J$.W(1445409, 'out', J$.B(181266, '+', J$.R(1445401, 'out', out, false, false), J$.B(181258, '+', J$.B(181250, '+', J$.T(1445377, 'PrivateKey: ', 21, false), J$.R(1445385, 'base64Key', base64Key, false, false)), J$.T(1445393, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(1445433, 'timestamp', J$.F(1445425, J$.I(typeof Date === 'undefined' ? Date = J$.R(1445417, 'Date', undefined, true, true) : Date = J$.R(1445417, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(1445489, 'out', J$.B(181290, '+', J$.R(1445481, 'out', out, false, false), J$.B(181282, '+', J$.B(181274, '+', J$.T(1445441, 'Created: ', 21, false), J$.F(1445465, J$.R(1445449, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1445457, 'timestamp', timestamp, false, false))), J$.T(1445473, '\n', 21, false))), out, false, false);
                            out = J$.W(1445545, 'out', J$.B(181314, '+', J$.R(1445537, 'out', out, false, false), J$.B(181306, '+', J$.B(181298, '+', J$.T(1445497, 'Publish: ', 21, false), J$.F(1445521, J$.R(1445505, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1445513, 'timestamp', timestamp, false, false))), J$.T(1445529, '\n', 21, false))), out, false, false);
                            out = J$.W(1445601, 'out', J$.B(181338, '+', J$.R(1445593, 'out', out, false, false), J$.B(181330, '+', J$.B(181322, '+', J$.T(1445553, 'Activate: ', 21, false), J$.F(1445577, J$.R(1445561, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(1445569, 'timestamp', timestamp, false, false))), J$.T(1445585, '\n', 21, false))), out, false, false);
                            return J$.Rt(1445641, J$.M(1445633, J$.R(1445609, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1445617, 'out', out, false, false), J$.T(1445625, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1446409, J$e);
                        } finally {
                            if (J$.Fr(1446417))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(1445977, arguments.callee, this, arguments);
                            arguments = J$.N(1445985, 'arguments', arguments, true, false, false);
                            key = J$.N(1445993, 'key', key, true, false, false);
                            options = J$.N(1446001, 'options', options, true, false, false);
                            if (J$.C(75232, J$.M(1445721, J$.R(1445705, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1445713, 'key', key, false, false)))) {
                                if (J$.C(75216, J$.B(181346, '===', J$.G(1445737, J$.R(1445729, 'key', key, false, false), 'type'), J$.T(1445745, 'rsa', 21, false)))) {
                                    return J$.Rt(1445785, J$.F(1445777, J$.R(1445753, 'writeRSA', writeRSA, false, true), false)(J$.R(1445761, 'key', key, false, false), J$.R(1445769, 'options', options, false, false)));
                                } else if (J$.C(75208, J$.B(181354, '===', J$.G(1445801, J$.R(1445793, 'key', key, false, false), 'type'), J$.T(1445809, 'ecdsa', 21, false)))) {
                                    return J$.Rt(1445849, J$.F(1445841, J$.R(1445817, 'writeECDSA', writeECDSA, false, true), false)(J$.R(1445825, 'key', key, false, false), J$.R(1445833, 'options', options, false, false)));
                                } else {
                                    throw J$.F(1445889, J$.I(typeof Error === 'undefined' ? Error = J$.R(1445857, 'Error', undefined, true, true) : Error = J$.R(1445857, 'Error', Error, true, true)), true)(J$.B(181362, '+', J$.T(1445865, 'Unsupported algorithm: ', 21, false), J$.G(1445881, J$.R(1445873, 'key', key, false, false), 'type')));
                                }
                            } else if (J$.C(75224, J$.M(1445913, J$.R(1445897, 'Key', Key, false, true), 'isKey', false)(J$.R(1445905, 'key', key, false, false)))) {
                                throw J$.F(1445945, J$.I(typeof Error === 'undefined' ? Error = J$.R(1445921, 'Error', undefined, true, true) : Error = J$.R(1445921, 'Error', Error, true, true)), true)(J$.B(181370, '+', J$.T(1445929, 'Format "dnssec" only supports ', 21, false), J$.T(1445937, 'writing private keys', 21, false)));
                            } else {
                                throw J$.F(1445969, J$.I(typeof Error === 'undefined' ? Error = J$.R(1445953, 'Error', undefined, true, true) : Error = J$.R(1445953, 'Error', Error, true, true)), true)(J$.T(1445961, 'key is not a Key or PrivateKey', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(1446425, J$e);
                        } finally {
                            if (J$.Fr(1446433))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1446017, 'assert', assert, false, false, false);
            J$.N(1446025, 'Buffer', Buffer, false, false, false);
            J$.N(1446033, 'Key', Key, false, false, false);
            J$.N(1446041, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(1446049, 'utils', utils, false, false, false);
            J$.N(1446057, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(1446065, 'Dhe', Dhe, false, false, false);
            J$.N(1446073, 'supportedAlgos', supportedAlgos, false, false, false);
            J$.N(1446081, 'supportedAlgosById', supportedAlgosById, false, false, false);
            read = J$.N(1446097, 'read', J$.T(1446089, read, 12, false), true, false, false);
            readRFC3110 = J$.N(1446113, 'readRFC3110', J$.T(1446105, readRFC3110, 12, false), true, false, false);
            elementToBuf = J$.N(1446129, 'elementToBuf', J$.T(1446121, elementToBuf, 12, false), true, false, false);
            readDNSSECRSAPrivateKey = J$.N(1446145, 'readDNSSECRSAPrivateKey', J$.T(1446137, readDNSSECRSAPrivateKey, 12, false), true, false, false);
            readDNSSECPrivateKey = J$.N(1446161, 'readDNSSECPrivateKey', J$.T(1446153, readDNSSECPrivateKey, 12, false), true, false, false);
            dnssecTimestamp = J$.N(1446177, 'dnssecTimestamp', J$.T(1446169, dnssecTimestamp, 12, false), true, false, false);
            rsaAlgFromOptions = J$.N(1446193, 'rsaAlgFromOptions', J$.T(1446185, rsaAlgFromOptions, 12, false), true, false, false);
            writeRSA = J$.N(1446209, 'writeRSA', J$.T(1446201, writeRSA, 12, false), true, false, false);
            writeECDSA = J$.N(1446225, 'writeECDSA', J$.T(1446217, writeECDSA, 12, false), true, false, false);
            write = J$.N(1446241, 'write', J$.T(1446233, write, 12, false), true, false, false);
            J$.T(1438353, 'use strict', 21, false);
            J$.F(1438377, J$.I(typeof require === 'undefined' ? require = J$.R(1438361, 'require', undefined, true, true) : require = J$.R(1438361, 'require', require, true, true)), false)(J$.T(1438369, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(1438401, J$.I(typeof require === 'undefined' ? require = J$.R(1438385, 'require', undefined, true, true) : require = J$.R(1438385, 'require', require, true, true)), false)(J$.T(1438393, 'core-js/modules/es.array.join', 21, false));
            J$.F(1438425, J$.I(typeof require === 'undefined' ? require = J$.R(1438409, 'require', undefined, true, true) : require = J$.R(1438409, 'require', require, true, true)), false)(J$.T(1438417, 'core-js/modules/es.array.slice', 21, false));
            J$.F(1438449, J$.I(typeof require === 'undefined' ? require = J$.R(1438433, 'require', undefined, true, true) : require = J$.R(1438433, 'require', require, true, true)), false)(J$.T(1438441, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1438473, J$.I(typeof require === 'undefined' ? require = J$.R(1438457, 'require', undefined, true, true) : require = J$.R(1438457, 'require', require, true, true)), false)(J$.T(1438465, 'core-js/modules/es.object.keys', 21, false));
            J$.F(1438497, J$.I(typeof require === 'undefined' ? require = J$.R(1438481, 'require', undefined, true, true) : require = J$.R(1438481, 'require', require, true, true)), false)(J$.T(1438489, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1438521, J$.I(typeof require === 'undefined' ? require = J$.R(1438505, 'require', undefined, true, true) : require = J$.R(1438505, 'require', require, true, true)), false)(J$.T(1438513, 'core-js/modules/es.parse-int', 21, false));
            J$.F(1438545, J$.I(typeof require === 'undefined' ? require = J$.R(1438529, 'require', undefined, true, true) : require = J$.R(1438529, 'require', require, true, true)), false)(J$.T(1438537, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(1438569, J$.I(typeof require === 'undefined' ? require = J$.R(1438553, 'require', undefined, true, true) : require = J$.R(1438553, 'require', require, true, true)), false)(J$.T(1438561, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(1438593, J$.I(typeof require === 'undefined' ? require = J$.R(1438577, 'require', undefined, true, true) : require = J$.R(1438577, 'require', require, true, true)), false)(J$.T(1438585, 'core-js/modules/es.string.match', 21, false));
            J$.F(1438617, J$.I(typeof require === 'undefined' ? require = J$.R(1438601, 'require', undefined, true, true) : require = J$.R(1438601, 'require', require, true, true)), false)(J$.T(1438609, 'core-js/modules/es.string.split', 21, false));
            J$.F(1438641, J$.I(typeof require === 'undefined' ? require = J$.R(1438625, 'require', undefined, true, true) : require = J$.R(1438625, 'require', require, true, true)), false)(J$.T(1438633, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.P(1438681, J$.I(typeof module === 'undefined' ? module = J$.R(1438649, 'module', undefined, true, true) : module = J$.R(1438649, 'module', module, true, true)), 'exports', J$.T(1438673, {
                read: J$.R(1438657, 'read', read, false, true),
                write: J$.R(1438665, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(1438713, 'assert', J$.F(1438705, J$.I(typeof require === 'undefined' ? require = J$.R(1438689, 'require', undefined, true, true) : require = J$.R(1438689, 'require', require, true, true)), false)(J$.T(1438697, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(1438753, 'Buffer', J$.G(1438745, J$.F(1438737, J$.I(typeof require === 'undefined' ? require = J$.R(1438721, 'require', undefined, true, true) : require = J$.R(1438721, 'require', require, true, true)), false)(J$.T(1438729, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var Key = J$.W(1438785, 'Key', J$.F(1438777, J$.I(typeof require === 'undefined' ? require = J$.R(1438761, 'require', undefined, true, true) : require = J$.R(1438761, 'require', require, true, true)), false)(J$.T(1438769, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(1438817, 'PrivateKey', J$.F(1438809, J$.I(typeof require === 'undefined' ? require = J$.R(1438793, 'require', undefined, true, true) : require = J$.R(1438793, 'require', require, true, true)), false)(J$.T(1438801, '../private-key', 21, false)), PrivateKey, false, true);
            var utils = J$.W(1438849, 'utils', J$.F(1438841, J$.I(typeof require === 'undefined' ? require = J$.R(1438825, 'require', undefined, true, true) : require = J$.R(1438825, 'require', require, true, true)), false)(J$.T(1438833, '../utils', 21, false)), utils, false, true);
            var SSHBuffer = J$.W(1438881, 'SSHBuffer', J$.F(1438873, J$.I(typeof require === 'undefined' ? require = J$.R(1438857, 'require', undefined, true, true) : require = J$.R(1438857, 'require', require, true, true)), false)(J$.T(1438865, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var Dhe = J$.W(1438913, 'Dhe', J$.F(1438905, J$.I(typeof require === 'undefined' ? require = J$.R(1438889, 'require', undefined, true, true) : require = J$.R(1438889, 'require', require, true, true)), false)(J$.T(1438897, '../dhe', 21, false)), Dhe, false, true);
            var supportedAlgos = J$.W(1438969, 'supportedAlgos', J$.T(1438961, {
                'rsa-sha1': J$.T(1438921, 5, 22, false),
                'rsa-sha256': J$.T(1438929, 8, 22, false),
                'rsa-sha512': J$.T(1438937, 10, 22, false),
                'ecdsa-p256-sha256': J$.T(1438945, 13, 22, false),
                'ecdsa-p384-sha384': J$.T(1438953, 14, 22, false)
            }, 11, false), supportedAlgos, false, true);
            var supportedAlgosById = J$.W(1438985, 'supportedAlgosById', J$.T(1438977, {}, 11, false), supportedAlgosById, false, true);
            J$.M(1439105, J$.M(1439009, J$.I(typeof Object === 'undefined' ? Object = J$.R(1438993, 'Object', undefined, true, true) : Object = J$.R(1438993, 'Object', Object, true, true)), 'keys', false)(J$.R(1439001, 'supportedAlgos', supportedAlgos, false, true)), 'forEach', false)(J$.T(1439097, function (k) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1439073, arguments.callee, this, arguments);
                            arguments = J$.N(1439081, 'arguments', arguments, true, false, false);
                            k = J$.N(1439089, 'k', k, true, false, false);
                            J$.P(1439065, J$.R(1439017, 'supportedAlgosById', supportedAlgosById, false, true), J$.G(1439041, J$.R(1439025, 'supportedAlgos', supportedAlgos, false, true), J$.R(1439033, 'k', k, false, false)), J$.M(1439057, J$.R(1439049, 'k', k, false, false), 'toUpperCase', false)());
                        } catch (J$e) {
                            J$.Ex(1446249, J$e);
                        } finally {
                            if (J$.Fr(1446257))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(1446441, J$e);
        } finally {
            if (J$.Sr(1446449))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

