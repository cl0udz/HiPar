J$.noInstrEval = false;
jalangiLabel20:
    while (true) {
        try {
            J$.Se(1470273, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/formats/pkcs1.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1462121, arguments.callee, this, arguments);
                            arguments = J$.N(1462129, 'arguments', arguments, true, false, false);
                            buf = J$.N(1462137, 'buf', buf, true, false, false);
                            options = J$.N(1462145, 'options', options, true, false, false);
                            return J$.Rt(1462113, J$.M(1462105, J$.R(1462073, 'pem', pem, false, true), 'read', false)(J$.R(1462081, 'buf', buf, false, false), J$.R(1462089, 'options', options, false, false), J$.T(1462097, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1470681, J$e);
                        } finally {
                            if (J$.Fr(1470689))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1462201, arguments.callee, this, arguments);
                            arguments = J$.N(1462209, 'arguments', arguments, true, false, false);
                            key = J$.N(1462217, 'key', key, true, false, false);
                            options = J$.N(1462225, 'options', options, true, false, false);
                            return J$.Rt(1462193, J$.M(1462185, J$.R(1462153, 'pem', pem, false, true), 'write', false)(J$.R(1462161, 'key', key, false, false), J$.R(1462169, 'options', options, false, false), J$.T(1462177, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1470697, J$e);
                        } finally {
                            if (J$.Fr(1470705))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readMPInt(der, nm) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1462377, arguments.callee, this, arguments);
                            arguments = J$.N(1462385, 'arguments', arguments, true, false, false);
                            der = J$.N(1462393, 'der', der, true, false, false);
                            nm = J$.N(1462401, 'nm', nm, true, false, false);
                            J$.M(1462297, J$.R(1462233, 'assert', assert, false, true), 'strictEqual', false)(J$.M(1462249, J$.R(1462241, 'der', der, false, false), 'peek', false)(), J$.G(1462273, J$.G(1462265, J$.R(1462257, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.B(182394, '+', J$.R(1462281, 'nm', nm, false, false), J$.T(1462289, ' is not an Integer', 21, false)));
                            return J$.Rt(1462369, J$.M(1462361, J$.R(1462305, 'utils', utils, false, true), 'mpNormalize', false)(J$.M(1462353, J$.R(1462313, 'der', der, false, false), 'readString', false)(J$.G(1462337, J$.G(1462329, J$.R(1462321, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(1462345, true, 23, false))));
                        } catch (J$e) {
                            J$.Ex(1470713, J$e);
                        } finally {
                            if (J$.Fr(1470721))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1(alg, type, der) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1462961, arguments.callee, this, arguments);
                            arguments = J$.N(1462969, 'arguments', arguments, true, false, false);
                            alg = J$.N(1462977, 'alg', alg, true, false, false);
                            type = J$.N(1462985, 'type', type, true, false, false);
                            der = J$.N(1462993, 'der', der, true, false, false);
                            switch (J$.C1(75992, J$.R(1462409, 'alg', alg, false, false))) {
                            case J$.C2(76000, J$.T(1462545, 'RSA', 21, false)):
                                if (J$.C(75944, J$.B(182402, '===', J$.R(1462417, 'type', type, false, false), J$.T(1462425, 'public', 21, false))))
                                    return J$.Rt(1462457, J$.F(1462449, J$.R(1462433, 'readPkcs1RSAPublic', readPkcs1RSAPublic, false, true), false)(J$.R(1462441, 'der', der, false, false)));
                                else if (J$.C(75936, J$.B(182410, '===', J$.R(1462465, 'type', type, false, false), J$.T(1462473, 'private', 21, false))))
                                    return J$.Rt(1462505, J$.F(1462497, J$.R(1462481, 'readPkcs1RSAPrivate', readPkcs1RSAPrivate, false, true), false)(J$.R(1462489, 'der', der, false, false)));
                                throw J$.F(1462537, J$.I(typeof Error === 'undefined' ? Error = J$.R(1462513, 'Error', undefined, true, true) : Error = J$.R(1462513, 'Error', Error, true, true)), true)(J$.B(182418, '+', J$.T(1462521, 'Unknown key type: ', 21, false), J$.R(1462529, 'type', type, false, false)));
                            case J$.C2(76008, J$.T(1462681, 'DSA', 21, false)):
                                if (J$.C(75960, J$.B(182426, '===', J$.R(1462553, 'type', type, false, false), J$.T(1462561, 'public', 21, false))))
                                    return J$.Rt(1462593, J$.F(1462585, J$.R(1462569, 'readPkcs1DSAPublic', readPkcs1DSAPublic, false, true), false)(J$.R(1462577, 'der', der, false, false)));
                                else if (J$.C(75952, J$.B(182434, '===', J$.R(1462601, 'type', type, false, false), J$.T(1462609, 'private', 21, false))))
                                    return J$.Rt(1462641, J$.F(1462633, J$.R(1462617, 'readPkcs1DSAPrivate', readPkcs1DSAPrivate, false, true), false)(J$.R(1462625, 'der', der, false, false)));
                                throw J$.F(1462673, J$.I(typeof Error === 'undefined' ? Error = J$.R(1462649, 'Error', undefined, true, true) : Error = J$.R(1462649, 'Error', Error, true, true)), true)(J$.B(182442, '+', J$.T(1462657, 'Unknown key type: ', 21, false), J$.R(1462665, 'type', type, false, false)));
                            case J$.C2(76016, J$.T(1462689, 'EC', 21, false)):
                            case J$.C2(76024, J$.T(1462825, 'ECDSA', 21, false)):
                                if (J$.C(75976, J$.B(182450, '===', J$.R(1462697, 'type', type, false, false), J$.T(1462705, 'private', 21, false))))
                                    return J$.Rt(1462737, J$.F(1462729, J$.R(1462713, 'readPkcs1ECDSAPrivate', readPkcs1ECDSAPrivate, false, true), false)(J$.R(1462721, 'der', der, false, false)));
                                else if (J$.C(75968, J$.B(182458, '===', J$.R(1462745, 'type', type, false, false), J$.T(1462753, 'public', 21, false))))
                                    return J$.Rt(1462785, J$.F(1462777, J$.R(1462761, 'readPkcs1ECDSAPublic', readPkcs1ECDSAPublic, false, true), false)(J$.R(1462769, 'der', der, false, false)));
                                throw J$.F(1462817, J$.I(typeof Error === 'undefined' ? Error = J$.R(1462793, 'Error', undefined, true, true) : Error = J$.R(1462793, 'Error', Error, true, true)), true)(J$.B(182466, '+', J$.T(1462801, 'Unknown key type: ', 21, false), J$.R(1462809, 'type', type, false, false)));
                            case J$.C2(76032, J$.T(1462833, 'EDDSA', 21, false)):
                            case J$.C2(76040, J$.T(1462921, 'EdDSA', 21, false)):
                                if (J$.C(75984, J$.B(182474, '===', J$.R(1462841, 'type', type, false, false), J$.T(1462849, 'private', 21, false))))
                                    return J$.Rt(1462881, J$.F(1462873, J$.R(1462857, 'readPkcs1EdDSAPrivate', readPkcs1EdDSAPrivate, false, true), false)(J$.R(1462865, 'der', der, false, false)));
                                throw J$.F(1462913, J$.I(typeof Error === 'undefined' ? Error = J$.R(1462889, 'Error', undefined, true, true) : Error = J$.R(1462889, 'Error', Error, true, true)), true)(J$.B(182482, '+', J$.R(1462897, 'type', type, false, false), J$.T(1462905, ' keys not supported with EdDSA', 21, false)));
                            default:
                                throw J$.F(1462953, J$.I(typeof Error === 'undefined' ? Error = J$.R(1462929, 'Error', undefined, true, true) : Error = J$.R(1462929, 'Error', Error, true, true)), true)(J$.B(182490, '+', J$.T(1462937, 'Unknown key algo: ', 21, false), J$.R(1462945, 'alg', alg, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(1470729, J$e);
                        } finally {
                            if (J$.Fr(1470737))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPublic(der) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1463193, arguments.callee, this, arguments);
                            arguments = J$.N(1463201, 'arguments', arguments, true, false, false);
                            der = J$.N(1463209, 'der', der, true, false, false);
                            J$.N(1463217, 'n', n, false, false, false);
                            J$.N(1463225, 'e', e, false, false, false);
                            J$.N(1463233, 'key', key, false, false, false);
                            var n = J$.W(1463033, 'n', J$.F(1463025, J$.R(1463001, 'readMPInt', readMPInt, false, true), false)(J$.R(1463009, 'der', der, false, false), J$.T(1463017, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(1463073, 'e', J$.F(1463065, J$.R(1463041, 'readMPInt', readMPInt, false, true), false)(J$.R(1463049, 'der', der, false, false), J$.T(1463057, 'exponent', 21, false)), e, false, false);
                            var key = J$.W(1463153, 'key', J$.T(1463145, {
                                type: J$.T(1463081, 'rsa', 21, false),
                                parts: J$.T(1463137, [
                                    J$.T(1463105, {
                                        name: J$.T(1463089, 'e', 21, false),
                                        data: J$.R(1463097, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(1463129, {
                                        name: J$.T(1463113, 'n', 21, false),
                                        data: J$.R(1463121, 'n', n, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1463185, J$.F(1463177, J$.R(1463161, 'Key', Key, false, true), true)(J$.R(1463169, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470745, J$e);
                        } finally {
                            if (J$.Fr(1470753))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPrivate(der) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1463905, arguments.callee, this, arguments);
                            arguments = J$.N(1463913, 'arguments', arguments, true, false, false);
                            der = J$.N(1463921, 'der', der, true, false, false);
                            J$.N(1463929, 'version', version, false, false, false);
                            J$.N(1463937, 'n', n, false, false, false);
                            J$.N(1463945, 'e', e, false, false, false);
                            J$.N(1463953, 'd', d, false, false, false);
                            J$.N(1463961, 'p', p, false, false, false);
                            J$.N(1463969, 'q', q, false, false, false);
                            J$.N(1463977, 'dmodp', dmodp, false, false, false);
                            J$.N(1463985, 'dmodq', dmodq, false, false, false);
                            J$.N(1463993, 'iqmp', iqmp, false, false, false);
                            J$.N(1464001, 'key', key, false, false, false);
                            var version = J$.W(1463273, 'version', J$.F(1463265, J$.R(1463241, 'readMPInt', readMPInt, false, true), false)(J$.R(1463249, 'der', der, false, false), J$.T(1463257, 'version', 21, false)), version, false, false);
                            J$.M(1463321, J$.R(1463281, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1463305, J$.R(1463289, 'version', version, false, false), J$.T(1463297, 0, 22, false)), J$.T(1463313, 0, 22, false));
                            var n = J$.W(1463361, 'n', J$.F(1463353, J$.R(1463329, 'readMPInt', readMPInt, false, true), false)(J$.R(1463337, 'der', der, false, false), J$.T(1463345, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(1463401, 'e', J$.F(1463393, J$.R(1463369, 'readMPInt', readMPInt, false, true), false)(J$.R(1463377, 'der', der, false, false), J$.T(1463385, 'public exponent', 21, false)), e, false, false);
                            var d = J$.W(1463441, 'd', J$.F(1463433, J$.R(1463409, 'readMPInt', readMPInt, false, true), false)(J$.R(1463417, 'der', der, false, false), J$.T(1463425, 'private exponent', 21, false)), d, false, false);
                            var p = J$.W(1463481, 'p', J$.F(1463473, J$.R(1463449, 'readMPInt', readMPInt, false, true), false)(J$.R(1463457, 'der', der, false, false), J$.T(1463465, 'prime1', 21, false)), p, false, false);
                            var q = J$.W(1463521, 'q', J$.F(1463513, J$.R(1463489, 'readMPInt', readMPInt, false, true), false)(J$.R(1463497, 'der', der, false, false), J$.T(1463505, 'prime2', 21, false)), q, false, false);
                            var dmodp = J$.W(1463561, 'dmodp', J$.F(1463553, J$.R(1463529, 'readMPInt', readMPInt, false, true), false)(J$.R(1463537, 'der', der, false, false), J$.T(1463545, 'exponent1', 21, false)), dmodp, false, false);
                            var dmodq = J$.W(1463601, 'dmodq', J$.F(1463593, J$.R(1463569, 'readMPInt', readMPInt, false, true), false)(J$.R(1463577, 'der', der, false, false), J$.T(1463585, 'exponent2', 21, false)), dmodq, false, false);
                            var iqmp = J$.W(1463641, 'iqmp', J$.F(1463633, J$.R(1463609, 'readMPInt', readMPInt, false, true), false)(J$.R(1463617, 'der', der, false, false), J$.T(1463625, 'iqmp', 21, false)), iqmp, false, false);
                            var key = J$.W(1463865, 'key', J$.T(1463857, {
                                type: J$.T(1463649, 'rsa', 21, false),
                                parts: J$.T(1463849, [
                                    J$.T(1463673, {
                                        name: J$.T(1463657, 'n', 21, false),
                                        data: J$.R(1463665, 'n', n, false, false)
                                    }, 11, false),
                                    J$.T(1463697, {
                                        name: J$.T(1463681, 'e', 21, false),
                                        data: J$.R(1463689, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(1463721, {
                                        name: J$.T(1463705, 'd', 21, false),
                                        data: J$.R(1463713, 'd', d, false, false)
                                    }, 11, false),
                                    J$.T(1463745, {
                                        name: J$.T(1463729, 'iqmp', 21, false),
                                        data: J$.R(1463737, 'iqmp', iqmp, false, false)
                                    }, 11, false),
                                    J$.T(1463769, {
                                        name: J$.T(1463753, 'p', 21, false),
                                        data: J$.R(1463761, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(1463793, {
                                        name: J$.T(1463777, 'q', 21, false),
                                        data: J$.R(1463785, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(1463817, {
                                        name: J$.T(1463801, 'dmodp', 21, false),
                                        data: J$.R(1463809, 'dmodp', dmodp, false, false)
                                    }, 11, false),
                                    J$.T(1463841, {
                                        name: J$.T(1463825, 'dmodq', 21, false),
                                        data: J$.R(1463833, 'dmodq', dmodq, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1463897, J$.F(1463889, J$.R(1463873, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1463881, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470761, J$e);
                        } finally {
                            if (J$.Fr(1470769))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPrivate(der) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1464481, arguments.callee, this, arguments);
                            arguments = J$.N(1464489, 'arguments', arguments, true, false, false);
                            der = J$.N(1464497, 'der', der, true, false, false);
                            J$.N(1464505, 'version', version, false, false, false);
                            J$.N(1464513, 'p', p, false, false, false);
                            J$.N(1464521, 'q', q, false, false, false);
                            J$.N(1464529, 'g', g, false, false, false);
                            J$.N(1464537, 'y', y, false, false, false);
                            J$.N(1464545, 'x', x, false, false, false);
                            J$.N(1464553, 'key', key, false, false, false);
                            var version = J$.W(1464041, 'version', J$.F(1464033, J$.R(1464009, 'readMPInt', readMPInt, false, true), false)(J$.R(1464017, 'der', der, false, false), J$.T(1464025, 'version', 21, false)), version, false, false);
                            J$.M(1464089, J$.R(1464049, 'assert', assert, false, true), 'strictEqual', false)(J$.M(1464073, J$.R(1464057, 'version', version, false, false), 'readUInt8', false)(J$.T(1464065, 0, 22, false)), J$.T(1464081, 0, 22, false));
                            var p = J$.W(1464129, 'p', J$.F(1464121, J$.R(1464097, 'readMPInt', readMPInt, false, true), false)(J$.R(1464105, 'der', der, false, false), J$.T(1464113, 'p', 21, false)), p, false, false);
                            var q = J$.W(1464169, 'q', J$.F(1464161, J$.R(1464137, 'readMPInt', readMPInt, false, true), false)(J$.R(1464145, 'der', der, false, false), J$.T(1464153, 'q', 21, false)), q, false, false);
                            var g = J$.W(1464209, 'g', J$.F(1464201, J$.R(1464177, 'readMPInt', readMPInt, false, true), false)(J$.R(1464185, 'der', der, false, false), J$.T(1464193, 'g', 21, false)), g, false, false);
                            var y = J$.W(1464249, 'y', J$.F(1464241, J$.R(1464217, 'readMPInt', readMPInt, false, true), false)(J$.R(1464225, 'der', der, false, false), J$.T(1464233, 'y', 21, false)), y, false, false);
                            var x = J$.W(1464289, 'x', J$.F(1464281, J$.R(1464257, 'readMPInt', readMPInt, false, true), false)(J$.R(1464265, 'der', der, false, false), J$.T(1464273, 'x', 21, false)), x, false, false);
                            var key = J$.W(1464441, 'key', J$.T(1464433, {
                                type: J$.T(1464297, 'dsa', 21, false),
                                parts: J$.T(1464425, [
                                    J$.T(1464321, {
                                        name: J$.T(1464305, 'p', 21, false),
                                        data: J$.R(1464313, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(1464345, {
                                        name: J$.T(1464329, 'q', 21, false),
                                        data: J$.R(1464337, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(1464369, {
                                        name: J$.T(1464353, 'g', 21, false),
                                        data: J$.R(1464361, 'g', g, false, false)
                                    }, 11, false),
                                    J$.T(1464393, {
                                        name: J$.T(1464377, 'y', 21, false),
                                        data: J$.R(1464385, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(1464417, {
                                        name: J$.T(1464401, 'x', 21, false),
                                        data: J$.R(1464409, 'x', x, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1464473, J$.F(1464465, J$.R(1464449, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1464457, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470777, J$e);
                        } finally {
                            if (J$.Fr(1470785))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1EdDSAPrivate(der) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1464985, arguments.callee, this, arguments);
                            arguments = J$.N(1464993, 'arguments', arguments, true, false, false);
                            der = J$.N(1465001, 'der', der, true, false, false);
                            J$.N(1465009, 'version', version, false, false, false);
                            J$.N(1465017, 'k', k, false, false, false);
                            J$.N(1465025, 'oid', oid, false, false, false);
                            J$.N(1465033, 'A', A, false, false, false);
                            J$.N(1465041, 'key', key, false, false, false);
                            var version = J$.W(1464593, 'version', J$.F(1464585, J$.R(1464561, 'readMPInt', readMPInt, false, true), false)(J$.R(1464569, 'der', der, false, false), J$.T(1464577, 'version', 21, false)), version, false, false);
                            J$.M(1464641, J$.R(1464601, 'assert', assert, false, true), 'strictEqual', false)(J$.M(1464625, J$.R(1464609, 'version', version, false, false), 'readUInt8', false)(J$.T(1464617, 0, 22, false)), J$.T(1464633, 1, 22, false));
                            var k = J$.W(1464697, 'k', J$.M(1464689, J$.R(1464649, 'der', der, false, false), 'readString', false)(J$.G(1464673, J$.G(1464665, J$.R(1464657, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(1464681, true, 23, false)), k, false, false);
                            J$.M(1464721, J$.R(1464705, 'der', der, false, false), 'readSequence', false)(J$.T(1464713, 160, 22, false));
                            var oid = J$.W(1464745, 'oid', J$.M(1464737, J$.R(1464729, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(1464785, J$.R(1464753, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1464761, 'oid', oid, false, false), J$.T(1464769, '1.3.101.112', 21, false), J$.T(1464777, 'the ed25519 curve identifier', 21, false));
                            J$.M(1464809, J$.R(1464793, 'der', der, false, false), 'readSequence', false)(J$.T(1464801, 161, 22, false));
                            var A = J$.W(1464841, 'A', J$.M(1464833, J$.R(1464817, 'utils', utils, false, true), 'readBitString', false)(J$.R(1464825, 'der', der, false, false)), A, false, false);
                            var key = J$.W(1464945, 'key', J$.T(1464937, {
                                type: J$.T(1464849, 'ed25519', 21, false),
                                parts: J$.T(1464929, [
                                    J$.T(1464897, {
                                        name: J$.T(1464857, 'A', 21, false),
                                        data: J$.M(1464889, J$.R(1464865, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(1464873, 'A', A, false, false), J$.T(1464881, 32, 22, false))
                                    }, 11, false),
                                    J$.T(1464921, {
                                        name: J$.T(1464905, 'k', 21, false),
                                        data: J$.R(1464913, 'k', k, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1464977, J$.F(1464969, J$.R(1464953, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1464961, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470793, J$e);
                        } finally {
                            if (J$.Fr(1470801))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPublic(der) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1465369, arguments.callee, this, arguments);
                            arguments = J$.N(1465377, 'arguments', arguments, true, false, false);
                            der = J$.N(1465385, 'der', der, true, false, false);
                            J$.N(1465393, 'y', y, false, false, false);
                            J$.N(1465401, 'p', p, false, false, false);
                            J$.N(1465409, 'q', q, false, false, false);
                            J$.N(1465417, 'g', g, false, false, false);
                            J$.N(1465425, 'key', key, false, false, false);
                            var y = J$.W(1465081, 'y', J$.F(1465073, J$.R(1465049, 'readMPInt', readMPInt, false, true), false)(J$.R(1465057, 'der', der, false, false), J$.T(1465065, 'y', 21, false)), y, false, false);
                            var p = J$.W(1465121, 'p', J$.F(1465113, J$.R(1465089, 'readMPInt', readMPInt, false, true), false)(J$.R(1465097, 'der', der, false, false), J$.T(1465105, 'p', 21, false)), p, false, false);
                            var q = J$.W(1465161, 'q', J$.F(1465153, J$.R(1465129, 'readMPInt', readMPInt, false, true), false)(J$.R(1465137, 'der', der, false, false), J$.T(1465145, 'q', 21, false)), q, false, false);
                            var g = J$.W(1465201, 'g', J$.F(1465193, J$.R(1465169, 'readMPInt', readMPInt, false, true), false)(J$.R(1465177, 'der', der, false, false), J$.T(1465185, 'g', 21, false)), g, false, false);
                            var key = J$.W(1465329, 'key', J$.T(1465321, {
                                type: J$.T(1465209, 'dsa', 21, false),
                                parts: J$.T(1465313, [
                                    J$.T(1465233, {
                                        name: J$.T(1465217, 'y', 21, false),
                                        data: J$.R(1465225, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(1465257, {
                                        name: J$.T(1465241, 'p', 21, false),
                                        data: J$.R(1465249, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(1465281, {
                                        name: J$.T(1465265, 'q', 21, false),
                                        data: J$.R(1465273, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(1465305, {
                                        name: J$.T(1465289, 'g', 21, false),
                                        data: J$.R(1465297, 'g', g, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1465361, J$.F(1465353, J$.R(1465337, 'Key', Key, false, true), true)(J$.R(1465345, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470809, J$e);
                        } finally {
                            if (J$.Fr(1470817))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPublic(der) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1465993, arguments.callee, this, arguments);
                            arguments = J$.N(1466001, 'arguments', arguments, true, false, false);
                            der = J$.N(1466009, 'der', der, true, false, false);
                            J$.N(1466017, 'oid', oid, false, false, false);
                            J$.N(1466025, 'curveOid', curveOid, false, false, false);
                            J$.N(1466033, 'curve', curve, false, false, false);
                            J$.N(1466041, 'curves', curves, false, false, false);
                            J$.N(1466049, 'j', j, false, false, false);
                            J$.N(1466057, 'c', c, false, false, false);
                            J$.N(1466065, 'cd', cd, false, false, false);
                            J$.N(1466073, 'Q', Q, false, false, false);
                            J$.N(1466081, 'key', key, false, false, false);
                            J$.M(1465441, J$.R(1465433, 'der', der, false, false), 'readSequence', false)();
                            var oid = J$.W(1465465, 'oid', J$.M(1465457, J$.R(1465449, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(1465505, J$.R(1465473, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1465481, 'oid', oid, false, false), J$.T(1465489, '1.2.840.10045.2.1', 21, false), J$.T(1465497, 'must be ecPublicKey', 21, false));
                            var curveOid = J$.W(1465529, 'curveOid', J$.M(1465521, J$.R(1465513, 'der', der, false, false), 'readOID', false)(), curveOid, false, false);
                            var curve;
                            var curves = J$.W(1465569, 'curves', J$.M(1465561, J$.I(typeof Object === 'undefined' ? Object = J$.R(1465537, 'Object', undefined, true, true) : Object = J$.R(1465537, 'Object', Object, true, true)), 'keys', false)(J$.G(1465553, J$.R(1465545, 'algs', algs, false, true), 'curves')), curves, false, false);
                            for (var j = J$.W(1465585, 'j', J$.T(1465577, 0, 22, false), j, false, false); J$.C(76056, J$.B(182498, '<', J$.R(1465593, 'j', j, false, false), J$.G(1465609, J$.R(1465601, 'curves', curves, false, false), 'length'))); j = J$.W(1465625, 'j', J$.B(182514, '+', J$.U(182506, '+', J$.R(1465617, 'j', j, false, false)), 1), j, false, false)) {
                                var c = J$.W(1465657, 'c', J$.G(1465649, J$.R(1465633, 'curves', curves, false, false), J$.R(1465641, 'j', j, false, false)), c, false, false);
                                var cd = J$.W(1465697, 'cd', J$.G(1465689, J$.G(1465673, J$.R(1465665, 'algs', algs, false, true), 'curves'), J$.R(1465681, 'c', c, false, false)), cd, false, false);
                                if (J$.C(76048, J$.B(182522, '===', J$.G(1465713, J$.R(1465705, 'cd', cd, false, false), 'pkcs8oid'), J$.R(1465721, 'curveOid', curveOid, false, false)))) {
                                    curve = J$.W(1465737, 'curve', J$.R(1465729, 'c', c, false, false), curve, false, false);
                                    break;
                                }
                            }
                            J$.M(1465769, J$.R(1465745, 'assert', assert, false, true), 'string', false)(J$.R(1465753, 'curve', curve, false, false), J$.T(1465761, 'a known ECDSA named curve', 21, false));
                            var Q = J$.W(1465825, 'Q', J$.M(1465817, J$.R(1465777, 'der', der, false, false), 'readString', false)(J$.G(1465801, J$.G(1465793, J$.R(1465785, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(1465809, true, 23, false)), Q, false, false);
                            Q = J$.W(1465857, 'Q', J$.M(1465849, J$.R(1465833, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(1465841, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(1465953, 'key', J$.T(1465945, {
                                type: J$.T(1465865, 'ecdsa', 21, false),
                                parts: J$.T(1465937, [
                                    J$.T(1465905, {
                                        name: J$.T(1465873, 'curve', 21, false),
                                        data: J$.M(1465897, J$.R(1465881, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1465889, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(1465929, {
                                        name: J$.T(1465913, 'Q', 21, false),
                                        data: J$.R(1465921, 'Q', Q, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1465985, J$.F(1465977, J$.R(1465961, 'Key', Key, false, true), true)(J$.R(1465969, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470825, J$e);
                        } finally {
                            if (J$.Fr(1470833))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPrivate(der) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(1466585, arguments.callee, this, arguments);
                            arguments = J$.N(1466593, 'arguments', arguments, true, false, false);
                            der = J$.N(1466601, 'der', der, true, false, false);
                            J$.N(1466609, 'version', version, false, false, false);
                            J$.N(1466617, 'd', d, false, false, false);
                            J$.N(1466625, 'curve', curve, false, false, false);
                            J$.N(1466633, 'Q', Q, false, false, false);
                            J$.N(1466641, 'key', key, false, false, false);
                            var version = J$.W(1466121, 'version', J$.F(1466113, J$.R(1466089, 'readMPInt', readMPInt, false, true), false)(J$.R(1466097, 'der', der, false, false), J$.T(1466105, 'version', 21, false)), version, false, false);
                            J$.M(1466169, J$.R(1466129, 'assert', assert, false, true), 'strictEqual', false)(J$.M(1466153, J$.R(1466137, 'version', version, false, false), 'readUInt8', false)(J$.T(1466145, 0, 22, false)), J$.T(1466161, 1, 22, false));
                            var d = J$.W(1466225, 'd', J$.M(1466217, J$.R(1466177, 'der', der, false, false), 'readString', false)(J$.G(1466201, J$.G(1466193, J$.R(1466185, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(1466209, true, 23, false)), d, false, false);
                            J$.M(1466249, J$.R(1466233, 'der', der, false, false), 'readSequence', false)(J$.T(1466241, 160, 22, false));
                            var curve = J$.W(1466281, 'curve', J$.F(1466273, J$.R(1466257, 'readECDSACurve', readECDSACurve, false, true), false)(J$.R(1466265, 'der', der, false, false)), curve, false, false);
                            J$.M(1466313, J$.R(1466289, 'assert', assert, false, true), 'string', false)(J$.R(1466297, 'curve', curve, false, false), J$.T(1466305, 'a known elliptic curve', 21, false));
                            J$.M(1466337, J$.R(1466321, 'der', der, false, false), 'readSequence', false)(J$.T(1466329, 161, 22, false));
                            var Q = J$.W(1466393, 'Q', J$.M(1466385, J$.R(1466345, 'der', der, false, false), 'readString', false)(J$.G(1466369, J$.G(1466361, J$.R(1466353, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(1466377, true, 23, false)), Q, false, false);
                            Q = J$.W(1466425, 'Q', J$.M(1466417, J$.R(1466401, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(1466409, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(1466545, 'key', J$.T(1466537, {
                                type: J$.T(1466433, 'ecdsa', 21, false),
                                parts: J$.T(1466529, [
                                    J$.T(1466473, {
                                        name: J$.T(1466441, 'curve', 21, false),
                                        data: J$.M(1466465, J$.R(1466449, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1466457, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(1466497, {
                                        name: J$.T(1466481, 'Q', 21, false),
                                        data: J$.R(1466489, 'Q', Q, false, false)
                                    }, 11, false),
                                    J$.T(1466521, {
                                        name: J$.T(1466505, 'd', 21, false),
                                        data: J$.R(1466513, 'd', d, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(1466577, J$.F(1466569, J$.R(1466553, 'PrivateKey', PrivateKey, false, true), true)(J$.R(1466561, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1470841, J$e);
                        } finally {
                            if (J$.Fr(1470849))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1(der, key) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(1467121, arguments.callee, this, arguments);
                            arguments = J$.N(1467129, 'arguments', arguments, true, false, false);
                            der = J$.N(1467137, 'der', der, true, false, false);
                            key = J$.N(1467145, 'key', key, true, false, false);
                            J$.M(1466657, J$.R(1466649, 'der', der, false, false), 'startSequence', false)();
                            switch (J$.C1(76096, J$.G(1466673, J$.R(1466665, 'key', key, false, false), 'type'))) {
                            case J$.C2(76104, J$.T(1466769, 'rsa', 21, false)):
                                if (J$.C(76064, J$.M(1466697, J$.R(1466681, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1466689, 'key', key, false, false))))
                                    J$.F(1466729, J$.R(1466705, 'writePkcs1RSAPrivate', writePkcs1RSAPrivate, false, true), false)(J$.R(1466713, 'der', der, false, false), J$.R(1466721, 'key', key, false, false));
                                else
                                    J$.F(1466761, J$.R(1466737, 'writePkcs1RSAPublic', writePkcs1RSAPublic, false, true), false)(J$.R(1466745, 'der', der, false, false), J$.R(1466753, 'key', key, false, false));
                                break;
                            case J$.C2(76112, J$.T(1466865, 'dsa', 21, false)):
                                if (J$.C(76072, J$.M(1466793, J$.R(1466777, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1466785, 'key', key, false, false))))
                                    J$.F(1466825, J$.R(1466801, 'writePkcs1DSAPrivate', writePkcs1DSAPrivate, false, true), false)(J$.R(1466809, 'der', der, false, false), J$.R(1466817, 'key', key, false, false));
                                else
                                    J$.F(1466857, J$.R(1466833, 'writePkcs1DSAPublic', writePkcs1DSAPublic, false, true), false)(J$.R(1466841, 'der', der, false, false), J$.R(1466849, 'key', key, false, false));
                                break;
                            case J$.C2(76120, J$.T(1466961, 'ecdsa', 21, false)):
                                if (J$.C(76080, J$.M(1466889, J$.R(1466873, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1466881, 'key', key, false, false))))
                                    J$.F(1466921, J$.R(1466897, 'writePkcs1ECDSAPrivate', writePkcs1ECDSAPrivate, false, true), false)(J$.R(1466905, 'der', der, false, false), J$.R(1466913, 'key', key, false, false));
                                else
                                    J$.F(1466953, J$.R(1466929, 'writePkcs1ECDSAPublic', writePkcs1ECDSAPublic, false, true), false)(J$.R(1466937, 'der', der, false, false), J$.R(1466945, 'key', key, false, false));
                                break;
                            case J$.C2(76128, J$.T(1467057, 'ed25519', 21, false)):
                                if (J$.C(76088, J$.M(1466985, J$.R(1466969, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1466977, 'key', key, false, false))))
                                    J$.F(1467017, J$.R(1466993, 'writePkcs1EdDSAPrivate', writePkcs1EdDSAPrivate, false, true), false)(J$.R(1467001, 'der', der, false, false), J$.R(1467009, 'key', key, false, false));
                                else
                                    J$.F(1467049, J$.R(1467025, 'writePkcs1EdDSAPublic', writePkcs1EdDSAPublic, false, true), false)(J$.R(1467033, 'der', der, false, false), J$.R(1467041, 'key', key, false, false));
                                break;
                            default:
                                throw J$.F(1467097, J$.I(typeof Error === 'undefined' ? Error = J$.R(1467065, 'Error', undefined, true, true) : Error = J$.R(1467065, 'Error', Error, true, true)), true)(J$.B(182530, '+', J$.T(1467073, 'Unknown key algo: ', 21, false), J$.G(1467089, J$.R(1467081, 'key', key, false, false), 'type')));
                            }
                            J$.M(1467113, J$.R(1467105, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(1470857, J$e);
                        } finally {
                            if (J$.Fr(1470865))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPublic(der, key) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(1467297, arguments.callee, this, arguments);
                            arguments = J$.N(1467305, 'arguments', arguments, true, false, false);
                            der = J$.N(1467313, 'der', der, true, false, false);
                            key = J$.N(1467321, 'key', key, true, false, false);
                            J$.M(1467217, J$.R(1467153, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467185, J$.G(1467177, J$.G(1467169, J$.R(1467161, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(1467209, J$.G(1467201, J$.R(1467193, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467289, J$.R(1467225, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467257, J$.G(1467249, J$.G(1467241, J$.R(1467233, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(1467281, J$.G(1467273, J$.R(1467265, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(1470873, J$e);
                        } finally {
                            if (J$.Fr(1470881))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPrivate(der, key) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(1468065, arguments.callee, this, arguments);
                            arguments = J$.N(1468073, 'arguments', arguments, true, false, false);
                            der = J$.N(1468081, 'der', der, true, false, false);
                            key = J$.N(1468089, 'key', key, true, false, false);
                            J$.N(1468097, 'ver', ver, false, false, false);
                            var ver = J$.W(1467361, 'ver', J$.M(1467353, J$.R(1467329, 'Buffer', Buffer, false, true), 'from', false)(J$.T(1467345, [J$.T(1467337, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(1467409, J$.R(1467369, 'der', der, false, false), 'writeBuffer', false)(J$.R(1467377, 'ver', ver, false, false), J$.G(1467401, J$.G(1467393, J$.R(1467385, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467481, J$.R(1467417, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467449, J$.G(1467441, J$.G(1467433, J$.R(1467425, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(1467473, J$.G(1467465, J$.R(1467457, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467553, J$.R(1467489, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467521, J$.G(1467513, J$.G(1467505, J$.R(1467497, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(1467545, J$.G(1467537, J$.R(1467529, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467625, J$.R(1467561, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467593, J$.G(1467585, J$.G(1467577, J$.R(1467569, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(1467617, J$.G(1467609, J$.R(1467601, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467697, J$.R(1467633, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467665, J$.G(1467657, J$.G(1467649, J$.R(1467641, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(1467689, J$.G(1467681, J$.R(1467673, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467769, J$.R(1467705, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467737, J$.G(1467729, J$.G(1467721, J$.R(1467713, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(1467761, J$.G(1467753, J$.R(1467745, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            if (J$.C(76144, J$.C(76136, J$.U(182538, '!', J$.G(1467793, J$.G(1467785, J$.R(1467777, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(182546, '!', J$.G(1467817, J$.G(1467809, J$.R(1467801, 'key', key, false, false), 'part'), 'dmodq'))))
                                J$.M(1467841, J$.R(1467825, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(1467833, 'key', key, false, false));
                            J$.M(1467913, J$.R(1467849, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467881, J$.G(1467873, J$.G(1467865, J$.R(1467857, 'key', key, false, false), 'part'), 'dmodp'), 'data'), J$.G(1467905, J$.G(1467897, J$.R(1467889, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1467985, J$.R(1467921, 'der', der, false, false), 'writeBuffer', false)(J$.G(1467953, J$.G(1467945, J$.G(1467937, J$.R(1467929, 'key', key, false, false), 'part'), 'dmodq'), 'data'), J$.G(1467977, J$.G(1467969, J$.R(1467961, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468057, J$.R(1467993, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468025, J$.G(1468017, J$.G(1468009, J$.R(1468001, 'key', key, false, false), 'part'), 'iqmp'), 'data'), J$.G(1468049, J$.G(1468041, J$.R(1468033, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(1470889, J$e);
                        } finally {
                            if (J$.Fr(1470897))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPrivate(der, key) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(1468553, arguments.callee, this, arguments);
                            arguments = J$.N(1468561, 'arguments', arguments, true, false, false);
                            der = J$.N(1468569, 'der', der, true, false, false);
                            key = J$.N(1468577, 'key', key, true, false, false);
                            J$.N(1468585, 'ver', ver, false, false, false);
                            var ver = J$.W(1468137, 'ver', J$.M(1468129, J$.R(1468105, 'Buffer', Buffer, false, true), 'from', false)(J$.T(1468121, [J$.T(1468113, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(1468185, J$.R(1468145, 'der', der, false, false), 'writeBuffer', false)(J$.R(1468153, 'ver', ver, false, false), J$.G(1468177, J$.G(1468169, J$.R(1468161, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468257, J$.R(1468193, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468225, J$.G(1468217, J$.G(1468209, J$.R(1468201, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(1468249, J$.G(1468241, J$.R(1468233, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468329, J$.R(1468265, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468297, J$.G(1468289, J$.G(1468281, J$.R(1468273, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(1468321, J$.G(1468313, J$.R(1468305, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468401, J$.R(1468337, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468369, J$.G(1468361, J$.G(1468353, J$.R(1468345, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(1468393, J$.G(1468385, J$.R(1468377, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468473, J$.R(1468409, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468441, J$.G(1468433, J$.G(1468425, J$.R(1468417, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(1468465, J$.G(1468457, J$.R(1468449, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468545, J$.R(1468481, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468513, J$.G(1468505, J$.G(1468497, J$.R(1468489, 'key', key, false, false), 'part'), 'x'), 'data'), J$.G(1468537, J$.G(1468529, J$.R(1468521, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(1470905, J$e);
                        } finally {
                            if (J$.Fr(1470913))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPublic(der, key) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(1468881, arguments.callee, this, arguments);
                            arguments = J$.N(1468889, 'arguments', arguments, true, false, false);
                            der = J$.N(1468897, 'der', der, true, false, false);
                            key = J$.N(1468905, 'key', key, true, false, false);
                            J$.M(1468657, J$.R(1468593, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468625, J$.G(1468617, J$.G(1468609, J$.R(1468601, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(1468649, J$.G(1468641, J$.R(1468633, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468729, J$.R(1468665, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468697, J$.G(1468689, J$.G(1468681, J$.R(1468673, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(1468721, J$.G(1468713, J$.R(1468705, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468801, J$.R(1468737, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468769, J$.G(1468761, J$.G(1468753, J$.R(1468745, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(1468793, J$.G(1468785, J$.R(1468777, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1468873, J$.R(1468809, 'der', der, false, false), 'writeBuffer', false)(J$.G(1468841, J$.G(1468833, J$.G(1468825, J$.R(1468817, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(1468865, J$.G(1468857, J$.R(1468849, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(1470921, J$e);
                        } finally {
                            if (J$.Fr(1470929))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPublic(der, key) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(1469233, arguments.callee, this, arguments);
                            arguments = J$.N(1469241, 'arguments', arguments, true, false, false);
                            der = J$.N(1469249, 'der', der, true, false, false);
                            key = J$.N(1469257, 'key', key, true, false, false);
                            J$.N(1469265, 'curve', curve, false, false, false);
                            J$.N(1469273, 'curveOid', curveOid, false, false, false);
                            J$.N(1469281, 'Q', Q, false, false, false);
                            J$.M(1468921, J$.R(1468913, 'der', der, false, false), 'startSequence', false)();
                            J$.M(1468945, J$.R(1468929, 'der', der, false, false), 'writeOID', false)(J$.T(1468937, '1.2.840.10045.2.1', 21, false));
                            var curve = J$.W(1468993, 'curve', J$.M(1468985, J$.G(1468977, J$.G(1468969, J$.G(1468961, J$.R(1468953, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(1469041, 'curveOid', J$.G(1469033, J$.G(1469025, J$.G(1469009, J$.R(1469001, 'algs', algs, false, true), 'curves'), J$.R(1469017, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(1469073, J$.R(1469049, 'assert', assert, false, true), 'string', false)(J$.R(1469057, 'curveOid', curveOid, false, false), J$.T(1469065, 'a known ECDSA named curve', 21, false));
                            J$.M(1469097, J$.R(1469081, 'der', der, false, false), 'writeOID', false)(J$.R(1469089, 'curveOid', curveOid, false, false));
                            J$.M(1469113, J$.R(1469105, 'der', der, false, false), 'endSequence', false)();
                            var Q = J$.W(1469177, 'Q', J$.M(1469169, J$.R(1469121, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(1469153, J$.G(1469145, J$.G(1469137, J$.R(1469129, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(1469161, true, 23, false)), Q, false, false);
                            J$.M(1469225, J$.R(1469185, 'der', der, false, false), 'writeBuffer', false)(J$.R(1469193, 'Q', Q, false, false), J$.G(1469217, J$.G(1469209, J$.R(1469201, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                        } catch (J$e) {
                            J$.Ex(1470937, J$e);
                        } finally {
                            if (J$.Fr(1470945))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPrivate(der, key) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(1469793, arguments.callee, this, arguments);
                            arguments = J$.N(1469801, 'arguments', arguments, true, false, false);
                            der = J$.N(1469809, 'der', der, true, false, false);
                            key = J$.N(1469817, 'key', key, true, false, false);
                            J$.N(1469825, 'ver', ver, false, false, false);
                            J$.N(1469833, 'curve', curve, false, false, false);
                            J$.N(1469841, 'curveOid', curveOid, false, false, false);
                            J$.N(1469849, 'Q', Q, false, false, false);
                            var ver = J$.W(1469321, 'ver', J$.M(1469313, J$.R(1469289, 'Buffer', Buffer, false, true), 'from', false)(J$.T(1469305, [J$.T(1469297, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(1469369, J$.R(1469329, 'der', der, false, false), 'writeBuffer', false)(J$.R(1469337, 'ver', ver, false, false), J$.G(1469361, J$.G(1469353, J$.R(1469345, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1469441, J$.R(1469377, 'der', der, false, false), 'writeBuffer', false)(J$.G(1469409, J$.G(1469401, J$.G(1469393, J$.R(1469385, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(1469433, J$.G(1469425, J$.R(1469417, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(1469465, J$.R(1469449, 'der', der, false, false), 'startSequence', false)(J$.T(1469457, 160, 22, false));
                            var curve = J$.W(1469513, 'curve', J$.M(1469505, J$.G(1469497, J$.G(1469489, J$.G(1469481, J$.R(1469473, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(1469561, 'curveOid', J$.G(1469553, J$.G(1469545, J$.G(1469529, J$.R(1469521, 'algs', algs, false, true), 'curves'), J$.R(1469537, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(1469593, J$.R(1469569, 'assert', assert, false, true), 'string', false)(J$.R(1469577, 'curveOid', curveOid, false, false), J$.T(1469585, 'a known ECDSA named curve', 21, false));
                            J$.M(1469617, J$.R(1469601, 'der', der, false, false), 'writeOID', false)(J$.R(1469609, 'curveOid', curveOid, false, false));
                            J$.M(1469633, J$.R(1469625, 'der', der, false, false), 'endSequence', false)();
                            J$.M(1469657, J$.R(1469641, 'der', der, false, false), 'startSequence', false)(J$.T(1469649, 161, 22, false));
                            var Q = J$.W(1469721, 'Q', J$.M(1469713, J$.R(1469665, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(1469697, J$.G(1469689, J$.G(1469681, J$.R(1469673, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(1469705, true, 23, false)), Q, false, false);
                            J$.M(1469769, J$.R(1469729, 'der', der, false, false), 'writeBuffer', false)(J$.R(1469737, 'Q', Q, false, false), J$.G(1469761, J$.G(1469753, J$.R(1469745, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                            J$.M(1469785, J$.R(1469777, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(1470953, J$e);
                        } finally {
                            if (J$.Fr(1470961))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPrivate(der, key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(1470177, arguments.callee, this, arguments);
                            arguments = J$.N(1470185, 'arguments', arguments, true, false, false);
                            der = J$.N(1470193, 'der', der, true, false, false);
                            key = J$.N(1470201, 'key', key, true, false, false);
                            J$.N(1470209, 'ver', ver, false, false, false);
                            var ver = J$.W(1469889, 'ver', J$.M(1469881, J$.R(1469857, 'Buffer', Buffer, false, true), 'from', false)(J$.T(1469873, [J$.T(1469865, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(1469937, J$.R(1469897, 'der', der, false, false), 'writeBuffer', false)(J$.R(1469905, 'ver', ver, false, false), J$.G(1469929, J$.G(1469921, J$.R(1469913, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(1470009, J$.R(1469945, 'der', der, false, false), 'writeBuffer', false)(J$.G(1469977, J$.G(1469969, J$.G(1469961, J$.R(1469953, 'key', key, false, false), 'part'), 'k'), 'data'), J$.G(1470001, J$.G(1469993, J$.R(1469985, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(1470033, J$.R(1470017, 'der', der, false, false), 'startSequence', false)(J$.T(1470025, 160, 22, false));
                            J$.M(1470057, J$.R(1470041, 'der', der, false, false), 'writeOID', false)(J$.T(1470049, '1.3.101.112', 21, false));
                            J$.M(1470073, J$.R(1470065, 'der', der, false, false), 'endSequence', false)();
                            J$.M(1470097, J$.R(1470081, 'der', der, false, false), 'startSequence', false)(J$.T(1470089, 161, 22, false));
                            J$.M(1470153, J$.R(1470105, 'utils', utils, false, true), 'writeBitString', false)(J$.R(1470113, 'der', der, false, false), J$.G(1470145, J$.G(1470137, J$.G(1470129, J$.R(1470121, 'key', key, false, false), 'part'), 'A'), 'data'));
                            J$.M(1470169, J$.R(1470161, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(1470969, J$e);
                        } finally {
                            if (J$.Fr(1470977))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPublic(der, key) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(1470241, arguments.callee, this, arguments);
                            arguments = J$.N(1470249, 'arguments', arguments, true, false, false);
                            der = J$.N(1470257, 'der', der, true, false, false);
                            key = J$.N(1470265, 'key', key, true, false, false);
                            throw J$.F(1470233, J$.I(typeof Error === 'undefined' ? Error = J$.R(1470217, 'Error', undefined, true, true) : Error = J$.R(1470217, 'Error', Error, true, true)), true)(J$.T(1470225, 'Public keys are not supported for EdDSA PKCS#1', 21, false));
                        } catch (J$e) {
                            J$.Ex(1470985, J$e);
                        } finally {
                            if (J$.Fr(1470993))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1470281, 'assert', assert, false, false, false);
            J$.N(1470289, 'asn1', asn1, false, false, false);
            J$.N(1470297, 'Buffer', Buffer, false, false, false);
            J$.N(1470305, 'algs', algs, false, false, false);
            J$.N(1470313, 'utils', utils, false, false, false);
            J$.N(1470321, 'Key', Key, false, false, false);
            J$.N(1470329, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(1470337, 'pem', pem, false, false, false);
            J$.N(1470345, 'pkcs8', pkcs8, false, false, false);
            J$.N(1470353, 'readECDSACurve', readECDSACurve, false, false, false);
            read = J$.N(1470369, 'read', J$.T(1470361, read, 12, false), true, false, false);
            write = J$.N(1470385, 'write', J$.T(1470377, write, 12, false), true, false, false);
            readMPInt = J$.N(1470401, 'readMPInt', J$.T(1470393, readMPInt, 12, false), true, false, false);
            readPkcs1 = J$.N(1470417, 'readPkcs1', J$.T(1470409, readPkcs1, 12, false), true, false, false);
            readPkcs1RSAPublic = J$.N(1470433, 'readPkcs1RSAPublic', J$.T(1470425, readPkcs1RSAPublic, 12, false), true, false, false);
            readPkcs1RSAPrivate = J$.N(1470449, 'readPkcs1RSAPrivate', J$.T(1470441, readPkcs1RSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPrivate = J$.N(1470465, 'readPkcs1DSAPrivate', J$.T(1470457, readPkcs1DSAPrivate, 12, false), true, false, false);
            readPkcs1EdDSAPrivate = J$.N(1470481, 'readPkcs1EdDSAPrivate', J$.T(1470473, readPkcs1EdDSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPublic = J$.N(1470497, 'readPkcs1DSAPublic', J$.T(1470489, readPkcs1DSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPublic = J$.N(1470513, 'readPkcs1ECDSAPublic', J$.T(1470505, readPkcs1ECDSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPrivate = J$.N(1470529, 'readPkcs1ECDSAPrivate', J$.T(1470521, readPkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1 = J$.N(1470545, 'writePkcs1', J$.T(1470537, writePkcs1, 12, false), true, false, false);
            writePkcs1RSAPublic = J$.N(1470561, 'writePkcs1RSAPublic', J$.T(1470553, writePkcs1RSAPublic, 12, false), true, false, false);
            writePkcs1RSAPrivate = J$.N(1470577, 'writePkcs1RSAPrivate', J$.T(1470569, writePkcs1RSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPrivate = J$.N(1470593, 'writePkcs1DSAPrivate', J$.T(1470585, writePkcs1DSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPublic = J$.N(1470609, 'writePkcs1DSAPublic', J$.T(1470601, writePkcs1DSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPublic = J$.N(1470625, 'writePkcs1ECDSAPublic', J$.T(1470617, writePkcs1ECDSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPrivate = J$.N(1470641, 'writePkcs1ECDSAPrivate', J$.T(1470633, writePkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPrivate = J$.N(1470657, 'writePkcs1EdDSAPrivate', J$.T(1470649, writePkcs1EdDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPublic = J$.N(1470673, 'writePkcs1EdDSAPublic', J$.T(1470665, writePkcs1EdDSAPublic, 12, false), true, false, false);
            J$.T(1461593, 'use strict', 21, false);
            J$.F(1461617, J$.I(typeof require === 'undefined' ? require = J$.R(1461601, 'require', undefined, true, true) : require = J$.R(1461601, 'require', require, true, true)), false)(J$.T(1461609, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1461641, J$.I(typeof require === 'undefined' ? require = J$.R(1461625, 'require', undefined, true, true) : require = J$.R(1461625, 'require', require, true, true)), false)(J$.T(1461633, 'core-js/modules/es.object.keys', 21, false));
            J$.F(1461665, J$.I(typeof require === 'undefined' ? require = J$.R(1461649, 'require', undefined, true, true) : require = J$.R(1461649, 'require', require, true, true)), false)(J$.T(1461657, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1461689, J$.I(typeof require === 'undefined' ? require = J$.R(1461673, 'require', undefined, true, true) : require = J$.R(1461673, 'require', require, true, true)), false)(J$.T(1461681, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.P(1461745, J$.I(typeof module === 'undefined' ? module = J$.R(1461697, 'module', undefined, true, true) : module = J$.R(1461697, 'module', module, true, true)), 'exports', J$.T(1461737, {
                read: J$.R(1461705, 'read', read, false, true),
                readPkcs1: J$.R(1461713, 'readPkcs1', readPkcs1, false, true),
                write: J$.R(1461721, 'write', write, false, true),
                writePkcs1: J$.R(1461729, 'writePkcs1', writePkcs1, false, true)
            }, 11, false));
            var assert = J$.W(1461777, 'assert', J$.F(1461769, J$.I(typeof require === 'undefined' ? require = J$.R(1461753, 'require', undefined, true, true) : require = J$.R(1461753, 'require', require, true, true)), false)(J$.T(1461761, 'assert-plus', 21, false)), assert, false, true);
            var asn1 = J$.W(1461809, 'asn1', J$.F(1461801, J$.I(typeof require === 'undefined' ? require = J$.R(1461785, 'require', undefined, true, true) : require = J$.R(1461785, 'require', require, true, true)), false)(J$.T(1461793, 'asn1', 21, false)), asn1, false, true);
            var Buffer = J$.W(1461849, 'Buffer', J$.G(1461841, J$.F(1461833, J$.I(typeof require === 'undefined' ? require = J$.R(1461817, 'require', undefined, true, true) : require = J$.R(1461817, 'require', require, true, true)), false)(J$.T(1461825, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(1461881, 'algs', J$.F(1461873, J$.I(typeof require === 'undefined' ? require = J$.R(1461857, 'require', undefined, true, true) : require = J$.R(1461857, 'require', require, true, true)), false)(J$.T(1461865, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(1461913, 'utils', J$.F(1461905, J$.I(typeof require === 'undefined' ? require = J$.R(1461889, 'require', undefined, true, true) : require = J$.R(1461889, 'require', require, true, true)), false)(J$.T(1461897, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(1461945, 'Key', J$.F(1461937, J$.I(typeof require === 'undefined' ? require = J$.R(1461921, 'require', undefined, true, true) : require = J$.R(1461921, 'require', require, true, true)), false)(J$.T(1461929, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(1461977, 'PrivateKey', J$.F(1461969, J$.I(typeof require === 'undefined' ? require = J$.R(1461953, 'require', undefined, true, true) : require = J$.R(1461953, 'require', require, true, true)), false)(J$.T(1461961, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(1462009, 'pem', J$.F(1462001, J$.I(typeof require === 'undefined' ? require = J$.R(1461985, 'require', undefined, true, true) : require = J$.R(1461985, 'require', require, true, true)), false)(J$.T(1461993, './pem', 21, false)), pem, false, true);
            var pkcs8 = J$.W(1462041, 'pkcs8', J$.F(1462033, J$.I(typeof require === 'undefined' ? require = J$.R(1462017, 'require', undefined, true, true) : require = J$.R(1462017, 'require', require, true, true)), false)(J$.T(1462025, './pkcs8', 21, false)), pkcs8, false, true);
            var readECDSACurve = J$.W(1462065, 'readECDSACurve', J$.G(1462057, J$.R(1462049, 'pkcs8', pkcs8, false, true), 'readECDSACurve'), readECDSACurve, false, true);
        } catch (J$e) {
            J$.Ex(1471001, J$e);
        } finally {
            if (J$.Sr(1471009))
                continue jalangiLabel20;
            else
                break jalangiLabel20;
        }
    }
// JALANGI DO NOT INSTRUMENT

