J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(1492681, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/formats/rfc4253.js');
            function _typeof(obj) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1489041, arguments.callee, this, arguments);
                            arguments = J$.N(1489049, 'arguments', arguments, true, false, false);
                            obj = J$.N(1489057, 'obj', obj, true, false, false);
                            if (J$.C(76728, J$.C(76688, J$.B(183266, '===', J$.U(183258, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1488777, 'Symbol', undefined, true, true) : Symbol = J$.R(1488777, 'Symbol', Symbol, true, true))), J$.T(1488785, 'function', 21, false))) ? J$.B(183282, '===', J$.U(183274, 'typeof', J$.G(1488801, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1488793, 'Symbol', undefined, true, true) : Symbol = J$.R(1488793, 'Symbol', Symbol, true, true)), 'iterator')), J$.T(1488809, 'symbol', 21, false)) : J$._())) {
                                _typeof = J$.W(1488865, '_typeof', J$.T(1488857, function _typeof(obj) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(1488833, arguments.callee, this, arguments);
                                                arguments = J$.N(1488841, 'arguments', arguments, true, false, false);
                                                obj = J$.N(1488849, 'obj', obj, true, false, false);
                                                return J$.Rt(1488825, J$.U(183290, 'typeof', J$.R(1488817, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(1492825, J$e);
                                            } finally {
                                                if (J$.Fr(1492833))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            } else {
                                _typeof = J$.W(1489001, '_typeof', J$.T(1488993, function _typeof(obj) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(1488969, arguments.callee, this, arguments);
                                                arguments = J$.N(1488977, 'arguments', arguments, true, false, false);
                                                obj = J$.N(1488985, 'obj', obj, true, false, false);
                                                return J$.Rt(1488961, J$.C(76720, J$.C(76712, J$.C(76704, J$.C(76696, J$.R(1488873, 'obj', obj, false, false)) ? J$.B(183306, '===', J$.U(183298, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1488881, 'Symbol', undefined, true, true) : Symbol = J$.R(1488881, 'Symbol', Symbol, true, true))), J$.T(1488889, 'function', 21, false)) : J$._()) ? J$.B(183314, '===', J$.G(1488905, J$.R(1488897, 'obj', obj, false, false), 'constructor'), J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1488913, 'Symbol', undefined, true, true) : Symbol = J$.R(1488913, 'Symbol', Symbol, true, true))) : J$._()) ? J$.B(183322, '!==', J$.R(1488921, 'obj', obj, false, false), J$.G(1488937, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(1488929, 'Symbol', undefined, true, true) : Symbol = J$.R(1488929, 'Symbol', Symbol, true, true)), 'prototype')) : J$._()) ? J$.T(1488945, 'symbol', 21, false) : J$.U(183330, 'typeof', J$.R(1488953, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(1492841, J$e);
                                            } finally {
                                                if (J$.Fr(1492849))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            }
                            return J$.Rt(1489033, J$.F(1489025, J$.R(1489009, '_typeof', _typeof, false, true), false)(J$.R(1489017, 'obj', obj, false, false)));
                        } catch (J$e) {
                            J$.Ex(1492857, J$e);
                        } finally {
                            if (J$.Fr(1492865))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function algToKeyType(alg) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1489681, arguments.callee, this, arguments);
                            arguments = J$.N(1489689, 'arguments', arguments, true, false, false);
                            alg = J$.N(1489697, 'alg', alg, true, false, false);
                            J$.M(1489473, J$.R(1489457, 'assert', assert, false, true), 'string', false)(J$.R(1489465, 'alg', alg, false, false));
                            if (J$.C(76768, J$.B(183338, '===', J$.R(1489481, 'alg', alg, false, false), J$.T(1489489, 'ssh-dss', 21, false))))
                                return J$.Rt(1489505, J$.T(1489497, 'dsa', 21, false));
                            else if (J$.C(76760, J$.B(183346, '===', J$.R(1489513, 'alg', alg, false, false), J$.T(1489521, 'ssh-rsa', 21, false))))
                                return J$.Rt(1489537, J$.T(1489529, 'rsa', 21, false));
                            else if (J$.C(76752, J$.B(183354, '===', J$.R(1489545, 'alg', alg, false, false), J$.T(1489553, 'ssh-ed25519', 21, false))))
                                return J$.Rt(1489569, J$.T(1489561, 'ed25519', 21, false));
                            else if (J$.C(76744, J$.B(183362, '===', J$.R(1489577, 'alg', alg, false, false), J$.T(1489585, 'ssh-curve25519', 21, false))))
                                return J$.Rt(1489601, J$.T(1489593, 'curve25519', 21, false));
                            else if (J$.C(76736, J$.M(1489625, J$.R(1489609, 'alg', alg, false, false), 'match', false)(J$.T(1489617, /^ecdsa-sha2-/, 14, false))))
                                return J$.Rt(1489641, J$.T(1489633, 'ecdsa', 21, false));
                            else
                                throw J$.F(1489673, J$.I(typeof Error === 'undefined' ? Error = J$.R(1489649, 'Error', undefined, true, true) : Error = J$.R(1489649, 'Error', Error, true, true)), true)(J$.B(183370, '+', J$.T(1489657, 'Unknown algorithm ', 21, false), J$.R(1489665, 'alg', alg, false, false)));
                        } catch (J$e) {
                            J$.Ex(1492873, J$e);
                        } finally {
                            if (J$.Fr(1492881))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function keyTypeToAlg(key) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1490009, arguments.callee, this, arguments);
                            arguments = J$.N(1490017, 'arguments', arguments, true, false, false);
                            key = J$.N(1490025, 'key', key, true, false, false);
                            J$.M(1489721, J$.R(1489705, 'assert', assert, false, true), 'object', false)(J$.R(1489713, 'key', key, false, false));
                            if (J$.C(76808, J$.B(183378, '===', J$.G(1489737, J$.R(1489729, 'key', key, false, false), 'type'), J$.T(1489745, 'dsa', 21, false))))
                                return J$.Rt(1489761, J$.T(1489753, 'ssh-dss', 21, false));
                            else if (J$.C(76800, J$.B(183386, '===', J$.G(1489777, J$.R(1489769, 'key', key, false, false), 'type'), J$.T(1489785, 'rsa', 21, false))))
                                return J$.Rt(1489801, J$.T(1489793, 'ssh-rsa', 21, false));
                            else if (J$.C(76792, J$.B(183394, '===', J$.G(1489817, J$.R(1489809, 'key', key, false, false), 'type'), J$.T(1489825, 'ed25519', 21, false))))
                                return J$.Rt(1489841, J$.T(1489833, 'ssh-ed25519', 21, false));
                            else if (J$.C(76784, J$.B(183402, '===', J$.G(1489857, J$.R(1489849, 'key', key, false, false), 'type'), J$.T(1489865, 'curve25519', 21, false))))
                                return J$.Rt(1489881, J$.T(1489873, 'ssh-curve25519', 21, false));
                            else if (J$.C(76776, J$.B(183410, '===', J$.G(1489897, J$.R(1489889, 'key', key, false, false), 'type'), J$.T(1489905, 'ecdsa', 21, false))))
                                return J$.Rt(1489961, J$.B(183418, '+', J$.T(1489913, 'ecdsa-sha2-', 21, false), J$.M(1489953, J$.G(1489945, J$.G(1489937, J$.G(1489929, J$.R(1489921, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)()));
                            else
                                throw J$.F(1490001, J$.I(typeof Error === 'undefined' ? Error = J$.R(1489969, 'Error', undefined, true, true) : Error = J$.R(1489969, 'Error', Error, true, true)), true)(J$.B(183426, '+', J$.T(1489977, 'Unknown key type ', 21, false), J$.G(1489993, J$.R(1489985, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(1492889, J$e);
                        } finally {
                            if (J$.Fr(1492897))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(partial, type, buf, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1491785, arguments.callee, this, arguments);
                            arguments = J$.N(1491793, 'arguments', arguments, true, false, false);
                            partial = J$.N(1491801, 'partial', partial, true, false, false);
                            type = J$.N(1491809, 'type', type, true, false, false);
                            buf = J$.N(1491817, 'buf', buf, true, false, false);
                            options = J$.N(1491825, 'options', options, true, false, false);
                            J$.N(1491833, 'key', key, false, false, false);
                            J$.N(1491841, 'parts', parts, false, false, false);
                            J$.N(1491849, 'sshbuf', sshbuf, false, false, false);
                            J$.N(1491857, 'alg', alg, false, false, false);
                            J$.N(1491865, 'partCount', partCount, false, false, false);
                            J$.N(1491873, 'Constructor', Constructor, false, false, false);
                            J$.N(1491881, 'algInfo', algInfo, false, false, false);
                            J$.N(1491889, 'res', res, false, false, false);
                            J$.N(1491897, 'normalized', normalized, false, false, false);
                            J$.N(1491905, 'i', i, false, false, false);
                            J$.N(1491913, 'p', p, false, false, false);
                            J$.N(1491921, 'nd', nd, false, false, false);
                            if (J$.C(76816, J$.B(183442, '===', J$.U(183434, 'typeof', J$.R(1490033, 'buf', buf, false, false)), J$.T(1490041, 'string', 21, false))))
                                buf = J$.W(1490073, 'buf', J$.M(1490065, J$.R(1490049, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1490057, 'buf', buf, false, false)), buf, false, false);
                            J$.M(1490105, J$.R(1490081, 'assert', assert, false, true), 'buffer', false)(J$.R(1490089, 'buf', buf, false, false), J$.T(1490097, 'buf', 21, false));
                            var key = J$.W(1490121, 'key', J$.T(1490113, {}, 11, false), key, false, false);
                            var parts = J$.W(1490153, 'parts', J$.P(1490145, J$.R(1490129, 'key', key, false, false), 'parts', J$.T(1490137, [], 10, false)), parts, false, false);
                            var sshbuf = J$.W(1490193, 'sshbuf', J$.F(1490185, J$.R(1490161, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1490177, { buffer: J$.R(1490169, 'buf', buf, false, false) }, 11, false)), sshbuf, false, false);
                            var alg = J$.W(1490217, 'alg', J$.M(1490209, J$.R(1490201, 'sshbuf', sshbuf, false, false), 'readString', false)(), alg, false, false);
                            J$.M(1490257, J$.R(1490225, 'assert', assert, false, true), 'ok', false)(J$.U(183450, '!', J$.M(1490241, J$.R(1490233, 'sshbuf', sshbuf, false, false), 'atEnd', false)()), J$.T(1490249, 'key must have at least one part', 21, false));
                            J$.P(1490297, J$.R(1490265, 'key', key, false, false), 'type', J$.F(1490289, J$.R(1490273, 'algToKeyType', algToKeyType, false, true), false)(J$.R(1490281, 'alg', alg, false, false)));
                            var partCount = J$.W(1490361, 'partCount', J$.G(1490353, J$.G(1490345, J$.G(1490337, J$.G(1490313, J$.R(1490305, 'algs', algs, false, true), 'info'), J$.G(1490329, J$.R(1490321, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            if (J$.C(76832, J$.C(76824, J$.R(1490369, 'type', type, false, false)) ? J$.B(183458, '===', J$.R(1490377, 'type', type, false, false), J$.T(1490385, 'private', 21, false)) : J$._()))
                                partCount = J$.W(1490449, 'partCount', J$.G(1490441, J$.G(1490433, J$.G(1490425, J$.G(1490401, J$.R(1490393, 'algs', algs, false, true), 'privInfo'), J$.G(1490417, J$.R(1490409, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(76848, J$.C(76840, J$.U(183466, '!', J$.M(1490465, J$.R(1490457, 'sshbuf', sshbuf, false, false), 'atEnd', false)())) ? J$.B(183474, '<', J$.G(1490481, J$.R(1490473, 'parts', parts, false, false), 'length'), J$.R(1490489, 'partCount', partCount, false, false)) : J$._())) {
                                J$.M(1490521, J$.R(1490497, 'parts', parts, false, false), 'push', false)(J$.M(1490513, J$.R(1490505, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            while (J$.C(76864, J$.C(76856, J$.U(183482, '!', J$.R(1490529, 'partial', partial, false, false))) ? J$.U(183490, '!', J$.M(1490545, J$.R(1490537, 'sshbuf', sshbuf, false, false), 'atEnd', false)()) : J$._())) {
                                J$.M(1490577, J$.R(1490553, 'parts', parts, false, false), 'push', false)(J$.M(1490569, J$.R(1490561, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            J$.M(1490625, J$.R(1490585, 'assert', assert, false, true), 'ok', false)(J$.B(183498, '>=', J$.G(1490601, J$.R(1490593, 'parts', parts, false, false), 'length'), J$.T(1490609, 1, 22, false)), J$.T(1490617, 'key must have at least one part', 21, false));
                            J$.M(1490673, J$.R(1490633, 'assert', assert, false, true), 'ok', false)(J$.C(76872, J$.R(1490641, 'partial', partial, false, false)) ? J$._() : J$.M(1490657, J$.R(1490649, 'sshbuf', sshbuf, false, false), 'atEnd', false)(), J$.T(1490665, 'leftover bytes at end of key', 21, false));
                            var Constructor = J$.W(1490689, 'Constructor', J$.R(1490681, 'Key', Key, false, true), Constructor, false, false);
                            var algInfo = J$.W(1490737, 'algInfo', J$.G(1490729, J$.G(1490705, J$.R(1490697, 'algs', algs, false, true), 'info'), J$.G(1490721, J$.R(1490713, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(76888, J$.C(76880, J$.B(183506, '===', J$.R(1490745, 'type', type, false, false), J$.T(1490753, 'private', 21, false))) ? J$._() : J$.B(183514, '!==', J$.G(1490777, J$.G(1490769, J$.R(1490761, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(1490793, J$.R(1490785, 'parts', parts, false, false), 'length')))) {
                                algInfo = J$.W(1490841, 'algInfo', J$.G(1490833, J$.G(1490809, J$.R(1490801, 'algs', algs, false, true), 'privInfo'), J$.G(1490825, J$.R(1490817, 'key', key, false, false), 'type')), algInfo, false, false);
                                Constructor = J$.W(1490857, 'Constructor', J$.R(1490849, 'PrivateKey', PrivateKey, false, true), Constructor, false, false);
                            }
                            J$.M(1490913, J$.R(1490865, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1490889, J$.G(1490881, J$.R(1490873, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(1490905, J$.R(1490897, 'parts', parts, false, false), 'length'));
                            if (J$.C(76896, J$.B(183522, '===', J$.G(1490929, J$.R(1490921, 'key', key, false, false), 'type'), J$.T(1490937, 'ecdsa', 21, false)))) {
                                var res = J$.W(1490969, 'res', J$.M(1490961, J$.T(1490945, /^ecdsa-sha2-(.+)$/, 14, false), 'exec', false)(J$.R(1490953, 'alg', alg, false, false)), res, false, false);
                                J$.M(1491001, J$.R(1490977, 'assert', assert, false, true), 'ok', false)(J$.B(183530, '!==', J$.R(1490985, 'res', res, false, false), J$.T(1490993, null, 25, false)));
                                J$.M(1491081, J$.R(1491009, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1491033, J$.R(1491017, 'res', res, false, false), J$.T(1491025, 1, 22, false)), J$.M(1491073, J$.G(1491065, J$.G(1491057, J$.R(1491041, 'parts', parts, false, false), J$.T(1491049, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            var normalized = J$.W(1491097, 'normalized', J$.T(1491089, true, 23, false), normalized, false, false);
                            for (var i = J$.W(1491113, 'i', J$.T(1491105, 0, 22, false), i, false, false); J$.C(76952, J$.B(183538, '<', J$.R(1491121, 'i', i, false, false), J$.G(1491145, J$.G(1491137, J$.R(1491129, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(1491161, 'i', J$.B(183554, '+', J$.U(183546, '+', J$.R(1491153, 'i', i, false, false)), 1), i, false, false)) {
                                var p = J$.W(1491193, 'p', J$.G(1491185, J$.R(1491169, 'parts', parts, false, false), J$.R(1491177, 'i', i, false, false)), p, false, false);
                                J$.P(1491241, J$.R(1491201, 'p', p, false, false), 'name', J$.G(1491233, J$.G(1491217, J$.R(1491209, 'algInfo', algInfo, false, false), 'parts'), J$.R(1491225, 'i', i, false, false)));
                                if (J$.C(76912, J$.C(76904, J$.B(183562, '===', J$.G(1491257, J$.R(1491249, 'key', key, false, false), 'type'), J$.T(1491265, 'ed25519', 21, false))) ? J$.B(183570, '===', J$.G(1491281, J$.R(1491273, 'p', p, false, false), 'name'), J$.T(1491289, 'k', 21, false)) : J$._()))
                                    J$.P(1491345, J$.R(1491297, 'p', p, false, false), 'data', J$.M(1491337, J$.G(1491313, J$.R(1491305, 'p', p, false, false), 'data'), 'slice', false)(J$.T(1491321, 0, 22, false), J$.T(1491329, 32, 22, false)));
                                if (J$.C(76944, J$.C(76920, J$.B(183578, '!==', J$.G(1491361, J$.R(1491353, 'p', p, false, false), 'name'), J$.T(1491369, 'curve', 21, false))) ? J$.B(183586, '!==', J$.G(1491385, J$.R(1491377, 'algInfo', algInfo, false, false), 'normalize'), J$.T(1491393, false, 23, false)) : J$._())) {
                                    var nd;
                                    if (J$.C(76928, J$.B(183594, '===', J$.G(1491409, J$.R(1491401, 'key', key, false, false), 'type'), J$.T(1491417, 'ed25519', 21, false)))) {
                                        nd = J$.W(1491465, 'nd', J$.M(1491457, J$.R(1491425, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.G(1491441, J$.R(1491433, 'p', p, false, false), 'data'), J$.T(1491449, 32, 22, false)), nd, false, false);
                                    } else {
                                        nd = J$.W(1491505, 'nd', J$.M(1491497, J$.R(1491473, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1491489, J$.R(1491481, 'p', p, false, false), 'data')), nd, false, false);
                                    }
                                    if (J$.C(76936, J$.B(183602, '!==', J$.M(1491529, J$.R(1491513, 'nd', nd, false, false), 'toString', false)(J$.T(1491521, 'binary', 21, false)), J$.M(1491561, J$.G(1491545, J$.R(1491537, 'p', p, false, false), 'data'), 'toString', false)(J$.T(1491553, 'binary', 21, false))))) {
                                        J$.P(1491585, J$.R(1491569, 'p', p, false, false), 'data', J$.R(1491577, 'nd', nd, false, false));
                                        normalized = J$.W(1491601, 'normalized', J$.T(1491593, false, 23, false), normalized, false, false);
                                    }
                                }
                            }
                            if (J$.C(76960, J$.R(1491609, 'normalized', normalized, false, false)))
                                J$.P(1491641, J$.R(1491617, 'key', key, false, false), '_rfc4253Cache', J$.M(1491633, J$.R(1491625, 'sshbuf', sshbuf, false, false), 'toBuffer', false)());
                            if (J$.C(76976, J$.C(76968, J$.R(1491649, 'partial', partial, false, false)) ? J$.B(183610, '===', J$.F(1491673, J$.R(1491657, '_typeof', _typeof, false, true), false)(J$.R(1491665, 'partial', partial, false, false)), J$.T(1491681, 'object', 21, false)) : J$._())) {
                                J$.P(1491713, J$.R(1491689, 'partial', partial, false, false), 'remainder', J$.M(1491705, J$.R(1491697, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(1491745, J$.R(1491721, 'partial', partial, false, false), 'consumed', J$.G(1491737, J$.R(1491729, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(1491777, J$.F(1491769, J$.R(1491753, 'Constructor', Constructor, false, false), true)(J$.R(1491761, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(1492905, J$e);
                        } finally {
                            if (J$.Fr(1492913))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1492601, arguments.callee, this, arguments);
                            arguments = J$.N(1492609, 'arguments', arguments, true, false, false);
                            key = J$.N(1492617, 'key', key, true, false, false);
                            options = J$.N(1492625, 'options', options, true, false, false);
                            J$.N(1492633, 'alg', alg, false, false, false);
                            J$.N(1492641, 'i', i, false, false, false);
                            J$.N(1492649, 'algInfo', algInfo, false, false, false);
                            J$.N(1492657, 'parts', parts, false, false, false);
                            J$.N(1492665, 'buf', buf, false, false, false);
                            J$.N(1492673, 'data', data, false, false, false);
                            J$.M(1491945, J$.R(1491929, 'assert', assert, false, true), 'object', false)(J$.R(1491937, 'key', key, false, false));
                            var alg = J$.W(1491977, 'alg', J$.F(1491969, J$.R(1491953, 'keyTypeToAlg', keyTypeToAlg, false, true), false)(J$.R(1491961, 'key', key, false, false)), alg, false, false);
                            var i;
                            var algInfo = J$.W(1492025, 'algInfo', J$.G(1492017, J$.G(1491993, J$.R(1491985, 'algs', algs, false, true), 'info'), J$.G(1492009, J$.R(1492001, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(76984, J$.M(1492049, J$.R(1492033, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(1492041, 'key', key, false, false))))
                                algInfo = J$.W(1492097, 'algInfo', J$.G(1492089, J$.G(1492065, J$.R(1492057, 'algs', algs, false, true), 'privInfo'), J$.G(1492081, J$.R(1492073, 'key', key, false, false), 'type')), algInfo, false, false);
                            var parts = J$.W(1492121, 'parts', J$.G(1492113, J$.R(1492105, 'algInfo', algInfo, false, false), 'parts'), parts, false, false);
                            var buf = J$.W(1492153, 'buf', J$.F(1492145, J$.R(1492129, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1492137, {}, 11, false)), buf, false, false);
                            J$.M(1492177, J$.R(1492161, 'buf', buf, false, false), 'writeString', false)(J$.R(1492169, 'alg', alg, false, false));
                            for (i = J$.W(1492193, 'i', J$.T(1492185, 0, 22, false), i, false, false); J$.C(77024, J$.B(183618, '<', J$.R(1492201, 'i', i, false, false), J$.G(1492217, J$.R(1492209, 'parts', parts, false, false), 'length'))); i = J$.W(1492233, 'i', J$.B(183634, '+', J$.U(183626, '+', J$.R(1492225, 'i', i, false, false)), 1), i, false, false)) {
                                var data = J$.W(1492297, 'data', J$.G(1492289, J$.G(1492281, J$.G(1492249, J$.R(1492241, 'key', key, false, false), 'part'), J$.G(1492273, J$.R(1492257, 'parts', parts, false, false), J$.R(1492265, 'i', i, false, false))), 'data'), data, false, false);
                                if (J$.C(77000, J$.B(183642, '!==', J$.G(1492313, J$.R(1492305, 'algInfo', algInfo, false, false), 'normalize'), J$.T(1492321, false, 23, false)))) {
                                    if (J$.C(76992, J$.B(183650, '===', J$.G(1492337, J$.R(1492329, 'key', key, false, false), 'type'), J$.T(1492345, 'ed25519', 21, false))))
                                        data = J$.W(1492385, 'data', J$.M(1492377, J$.R(1492353, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(1492361, 'data', data, false, false), J$.T(1492369, 32, 22, false)), data, false, false);
                                    else
                                        data = J$.W(1492417, 'data', J$.M(1492409, J$.R(1492393, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(1492401, 'data', data, false, false)), data, false, false);
                                }
                                if (J$.C(77016, J$.C(77008, J$.B(183658, '===', J$.G(1492433, J$.R(1492425, 'key', key, false, false), 'type'), J$.T(1492441, 'ed25519', 21, false))) ? J$.B(183666, '===', J$.G(1492465, J$.R(1492449, 'parts', parts, false, false), J$.R(1492457, 'i', i, false, false)), J$.T(1492473, 'k', 21, false)) : J$._()))
                                    data = J$.W(1492545, 'data', J$.M(1492537, J$.R(1492481, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(1492529, [
                                        J$.R(1492489, 'data', data, false, false),
                                        J$.G(1492521, J$.G(1492513, J$.G(1492505, J$.R(1492497, 'key', key, false, false), 'part'), 'A'), 'data')
                                    ], 10, false)), data, false, false);
                                J$.M(1492569, J$.R(1492553, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(1492561, 'data', data, false, false));
                            }
                            return J$.Rt(1492593, J$.M(1492585, J$.R(1492577, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(1492921, J$e);
                        } finally {
                            if (J$.Fr(1492929))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            _typeof = J$.N(1492697, '_typeof', J$.T(1492689, _typeof, 12, false), true, false, false);
            J$.N(1492705, 'assert', assert, false, false, false);
            J$.N(1492713, 'Buffer', Buffer, false, false, false);
            J$.N(1492721, 'algs', algs, false, false, false);
            J$.N(1492729, 'utils', utils, false, false, false);
            J$.N(1492737, 'Key', Key, false, false, false);
            J$.N(1492745, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(1492753, 'SSHBuffer', SSHBuffer, false, false, false);
            algToKeyType = J$.N(1492769, 'algToKeyType', J$.T(1492761, algToKeyType, 12, false), true, false, false);
            keyTypeToAlg = J$.N(1492785, 'keyTypeToAlg', J$.T(1492777, keyTypeToAlg, 12, false), true, false, false);
            read = J$.N(1492801, 'read', J$.T(1492793, read, 12, false), true, false, false);
            write = J$.N(1492817, 'write', J$.T(1492809, write, 12, false), true, false, false);
            J$.T(1488409, 'use strict', 21, false);
            J$.F(1488433, J$.I(typeof require === 'undefined' ? require = J$.R(1488417, 'require', undefined, true, true) : require = J$.R(1488417, 'require', require, true, true)), false)(J$.T(1488425, 'core-js/modules/es.symbol', 21, false));
            J$.F(1488457, J$.I(typeof require === 'undefined' ? require = J$.R(1488441, 'require', undefined, true, true) : require = J$.R(1488441, 'require', require, true, true)), false)(J$.T(1488449, 'core-js/modules/es.symbol.description', 21, false));
            J$.F(1488481, J$.I(typeof require === 'undefined' ? require = J$.R(1488465, 'require', undefined, true, true) : require = J$.R(1488465, 'require', require, true, true)), false)(J$.T(1488473, 'core-js/modules/es.symbol.iterator', 21, false));
            J$.F(1488505, J$.I(typeof require === 'undefined' ? require = J$.R(1488489, 'require', undefined, true, true) : require = J$.R(1488489, 'require', require, true, true)), false)(J$.T(1488497, 'core-js/modules/es.array.concat', 21, false));
            J$.F(1488529, J$.I(typeof require === 'undefined' ? require = J$.R(1488513, 'require', undefined, true, true) : require = J$.R(1488513, 'require', require, true, true)), false)(J$.T(1488521, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(1488553, J$.I(typeof require === 'undefined' ? require = J$.R(1488537, 'require', undefined, true, true) : require = J$.R(1488537, 'require', require, true, true)), false)(J$.T(1488545, 'core-js/modules/es.array.slice', 21, false));
            J$.F(1488577, J$.I(typeof require === 'undefined' ? require = J$.R(1488561, 'require', undefined, true, true) : require = J$.R(1488561, 'require', require, true, true)), false)(J$.T(1488569, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1488601, J$.I(typeof require === 'undefined' ? require = J$.R(1488585, 'require', undefined, true, true) : require = J$.R(1488585, 'require', require, true, true)), false)(J$.T(1488593, 'core-js/modules/es.function.bind', 21, false));
            J$.F(1488625, J$.I(typeof require === 'undefined' ? require = J$.R(1488609, 'require', undefined, true, true) : require = J$.R(1488609, 'require', require, true, true)), false)(J$.T(1488617, 'core-js/modules/es.function.name', 21, false));
            J$.F(1488649, J$.I(typeof require === 'undefined' ? require = J$.R(1488633, 'require', undefined, true, true) : require = J$.R(1488633, 'require', require, true, true)), false)(J$.T(1488641, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1488673, J$.I(typeof require === 'undefined' ? require = J$.R(1488657, 'require', undefined, true, true) : require = J$.R(1488657, 'require', require, true, true)), false)(J$.T(1488665, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(1488697, J$.I(typeof require === 'undefined' ? require = J$.R(1488681, 'require', undefined, true, true) : require = J$.R(1488681, 'require', require, true, true)), false)(J$.T(1488689, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(1488721, J$.I(typeof require === 'undefined' ? require = J$.R(1488705, 'require', undefined, true, true) : require = J$.R(1488705, 'require', require, true, true)), false)(J$.T(1488713, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(1488745, J$.I(typeof require === 'undefined' ? require = J$.R(1488729, 'require', undefined, true, true) : require = J$.R(1488729, 'require', require, true, true)), false)(J$.T(1488737, 'core-js/modules/es.string.match', 21, false));
            J$.F(1488769, J$.I(typeof require === 'undefined' ? require = J$.R(1488753, 'require', undefined, true, true) : require = J$.R(1488753, 'require', require, true, true)), false)(J$.T(1488761, 'core-js/modules/web.dom-collections.iterator', 21, false));
            J$.P(1489217, J$.I(typeof module === 'undefined' ? module = J$.R(1489065, 'module', undefined, true, true) : module = J$.R(1489065, 'module', module, true, true)), 'exports', J$.T(1489209, {
                read: J$.M(1489105, J$.R(1489073, 'read', read, false, true), 'bind', false)(J$.T(1489081, undefined, 24, false), J$.T(1489089, false, 23, false), J$.T(1489097, undefined, 24, false)),
                readType: J$.M(1489137, J$.R(1489113, 'read', read, false, true), 'bind', false)(J$.T(1489121, undefined, 24, false), J$.T(1489129, false, 23, false)),
                write: J$.R(1489145, 'write', write, false, true),
                readPartial: J$.M(1489177, J$.R(1489153, 'read', read, false, true), 'bind', false)(J$.T(1489161, undefined, 24, false), J$.T(1489169, true, 23, false)),
                readInternal: J$.R(1489185, 'read', read, false, true),
                keyTypeToAlg: J$.R(1489193, 'keyTypeToAlg', keyTypeToAlg, false, true),
                algToKeyType: J$.R(1489201, 'algToKeyType', algToKeyType, false, true)
            }, 11, false));
            var assert = J$.W(1489249, 'assert', J$.F(1489241, J$.I(typeof require === 'undefined' ? require = J$.R(1489225, 'require', undefined, true, true) : require = J$.R(1489225, 'require', require, true, true)), false)(J$.T(1489233, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(1489289, 'Buffer', J$.G(1489281, J$.F(1489273, J$.I(typeof require === 'undefined' ? require = J$.R(1489257, 'require', undefined, true, true) : require = J$.R(1489257, 'require', require, true, true)), false)(J$.T(1489265, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(1489321, 'algs', J$.F(1489313, J$.I(typeof require === 'undefined' ? require = J$.R(1489297, 'require', undefined, true, true) : require = J$.R(1489297, 'require', require, true, true)), false)(J$.T(1489305, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(1489353, 'utils', J$.F(1489345, J$.I(typeof require === 'undefined' ? require = J$.R(1489329, 'require', undefined, true, true) : require = J$.R(1489329, 'require', require, true, true)), false)(J$.T(1489337, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(1489385, 'Key', J$.F(1489377, J$.I(typeof require === 'undefined' ? require = J$.R(1489361, 'require', undefined, true, true) : require = J$.R(1489361, 'require', require, true, true)), false)(J$.T(1489369, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(1489417, 'PrivateKey', J$.F(1489409, J$.I(typeof require === 'undefined' ? require = J$.R(1489393, 'require', undefined, true, true) : require = J$.R(1489393, 'require', require, true, true)), false)(J$.T(1489401, '../private-key', 21, false)), PrivateKey, false, true);
            var SSHBuffer = J$.W(1489449, 'SSHBuffer', J$.F(1489441, J$.I(typeof require === 'undefined' ? require = J$.R(1489425, 'require', undefined, true, true) : require = J$.R(1489425, 'require', require, true, true)), false)(J$.T(1489433, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
        } catch (J$e) {
            J$.Ex(1492937, J$e);
        } finally {
            if (J$.Sr(1492945))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

