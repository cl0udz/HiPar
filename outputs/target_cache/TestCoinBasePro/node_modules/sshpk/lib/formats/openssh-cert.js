J$.noInstrEval = false;
jalangiLabel19:
    while (true) {
        try {
            J$.Se(1454529, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/formats/openssh-cert.js');
            function verify(cert, key) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1447241, arguments.callee, this, arguments);
                            arguments = J$.N(1447249, 'arguments', arguments, true, false, false);
                            cert = J$.N(1447257, 'cert', cert, true, false, false);
                            key = J$.N(1447265, 'key', key, true, false, false);
                            return J$.Rt(1447233, J$.T(1447225, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(1454825, J$e);
                        } finally {
                            if (J$.Fr(1454833))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1447745, arguments.callee, this, arguments);
                            arguments = J$.N(1447753, 'arguments', arguments, true, false, false);
                            buf = J$.N(1447761, 'buf', buf, true, false, false);
                            options = J$.N(1447769, 'options', options, true, false, false);
                            J$.N(1447777, 'parts', parts, false, false, false);
                            J$.N(1447785, 'algo', algo, false, false, false);
                            J$.N(1447793, 'data', data, false, false, false);
                            if (J$.C(75240, J$.M(1447449, J$.R(1447433, 'Buffer', Buffer, false, true), 'isBuffer', false)(J$.R(1447441, 'buf', buf, false, false))))
                                buf = J$.W(1447481, 'buf', J$.M(1447473, J$.R(1447457, 'buf', buf, false, false), 'toString', false)(J$.T(1447465, 'ascii', 21, false)), buf, false, false);
                            var parts = J$.W(1447521, 'parts', J$.M(1447513, J$.M(1447497, J$.R(1447489, 'buf', buf, false, false), 'trim', false)(), 'split', false)(J$.T(1447505, /[ \t\n]+/g, 14, false)), parts, false, false);
                            if (J$.C(75256, J$.C(75248, J$.B(181378, '<', J$.G(1447537, J$.R(1447529, 'parts', parts, false, false), 'length'), J$.T(1447545, 2, 22, false))) ? J$._() : J$.B(181386, '>', J$.G(1447561, J$.R(1447553, 'parts', parts, false, false), 'length'), J$.T(1447569, 3, 22, false))))
                                throw J$.F(1447593, J$.I(typeof Error === 'undefined' ? Error = J$.R(1447577, 'Error', undefined, true, true) : Error = J$.R(1447577, 'Error', Error, true, true)), true)(J$.T(1447585, 'Not a valid SSH certificate line', 21, false));
                            var algo = J$.W(1447625, 'algo', J$.G(1447617, J$.R(1447601, 'parts', parts, false, false), J$.T(1447609, 0, 22, false)), algo, false, false);
                            var data = J$.W(1447657, 'data', J$.G(1447649, J$.R(1447633, 'parts', parts, false, false), J$.T(1447641, 1, 22, false)), data, false, false);
                            data = J$.W(1447697, 'data', J$.M(1447689, J$.R(1447665, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1447673, 'data', data, false, false), J$.T(1447681, 'base64', 21, false)), data, false, false);
                            return J$.Rt(1447737, J$.F(1447729, J$.R(1447705, 'fromBuffer', fromBuffer, false, true), false)(J$.R(1447713, 'data', data, false, false), J$.R(1447721, 'algo', algo, false, false)));
                        } catch (J$e) {
                            J$.Ex(1454857, J$e);
                        } finally {
                            if (J$.Fr(1454865))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fromBuffer(data, algo, partial) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1450225, arguments.callee, this, arguments);
                            arguments = J$.N(1450233, 'arguments', arguments, true, false, false);
                            data = J$.N(1450241, 'data', data, true, false, false);
                            algo = J$.N(1450249, 'algo', algo, true, false, false);
                            partial = J$.N(1450257, 'partial', partial, true, false, false);
                            J$.N(1450265, 'sshbuf', sshbuf, false, false, false);
                            J$.N(1450273, 'innerAlgo', innerAlgo, false, false, false);
                            J$.N(1450281, 'cert', cert, false, false, false);
                            J$.N(1450289, 'key', key, false, false, false);
                            J$.N(1450297, 'parts', parts, false, false, false);
                            J$.N(1450305, 'partCount', partCount, false, false, false);
                            J$.N(1450313, 'algInfo', algInfo, false, false, false);
                            J$.N(1450321, 'res', res, false, false, false);
                            J$.N(1450329, 'i', i, false, false, false);
                            J$.N(1450337, 'p', p, false, false, false);
                            J$.N(1450345, 'type', type, false, false, false);
                            J$.N(1450353, 'principals', principals, false, false, false);
                            J$.N(1450361, 'pbuf', pbuf, false, false, false);
                            J$.N(1450369, 'psshbuf', psshbuf, false, false, false);
                            J$.N(1450377, 'exts', exts, false, false, false);
                            J$.N(1450385, 'extbuf', extbuf, false, false, false);
                            J$.N(1450393, 'ext', ext, false, false, false);
                            J$.N(1450401, 'signingKeyBuf', signingKeyBuf, false, false, false);
                            J$.N(1450409, 'sigBuf', sigBuf, false, false, false);
                            var sshbuf = J$.W(1447833, 'sshbuf', J$.F(1447825, J$.R(1447801, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1447817, { buffer: J$.R(1447809, 'data', data, false, false) }, 11, false)), sshbuf, false, false);
                            var innerAlgo = J$.W(1447857, 'innerAlgo', J$.M(1447849, J$.R(1447841, 'sshbuf', sshbuf, false, false), 'readString', false)(), innerAlgo, false, false);
                            if (J$.C(75272, J$.C(75264, J$.B(181394, '!==', J$.R(1447865, 'algo', algo, false, false), J$.T(1447873, undefined, 24, false))) ? J$.B(181402, '!==', J$.R(1447881, 'innerAlgo', innerAlgo, false, false), J$.R(1447889, 'algo', algo, false, false)) : J$._()))
                                throw J$.F(1447913, J$.I(typeof Error === 'undefined' ? Error = J$.R(1447897, 'Error', undefined, true, true) : Error = J$.R(1447897, 'Error', Error, true, true)), true)(J$.T(1447905, 'SSH certificate algorithm mismatch', 21, false));
                            if (J$.C(75280, J$.B(181410, '===', J$.R(1447921, 'algo', algo, false, false), J$.T(1447929, undefined, 24, false))))
                                algo = J$.W(1447945, 'algo', J$.R(1447937, 'innerAlgo', innerAlgo, false, false), algo, false, false);
                            var cert = J$.W(1447961, 'cert', J$.T(1447953, {}, 11, false), cert, false, false);
                            J$.P(1447985, J$.R(1447969, 'cert', cert, false, false), 'signatures', J$.T(1447977, {}, 11, false));
                            J$.P(1448017, J$.G(1448001, J$.R(1447993, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(1448009, {}, 11, false));
                            J$.P(1448065, J$.G(1448041, J$.G(1448033, J$.R(1448025, 'cert', cert, false, false), 'signatures'), 'openssh'), 'nonce', J$.M(1448057, J$.R(1448049, 'sshbuf', sshbuf, false, false), 'readBuffer', false)());
                            var key = J$.W(1448081, 'key', J$.T(1448073, {}, 11, false), key, false, false);
                            var parts = J$.W(1448113, 'parts', J$.P(1448105, J$.R(1448089, 'key', key, false, false), 'parts', J$.T(1448097, [], 10, false)), parts, false, false);
                            J$.P(1448153, J$.R(1448121, 'key', key, false, false), 'type', J$.F(1448145, J$.R(1448129, 'getAlg', getAlg, false, true), false)(J$.R(1448137, 'algo', algo, false, false)));
                            var partCount = J$.W(1448217, 'partCount', J$.G(1448209, J$.G(1448201, J$.G(1448193, J$.G(1448169, J$.R(1448161, 'algs', algs, false, true), 'info'), J$.G(1448185, J$.R(1448177, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(75288, J$.B(181418, '<', J$.G(1448233, J$.R(1448225, 'parts', parts, false, false), 'length'), J$.R(1448241, 'partCount', partCount, false, false)))) {
                                J$.M(1448273, J$.R(1448249, 'parts', parts, false, false), 'push', false)(J$.M(1448265, J$.R(1448257, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            J$.M(1448321, J$.R(1448281, 'assert', assert, false, true), 'ok', false)(J$.B(181426, '>=', J$.G(1448297, J$.R(1448289, 'parts', parts, false, false), 'length'), J$.T(1448305, 1, 22, false)), J$.T(1448313, 'key must have at least one part', 21, false));
                            var algInfo = J$.W(1448369, 'algInfo', J$.G(1448361, J$.G(1448337, J$.R(1448329, 'algs', algs, false, true), 'info'), J$.G(1448353, J$.R(1448345, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(75296, J$.B(181434, '===', J$.G(1448385, J$.R(1448377, 'key', key, false, false), 'type'), J$.T(1448393, 'ecdsa', 21, false)))) {
                                var res = J$.W(1448425, 'res', J$.M(1448417, J$.R(1448401, 'ECDSA_ALGO', ECDSA_ALGO, false, true), 'exec', false)(J$.R(1448409, 'algo', algo, false, false)), res, false, false);
                                J$.M(1448457, J$.R(1448433, 'assert', assert, false, true), 'ok', false)(J$.B(181442, '!==', J$.R(1448441, 'res', res, false, false), J$.T(1448449, null, 25, false)));
                                J$.M(1448537, J$.R(1448465, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1448489, J$.R(1448473, 'res', res, false, false), J$.T(1448481, 1, 22, false)), J$.M(1448529, J$.G(1448521, J$.G(1448513, J$.R(1448497, 'parts', parts, false, false), J$.T(1448505, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            for (var i = J$.W(1448553, 'i', J$.T(1448545, 0, 22, false), i, false, false); J$.C(75320, J$.B(181450, '<', J$.R(1448561, 'i', i, false, false), J$.G(1448585, J$.G(1448577, J$.R(1448569, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(1448601, 'i', J$.B(181466, '+', J$.U(181458, '+', J$.R(1448593, 'i', i, false, false)), 1), i, false, false)) {
                                J$.P(1448665, J$.G(1448625, J$.R(1448609, 'parts', parts, false, false), J$.R(1448617, 'i', i, false, false)), 'name', J$.G(1448657, J$.G(1448641, J$.R(1448633, 'algInfo', algInfo, false, false), 'parts'), J$.R(1448649, 'i', i, false, false)));
                                if (J$.C(75312, J$.C(75304, J$.B(181474, '!==', J$.G(1448697, J$.G(1448689, J$.R(1448673, 'parts', parts, false, false), J$.R(1448681, 'i', i, false, false)), 'name'), J$.T(1448705, 'curve', 21, false))) ? J$.B(181482, '!==', J$.G(1448721, J$.R(1448713, 'algInfo', algInfo, false, false), 'normalize'), J$.T(1448729, false, 23, false)) : J$._())) {
                                    var p = J$.W(1448761, 'p', J$.G(1448753, J$.R(1448737, 'parts', parts, false, false), J$.R(1448745, 'i', i, false, false)), p, false, false);
                                    J$.P(1448809, J$.R(1448769, 'p', p, false, false), 'data', J$.M(1448801, J$.R(1448777, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1448793, J$.R(1448785, 'p', p, false, false), 'data')));
                                }
                            }
                            J$.P(1448849, J$.R(1448817, 'cert', cert, false, false), 'subjectKey', J$.F(1448841, J$.R(1448825, 'Key', Key, false, true), true)(J$.R(1448833, 'key', key, false, false)));
                            J$.P(1448881, J$.R(1448857, 'cert', cert, false, false), 'serial', J$.M(1448873, J$.R(1448865, 'sshbuf', sshbuf, false, false), 'readInt64', false)());
                            var type = J$.W(1448921, 'type', J$.G(1448913, J$.R(1448889, 'TYPES', TYPES, false, true), J$.M(1448905, J$.R(1448897, 'sshbuf', sshbuf, false, false), 'readInt', false)()), type, false, false);
                            J$.M(1448953, J$.R(1448929, 'assert', assert, false, true), 'string', false)(J$.R(1448937, 'type', type, false, false), J$.T(1448945, 'valid cert type', 21, false));
                            J$.P(1449001, J$.G(1448977, J$.G(1448969, J$.R(1448961, 'cert', cert, false, false), 'signatures'), 'openssh'), 'keyId', J$.M(1448993, J$.R(1448985, 'sshbuf', sshbuf, false, false), 'readString', false)());
                            var principals = J$.W(1449017, 'principals', J$.T(1449009, [], 10, false), principals, false, false);
                            var pbuf = J$.W(1449041, 'pbuf', J$.M(1449033, J$.R(1449025, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), pbuf, false, false);
                            var psshbuf = J$.W(1449081, 'psshbuf', J$.F(1449073, J$.R(1449049, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1449065, { buffer: J$.R(1449057, 'pbuf', pbuf, false, false) }, 11, false)), psshbuf, false, false);
                            while (J$.C(75328, J$.U(181490, '!', J$.M(1449097, J$.R(1449089, 'psshbuf', psshbuf, false, false), 'atEnd', false)()))) {
                                J$.M(1449129, J$.R(1449105, 'principals', principals, false, false), 'push', false)(J$.M(1449121, J$.R(1449113, 'psshbuf', psshbuf, false, false), 'readString', false)());
                            }
                            if (J$.C(75336, J$.B(181498, '===', J$.G(1449145, J$.R(1449137, 'principals', principals, false, false), 'length'), J$.T(1449153, 0, 22, false))))
                                principals = J$.W(1449177, 'principals', J$.T(1449169, [J$.T(1449161, '*', 21, false)], 10, false), principals, false, false);
                            J$.P(1449369, J$.R(1449185, 'cert', cert, false, false), 'subjects', J$.M(1449361, J$.R(1449193, 'principals', principals, false, false), 'map', false)(J$.T(1449353, function (pr) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(1449329, arguments.callee, this, arguments);
                                            arguments = J$.N(1449337, 'arguments', arguments, true, false, false);
                                            pr = J$.N(1449345, 'pr', pr, true, false, false);
                                            if (J$.C(75352, J$.B(181506, '===', J$.R(1449201, 'type', type, false, false), J$.T(1449209, 'user', 21, false))))
                                                return J$.Rt(1449241, J$.M(1449233, J$.R(1449217, 'Identity', Identity, false, true), 'forUser', false)(J$.R(1449225, 'pr', pr, false, false)));
                                            else if (J$.C(75344, J$.B(181514, '===', J$.R(1449249, 'type', type, false, false), J$.T(1449257, 'host', 21, false))))
                                                return J$.Rt(1449289, J$.M(1449281, J$.R(1449265, 'Identity', Identity, false, true), 'forHost', false)(J$.R(1449273, 'pr', pr, false, false)));
                                            throw J$.F(1449321, J$.I(typeof Error === 'undefined' ? Error = J$.R(1449297, 'Error', undefined, true, true) : Error = J$.R(1449297, 'Error', Error, true, true)), true)(J$.B(181522, '+', J$.T(1449305, 'Unknown identity type ', 21, false), J$.R(1449313, 'type', type, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1454873, J$e);
                                        } finally {
                                            if (J$.Fr(1454881))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                            J$.P(1449417, J$.R(1449377, 'cert', cert, false, false), 'validFrom', J$.F(1449409, J$.R(1449385, 'int64ToDate', int64ToDate, false, true), false)(J$.M(1449401, J$.R(1449393, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            J$.P(1449465, J$.R(1449425, 'cert', cert, false, false), 'validUntil', J$.F(1449457, J$.R(1449433, 'int64ToDate', int64ToDate, false, true), false)(J$.M(1449449, J$.R(1449441, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            var exts = J$.W(1449481, 'exts', J$.T(1449473, [], 10, false), exts, false, false);
                            var extbuf = J$.W(1449529, 'extbuf', J$.F(1449521, J$.R(1449489, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1449513, { buffer: J$.M(1449505, J$.R(1449497, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            var ext;
                            while (J$.C(75360, J$.U(181530, '!', J$.M(1449545, J$.R(1449537, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(1449569, 'ext', J$.T(1449561, { critical: J$.T(1449553, true, 23, false) }, 11, false), ext, false, false);
                                J$.P(1449601, J$.R(1449577, 'ext', ext, false, false), 'name', J$.M(1449593, J$.R(1449585, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(1449633, J$.R(1449609, 'ext', ext, false, false), 'data', J$.M(1449625, J$.R(1449617, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(1449657, J$.R(1449641, 'exts', exts, false, false), 'push', false)(J$.R(1449649, 'ext', ext, false, false));
                            }
                            extbuf = J$.W(1449705, 'extbuf', J$.F(1449697, J$.R(1449665, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1449689, { buffer: J$.M(1449681, J$.R(1449673, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            while (J$.C(75368, J$.U(181538, '!', J$.M(1449721, J$.R(1449713, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(1449745, 'ext', J$.T(1449737, { critical: J$.T(1449729, false, 23, false) }, 11, false), ext, false, false);
                                J$.P(1449777, J$.R(1449753, 'ext', ext, false, false), 'name', J$.M(1449769, J$.R(1449761, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(1449809, J$.R(1449785, 'ext', ext, false, false), 'data', J$.M(1449801, J$.R(1449793, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(1449833, J$.R(1449817, 'exts', exts, false, false), 'push', false)(J$.R(1449825, 'ext', ext, false, false));
                            }
                            J$.P(1449873, J$.G(1449857, J$.G(1449849, J$.R(1449841, 'cert', cert, false, false), 'signatures'), 'openssh'), 'exts', J$.R(1449865, 'exts', exts, false, false));
                            J$.M(1449889, J$.R(1449881, 'sshbuf', sshbuf, false, false), 'readBuffer', false)();
                            var signingKeyBuf = J$.W(1449913, 'signingKeyBuf', J$.M(1449905, J$.R(1449897, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), signingKeyBuf, false, false);
                            J$.P(1449953, J$.R(1449921, 'cert', cert, false, false), 'issuerKey', J$.M(1449945, J$.R(1449929, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(1449937, 'signingKeyBuf', signingKeyBuf, false, false)));
                            J$.P(1449993, J$.R(1449961, 'cert', cert, false, false), 'issuer', J$.M(1449985, J$.R(1449969, 'Identity', Identity, false, true), 'forHost', false)(J$.T(1449977, '**', 21, false)));
                            var sigBuf = J$.W(1450017, 'sigBuf', J$.M(1450009, J$.R(1450001, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), sigBuf, false, false);
                            J$.P(1450105, J$.G(1450041, J$.G(1450033, J$.R(1450025, 'cert', cert, false, false), 'signatures'), 'openssh'), 'signature', J$.M(1450097, J$.R(1450049, 'Signature', Signature, false, true), 'parse', false)(J$.R(1450057, 'sigBuf', sigBuf, false, false), J$.G(1450081, J$.G(1450073, J$.R(1450065, 'cert', cert, false, false), 'issuerKey'), 'type'), J$.T(1450089, 'ssh', 21, false)));
                            if (J$.C(75376, J$.B(181546, '!==', J$.R(1450113, 'partial', partial, false, false), J$.T(1450121, undefined, 24, false)))) {
                                J$.P(1450153, J$.R(1450129, 'partial', partial, false, false), 'remainder', J$.M(1450145, J$.R(1450137, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(1450185, J$.R(1450161, 'partial', partial, false, false), 'consumed', J$.G(1450177, J$.R(1450169, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(1450217, J$.F(1450209, J$.R(1450193, 'Certificate', Certificate, false, true), true)(J$.R(1450201, 'cert', cert, false, false)));
                        } catch (J$e) {
                            J$.Ex(1454889, J$e);
                        } finally {
                            if (J$.Fr(1454897))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function int64ToDate(buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1450593, arguments.callee, this, arguments);
                            arguments = J$.N(1450601, 'arguments', arguments, true, false, false);
                            buf = J$.N(1450609, 'buf', buf, true, false, false);
                            J$.N(1450617, 'i', i, false, false, false);
                            J$.N(1450625, 'd', d, false, false, false);
                            var i = J$.W(1450449, 'i', J$.B(181554, '*', J$.M(1450433, J$.R(1450417, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(1450425, 0, 22, false)), J$.T(1450441, 4294967296, 22, false)), i, false, false);
                            i = J$.W(1450489, 'i', J$.B(181562, '+', J$.R(1450481, 'i', i, false, false), J$.M(1450473, J$.R(1450457, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(1450465, 4, 22, false))), i, false, false);
                            var d = J$.W(1450513, 'd', J$.F(1450505, J$.I(typeof Date === 'undefined' ? Date = J$.R(1450497, 'Date', undefined, true, true) : Date = J$.R(1450497, 'Date', Date, true, true)), true)(), d, false, false);
                            J$.M(1450545, J$.R(1450521, 'd', d, false, false), 'setTime', false)(J$.B(181570, '*', J$.R(1450529, 'i', i, false, false), J$.T(1450537, 1000, 22, false)));
                            J$.P(1450569, J$.R(1450553, 'd', d, false, false), 'sourceInt64', J$.R(1450561, 'buf', buf, false, false));
                            return J$.Rt(1450585, J$.R(1450577, 'd', d, false, false));
                        } catch (J$e) {
                            J$.Ex(1454905, J$e);
                        } finally {
                            if (J$.Fr(1454913))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dateToInt64(date) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1450921, arguments.callee, this, arguments);
                            arguments = J$.N(1450929, 'arguments', arguments, true, false, false);
                            date = J$.N(1450937, 'date', date, true, false, false);
                            J$.N(1450945, 'i', i, false, false, false);
                            J$.N(1450953, 'upper', upper, false, false, false);
                            J$.N(1450961, 'lower', lower, false, false, false);
                            J$.N(1450969, 'buf', buf, false, false, false);
                            if (J$.C(75384, J$.B(181578, '!==', J$.G(1450641, J$.R(1450633, 'date', date, false, false), 'sourceInt64'), J$.T(1450649, undefined, 24, false))))
                                return J$.Rt(1450673, J$.G(1450665, J$.R(1450657, 'date', date, false, false), 'sourceInt64'));
                            var i = J$.W(1450721, 'i', J$.M(1450713, J$.I(typeof Math === 'undefined' ? Math = J$.R(1450681, 'Math', undefined, true, true) : Math = J$.R(1450681, 'Math', Math, true, true)), 'round', false)(J$.B(181586, '/', J$.M(1450697, J$.R(1450689, 'date', date, false, false), 'getTime', false)(), J$.T(1450705, 1000, 22, false))), i, false, false);
                            var upper = J$.W(1450761, 'upper', J$.M(1450753, J$.I(typeof Math === 'undefined' ? Math = J$.R(1450729, 'Math', undefined, true, true) : Math = J$.R(1450729, 'Math', Math, true, true)), 'floor', false)(J$.B(181594, '/', J$.R(1450737, 'i', i, false, false), J$.T(1450745, 4294967296, 22, false))), upper, false, false);
                            var lower = J$.W(1450801, 'lower', J$.M(1450793, J$.I(typeof Math === 'undefined' ? Math = J$.R(1450769, 'Math', undefined, true, true) : Math = J$.R(1450769, 'Math', Math, true, true)), 'floor', false)(J$.B(181602, '%', J$.R(1450777, 'i', i, false, false), J$.T(1450785, 4294967296, 22, false))), lower, false, false);
                            var buf = J$.W(1450833, 'buf', J$.M(1450825, J$.R(1450809, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(1450817, 8, 22, false)), buf, false, false);
                            J$.M(1450865, J$.R(1450841, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(1450849, 'upper', upper, false, false), J$.T(1450857, 0, 22, false));
                            J$.M(1450897, J$.R(1450873, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(1450881, 'lower', lower, false, false), J$.T(1450889, 4, 22, false));
                            return J$.Rt(1450913, J$.R(1450905, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(1454921, J$e);
                        } finally {
                            if (J$.Fr(1454929))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sign(cert, key) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1451337, arguments.callee, this, arguments);
                            arguments = J$.N(1451345, 'arguments', arguments, true, false, false);
                            cert = J$.N(1451353, 'cert', cert, true, false, false);
                            key = J$.N(1451361, 'key', key, true, false, false);
                            J$.N(1451369, 'blob', blob, false, false, false);
                            J$.N(1451377, 'sig', sig, false, false, false);
                            J$.N(1451385, 'hashAlgo', hashAlgo, false, false, false);
                            J$.N(1451393, 'signer', signer, false, false, false);
                            if (J$.C(75392, J$.B(181610, '===', J$.G(1450993, J$.G(1450985, J$.R(1450977, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(1451001, undefined, 24, false))))
                                J$.P(1451033, J$.G(1451017, J$.R(1451009, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(1451025, {}, 11, false));
                            try {
                                var blob = J$.W(1451073, 'blob', J$.F(1451065, J$.R(1451041, 'toBuffer', toBuffer, false, true), false)(J$.R(1451049, 'cert', cert, false, false), J$.T(1451057, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(1451113, 'e', e, false, false, true);
                                J$.B(181618, 'delete', J$.G(1451089, J$.R(1451081, 'cert', cert, false, false), 'signatures'), 'openssh');
                                return J$.Rt(1451105, J$.T(1451097, false, 23, false));
                            }
                            var sig = J$.W(1451145, 'sig', J$.G(1451137, J$.G(1451129, J$.R(1451121, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            var hashAlgo = J$.W(1451161, 'hashAlgo', J$.T(1451153, undefined, 24, false), hashAlgo, false, false);
                            if (J$.C(75408, J$.C(75400, J$.B(181626, '===', J$.G(1451177, J$.R(1451169, 'key', key, false, false), 'type'), J$.T(1451185, 'rsa', 21, false))) ? J$._() : J$.B(181634, '===', J$.G(1451201, J$.R(1451193, 'key', key, false, false), 'type'), J$.T(1451209, 'dsa', 21, false))))
                                hashAlgo = J$.W(1451225, 'hashAlgo', J$.T(1451217, 'sha1', 21, false), hashAlgo, false, false);
                            var signer = J$.W(1451257, 'signer', J$.M(1451249, J$.R(1451233, 'key', key, false, false), 'createSign', false)(J$.R(1451241, 'hashAlgo', hashAlgo, false, false)), signer, false, false);
                            J$.M(1451281, J$.R(1451265, 'signer', signer, false, false), 'write', false)(J$.R(1451273, 'blob', blob, false, false));
                            J$.P(1451313, J$.R(1451289, 'sig', sig, false, false), 'signature', J$.M(1451305, J$.R(1451297, 'signer', signer, false, false), 'sign', false)());
                            return J$.Rt(1451329, J$.T(1451321, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(1454937, J$e);
                        } finally {
                            if (J$.Fr(1454945))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function signAsync(cert, signer, done) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1451801, arguments.callee, this, arguments);
                            arguments = J$.N(1451809, 'arguments', arguments, true, false, false);
                            cert = J$.N(1451817, 'cert', cert, true, false, false);
                            signer = J$.N(1451825, 'signer', signer, true, false, false);
                            done = J$.N(1451833, 'done', done, true, false, false);
                            J$.N(1451841, 'blob', blob, false, false, false);
                            J$.N(1451849, 'sig', sig, false, false, false);
                            if (J$.C(75416, J$.B(181642, '===', J$.G(1451417, J$.G(1451409, J$.R(1451401, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(1451425, undefined, 24, false))))
                                J$.P(1451457, J$.G(1451441, J$.R(1451433, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(1451449, {}, 11, false));
                            try {
                                var blob = J$.W(1451497, 'blob', J$.F(1451489, J$.R(1451465, 'toBuffer', toBuffer, false, true), false)(J$.R(1451473, 'cert', cert, false, false), J$.T(1451481, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(1451553, 'e', e, false, false, true);
                                J$.B(181650, 'delete', J$.G(1451513, J$.R(1451505, 'cert', cert, false, false), 'signatures'), 'openssh');
                                J$.F(1451537, J$.R(1451521, 'done', done, false, false), false)(J$.R(1451529, 'e', e, false, false));
                                return J$.Rt(1451545, undefined);
                            }
                            var sig = J$.W(1451585, 'sig', J$.G(1451577, J$.G(1451569, J$.R(1451561, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            J$.F(1451793, J$.R(1451593, 'signer', signer, false, false), false)(J$.R(1451601, 'blob', blob, false, false), J$.T(1451785, function (err, signature) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(1451753, arguments.callee, this, arguments);
                                            arguments = J$.N(1451761, 'arguments', arguments, true, false, false);
                                            err = J$.N(1451769, 'err', err, true, false, false);
                                            signature = J$.N(1451777, 'signature', signature, true, false, false);
                                            if (J$.C(75424, J$.R(1451609, 'err', err, false, false))) {
                                                J$.F(1451633, J$.R(1451617, 'done', done, false, false), false)(J$.R(1451625, 'err', err, false, false));
                                                return J$.Rt(1451641, undefined);
                                            }
                                            try {
                                                J$.M(1451665, J$.R(1451649, 'signature', signature, false, false), 'toBuffer', false)(J$.T(1451657, 'ssh', 21, false));
                                            } catch (e) {
                                                J$.N(1451705, 'e', e, false, false, true);
                                                J$.F(1451689, J$.R(1451673, 'done', done, false, false), false)(J$.R(1451681, 'e', e, false, false));
                                                return J$.Rt(1451697, undefined);
                                            }
                                            J$.P(1451729, J$.R(1451713, 'sig', sig, false, false), 'signature', J$.R(1451721, 'signature', signature, false, false));
                                            J$.F(1451745, J$.R(1451737, 'done', done, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(1454953, J$e);
                                        } finally {
                                            if (J$.Fr(1454961))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(1454969, J$e);
                        } finally {
                            if (J$.Fr(1454977))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(cert, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(1452065, arguments.callee, this, arguments);
                            arguments = J$.N(1452073, 'arguments', arguments, true, false, false);
                            cert = J$.N(1452081, 'cert', cert, true, false, false);
                            options = J$.N(1452089, 'options', options, true, false, false);
                            J$.N(1452097, 'blob', blob, false, false, false);
                            J$.N(1452105, 'out', out, false, false, false);
                            if (J$.C(75432, J$.B(181658, '===', J$.R(1451857, 'options', options, false, false), J$.T(1451865, undefined, 24, false))))
                                options = J$.W(1451881, 'options', J$.T(1451873, {}, 11, false), options, false, false);
                            var blob = J$.W(1451913, 'blob', J$.F(1451905, J$.R(1451889, 'toBuffer', toBuffer, false, true), false)(J$.R(1451897, 'cert', cert, false, false)), blob, false, false);
                            var out = J$.W(1451985, 'out', J$.B(181674, '+', J$.B(181666, '+', J$.F(1451945, J$.R(1451921, 'getCertType', getCertType, false, true), false)(J$.G(1451937, J$.R(1451929, 'cert', cert, false, false), 'subjectKey')), J$.T(1451953, ' ', 21, false)), J$.M(1451977, J$.R(1451961, 'blob', blob, false, false), 'toString', false)(J$.T(1451969, 'base64', 21, false))), out, false, false);
                            if (J$.C(75440, J$.G(1452001, J$.R(1451993, 'options', options, false, false), 'comment')))
                                out = J$.W(1452041, 'out', J$.B(181690, '+', J$.B(181682, '+', J$.R(1452009, 'out', out, false, false), J$.T(1452017, ' ', 21, false)), J$.G(1452033, J$.R(1452025, 'options', options, false, false), 'comment')), out, false, false);
                            return J$.Rt(1452057, J$.R(1452049, 'out', out, false, false));
                        } catch (J$e) {
                            J$.Ex(1454985, J$e);
                        } finally {
                            if (J$.Fr(1454993))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function toBuffer(cert, noSig) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(1453993, arguments.callee, this, arguments);
                            arguments = J$.N(1454001, 'arguments', arguments, true, false, false);
                            cert = J$.N(1454009, 'cert', cert, true, false, false);
                            noSig = J$.N(1454017, 'noSig', noSig, true, false, false);
                            J$.N(1454025, 'sig', sig, false, false, false);
                            J$.N(1454033, 'buf', buf, false, false, false);
                            J$.N(1454041, 'key', key, false, false, false);
                            J$.N(1454049, 'algInfo', algInfo, false, false, false);
                            J$.N(1454057, 'type', type, false, false, false);
                            J$.N(1454065, 'sub', sub, false, false, false);
                            J$.N(1454073, 'exts', exts, false, false, false);
                            J$.N(1454081, 'extbuf', extbuf, false, false, false);
                            J$.M(1452153, J$.R(1452113, 'assert', assert, false, true), 'object', false)(J$.G(1452137, J$.G(1452129, J$.R(1452121, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(1452145, 'signature for openssh format', 21, false));
                            var sig = J$.W(1452185, 'sig', J$.G(1452177, J$.G(1452169, J$.R(1452161, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            if (J$.C(75448, J$.B(181698, '===', J$.G(1452201, J$.R(1452193, 'sig', sig, false, false), 'nonce'), J$.T(1452209, undefined, 24, false))))
                                J$.P(1452249, J$.R(1452217, 'sig', sig, false, false), 'nonce', J$.M(1452241, J$.R(1452225, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(1452233, 16, 22, false)));
                            var buf = J$.W(1452281, 'buf', J$.F(1452273, J$.R(1452257, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1452265, {}, 11, false)), buf, false, false);
                            J$.M(1452329, J$.R(1452289, 'buf', buf, false, false), 'writeString', false)(J$.F(1452321, J$.R(1452297, 'getCertType', getCertType, false, true), false)(J$.G(1452313, J$.R(1452305, 'cert', cert, false, false), 'subjectKey')));
                            J$.M(1452361, J$.R(1452337, 'buf', buf, false, false), 'writeBuffer', false)(J$.G(1452353, J$.R(1452345, 'sig', sig, false, false), 'nonce'));
                            var key = J$.W(1452385, 'key', J$.G(1452377, J$.R(1452369, 'cert', cert, false, false), 'subjectKey'), key, false, false);
                            var algInfo = J$.W(1452433, 'algInfo', J$.G(1452425, J$.G(1452401, J$.R(1452393, 'algs', algs, false, true), 'info'), J$.G(1452417, J$.R(1452409, 'key', key, false, false), 'type')), algInfo, false, false);
                            J$.M(1452537, J$.G(1452449, J$.R(1452441, 'algInfo', algInfo, false, false), 'parts'), 'forEach', false)(J$.T(1452529, function (part) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(1452505, arguments.callee, this, arguments);
                                            arguments = J$.N(1452513, 'arguments', arguments, true, false, false);
                                            part = J$.N(1452521, 'part', part, true, false, false);
                                            J$.M(1452497, J$.R(1452457, 'buf', buf, false, false), 'writePart', false)(J$.G(1452489, J$.G(1452473, J$.R(1452465, 'key', key, false, false), 'part'), J$.R(1452481, 'part', part, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(1455001, J$e);
                                        } finally {
                                            if (J$.Fr(1455009))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(1452569, J$.R(1452545, 'buf', buf, false, false), 'writeInt64', false)(J$.G(1452561, J$.R(1452553, 'cert', cert, false, false), 'serial'));
                            var type = J$.W(1452617, 'type', J$.G(1452609, J$.G(1452601, J$.G(1452585, J$.R(1452577, 'cert', cert, false, false), 'subjects'), J$.T(1452593, 0, 22, false)), 'type'), type, false, false);
                            J$.M(1452649, J$.R(1452625, 'assert', assert, false, true), 'notStrictEqual', false)(J$.R(1452633, 'type', type, false, false), J$.T(1452641, 'unknown', 21, false));
                            J$.M(1452745, J$.G(1452665, J$.R(1452657, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(1452737, function (id) {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(1452713, arguments.callee, this, arguments);
                                            arguments = J$.N(1452721, 'arguments', arguments, true, false, false);
                                            id = J$.N(1452729, 'id', id, true, false, false);
                                            J$.M(1452705, J$.R(1452673, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1452689, J$.R(1452681, 'id', id, false, false), 'type'), J$.R(1452697, 'type', type, false, false));
                                        } catch (J$e) {
                                            J$.Ex(1455017, J$e);
                                        } finally {
                                            if (J$.Fr(1455025))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            type = J$.W(1452777, 'type', J$.G(1452769, J$.R(1452753, 'TYPES', TYPES, false, true), J$.R(1452761, 'type', type, false, false)), type, false, false);
                            J$.M(1452801, J$.R(1452785, 'buf', buf, false, false), 'writeInt', false)(J$.R(1452793, 'type', type, false, false));
                            if (J$.C(75464, J$.B(181706, '===', J$.G(1452817, J$.R(1452809, 'sig', sig, false, false), 'keyId'), J$.T(1452825, undefined, 24, false)))) {
                                J$.P(1452969, J$.R(1452833, 'sig', sig, false, false), 'keyId', J$.B(181722, '+', J$.B(181714, '+', J$.G(1452873, J$.G(1452865, J$.G(1452849, J$.R(1452841, 'cert', cert, false, false), 'subjects'), J$.T(1452857, 0, 22, false)), 'type'), J$.T(1452881, '_', 21, false)), J$.C(75456, J$.G(1452921, J$.G(1452913, J$.G(1452897, J$.R(1452889, 'cert', cert, false, false), 'subjects'), J$.T(1452905, 0, 22, false)), 'uid')) ? J$._() : J$.G(1452961, J$.G(1452953, J$.G(1452937, J$.R(1452929, 'cert', cert, false, false), 'subjects'), J$.T(1452945, 0, 22, false)), 'hostname')));
                            }
                            J$.M(1453001, J$.R(1452977, 'buf', buf, false, false), 'writeString', false)(J$.G(1452993, J$.R(1452985, 'sig', sig, false, false), 'keyId'));
                            var sub = J$.W(1453033, 'sub', J$.F(1453025, J$.R(1453009, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1453017, {}, 11, false)), sub, false, false);
                            J$.M(1453201, J$.G(1453049, J$.R(1453041, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(1453193, function (id) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(1453169, arguments.callee, this, arguments);
                                            arguments = J$.N(1453177, 'arguments', arguments, true, false, false);
                                            id = J$.N(1453185, 'id', id, true, false, false);
                                            if (J$.C(75480, J$.B(181730, '===', J$.R(1453057, 'type', type, false, false), J$.G(1453073, J$.R(1453065, 'TYPES', TYPES, false, true), 'host'))))
                                                J$.M(1453105, J$.R(1453081, 'sub', sub, false, false), 'writeString', false)(J$.G(1453097, J$.R(1453089, 'id', id, false, false), 'hostname'));
                                            else if (J$.C(75472, J$.B(181738, '===', J$.R(1453113, 'type', type, false, false), J$.G(1453129, J$.R(1453121, 'TYPES', TYPES, false, true), 'user'))))
                                                J$.M(1453161, J$.R(1453137, 'sub', sub, false, false), 'writeString', false)(J$.G(1453153, J$.R(1453145, 'id', id, false, false), 'uid'));
                                        } catch (J$e) {
                                            J$.Ex(1455033, J$e);
                                        } finally {
                                            if (J$.Fr(1455041))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(1453233, J$.R(1453209, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1453225, J$.R(1453217, 'sub', sub, false, false), 'toBuffer', false)());
                            J$.M(1453281, J$.R(1453241, 'buf', buf, false, false), 'writeInt64', false)(J$.F(1453273, J$.R(1453249, 'dateToInt64', dateToInt64, false, true), false)(J$.G(1453265, J$.R(1453257, 'cert', cert, false, false), 'validFrom')));
                            J$.M(1453329, J$.R(1453289, 'buf', buf, false, false), 'writeInt64', false)(J$.F(1453321, J$.R(1453297, 'dateToInt64', dateToInt64, false, true), false)(J$.G(1453313, J$.R(1453305, 'cert', cert, false, false), 'validUntil')));
                            var exts = J$.W(1453353, 'exts', J$.G(1453345, J$.R(1453337, 'sig', sig, false, false), 'exts'), exts, false, false);
                            if (J$.C(75488, J$.B(181746, '===', J$.R(1453361, 'exts', exts, false, false), J$.T(1453369, undefined, 24, false))))
                                exts = J$.W(1453385, 'exts', J$.T(1453377, [], 10, false), exts, false, false);
                            var extbuf = J$.W(1453417, 'extbuf', J$.F(1453409, J$.R(1453393, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1453401, {}, 11, false)), extbuf, false, false);
                            J$.M(1453561, J$.R(1453425, 'exts', exts, false, false), 'forEach', false)(J$.T(1453553, function (ext) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(1453529, arguments.callee, this, arguments);
                                            arguments = J$.N(1453537, 'arguments', arguments, true, false, false);
                                            ext = J$.N(1453545, 'ext', ext, true, false, false);
                                            if (J$.C(75496, J$.B(181754, '!==', J$.G(1453441, J$.R(1453433, 'ext', ext, false, false), 'critical'), J$.T(1453449, true, 23, false))))
                                                return J$.Rt(1453457, undefined);
                                            J$.M(1453489, J$.R(1453465, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(1453481, J$.R(1453473, 'ext', ext, false, false), 'name'));
                                            J$.M(1453521, J$.R(1453497, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(1453513, J$.R(1453505, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(1455049, J$e);
                                        } finally {
                                            if (J$.Fr(1455057))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(1453593, J$.R(1453569, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1453585, J$.R(1453577, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            extbuf = J$.W(1453625, 'extbuf', J$.F(1453617, J$.R(1453601, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1453609, {}, 11, false)), extbuf, false, false);
                            J$.M(1453769, J$.R(1453633, 'exts', exts, false, false), 'forEach', false)(J$.T(1453761, function (ext) {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(1453737, arguments.callee, this, arguments);
                                            arguments = J$.N(1453745, 'arguments', arguments, true, false, false);
                                            ext = J$.N(1453753, 'ext', ext, true, false, false);
                                            if (J$.C(75504, J$.B(181762, '===', J$.G(1453649, J$.R(1453641, 'ext', ext, false, false), 'critical'), J$.T(1453657, true, 23, false))))
                                                return J$.Rt(1453665, undefined);
                                            J$.M(1453697, J$.R(1453673, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(1453689, J$.R(1453681, 'ext', ext, false, false), 'name'));
                                            J$.M(1453729, J$.R(1453705, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(1453721, J$.R(1453713, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(1455065, J$e);
                                        } finally {
                                            if (J$.Fr(1455073))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(1453801, J$.R(1453777, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1453793, J$.R(1453785, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            J$.M(1453841, J$.R(1453809, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1453833, J$.R(1453817, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(1453825, 0, 22, false)));
                            sub = J$.W(1453881, 'sub', J$.M(1453873, J$.R(1453849, 'rfc4253', rfc4253, false, true), 'write', false)(J$.G(1453865, J$.R(1453857, 'cert', cert, false, false), 'issuerKey')), sub, false, false);
                            J$.M(1453905, J$.R(1453889, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(1453897, 'sub', sub, false, false));
                            if (J$.C(75512, J$.U(181770, '!', J$.R(1453913, 'noSig', noSig, false, false))))
                                J$.M(1453961, J$.R(1453921, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1453953, J$.G(1453937, J$.R(1453929, 'sig', sig, false, false), 'signature'), 'toBuffer', false)(J$.T(1453945, 'ssh', 21, false)));
                            return J$.Rt(1453985, J$.M(1453977, J$.R(1453969, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(1455081, J$e);
                        } finally {
                            if (J$.Fr(1455089))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getAlg(certType) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(1454257, arguments.callee, this, arguments);
                            arguments = J$.N(1454265, 'arguments', arguments, true, false, false);
                            certType = J$.N(1454273, 'certType', certType, true, false, false);
                            if (J$.C(75520, J$.B(181778, '===', J$.R(1454089, 'certType', certType, false, false), J$.T(1454097, 'ssh-rsa-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(1454113, J$.T(1454105, 'rsa', 21, false));
                            if (J$.C(75528, J$.B(181786, '===', J$.R(1454121, 'certType', certType, false, false), J$.T(1454129, 'ssh-dss-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(1454145, J$.T(1454137, 'dsa', 21, false));
                            if (J$.C(75536, J$.M(1454169, J$.R(1454153, 'certType', certType, false, false), 'match', false)(J$.R(1454161, 'ECDSA_ALGO', ECDSA_ALGO, false, true))))
                                return J$.Rt(1454185, J$.T(1454177, 'ecdsa', 21, false));
                            if (J$.C(75544, J$.B(181794, '===', J$.R(1454193, 'certType', certType, false, false), J$.T(1454201, 'ssh-ed25519-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(1454217, J$.T(1454209, 'ed25519', 21, false));
                            throw J$.F(1454249, J$.I(typeof Error === 'undefined' ? Error = J$.R(1454225, 'Error', undefined, true, true) : Error = J$.R(1454225, 'Error', Error, true, true)), true)(J$.B(181802, '+', J$.T(1454233, 'Unsupported cert type ', 21, false), J$.R(1454241, 'certType', certType, false, false)));
                        } catch (J$e) {
                            J$.Ex(1455097, J$e);
                        } finally {
                            if (J$.Fr(1455105))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCertType(key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(1454505, arguments.callee, this, arguments);
                            arguments = J$.N(1454513, 'arguments', arguments, true, false, false);
                            key = J$.N(1454521, 'key', key, true, false, false);
                            if (J$.C(75552, J$.B(181810, '===', J$.G(1454289, J$.R(1454281, 'key', key, false, false), 'type'), J$.T(1454297, 'rsa', 21, false))))
                                return J$.Rt(1454313, J$.T(1454305, 'ssh-rsa-cert-v01@openssh.com', 21, false));
                            if (J$.C(75560, J$.B(181818, '===', J$.G(1454329, J$.R(1454321, 'key', key, false, false), 'type'), J$.T(1454337, 'dsa', 21, false))))
                                return J$.Rt(1454353, J$.T(1454345, 'ssh-dss-cert-v01@openssh.com', 21, false));
                            if (J$.C(75568, J$.B(181826, '===', J$.G(1454369, J$.R(1454361, 'key', key, false, false), 'type'), J$.T(1454377, 'ecdsa', 21, false))))
                                return J$.Rt(1454417, J$.B(181842, '+', J$.B(181834, '+', J$.T(1454385, 'ecdsa-sha2-', 21, false), J$.G(1454401, J$.R(1454393, 'key', key, false, false), 'curve')), J$.T(1454409, '-cert-v01@openssh.com', 21, false)));
                            if (J$.C(75576, J$.B(181850, '===', J$.G(1454433, J$.R(1454425, 'key', key, false, false), 'type'), J$.T(1454441, 'ed25519', 21, false))))
                                return J$.Rt(1454457, J$.T(1454449, 'ssh-ed25519-cert-v01@openssh.com', 21, false));
                            throw J$.F(1454497, J$.I(typeof Error === 'undefined' ? Error = J$.R(1454465, 'Error', undefined, true, true) : Error = J$.R(1454465, 'Error', Error, true, true)), true)(J$.B(181858, '+', J$.T(1454473, 'Unsupported key type ', 21, false), J$.G(1454489, J$.R(1454481, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(1455113, J$e);
                        } finally {
                            if (J$.Fr(1455121))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1454537, 'assert', assert, false, false, false);
            J$.N(1454545, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(1454553, 'crypto', crypto, false, false, false);
            J$.N(1454561, 'Buffer', Buffer, false, false, false);
            J$.N(1454569, 'algs', algs, false, false, false);
            J$.N(1454577, 'Key', Key, false, false, false);
            J$.N(1454585, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(1454593, 'Identity', Identity, false, false, false);
            J$.N(1454601, 'rfc4253', rfc4253, false, false, false);
            J$.N(1454609, 'Signature', Signature, false, false, false);
            J$.N(1454617, 'utils', utils, false, false, false);
            J$.N(1454625, 'Certificate', Certificate, false, false, false);
            verify = J$.N(1454641, 'verify', J$.T(1454633, verify, 12, false), true, false, false);
            J$.N(1454649, 'TYPES', TYPES, false, false, false);
            J$.N(1454657, 'ECDSA_ALGO', ECDSA_ALGO, false, false, false);
            read = J$.N(1454673, 'read', J$.T(1454665, read, 12, false), true, false, false);
            fromBuffer = J$.N(1454689, 'fromBuffer', J$.T(1454681, fromBuffer, 12, false), true, false, false);
            int64ToDate = J$.N(1454705, 'int64ToDate', J$.T(1454697, int64ToDate, 12, false), true, false, false);
            dateToInt64 = J$.N(1454721, 'dateToInt64', J$.T(1454713, dateToInt64, 12, false), true, false, false);
            sign = J$.N(1454737, 'sign', J$.T(1454729, sign, 12, false), true, false, false);
            signAsync = J$.N(1454753, 'signAsync', J$.T(1454745, signAsync, 12, false), true, false, false);
            write = J$.N(1454769, 'write', J$.T(1454761, write, 12, false), true, false, false);
            toBuffer = J$.N(1454785, 'toBuffer', J$.T(1454777, toBuffer, 12, false), true, false, false);
            getAlg = J$.N(1454801, 'getAlg', J$.T(1454793, getAlg, 12, false), true, false, false);
            getCertType = J$.N(1454817, 'getCertType', J$.T(1454809, getCertType, 12, false), true, false, false);
            J$.T(1446457, 'use strict', 21, false);
            J$.F(1446481, J$.I(typeof require === 'undefined' ? require = J$.R(1446465, 'require', undefined, true, true) : require = J$.R(1446465, 'require', require, true, true)), false)(J$.T(1446473, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(1446505, J$.I(typeof require === 'undefined' ? require = J$.R(1446489, 'require', undefined, true, true) : require = J$.R(1446489, 'require', require, true, true)), false)(J$.T(1446497, 'core-js/modules/es.array.map', 21, false));
            J$.F(1446529, J$.I(typeof require === 'undefined' ? require = J$.R(1446513, 'require', undefined, true, true) : require = J$.R(1446513, 'require', require, true, true)), false)(J$.T(1446521, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1446553, J$.I(typeof require === 'undefined' ? require = J$.R(1446537, 'require', undefined, true, true) : require = J$.R(1446537, 'require', require, true, true)), false)(J$.T(1446545, 'core-js/modules/es.function.name', 21, false));
            J$.F(1446577, J$.I(typeof require === 'undefined' ? require = J$.R(1446561, 'require', undefined, true, true) : require = J$.R(1446561, 'require', require, true, true)), false)(J$.T(1446569, 'core-js/modules/es.object.keys', 21, false));
            J$.F(1446601, J$.I(typeof require === 'undefined' ? require = J$.R(1446585, 'require', undefined, true, true) : require = J$.R(1446585, 'require', require, true, true)), false)(J$.T(1446593, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1446625, J$.I(typeof require === 'undefined' ? require = J$.R(1446609, 'require', undefined, true, true) : require = J$.R(1446609, 'require', require, true, true)), false)(J$.T(1446617, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(1446649, J$.I(typeof require === 'undefined' ? require = J$.R(1446633, 'require', undefined, true, true) : require = J$.R(1446633, 'require', require, true, true)), false)(J$.T(1446641, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(1446673, J$.I(typeof require === 'undefined' ? require = J$.R(1446657, 'require', undefined, true, true) : require = J$.R(1446657, 'require', require, true, true)), false)(J$.T(1446665, 'core-js/modules/es.string.match', 21, false));
            J$.F(1446697, J$.I(typeof require === 'undefined' ? require = J$.R(1446681, 'require', undefined, true, true) : require = J$.R(1446681, 'require', require, true, true)), false)(J$.T(1446689, 'core-js/modules/es.string.split', 21, false));
            J$.F(1446721, J$.I(typeof require === 'undefined' ? require = J$.R(1446705, 'require', undefined, true, true) : require = J$.R(1446705, 'require', require, true, true)), false)(J$.T(1446713, 'core-js/modules/es.string.trim', 21, false));
            J$.F(1446745, J$.I(typeof require === 'undefined' ? require = J$.R(1446729, 'require', undefined, true, true) : require = J$.R(1446729, 'require', require, true, true)), false)(J$.T(1446737, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.P(1446825, J$.I(typeof module === 'undefined' ? module = J$.R(1446753, 'module', undefined, true, true) : module = J$.R(1446753, 'module', module, true, true)), 'exports', J$.T(1446817, {
                read: J$.R(1446761, 'read', read, false, true),
                verify: J$.R(1446769, 'verify', verify, false, true),
                sign: J$.R(1446777, 'sign', sign, false, true),
                signAsync: J$.R(1446785, 'signAsync', signAsync, false, true),
                write: J$.R(1446793, 'write', write, false, true),
                fromBuffer: J$.R(1446801, 'fromBuffer', fromBuffer, false, true),
                toBuffer: J$.R(1446809, 'toBuffer', toBuffer, false, true)
            }, 11, false));
            var assert = J$.W(1446857, 'assert', J$.F(1446849, J$.I(typeof require === 'undefined' ? require = J$.R(1446833, 'require', undefined, true, true) : require = J$.R(1446833, 'require', require, true, true)), false)(J$.T(1446841, 'assert-plus', 21, false)), assert, false, true);
            var SSHBuffer = J$.W(1446889, 'SSHBuffer', J$.F(1446881, J$.I(typeof require === 'undefined' ? require = J$.R(1446865, 'require', undefined, true, true) : require = J$.R(1446865, 'require', require, true, true)), false)(J$.T(1446873, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var crypto = J$.W(1446921, 'crypto', J$.F(1446913, J$.I(typeof require === 'undefined' ? require = J$.R(1446897, 'require', undefined, true, true) : require = J$.R(1446897, 'require', require, true, true)), false)(J$.T(1446905, 'crypto', 21, false)), crypto, false, true);
            var Buffer = J$.W(1446961, 'Buffer', J$.G(1446953, J$.F(1446945, J$.I(typeof require === 'undefined' ? require = J$.R(1446929, 'require', undefined, true, true) : require = J$.R(1446929, 'require', require, true, true)), false)(J$.T(1446937, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(1446993, 'algs', J$.F(1446985, J$.I(typeof require === 'undefined' ? require = J$.R(1446969, 'require', undefined, true, true) : require = J$.R(1446969, 'require', require, true, true)), false)(J$.T(1446977, '../algs', 21, false)), algs, false, true);
            var Key = J$.W(1447025, 'Key', J$.F(1447017, J$.I(typeof require === 'undefined' ? require = J$.R(1447001, 'require', undefined, true, true) : require = J$.R(1447001, 'require', require, true, true)), false)(J$.T(1447009, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(1447057, 'PrivateKey', J$.F(1447049, J$.I(typeof require === 'undefined' ? require = J$.R(1447033, 'require', undefined, true, true) : require = J$.R(1447033, 'require', require, true, true)), false)(J$.T(1447041, '../private-key', 21, false)), PrivateKey, false, true);
            var Identity = J$.W(1447089, 'Identity', J$.F(1447081, J$.I(typeof require === 'undefined' ? require = J$.R(1447065, 'require', undefined, true, true) : require = J$.R(1447065, 'require', require, true, true)), false)(J$.T(1447073, '../identity', 21, false)), Identity, false, true);
            var rfc4253 = J$.W(1447121, 'rfc4253', J$.F(1447113, J$.I(typeof require === 'undefined' ? require = J$.R(1447097, 'require', undefined, true, true) : require = J$.R(1447097, 'require', require, true, true)), false)(J$.T(1447105, './rfc4253', 21, false)), rfc4253, false, true);
            var Signature = J$.W(1447153, 'Signature', J$.F(1447145, J$.I(typeof require === 'undefined' ? require = J$.R(1447129, 'require', undefined, true, true) : require = J$.R(1447129, 'require', require, true, true)), false)(J$.T(1447137, '../signature', 21, false)), Signature, false, true);
            var utils = J$.W(1447185, 'utils', J$.F(1447177, J$.I(typeof require === 'undefined' ? require = J$.R(1447161, 'require', undefined, true, true) : require = J$.R(1447161, 'require', require, true, true)), false)(J$.T(1447169, '../utils', 21, false)), utils, false, true);
            var Certificate = J$.W(1447217, 'Certificate', J$.F(1447209, J$.I(typeof require === 'undefined' ? require = J$.R(1447193, 'require', undefined, true, true) : require = J$.R(1447193, 'require', require, true, true)), false)(J$.T(1447201, '../certificate', 21, false)), Certificate, false, true);
            var TYPES = J$.W(1447297, 'TYPES', J$.T(1447289, {
                'user': J$.T(1447273, 1, 22, false),
                'host': J$.T(1447281, 2, 22, false)
            }, 11, false), TYPES, false, true);
            J$.M(1447409, J$.M(1447321, J$.I(typeof Object === 'undefined' ? Object = J$.R(1447305, 'Object', undefined, true, true) : Object = J$.R(1447305, 'Object', Object, true, true)), 'keys', false)(J$.R(1447313, 'TYPES', TYPES, false, true)), 'forEach', false)(J$.T(1447401, function (k) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1447377, arguments.callee, this, arguments);
                            arguments = J$.N(1447385, 'arguments', arguments, true, false, false);
                            k = J$.N(1447393, 'k', k, true, false, false);
                            J$.P(1447369, J$.R(1447329, 'TYPES', TYPES, false, true), J$.G(1447353, J$.R(1447337, 'TYPES', TYPES, false, true), J$.R(1447345, 'k', k, false, false)), J$.R(1447361, 'k', k, false, false));
                        } catch (J$e) {
                            J$.Ex(1454841, J$e);
                        } finally {
                            if (J$.Fr(1454849))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var ECDSA_ALGO = J$.W(1447425, 'ECDSA_ALGO', J$.T(1447417, /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/, 14, false), ECDSA_ALGO, false, true);
        } catch (J$e) {
            J$.Ex(1455129, J$e);
        } finally {
            if (J$.Sr(1455137))
                continue jalangiLabel19;
            else
                break jalangiLabel19;
        }
    }
// JALANGI DO NOT INSTRUMENT

