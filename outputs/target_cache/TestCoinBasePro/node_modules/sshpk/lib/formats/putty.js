J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(1488217, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/formats/putty.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1487129, arguments.callee, this, arguments);
                            arguments = J$.N(1487137, 'arguments', arguments, true, false, false);
                            buf = J$.N(1487145, 'buf', buf, true, false, false);
                            options = J$.N(1487153, 'options', options, true, false, false);
                            J$.N(1487161, 'lines', lines, false, false, false);
                            J$.N(1487169, 'found', found, false, false, false);
                            J$.N(1487177, 'parts', parts, false, false, false);
                            J$.N(1487185, 'si', si, false, false, false);
                            J$.N(1487193, 'alg', alg, false, false, false);
                            J$.N(1487201, 'comment', comment, false, false, false);
                            J$.N(1487209, 'publicLines', publicLines, false, false, false);
                            J$.N(1487217, 'publicBuf', publicBuf, false, false, false);
                            J$.N(1487225, 'keyType', keyType, false, false, false);
                            J$.N(1487233, 'key', key, false, false, false);
                            var lines = J$.W(1486129, 'lines', J$.M(1486121, J$.M(1486105, J$.R(1486089, 'buf', buf, false, false), 'toString', false)(J$.T(1486097, 'ascii', 21, false)), 'split', false)(J$.T(1486113, /[\r\n]+/, 14, false)), lines, false, false);
                            var found = J$.W(1486145, 'found', J$.T(1486137, false, 23, false), found, false, false);
                            var parts;
                            var si = J$.W(1486161, 'si', J$.T(1486153, 0, 22, false), si, false, false);
                            while (J$.C(76600, J$.B(182978, '<', J$.R(1486169, 'si', si, false, false), J$.G(1486185, J$.R(1486177, 'lines', lines, false, false), 'length')))) {
                                parts = J$.W(1486241, 'parts', J$.F(1486233, J$.R(1486193, 'splitHeader', splitHeader, false, true), false)(J$.G(1486225, J$.R(1486201, 'lines', lines, false, false), J$.B(183002, '-', si = J$.W(1486217, 'si', J$.B(182994, '+', J$.U(182986, '+', J$.R(1486209, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                                if (J$.C(76592, J$.C(76584, J$.R(1486249, 'parts', parts, false, false)) ? J$.B(183010, '===', J$.M(1486281, J$.G(1486273, J$.R(1486257, 'parts', parts, false, false), J$.T(1486265, 0, 22, false)), 'toLowerCase', false)(), J$.T(1486289, 'putty-user-key-file-2', 21, false)) : J$._())) {
                                    found = J$.W(1486305, 'found', J$.T(1486297, true, 23, false), found, false, false);
                                    break;
                                }
                            }
                            if (J$.C(76608, J$.U(183018, '!', J$.R(1486313, 'found', found, false, false)))) {
                                throw J$.F(1486337, J$.I(typeof Error === 'undefined' ? Error = J$.R(1486321, 'Error', undefined, true, true) : Error = J$.R(1486321, 'Error', Error, true, true)), true)(J$.T(1486329, 'No PuTTY format first line found', 21, false));
                            }
                            var alg = J$.W(1486369, 'alg', J$.G(1486361, J$.R(1486345, 'parts', parts, false, false), J$.T(1486353, 1, 22, false)), alg, false, false);
                            parts = J$.W(1486425, 'parts', J$.F(1486417, J$.R(1486377, 'splitHeader', splitHeader, false, true), false)(J$.G(1486409, J$.R(1486385, 'lines', lines, false, false), J$.B(183042, '-', si = J$.W(1486401, 'si', J$.B(183034, '+', J$.U(183026, '+', J$.R(1486393, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(1486481, J$.R(1486433, 'assert', assert, false, true), 'equal', false)(J$.M(1486465, J$.G(1486457, J$.R(1486441, 'parts', parts, false, false), J$.T(1486449, 0, 22, false)), 'toLowerCase', false)(), J$.T(1486473, 'encryption', 21, false));
                            parts = J$.W(1486537, 'parts', J$.F(1486529, J$.R(1486489, 'splitHeader', splitHeader, false, true), false)(J$.G(1486521, J$.R(1486497, 'lines', lines, false, false), J$.B(183066, '-', si = J$.W(1486513, 'si', J$.B(183058, '+', J$.U(183050, '+', J$.R(1486505, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(1486593, J$.R(1486545, 'assert', assert, false, true), 'equal', false)(J$.M(1486577, J$.G(1486569, J$.R(1486553, 'parts', parts, false, false), J$.T(1486561, 0, 22, false)), 'toLowerCase', false)(), J$.T(1486585, 'comment', 21, false));
                            var comment = J$.W(1486625, 'comment', J$.G(1486617, J$.R(1486601, 'parts', parts, false, false), J$.T(1486609, 1, 22, false)), comment, false, false);
                            parts = J$.W(1486681, 'parts', J$.F(1486673, J$.R(1486633, 'splitHeader', splitHeader, false, true), false)(J$.G(1486665, J$.R(1486641, 'lines', lines, false, false), J$.B(183090, '-', si = J$.W(1486657, 'si', J$.B(183082, '+', J$.U(183074, '+', J$.R(1486649, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(1486737, J$.R(1486689, 'assert', assert, false, true), 'equal', false)(J$.M(1486721, J$.G(1486713, J$.R(1486697, 'parts', parts, false, false), J$.T(1486705, 0, 22, false)), 'toLowerCase', false)(), J$.T(1486729, 'public-lines', 21, false));
                            var publicLines = J$.W(1486793, 'publicLines', J$.F(1486785, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(1486745, 'parseInt', undefined, true, true) : parseInt = J$.R(1486745, 'parseInt', parseInt, true, true)), false)(J$.G(1486769, J$.R(1486753, 'parts', parts, false, false), J$.T(1486761, 1, 22, false)), J$.T(1486777, 10, 22, false)), publicLines, false, false);
                            if (J$.C(76632, J$.C(76624, J$.C(76616, J$.U(183098, '!', J$.F(1486817, J$.I(typeof isFinite === 'undefined' ? isFinite = J$.R(1486801, 'isFinite', undefined, true, true) : isFinite = J$.R(1486801, 'isFinite', isFinite, true, true)), false)(J$.R(1486809, 'publicLines', publicLines, false, false)))) ? J$._() : J$.B(183106, '<', J$.R(1486825, 'publicLines', publicLines, false, false), J$.T(1486833, 0, 22, false))) ? J$._() : J$.B(183114, '>', J$.R(1486841, 'publicLines', publicLines, false, false), J$.G(1486857, J$.R(1486849, 'lines', lines, false, false), 'length')))) {
                                throw J$.F(1486881, J$.I(typeof Error === 'undefined' ? Error = J$.R(1486865, 'Error', undefined, true, true) : Error = J$.R(1486865, 'Error', Error, true, true)), true)(J$.T(1486873, 'Invalid public-lines count', 21, false));
                            }
                            var publicBuf = J$.W(1486969, 'publicBuf', J$.M(1486961, J$.R(1486889, 'Buffer', Buffer, false, true), 'from', false)(J$.M(1486945, J$.M(1486929, J$.R(1486897, 'lines', lines, false, false), 'slice', false)(J$.R(1486905, 'si', si, false, false), J$.B(183122, '+', J$.R(1486913, 'si', si, false, false), J$.R(1486921, 'publicLines', publicLines, false, false))), 'join', false)(J$.T(1486937, '', 21, false)), J$.T(1486953, 'base64', 21, false)), publicBuf, false, false);
                            var keyType = J$.W(1487001, 'keyType', J$.M(1486993, J$.R(1486977, 'rfc4253', rfc4253, false, true), 'algToKeyType', false)(J$.R(1486985, 'alg', alg, false, false)), keyType, false, false);
                            var key = J$.W(1487033, 'key', J$.M(1487025, J$.R(1487009, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(1487017, 'publicBuf', publicBuf, false, false)), key, false, false);
                            if (J$.C(76640, J$.B(183130, '!==', J$.G(1487049, J$.R(1487041, 'key', key, false, false), 'type'), J$.R(1487057, 'keyType', keyType, false, false)))) {
                                throw J$.F(1487081, J$.I(typeof Error === 'undefined' ? Error = J$.R(1487065, 'Error', undefined, true, true) : Error = J$.R(1487065, 'Error', Error, true, true)), true)(J$.T(1487073, 'Outer key algorithm mismatch', 21, false));
                            }
                            J$.P(1487105, J$.R(1487089, 'key', key, false, false), 'comment', J$.R(1487097, 'comment', comment, false, false));
                            return J$.Rt(1487121, J$.R(1487113, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(1488329, J$e);
                        } finally {
                            if (J$.Fr(1488337))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function splitHeader(line) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1487473, arguments.callee, this, arguments);
                            arguments = J$.N(1487481, 'arguments', arguments, true, false, false);
                            line = J$.N(1487489, 'line', line, true, false, false);
                            J$.N(1487497, 'idx', idx, false, false, false);
                            J$.N(1487505, 'header', header, false, false, false);
                            J$.N(1487513, 'rest', rest, false, false, false);
                            var idx = J$.W(1487265, 'idx', J$.M(1487257, J$.R(1487241, 'line', line, false, false), 'indexOf', false)(J$.T(1487249, ':', 21, false)), idx, false, false);
                            if (J$.C(76648, J$.B(183146, '===', J$.R(1487273, 'idx', idx, false, false), J$.U(183138, '-', J$.T(1487281, 1, 22, false)))))
                                return J$.Rt(1487297, J$.T(1487289, null, 25, false));
                            var header = J$.W(1487337, 'header', J$.M(1487329, J$.R(1487305, 'line', line, false, false), 'slice', false)(J$.T(1487313, 0, 22, false), J$.R(1487321, 'idx', idx, false, false)), header, false, false);
                            idx = J$.W(1487353, 'idx', J$.B(183162, '+', J$.U(183154, '+', J$.R(1487345, 'idx', idx, false, false)), 1), idx, false, false);
                            while (J$.C(76656, J$.B(183170, '===', J$.G(1487377, J$.R(1487361, 'line', line, false, false), J$.R(1487369, 'idx', idx, false, false)), J$.T(1487385, ' ', 21, false)))) {
                                idx = J$.W(1487401, 'idx', J$.B(183186, '+', J$.U(183178, '+', J$.R(1487393, 'idx', idx, false, false)), 1), idx, false, false);
                            }
                            var rest = J$.W(1487433, 'rest', J$.M(1487425, J$.R(1487409, 'line', line, false, false), 'slice', false)(J$.R(1487417, 'idx', idx, false, false)), rest, false, false);
                            return J$.Rt(1487465, J$.T(1487457, [
                                J$.R(1487441, 'header', header, false, false),
                                J$.R(1487449, 'rest', rest, false, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(1488345, J$e);
                        } finally {
                            if (J$.Fr(1488353))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1487945, arguments.callee, this, arguments);
                            arguments = J$.N(1487953, 'arguments', arguments, true, false, false);
                            key = J$.N(1487961, 'key', key, true, false, false);
                            options = J$.N(1487969, 'options', options, true, false, false);
                            J$.N(1487977, 'alg', alg, false, false, false);
                            J$.N(1487985, 'buf', buf, false, false, false);
                            J$.N(1487993, 'comment', comment, false, false, false);
                            J$.N(1488001, 'b64', b64, false, false, false);
                            J$.N(1488009, 'lines', lines, false, false, false);
                            J$.M(1487537, J$.R(1487521, 'assert', assert, false, true), 'object', false)(J$.R(1487529, 'key', key, false, false));
                            if (J$.C(76664, J$.U(183194, '!', J$.M(1487561, J$.R(1487545, 'Key', Key, false, true), 'isKey', false)(J$.R(1487553, 'key', key, false, false)))))
                                throw J$.F(1487585, J$.I(typeof Error === 'undefined' ? Error = J$.R(1487569, 'Error', undefined, true, true) : Error = J$.R(1487569, 'Error', Error, true, true)), true)(J$.T(1487577, 'Must be a public key', 21, false));
                            var alg = J$.W(1487617, 'alg', J$.M(1487609, J$.R(1487593, 'rfc4253', rfc4253, false, true), 'keyTypeToAlg', false)(J$.R(1487601, 'key', key, false, false)), alg, false, false);
                            var buf = J$.W(1487649, 'buf', J$.M(1487641, J$.R(1487625, 'rfc4253', rfc4253, false, true), 'write', false)(J$.R(1487633, 'key', key, false, false)), buf, false, false);
                            var comment = J$.W(1487681, 'comment', J$.C(76672, J$.G(1487665, J$.R(1487657, 'key', key, false, false), 'comment')) ? J$._() : J$.T(1487673, '', 21, false), comment, false, false);
                            var b64 = J$.W(1487713, 'b64', J$.M(1487705, J$.R(1487689, 'buf', buf, false, false), 'toString', false)(J$.T(1487697, 'base64', 21, false)), b64, false, false);
                            var lines = J$.W(1487753, 'lines', J$.F(1487745, J$.R(1487721, 'wrap', wrap, false, true), false)(J$.R(1487729, 'b64', b64, false, false), J$.T(1487737, 64, 22, false)), lines, false, false);
                            J$.M(1487793, J$.R(1487761, 'lines', lines, false, false), 'unshift', false)(J$.B(183202, '+', J$.T(1487769, 'Public-Lines: ', 21, false), J$.G(1487785, J$.R(1487777, 'lines', lines, false, false), 'length')));
                            J$.M(1487825, J$.R(1487801, 'lines', lines, false, false), 'unshift', false)(J$.B(183210, '+', J$.T(1487809, 'Comment: ', 21, false), J$.R(1487817, 'comment', comment, false, false)));
                            J$.M(1487849, J$.R(1487833, 'lines', lines, false, false), 'unshift', false)(J$.T(1487841, 'Encryption: none', 21, false));
                            J$.M(1487881, J$.R(1487857, 'lines', lines, false, false), 'unshift', false)(J$.B(183218, '+', J$.T(1487865, 'PuTTY-User-Key-File-2: ', 21, false), J$.R(1487873, 'alg', alg, false, false)));
                            return J$.Rt(1487937, J$.M(1487929, J$.R(1487889, 'Buffer', Buffer, false, true), 'from', false)(J$.B(183226, '+', J$.M(1487913, J$.R(1487897, 'lines', lines, false, false), 'join', false)(J$.T(1487905, '\n', 21, false)), J$.T(1487921, '\n', 21, false))));
                        } catch (J$e) {
                            J$.Ex(1488361, J$e);
                        } finally {
                            if (J$.Fr(1488369))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrap(txt, len) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1488169, arguments.callee, this, arguments);
                            arguments = J$.N(1488177, 'arguments', arguments, true, false, false);
                            txt = J$.N(1488185, 'txt', txt, true, false, false);
                            len = J$.N(1488193, 'len', len, true, false, false);
                            J$.N(1488201, 'lines', lines, false, false, false);
                            J$.N(1488209, 'pos', pos, false, false, false);
                            var lines = J$.W(1488025, 'lines', J$.T(1488017, [], 10, false), lines, false, false);
                            var pos = J$.W(1488041, 'pos', J$.T(1488033, 0, 22, false), pos, false, false);
                            while (J$.C(76680, J$.B(183234, '<', J$.R(1488049, 'pos', pos, false, false), J$.G(1488065, J$.R(1488057, 'txt', txt, false, false), 'length')))) {
                                J$.M(1488121, J$.R(1488073, 'lines', lines, false, false), 'push', false)(J$.M(1488113, J$.R(1488081, 'txt', txt, false, false), 'slice', false)(J$.R(1488089, 'pos', pos, false, false), J$.B(183242, '+', J$.R(1488097, 'pos', pos, false, false), J$.T(1488105, 64, 22, false))));
                                pos = J$.W(1488145, 'pos', J$.B(183250, '+', J$.R(1488137, 'pos', pos, false, false), J$.T(1488129, 64, 22, false)), pos, false, false);
                            }
                            return J$.Rt(1488161, J$.R(1488153, 'lines', lines, false, false));
                        } catch (J$e) {
                            J$.Ex(1488377, J$e);
                        } finally {
                            if (J$.Fr(1488385))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1488225, 'assert', assert, false, false, false);
            J$.N(1488233, 'Buffer', Buffer, false, false, false);
            J$.N(1488241, 'rfc4253', rfc4253, false, false, false);
            J$.N(1488249, 'Key', Key, false, false, false);
            J$.N(1488257, 'errors', errors, false, false, false);
            read = J$.N(1488273, 'read', J$.T(1488265, read, 12, false), true, false, false);
            splitHeader = J$.N(1488289, 'splitHeader', J$.T(1488281, splitHeader, 12, false), true, false, false);
            write = J$.N(1488305, 'write', J$.T(1488297, write, 12, false), true, false, false);
            wrap = J$.N(1488321, 'wrap', J$.T(1488313, wrap, 12, false), true, false, false);
            J$.T(1485657, 'use strict', 21, false);
            J$.F(1485681, J$.I(typeof require === 'undefined' ? require = J$.R(1485665, 'require', undefined, true, true) : require = J$.R(1485665, 'require', require, true, true)), false)(J$.T(1485673, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(1485705, J$.I(typeof require === 'undefined' ? require = J$.R(1485689, 'require', undefined, true, true) : require = J$.R(1485689, 'require', require, true, true)), false)(J$.T(1485697, 'core-js/modules/es.array.join', 21, false));
            J$.F(1485729, J$.I(typeof require === 'undefined' ? require = J$.R(1485713, 'require', undefined, true, true) : require = J$.R(1485713, 'require', require, true, true)), false)(J$.T(1485721, 'core-js/modules/es.array.slice', 21, false));
            J$.F(1485753, J$.I(typeof require === 'undefined' ? require = J$.R(1485737, 'require', undefined, true, true) : require = J$.R(1485737, 'require', require, true, true)), false)(J$.T(1485745, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1485777, J$.I(typeof require === 'undefined' ? require = J$.R(1485761, 'require', undefined, true, true) : require = J$.R(1485761, 'require', require, true, true)), false)(J$.T(1485769, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1485801, J$.I(typeof require === 'undefined' ? require = J$.R(1485785, 'require', undefined, true, true) : require = J$.R(1485785, 'require', require, true, true)), false)(J$.T(1485793, 'core-js/modules/es.parse-int', 21, false));
            J$.F(1485825, J$.I(typeof require === 'undefined' ? require = J$.R(1485809, 'require', undefined, true, true) : require = J$.R(1485809, 'require', require, true, true)), false)(J$.T(1485817, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(1485849, J$.I(typeof require === 'undefined' ? require = J$.R(1485833, 'require', undefined, true, true) : require = J$.R(1485833, 'require', require, true, true)), false)(J$.T(1485841, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(1485873, J$.I(typeof require === 'undefined' ? require = J$.R(1485857, 'require', undefined, true, true) : require = J$.R(1485857, 'require', require, true, true)), false)(J$.T(1485865, 'core-js/modules/es.string.split', 21, false));
            J$.P(1485913, J$.I(typeof module === 'undefined' ? module = J$.R(1485881, 'module', undefined, true, true) : module = J$.R(1485881, 'module', module, true, true)), 'exports', J$.T(1485905, {
                read: J$.R(1485889, 'read', read, false, true),
                write: J$.R(1485897, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(1485945, 'assert', J$.F(1485937, J$.I(typeof require === 'undefined' ? require = J$.R(1485921, 'require', undefined, true, true) : require = J$.R(1485921, 'require', require, true, true)), false)(J$.T(1485929, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(1485985, 'Buffer', J$.G(1485977, J$.F(1485969, J$.I(typeof require === 'undefined' ? require = J$.R(1485953, 'require', undefined, true, true) : require = J$.R(1485953, 'require', require, true, true)), false)(J$.T(1485961, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var rfc4253 = J$.W(1486017, 'rfc4253', J$.F(1486009, J$.I(typeof require === 'undefined' ? require = J$.R(1485993, 'require', undefined, true, true) : require = J$.R(1485993, 'require', require, true, true)), false)(J$.T(1486001, './rfc4253', 21, false)), rfc4253, false, true);
            var Key = J$.W(1486049, 'Key', J$.F(1486041, J$.I(typeof require === 'undefined' ? require = J$.R(1486025, 'require', undefined, true, true) : require = J$.R(1486025, 'require', require, true, true)), false)(J$.T(1486033, '../key', 21, false)), Key, false, true);
            var errors = J$.W(1486081, 'errors', J$.F(1486073, J$.I(typeof require === 'undefined' ? require = J$.R(1486057, 'require', undefined, true, true) : require = J$.R(1486057, 'require', require, true, true)), false)(J$.T(1486065, '../errors', 21, false)), errors, false, true);
        } catch (J$e) {
            J$.Ex(1488393, J$e);
        } finally {
            if (J$.Sr(1488401))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

