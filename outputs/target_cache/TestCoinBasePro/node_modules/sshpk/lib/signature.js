J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(1554401, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/sshpk/lib/signature.js');
            function Signature(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(1548353, arguments.callee, this, arguments);
                            arguments = J$.N(1548361, 'arguments', arguments, true, false, false);
                            opts = J$.N(1548369, 'opts', opts, true, false, false);
                            J$.N(1548377, 'partLookup', partLookup, false, false, false);
                            J$.N(1548385, 'i', i, false, false, false);
                            J$.N(1548393, 'part', part, false, false, false);
                            J$.M(1547953, J$.R(1547929, 'assert', assert, false, true), 'object', false)(J$.R(1547937, 'opts', opts, false, false), J$.T(1547945, 'options', 21, false));
                            J$.M(1547993, J$.R(1547961, 'assert', assert, false, true), 'arrayOfObject', false)(J$.G(1547977, J$.R(1547969, 'opts', opts, false, false), 'parts'), J$.T(1547985, 'options.parts', 21, false));
                            J$.M(1548033, J$.R(1548001, 'assert', assert, false, true), 'string', false)(J$.G(1548017, J$.R(1548009, 'opts', opts, false, false), 'type'), J$.T(1548025, 'options.type', 21, false));
                            var partLookup = J$.W(1548049, 'partLookup', J$.T(1548041, {}, 11, false), partLookup, false, false);
                            for (var i = J$.W(1548065, 'i', J$.T(1548057, 0, 22, false), i, false, false); J$.C(79576, J$.B(187290, '<', J$.R(1548073, 'i', i, false, false), J$.G(1548097, J$.G(1548089, J$.R(1548081, 'opts', opts, false, false), 'parts'), 'length'))); i = J$.W(1548113, 'i', J$.B(187306, '+', J$.U(187298, '+', J$.R(1548105, 'i', i, false, false)), 1), i, false, false)) {
                                var part = J$.W(1548153, 'part', J$.G(1548145, J$.G(1548129, J$.R(1548121, 'opts', opts, false, false), 'parts'), J$.R(1548137, 'i', i, false, false)), part, false, false);
                                J$.P(1548193, J$.R(1548161, 'partLookup', partLookup, false, false), J$.G(1548177, J$.R(1548169, 'part', part, false, false), 'name'), J$.R(1548185, 'part', part, false, false));
                            }
                            J$.P(1548225, J$.R(1548201, 'this', this, false, false), 'type', J$.G(1548217, J$.R(1548209, 'opts', opts, false, false), 'type'));
                            J$.P(1548257, J$.R(1548233, 'this', this, false, false), 'hashAlgorithm', J$.G(1548249, J$.R(1548241, 'opts', opts, false, false), 'hashAlgo'));
                            J$.P(1548289, J$.R(1548265, 'this', this, false, false), 'curve', J$.G(1548281, J$.R(1548273, 'opts', opts, false, false), 'curve'));
                            J$.P(1548321, J$.R(1548297, 'this', this, false, false), 'parts', J$.G(1548313, J$.R(1548305, 'opts', opts, false, false), 'parts'));
                            J$.P(1548345, J$.R(1548329, 'this', this, false, false), 'part', J$.R(1548337, 'partLookup', partLookup, false, false));
                        } catch (J$e) {
                            J$.Ex(1554569, J$e);
                        } finally {
                            if (J$.Fr(1554577))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseOneNum(data, type, format, opts) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(1552209, arguments.callee, this, arguments);
                            arguments = J$.N(1552217, 'arguments', arguments, true, false, false);
                            data = J$.N(1552225, 'data', data, true, false, false);
                            type = J$.N(1552233, 'type', type, true, false, false);
                            format = J$.N(1552241, 'format', format, true, false, false);
                            opts = J$.N(1552249, 'opts', opts, true, false, false);
                            J$.N(1552257, 'buf', buf, false, false, false);
                            J$.N(1552265, 'head', head, false, false, false);
                            J$.N(1552273, 'msg', msg, false, false, false);
                            J$.N(1552281, 'sig', sig, false, false, false);
                            if (J$.C(79936, J$.B(187570, '===', J$.R(1551481, 'format', format, false, false), J$.T(1551489, 'ssh', 21, false)))) {
                                try {
                                    var buf = J$.W(1551529, 'buf', J$.F(1551521, J$.R(1551497, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1551513, { buffer: J$.R(1551505, 'data', data, false, false) }, 11, false)), buf, false, false);
                                    var head = J$.W(1551553, 'head', J$.M(1551545, J$.R(1551537, 'buf', buf, false, false), 'readString', false)(), head, false, false);
                                } catch (e) {
                                    J$.N(1551561, 'e', e, false, false, true);
                                }
                                if (J$.C(79928, J$.B(187578, '!==', J$.R(1551569, 'buf', buf, false, false), J$.T(1551577, undefined, 24, false)))) {
                                    var msg = J$.W(1551633, 'msg', J$.B(187618, '+', J$.B(187610, '+', J$.B(187602, '+', J$.B(187594, '+', J$.B(187586, '+', J$.T(1551585, 'SSH signature does not match expected ', 21, false), J$.T(1551593, 'type (expected ', 21, false)), J$.R(1551601, 'type', type, false, false)), J$.T(1551609, ', got ', 21, false)), J$.R(1551617, 'head', head, false, false)), J$.T(1551625, ')', 21, false)), msg, false, false);
                                    switch (J$.C1(79888, J$.R(1551641, 'head', head, false, false))) {
                                    case J$.C2(79896, J$.T(1551713, 'ssh-rsa', 21, false)):
                                        J$.M(1551681, J$.R(1551649, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1551657, 'type', type, false, false), J$.T(1551665, 'rsa', 21, false), J$.R(1551673, 'msg', msg, false, false));
                                        J$.P(1551705, J$.R(1551689, 'opts', opts, false, false), 'hashAlgo', J$.T(1551697, 'sha1', 21, false));
                                        break;
                                    case J$.C2(79904, J$.T(1551785, 'rsa-sha2-256', 21, false)):
                                        J$.M(1551753, J$.R(1551721, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1551729, 'type', type, false, false), J$.T(1551737, 'rsa', 21, false), J$.R(1551745, 'msg', msg, false, false));
                                        J$.P(1551777, J$.R(1551761, 'opts', opts, false, false), 'hashAlgo', J$.T(1551769, 'sha256', 21, false));
                                        break;
                                    case J$.C2(79912, J$.T(1551857, 'rsa-sha2-512', 21, false)):
                                        J$.M(1551825, J$.R(1551793, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1551801, 'type', type, false, false), J$.T(1551809, 'rsa', 21, false), J$.R(1551817, 'msg', msg, false, false));
                                        J$.P(1551849, J$.R(1551833, 'opts', opts, false, false), 'hashAlgo', J$.T(1551841, 'sha512', 21, false));
                                        break;
                                    case J$.C2(79920, J$.T(1551929, 'ssh-ed25519', 21, false)):
                                        J$.M(1551897, J$.R(1551865, 'assert', assert, false, true), 'strictEqual', false)(J$.R(1551873, 'type', type, false, false), J$.T(1551881, 'ed25519', 21, false), J$.R(1551889, 'msg', msg, false, false));
                                        J$.P(1551921, J$.R(1551905, 'opts', opts, false, false), 'hashAlgo', J$.T(1551913, 'sha512', 21, false));
                                        break;
                                    default:
                                        throw J$.F(1551969, J$.I(typeof Error === 'undefined' ? Error = J$.R(1551937, 'Error', undefined, true, true) : Error = J$.R(1551937, 'Error', Error, true, true)), true)(J$.B(187634, '+', J$.B(187626, '+', J$.T(1551945, 'Unknown SSH signature ', 21, false), J$.T(1551953, 'type: ', 21, false)), J$.R(1551961, 'head', head, false, false)));
                                    }
                                    var sig = J$.W(1551993, 'sig', J$.M(1551985, J$.R(1551977, 'buf', buf, false, false), 'readPart', false)(), sig, false, false);
                                    J$.M(1552033, J$.R(1552001, 'assert', assert, false, true), 'ok', false)(J$.M(1552017, J$.R(1552009, 'buf', buf, false, false), 'atEnd', false)(), J$.T(1552025, 'extra trailing bytes', 21, false));
                                    J$.P(1552057, J$.R(1552041, 'sig', sig, false, false), 'name', J$.T(1552049, 'sig', 21, false));
                                    J$.M(1552089, J$.G(1552073, J$.R(1552065, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(1552081, 'sig', sig, false, false));
                                    return J$.Rt(1552121, J$.F(1552113, J$.R(1552097, 'Signature', Signature, false, true), true)(J$.R(1552105, 'opts', opts, false, false)));
                                }
                            }
                            J$.M(1552169, J$.G(1552137, J$.R(1552129, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(1552161, {
                                name: J$.T(1552145, 'sig', 21, false),
                                data: J$.R(1552153, 'data', data, false, false)
                            }, 11, false));
                            return J$.Rt(1552201, J$.F(1552193, J$.R(1552177, 'Signature', Signature, false, true), true)(J$.R(1552185, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(1554633, J$e);
                        } finally {
                            if (J$.Fr(1554641))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSAasn1(data, type, format, opts) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(1552609, arguments.callee, this, arguments);
                            arguments = J$.N(1552617, 'arguments', arguments, true, false, false);
                            data = J$.N(1552625, 'data', data, true, false, false);
                            type = J$.N(1552633, 'type', type, true, false, false);
                            format = J$.N(1552641, 'format', format, true, false, false);
                            opts = J$.N(1552649, 'opts', opts, true, false, false);
                            J$.N(1552657, 'der', der, false, false, false);
                            J$.N(1552665, 'r', r, false, false, false);
                            J$.N(1552673, 's', s, false, false, false);
                            var der = J$.W(1552313, 'der', J$.M(1552305, J$.R(1552289, 'asn1', asn1, false, true), 'BerReader', true)(J$.R(1552297, 'data', data, false, false)), der, false, false);
                            J$.M(1552329, J$.R(1552321, 'der', der, false, false), 'readSequence', false)();
                            var r = J$.W(1552385, 'r', J$.M(1552377, J$.R(1552337, 'der', der, false, false), 'readString', false)(J$.G(1552361, J$.G(1552353, J$.R(1552345, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(1552369, true, 23, false)), r, false, false);
                            var s = J$.W(1552441, 's', J$.M(1552433, J$.R(1552393, 'der', der, false, false), 'readString', false)(J$.G(1552417, J$.G(1552409, J$.R(1552401, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(1552425, true, 23, false)), s, false, false);
                            J$.M(1552505, J$.G(1552457, J$.R(1552449, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(1552497, {
                                name: J$.T(1552465, 'r', 21, false),
                                data: J$.M(1552489, J$.R(1552473, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(1552481, 'r', r, false, false))
                            }, 11, false));
                            J$.M(1552569, J$.G(1552521, J$.R(1552513, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(1552561, {
                                name: J$.T(1552529, 's', 21, false),
                                data: J$.M(1552553, J$.R(1552537, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(1552545, 's', s, false, false))
                            }, 11, false));
                            return J$.Rt(1552601, J$.F(1552593, J$.R(1552577, 'Signature', Signature, false, true), true)(J$.R(1552585, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(1554649, J$e);
                        } finally {
                            if (J$.Fr(1554657))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSA(data, type, format, opts) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(1553105, arguments.callee, this, arguments);
                            arguments = J$.N(1553113, 'arguments', arguments, true, false, false);
                            data = J$.N(1553121, 'data', data, true, false, false);
                            type = J$.N(1553129, 'type', type, true, false, false);
                            format = J$.N(1553137, 'format', format, true, false, false);
                            opts = J$.N(1553145, 'opts', opts, true, false, false);
                            J$.N(1553153, 'buf', buf, false, false, false);
                            J$.N(1553161, 'd', d, false, false, false);
                            if (J$.C(79952, J$.B(187642, '!=', J$.G(1552689, J$.R(1552681, 'data', data, false, false), 'length'), J$.T(1552697, 40, 22, false)))) {
                                var buf = J$.W(1552737, 'buf', J$.F(1552729, J$.R(1552705, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1552721, { buffer: J$.R(1552713, 'data', data, false, false) }, 11, false)), buf, false, false);
                                var d = J$.W(1552761, 'd', J$.M(1552753, J$.R(1552745, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                if (J$.C(79944, J$.B(187650, '===', J$.M(1552785, J$.R(1552769, 'd', d, false, false), 'toString', false)(J$.T(1552777, 'ascii', 21, false)), J$.T(1552793, 'ssh-dss', 21, false))))
                                    d = J$.W(1552817, 'd', J$.M(1552809, J$.R(1552801, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                J$.M(1552857, J$.R(1552825, 'assert', assert, false, true), 'ok', false)(J$.M(1552841, J$.R(1552833, 'buf', buf, false, false), 'atEnd', false)(), J$.T(1552849, 'extra trailing bytes', 21, false));
                                J$.M(1552905, J$.R(1552865, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1552881, J$.R(1552873, 'd', d, false, false), 'length'), J$.T(1552889, 40, 22, false), J$.T(1552897, 'invalid inner length', 21, false));
                                data = J$.W(1552921, 'data', J$.R(1552913, 'd', d, false, false), data, false, false);
                            }
                            J$.M(1552993, J$.G(1552937, J$.R(1552929, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(1552985, {
                                name: J$.T(1552945, 'r', 21, false),
                                data: J$.M(1552977, J$.R(1552953, 'data', data, false, false), 'slice', false)(J$.T(1552961, 0, 22, false), J$.T(1552969, 20, 22, false))
                            }, 11, false));
                            J$.M(1553065, J$.G(1553009, J$.R(1553001, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(1553057, {
                                name: J$.T(1553017, 's', 21, false),
                                data: J$.M(1553049, J$.R(1553025, 'data', data, false, false), 'slice', false)(J$.T(1553033, 20, 22, false), J$.T(1553041, 40, 22, false))
                            }, 11, false));
                            return J$.Rt(1553097, J$.F(1553089, J$.R(1553073, 'Signature', Signature, false, true), true)(J$.R(1553081, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(1554665, J$e);
                        } finally {
                            if (J$.Fr(1554673))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseECDSA(data, type, format, opts) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1553985, arguments.callee, this, arguments);
                            arguments = J$.N(1553993, 'arguments', arguments, true, false, false);
                            data = J$.N(1554001, 'data', data, true, false, false);
                            type = J$.N(1554009, 'type', type, true, false, false);
                            format = J$.N(1554017, 'format', format, true, false, false);
                            opts = J$.N(1554025, 'opts', opts, true, false, false);
                            J$.N(1554033, 'buf', buf, false, false, false);
                            J$.N(1554041, 'r', r, false, false, false);
                            J$.N(1554049, 's', s, false, false, false);
                            J$.N(1554057, 'inner', inner, false, false, false);
                            J$.N(1554065, 'stype', stype, false, false, false);
                            J$.N(1554073, 'parts', parts, false, false, false);
                            var buf = J$.W(1553201, 'buf', J$.F(1553193, J$.R(1553169, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1553185, { buffer: J$.R(1553177, 'data', data, false, false) }, 11, false)), buf, false, false);
                            var r, s;
                            var inner = J$.W(1553225, 'inner', J$.M(1553217, J$.R(1553209, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                            var stype = J$.W(1553257, 'stype', J$.M(1553249, J$.R(1553233, 'inner', inner, false, false), 'toString', false)(J$.T(1553241, 'ascii', 21, false)), stype, false, false);
                            if (J$.C(79992, J$.B(187658, '===', J$.M(1553289, J$.R(1553265, 'stype', stype, false, false), 'slice', false)(J$.T(1553273, 0, 22, false), J$.T(1553281, 6, 22, false)), J$.T(1553297, 'ecdsa-', 21, false)))) {
                                var parts = J$.W(1553329, 'parts', J$.M(1553321, J$.R(1553305, 'stype', stype, false, false), 'split', false)(J$.T(1553313, '-', 21, false)), parts, false, false);
                                J$.M(1553377, J$.R(1553337, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1553361, J$.R(1553345, 'parts', parts, false, false), J$.T(1553353, 0, 22, false)), J$.T(1553369, 'ecdsa', 21, false));
                                J$.M(1553425, J$.R(1553385, 'assert', assert, false, true), 'strictEqual', false)(J$.G(1553409, J$.R(1553393, 'parts', parts, false, false), J$.T(1553401, 1, 22, false)), J$.T(1553417, 'sha2', 21, false));
                                J$.P(1553465, J$.R(1553433, 'opts', opts, false, false), 'curve', J$.G(1553457, J$.R(1553441, 'parts', parts, false, false), J$.T(1553449, 2, 22, false)));
                                switch (J$.C1(79960, J$.G(1553481, J$.R(1553473, 'opts', opts, false, false), 'curve'))) {
                                case J$.C2(79968, J$.T(1553513, 'nistp256', 21, false)):
                                    J$.P(1553505, J$.R(1553489, 'opts', opts, false, false), 'hashAlgo', J$.T(1553497, 'sha256', 21, false));
                                    break;
                                case J$.C2(79976, J$.T(1553545, 'nistp384', 21, false)):
                                    J$.P(1553537, J$.R(1553521, 'opts', opts, false, false), 'hashAlgo', J$.T(1553529, 'sha384', 21, false));
                                    break;
                                case J$.C2(79984, J$.T(1553577, 'nistp521', 21, false)):
                                    J$.P(1553569, J$.R(1553553, 'opts', opts, false, false), 'hashAlgo', J$.T(1553561, 'sha512', 21, false));
                                    break;
                                default:
                                    throw J$.F(1553617, J$.I(typeof Error === 'undefined' ? Error = J$.R(1553585, 'Error', undefined, true, true) : Error = J$.R(1553585, 'Error', Error, true, true)), true)(J$.B(187666, '+', J$.T(1553593, 'Unsupported ECDSA curve: ', 21, false), J$.G(1553609, J$.R(1553601, 'opts', opts, false, false), 'curve')));
                                }
                                inner = J$.W(1553641, 'inner', J$.M(1553633, J$.R(1553625, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                                J$.M(1553681, J$.R(1553649, 'assert', assert, false, true), 'ok', false)(J$.M(1553665, J$.R(1553657, 'buf', buf, false, false), 'atEnd', false)(), J$.T(1553673, 'extra trailing bytes on outer', 21, false));
                                buf = J$.W(1553721, 'buf', J$.F(1553713, J$.R(1553689, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1553705, { buffer: J$.R(1553697, 'inner', inner, false, false) }, 11, false)), buf, false, false);
                                r = J$.W(1553745, 'r', J$.M(1553737, J$.R(1553729, 'buf', buf, false, false), 'readPart', false)(), r, false, false);
                            } else {
                                r = J$.W(1553769, 'r', J$.T(1553761, { data: J$.R(1553753, 'inner', inner, false, false) }, 11, false), r, false, false);
                            }
                            s = J$.W(1553793, 's', J$.M(1553785, J$.R(1553777, 'buf', buf, false, false), 'readPart', false)(), s, false, false);
                            J$.M(1553833, J$.R(1553801, 'assert', assert, false, true), 'ok', false)(J$.M(1553817, J$.R(1553809, 'buf', buf, false, false), 'atEnd', false)(), J$.T(1553825, 'extra trailing bytes', 21, false));
                            J$.P(1553857, J$.R(1553841, 'r', r, false, false), 'name', J$.T(1553849, 'r', 21, false));
                            J$.P(1553881, J$.R(1553865, 's', s, false, false), 'name', J$.T(1553873, 's', 21, false));
                            J$.M(1553913, J$.G(1553897, J$.R(1553889, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(1553905, 'r', r, false, false));
                            J$.M(1553945, J$.G(1553929, J$.R(1553921, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(1553937, 's', s, false, false));
                            return J$.Rt(1553977, J$.F(1553969, J$.R(1553953, 'Signature', Signature, false, true), true)(J$.R(1553961, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(1554681, J$e);
                        } finally {
                            if (J$.Fr(1554689))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1554409, 'assert', assert, false, false, false);
            J$.N(1554417, 'Buffer', Buffer, false, false, false);
            J$.N(1554425, 'algs', algs, false, false, false);
            J$.N(1554433, 'crypto', crypto, false, false, false);
            J$.N(1554441, 'errs', errs, false, false, false);
            J$.N(1554449, 'utils', utils, false, false, false);
            J$.N(1554457, 'asn1', asn1, false, false, false);
            J$.N(1554465, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(1554473, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(1554481, 'SignatureParseError', SignatureParseError, false, false, false);
            Signature = J$.N(1554497, 'Signature', J$.T(1554489, Signature, 12, false), true, false, false);
            parseOneNum = J$.N(1554513, 'parseOneNum', J$.T(1554505, parseOneNum, 12, false), true, false, false);
            parseDSAasn1 = J$.N(1554529, 'parseDSAasn1', J$.T(1554521, parseDSAasn1, 12, false), true, false, false);
            parseDSA = J$.N(1554545, 'parseDSA', J$.T(1554537, parseDSA, 12, false), true, false, false);
            parseECDSA = J$.N(1554561, 'parseECDSA', J$.T(1554553, parseECDSA, 12, false), true, false, false);
            J$.T(1547393, 'use strict', 21, false);
            J$.F(1547417, J$.I(typeof require === 'undefined' ? require = J$.R(1547401, 'require', undefined, true, true) : require = J$.R(1547401, 'require', require, true, true)), false)(J$.T(1547409, 'core-js/modules/es.array.concat', 21, false));
            J$.F(1547441, J$.I(typeof require === 'undefined' ? require = J$.R(1547425, 'require', undefined, true, true) : require = J$.R(1547425, 'require', require, true, true)), false)(J$.T(1547433, 'core-js/modules/es.array.slice', 21, false));
            J$.F(1547465, J$.I(typeof require === 'undefined' ? require = J$.R(1547449, 'require', undefined, true, true) : require = J$.R(1547449, 'require', require, true, true)), false)(J$.T(1547457, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(1547489, J$.I(typeof require === 'undefined' ? require = J$.R(1547473, 'require', undefined, true, true) : require = J$.R(1547473, 'require', require, true, true)), false)(J$.T(1547481, 'core-js/modules/es.function.name', 21, false));
            J$.F(1547513, J$.I(typeof require === 'undefined' ? require = J$.R(1547497, 'require', undefined, true, true) : require = J$.R(1547497, 'require', require, true, true)), false)(J$.T(1547505, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(1547537, J$.I(typeof require === 'undefined' ? require = J$.R(1547521, 'require', undefined, true, true) : require = J$.R(1547521, 'require', require, true, true)), false)(J$.T(1547529, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(1547561, J$.I(typeof require === 'undefined' ? require = J$.R(1547545, 'require', undefined, true, true) : require = J$.R(1547545, 'require', require, true, true)), false)(J$.T(1547553, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(1547585, J$.I(typeof require === 'undefined' ? require = J$.R(1547569, 'require', undefined, true, true) : require = J$.R(1547569, 'require', require, true, true)), false)(J$.T(1547577, 'core-js/modules/es.string.split', 21, false));
            J$.P(1547609, J$.I(typeof module === 'undefined' ? module = J$.R(1547593, 'module', undefined, true, true) : module = J$.R(1547593, 'module', module, true, true)), 'exports', J$.R(1547601, 'Signature', Signature, false, true));
            var assert = J$.W(1547641, 'assert', J$.F(1547633, J$.I(typeof require === 'undefined' ? require = J$.R(1547617, 'require', undefined, true, true) : require = J$.R(1547617, 'require', require, true, true)), false)(J$.T(1547625, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(1547681, 'Buffer', J$.G(1547673, J$.F(1547665, J$.I(typeof require === 'undefined' ? require = J$.R(1547649, 'require', undefined, true, true) : require = J$.R(1547649, 'require', require, true, true)), false)(J$.T(1547657, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(1547713, 'algs', J$.F(1547705, J$.I(typeof require === 'undefined' ? require = J$.R(1547689, 'require', undefined, true, true) : require = J$.R(1547689, 'require', require, true, true)), false)(J$.T(1547697, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(1547745, 'crypto', J$.F(1547737, J$.I(typeof require === 'undefined' ? require = J$.R(1547721, 'require', undefined, true, true) : require = J$.R(1547721, 'require', require, true, true)), false)(J$.T(1547729, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(1547777, 'errs', J$.F(1547769, J$.I(typeof require === 'undefined' ? require = J$.R(1547753, 'require', undefined, true, true) : require = J$.R(1547753, 'require', require, true, true)), false)(J$.T(1547761, './errors', 21, false)), errs, false, true);
            var utils = J$.W(1547809, 'utils', J$.F(1547801, J$.I(typeof require === 'undefined' ? require = J$.R(1547785, 'require', undefined, true, true) : require = J$.R(1547785, 'require', require, true, true)), false)(J$.T(1547793, './utils', 21, false)), utils, false, true);
            var asn1 = J$.W(1547841, 'asn1', J$.F(1547833, J$.I(typeof require === 'undefined' ? require = J$.R(1547817, 'require', undefined, true, true) : require = J$.R(1547817, 'require', require, true, true)), false)(J$.T(1547825, 'asn1', 21, false)), asn1, false, true);
            var SSHBuffer = J$.W(1547873, 'SSHBuffer', J$.F(1547865, J$.I(typeof require === 'undefined' ? require = J$.R(1547849, 'require', undefined, true, true) : require = J$.R(1547849, 'require', require, true, true)), false)(J$.T(1547857, './ssh-buffer', 21, false)), SSHBuffer, false, true);
            var InvalidAlgorithmError = J$.W(1547897, 'InvalidAlgorithmError', J$.G(1547889, J$.R(1547881, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var SignatureParseError = J$.W(1547921, 'SignatureParseError', J$.G(1547913, J$.R(1547905, 'errs', errs, false, true), 'SignatureParseError'), SignatureParseError, false, true);
            J$.P(1550529, J$.G(1548409, J$.R(1548401, 'Signature', Signature, false, true), 'prototype'), 'toBuffer', J$.T(1550521, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1550433, arguments.callee, this, arguments);
                            arguments = J$.N(1550441, 'arguments', arguments, true, false, false);
                            format = J$.N(1550449, 'format', format, true, false, false);
                            J$.N(1550457, 'buf', buf, false, false, false);
                            J$.N(1550465, 'stype', stype, false, false, false);
                            J$.N(1550473, 'r', r, false, false, false);
                            J$.N(1550481, 's', s, false, false, false);
                            J$.N(1550489, 'der', der, false, false, false);
                            J$.N(1550497, 'inner', inner, false, false, false);
                            J$.N(1550505, 'curve', curve, false, false, false);
                            J$.N(1550513, 'sz', sz, false, false, false);
                            if (J$.C(79584, J$.B(187314, '===', J$.R(1548417, 'format', format, false, false), J$.T(1548425, undefined, 24, false))))
                                format = J$.W(1548441, 'format', J$.T(1548433, 'asn1', 21, false), format, false, false);
                            J$.M(1548473, J$.R(1548449, 'assert', assert, false, true), 'string', false)(J$.R(1548457, 'format', format, false, false), J$.T(1548465, 'format', 21, false));
                            var buf;
                            var stype = J$.W(1548505, 'stype', J$.B(187322, '+', J$.T(1548481, 'ssh-', 21, false), J$.G(1548497, J$.R(1548489, 'this', this, false, false), 'type')), stype, false, false);
                            switch (J$.C1(79776, J$.G(1548521, J$.R(1548513, 'this', this, false, false), 'type'))) {
                            case J$.C2(79784, J$.T(1548841, 'rsa', 21, false)):
                                switch (J$.C1(79592, J$.G(1548537, J$.R(1548529, 'this', this, false, false), 'hashAlgorithm'))) {
                                case J$.C2(79600, J$.T(1548561, 'sha256', 21, false)):
                                    stype = J$.W(1548553, 'stype', J$.T(1548545, 'rsa-sha2-256', 21, false), stype, false, false);
                                    break;
                                case J$.C2(79608, J$.T(1548585, 'sha512', 21, false)):
                                    stype = J$.W(1548577, 'stype', J$.T(1548569, 'rsa-sha2-512', 21, false), stype, false, false);
                                    break;
                                case J$.C2(79616, J$.T(1548593, 'sha1', 21, false)):
                                case J$.C2(79624, J$.T(1548601, undefined, 24, false)):
                                    break;
                                default:
                                    throw J$.F(1548657, J$.I(typeof Error === 'undefined' ? Error = J$.R(1548609, 'Error', undefined, true, true) : Error = J$.R(1548609, 'Error', Error, true, true)), true)(J$.B(187346, '+', J$.B(187338, '+', J$.B(187330, '+', J$.T(1548617, 'SSH signature ', 21, false), J$.T(1548625, 'format does not support hash ', 21, false)), J$.T(1548633, 'algorithm ', 21, false)), J$.G(1548649, J$.R(1548641, 'this', this, false, false), 'hashAlgorithm')));
                                }
                                if (J$.C(79632, J$.B(187354, '===', J$.R(1548665, 'format', format, false, false), J$.T(1548673, 'ssh', 21, false)))) {
                                    buf = J$.W(1548705, 'buf', J$.F(1548697, J$.R(1548681, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1548689, {}, 11, false)), buf, false, false);
                                    J$.M(1548729, J$.R(1548713, 'buf', buf, false, false), 'writeString', false)(J$.R(1548721, 'stype', stype, false, false));
                                    J$.M(1548769, J$.R(1548737, 'buf', buf, false, false), 'writePart', false)(J$.G(1548761, J$.G(1548753, J$.R(1548745, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(1548793, J$.M(1548785, J$.R(1548777, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(1548833, J$.G(1548825, J$.G(1548817, J$.G(1548809, J$.R(1548801, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(79792, J$.T(1549025, 'ed25519', 21, false)):
                                if (J$.C(79640, J$.B(187362, '===', J$.R(1548849, 'format', format, false, false), J$.T(1548857, 'ssh', 21, false)))) {
                                    buf = J$.W(1548889, 'buf', J$.F(1548881, J$.R(1548865, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1548873, {}, 11, false)), buf, false, false);
                                    J$.M(1548913, J$.R(1548897, 'buf', buf, false, false), 'writeString', false)(J$.R(1548905, 'stype', stype, false, false));
                                    J$.M(1548953, J$.R(1548921, 'buf', buf, false, false), 'writePart', false)(J$.G(1548945, J$.G(1548937, J$.R(1548929, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(1548977, J$.M(1548969, J$.R(1548961, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(1549017, J$.G(1549009, J$.G(1549001, J$.G(1548993, J$.R(1548985, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(79800, J$.T(1549033, 'dsa', 21, false)):
                            case J$.C2(79808, J$.T(1550401, 'ecdsa', 21, false)):
                                var r, s;
                                if (J$.C(79768, J$.B(187370, '===', J$.R(1549041, 'format', format, false, false), J$.T(1549049, 'asn1', 21, false)))) {
                                    var der = J$.W(1549073, 'der', J$.M(1549065, J$.R(1549057, 'asn1', asn1, false, true), 'BerWriter', true)(), der, false, false);
                                    J$.M(1549089, J$.R(1549081, 'der', der, false, false), 'startSequence', false)();
                                    r = J$.W(1549145, 'r', J$.M(1549137, J$.R(1549097, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1549129, J$.G(1549121, J$.G(1549113, J$.R(1549105, 'this', this, false, false), 'part'), 'r'), 'data')), r, false, false);
                                    s = J$.W(1549201, 's', J$.M(1549193, J$.R(1549153, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(1549185, J$.G(1549177, J$.G(1549169, J$.R(1549161, 'this', this, false, false), 'part'), 's'), 'data')), s, false, false);
                                    J$.M(1549249, J$.R(1549209, 'der', der, false, false), 'writeBuffer', false)(J$.R(1549217, 'r', r, false, false), J$.G(1549241, J$.G(1549233, J$.R(1549225, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(1549297, J$.R(1549257, 'der', der, false, false), 'writeBuffer', false)(J$.R(1549265, 's', s, false, false), J$.G(1549289, J$.G(1549281, J$.R(1549273, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(1549313, J$.R(1549305, 'der', der, false, false), 'endSequence', false)();
                                    return J$.Rt(1549337, J$.G(1549329, J$.R(1549321, 'der', der, false, false), 'buffer'));
                                } else if (J$.C(79760, J$.C(79648, J$.B(187378, '===', J$.R(1549345, 'format', format, false, false), J$.T(1549353, 'ssh', 21, false))) ? J$.B(187386, '===', J$.G(1549369, J$.R(1549361, 'this', this, false, false), 'type'), J$.T(1549377, 'dsa', 21, false)) : J$._())) {
                                    buf = J$.W(1549409, 'buf', J$.F(1549401, J$.R(1549385, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1549393, {}, 11, false)), buf, false, false);
                                    J$.M(1549433, J$.R(1549417, 'buf', buf, false, false), 'writeString', false)(J$.T(1549425, 'ssh-dss', 21, false));
                                    r = J$.W(1549473, 'r', J$.G(1549465, J$.G(1549457, J$.G(1549449, J$.R(1549441, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    if (J$.C(79664, J$.C(79656, J$.B(187394, '>', J$.G(1549489, J$.R(1549481, 'r', r, false, false), 'length'), J$.T(1549497, 20, 22, false))) ? J$.B(187402, '===', J$.G(1549521, J$.R(1549505, 'r', r, false, false), J$.T(1549513, 0, 22, false)), J$.T(1549529, 0, 22, false)) : J$._()))
                                        r = J$.W(1549561, 'r', J$.M(1549553, J$.R(1549537, 'r', r, false, false), 'slice', false)(J$.T(1549545, 1, 22, false)), r, false, false);
                                    s = J$.W(1549601, 's', J$.G(1549593, J$.G(1549585, J$.G(1549577, J$.R(1549569, 'this', this, false, false), 'part'), 's'), 'data'), s, false, false);
                                    if (J$.C(79680, J$.C(79672, J$.B(187410, '>', J$.G(1549617, J$.R(1549609, 's', s, false, false), 'length'), J$.T(1549625, 20, 22, false))) ? J$.B(187418, '===', J$.G(1549649, J$.R(1549633, 's', s, false, false), J$.T(1549641, 0, 22, false)), J$.T(1549657, 0, 22, false)) : J$._()))
                                        s = J$.W(1549689, 's', J$.M(1549681, J$.R(1549665, 's', s, false, false), 'slice', false)(J$.T(1549673, 1, 22, false)), s, false, false);
                                    if (J$.C(79704, J$.C(79696, J$.C(79688, J$.G(1549705, J$.R(1549697, 'this', this, false, false), 'hashAlgorithm')) ? J$.B(187426, '!==', J$.G(1549721, J$.R(1549713, 'this', this, false, false), 'hashAlgorithm'), J$.T(1549729, 'sha1', 21, false)) : J$._()) ? J$._() : J$.B(187442, '!==', J$.B(187434, '+', J$.G(1549745, J$.R(1549737, 'r', r, false, false), 'length'), J$.G(1549761, J$.R(1549753, 's', s, false, false), 'length')), J$.T(1549769, 40, 22, false)))) {
                                        throw J$.F(1549801, J$.I(typeof Error === 'undefined' ? Error = J$.R(1549777, 'Error', undefined, true, true) : Error = J$.R(1549777, 'Error', Error, true, true)), true)(J$.B(187450, '+', J$.T(1549785, 'OpenSSH only supports ', 21, false), J$.T(1549793, 'DSA signatures with SHA1 hash', 21, false)));
                                    }
                                    J$.M(1549857, J$.R(1549809, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1549849, J$.R(1549817, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(1549841, [
                                        J$.R(1549825, 'r', r, false, false),
                                        J$.R(1549833, 's', s, false, false)
                                    ], 10, false)));
                                    return J$.Rt(1549881, J$.M(1549873, J$.R(1549865, 'buf', buf, false, false), 'toBuffer', false)());
                                } else if (J$.C(79752, J$.C(79712, J$.B(187458, '===', J$.R(1549889, 'format', format, false, false), J$.T(1549897, 'ssh', 21, false))) ? J$.B(187466, '===', J$.G(1549913, J$.R(1549905, 'this', this, false, false), 'type'), J$.T(1549921, 'ecdsa', 21, false)) : J$._())) {
                                    var inner = J$.W(1549953, 'inner', J$.F(1549945, J$.R(1549929, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1549937, {}, 11, false)), inner, false, false);
                                    r = J$.W(1549993, 'r', J$.G(1549985, J$.G(1549977, J$.G(1549969, J$.R(1549961, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    J$.M(1550017, J$.R(1550001, 'inner', inner, false, false), 'writeBuffer', false)(J$.R(1550009, 'r', r, false, false));
                                    J$.M(1550057, J$.R(1550025, 'inner', inner, false, false), 'writePart', false)(J$.G(1550049, J$.G(1550041, J$.R(1550033, 'this', this, false, false), 'part'), 's'));
                                    buf = J$.W(1550089, 'buf', J$.F(1550081, J$.R(1550065, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(1550073, {}, 11, false)), buf, false, false);
                                    var curve;
                                    if (J$.C(79720, J$.B(187474, '===', J$.G(1550113, J$.R(1550097, 'r', r, false, false), J$.T(1550105, 0, 22, false)), J$.T(1550121, 0, 22, false))))
                                        r = J$.W(1550153, 'r', J$.M(1550145, J$.R(1550129, 'r', r, false, false), 'slice', false)(J$.T(1550137, 1, 22, false)), r, false, false);
                                    var sz = J$.W(1550185, 'sz', J$.B(187482, '*', J$.G(1550169, J$.R(1550161, 'r', r, false, false), 'length'), J$.T(1550177, 8, 22, false)), sz, false, false);
                                    if (J$.C(79744, J$.B(187490, '===', J$.R(1550193, 'sz', sz, false, false), J$.T(1550201, 256, 22, false))))
                                        curve = J$.W(1550217, 'curve', J$.T(1550209, 'nistp256', 21, false), curve, false, false);
                                    else if (J$.C(79736, J$.B(187498, '===', J$.R(1550225, 'sz', sz, false, false), J$.T(1550233, 384, 22, false))))
                                        curve = J$.W(1550249, 'curve', J$.T(1550241, 'nistp384', 21, false), curve, false, false);
                                    else if (J$.C(79728, J$.B(187506, '===', J$.R(1550257, 'sz', sz, false, false), J$.T(1550265, 528, 22, false))))
                                        curve = J$.W(1550281, 'curve', J$.T(1550273, 'nistp521', 21, false), curve, false, false);
                                    J$.M(1550313, J$.R(1550289, 'buf', buf, false, false), 'writeString', false)(J$.B(187514, '+', J$.T(1550297, 'ecdsa-sha2-', 21, false), J$.R(1550305, 'curve', curve, false, false)));
                                    J$.M(1550345, J$.R(1550321, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(1550337, J$.R(1550329, 'inner', inner, false, false), 'toBuffer', false)());
                                    return J$.Rt(1550369, J$.M(1550361, J$.R(1550353, 'buf', buf, false, false), 'toBuffer', false)());
                                }
                                throw J$.F(1550393, J$.I(typeof Error === 'undefined' ? Error = J$.R(1550377, 'Error', undefined, true, true) : Error = J$.R(1550377, 'Error', Error, true, true)), true)(J$.T(1550385, 'Invalid signature format', 21, false));
                            default:
                                throw J$.F(1550425, J$.I(typeof Error === 'undefined' ? Error = J$.R(1550409, 'Error', undefined, true, true) : Error = J$.R(1550409, 'Error', Error, true, true)), true)(J$.T(1550417, 'Invalid signature data', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(1554585, J$e);
                        } finally {
                            if (J$.Fr(1554593))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1550665, J$.G(1550545, J$.R(1550537, 'Signature', Signature, false, true), 'prototype'), 'toString', J$.T(1550657, function (format) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(1550633, arguments.callee, this, arguments);
                            arguments = J$.N(1550641, 'arguments', arguments, true, false, false);
                            format = J$.N(1550649, 'format', format, true, false, false);
                            J$.M(1550577, J$.R(1550553, 'assert', assert, false, true), 'optionalString', false)(J$.R(1550561, 'format', format, false, false), J$.T(1550569, 'format', 21, false));
                            return J$.Rt(1550625, J$.M(1550617, J$.M(1550601, J$.R(1550585, 'this', this, false, false), 'toBuffer', false)(J$.R(1550593, 'format', format, false, false)), 'toString', false)(J$.T(1550609, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1554601, J$e);
                        } finally {
                            if (J$.Fr(1554609))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1551473, J$.R(1550673, 'Signature', Signature, false, true), 'parse', J$.T(1551465, function (data, type, format) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(1551417, arguments.callee, this, arguments);
                            arguments = J$.N(1551425, 'arguments', arguments, true, false, false);
                            data = J$.N(1551433, 'data', data, true, false, false);
                            type = J$.N(1551441, 'type', type, true, false, false);
                            format = J$.N(1551449, 'format', format, true, false, false);
                            J$.N(1551457, 'opts', opts, false, false, false);
                            if (J$.C(79816, J$.B(187530, '===', J$.U(187522, 'typeof', J$.R(1550681, 'data', data, false, false)), J$.T(1550689, 'string', 21, false))))
                                data = J$.W(1550729, 'data', J$.M(1550721, J$.R(1550697, 'Buffer', Buffer, false, true), 'from', false)(J$.R(1550705, 'data', data, false, false), J$.T(1550713, 'base64', 21, false)), data, false, false);
                            J$.M(1550761, J$.R(1550737, 'assert', assert, false, true), 'buffer', false)(J$.R(1550745, 'data', data, false, false), J$.T(1550753, 'data', 21, false));
                            J$.M(1550793, J$.R(1550769, 'assert', assert, false, true), 'string', false)(J$.R(1550777, 'format', format, false, false), J$.T(1550785, 'format', 21, false));
                            J$.M(1550825, J$.R(1550801, 'assert', assert, false, true), 'string', false)(J$.R(1550809, 'type', type, false, false), J$.T(1550817, 'type', 21, false));
                            var opts = J$.W(1550841, 'opts', J$.T(1550833, {}, 11, false), opts, false, false);
                            J$.P(1550873, J$.R(1550849, 'opts', opts, false, false), 'type', J$.M(1550865, J$.R(1550857, 'type', type, false, false), 'toLowerCase', false)());
                            J$.P(1550897, J$.R(1550881, 'opts', opts, false, false), 'parts', J$.T(1550889, [], 10, false));
                            try {
                                J$.M(1550945, J$.R(1550905, 'assert', assert, false, true), 'ok', false)(J$.B(187538, '>', J$.G(1550921, J$.R(1550913, 'data', data, false, false), 'length'), J$.T(1550929, 0, 22, false)), J$.T(1550937, 'signature must not be empty', 21, false));
                                switch (J$.C1(79840, J$.G(1550961, J$.R(1550953, 'opts', opts, false, false), 'type'))) {
                                case J$.C2(79848, J$.T(1551025, 'rsa', 21, false)):
                                    return J$.Rt(1551017, J$.F(1551009, J$.R(1550969, 'parseOneNum', parseOneNum, false, true), false)(J$.R(1550977, 'data', data, false, false), J$.R(1550985, 'type', type, false, false), J$.R(1550993, 'format', format, false, false), J$.R(1551001, 'opts', opts, false, false)));
                                case J$.C2(79856, J$.T(1551089, 'ed25519', 21, false)):
                                    return J$.Rt(1551081, J$.F(1551073, J$.R(1551033, 'parseOneNum', parseOneNum, false, true), false)(J$.R(1551041, 'data', data, false, false), J$.R(1551049, 'type', type, false, false), J$.R(1551057, 'format', format, false, false), J$.R(1551065, 'opts', opts, false, false)));
                                case J$.C2(79864, J$.T(1551097, 'dsa', 21, false)):
                                case J$.C2(79872, J$.T(1551313, 'ecdsa', 21, false)):
                                    if (J$.C(79832, J$.B(187546, '===', J$.R(1551105, 'format', format, false, false), J$.T(1551113, 'asn1', 21, false))))
                                        return J$.Rt(1551169, J$.F(1551161, J$.R(1551121, 'parseDSAasn1', parseDSAasn1, false, true), false)(J$.R(1551129, 'data', data, false, false), J$.R(1551137, 'type', type, false, false), J$.R(1551145, 'format', format, false, false), J$.R(1551153, 'opts', opts, false, false)));
                                    else if (J$.C(79824, J$.B(187554, '===', J$.G(1551185, J$.R(1551177, 'opts', opts, false, false), 'type'), J$.T(1551193, 'dsa', 21, false))))
                                        return J$.Rt(1551249, J$.F(1551241, J$.R(1551201, 'parseDSA', parseDSA, false, true), false)(J$.R(1551209, 'data', data, false, false), J$.R(1551217, 'type', type, false, false), J$.R(1551225, 'format', format, false, false), J$.R(1551233, 'opts', opts, false, false)));
                                    else
                                        return J$.Rt(1551305, J$.F(1551297, J$.R(1551257, 'parseECDSA', parseECDSA, false, true), false)(J$.R(1551265, 'data', data, false, false), J$.R(1551273, 'type', type, false, false), J$.R(1551281, 'format', format, false, false), J$.R(1551289, 'opts', opts, false, false)));
                                default:
                                    throw J$.F(1551337, J$.R(1551321, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(1551329, 'type', type, false, false));
                                }
                            } catch (e) {
                                J$.N(1551409, 'e', e, false, false, true);
                                if (J$.C(79880, J$.B(187562, 'instanceof', J$.R(1551345, 'e', e, false, false), J$.R(1551353, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true))))
                                    throw J$.R(1551361, 'e', e, false, false);
                                throw J$.F(1551401, J$.R(1551369, 'SignatureParseError', SignatureParseError, false, true), true)(J$.R(1551377, 'type', type, false, false), J$.R(1551385, 'format', format, false, false), J$.R(1551393, 'e', e, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(1554617, J$e);
                        } finally {
                            if (J$.Fr(1554625))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1554177, J$.R(1554081, 'Signature', Signature, false, true), 'isSignature', J$.T(1554169, function (obj, ver) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1554137, arguments.callee, this, arguments);
                            arguments = J$.N(1554145, 'arguments', arguments, true, false, false);
                            obj = J$.N(1554153, 'obj', obj, true, false, false);
                            ver = J$.N(1554161, 'ver', ver, true, false, false);
                            return J$.Rt(1554129, J$.M(1554121, J$.R(1554089, 'utils', utils, false, true), 'isCompatible', false)(J$.R(1554097, 'obj', obj, false, false), J$.R(1554105, 'Signature', Signature, false, true), J$.R(1554113, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(1554697, J$e);
                        } finally {
                            if (J$.Fr(1554705))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(1554225, J$.G(1554193, J$.R(1554185, 'Signature', Signature, false, true), 'prototype'), '_sshpkApiVersion', J$.T(1554217, [
                J$.T(1554201, 2, 22, false),
                J$.T(1554209, 1, 22, false)
            ], 10, false));
            J$.P(1554393, J$.R(1554233, 'Signature', Signature, false, true), '_oldVersionDetect', J$.T(1554385, function (obj) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(1554361, arguments.callee, this, arguments);
                            arguments = J$.N(1554369, 'arguments', arguments, true, false, false);
                            obj = J$.N(1554377, 'obj', obj, true, false, false);
                            J$.M(1554265, J$.R(1554241, 'assert', assert, false, true), 'func', false)(J$.G(1554257, J$.R(1554249, 'obj', obj, false, false), 'toBuffer'));
                            if (J$.C(80000, J$.M(1554289, J$.R(1554273, 'obj', obj, false, false), 'hasOwnProperty', false)(J$.T(1554281, 'hashAlgorithm', 21, false))))
                                return J$.Rt(1554321, J$.T(1554313, [
                                    J$.T(1554297, 2, 22, false),
                                    J$.T(1554305, 0, 22, false)
                                ], 10, false));
                            return J$.Rt(1554353, J$.T(1554345, [
                                J$.T(1554329, 1, 22, false),
                                J$.T(1554337, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(1554713, J$e);
                        } finally {
                            if (J$.Fr(1554721))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(1554729, J$e);
        } finally {
            if (J$.Sr(1554737))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

