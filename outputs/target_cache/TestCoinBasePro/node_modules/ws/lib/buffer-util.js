J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(2085745, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCoinBasePro/node_modules/ws/lib/buffer-util.js');
            J$.N(2085753, 'safeBuffer', safeBuffer, false, false, false);
            J$.N(2085761, 'Buffer', Buffer, false, false, false);
            J$.N(2085769, 'concat', concat, false, false, false);
            J$.N(2085777, 'bufferUtil', bufferUtil, false, false, false);
            J$.N(2085785, 'mask', mask, false, false, false);
            J$.N(2085793, 'unmask', unmask, false, false, false);
            J$.T(2084793, 'use strict', 21, false);
            J$.F(2084817, J$.I(typeof require === 'undefined' ? require = J$.R(2084801, 'require', undefined, true, true) : require = J$.R(2084801, 'require', require, true, true)), false)(J$.T(2084809, 'core-js/modules/es.object.assign', 21, false));
            var safeBuffer = J$.W(2084849, 'safeBuffer', J$.F(2084841, J$.I(typeof require === 'undefined' ? require = J$.R(2084825, 'require', undefined, true, true) : require = J$.R(2084825, 'require', require, true, true)), false)(J$.T(2084833, 'safe-buffer', 21, false)), safeBuffer, false, true);
            var Buffer = J$.W(2084873, 'Buffer', J$.G(2084865, J$.R(2084857, 'safeBuffer', safeBuffer, false, true), 'Buffer'), Buffer, false, true);
            var concat = J$.W(2085169, 'concat', J$.T(2085161, function concat(list, totalLength) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2085097, arguments.callee, this, arguments);
                            arguments = J$.N(2085105, 'arguments', arguments, true, false, false);
                            list = J$.N(2085113, 'list', list, true, false, false);
                            totalLength = J$.N(2085121, 'totalLength', totalLength, true, false, false);
                            J$.N(2085129, 'target', target, false, false, false);
                            J$.N(2085137, 'offset', offset, false, false, false);
                            J$.N(2085145, 'i', i, false, false, false);
                            J$.N(2085153, 'buf', buf, false, false, false);
                            var target = J$.W(2084905, 'target', J$.M(2084897, J$.R(2084881, 'Buffer', Buffer, false, true), 'allocUnsafe', false)(J$.R(2084889, 'totalLength', totalLength, false, false)), target, false, false);
                            var offset = J$.W(2084921, 'offset', J$.T(2084913, 0, 22, false), offset, false, false);
                            for (var i = J$.W(2084937, 'i', J$.T(2084929, 0, 22, false), i, false, false); J$.C(97832, J$.B(282058, '<', J$.R(2084945, 'i', i, false, false), J$.G(2084961, J$.R(2084953, 'list', list, false, false), 'length'))); J$.B(282082, '-', i = J$.W(2084977, 'i', J$.B(282074, '+', J$.U(282066, '+', J$.R(2084969, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var buf = J$.W(2085009, 'buf', J$.G(2085001, J$.R(2084985, 'list', list, false, false), J$.R(2084993, 'i', i, false, false)), buf, false, false);
                                J$.M(2085041, J$.R(2085017, 'buf', buf, false, false), 'copy', false)(J$.R(2085025, 'target', target, false, false), J$.R(2085033, 'offset', offset, false, false));
                                offset = J$.W(2085073, 'offset', J$.B(282090, '+', J$.R(2085065, 'offset', offset, false, false), J$.G(2085057, J$.R(2085049, 'buf', buf, false, false), 'length')), offset, false, false);
                            }
                            return J$.Rt(2085089, J$.R(2085081, 'target', target, false, false));
                        } catch (J$e) {
                            J$.Ex(2085801, J$e);
                        } finally {
                            if (J$.Fr(2085809))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), concat, false, true);
            try {
                var bufferUtil = J$.W(2085201, 'bufferUtil', J$.F(2085193, J$.I(typeof require === 'undefined' ? require = J$.R(2085177, 'require', undefined, true, true) : require = J$.R(2085177, 'require', require, true, true)), false)(J$.T(2085185, 'bufferutil', 21, false)), bufferUtil, false, true);
                J$.P(2085273, J$.I(typeof module === 'undefined' ? module = J$.R(2085209, 'module', undefined, true, true) : module = J$.R(2085209, 'module', module, true, true)), 'exports', J$.M(2085265, J$.I(typeof Object === 'undefined' ? Object = J$.R(2085217, 'Object', undefined, true, true) : Object = J$.R(2085217, 'Object', Object, true, true)), 'assign', false)(J$.T(2085233, { concat: J$.R(2085225, 'concat', concat, false, true) }, 11, false), J$.C(97840, J$.G(2085249, J$.R(2085241, 'bufferUtil', bufferUtil, false, true), 'BufferUtil')) ? J$._() : J$.R(2085257, 'bufferUtil', bufferUtil, false, true)));
            } catch (e) {
                J$.N(2085737, 'e', e, false, false, true);
                var mask = J$.W(2085489, 'mask', J$.T(2085481, function mask(source, _mask, output, offset, length) {
                    jalangiLabel1:
                        while (true) {
                            try {
                                J$.Fe(2085417, arguments.callee, this, arguments);
                                arguments = J$.N(2085425, 'arguments', arguments, true, false, false);
                                source = J$.N(2085433, 'source', source, true, false, false);
                                _mask = J$.N(2085441, '_mask', _mask, true, false, false);
                                output = J$.N(2085449, 'output', output, true, false, false);
                                offset = J$.N(2085457, 'offset', offset, true, false, false);
                                length = J$.N(2085465, 'length', length, true, false, false);
                                J$.N(2085473, 'i', i, false, false, false);
                                for (var i = J$.W(2085289, 'i', J$.T(2085281, 0, 22, false), i, false, false); J$.C(97848, J$.B(282098, '<', J$.R(2085297, 'i', i, false, false), J$.R(2085305, 'length', length, false, false))); J$.B(282122, '-', i = J$.W(2085321, 'i', J$.B(282114, '+', J$.U(282106, '+', J$.R(2085313, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    J$.P(2085409, J$.R(2085329, 'output', output, false, false), J$.B(282130, '+', J$.R(2085337, 'offset', offset, false, false), J$.R(2085345, 'i', i, false, false)), J$.B(282146, '^', J$.G(2085369, J$.R(2085353, 'source', source, false, false), J$.R(2085361, 'i', i, false, false)), J$.G(2085401, J$.R(2085377, '_mask', _mask, false, false), J$.B(282138, '&', J$.R(2085385, 'i', i, false, false), J$.T(2085393, 3, 22, false)))));
                                }
                            } catch (J$e) {
                                J$.Ex(2085817, J$e);
                            } finally {
                                if (J$.Fr(2085825))
                                    continue jalangiLabel1;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false), mask, false, true);
                var unmask = J$.W(2085681, 'unmask', J$.T(2085673, function unmask(buffer, mask) {
                    jalangiLabel2:
                        while (true) {
                            try {
                                J$.Fe(2085625, arguments.callee, this, arguments);
                                arguments = J$.N(2085633, 'arguments', arguments, true, false, false);
                                buffer = J$.N(2085641, 'buffer', buffer, true, false, false);
                                mask = J$.N(2085649, 'mask', mask, true, false, false);
                                J$.N(2085657, 'length', length, false, false, false);
                                J$.N(2085665, 'i', i, false, false, false);
                                var length = J$.W(2085513, 'length', J$.G(2085505, J$.R(2085497, 'buffer', buffer, false, false), 'length'), length, false, false);
                                for (var i = J$.W(2085529, 'i', J$.T(2085521, 0, 22, false), i, false, false); J$.C(97856, J$.B(282154, '<', J$.R(2085537, 'i', i, false, false), J$.R(2085545, 'length', length, false, false))); J$.B(282178, '-', i = J$.W(2085561, 'i', J$.B(282170, '+', J$.U(282162, '+', J$.R(2085553, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    J$.A(2085617, J$.R(2085569, 'buffer', buffer, false, false), J$.R(2085577, 'i', i, false, false), '^')(J$.G(2085609, J$.R(2085585, 'mask', mask, false, false), J$.B(282186, '&', J$.R(2085593, 'i', i, false, false), J$.T(2085601, 3, 22, false))));
                                }
                            } catch (J$e) {
                                J$.Ex(2085833, J$e);
                            } finally {
                                if (J$.Fr(2085841))
                                    continue jalangiLabel2;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false), unmask, false, true);
                J$.P(2085729, J$.I(typeof module === 'undefined' ? module = J$.R(2085689, 'module', undefined, true, true) : module = J$.R(2085689, 'module', module, true, true)), 'exports', J$.T(2085721, {
                    concat: J$.R(2085697, 'concat', concat, false, true),
                    mask: J$.R(2085705, 'mask', mask, false, true),
                    unmask: J$.R(2085713, 'unmask', unmask, false, true)
                }, 11, false));
            }
        } catch (J$e) {
            J$.Ex(2085849, J$e);
        } finally {
            if (J$.Sr(2085857))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

