J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(7353921, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/env-variable/test.js');
            J$.N(7353929, 'assume', assume, false, false, false);
            J$.N(7353937, 'env', env, false, false, false);
            const assume = J$.W(7352697, 'assume', J$.F(7352689, J$.I(typeof require === 'undefined' ? require = J$.R(7352673, 'require', undefined, true, true) : require = J$.R(7352673, 'require', require, true, true)), false)(J$.T(7352681, 'assume', 21, false)), assume, false, true);
            const env = J$.W(7352729, 'env', J$.F(7352721, J$.I(typeof require === 'undefined' ? require = J$.R(7352705, 'require', undefined, true, true) : require = J$.R(7352705, 'require', require, true, true)), false)(J$.T(7352713, './', 21, false)), env, false, true);
            J$.F(7353913, J$.I(typeof describe === 'undefined' ? describe = J$.R(7352737, 'describe', undefined, true, true) : describe = J$.R(7352737, 'describe', describe, true, true)), false)(J$.T(7352745, 'env-variable', 21, false), J$.T(7353905, function () {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(7353889, arguments.callee, this, arguments);
                            arguments = J$.N(7353897, 'arguments', arguments, true, false, false);
                            J$.F(7353105, J$.I(typeof it === 'undefined' ? it = J$.R(7352753, 'it', undefined, true, true) : it = J$.R(7352753, 'it', it, true, true)), false)(J$.T(7352761, 'merges with process.env as we are running on node', 21, false), J$.T(7353097, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(7353065, arguments.callee, this, arguments);
                                            arguments = J$.N(7353073, 'arguments', arguments, true, false, false);
                                            J$.N(7353081, 'data', data, false, false, false);
                                            J$.N(7353089, 'merged', merged, false, false, false);
                                            J$.P(7352793, J$.G(7352777, J$.I(typeof process === 'undefined' ? process = J$.R(7352769, 'process', undefined, true, true) : process = J$.R(7352769, 'process', process, true, true)), 'env'), 'TESTING_ENVS', J$.T(7352785, 'wat', 21, false));
                                            const data = J$.W(7352817, 'data', J$.F(7352809, J$.R(7352801, 'env', env, false, true), false)(), data, false, false);
                                            J$.M(7352865, J$.F(7352849, J$.R(7352825, 'assume', assume, false, true), false)(J$.G(7352841, J$.R(7352833, 'data', data, false, false), 'TESTING_ENVS')), 'equals', false)(J$.T(7352857, 'wat', 21, false));
                                            J$.M(7352921, J$.G(7352905, J$.F(7352897, J$.R(7352873, 'assume', assume, false, true), false)(J$.G(7352889, J$.R(7352881, 'data', data, false, false), 'foo')), 'is'), 'a', false)(J$.T(7352913, 'undefined', 21, false));
                                            const merged = J$.W(7352961, 'merged', J$.F(7352953, J$.R(7352929, 'env', env, false, true), false)(J$.T(7352945, { foo: J$.T(7352937, 'bar', 21, false) }, 11, false)), merged, false, false);
                                            J$.M(7353009, J$.F(7352993, J$.R(7352969, 'assume', assume, false, true), false)(J$.G(7352985, J$.R(7352977, 'merged', merged, false, false), 'TESTING_ENVS')), 'equals', false)(J$.T(7353001, 'wat', 21, false));
                                            J$.M(7353057, J$.F(7353041, J$.R(7353017, 'assume', assume, false, true), false)(J$.G(7353033, J$.R(7353025, 'merged', merged, false, false), 'foo')), 'equals', false)(J$.T(7353049, 'bar', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(7353945, J$e);
                                        } finally {
                                            if (J$.Fr(7353953))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(7353425, J$.I(typeof it === 'undefined' ? it = J$.R(7353113, 'it', undefined, true, true) : it = J$.R(7353113, 'it', it, true, true)), false)(J$.T(7353121, 'lowercases keys', 21, false), J$.T(7353417, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(7353393, arguments.callee, this, arguments);
                                            arguments = J$.N(7353401, 'arguments', arguments, true, false, false);
                                            J$.N(7353409, 'data', data, false, false, false);
                                            J$.P(7353153, J$.G(7353137, J$.I(typeof process === 'undefined' ? process = J$.R(7353129, 'process', undefined, true, true) : process = J$.R(7353129, 'process', process, true, true)), 'env'), 'UPPERCASE', J$.T(7353145, 'does NOT touch VALUES', 21, false));
                                            const data = J$.W(7353193, 'data', J$.F(7353185, J$.R(7353161, 'env', env, false, true), false)(J$.T(7353177, { FOO: J$.T(7353169, 'bar', 21, false) }, 11, false)), data, false, false);
                                            J$.M(7353241, J$.F(7353225, J$.R(7353201, 'assume', assume, false, true), false)(J$.G(7353217, J$.R(7353209, 'data', data, false, false), 'UPPERCASE')), 'equals', false)(J$.T(7353233, 'does NOT touch VALUES', 21, false));
                                            J$.M(7353289, J$.F(7353273, J$.R(7353249, 'assume', assume, false, true), false)(J$.G(7353265, J$.R(7353257, 'data', data, false, false), 'uppercase')), 'equals', false)(J$.T(7353281, 'does NOT touch VALUES', 21, false));
                                            J$.M(7353337, J$.F(7353321, J$.R(7353297, 'assume', assume, false, true), false)(J$.G(7353313, J$.R(7353305, 'data', data, false, false), 'FOO')), 'equals', false)(J$.T(7353329, 'bar', 21, false));
                                            J$.M(7353385, J$.F(7353369, J$.R(7353345, 'assume', assume, false, true), false)(J$.G(7353361, J$.R(7353353, 'data', data, false, false), 'foo')), 'equals', false)(J$.T(7353377, 'bar', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(7353961, J$e);
                                        } finally {
                                            if (J$.Fr(7353969))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(7353641, J$.I(typeof describe === 'undefined' ? describe = J$.R(7353433, 'describe', undefined, true, true) : describe = J$.R(7353433, 'describe', describe, true, true)), false)(J$.T(7353441, '#merge', 21, false), J$.T(7353633, function () {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(7353617, arguments.callee, this, arguments);
                                            arguments = J$.N(7353625, 'arguments', arguments, true, false, false);
                                            J$.F(7353609, J$.I(typeof it === 'undefined' ? it = J$.R(7353449, 'it', undefined, true, true) : it = J$.R(7353449, 'it', it, true, true)), false)(J$.T(7353457, 'merges objects', 21, false), J$.T(7353601, function () {
                                                jalangiLabel2:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(7353577, arguments.callee, this, arguments);
                                                            arguments = J$.N(7353585, 'arguments', arguments, true, false, false);
                                                            J$.N(7353593, 'data', data, false, false, false);
                                                            const data = J$.W(7353473, 'data', J$.T(7353465, {}, 11, false), data, false, false);
                                                            J$.M(7353513, J$.R(7353481, 'env', env, false, true), 'merge', false)(J$.R(7353489, 'data', data, false, false), J$.T(7353505, { foo: J$.T(7353497, 'bar', 21, false) }, 11, false));
                                                            J$.M(7353569, J$.G(7353545, J$.F(7353537, J$.R(7353521, 'assume', assume, false, true), false)(J$.R(7353529, 'data', data, false, false)), 'deep'), 'equals', false)(J$.T(7353561, { foo: J$.T(7353553, 'bar', 21, false) }, 11, false));
                                                        } catch (J$e) {
                                                            J$.Ex(7353977, J$e);
                                                        } finally {
                                                            if (J$.Fr(7353985))
                                                                continue jalangiLabel2;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(7353993, J$e);
                                        } finally {
                                            if (J$.Fr(7354001))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(7353881, J$.I(typeof describe === 'undefined' ? describe = J$.R(7353649, 'describe', undefined, true, true) : describe = J$.R(7353649, 'describe', describe, true, true)), false)(J$.T(7353657, '#parse', 21, false), J$.T(7353873, function () {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(7353857, arguments.callee, this, arguments);
                                            arguments = J$.N(7353865, 'arguments', arguments, true, false, false);
                                            J$.F(7353849, J$.I(typeof it === 'undefined' ? it = J$.R(7353665, 'it', undefined, true, true) : it = J$.R(7353665, 'it', it, true, true)), false)(J$.T(7353673, 'parses basic query strings', 21, false), J$.T(7353841, function () {
                                                jalangiLabel4:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(7353817, arguments.callee, this, arguments);
                                                            arguments = J$.N(7353825, 'arguments', arguments, true, false, false);
                                                            J$.N(7353833, 'data', data, false, false, false);
                                                            const data = J$.W(7353705, 'data', J$.M(7353697, J$.R(7353681, 'env', env, false, true), 'parse', false)(J$.T(7353689, 'foo=bar', 21, false)), data, false, false);
                                                            J$.M(7353753, J$.G(7353737, J$.F(7353729, J$.R(7353713, 'assume', assume, false, true), false)(J$.R(7353721, 'data', data, false, false)), 'is'), 'a', false)(J$.T(7353745, 'object', 21, false));
                                                            J$.M(7353809, J$.G(7353785, J$.F(7353777, J$.R(7353761, 'assume', assume, false, true), false)(J$.R(7353769, 'data', data, false, false)), 'deep'), 'equals', false)(J$.T(7353801, { foo: J$.T(7353793, 'bar', 21, false) }, 11, false));
                                                        } catch (J$e) {
                                                            J$.Ex(7354009, J$e);
                                                        } finally {
                                                            if (J$.Fr(7354017))
                                                                continue jalangiLabel4;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(7354025, J$e);
                                        } finally {
                                            if (J$.Fr(7354033))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7354041, J$e);
                        } finally {
                            if (J$.Fr(7354049))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(7354057, J$e);
        } finally {
            if (J$.Sr(7354065))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

