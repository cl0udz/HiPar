J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(7464993, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/http-signature/lib/utils.js');
            function HttpSignatureError(message, caller) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7463865, arguments.callee, this, arguments);
                            arguments = J$.N(7463873, 'arguments', arguments, true, false, false);
                            message = J$.N(7463881, 'message', message, true, false, false);
                            caller = J$.N(7463889, 'caller', caller, true, false, false);
                            if (J$.C(396944, J$.G(7463761, J$.I(typeof Error === 'undefined' ? Error = J$.R(7463753, 'Error', undefined, true, true) : Error = J$.R(7463753, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(7463801, J$.I(typeof Error === 'undefined' ? Error = J$.R(7463769, 'Error', undefined, true, true) : Error = J$.R(7463769, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(7463777, 'this', this, false, false), J$.C(396936, J$.R(7463785, 'caller', caller, false, false)) ? J$._() : J$.R(7463793, 'HttpSignatureError', HttpSignatureError, false, true));
                            J$.P(7463825, J$.R(7463809, 'this', this, false, false), 'message', J$.R(7463817, 'message', message, false, false));
                            J$.P(7463857, J$.R(7463833, 'this', this, false, false), 'name', J$.G(7463849, J$.R(7463841, 'caller', caller, false, false), 'name'));
                        } catch (J$e) {
                            J$.Ex(7465089, J$e);
                        } finally {
                            if (J$.Fr(7465097))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function InvalidAlgorithmError(message) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7463969, arguments.callee, this, arguments);
                            arguments = J$.N(7463977, 'arguments', arguments, true, false, false);
                            message = J$.N(7463985, 'message', message, true, false, false);
                            J$.M(7463961, J$.R(7463929, 'HttpSignatureError', HttpSignatureError, false, true), 'call', false)(J$.R(7463937, 'this', this, false, false), J$.R(7463945, 'message', message, false, false), J$.R(7463953, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true));
                        } catch (J$e) {
                            J$.Ex(7465105, J$e);
                        } finally {
                            if (J$.Fr(7465113))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateAlgorithm(algorithm) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7464409, arguments.callee, this, arguments);
                            arguments = J$.N(7464417, 'arguments', arguments, true, false, false);
                            algorithm = J$.N(7464425, 'algorithm', algorithm, true, false, false);
                            J$.N(7464433, 'alg', alg, false, false, false);
                            var alg = J$.W(7464057, 'alg', J$.M(7464049, J$.M(7464033, J$.R(7464025, 'algorithm', algorithm, false, false), 'toLowerCase', false)(), 'split', false)(J$.T(7464041, '-', 21, false)), alg, false, false);
                            if (J$.C(396952, J$.B(743210, '!==', J$.G(7464073, J$.R(7464065, 'alg', alg, false, false), 'length'), J$.T(7464081, 2, 22, false)))) {
                                throw J$.F(7464145, J$.R(7464089, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.B(743226, '+', J$.B(743218, '+', J$.M(7464121, J$.G(7464113, J$.R(7464097, 'alg', alg, false, false), J$.T(7464105, 0, 22, false)), 'toUpperCase', false)(), J$.T(7464129, ' is not a ', 21, false)), J$.T(7464137, 'valid algorithm', 21, false)));
                            }
                            if (J$.C(396968, J$.C(396960, J$.B(743234, '!==', J$.G(7464169, J$.R(7464153, 'alg', alg, false, false), J$.T(7464161, 0, 22, false)), J$.T(7464177, 'hmac', 21, false))) ? J$.U(743242, '!', J$.G(7464217, J$.R(7464185, 'PK_ALGOS', PK_ALGOS, false, true), J$.G(7464209, J$.R(7464193, 'alg', alg, false, false), J$.T(7464201, 0, 22, false)))) : J$._())) {
                                throw J$.F(7464281, J$.R(7464225, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.B(743258, '+', J$.B(743250, '+', J$.M(7464257, J$.G(7464249, J$.R(7464233, 'alg', alg, false, false), J$.T(7464241, 0, 22, false)), 'toUpperCase', false)(), J$.T(7464265, ' type keys ', 21, false)), J$.T(7464273, 'are not supported', 21, false)));
                            }
                            if (J$.C(396976, J$.U(743266, '!', J$.G(7464321, J$.R(7464289, 'HASH_ALGOS', HASH_ALGOS, false, true), J$.G(7464313, J$.R(7464297, 'alg', alg, false, false), J$.T(7464305, 1, 22, false)))))) {
                                throw J$.F(7464385, J$.R(7464329, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.B(743282, '+', J$.B(743274, '+', J$.M(7464361, J$.G(7464353, J$.R(7464337, 'alg', alg, false, false), J$.T(7464345, 1, 22, false)), 'toUpperCase', false)(), J$.T(7464369, ' is not a ', 21, false)), J$.T(7464377, 'supported hash algorithm', 21, false)));
                            }
                            return J$.Rt(7464401, J$.R(7464393, 'alg', alg, false, false));
                        } catch (J$e) {
                            J$.Ex(7465121, J$e);
                        } finally {
                            if (J$.Fr(7465129))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7465001, 'assert', assert, false, false, false);
            J$.N(7465009, 'sshpk', sshpk, false, false, false);
            J$.N(7465017, 'util', util, false, false, false);
            J$.N(7465025, 'HASH_ALGOS', HASH_ALGOS, false, false, false);
            J$.N(7465033, 'PK_ALGOS', PK_ALGOS, false, false, false);
            HttpSignatureError = J$.N(7465049, 'HttpSignatureError', J$.T(7465041, HttpSignatureError, 12, false), true, false, false);
            InvalidAlgorithmError = J$.N(7465065, 'InvalidAlgorithmError', J$.T(7465057, InvalidAlgorithmError, 12, false), true, false, false);
            validateAlgorithm = J$.N(7465081, 'validateAlgorithm', J$.T(7465073, validateAlgorithm, 12, false), true, false, false);
            var assert = J$.W(7463601, 'assert', J$.F(7463593, J$.I(typeof require === 'undefined' ? require = J$.R(7463577, 'require', undefined, true, true) : require = J$.R(7463577, 'require', require, true, true)), false)(J$.T(7463585, 'assert-plus', 21, false)), assert, false, true);
            var sshpk = J$.W(7463633, 'sshpk', J$.F(7463625, J$.I(typeof require === 'undefined' ? require = J$.R(7463609, 'require', undefined, true, true) : require = J$.R(7463609, 'require', require, true, true)), false)(J$.T(7463617, 'sshpk', 21, false)), sshpk, false, true);
            var util = J$.W(7463665, 'util', J$.F(7463657, J$.I(typeof require === 'undefined' ? require = J$.R(7463641, 'require', undefined, true, true) : require = J$.R(7463641, 'require', require, true, true)), false)(J$.T(7463649, 'util', 21, false)), util, false, true);
            var HASH_ALGOS = J$.W(7463705, 'HASH_ALGOS', J$.T(7463697, {
                'sha1': J$.T(7463673, true, 23, false),
                'sha256': J$.T(7463681, true, 23, false),
                'sha512': J$.T(7463689, true, 23, false)
            }, 11, false), HASH_ALGOS, false, true);
            var PK_ALGOS = J$.W(7463745, 'PK_ALGOS', J$.T(7463737, {
                'rsa': J$.T(7463713, true, 23, false),
                'dsa': J$.T(7463721, true, 23, false),
                'ecdsa': J$.T(7463729, true, 23, false)
            }, 11, false), PK_ALGOS, false, true);
            J$.M(7463921, J$.R(7463897, 'util', util, false, true), 'inherits', false)(J$.R(7463905, 'HttpSignatureError', HttpSignatureError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(7463913, 'Error', undefined, true, true) : Error = J$.R(7463913, 'Error', Error, true, true)));
            J$.M(7464017, J$.R(7463993, 'util', util, false, true), 'inherits', false)(J$.R(7464001, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), J$.R(7464009, 'HttpSignatureError', HttpSignatureError, false, true));
            J$.P(7464985, J$.I(typeof module === 'undefined' ? module = J$.R(7464441, 'module', undefined, true, true) : module = J$.R(7464441, 'module', module, true, true)), 'exports', J$.T(7464977, {
                HASH_ALGOS: J$.R(7464449, 'HASH_ALGOS', HASH_ALGOS, false, true),
                PK_ALGOS: J$.R(7464457, 'PK_ALGOS', PK_ALGOS, false, true),
                HttpSignatureError: J$.R(7464465, 'HttpSignatureError', HttpSignatureError, false, true),
                InvalidAlgorithmError: J$.R(7464473, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true),
                validateAlgorithm: J$.R(7464481, 'validateAlgorithm', validateAlgorithm, false, true),
                sshKeyToPEM: J$.T(7464625, function sshKeyToPEM(key) {
                    jalangiLabel3:
                        while (true) {
                            try {
                                J$.Fe(7464593, arguments.callee, this, arguments);
                                arguments = J$.N(7464601, 'arguments', arguments, true, false, false);
                                key = J$.N(7464609, 'key', key, true, false, false);
                                J$.N(7464617, 'k', k, false, false, false);
                                J$.M(7464513, J$.R(7464489, 'assert', assert, false, true), 'string', false)(J$.R(7464497, 'key', key, false, false), J$.T(7464505, 'ssh_key', 21, false));
                                var k = J$.W(7464553, 'k', J$.M(7464545, J$.R(7464521, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(7464529, 'key', key, false, false), J$.T(7464537, 'ssh', 21, false)), k, false, false);
                                return J$.Rt(7464585, J$.M(7464577, J$.R(7464561, 'k', k, false, false), 'toString', false)(J$.T(7464569, 'pem', 21, false)));
                            } catch (J$e) {
                                J$.Ex(7465137, J$e);
                            } finally {
                                if (J$.Fr(7465145))
                                    continue jalangiLabel3;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false),
                fingerprint: J$.T(7464785, function fingerprint(key) {
                    jalangiLabel4:
                        while (true) {
                            try {
                                J$.Fe(7464753, arguments.callee, this, arguments);
                                arguments = J$.N(7464761, 'arguments', arguments, true, false, false);
                                key = J$.N(7464769, 'key', key, true, false, false);
                                J$.N(7464777, 'k', k, false, false, false);
                                J$.M(7464657, J$.R(7464633, 'assert', assert, false, true), 'string', false)(J$.R(7464641, 'key', key, false, false), J$.T(7464649, 'ssh_key', 21, false));
                                var k = J$.W(7464697, 'k', J$.M(7464689, J$.R(7464665, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(7464673, 'key', key, false, false), J$.T(7464681, 'ssh', 21, false)), k, false, false);
                                return J$.Rt(7464745, J$.M(7464737, J$.M(7464721, J$.R(7464705, 'k', k, false, false), 'fingerprint', false)(J$.T(7464713, 'md5', 21, false)), 'toString', false)(J$.T(7464729, 'hex', 21, false)));
                            } catch (J$e) {
                                J$.Ex(7465153, J$e);
                            } finally {
                                if (J$.Fr(7465161))
                                    continue jalangiLabel4;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false),
                pemToRsaSSHKey: J$.T(7464969, function pemToRsaSSHKey(pem, comment) {
                    jalangiLabel5:
                        while (true) {
                            try {
                                J$.Fe(7464929, arguments.callee, this, arguments);
                                arguments = J$.N(7464937, 'arguments', arguments, true, false, false);
                                pem = J$.N(7464945, 'pem', pem, true, false, false);
                                comment = J$.N(7464953, 'comment', comment, true, false, false);
                                J$.N(7464961, 'k', k, false, false, false);
                                J$.M(7464825, J$.R(7464793, 'assert', assert, false, true), 'equal', false)(J$.T(7464801, 'string', 21, false), J$.U(743290, 'typeof', J$.R(7464809, 'pem', pem, false, false)), J$.T(7464817, 'typeof pem', 21, false));
                                var k = J$.W(7464865, 'k', J$.M(7464857, J$.R(7464833, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(7464841, 'pem', pem, false, false), J$.T(7464849, 'pem', 21, false)), k, false, false);
                                J$.P(7464889, J$.R(7464873, 'k', k, false, false), 'comment', J$.R(7464881, 'comment', comment, false, false));
                                return J$.Rt(7464921, J$.M(7464913, J$.R(7464897, 'k', k, false, false), 'toString', false)(J$.T(7464905, 'ssh', 21, false)));
                            } catch (J$e) {
                                J$.Ex(7465169, J$e);
                            } finally {
                                if (J$.Fr(7465177))
                                    continue jalangiLabel5;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(7465185, J$e);
        } finally {
            if (J$.Sr(7465193))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

