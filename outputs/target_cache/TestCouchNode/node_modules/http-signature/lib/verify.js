J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(7466713, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/http-signature/lib/verify.js');
            J$.N(7466721, 'assert', assert, false, false, false);
            J$.N(7466729, 'crypto', crypto, false, false, false);
            J$.N(7466737, 'sshpk', sshpk, false, false, false);
            J$.N(7466745, 'utils', utils, false, false, false);
            J$.N(7466753, 'HASH_ALGOS', HASH_ALGOS, false, false, false);
            J$.N(7466761, 'PK_ALGOS', PK_ALGOS, false, false, false);
            J$.N(7466769, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(7466777, 'HttpSignatureError', HttpSignatureError, false, false, false);
            J$.N(7466785, 'validateAlgorithm', validateAlgorithm, false, false, false);
            var assert = J$.W(7465225, 'assert', J$.F(7465217, J$.I(typeof require === 'undefined' ? require = J$.R(7465201, 'require', undefined, true, true) : require = J$.R(7465201, 'require', require, true, true)), false)(J$.T(7465209, 'assert-plus', 21, false)), assert, false, true);
            var crypto = J$.W(7465257, 'crypto', J$.F(7465249, J$.I(typeof require === 'undefined' ? require = J$.R(7465233, 'require', undefined, true, true) : require = J$.R(7465233, 'require', require, true, true)), false)(J$.T(7465241, 'crypto', 21, false)), crypto, false, true);
            var sshpk = J$.W(7465289, 'sshpk', J$.F(7465281, J$.I(typeof require === 'undefined' ? require = J$.R(7465265, 'require', undefined, true, true) : require = J$.R(7465265, 'require', require, true, true)), false)(J$.T(7465273, 'sshpk', 21, false)), sshpk, false, true);
            var utils = J$.W(7465321, 'utils', J$.F(7465313, J$.I(typeof require === 'undefined' ? require = J$.R(7465297, 'require', undefined, true, true) : require = J$.R(7465297, 'require', require, true, true)), false)(J$.T(7465305, './utils', 21, false)), utils, false, true);
            var HASH_ALGOS = J$.W(7465345, 'HASH_ALGOS', J$.G(7465337, J$.R(7465329, 'utils', utils, false, true), 'HASH_ALGOS'), HASH_ALGOS, false, true);
            var PK_ALGOS = J$.W(7465369, 'PK_ALGOS', J$.G(7465361, J$.R(7465353, 'utils', utils, false, true), 'PK_ALGOS'), PK_ALGOS, false, true);
            var InvalidAlgorithmError = J$.W(7465393, 'InvalidAlgorithmError', J$.G(7465385, J$.R(7465377, 'utils', utils, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var HttpSignatureError = J$.W(7465417, 'HttpSignatureError', J$.G(7465409, J$.R(7465401, 'utils', utils, false, true), 'HttpSignatureError'), HttpSignatureError, false, true);
            var validateAlgorithm = J$.W(7465441, 'validateAlgorithm', J$.G(7465433, J$.R(7465425, 'utils', utils, false, true), 'validateAlgorithm'), validateAlgorithm, false, true);
            J$.P(7466705, J$.I(typeof module === 'undefined' ? module = J$.R(7465449, 'module', undefined, true, true) : module = J$.R(7465449, 'module', module, true, true)), 'exports', J$.T(7466697, {
                verifySignature: J$.T(7465953, function verifySignature(parsedSignature, pubkey) {
                    jalangiLabel0:
                        while (true) {
                            try {
                                J$.Fe(7465905, arguments.callee, this, arguments);
                                arguments = J$.N(7465913, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(7465921, 'parsedSignature', parsedSignature, true, false, false);
                                pubkey = J$.N(7465929, 'pubkey', pubkey, true, false, false);
                                J$.N(7465937, 'alg', alg, false, false, false);
                                J$.N(7465945, 'v', v, false, false, false);
                                J$.M(7465481, J$.R(7465457, 'assert', assert, false, true), 'object', false)(J$.R(7465465, 'parsedSignature', parsedSignature, false, false), J$.T(7465473, 'parsedSignature', 21, false));
                                if (J$.C(396992, J$.C(396984, J$.B(743306, '===', J$.U(743298, 'typeof', J$.R(7465489, 'pubkey', pubkey, false, false)), J$.T(7465497, 'string', 21, false))) ? J$._() : J$.M(7465521, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(7465505, 'Buffer', undefined, true, true) : Buffer = J$.R(7465505, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(7465513, 'pubkey', pubkey, false, false))))
                                    pubkey = J$.W(7465553, 'pubkey', J$.M(7465545, J$.R(7465529, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(7465537, 'pubkey', pubkey, false, false)), pubkey, false, false);
                                J$.M(7465633, J$.R(7465561, 'assert', assert, false, true), 'ok', false)(J$.M(7465617, J$.G(7465577, J$.R(7465569, 'sshpk', sshpk, false, true), 'Key'), 'isKey', false)(J$.R(7465585, 'pubkey', pubkey, false, false), J$.T(7465609, [
                                    J$.T(7465593, 1, 22, false),
                                    J$.T(7465601, 1, 22, false)
                                ], 10, false)), J$.T(7465625, 'pubkey must be a sshpk.Key', 21, false));
                                var alg = J$.W(7465673, 'alg', J$.F(7465665, J$.R(7465641, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(7465657, J$.R(7465649, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(397008, J$.C(397000, J$.B(743314, '===', J$.G(7465697, J$.R(7465681, 'alg', alg, false, false), J$.T(7465689, 0, 22, false)), J$.T(7465705, 'hmac', 21, false))) ? J$._() : J$.B(743322, '!==', J$.G(7465729, J$.R(7465713, 'alg', alg, false, false), J$.T(7465721, 0, 22, false)), J$.G(7465745, J$.R(7465737, 'pubkey', pubkey, false, false), 'type'))))
                                    return J$.Rt(7465761, J$.T(7465753, false, 23, false));
                                var v = J$.W(7465809, 'v', J$.M(7465801, J$.R(7465769, 'pubkey', pubkey, false, false), 'createVerify', false)(J$.G(7465793, J$.R(7465777, 'alg', alg, false, false), J$.T(7465785, 1, 22, false))), v, false, false);
                                J$.M(7465841, J$.R(7465817, 'v', v, false, false), 'update', false)(J$.G(7465833, J$.R(7465825, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                return J$.Rt(7465897, J$.M(7465889, J$.R(7465849, 'v', v, false, false), 'verify', false)(J$.G(7465873, J$.G(7465865, J$.R(7465857, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(7465881, 'base64', 21, false)));
                            } catch (J$e) {
                                J$.Ex(7466793, J$e);
                            } finally {
                                if (J$.Fr(7466801))
                                    continue jalangiLabel0;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false),
                verifyHMAC: J$.T(7466689, function verifyHMAC(parsedSignature, secret) {
                    jalangiLabel1:
                        while (true) {
                            try {
                                J$.Fe(7466617, arguments.callee, this, arguments);
                                arguments = J$.N(7466625, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(7466633, 'parsedSignature', parsedSignature, true, false, false);
                                secret = J$.N(7466641, 'secret', secret, true, false, false);
                                J$.N(7466649, 'alg', alg, false, false, false);
                                J$.N(7466657, 'hashAlg', hashAlg, false, false, false);
                                J$.N(7466665, 'hmac', hmac, false, false, false);
                                J$.N(7466673, 'h1', h1, false, false, false);
                                J$.N(7466681, 'h2', h2, false, false, false);
                                J$.M(7465985, J$.R(7465961, 'assert', assert, false, true), 'object', false)(J$.R(7465969, 'parsedSignature', parsedSignature, false, false), J$.T(7465977, 'parsedHMAC', 21, false));
                                J$.M(7466017, J$.R(7465993, 'assert', assert, false, true), 'string', false)(J$.R(7466001, 'secret', secret, false, false), J$.T(7466009, 'secret', 21, false));
                                var alg = J$.W(7466057, 'alg', J$.F(7466049, J$.R(7466025, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(7466041, J$.R(7466033, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(397016, J$.B(743330, '!==', J$.G(7466081, J$.R(7466065, 'alg', alg, false, false), J$.T(7466073, 0, 22, false)), J$.T(7466089, 'hmac', 21, false))))
                                    return J$.Rt(7466105, J$.T(7466097, false, 23, false));
                                var hashAlg = J$.W(7466145, 'hashAlg', J$.M(7466137, J$.G(7466129, J$.R(7466113, 'alg', alg, false, false), J$.T(7466121, 1, 22, false)), 'toUpperCase', false)(), hashAlg, false, false);
                                var hmac = J$.W(7466185, 'hmac', J$.M(7466177, J$.R(7466153, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(7466161, 'hashAlg', hashAlg, false, false), J$.R(7466169, 'secret', secret, false, false)), hmac, false, false);
                                J$.M(7466217, J$.R(7466193, 'hmac', hmac, false, false), 'update', false)(J$.G(7466209, J$.R(7466201, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                var h1 = J$.W(7466257, 'h1', J$.M(7466249, J$.R(7466225, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(7466233, 'hashAlg', hashAlg, false, false), J$.R(7466241, 'secret', secret, false, false)), h1, false, false);
                                J$.M(7466289, J$.R(7466265, 'h1', h1, false, false), 'update', false)(J$.M(7466281, J$.R(7466273, 'hmac', hmac, false, false), 'digest', false)());
                                h1 = J$.W(7466313, 'h1', J$.M(7466305, J$.R(7466297, 'h1', h1, false, false), 'digest', false)(), h1, false, false);
                                var h2 = J$.W(7466353, 'h2', J$.M(7466345, J$.R(7466321, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(7466329, 'hashAlg', hashAlg, false, false), J$.R(7466337, 'secret', secret, false, false)), h2, false, false);
                                J$.M(7466417, J$.R(7466361, 'h2', h2, false, false), 'update', false)(J$.F(7466409, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(7466369, 'Buffer', undefined, true, true) : Buffer = J$.R(7466369, 'Buffer', Buffer, true, true)), true)(J$.G(7466393, J$.G(7466385, J$.R(7466377, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(7466401, 'base64', 21, false)));
                                h2 = J$.W(7466441, 'h2', J$.M(7466433, J$.R(7466425, 'h2', h2, false, false), 'digest', false)(), h2, false, false);
                                if (J$.C(397024, J$.B(743346, '===', J$.U(743338, 'typeof', J$.R(7466449, 'h1', h1, false, false)), J$.T(7466457, 'string', 21, false))))
                                    return J$.Rt(7466481, J$.B(743354, '===', J$.R(7466465, 'h1', h1, false, false), J$.R(7466473, 'h2', h2, false, false)));
                                if (J$.C(397040, J$.C(397032, J$.M(7466505, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(7466489, 'Buffer', undefined, true, true) : Buffer = J$.R(7466489, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(7466497, 'h1', h1, false, false))) ? J$.U(743362, '!', J$.G(7466521, J$.R(7466513, 'h1', h1, false, false), 'equals')) : J$._()))
                                    return J$.Rt(7466577, J$.B(743370, '===', J$.M(7466545, J$.R(7466529, 'h1', h1, false, false), 'toString', false)(J$.T(7466537, 'binary', 21, false)), J$.M(7466569, J$.R(7466553, 'h2', h2, false, false), 'toString', false)(J$.T(7466561, 'binary', 21, false))));
                                return J$.Rt(7466609, J$.M(7466601, J$.R(7466585, 'h1', h1, false, false), 'equals', false)(J$.R(7466593, 'h2', h2, false, false)));
                            } catch (J$e) {
                                J$.Ex(7466809, J$e);
                            } finally {
                                if (J$.Fr(7466817))
                                    continue jalangiLabel1;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(7466825, J$e);
        } finally {
            if (J$.Sr(7466833))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

