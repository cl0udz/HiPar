J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(7203137, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/couchbase/lib/mock/cluster.js');
            function MockCluster(cnstr) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7202601, arguments.callee, this, arguments);
                            arguments = J$.N(7202609, 'arguments', arguments, true, false, false);
                            cnstr = J$.N(7202617, 'cnstr', cnstr, true, false, false);
                            J$.P(7202593, J$.R(7202561, 'this', this, false, false), 'dsnObj', J$.M(7202585, J$.R(7202569, 'connstr', connstr, false, true), 'parse', false)(J$.R(7202577, 'cnstr', cnstr, false, false)));
                        } catch (J$e) {
                            J$.Ex(7203185, J$e);
                        } finally {
                            if (J$.Fr(7203193))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7203145, 'connstr', connstr, false, false, false);
            J$.N(7203153, 'MockBucket', MockBucket, false, false, false);
            J$.N(7203161, 'MockClusterManager', MockClusterManager, false, false, false);
            MockCluster = J$.N(7203177, 'MockCluster', J$.T(7203169, MockCluster, 12, false), true, false, false);
            J$.T(7202457, 'use strict', 21, false);
            var connstr = J$.W(7202489, 'connstr', J$.F(7202481, J$.I(typeof require === 'undefined' ? require = J$.R(7202465, 'require', undefined, true, true) : require = J$.R(7202465, 'require', require, true, true)), false)(J$.T(7202473, '../connstr', 21, false)), connstr, false, true);
            var MockBucket = J$.W(7202521, 'MockBucket', J$.F(7202513, J$.I(typeof require === 'undefined' ? require = J$.R(7202497, 'require', undefined, true, true) : require = J$.R(7202497, 'require', require, true, true)), false)(J$.T(7202505, './bucket', 21, false)), MockBucket, false, true);
            var MockClusterManager = J$.W(7202553, 'MockClusterManager', J$.F(7202545, J$.I(typeof require === 'undefined' ? require = J$.R(7202529, 'require', undefined, true, true) : require = J$.R(7202529, 'require', require, true, true)), false)(J$.T(7202537, './clustermgr', 21, false)), MockClusterManager, false, true);
            J$.P(7202993, J$.G(7202633, J$.R(7202625, 'MockCluster', MockCluster, false, true), 'prototype'), 'openBucket', J$.T(7202985, function (name, password, callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7202929, arguments.callee, this, arguments);
                            arguments = J$.N(7202937, 'arguments', arguments, true, false, false);
                            name = J$.N(7202945, 'name', name, true, false, false);
                            password = J$.N(7202953, 'password', password, true, false, false);
                            callback = J$.N(7202961, 'callback', callback, true, false, false);
                            J$.N(7202969, 'bucketDsnObj', bucketDsnObj, false, false, false);
                            J$.N(7202977, 'bucket', bucket, false, false, false);
                            if (J$.C(386136, J$.B(726130, 'instanceof', J$.R(7202641, 'password', password, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(7202649, 'Function', undefined, true, true) : Function = J$.R(7202649, 'Function', Function, true, true))))) {
                                callback = J$.W(7202681, 'callback', J$.G(7202673, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(7202657, 'arguments', undefined, true, true) : arguments = J$.R(7202657, 'arguments', arguments, true, true)), J$.T(7202665, 1, 22, false)), callback, false, false);
                                password = J$.W(7202713, 'password', J$.G(7202705, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(7202689, 'arguments', undefined, true, true) : arguments = J$.R(7202689, 'arguments', arguments, true, true)), J$.T(7202697, 9, 22, false)), password, false, false);
                            }
                            var bucketDsnObj = J$.W(7202753, 'bucketDsnObj', J$.M(7202745, J$.R(7202721, 'connstr', connstr, false, true), 'normalize', false)(J$.G(7202737, J$.R(7202729, 'this', this, false, false), 'dsnObj')), bucketDsnObj, false, false);
                            J$.P(7202777, J$.R(7202761, 'bucketDsnObj', bucketDsnObj, false, false), 'bucket', J$.R(7202769, 'name', name, false, false));
                            var bucket = J$.W(7202833, 'bucket', J$.F(7202825, J$.R(7202785, 'MockBucket', MockBucket, false, true), true)(J$.T(7202817, {
                                dsnObj: J$.R(7202793, 'bucketDsnObj', bucketDsnObj, false, false),
                                username: J$.R(7202801, 'name', name, false, false),
                                password: J$.R(7202809, 'password', password, false, false)
                            }, 11, false)), bucket, false, false);
                            if (J$.C(386144, J$.R(7202841, 'callback', callback, false, false))) {
                                J$.M(7202873, J$.R(7202849, 'bucket', bucket, false, false), 'on', false)(J$.T(7202857, 'connect', 21, false), J$.R(7202865, 'callback', callback, false, false));
                                J$.M(7202905, J$.R(7202881, 'bucket', bucket, false, false), 'on', false)(J$.T(7202889, 'error', 21, false), J$.R(7202897, 'callback', callback, false, false));
                            }
                            return J$.Rt(7202921, J$.R(7202913, 'bucket', bucket, false, false));
                        } catch (J$e) {
                            J$.Ex(7203201, J$e);
                        } finally {
                            if (J$.Fr(7203209))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(7203105, J$.G(7203009, J$.R(7203001, 'MockCluster', MockCluster, false, true), 'prototype'), 'manager', J$.T(7203097, function (username, password) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7203065, arguments.callee, this, arguments);
                            arguments = J$.N(7203073, 'arguments', arguments, true, false, false);
                            username = J$.N(7203081, 'username', username, true, false, false);
                            password = J$.N(7203089, 'password', password, true, false, false);
                            return J$.Rt(7203057, J$.F(7203049, J$.R(7203017, 'MockClusterManager', MockClusterManager, false, true), true)(J$.R(7203025, 'this', this, false, false), J$.R(7203033, 'username', username, false, false), J$.R(7203041, 'password', password, false, false)));
                        } catch (J$e) {
                            J$.Ex(7203217, J$e);
                        } finally {
                            if (J$.Fr(7203225))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(7203129, J$.I(typeof module === 'undefined' ? module = J$.R(7203113, 'module', undefined, true, true) : module = J$.R(7203113, 'module', module, true, true)), 'exports', J$.R(7203121, 'MockCluster', MockCluster, false, true));
        } catch (J$e) {
            J$.Ex(7203233, J$e);
        } finally {
            if (J$.Sr(7203241))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

