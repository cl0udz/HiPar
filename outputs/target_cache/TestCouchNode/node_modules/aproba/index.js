J$.noInstrEval = false;
jalangiLabel25:
    while (true) {
        try {
            J$.Se(6578257, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/aproba/index.js');
            function isArguments(thingy) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6574665, arguments.callee, this, arguments);
                            arguments = J$.N(6574673, 'arguments', arguments, true, false, false);
                            thingy = J$.N(6574681, 'thingy', thingy, true, false, false);
                            return J$.Rt(6574657, J$.C(359304, J$.C(359296, J$.B(687042, '!=', J$.R(6574601, 'thingy', thingy, false, false), J$.T(6574609, null, 25, false))) ? J$.B(687058, '===', J$.U(687050, 'typeof', J$.R(6574617, 'thingy', thingy, false, false)), J$.T(6574625, 'object', 21, false)) : J$._()) ? J$.M(6574649, J$.R(6574633, 'thingy', thingy, false, false), 'hasOwnProperty', false)(J$.T(6574641, 'callee', 21, false)) : J$._());
                        } catch (J$e) {
                            J$.Ex(6578425, J$e);
                        } finally {
                            if (J$.Fr(6578433))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addSchema(schema, arity) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(6575585, arguments.callee, this, arguments);
                            arguments = J$.N(6575593, 'arguments', arguments, true, false, false);
                            schema = J$.N(6575601, 'schema', schema, true, false, false);
                            arity = J$.N(6575609, 'arity', arity, true, false, false);
                            J$.N(6575617, 'group', group, false, false, false);
                            var group = J$.W(6575521, 'group', J$.P(6575513, J$.R(6575449, 'arity', arity, false, false), J$.G(6575465, J$.R(6575457, 'schema', schema, false, false), 'length'), J$.C(359344, J$.G(6575497, J$.R(6575473, 'arity', arity, false, false), J$.G(6575489, J$.R(6575481, 'schema', schema, false, false), 'length'))) ? J$._() : J$.T(6575505, [], 10, false)), group, false, false);
                            if (J$.C(359352, J$.B(687194, '===', J$.M(6575545, J$.R(6575529, 'group', group, false, false), 'indexOf', false)(J$.R(6575537, 'schema', schema, false, false)), J$.U(687186, '-', J$.T(6575553, 1, 22, false)))))
                                J$.M(6575577, J$.R(6575561, 'group', group, false, false), 'push', false)(J$.R(6575569, 'schema', schema, false, false));
                        } catch (J$e) {
                            J$.Ex(6578585, J$e);
                        } finally {
                            if (J$.Fr(6578593))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function missingRequiredArg(num) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(6577249, arguments.callee, this, arguments);
                            arguments = J$.N(6577257, 'arguments', arguments, true, false, false);
                            num = J$.N(6577265, 'num', num, true, false, false);
                            return J$.Rt(6577241, J$.F(6577233, J$.R(6577193, 'newException', newException, false, true), false)(J$.T(6577201, 'EMISSINGARG', 21, false), J$.B(687338, '+', J$.T(6577209, 'Missing required argument #', 21, false), J$.B(687330, '+', J$.R(6577217, 'num', num, false, false), J$.T(6577225, 1, 22, false)))));
                        } catch (J$e) {
                            J$.Ex(6578681, J$e);
                        } finally {
                            if (J$.Fr(6578689))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function unknownType(num, type) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(6577345, arguments.callee, this, arguments);
                            arguments = J$.N(6577353, 'arguments', arguments, true, false, false);
                            num = J$.N(6577361, 'num', num, true, false, false);
                            type = J$.N(6577369, 'type', type, true, false, false);
                            return J$.Rt(6577337, J$.F(6577329, J$.R(6577273, 'newException', newException, false, true), false)(J$.T(6577281, 'EUNKNOWNTYPE', 21, false), J$.B(687370, '+', J$.B(687354, '+', J$.B(687346, '+', J$.T(6577289, 'Unknown type ', 21, false), J$.R(6577297, 'type', type, false, false)), J$.T(6577305, ' in argument #', 21, false)), J$.B(687362, '+', J$.R(6577313, 'num', num, false, false), J$.T(6577321, 1, 22, false)))));
                        } catch (J$e) {
                            J$.Ex(6578697, J$e);
                        } finally {
                            if (J$.Fr(6578705))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function invalidType(num, expectedTypes, value) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(6577625, arguments.callee, this, arguments);
                            arguments = J$.N(6577633, 'arguments', arguments, true, false, false);
                            num = J$.N(6577641, 'num', num, true, false, false);
                            expectedTypes = J$.N(6577649, 'expectedTypes', expectedTypes, true, false, false);
                            value = J$.N(6577657, 'value', value, true, false, false);
                            J$.N(6577665, 'valueType', valueType, false, false, false);
                            var valueType;
                            J$.M(6577513, J$.M(6577393, J$.I(typeof Object === 'undefined' ? Object = J$.R(6577377, 'Object', undefined, true, true) : Object = J$.R(6577377, 'Object', Object, true, true)), 'keys', false)(J$.R(6577385, 'types', types, false, true)), 'forEach', false)(J$.T(6577505, function (typeCode) {
                                jalangiLabel18:
                                    while (true) {
                                        try {
                                            J$.Fe(6577481, arguments.callee, this, arguments);
                                            arguments = J$.N(6577489, 'arguments', arguments, true, false, false);
                                            typeCode = J$.N(6577497, 'typeCode', typeCode, true, false, false);
                                            if (J$.C(359464, J$.M(6577433, J$.G(6577417, J$.R(6577401, 'types', types, false, true), J$.R(6577409, 'typeCode', typeCode, false, false)), 'check', false)(J$.R(6577425, 'value', value, false, false))))
                                                valueType = J$.W(6577473, 'valueType', J$.G(6577465, J$.G(6577457, J$.R(6577441, 'types', types, false, true), J$.R(6577449, 'typeCode', typeCode, false, false)), 'label'), valueType, false, false);
                                        } catch (J$e) {
                                            J$.Ex(6578713, J$e);
                                        } finally {
                                            if (J$.Fr(6578721))
                                                continue jalangiLabel18;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6577617, J$.F(6577609, J$.R(6577521, 'newException', newException, false, true), false)(J$.T(6577529, 'EINVALIDTYPE', 21, false), J$.B(687418, '+', J$.B(687410, '+', J$.B(687402, '+', J$.B(687394, '+', J$.B(687386, '+', J$.T(6577537, 'Argument #', 21, false), J$.B(687378, '+', J$.R(6577545, 'num', num, false, false), J$.T(6577553, 1, 22, false))), J$.T(6577561, ': Expected ', 21, false)), J$.F(6577585, J$.R(6577569, 'englishList', englishList, false, true), false)(J$.R(6577577, 'expectedTypes', expectedTypes, false, false))), J$.T(6577593, ' but got ', 21, false)), J$.R(6577601, 'valueType', valueType, false, false))));
                        } catch (J$e) {
                            J$.Ex(6578729, J$e);
                        } finally {
                            if (J$.Fr(6578737))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function englishList(list) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(6577729, arguments.callee, this, arguments);
                            arguments = J$.N(6577737, 'arguments', arguments, true, false, false);
                            list = J$.N(6577745, 'list', list, true, false, false);
                            return J$.Rt(6577721, J$.M(6577713, J$.M(6577689, J$.R(6577673, 'list', list, false, false), 'join', false)(J$.T(6577681, ', ', 21, false)), 'replace', false)(J$.T(6577697, /, ([^,]+)$/, 14, false), J$.T(6577705, ' or $1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(6578745, J$e);
                        } finally {
                            if (J$.Fr(6578753))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrongNumberOfArgs(expected, got) {
                jalangiLabel22:
                    while (true) {
                        try {
                            J$.Fe(6577969, arguments.callee, this, arguments);
                            arguments = J$.N(6577977, 'arguments', arguments, true, false, false);
                            expected = J$.N(6577985, 'expected', expected, true, false, false);
                            got = J$.N(6577993, 'got', got, true, false, false);
                            J$.N(6578001, 'english', english, false, false, false);
                            J$.N(6578009, 'args', args, false, false, false);
                            var english = J$.W(6577777, 'english', J$.F(6577769, J$.R(6577753, 'englishList', englishList, false, true), false)(J$.R(6577761, 'expected', expected, false, false)), english, false, false);
                            var args = J$.W(6577881, 'args', J$.C(359472, J$.M(6577857, J$.R(6577785, 'expected', expected, false, false), 'every', false)(J$.T(6577849, function (ex) {
                                jalangiLabel21:
                                    while (true) {
                                        try {
                                            J$.Fe(6577825, arguments.callee, this, arguments);
                                            arguments = J$.N(6577833, 'arguments', arguments, true, false, false);
                                            ex = J$.N(6577841, 'ex', ex, true, false, false);
                                            return J$.Rt(6577817, J$.B(687426, '===', J$.G(6577801, J$.R(6577793, 'ex', ex, false, false), 'length'), J$.T(6577809, 1, 22, false)));
                                        } catch (J$e) {
                                            J$.Ex(6578761, J$e);
                                        } finally {
                                            if (J$.Fr(6578769))
                                                continue jalangiLabel21;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false))) ? J$.T(6577865, 'argument', 21, false) : J$.T(6577873, 'arguments', 21, false), args, false, false);
                            return J$.Rt(6577961, J$.F(6577953, J$.R(6577889, 'newException', newException, false, true), false)(J$.T(6577897, 'EWRONGARGCOUNT', 21, false), J$.B(687466, '+', J$.B(687458, '+', J$.B(687450, '+', J$.B(687442, '+', J$.B(687434, '+', J$.T(6577905, 'Expected ', 21, false), J$.R(6577913, 'english', english, false, false)), J$.T(6577921, ' ', 21, false)), J$.R(6577929, 'args', args, false, false)), J$.T(6577937, ' but got ', 21, false)), J$.R(6577945, 'got', got, false, false))));
                        } catch (J$e) {
                            J$.Ex(6578777, J$e);
                        } finally {
                            if (J$.Fr(6578785))
                                continue jalangiLabel22;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function moreThanOneError(schema) {
                jalangiLabel23:
                    while (true) {
                        try {
                            J$.Fe(6578073, arguments.callee, this, arguments);
                            arguments = J$.N(6578081, 'arguments', arguments, true, false, false);
                            schema = J$.N(6578089, 'schema', schema, true, false, false);
                            return J$.Rt(6578065, J$.F(6578057, J$.R(6578017, 'newException', newException, false, true), false)(J$.T(6578025, 'ETOOMANYERRORTYPES', 21, false), J$.B(687482, '+', J$.B(687474, '+', J$.T(6578033, 'Only one error type per argument signature is allowed, more than one found in "', 21, false), J$.R(6578041, 'schema', schema, false, false)), J$.T(6578049, '"', 21, false))));
                        } catch (J$e) {
                            J$.Ex(6578793, J$e);
                        } finally {
                            if (J$.Fr(6578801))
                                continue jalangiLabel23;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function newException(code, msg) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(6578217, arguments.callee, this, arguments);
                            arguments = J$.N(6578225, 'arguments', arguments, true, false, false);
                            code = J$.N(6578233, 'code', code, true, false, false);
                            msg = J$.N(6578241, 'msg', msg, true, false, false);
                            J$.N(6578249, 'e', e, false, false, false);
                            var e = J$.W(6578121, 'e', J$.F(6578113, J$.I(typeof Error === 'undefined' ? Error = J$.R(6578097, 'Error', undefined, true, true) : Error = J$.R(6578097, 'Error', Error, true, true)), true)(J$.R(6578105, 'msg', msg, false, false)), e, false, false);
                            J$.P(6578145, J$.R(6578129, 'e', e, false, false), 'code', J$.R(6578137, 'code', code, false, false));
                            if (J$.C(359480, J$.G(6578161, J$.I(typeof Error === 'undefined' ? Error = J$.R(6578153, 'Error', undefined, true, true) : Error = J$.R(6578153, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(6578193, J$.I(typeof Error === 'undefined' ? Error = J$.R(6578169, 'Error', undefined, true, true) : Error = J$.R(6578169, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(6578177, 'e', e, false, false), J$.R(6578185, 'validate', validate, false, true));
                            return J$.Rt(6578209, J$.R(6578201, 'e', e, false, false));
                        } catch (J$e) {
                            J$.Ex(6578809, J$e);
                        } finally {
                            if (J$.Fr(6578817))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }
            isArguments = J$.N(6578273, 'isArguments', J$.T(6578265, isArguments, 12, false), true, false, false);
            J$.N(6578281, 'types', types, false, false, false);
            addSchema = J$.N(6578297, 'addSchema', J$.T(6578289, addSchema, 12, false), true, false, false);
            J$.N(6578305, 'validate', validate, false, false, false);
            missingRequiredArg = J$.N(6578321, 'missingRequiredArg', J$.T(6578313, missingRequiredArg, 12, false), true, false, false);
            unknownType = J$.N(6578337, 'unknownType', J$.T(6578329, unknownType, 12, false), true, false, false);
            invalidType = J$.N(6578353, 'invalidType', J$.T(6578345, invalidType, 12, false), true, false, false);
            englishList = J$.N(6578369, 'englishList', J$.T(6578361, englishList, 12, false), true, false, false);
            wrongNumberOfArgs = J$.N(6578385, 'wrongNumberOfArgs', J$.T(6578377, wrongNumberOfArgs, 12, false), true, false, false);
            moreThanOneError = J$.N(6578401, 'moreThanOneError', J$.T(6578393, moreThanOneError, 12, false), true, false, false);
            newException = J$.N(6578417, 'newException', J$.T(6578409, newException, 12, false), true, false, false);
            J$.T(6574593, 'use strict', 21, false);
            var types = J$.W(6575441, 'types', J$.T(6575433, {
                '*': J$.T(6574737, {
                    label: J$.T(6574689, 'any', 21, false),
                    check: J$.T(6574729, function () {
                        jalangiLabel1:
                            while (true) {
                                try {
                                    J$.Fe(6574713, arguments.callee, this, arguments);
                                    arguments = J$.N(6574721, 'arguments', arguments, true, false, false);
                                    return J$.Rt(6574705, J$.T(6574697, true, 23, false));
                                } catch (J$e) {
                                    J$.Ex(6578441, J$e);
                                } finally {
                                    if (J$.Fr(6578449))
                                        continue jalangiLabel1;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                A: J$.T(6574841, {
                    label: J$.T(6574745, 'array', 21, false),
                    check: J$.T(6574833, function (thingy) {
                        jalangiLabel2:
                            while (true) {
                                try {
                                    J$.Fe(6574809, arguments.callee, this, arguments);
                                    arguments = J$.N(6574817, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6574825, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6574801, J$.C(359312, J$.M(6574769, J$.I(typeof Array === 'undefined' ? Array = J$.R(6574753, 'Array', undefined, true, true) : Array = J$.R(6574753, 'Array', Array, true, true)), 'isArray', false)(J$.R(6574761, 'thingy', thingy, false, false))) ? J$._() : J$.F(6574793, J$.R(6574777, 'isArguments', isArguments, false, true), false)(J$.R(6574785, 'thingy', thingy, false, false)));
                                } catch (J$e) {
                                    J$.Ex(6578457, J$e);
                                } finally {
                                    if (J$.Fr(6578465))
                                        continue jalangiLabel2;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                S: J$.T(6574913, {
                    label: J$.T(6574849, 'string', 21, false),
                    check: J$.T(6574905, function (thingy) {
                        jalangiLabel3:
                            while (true) {
                                try {
                                    J$.Fe(6574881, arguments.callee, this, arguments);
                                    arguments = J$.N(6574889, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6574897, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6574873, J$.B(687074, '===', J$.U(687066, 'typeof', J$.R(6574857, 'thingy', thingy, false, false)), J$.T(6574865, 'string', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(6578473, J$e);
                                } finally {
                                    if (J$.Fr(6578481))
                                        continue jalangiLabel3;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                N: J$.T(6574985, {
                    label: J$.T(6574921, 'number', 21, false),
                    check: J$.T(6574977, function (thingy) {
                        jalangiLabel4:
                            while (true) {
                                try {
                                    J$.Fe(6574953, arguments.callee, this, arguments);
                                    arguments = J$.N(6574961, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6574969, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6574945, J$.B(687090, '===', J$.U(687082, 'typeof', J$.R(6574929, 'thingy', thingy, false, false)), J$.T(6574937, 'number', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(6578489, J$e);
                                } finally {
                                    if (J$.Fr(6578497))
                                        continue jalangiLabel4;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                F: J$.T(6575057, {
                    label: J$.T(6574993, 'function', 21, false),
                    check: J$.T(6575049, function (thingy) {
                        jalangiLabel5:
                            while (true) {
                                try {
                                    J$.Fe(6575025, arguments.callee, this, arguments);
                                    arguments = J$.N(6575033, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6575041, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6575017, J$.B(687106, '===', J$.U(687098, 'typeof', J$.R(6575001, 'thingy', thingy, false, false)), J$.T(6575009, 'function', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(6578505, J$e);
                                } finally {
                                    if (J$.Fr(6578513))
                                        continue jalangiLabel5;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                O: J$.T(6575209, {
                    label: J$.T(6575065, 'object', 21, false),
                    check: J$.T(6575201, function (thingy) {
                        jalangiLabel6:
                            while (true) {
                                try {
                                    J$.Fe(6575177, arguments.callee, this, arguments);
                                    arguments = J$.N(6575185, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6575193, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6575169, J$.C(359336, J$.C(359328, J$.C(359320, J$.B(687122, '===', J$.U(687114, 'typeof', J$.R(6575073, 'thingy', thingy, false, false)), J$.T(6575081, 'object', 21, false))) ? J$.B(687130, '!=', J$.R(6575089, 'thingy', thingy, false, false), J$.T(6575097, null, 25, false)) : J$._()) ? J$.U(687138, '!', J$.M(6575129, J$.G(6575113, J$.R(6575105, 'types', types, false, true), 'A'), 'check', false)(J$.R(6575121, 'thingy', thingy, false, false))) : J$._()) ? J$.U(687146, '!', J$.M(6575161, J$.G(6575145, J$.R(6575137, 'types', types, false, true), 'E'), 'check', false)(J$.R(6575153, 'thingy', thingy, false, false))) : J$._());
                                } catch (J$e) {
                                    J$.Ex(6578521, J$e);
                                } finally {
                                    if (J$.Fr(6578529))
                                        continue jalangiLabel6;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                B: J$.T(6575281, {
                    label: J$.T(6575217, 'boolean', 21, false),
                    check: J$.T(6575273, function (thingy) {
                        jalangiLabel7:
                            while (true) {
                                try {
                                    J$.Fe(6575249, arguments.callee, this, arguments);
                                    arguments = J$.N(6575257, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6575265, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6575241, J$.B(687162, '===', J$.U(687154, 'typeof', J$.R(6575225, 'thingy', thingy, false, false)), J$.T(6575233, 'boolean', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(6578537, J$e);
                                } finally {
                                    if (J$.Fr(6578545))
                                        continue jalangiLabel7;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                E: J$.T(6575353, {
                    label: J$.T(6575289, 'error', 21, false),
                    check: J$.T(6575345, function (thingy) {
                        jalangiLabel8:
                            while (true) {
                                try {
                                    J$.Fe(6575321, arguments.callee, this, arguments);
                                    arguments = J$.N(6575329, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6575337, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6575313, J$.B(687170, 'instanceof', J$.R(6575297, 'thingy', thingy, false, false), J$.I(typeof Error === 'undefined' ? Error = J$.R(6575305, 'Error', undefined, true, true) : Error = J$.R(6575305, 'Error', Error, true, true))));
                                } catch (J$e) {
                                    J$.Ex(6578553, J$e);
                                } finally {
                                    if (J$.Fr(6578561))
                                        continue jalangiLabel8;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                Z: J$.T(6575425, {
                    label: J$.T(6575361, 'null', 21, false),
                    check: J$.T(6575417, function (thingy) {
                        jalangiLabel9:
                            while (true) {
                                try {
                                    J$.Fe(6575393, arguments.callee, this, arguments);
                                    arguments = J$.N(6575401, 'arguments', arguments, true, false, false);
                                    thingy = J$.N(6575409, 'thingy', thingy, true, false, false);
                                    return J$.Rt(6575385, J$.B(687178, '==', J$.R(6575369, 'thingy', thingy, false, false), J$.T(6575377, null, 25, false)));
                                } catch (J$e) {
                                    J$.Ex(6578569, J$e);
                                } finally {
                                    if (J$.Fr(6578577))
                                        continue jalangiLabel9;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false)
            }, 11, false), types, false, true);
            var validate = J$.W(6577185, 'validate', J$.P(6577177, J$.I(typeof module === 'undefined' ? module = J$.R(6575625, 'module', undefined, true, true) : module = J$.R(6575625, 'module', module, true, true)), 'exports', J$.T(6577169, function (rawSchemas, args) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(6577089, arguments.callee, this, arguments);
                            arguments = J$.N(6577097, 'arguments', arguments, true, false, false);
                            rawSchemas = J$.N(6577105, 'rawSchemas', rawSchemas, true, false, false);
                            args = J$.N(6577113, 'args', args, true, false, false);
                            J$.N(6577121, 'schemas', schemas, false, false, false);
                            J$.N(6577129, 'arity', arity, false, false, false);
                            J$.N(6577137, 'matching', matching, false, false, false);
                            J$.N(6577145, 'ii', ii, false, false, false);
                            J$.N(6577153, 'newMatching', newMatching, false, false, false);
                            J$.N(6577161, 'labels', labels, false, false, false);
                            if (J$.C(359360, J$.B(687202, '!==', J$.G(6575641, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(6575633, 'arguments', undefined, true, true) : arguments = J$.R(6575633, 'arguments', arguments, true, true)), 'length'), J$.T(6575649, 2, 22, false))))
                                throw J$.F(6575697, J$.R(6575657, 'wrongNumberOfArgs', wrongNumberOfArgs, false, true), false)(J$.T(6575673, [J$.T(6575665, 'SA', 21, false)], 10, false), J$.G(6575689, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(6575681, 'arguments', undefined, true, true) : arguments = J$.R(6575681, 'arguments', arguments, true, true)), 'length'));
                            if (J$.C(359368, J$.U(687210, '!', J$.R(6575705, 'rawSchemas', rawSchemas, false, false))))
                                throw J$.F(6575737, J$.R(6575713, 'missingRequiredArg', missingRequiredArg, false, true), false)(J$.T(6575721, 0, 22, false), J$.T(6575729, 'rawSchemas', 21, false));
                            if (J$.C(359376, J$.U(687218, '!', J$.R(6575745, 'args', args, false, false))))
                                throw J$.F(6575777, J$.R(6575753, 'missingRequiredArg', missingRequiredArg, false, true), false)(J$.T(6575761, 1, 22, false), J$.T(6575769, 'args', 21, false));
                            if (J$.C(359384, J$.U(687226, '!', J$.M(6575809, J$.G(6575793, J$.R(6575785, 'types', types, false, true), 'S'), 'check', false)(J$.R(6575801, 'rawSchemas', rawSchemas, false, false)))))
                                throw J$.F(6575857, J$.R(6575817, 'invalidType', invalidType, false, true), false)(J$.T(6575825, 0, 22, false), J$.T(6575841, [J$.T(6575833, 'string', 21, false)], 10, false), J$.R(6575849, 'rawSchemas', rawSchemas, false, false));
                            if (J$.C(359392, J$.U(687234, '!', J$.M(6575889, J$.G(6575873, J$.R(6575865, 'types', types, false, true), 'A'), 'check', false)(J$.R(6575881, 'args', args, false, false)))))
                                throw J$.F(6575937, J$.R(6575897, 'invalidType', invalidType, false, true), false)(J$.T(6575905, 1, 22, false), J$.T(6575921, [J$.T(6575913, 'array', 21, false)], 10, false), J$.R(6575929, 'args', args, false, false));
                            var schemas = J$.W(6575969, 'schemas', J$.M(6575961, J$.R(6575945, 'rawSchemas', rawSchemas, false, false), 'split', false)(J$.T(6575953, '|', 21, false)), schemas, false, false);
                            var arity = J$.W(6575985, 'arity', J$.T(6575977, {}, 11, false), arity, false, false);
                            J$.M(6576465, J$.R(6575993, 'schemas', schemas, false, false), 'forEach', false)(J$.T(6576457, function (schema) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(6576417, arguments.callee, this, arguments);
                                            arguments = J$.N(6576425, 'arguments', arguments, true, false, false);
                                            schema = J$.N(6576433, 'schema', schema, true, false, false);
                                            J$.N(6576441, 'ii', ii, false, false, false);
                                            J$.N(6576449, 'type', type, false, false, false);
                                            for (var ii = J$.W(6576009, 'ii', J$.T(6576001, 0, 22, false), ii, false, false); J$.C(359408, J$.B(687242, '<', J$.R(6576017, 'ii', ii, false, false), J$.G(6576033, J$.R(6576025, 'schema', schema, false, false), 'length'))); ii = J$.W(6576049, 'ii', J$.B(687258, '+', J$.U(687250, '+', J$.R(6576041, 'ii', ii, false, false)), 1), ii, false, false)) {
                                                var type = J$.W(6576081, 'type', J$.G(6576073, J$.R(6576057, 'schema', schema, false, false), J$.R(6576065, 'ii', ii, false, false)), type, false, false);
                                                if (J$.C(359400, J$.U(687266, '!', J$.G(6576105, J$.R(6576089, 'types', types, false, true), J$.R(6576097, 'type', type, false, false)))))
                                                    throw J$.F(6576137, J$.R(6576113, 'unknownType', unknownType, false, true), false)(J$.R(6576121, 'ii', ii, false, false), J$.R(6576129, 'type', type, false, false));
                                            }
                                            if (J$.C(359416, J$.M(6576161, J$.T(6576145, /E.*E/, 14, false), 'test', false)(J$.R(6576153, 'schema', schema, false, false))))
                                                throw J$.F(6576185, J$.R(6576169, 'moreThanOneError', moreThanOneError, false, true), false)(J$.R(6576177, 'schema', schema, false, false));
                                            J$.F(6576217, J$.R(6576193, 'addSchema', addSchema, false, true), false)(J$.R(6576201, 'schema', schema, false, false), J$.R(6576209, 'arity', arity, false, false));
                                            if (J$.C(359432, J$.M(6576241, J$.T(6576225, /E/, 14, false), 'test', false)(J$.R(6576233, 'schema', schema, false, false)))) {
                                                J$.F(6576297, J$.R(6576249, 'addSchema', addSchema, false, true), false)(J$.M(6576281, J$.R(6576257, 'schema', schema, false, false), 'replace', false)(J$.T(6576265, /E.*$/, 14, false), J$.T(6576273, 'E', 21, false)), J$.R(6576289, 'arity', arity, false, false));
                                                J$.F(6576353, J$.R(6576305, 'addSchema', addSchema, false, true), false)(J$.M(6576337, J$.R(6576313, 'schema', schema, false, false), 'replace', false)(J$.T(6576321, /E/, 14, false), J$.T(6576329, 'Z', 21, false)), J$.R(6576345, 'arity', arity, false, false));
                                                if (J$.C(359424, J$.B(687274, '===', J$.G(6576369, J$.R(6576361, 'schema', schema, false, false), 'length'), J$.T(6576377, 1, 22, false))))
                                                    J$.F(6576409, J$.R(6576385, 'addSchema', addSchema, false, true), false)(J$.T(6576393, '', 21, false), J$.R(6576401, 'arity', arity, false, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(6578601, J$e);
                                        } finally {
                                            if (J$.Fr(6578609))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            var matching = J$.W(6576505, 'matching', J$.G(6576497, J$.R(6576473, 'arity', arity, false, false), J$.G(6576489, J$.R(6576481, 'args', args, false, false), 'length')), matching, false, false);
                            if (J$.C(359440, J$.U(687282, '!', J$.R(6576513, 'matching', matching, false, false)))) {
                                throw J$.F(6576569, J$.R(6576521, 'wrongNumberOfArgs', wrongNumberOfArgs, false, true), false)(J$.M(6576545, J$.I(typeof Object === 'undefined' ? Object = J$.R(6576529, 'Object', undefined, true, true) : Object = J$.R(6576529, 'Object', Object, true, true)), 'keys', false)(J$.R(6576537, 'arity', arity, false, false)), J$.G(6576561, J$.R(6576553, 'args', args, false, false), 'length'));
                            }
                            for (var ii = J$.W(6576585, 'ii', J$.T(6576577, 0, 22, false), ii, false, false); J$.C(359456, J$.B(687290, '<', J$.R(6576593, 'ii', ii, false, false), J$.G(6576609, J$.R(6576601, 'args', args, false, false), 'length'))); ii = J$.W(6576625, 'ii', J$.B(687306, '+', J$.U(687298, '+', J$.R(6576617, 'ii', ii, false, false)), 1), ii, false, false)) {
                                var newMatching = J$.W(6576817, 'newMatching', J$.M(6576809, J$.R(6576633, 'matching', matching, false, false), 'filter', false)(J$.T(6576801, function (schema) {
                                    jalangiLabel12:
                                        while (true) {
                                            try {
                                                J$.Fe(6576761, arguments.callee, this, arguments);
                                                arguments = J$.N(6576769, 'arguments', arguments, true, false, false);
                                                schema = J$.N(6576777, 'schema', schema, true, false, false);
                                                J$.N(6576785, 'type', type, false, false, false);
                                                J$.N(6576793, 'typeCheck', typeCheck, false, false, false);
                                                var type = J$.W(6576665, 'type', J$.G(6576657, J$.R(6576641, 'schema', schema, false, false), J$.R(6576649, 'ii', ii, false, false)), type, false, false);
                                                var typeCheck = J$.W(6576705, 'typeCheck', J$.G(6576697, J$.G(6576689, J$.R(6576673, 'types', types, false, true), J$.R(6576681, 'type', type, false, false)), 'check'), typeCheck, false, false);
                                                return J$.Rt(6576753, J$.F(6576745, J$.R(6576713, 'typeCheck', typeCheck, false, false), false)(J$.G(6576737, J$.R(6576721, 'args', args, false, false), J$.R(6576729, 'ii', ii, false, false))));
                                            } catch (J$e) {
                                                J$.Ex(6578617, J$e);
                                            } finally {
                                                if (J$.Fr(6578625))
                                                    continue jalangiLabel12;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), newMatching, false, false);
                                if (J$.C(359448, J$.U(687314, '!', J$.G(6576833, J$.R(6576825, 'newMatching', newMatching, false, false), 'length')))) {
                                    var labels = J$.W(6577009, 'labels', J$.M(6577001, J$.M(6576937, J$.R(6576841, 'matching', matching, false, false), 'map', false)(J$.T(6576929, function (schema) {
                                        jalangiLabel13:
                                            while (true) {
                                                try {
                                                    J$.Fe(6576905, arguments.callee, this, arguments);
                                                    arguments = J$.N(6576913, 'arguments', arguments, true, false, false);
                                                    schema = J$.N(6576921, 'schema', schema, true, false, false);
                                                    return J$.Rt(6576897, J$.G(6576889, J$.G(6576881, J$.R(6576849, 'types', types, false, true), J$.G(6576873, J$.R(6576857, 'schema', schema, false, false), J$.R(6576865, 'ii', ii, false, false))), 'label'));
                                                } catch (J$e) {
                                                    J$.Ex(6578633, J$e);
                                                } finally {
                                                    if (J$.Fr(6578641))
                                                        continue jalangiLabel13;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)), 'filter', false)(J$.T(6576993, function (schema) {
                                        jalangiLabel14:
                                            while (true) {
                                                try {
                                                    J$.Fe(6576969, arguments.callee, this, arguments);
                                                    arguments = J$.N(6576977, 'arguments', arguments, true, false, false);
                                                    schema = J$.N(6576985, 'schema', schema, true, false, false);
                                                    return J$.Rt(6576961, J$.B(687322, '!=', J$.R(6576945, 'schema', schema, false, false), J$.T(6576953, null, 25, false)));
                                                } catch (J$e) {
                                                    J$.Ex(6578649, J$e);
                                                } finally {
                                                    if (J$.Fr(6578657))
                                                        continue jalangiLabel14;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)), labels, false, false);
                                    throw J$.F(6577065, J$.R(6577017, 'invalidType', invalidType, false, true), false)(J$.R(6577025, 'ii', ii, false, false), J$.R(6577033, 'labels', labels, false, false), J$.G(6577057, J$.R(6577041, 'args', args, false, false), J$.R(6577049, 'ii', ii, false, false)));
                                }
                                matching = J$.W(6577081, 'matching', J$.R(6577073, 'newMatching', newMatching, false, false), matching, false, false);
                            }
                        } catch (J$e) {
                            J$.Ex(6578665, J$e);
                        } finally {
                            if (J$.Fr(6578673))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false)), validate, false, true);
        } catch (J$e) {
            J$.Ex(6578825, J$e);
        } finally {
            if (J$.Sr(6578833))
                continue jalangiLabel25;
            else
                break jalangiLabel25;
        }
    }
// JALANGI DO NOT INSTRUMENT

