J$.noInstrEval = false;
jalangiLabel28:
    while (true) {
        try {
            J$.Se(7380633, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/fast-safe-stringify/test-stable.js');
            J$.N(7380641, 'test', test, false, false, false);
            J$.N(7380649, 'fss', fss, false, false, false);
            J$.N(7380657, 'clone', clone, false, false, false);
            J$.N(7380665, 's', s, false, false, false);
            const test = J$.W(7374513, 'test', J$.G(7374505, J$.F(7374497, J$.I(typeof require === 'undefined' ? require = J$.R(7374481, 'require', undefined, true, true) : require = J$.R(7374481, 'require', require, true, true)), false)(J$.T(7374489, 'tap', 21, false)), 'test'), test, false, true);
            const fss = J$.W(7374553, 'fss', J$.G(7374545, J$.F(7374537, J$.I(typeof require === 'undefined' ? require = J$.R(7374521, 'require', undefined, true, true) : require = J$.R(7374521, 'require', require, true, true)), false)(J$.T(7374529, './', 21, false)), 'stable'), fss, false, true);
            const clone = J$.W(7374585, 'clone', J$.F(7374577, J$.I(typeof require === 'undefined' ? require = J$.R(7374561, 'require', undefined, true, true) : require = J$.R(7374561, 'require', require, true, true)), false)(J$.T(7374569, 'clone', 21, false)), clone, false, true);
            const s = J$.W(7374609, 's', J$.G(7374601, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(7374593, 'JSON', undefined, true, true) : JSON = J$.R(7374593, 'JSON', JSON, true, true)), 'stringify'), s, false, true);
            J$.F(7374865, J$.R(7374617, 'test', test, false, true), false)(J$.T(7374625, 'circular reference to root', 21, false), J$.T(7374857, function (assert) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7374809, arguments.callee, this, arguments);
                            arguments = J$.N(7374817, 'arguments', arguments, true, false, false);
                            assert = J$.N(7374825, 'assert', assert, true, false, false);
                            J$.N(7374833, 'fixture', fixture, false, false, false);
                            J$.N(7374841, 'expected', expected, false, false, false);
                            J$.N(7374849, 'actual', actual, false, false, false);
                            const fixture = J$.W(7374649, 'fixture', J$.T(7374641, { name: J$.T(7374633, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7374673, J$.R(7374657, 'fixture', fixture, false, false), 'circle', J$.R(7374665, 'fixture', fixture, false, false));
                            const expected = J$.W(7374721, 'expected', J$.F(7374713, J$.R(7374681, 's', s, false, true), false)(J$.T(7374705, {
                                circle: J$.T(7374689, '[Circular]', 21, false),
                                name: J$.T(7374697, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7374753, 'actual', J$.F(7374745, J$.R(7374729, 'fss', fss, false, true), false)(J$.R(7374737, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7374785, J$.R(7374761, 'assert', assert, false, false), 'is', false)(J$.R(7374769, 'actual', actual, false, false), J$.R(7374777, 'expected', expected, false, false));
                            J$.M(7374801, J$.R(7374793, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380673, J$e);
                        } finally {
                            if (J$.Fr(7380681))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7375129, J$.R(7374873, 'test', test, false, true), false)(J$.T(7374881, 'circular getter reference to root', 21, false), J$.T(7375121, function (assert) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7375073, arguments.callee, this, arguments);
                            arguments = J$.N(7375081, 'arguments', arguments, true, false, false);
                            assert = J$.N(7375089, 'assert', assert, true, false, false);
                            J$.N(7375097, 'fixture', fixture, false, false, false);
                            J$.N(7375105, 'expected', expected, false, false, false);
                            J$.N(7375113, 'actual', actual, false, false, false);
                            const fixture = J$.W(7374937, 'fixture', J$.T(7374929, {
                                name: J$.T(7374889, 'Tywin Lannister', 21, false),
                                get circle() {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(7374913, arguments.callee, this, arguments);
                                                arguments = J$.N(7374921, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7374905, J$.R(7374897, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7380689, J$e);
                                            } finally {
                                                if (J$.Fr(7380697))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            const expected = J$.W(7374985, 'expected', J$.F(7374977, J$.R(7374945, 's', s, false, true), false)(J$.T(7374969, {
                                circle: J$.T(7374953, '[Circular]', 21, false),
                                name: J$.T(7374961, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7375017, 'actual', J$.F(7375009, J$.R(7374993, 'fss', fss, false, true), false)(J$.R(7375001, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7375049, J$.R(7375025, 'assert', assert, false, false), 'is', false)(J$.R(7375033, 'actual', actual, false, false), J$.R(7375041, 'expected', expected, false, false));
                            J$.M(7375065, J$.R(7375057, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380705, J$e);
                        } finally {
                            if (J$.Fr(7380713))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7375401, J$.R(7375137, 'test', test, false, true), false)(J$.T(7375145, 'nested circular reference to root', 21, false), J$.T(7375393, function (assert) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7375345, arguments.callee, this, arguments);
                            arguments = J$.N(7375353, 'arguments', arguments, true, false, false);
                            assert = J$.N(7375361, 'assert', assert, true, false, false);
                            J$.N(7375369, 'fixture', fixture, false, false, false);
                            J$.N(7375377, 'expected', expected, false, false, false);
                            J$.N(7375385, 'actual', actual, false, false, false);
                            const fixture = J$.W(7375169, 'fixture', J$.T(7375161, { name: J$.T(7375153, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7375201, J$.R(7375177, 'fixture', fixture, false, false), 'id', J$.T(7375193, { circle: J$.R(7375185, 'fixture', fixture, false, false) }, 11, false));
                            const expected = J$.W(7375257, 'expected', J$.F(7375249, J$.R(7375209, 's', s, false, true), false)(J$.T(7375241, {
                                id: J$.T(7375225, { circle: J$.T(7375217, '[Circular]', 21, false) }, 11, false),
                                name: J$.T(7375233, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7375289, 'actual', J$.F(7375281, J$.R(7375265, 'fss', fss, false, true), false)(J$.R(7375273, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7375321, J$.R(7375297, 'assert', assert, false, false), 'is', false)(J$.R(7375305, 'actual', actual, false, false), J$.R(7375313, 'expected', expected, false, false));
                            J$.M(7375337, J$.R(7375329, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380721, J$e);
                        } finally {
                            if (J$.Fr(7380729))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7375705, J$.R(7375409, 'test', test, false, true), false)(J$.T(7375417, 'child circular reference', 21, false), J$.T(7375697, function (assert) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7375649, arguments.callee, this, arguments);
                            arguments = J$.N(7375657, 'arguments', arguments, true, false, false);
                            assert = J$.N(7375665, 'assert', assert, true, false, false);
                            J$.N(7375673, 'fixture', fixture, false, false, false);
                            J$.N(7375681, 'expected', expected, false, false, false);
                            J$.N(7375689, 'actual', actual, false, false, false);
                            const fixture = J$.W(7375457, 'fixture', J$.T(7375449, {
                                name: J$.T(7375425, 'Tywin Lannister', 21, false),
                                child: J$.T(7375441, { name: J$.T(7375433, 'Tyrion Lannister', 21, false) }, 11, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7375497, J$.G(7375473, J$.R(7375465, 'fixture', fixture, false, false), 'child'), 'dinklage', J$.G(7375489, J$.R(7375481, 'fixture', fixture, false, false), 'child'));
                            const expected = J$.W(7375561, 'expected', J$.F(7375553, J$.R(7375505, 's', s, false, true), false)(J$.T(7375545, {
                                child: J$.T(7375529, {
                                    dinklage: J$.T(7375513, '[Circular]', 21, false),
                                    name: J$.T(7375521, 'Tyrion Lannister', 21, false)
                                }, 11, false),
                                name: J$.T(7375537, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7375593, 'actual', J$.F(7375585, J$.R(7375569, 'fss', fss, false, true), false)(J$.R(7375577, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7375625, J$.R(7375601, 'assert', assert, false, false), 'is', false)(J$.R(7375609, 'actual', actual, false, false), J$.R(7375617, 'expected', expected, false, false));
                            J$.M(7375641, J$.R(7375633, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380737, J$e);
                        } finally {
                            if (J$.Fr(7380745))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7376025, J$.R(7375713, 'test', test, false, true), false)(J$.T(7375721, 'nested child circular reference', 21, false), J$.T(7376017, function (assert) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(7375969, arguments.callee, this, arguments);
                            arguments = J$.N(7375977, 'arguments', arguments, true, false, false);
                            assert = J$.N(7375985, 'assert', assert, true, false, false);
                            J$.N(7375993, 'fixture', fixture, false, false, false);
                            J$.N(7376001, 'expected', expected, false, false, false);
                            J$.N(7376009, 'actual', actual, false, false, false);
                            const fixture = J$.W(7375761, 'fixture', J$.T(7375753, {
                                name: J$.T(7375729, 'Tywin Lannister', 21, false),
                                child: J$.T(7375745, { name: J$.T(7375737, 'Tyrion Lannister', 21, false) }, 11, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7375809, J$.G(7375777, J$.R(7375769, 'fixture', fixture, false, false), 'child'), 'actor', J$.T(7375801, { dinklage: J$.G(7375793, J$.R(7375785, 'fixture', fixture, false, false), 'child') }, 11, false));
                            const expected = J$.W(7375881, 'expected', J$.F(7375873, J$.R(7375817, 's', s, false, true), false)(J$.T(7375865, {
                                child: J$.T(7375849, {
                                    actor: J$.T(7375833, { dinklage: J$.T(7375825, '[Circular]', 21, false) }, 11, false),
                                    name: J$.T(7375841, 'Tyrion Lannister', 21, false)
                                }, 11, false),
                                name: J$.T(7375857, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7375913, 'actual', J$.F(7375905, J$.R(7375889, 'fss', fss, false, true), false)(J$.R(7375897, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7375945, J$.R(7375921, 'assert', assert, false, false), 'is', false)(J$.R(7375929, 'actual', actual, false, false), J$.R(7375937, 'expected', expected, false, false));
                            J$.M(7375961, J$.R(7375953, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380753, J$e);
                        } finally {
                            if (J$.Fr(7380761))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7376313, J$.R(7376033, 'test', test, false, true), false)(J$.T(7376041, 'circular objects in an array', 21, false), J$.T(7376305, function (assert) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(7376257, arguments.callee, this, arguments);
                            arguments = J$.N(7376265, 'arguments', arguments, true, false, false);
                            assert = J$.N(7376273, 'assert', assert, true, false, false);
                            J$.N(7376281, 'fixture', fixture, false, false, false);
                            J$.N(7376289, 'expected', expected, false, false, false);
                            J$.N(7376297, 'actual', actual, false, false, false);
                            const fixture = J$.W(7376065, 'fixture', J$.T(7376057, { name: J$.T(7376049, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7376105, J$.R(7376073, 'fixture', fixture, false, false), 'hand', J$.T(7376097, [
                                J$.R(7376081, 'fixture', fixture, false, false),
                                J$.R(7376089, 'fixture', fixture, false, false)
                            ], 10, false));
                            const expected = J$.W(7376169, 'expected', J$.F(7376161, J$.R(7376113, 's', s, false, true), false)(J$.T(7376153, {
                                hand: J$.T(7376137, [
                                    J$.T(7376121, '[Circular]', 21, false),
                                    J$.T(7376129, '[Circular]', 21, false)
                                ], 10, false),
                                name: J$.T(7376145, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7376201, 'actual', J$.F(7376193, J$.R(7376177, 'fss', fss, false, true), false)(J$.R(7376185, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7376233, J$.R(7376209, 'assert', assert, false, false), 'is', false)(J$.R(7376217, 'actual', actual, false, false), J$.R(7376225, 'expected', expected, false, false));
                            J$.M(7376249, J$.R(7376241, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380769, J$e);
                        } finally {
                            if (J$.Fr(7380777))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7376777, J$.R(7376321, 'test', test, false, true), false)(J$.T(7376329, 'nested circular references in an array', 21, false), J$.T(7376769, function (assert) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(7376721, arguments.callee, this, arguments);
                            arguments = J$.N(7376729, 'arguments', arguments, true, false, false);
                            assert = J$.N(7376737, 'assert', assert, true, false, false);
                            J$.N(7376745, 'fixture', fixture, false, false, false);
                            J$.N(7376753, 'expected', expected, false, false, false);
                            J$.N(7376761, 'actual', actual, false, false, false);
                            const fixture = J$.W(7376393, 'fixture', J$.T(7376385, {
                                name: J$.T(7376337, 'Tywin Lannister', 21, false),
                                offspring: J$.T(7376377, [
                                    J$.T(7376353, { name: J$.T(7376345, 'Tyrion Lannister', 21, false) }, 11, false),
                                    J$.T(7376369, { name: J$.T(7376361, 'Cersei Lannister', 21, false) }, 11, false)
                                ], 10, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7376465, J$.G(7376425, J$.G(7376409, J$.R(7376401, 'fixture', fixture, false, false), 'offspring'), J$.T(7376417, 0, 22, false)), 'dinklage', J$.G(7376457, J$.G(7376441, J$.R(7376433, 'fixture', fixture, false, false), 'offspring'), J$.T(7376449, 0, 22, false)));
                            J$.P(7376537, J$.G(7376497, J$.G(7376481, J$.R(7376473, 'fixture', fixture, false, false), 'offspring'), J$.T(7376489, 1, 22, false)), 'headey', J$.G(7376529, J$.G(7376513, J$.R(7376505, 'fixture', fixture, false, false), 'offspring'), J$.T(7376521, 1, 22, false)));
                            const expected = J$.W(7376633, 'expected', J$.F(7376625, J$.R(7376545, 's', s, false, true), false)(J$.T(7376617, {
                                name: J$.T(7376553, 'Tywin Lannister', 21, false),
                                offspring: J$.T(7376609, [
                                    J$.T(7376577, {
                                        dinklage: J$.T(7376561, '[Circular]', 21, false),
                                        name: J$.T(7376569, 'Tyrion Lannister', 21, false)
                                    }, 11, false),
                                    J$.T(7376601, {
                                        headey: J$.T(7376585, '[Circular]', 21, false),
                                        name: J$.T(7376593, 'Cersei Lannister', 21, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7376665, 'actual', J$.F(7376657, J$.R(7376641, 'fss', fss, false, true), false)(J$.R(7376649, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7376697, J$.R(7376673, 'assert', assert, false, false), 'is', false)(J$.R(7376681, 'actual', actual, false, false), J$.R(7376689, 'expected', expected, false, false));
                            J$.M(7376713, J$.R(7376705, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380785, J$e);
                        } finally {
                            if (J$.Fr(7380793))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7377033, J$.R(7376785, 'test', test, false, true), false)(J$.T(7376793, 'circular arrays', 21, false), J$.T(7377025, function (assert) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(7376977, arguments.callee, this, arguments);
                            arguments = J$.N(7376985, 'arguments', arguments, true, false, false);
                            assert = J$.N(7376993, 'assert', assert, true, false, false);
                            J$.N(7377001, 'fixture', fixture, false, false, false);
                            J$.N(7377009, 'expected', expected, false, false, false);
                            J$.N(7377017, 'actual', actual, false, false, false);
                            const fixture = J$.W(7376809, 'fixture', J$.T(7376801, [], 10, false), fixture, false, false);
                            J$.M(7376841, J$.R(7376817, 'fixture', fixture, false, false), 'push', false)(J$.R(7376825, 'fixture', fixture, false, false), J$.R(7376833, 'fixture', fixture, false, false));
                            const expected = J$.W(7376889, 'expected', J$.F(7376881, J$.R(7376849, 's', s, false, true), false)(J$.T(7376873, [
                                J$.T(7376857, '[Circular]', 21, false),
                                J$.T(7376865, '[Circular]', 21, false)
                            ], 10, false)), expected, false, false);
                            const actual = J$.W(7376921, 'actual', J$.F(7376913, J$.R(7376897, 'fss', fss, false, true), false)(J$.R(7376905, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7376953, J$.R(7376929, 'assert', assert, false, false), 'is', false)(J$.R(7376937, 'actual', actual, false, false), J$.R(7376945, 'expected', expected, false, false));
                            J$.M(7376969, J$.R(7376961, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380801, J$e);
                        } finally {
                            if (J$.Fr(7380809))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7377353, J$.R(7377041, 'test', test, false, true), false)(J$.T(7377049, 'nested circular arrays', 21, false), J$.T(7377345, function (assert) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(7377297, arguments.callee, this, arguments);
                            arguments = J$.N(7377305, 'arguments', arguments, true, false, false);
                            assert = J$.N(7377313, 'assert', assert, true, false, false);
                            J$.N(7377321, 'fixture', fixture, false, false, false);
                            J$.N(7377329, 'expected', expected, false, false, false);
                            J$.N(7377337, 'actual', actual, false, false, false);
                            const fixture = J$.W(7377065, 'fixture', J$.T(7377057, [], 10, false), fixture, false, false);
                            J$.M(7377129, J$.R(7377073, 'fixture', fixture, false, false), 'push', false)(J$.T(7377097, {
                                name: J$.T(7377081, 'Jon Snow', 21, false),
                                bastards: J$.R(7377089, 'fixture', fixture, false, false)
                            }, 11, false), J$.T(7377121, {
                                name: J$.T(7377105, 'Ramsay Bolton', 21, false),
                                bastards: J$.R(7377113, 'fixture', fixture, false, false)
                            }, 11, false));
                            const expected = J$.W(7377209, 'expected', J$.F(7377201, J$.R(7377137, 's', s, false, true), false)(J$.T(7377193, [
                                J$.T(7377161, {
                                    bastards: J$.T(7377145, '[Circular]', 21, false),
                                    name: J$.T(7377153, 'Jon Snow', 21, false)
                                }, 11, false),
                                J$.T(7377185, {
                                    bastards: J$.T(7377169, '[Circular]', 21, false),
                                    name: J$.T(7377177, 'Ramsay Bolton', 21, false)
                                }, 11, false)
                            ], 10, false)), expected, false, false);
                            const actual = J$.W(7377241, 'actual', J$.F(7377233, J$.R(7377217, 'fss', fss, false, true), false)(J$.R(7377225, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7377273, J$.R(7377249, 'assert', assert, false, false), 'is', false)(J$.R(7377257, 'actual', actual, false, false), J$.R(7377265, 'expected', expected, false, false));
                            J$.M(7377289, J$.R(7377281, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380817, J$e);
                        } finally {
                            if (J$.Fr(7380825))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7377609, J$.R(7377361, 'test', test, false, true), false)(J$.T(7377369, 'repeated non-circular references in objects', 21, false), J$.T(7377601, function (assert) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(7377545, arguments.callee, this, arguments);
                            arguments = J$.N(7377553, 'arguments', arguments, true, false, false);
                            assert = J$.N(7377561, 'assert', assert, true, false, false);
                            J$.N(7377569, 'daenerys', daenerys, false, false, false);
                            J$.N(7377577, 'fixture', fixture, false, false, false);
                            J$.N(7377585, 'expected', expected, false, false, false);
                            J$.N(7377593, 'actual', actual, false, false, false);
                            const daenerys = J$.W(7377393, 'daenerys', J$.T(7377385, { name: J$.T(7377377, 'Daenerys Targaryen', 21, false) }, 11, false), daenerys, false, false);
                            const fixture = J$.W(7377425, 'fixture', J$.T(7377417, {
                                motherOfDragons: J$.R(7377401, 'daenerys', daenerys, false, false),
                                queenOfMeereen: J$.R(7377409, 'daenerys', daenerys, false, false)
                            }, 11, false), fixture, false, false);
                            const expected = J$.W(7377457, 'expected', J$.F(7377449, J$.R(7377433, 's', s, false, true), false)(J$.R(7377441, 'fixture', fixture, false, false)), expected, false, false);
                            const actual = J$.W(7377489, 'actual', J$.F(7377481, J$.R(7377465, 'fss', fss, false, true), false)(J$.R(7377473, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7377521, J$.R(7377497, 'assert', assert, false, false), 'is', false)(J$.R(7377505, 'actual', actual, false, false), J$.R(7377513, 'expected', expected, false, false));
                            J$.M(7377537, J$.R(7377529, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380833, J$e);
                        } finally {
                            if (J$.Fr(7380841))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7377865, J$.R(7377617, 'test', test, false, true), false)(J$.T(7377625, 'repeated non-circular references in arrays', 21, false), J$.T(7377857, function (assert) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(7377801, arguments.callee, this, arguments);
                            arguments = J$.N(7377809, 'arguments', arguments, true, false, false);
                            assert = J$.N(7377817, 'assert', assert, true, false, false);
                            J$.N(7377825, 'daenerys', daenerys, false, false, false);
                            J$.N(7377833, 'fixture', fixture, false, false, false);
                            J$.N(7377841, 'expected', expected, false, false, false);
                            J$.N(7377849, 'actual', actual, false, false, false);
                            const daenerys = J$.W(7377649, 'daenerys', J$.T(7377641, { name: J$.T(7377633, 'Daenerys Targaryen', 21, false) }, 11, false), daenerys, false, false);
                            const fixture = J$.W(7377681, 'fixture', J$.T(7377673, [
                                J$.R(7377657, 'daenerys', daenerys, false, false),
                                J$.R(7377665, 'daenerys', daenerys, false, false)
                            ], 10, false), fixture, false, false);
                            const expected = J$.W(7377713, 'expected', J$.F(7377705, J$.R(7377689, 's', s, false, true), false)(J$.R(7377697, 'fixture', fixture, false, false)), expected, false, false);
                            const actual = J$.W(7377745, 'actual', J$.F(7377737, J$.R(7377721, 'fss', fss, false, true), false)(J$.R(7377729, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7377777, J$.R(7377753, 'assert', assert, false, false), 'is', false)(J$.R(7377761, 'actual', actual, false, false), J$.R(7377769, 'expected', expected, false, false));
                            J$.M(7377793, J$.R(7377785, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380849, J$e);
                        } finally {
                            if (J$.Fr(7380857))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7378281, J$.R(7377873, 'test', test, false, true), false)(J$.T(7377881, 'double child circular reference', 21, false), J$.T(7378273, function (assert) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(7378209, arguments.callee, this, arguments);
                            arguments = J$.N(7378217, 'arguments', arguments, true, false, false);
                            assert = J$.N(7378225, 'assert', assert, true, false, false);
                            J$.N(7378233, 'child', child, false, false, false);
                            J$.N(7378241, 'fixture', fixture, false, false, false);
                            J$.N(7378249, 'cloned', cloned, false, false, false);
                            J$.N(7378257, 'expected', expected, false, false, false);
                            J$.N(7378265, 'actual', actual, false, false, false);
                            const child = J$.W(7377905, 'child', J$.T(7377897, { name: J$.T(7377889, 'Tyrion Lannister', 21, false) }, 11, false), child, false, false);
                            J$.P(7377929, J$.R(7377913, 'child', child, false, false), 'dinklage', J$.R(7377921, 'child', child, false, false));
                            const fixture = J$.W(7377969, 'fixture', J$.T(7377961, {
                                name: J$.T(7377937, 'Tywin Lannister', 21, false),
                                childA: J$.R(7377945, 'child', child, false, false),
                                childB: J$.R(7377953, 'child', child, false, false)
                            }, 11, false), fixture, false, false);
                            const cloned = J$.W(7378001, 'cloned', J$.F(7377993, J$.R(7377977, 'clone', clone, false, true), false)(J$.R(7377985, 'fixture', fixture, false, false)), cloned, false, false);
                            const expected = J$.W(7378089, 'expected', J$.F(7378081, J$.R(7378009, 's', s, false, true), false)(J$.T(7378073, {
                                childA: J$.T(7378033, {
                                    dinklage: J$.T(7378017, '[Circular]', 21, false),
                                    name: J$.T(7378025, 'Tyrion Lannister', 21, false)
                                }, 11, false),
                                childB: J$.T(7378057, {
                                    dinklage: J$.T(7378041, '[Circular]', 21, false),
                                    name: J$.T(7378049, 'Tyrion Lannister', 21, false)
                                }, 11, false),
                                name: J$.T(7378065, 'Tywin Lannister', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7378121, 'actual', J$.F(7378113, J$.R(7378097, 'fss', fss, false, true), false)(J$.R(7378105, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7378153, J$.R(7378129, 'assert', assert, false, false), 'is', false)(J$.R(7378137, 'actual', actual, false, false), J$.R(7378145, 'expected', expected, false, false));
                            J$.M(7378185, J$.R(7378161, 'assert', assert, false, false), 'deepEqual', false)(J$.R(7378169, 'fixture', fixture, false, false), J$.R(7378177, 'cloned', cloned, false, false));
                            J$.M(7378201, J$.R(7378193, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380865, J$e);
                        } finally {
                            if (J$.Fr(7380873))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7378929, J$.R(7378289, 'test', test, false, true), false)(J$.T(7378297, 'child circular reference with toJSON', 21, false), J$.T(7378921, function (assert) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(7378865, arguments.callee, this, arguments);
                            function TestObject(content) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(7378377, arguments.callee, this, arguments);
                                            arguments = J$.N(7378385, 'arguments', arguments, true, false, false);
                                            content = J$.N(7378393, 'content', content, true, false, false);
                                        } catch (J$e) {
                                            J$.Ex(7380897, J$e);
                                        } finally {
                                            if (J$.Fr(7380905))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(7378873, 'arguments', arguments, true, false, false);
                            assert = J$.N(7378881, 'assert', assert, true, false, false);
                            TestObject = J$.N(7378897, 'TestObject', J$.T(7378889, TestObject, 12, false), true, false, false);
                            J$.N(7378905, 'parentObject', parentObject, false, false, false);
                            J$.N(7378913, 'otherParentObject', otherParentObject, false, false, false);
                            J$.P(7378369, J$.G(7378313, J$.R(7378305, 'TestObject', TestObject, false, false), 'prototype'), 'toJSON', J$.T(7378361, function () {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(7378345, arguments.callee, this, arguments);
                                            arguments = J$.N(7378353, 'arguments', arguments, true, false, false);
                                            return J$.Rt(7378337, J$.T(7378329, { special: J$.T(7378321, 'case', 21, false) }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(7380881, J$e);
                                        } finally {
                                            if (J$.Fr(7380889))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            const parentObject = J$.W(7378409, 'parentObject', J$.T(7378401, {}, 11, false), parentObject, false, false);
                            J$.P(7378441, J$.R(7378417, 'parentObject', parentObject, false, false), 'childObject', J$.F(7378433, J$.R(7378425, 'TestObject', TestObject, false, false), true)());
                            J$.P(7378473, J$.G(7378457, J$.R(7378449, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject', J$.R(7378465, 'parentObject', parentObject, false, false));
                            const otherParentObject = J$.W(7378497, 'otherParentObject', J$.F(7378489, J$.R(7378481, 'TestObject', TestObject, false, false), true)(), otherParentObject, false, false);
                            J$.P(7378521, J$.R(7378505, 'otherParentObject', otherParentObject, false, false), 'otherChildObject', J$.T(7378513, {}, 11, false));
                            J$.P(7378553, J$.G(7378537, J$.R(7378529, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject', J$.R(7378545, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7378601, J$.R(7378561, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7378585, J$.G(7378577, J$.R(7378569, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject'), J$.R(7378593, 'parentObject', parentObject, false, false));
                            J$.M(7378649, J$.R(7378609, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7378633, J$.G(7378625, J$.R(7378617, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject'), J$.R(7378641, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7378697, J$.R(7378657, 'assert', assert, false, false), 'equal', false)(J$.F(7378681, J$.R(7378665, 'fss', fss, false, true), false)(J$.R(7378673, 'parentObject', parentObject, false, false)), J$.T(7378689, '{"childObject":{"special":"case"}}', 21, false));
                            J$.M(7378745, J$.R(7378705, 'assert', assert, false, false), 'equal', false)(J$.F(7378729, J$.R(7378713, 'fss', fss, false, true), false)(J$.R(7378721, 'otherParentObject', otherParentObject, false, false)), J$.T(7378737, '{"special":"case"}', 21, false));
                            J$.M(7378793, J$.R(7378753, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7378777, J$.G(7378769, J$.R(7378761, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject'), J$.R(7378785, 'parentObject', parentObject, false, false));
                            J$.M(7378841, J$.R(7378801, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7378825, J$.G(7378817, J$.R(7378809, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject'), J$.R(7378833, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7378857, J$.R(7378849, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380913, J$e);
                        } finally {
                            if (J$.Fr(7380921))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7379113, J$.R(7378937, 'test', test, false, true), false)(J$.T(7378945, 'null object', 21, false), J$.T(7379105, function (assert) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(7379065, arguments.callee, this, arguments);
                            arguments = J$.N(7379073, 'arguments', arguments, true, false, false);
                            assert = J$.N(7379081, 'assert', assert, true, false, false);
                            J$.N(7379089, 'expected', expected, false, false, false);
                            J$.N(7379097, 'actual', actual, false, false, false);
                            const expected = J$.W(7378977, 'expected', J$.F(7378969, J$.R(7378953, 's', s, false, true), false)(J$.T(7378961, null, 25, false)), expected, false, false);
                            const actual = J$.W(7379009, 'actual', J$.F(7379001, J$.R(7378985, 'fss', fss, false, true), false)(J$.T(7378993, null, 25, false)), actual, false, false);
                            J$.M(7379041, J$.R(7379017, 'assert', assert, false, false), 'is', false)(J$.R(7379025, 'actual', actual, false, false), J$.R(7379033, 'expected', expected, false, false));
                            J$.M(7379057, J$.R(7379049, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380929, J$e);
                        } finally {
                            if (J$.Fr(7380937))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7379313, J$.R(7379121, 'test', test, false, true), false)(J$.T(7379129, 'null property', 21, false), J$.T(7379305, function (assert) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(7379265, arguments.callee, this, arguments);
                            arguments = J$.N(7379273, 'arguments', arguments, true, false, false);
                            assert = J$.N(7379281, 'assert', assert, true, false, false);
                            J$.N(7379289, 'expected', expected, false, false, false);
                            J$.N(7379297, 'actual', actual, false, false, false);
                            const expected = J$.W(7379169, 'expected', J$.F(7379161, J$.R(7379137, 's', s, false, true), false)(J$.T(7379153, { f: J$.T(7379145, null, 25, false) }, 11, false)), expected, false, false);
                            const actual = J$.W(7379209, 'actual', J$.F(7379201, J$.R(7379177, 'fss', fss, false, true), false)(J$.T(7379193, { f: J$.T(7379185, null, 25, false) }, 11, false)), actual, false, false);
                            J$.M(7379241, J$.R(7379217, 'assert', assert, false, false), 'is', false)(J$.R(7379225, 'actual', actual, false, false), J$.R(7379233, 'expected', expected, false, false));
                            J$.M(7379257, J$.R(7379249, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380945, J$e);
                        } finally {
                            if (J$.Fr(7380953))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7379817, J$.R(7379321, 'test', test, false, true), false)(J$.T(7379329, 'nested child circular reference in toJSON', 21, false), J$.T(7379809, function (assert) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(7379745, arguments.callee, this, arguments);
                            arguments = J$.N(7379753, 'arguments', arguments, true, false, false);
                            assert = J$.N(7379761, 'assert', assert, true, false, false);
                            J$.N(7379769, 'circle', circle, false, false, false);
                            J$.N(7379777, 'a', a, false, false, false);
                            J$.N(7379785, 'o', o, false, false, false);
                            J$.N(7379793, 'expected', expected, false, false, false);
                            J$.N(7379801, 'actual', actual, false, false, false);
                            var circle = J$.W(7379353, 'circle', J$.T(7379345, { some: J$.T(7379337, 'data', 21, false) }, 11, false), circle, false, false);
                            J$.P(7379377, J$.R(7379361, 'circle', circle, false, false), 'circle', J$.R(7379369, 'circle', circle, false, false));
                            var a = J$.W(7379545, 'a', J$.T(7379537, {
                                b: J$.T(7379449, {
                                    toJSON: J$.T(7379441, function () {
                                        jalangiLabel18:
                                            while (true) {
                                                try {
                                                    J$.Fe(7379425, arguments.callee, this, arguments);
                                                    arguments = J$.N(7379433, 'arguments', arguments, true, false, false);
                                                    J$.P(7379401, J$.R(7379385, 'a', a, false, false), 'b', J$.T(7379393, 2, 22, false));
                                                    return J$.Rt(7379417, J$.T(7379409, '[Redacted]', 21, false));
                                                } catch (J$e) {
                                                    J$.Ex(7380961, J$e);
                                                } finally {
                                                    if (J$.Fr(7380969))
                                                        continue jalangiLabel18;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)
                                }, 11, false),
                                baz: J$.T(7379529, {
                                    circle,
                                    toJSON: J$.T(7379521, function () {
                                        jalangiLabel19:
                                            while (true) {
                                                try {
                                                    J$.Fe(7379505, arguments.callee, this, arguments);
                                                    arguments = J$.N(7379513, 'arguments', arguments, true, false, false);
                                                    J$.P(7379481, J$.R(7379465, 'a', a, false, false), 'baz', J$.R(7379473, 'circle', circle, false, false));
                                                    return J$.Rt(7379497, J$.T(7379489, '[Redacted]', 21, false));
                                                } catch (J$e) {
                                                    J$.Ex(7380977, J$e);
                                                } finally {
                                                    if (J$.Fr(7380985))
                                                        continue jalangiLabel19;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)
                                }, 11, false)
                            }, 11, false), a, false, false);
                            var o = J$.W(7379577, 'o', J$.T(7379569, {
                                a,
                                bar: J$.R(7379561, 'a', a, false, false)
                            }, 11, false), o, false, false);
                            const expected = J$.W(7379657, 'expected', J$.F(7379649, J$.R(7379585, 's', s, false, true), false)(J$.T(7379641, {
                                a: J$.T(7379609, {
                                    b: J$.T(7379593, '[Redacted]', 21, false),
                                    baz: J$.T(7379601, '[Redacted]', 21, false)
                                }, 11, false),
                                bar: J$.T(7379633, {
                                    b: J$.T(7379617, '[Redacted]', 21, false),
                                    baz: J$.T(7379625, '[Redacted]', 21, false)
                                }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7379689, 'actual', J$.F(7379681, J$.R(7379665, 'fss', fss, false, true), false)(J$.R(7379673, 'o', o, false, false)), actual, false, false);
                            J$.M(7379721, J$.R(7379697, 'assert', assert, false, false), 'is', false)(J$.R(7379705, 'actual', actual, false, false), J$.R(7379713, 'expected', expected, false, false));
                            J$.M(7379737, J$.R(7379729, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7380993, J$e);
                        } finally {
                            if (J$.Fr(7381001))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7380017, J$.R(7379825, 'test', test, false, true), false)(J$.T(7379833, 'circular getters are restored when stringified', 21, false), J$.T(7380009, function (assert) {
                jalangiLabel22:
                    while (true) {
                        try {
                            J$.Fe(7379977, arguments.callee, this, arguments);
                            arguments = J$.N(7379985, 'arguments', arguments, true, false, false);
                            assert = J$.N(7379993, 'assert', assert, true, false, false);
                            J$.N(7380001, 'fixture', fixture, false, false, false);
                            const fixture = J$.W(7379889, 'fixture', J$.T(7379881, {
                                name: J$.T(7379841, 'Tywin Lannister', 21, false),
                                get circle() {
                                    jalangiLabel21:
                                        while (true) {
                                            try {
                                                J$.Fe(7379865, arguments.callee, this, arguments);
                                                arguments = J$.N(7379873, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7379857, J$.R(7379849, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7381009, J$e);
                                            } finally {
                                                if (J$.Fr(7381017))
                                                    continue jalangiLabel21;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            J$.F(7379913, J$.R(7379897, 'fss', fss, false, true), false)(J$.R(7379905, 'fixture', fixture, false, false));
                            J$.M(7379953, J$.R(7379921, 'assert', assert, false, false), 'is', false)(J$.G(7379937, J$.R(7379929, 'fixture', fixture, false, false), 'circle'), J$.R(7379945, 'fixture', fixture, false, false));
                            J$.M(7379969, J$.R(7379961, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7381025, J$e);
                        } finally {
                            if (J$.Fr(7381033))
                                continue jalangiLabel22;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7380281, J$.R(7380025, 'test', test, false, true), false)(J$.T(7380033, 'non-configurable circular getters use a replacer instead of markers', 21, false), J$.T(7380273, function (assert) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(7380241, arguments.callee, this, arguments);
                            arguments = J$.N(7380249, 'arguments', arguments, true, false, false);
                            assert = J$.N(7380257, 'assert', assert, true, false, false);
                            J$.N(7380265, 'fixture', fixture, false, false, false);
                            const fixture = J$.W(7380057, 'fixture', J$.T(7380049, { name: J$.T(7380041, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.M(7380153, J$.I(typeof Object === 'undefined' ? Object = J$.R(7380065, 'Object', undefined, true, true) : Object = J$.R(7380065, 'Object', Object, true, true)), 'defineProperty', false)(J$.R(7380073, 'fixture', fixture, false, false), J$.T(7380081, 'circle', 21, false), J$.T(7380145, {
                                configurable: J$.T(7380089, false, 23, false),
                                get: J$.T(7380129, function () {
                                    jalangiLabel23:
                                        while (true) {
                                            try {
                                                J$.Fe(7380113, arguments.callee, this, arguments);
                                                arguments = J$.N(7380121, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7380105, J$.R(7380097, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7381041, J$e);
                                            } finally {
                                                if (J$.Fr(7381049))
                                                    continue jalangiLabel23;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                enumerable: J$.T(7380137, true, 23, false)
                            }, 11, false));
                            J$.F(7380177, J$.R(7380161, 'fss', fss, false, true), false)(J$.R(7380169, 'fixture', fixture, false, false));
                            J$.M(7380217, J$.R(7380185, 'assert', assert, false, false), 'is', false)(J$.G(7380201, J$.R(7380193, 'fixture', fixture, false, false), 'circle'), J$.R(7380209, 'fixture', fixture, false, false));
                            J$.M(7380233, J$.R(7380225, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7381057, J$e);
                        } finally {
                            if (J$.Fr(7381065))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7380625, J$.R(7380289, 'test', test, false, true), false)(J$.T(7380297, 'getter child circular reference', 21, false), J$.T(7380617, function (assert) {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(7380569, arguments.callee, this, arguments);
                            arguments = J$.N(7380577, 'arguments', arguments, true, false, false);
                            assert = J$.N(7380585, 'assert', assert, true, false, false);
                            J$.N(7380593, 'fixture', fixture, false, false, false);
                            J$.N(7380601, 'expected', expected, false, false, false);
                            J$.N(7380609, 'actual', actual, false, false, false);
                            const fixture = J$.W(7380409, 'fixture', J$.T(7380401, {
                                name: J$.T(7380305, 'Tywin Lannister', 21, false),
                                child: J$.T(7380361, {
                                    name: J$.T(7380313, 'Tyrion Lannister', 21, false),
                                    get dinklage() {
                                        jalangiLabel25:
                                            while (true) {
                                                try {
                                                    J$.Fe(7380345, arguments.callee, this, arguments);
                                                    arguments = J$.N(7380353, 'arguments', arguments, true, false, false);
                                                    return J$.Rt(7380337, J$.G(7380329, J$.R(7380321, 'fixture', fixture, false, false), 'child'));
                                                } catch (J$e) {
                                                    J$.Ex(7381073, J$e);
                                                } finally {
                                                    if (J$.Fr(7381081))
                                                        continue jalangiLabel25;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }
                                }, 11, true),
                                get self() {
                                    jalangiLabel26:
                                        while (true) {
                                            try {
                                                J$.Fe(7380385, arguments.callee, this, arguments);
                                                arguments = J$.N(7380393, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7380377, J$.R(7380369, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7381089, J$e);
                                            } finally {
                                                if (J$.Fr(7381097))
                                                    continue jalangiLabel26;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            const expected = J$.W(7380481, 'expected', J$.F(7380473, J$.R(7380417, 's', s, false, true), false)(J$.T(7380465, {
                                child: J$.T(7380441, {
                                    dinklage: J$.T(7380425, '[Circular]', 21, false),
                                    name: J$.T(7380433, 'Tyrion Lannister', 21, false)
                                }, 11, false),
                                name: J$.T(7380449, 'Tywin Lannister', 21, false),
                                self: J$.T(7380457, '[Circular]', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7380513, 'actual', J$.F(7380505, J$.R(7380489, 'fss', fss, false, true), false)(J$.R(7380497, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7380545, J$.R(7380521, 'assert', assert, false, false), 'is', false)(J$.R(7380529, 'actual', actual, false, false), J$.R(7380537, 'expected', expected, false, false));
                            J$.M(7380561, J$.R(7380553, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7381105, J$e);
                        } finally {
                            if (J$.Fr(7381113))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(7381121, J$e);
        } finally {
            if (J$.Sr(7381129))
                continue jalangiLabel28;
            else
                break jalangiLabel28;
        }
    }
// JALANGI DO NOT INSTRUMENT

