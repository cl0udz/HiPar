J$.noInstrEval = false;
jalangiLabel28:
    while (true) {
        try {
            J$.Se(7387297, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/fast-safe-stringify/test.js');
            J$.N(7387305, 'test', test, false, false, false);
            J$.N(7387313, 'fss', fss, false, false, false);
            J$.N(7387321, 'clone', clone, false, false, false);
            J$.N(7387329, 's', s, false, false, false);
            const test = J$.W(7381169, 'test', J$.G(7381161, J$.F(7381153, J$.I(typeof require === 'undefined' ? require = J$.R(7381137, 'require', undefined, true, true) : require = J$.R(7381137, 'require', require, true, true)), false)(J$.T(7381145, 'tap', 21, false)), 'test'), test, false, true);
            const fss = J$.W(7381201, 'fss', J$.F(7381193, J$.I(typeof require === 'undefined' ? require = J$.R(7381177, 'require', undefined, true, true) : require = J$.R(7381177, 'require', require, true, true)), false)(J$.T(7381185, './', 21, false)), fss, false, true);
            const clone = J$.W(7381233, 'clone', J$.F(7381225, J$.I(typeof require === 'undefined' ? require = J$.R(7381209, 'require', undefined, true, true) : require = J$.R(7381209, 'require', require, true, true)), false)(J$.T(7381217, 'clone', 21, false)), clone, false, true);
            const s = J$.W(7381257, 's', J$.G(7381249, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(7381241, 'JSON', undefined, true, true) : JSON = J$.R(7381241, 'JSON', JSON, true, true)), 'stringify'), s, false, true);
            J$.F(7381513, J$.R(7381265, 'test', test, false, true), false)(J$.T(7381273, 'circular reference to root', 21, false), J$.T(7381505, function (assert) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7381457, arguments.callee, this, arguments);
                            arguments = J$.N(7381465, 'arguments', arguments, true, false, false);
                            assert = J$.N(7381473, 'assert', assert, true, false, false);
                            J$.N(7381481, 'fixture', fixture, false, false, false);
                            J$.N(7381489, 'expected', expected, false, false, false);
                            J$.N(7381497, 'actual', actual, false, false, false);
                            const fixture = J$.W(7381297, 'fixture', J$.T(7381289, { name: J$.T(7381281, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7381321, J$.R(7381305, 'fixture', fixture, false, false), 'circle', J$.R(7381313, 'fixture', fixture, false, false));
                            const expected = J$.W(7381369, 'expected', J$.F(7381361, J$.R(7381329, 's', s, false, true), false)(J$.T(7381353, {
                                name: J$.T(7381337, 'Tywin Lannister', 21, false),
                                circle: J$.T(7381345, '[Circular]', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7381401, 'actual', J$.F(7381393, J$.R(7381377, 'fss', fss, false, true), false)(J$.R(7381385, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7381433, J$.R(7381409, 'assert', assert, false, false), 'is', false)(J$.R(7381417, 'actual', actual, false, false), J$.R(7381425, 'expected', expected, false, false));
                            J$.M(7381449, J$.R(7381441, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387337, J$e);
                        } finally {
                            if (J$.Fr(7387345))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7381777, J$.R(7381521, 'test', test, false, true), false)(J$.T(7381529, 'circular getter reference to root', 21, false), J$.T(7381769, function (assert) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7381721, arguments.callee, this, arguments);
                            arguments = J$.N(7381729, 'arguments', arguments, true, false, false);
                            assert = J$.N(7381737, 'assert', assert, true, false, false);
                            J$.N(7381745, 'fixture', fixture, false, false, false);
                            J$.N(7381753, 'expected', expected, false, false, false);
                            J$.N(7381761, 'actual', actual, false, false, false);
                            const fixture = J$.W(7381585, 'fixture', J$.T(7381577, {
                                name: J$.T(7381537, 'Tywin Lannister', 21, false),
                                get circle() {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(7381561, arguments.callee, this, arguments);
                                                arguments = J$.N(7381569, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7381553, J$.R(7381545, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7387353, J$e);
                                            } finally {
                                                if (J$.Fr(7387361))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            const expected = J$.W(7381633, 'expected', J$.F(7381625, J$.R(7381593, 's', s, false, true), false)(J$.T(7381617, {
                                name: J$.T(7381601, 'Tywin Lannister', 21, false),
                                circle: J$.T(7381609, '[Circular]', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7381665, 'actual', J$.F(7381657, J$.R(7381641, 'fss', fss, false, true), false)(J$.R(7381649, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7381697, J$.R(7381673, 'assert', assert, false, false), 'is', false)(J$.R(7381681, 'actual', actual, false, false), J$.R(7381689, 'expected', expected, false, false));
                            J$.M(7381713, J$.R(7381705, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387369, J$e);
                        } finally {
                            if (J$.Fr(7387377))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7382049, J$.R(7381785, 'test', test, false, true), false)(J$.T(7381793, 'nested circular reference to root', 21, false), J$.T(7382041, function (assert) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7381993, arguments.callee, this, arguments);
                            arguments = J$.N(7382001, 'arguments', arguments, true, false, false);
                            assert = J$.N(7382009, 'assert', assert, true, false, false);
                            J$.N(7382017, 'fixture', fixture, false, false, false);
                            J$.N(7382025, 'expected', expected, false, false, false);
                            J$.N(7382033, 'actual', actual, false, false, false);
                            const fixture = J$.W(7381817, 'fixture', J$.T(7381809, { name: J$.T(7381801, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7381849, J$.R(7381825, 'fixture', fixture, false, false), 'id', J$.T(7381841, { circle: J$.R(7381833, 'fixture', fixture, false, false) }, 11, false));
                            const expected = J$.W(7381905, 'expected', J$.F(7381897, J$.R(7381857, 's', s, false, true), false)(J$.T(7381889, {
                                name: J$.T(7381865, 'Tywin Lannister', 21, false),
                                id: J$.T(7381881, { circle: J$.T(7381873, '[Circular]', 21, false) }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7381937, 'actual', J$.F(7381929, J$.R(7381913, 'fss', fss, false, true), false)(J$.R(7381921, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7381969, J$.R(7381945, 'assert', assert, false, false), 'is', false)(J$.R(7381953, 'actual', actual, false, false), J$.R(7381961, 'expected', expected, false, false));
                            J$.M(7381985, J$.R(7381977, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387385, J$e);
                        } finally {
                            if (J$.Fr(7387393))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7382353, J$.R(7382057, 'test', test, false, true), false)(J$.T(7382065, 'child circular reference', 21, false), J$.T(7382345, function (assert) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7382297, arguments.callee, this, arguments);
                            arguments = J$.N(7382305, 'arguments', arguments, true, false, false);
                            assert = J$.N(7382313, 'assert', assert, true, false, false);
                            J$.N(7382321, 'fixture', fixture, false, false, false);
                            J$.N(7382329, 'expected', expected, false, false, false);
                            J$.N(7382337, 'actual', actual, false, false, false);
                            const fixture = J$.W(7382105, 'fixture', J$.T(7382097, {
                                name: J$.T(7382073, 'Tywin Lannister', 21, false),
                                child: J$.T(7382089, { name: J$.T(7382081, 'Tyrion Lannister', 21, false) }, 11, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7382145, J$.G(7382121, J$.R(7382113, 'fixture', fixture, false, false), 'child'), 'dinklage', J$.G(7382137, J$.R(7382129, 'fixture', fixture, false, false), 'child'));
                            const expected = J$.W(7382209, 'expected', J$.F(7382201, J$.R(7382153, 's', s, false, true), false)(J$.T(7382193, {
                                name: J$.T(7382161, 'Tywin Lannister', 21, false),
                                child: J$.T(7382185, {
                                    name: J$.T(7382169, 'Tyrion Lannister', 21, false),
                                    dinklage: J$.T(7382177, '[Circular]', 21, false)
                                }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7382241, 'actual', J$.F(7382233, J$.R(7382217, 'fss', fss, false, true), false)(J$.R(7382225, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7382273, J$.R(7382249, 'assert', assert, false, false), 'is', false)(J$.R(7382257, 'actual', actual, false, false), J$.R(7382265, 'expected', expected, false, false));
                            J$.M(7382289, J$.R(7382281, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387401, J$e);
                        } finally {
                            if (J$.Fr(7387409))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7382673, J$.R(7382361, 'test', test, false, true), false)(J$.T(7382369, 'nested child circular reference', 21, false), J$.T(7382665, function (assert) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(7382617, arguments.callee, this, arguments);
                            arguments = J$.N(7382625, 'arguments', arguments, true, false, false);
                            assert = J$.N(7382633, 'assert', assert, true, false, false);
                            J$.N(7382641, 'fixture', fixture, false, false, false);
                            J$.N(7382649, 'expected', expected, false, false, false);
                            J$.N(7382657, 'actual', actual, false, false, false);
                            const fixture = J$.W(7382409, 'fixture', J$.T(7382401, {
                                name: J$.T(7382377, 'Tywin Lannister', 21, false),
                                child: J$.T(7382393, { name: J$.T(7382385, 'Tyrion Lannister', 21, false) }, 11, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7382457, J$.G(7382425, J$.R(7382417, 'fixture', fixture, false, false), 'child'), 'actor', J$.T(7382449, { dinklage: J$.G(7382441, J$.R(7382433, 'fixture', fixture, false, false), 'child') }, 11, false));
                            const expected = J$.W(7382529, 'expected', J$.F(7382521, J$.R(7382465, 's', s, false, true), false)(J$.T(7382513, {
                                name: J$.T(7382473, 'Tywin Lannister', 21, false),
                                child: J$.T(7382505, {
                                    name: J$.T(7382481, 'Tyrion Lannister', 21, false),
                                    actor: J$.T(7382497, { dinklage: J$.T(7382489, '[Circular]', 21, false) }, 11, false)
                                }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7382561, 'actual', J$.F(7382553, J$.R(7382537, 'fss', fss, false, true), false)(J$.R(7382545, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7382593, J$.R(7382569, 'assert', assert, false, false), 'is', false)(J$.R(7382577, 'actual', actual, false, false), J$.R(7382585, 'expected', expected, false, false));
                            J$.M(7382609, J$.R(7382601, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387417, J$e);
                        } finally {
                            if (J$.Fr(7387425))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7382961, J$.R(7382681, 'test', test, false, true), false)(J$.T(7382689, 'circular objects in an array', 21, false), J$.T(7382953, function (assert) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(7382905, arguments.callee, this, arguments);
                            arguments = J$.N(7382913, 'arguments', arguments, true, false, false);
                            assert = J$.N(7382921, 'assert', assert, true, false, false);
                            J$.N(7382929, 'fixture', fixture, false, false, false);
                            J$.N(7382937, 'expected', expected, false, false, false);
                            J$.N(7382945, 'actual', actual, false, false, false);
                            const fixture = J$.W(7382713, 'fixture', J$.T(7382705, { name: J$.T(7382697, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.P(7382753, J$.R(7382721, 'fixture', fixture, false, false), 'hand', J$.T(7382745, [
                                J$.R(7382729, 'fixture', fixture, false, false),
                                J$.R(7382737, 'fixture', fixture, false, false)
                            ], 10, false));
                            const expected = J$.W(7382817, 'expected', J$.F(7382809, J$.R(7382761, 's', s, false, true), false)(J$.T(7382801, {
                                name: J$.T(7382769, 'Tywin Lannister', 21, false),
                                hand: J$.T(7382793, [
                                    J$.T(7382777, '[Circular]', 21, false),
                                    J$.T(7382785, '[Circular]', 21, false)
                                ], 10, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7382849, 'actual', J$.F(7382841, J$.R(7382825, 'fss', fss, false, true), false)(J$.R(7382833, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7382881, J$.R(7382857, 'assert', assert, false, false), 'is', false)(J$.R(7382865, 'actual', actual, false, false), J$.R(7382873, 'expected', expected, false, false));
                            J$.M(7382897, J$.R(7382889, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387433, J$e);
                        } finally {
                            if (J$.Fr(7387441))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7383425, J$.R(7382969, 'test', test, false, true), false)(J$.T(7382977, 'nested circular references in an array', 21, false), J$.T(7383417, function (assert) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(7383369, arguments.callee, this, arguments);
                            arguments = J$.N(7383377, 'arguments', arguments, true, false, false);
                            assert = J$.N(7383385, 'assert', assert, true, false, false);
                            J$.N(7383393, 'fixture', fixture, false, false, false);
                            J$.N(7383401, 'expected', expected, false, false, false);
                            J$.N(7383409, 'actual', actual, false, false, false);
                            const fixture = J$.W(7383041, 'fixture', J$.T(7383033, {
                                name: J$.T(7382985, 'Tywin Lannister', 21, false),
                                offspring: J$.T(7383025, [
                                    J$.T(7383001, { name: J$.T(7382993, 'Tyrion Lannister', 21, false) }, 11, false),
                                    J$.T(7383017, { name: J$.T(7383009, 'Cersei Lannister', 21, false) }, 11, false)
                                ], 10, false)
                            }, 11, false), fixture, false, false);
                            J$.P(7383113, J$.G(7383073, J$.G(7383057, J$.R(7383049, 'fixture', fixture, false, false), 'offspring'), J$.T(7383065, 0, 22, false)), 'dinklage', J$.G(7383105, J$.G(7383089, J$.R(7383081, 'fixture', fixture, false, false), 'offspring'), J$.T(7383097, 0, 22, false)));
                            J$.P(7383185, J$.G(7383145, J$.G(7383129, J$.R(7383121, 'fixture', fixture, false, false), 'offspring'), J$.T(7383137, 1, 22, false)), 'headey', J$.G(7383177, J$.G(7383161, J$.R(7383153, 'fixture', fixture, false, false), 'offspring'), J$.T(7383169, 1, 22, false)));
                            const expected = J$.W(7383281, 'expected', J$.F(7383273, J$.R(7383193, 's', s, false, true), false)(J$.T(7383265, {
                                name: J$.T(7383201, 'Tywin Lannister', 21, false),
                                offspring: J$.T(7383257, [
                                    J$.T(7383225, {
                                        name: J$.T(7383209, 'Tyrion Lannister', 21, false),
                                        dinklage: J$.T(7383217, '[Circular]', 21, false)
                                    }, 11, false),
                                    J$.T(7383249, {
                                        name: J$.T(7383233, 'Cersei Lannister', 21, false),
                                        headey: J$.T(7383241, '[Circular]', 21, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7383313, 'actual', J$.F(7383305, J$.R(7383289, 'fss', fss, false, true), false)(J$.R(7383297, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7383345, J$.R(7383321, 'assert', assert, false, false), 'is', false)(J$.R(7383329, 'actual', actual, false, false), J$.R(7383337, 'expected', expected, false, false));
                            J$.M(7383361, J$.R(7383353, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387449, J$e);
                        } finally {
                            if (J$.Fr(7387457))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7383681, J$.R(7383433, 'test', test, false, true), false)(J$.T(7383441, 'circular arrays', 21, false), J$.T(7383673, function (assert) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(7383625, arguments.callee, this, arguments);
                            arguments = J$.N(7383633, 'arguments', arguments, true, false, false);
                            assert = J$.N(7383641, 'assert', assert, true, false, false);
                            J$.N(7383649, 'fixture', fixture, false, false, false);
                            J$.N(7383657, 'expected', expected, false, false, false);
                            J$.N(7383665, 'actual', actual, false, false, false);
                            const fixture = J$.W(7383457, 'fixture', J$.T(7383449, [], 10, false), fixture, false, false);
                            J$.M(7383489, J$.R(7383465, 'fixture', fixture, false, false), 'push', false)(J$.R(7383473, 'fixture', fixture, false, false), J$.R(7383481, 'fixture', fixture, false, false));
                            const expected = J$.W(7383537, 'expected', J$.F(7383529, J$.R(7383497, 's', s, false, true), false)(J$.T(7383521, [
                                J$.T(7383505, '[Circular]', 21, false),
                                J$.T(7383513, '[Circular]', 21, false)
                            ], 10, false)), expected, false, false);
                            const actual = J$.W(7383569, 'actual', J$.F(7383561, J$.R(7383545, 'fss', fss, false, true), false)(J$.R(7383553, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7383601, J$.R(7383577, 'assert', assert, false, false), 'is', false)(J$.R(7383585, 'actual', actual, false, false), J$.R(7383593, 'expected', expected, false, false));
                            J$.M(7383617, J$.R(7383609, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387465, J$e);
                        } finally {
                            if (J$.Fr(7387473))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7384001, J$.R(7383689, 'test', test, false, true), false)(J$.T(7383697, 'nested circular arrays', 21, false), J$.T(7383993, function (assert) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(7383945, arguments.callee, this, arguments);
                            arguments = J$.N(7383953, 'arguments', arguments, true, false, false);
                            assert = J$.N(7383961, 'assert', assert, true, false, false);
                            J$.N(7383969, 'fixture', fixture, false, false, false);
                            J$.N(7383977, 'expected', expected, false, false, false);
                            J$.N(7383985, 'actual', actual, false, false, false);
                            const fixture = J$.W(7383713, 'fixture', J$.T(7383705, [], 10, false), fixture, false, false);
                            J$.M(7383777, J$.R(7383721, 'fixture', fixture, false, false), 'push', false)(J$.T(7383745, {
                                name: J$.T(7383729, 'Jon Snow', 21, false),
                                bastards: J$.R(7383737, 'fixture', fixture, false, false)
                            }, 11, false), J$.T(7383769, {
                                name: J$.T(7383753, 'Ramsay Bolton', 21, false),
                                bastards: J$.R(7383761, 'fixture', fixture, false, false)
                            }, 11, false));
                            const expected = J$.W(7383857, 'expected', J$.F(7383849, J$.R(7383785, 's', s, false, true), false)(J$.T(7383841, [
                                J$.T(7383809, {
                                    name: J$.T(7383793, 'Jon Snow', 21, false),
                                    bastards: J$.T(7383801, '[Circular]', 21, false)
                                }, 11, false),
                                J$.T(7383833, {
                                    name: J$.T(7383817, 'Ramsay Bolton', 21, false),
                                    bastards: J$.T(7383825, '[Circular]', 21, false)
                                }, 11, false)
                            ], 10, false)), expected, false, false);
                            const actual = J$.W(7383889, 'actual', J$.F(7383881, J$.R(7383865, 'fss', fss, false, true), false)(J$.R(7383873, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7383921, J$.R(7383897, 'assert', assert, false, false), 'is', false)(J$.R(7383905, 'actual', actual, false, false), J$.R(7383913, 'expected', expected, false, false));
                            J$.M(7383937, J$.R(7383929, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387481, J$e);
                        } finally {
                            if (J$.Fr(7387489))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7384257, J$.R(7384009, 'test', test, false, true), false)(J$.T(7384017, 'repeated non-circular references in objects', 21, false), J$.T(7384249, function (assert) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(7384193, arguments.callee, this, arguments);
                            arguments = J$.N(7384201, 'arguments', arguments, true, false, false);
                            assert = J$.N(7384209, 'assert', assert, true, false, false);
                            J$.N(7384217, 'daenerys', daenerys, false, false, false);
                            J$.N(7384225, 'fixture', fixture, false, false, false);
                            J$.N(7384233, 'expected', expected, false, false, false);
                            J$.N(7384241, 'actual', actual, false, false, false);
                            const daenerys = J$.W(7384041, 'daenerys', J$.T(7384033, { name: J$.T(7384025, 'Daenerys Targaryen', 21, false) }, 11, false), daenerys, false, false);
                            const fixture = J$.W(7384073, 'fixture', J$.T(7384065, {
                                motherOfDragons: J$.R(7384049, 'daenerys', daenerys, false, false),
                                queenOfMeereen: J$.R(7384057, 'daenerys', daenerys, false, false)
                            }, 11, false), fixture, false, false);
                            const expected = J$.W(7384105, 'expected', J$.F(7384097, J$.R(7384081, 's', s, false, true), false)(J$.R(7384089, 'fixture', fixture, false, false)), expected, false, false);
                            const actual = J$.W(7384137, 'actual', J$.F(7384129, J$.R(7384113, 'fss', fss, false, true), false)(J$.R(7384121, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7384169, J$.R(7384145, 'assert', assert, false, false), 'is', false)(J$.R(7384153, 'actual', actual, false, false), J$.R(7384161, 'expected', expected, false, false));
                            J$.M(7384185, J$.R(7384177, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387497, J$e);
                        } finally {
                            if (J$.Fr(7387505))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7384513, J$.R(7384265, 'test', test, false, true), false)(J$.T(7384273, 'repeated non-circular references in arrays', 21, false), J$.T(7384505, function (assert) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(7384449, arguments.callee, this, arguments);
                            arguments = J$.N(7384457, 'arguments', arguments, true, false, false);
                            assert = J$.N(7384465, 'assert', assert, true, false, false);
                            J$.N(7384473, 'daenerys', daenerys, false, false, false);
                            J$.N(7384481, 'fixture', fixture, false, false, false);
                            J$.N(7384489, 'expected', expected, false, false, false);
                            J$.N(7384497, 'actual', actual, false, false, false);
                            const daenerys = J$.W(7384297, 'daenerys', J$.T(7384289, { name: J$.T(7384281, 'Daenerys Targaryen', 21, false) }, 11, false), daenerys, false, false);
                            const fixture = J$.W(7384329, 'fixture', J$.T(7384321, [
                                J$.R(7384305, 'daenerys', daenerys, false, false),
                                J$.R(7384313, 'daenerys', daenerys, false, false)
                            ], 10, false), fixture, false, false);
                            const expected = J$.W(7384361, 'expected', J$.F(7384353, J$.R(7384337, 's', s, false, true), false)(J$.R(7384345, 'fixture', fixture, false, false)), expected, false, false);
                            const actual = J$.W(7384393, 'actual', J$.F(7384385, J$.R(7384369, 'fss', fss, false, true), false)(J$.R(7384377, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7384425, J$.R(7384401, 'assert', assert, false, false), 'is', false)(J$.R(7384409, 'actual', actual, false, false), J$.R(7384417, 'expected', expected, false, false));
                            J$.M(7384441, J$.R(7384433, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387513, J$e);
                        } finally {
                            if (J$.Fr(7387521))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7384929, J$.R(7384521, 'test', test, false, true), false)(J$.T(7384529, 'double child circular reference', 21, false), J$.T(7384921, function (assert) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(7384857, arguments.callee, this, arguments);
                            arguments = J$.N(7384865, 'arguments', arguments, true, false, false);
                            assert = J$.N(7384873, 'assert', assert, true, false, false);
                            J$.N(7384881, 'child', child, false, false, false);
                            J$.N(7384889, 'fixture', fixture, false, false, false);
                            J$.N(7384897, 'cloned', cloned, false, false, false);
                            J$.N(7384905, 'expected', expected, false, false, false);
                            J$.N(7384913, 'actual', actual, false, false, false);
                            const child = J$.W(7384553, 'child', J$.T(7384545, { name: J$.T(7384537, 'Tyrion Lannister', 21, false) }, 11, false), child, false, false);
                            J$.P(7384577, J$.R(7384561, 'child', child, false, false), 'dinklage', J$.R(7384569, 'child', child, false, false));
                            const fixture = J$.W(7384617, 'fixture', J$.T(7384609, {
                                name: J$.T(7384585, 'Tywin Lannister', 21, false),
                                childA: J$.R(7384593, 'child', child, false, false),
                                childB: J$.R(7384601, 'child', child, false, false)
                            }, 11, false), fixture, false, false);
                            const cloned = J$.W(7384649, 'cloned', J$.F(7384641, J$.R(7384625, 'clone', clone, false, true), false)(J$.R(7384633, 'fixture', fixture, false, false)), cloned, false, false);
                            const expected = J$.W(7384737, 'expected', J$.F(7384729, J$.R(7384657, 's', s, false, true), false)(J$.T(7384721, {
                                name: J$.T(7384665, 'Tywin Lannister', 21, false),
                                childA: J$.T(7384689, {
                                    name: J$.T(7384673, 'Tyrion Lannister', 21, false),
                                    dinklage: J$.T(7384681, '[Circular]', 21, false)
                                }, 11, false),
                                childB: J$.T(7384713, {
                                    name: J$.T(7384697, 'Tyrion Lannister', 21, false),
                                    dinklage: J$.T(7384705, '[Circular]', 21, false)
                                }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7384769, 'actual', J$.F(7384761, J$.R(7384745, 'fss', fss, false, true), false)(J$.R(7384753, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7384801, J$.R(7384777, 'assert', assert, false, false), 'is', false)(J$.R(7384785, 'actual', actual, false, false), J$.R(7384793, 'expected', expected, false, false));
                            J$.M(7384833, J$.R(7384809, 'assert', assert, false, false), 'deepEqual', false)(J$.R(7384817, 'fixture', fixture, false, false), J$.R(7384825, 'cloned', cloned, false, false));
                            J$.M(7384849, J$.R(7384841, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387529, J$e);
                        } finally {
                            if (J$.Fr(7387537))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7385577, J$.R(7384937, 'test', test, false, true), false)(J$.T(7384945, 'child circular reference with toJSON', 21, false), J$.T(7385569, function (assert) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(7385513, arguments.callee, this, arguments);
                            function TestObject(content) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(7385025, arguments.callee, this, arguments);
                                            arguments = J$.N(7385033, 'arguments', arguments, true, false, false);
                                            content = J$.N(7385041, 'content', content, true, false, false);
                                        } catch (J$e) {
                                            J$.Ex(7387561, J$e);
                                        } finally {
                                            if (J$.Fr(7387569))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(7385521, 'arguments', arguments, true, false, false);
                            assert = J$.N(7385529, 'assert', assert, true, false, false);
                            TestObject = J$.N(7385545, 'TestObject', J$.T(7385537, TestObject, 12, false), true, false, false);
                            J$.N(7385553, 'parentObject', parentObject, false, false, false);
                            J$.N(7385561, 'otherParentObject', otherParentObject, false, false, false);
                            J$.P(7385017, J$.G(7384961, J$.R(7384953, 'TestObject', TestObject, false, false), 'prototype'), 'toJSON', J$.T(7385009, function () {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(7384993, arguments.callee, this, arguments);
                                            arguments = J$.N(7385001, 'arguments', arguments, true, false, false);
                                            return J$.Rt(7384985, J$.T(7384977, { special: J$.T(7384969, 'case', 21, false) }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(7387545, J$e);
                                        } finally {
                                            if (J$.Fr(7387553))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            const parentObject = J$.W(7385057, 'parentObject', J$.T(7385049, {}, 11, false), parentObject, false, false);
                            J$.P(7385089, J$.R(7385065, 'parentObject', parentObject, false, false), 'childObject', J$.F(7385081, J$.R(7385073, 'TestObject', TestObject, false, false), true)());
                            J$.P(7385121, J$.G(7385105, J$.R(7385097, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject', J$.R(7385113, 'parentObject', parentObject, false, false));
                            const otherParentObject = J$.W(7385145, 'otherParentObject', J$.F(7385137, J$.R(7385129, 'TestObject', TestObject, false, false), true)(), otherParentObject, false, false);
                            J$.P(7385169, J$.R(7385153, 'otherParentObject', otherParentObject, false, false), 'otherChildObject', J$.T(7385161, {}, 11, false));
                            J$.P(7385201, J$.G(7385185, J$.R(7385177, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject', J$.R(7385193, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7385249, J$.R(7385209, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7385233, J$.G(7385225, J$.R(7385217, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject'), J$.R(7385241, 'parentObject', parentObject, false, false));
                            J$.M(7385297, J$.R(7385257, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7385281, J$.G(7385273, J$.R(7385265, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject'), J$.R(7385289, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7385345, J$.R(7385305, 'assert', assert, false, false), 'equal', false)(J$.F(7385329, J$.R(7385313, 'fss', fss, false, true), false)(J$.R(7385321, 'parentObject', parentObject, false, false)), J$.T(7385337, '{"childObject":{"special":"case"}}', 21, false));
                            J$.M(7385393, J$.R(7385353, 'assert', assert, false, false), 'equal', false)(J$.F(7385377, J$.R(7385361, 'fss', fss, false, true), false)(J$.R(7385369, 'otherParentObject', otherParentObject, false, false)), J$.T(7385385, '{"special":"case"}', 21, false));
                            J$.M(7385441, J$.R(7385401, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7385425, J$.G(7385417, J$.R(7385409, 'parentObject', parentObject, false, false), 'childObject'), 'parentObject'), J$.R(7385433, 'parentObject', parentObject, false, false));
                            J$.M(7385489, J$.R(7385449, 'assert', assert, false, false), 'deepEqual', false)(J$.G(7385473, J$.G(7385465, J$.R(7385457, 'otherParentObject', otherParentObject, false, false), 'otherChildObject'), 'otherParentObject'), J$.R(7385481, 'otherParentObject', otherParentObject, false, false));
                            J$.M(7385505, J$.R(7385497, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387577, J$e);
                        } finally {
                            if (J$.Fr(7387585))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7385761, J$.R(7385585, 'test', test, false, true), false)(J$.T(7385593, 'null object', 21, false), J$.T(7385753, function (assert) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(7385713, arguments.callee, this, arguments);
                            arguments = J$.N(7385721, 'arguments', arguments, true, false, false);
                            assert = J$.N(7385729, 'assert', assert, true, false, false);
                            J$.N(7385737, 'expected', expected, false, false, false);
                            J$.N(7385745, 'actual', actual, false, false, false);
                            const expected = J$.W(7385625, 'expected', J$.F(7385617, J$.R(7385601, 's', s, false, true), false)(J$.T(7385609, null, 25, false)), expected, false, false);
                            const actual = J$.W(7385657, 'actual', J$.F(7385649, J$.R(7385633, 'fss', fss, false, true), false)(J$.T(7385641, null, 25, false)), actual, false, false);
                            J$.M(7385689, J$.R(7385665, 'assert', assert, false, false), 'is', false)(J$.R(7385673, 'actual', actual, false, false), J$.R(7385681, 'expected', expected, false, false));
                            J$.M(7385705, J$.R(7385697, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387593, J$e);
                        } finally {
                            if (J$.Fr(7387601))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7385961, J$.R(7385769, 'test', test, false, true), false)(J$.T(7385777, 'null property', 21, false), J$.T(7385953, function (assert) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(7385913, arguments.callee, this, arguments);
                            arguments = J$.N(7385921, 'arguments', arguments, true, false, false);
                            assert = J$.N(7385929, 'assert', assert, true, false, false);
                            J$.N(7385937, 'expected', expected, false, false, false);
                            J$.N(7385945, 'actual', actual, false, false, false);
                            const expected = J$.W(7385817, 'expected', J$.F(7385809, J$.R(7385785, 's', s, false, true), false)(J$.T(7385801, { f: J$.T(7385793, null, 25, false) }, 11, false)), expected, false, false);
                            const actual = J$.W(7385857, 'actual', J$.F(7385849, J$.R(7385825, 'fss', fss, false, true), false)(J$.T(7385841, { f: J$.T(7385833, null, 25, false) }, 11, false)), actual, false, false);
                            J$.M(7385889, J$.R(7385865, 'assert', assert, false, false), 'is', false)(J$.R(7385873, 'actual', actual, false, false), J$.R(7385881, 'expected', expected, false, false));
                            J$.M(7385905, J$.R(7385897, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387609, J$e);
                        } finally {
                            if (J$.Fr(7387617))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7386481, J$.R(7385969, 'test', test, false, true), false)(J$.T(7385977, 'nested child circular reference in toJSON', 21, false), J$.T(7386473, function (assert) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(7386409, arguments.callee, this, arguments);
                            arguments = J$.N(7386417, 'arguments', arguments, true, false, false);
                            assert = J$.N(7386425, 'assert', assert, true, false, false);
                            J$.N(7386433, 'circle', circle, false, false, false);
                            J$.N(7386441, 'a', a, false, false, false);
                            J$.N(7386449, 'o', o, false, false, false);
                            J$.N(7386457, 'expected', expected, false, false, false);
                            J$.N(7386465, 'actual', actual, false, false, false);
                            const circle = J$.W(7386001, 'circle', J$.T(7385993, { some: J$.T(7385985, 'data', 21, false) }, 11, false), circle, false, false);
                            J$.P(7386025, J$.R(7386009, 'circle', circle, false, false), 'circle', J$.R(7386017, 'circle', circle, false, false));
                            const a = J$.W(7386193, 'a', J$.T(7386185, {
                                b: J$.T(7386097, {
                                    toJSON: J$.T(7386089, function () {
                                        jalangiLabel18:
                                            while (true) {
                                                try {
                                                    J$.Fe(7386073, arguments.callee, this, arguments);
                                                    arguments = J$.N(7386081, 'arguments', arguments, true, false, false);
                                                    J$.P(7386049, J$.R(7386033, 'a', a, false, false), 'b', J$.T(7386041, 2, 22, false));
                                                    return J$.Rt(7386065, J$.T(7386057, '[Redacted]', 21, false));
                                                } catch (J$e) {
                                                    J$.Ex(7387625, J$e);
                                                } finally {
                                                    if (J$.Fr(7387633))
                                                        continue jalangiLabel18;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)
                                }, 11, false),
                                baz: J$.T(7386177, {
                                    circle,
                                    toJSON: J$.T(7386169, function () {
                                        jalangiLabel19:
                                            while (true) {
                                                try {
                                                    J$.Fe(7386153, arguments.callee, this, arguments);
                                                    arguments = J$.N(7386161, 'arguments', arguments, true, false, false);
                                                    J$.P(7386129, J$.R(7386113, 'a', a, false, false), 'baz', J$.R(7386121, 'circle', circle, false, false));
                                                    return J$.Rt(7386145, J$.T(7386137, '[Redacted]', 21, false));
                                                } catch (J$e) {
                                                    J$.Ex(7387641, J$e);
                                                } finally {
                                                    if (J$.Fr(7387649))
                                                        continue jalangiLabel19;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false)
                                }, 11, false)
                            }, 11, false), a, false, false);
                            const o = J$.W(7386225, 'o', J$.T(7386217, {
                                a,
                                bar: J$.R(7386209, 'a', a, false, false)
                            }, 11, false), o, false, false);
                            const expected = J$.W(7386321, 'expected', J$.F(7386313, J$.R(7386233, 's', s, false, true), false)(J$.T(7386305, {
                                a: J$.T(7386257, {
                                    b: J$.T(7386241, '[Redacted]', 21, false),
                                    baz: J$.T(7386249, '[Redacted]', 21, false)
                                }, 11, false),
                                bar: J$.T(7386297, {
                                    b: J$.T(7386265, 2, 22, false),
                                    baz: J$.T(7386289, {
                                        some: J$.T(7386273, 'data', 21, false),
                                        circle: J$.T(7386281, '[Circular]', 21, false)
                                    }, 11, false)
                                }, 11, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7386353, 'actual', J$.F(7386345, J$.R(7386329, 'fss', fss, false, true), false)(J$.R(7386337, 'o', o, false, false)), actual, false, false);
                            J$.M(7386385, J$.R(7386361, 'assert', assert, false, false), 'is', false)(J$.R(7386369, 'actual', actual, false, false), J$.R(7386377, 'expected', expected, false, false));
                            J$.M(7386401, J$.R(7386393, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387657, J$e);
                        } finally {
                            if (J$.Fr(7387665))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7386681, J$.R(7386489, 'test', test, false, true), false)(J$.T(7386497, 'circular getters are restored when stringified', 21, false), J$.T(7386673, function (assert) {
                jalangiLabel22:
                    while (true) {
                        try {
                            J$.Fe(7386641, arguments.callee, this, arguments);
                            arguments = J$.N(7386649, 'arguments', arguments, true, false, false);
                            assert = J$.N(7386657, 'assert', assert, true, false, false);
                            J$.N(7386665, 'fixture', fixture, false, false, false);
                            const fixture = J$.W(7386553, 'fixture', J$.T(7386545, {
                                name: J$.T(7386505, 'Tywin Lannister', 21, false),
                                get circle() {
                                    jalangiLabel21:
                                        while (true) {
                                            try {
                                                J$.Fe(7386529, arguments.callee, this, arguments);
                                                arguments = J$.N(7386537, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7386521, J$.R(7386513, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7387673, J$e);
                                            } finally {
                                                if (J$.Fr(7387681))
                                                    continue jalangiLabel21;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            J$.F(7386577, J$.R(7386561, 'fss', fss, false, true), false)(J$.R(7386569, 'fixture', fixture, false, false));
                            J$.M(7386617, J$.R(7386585, 'assert', assert, false, false), 'is', false)(J$.G(7386601, J$.R(7386593, 'fixture', fixture, false, false), 'circle'), J$.R(7386609, 'fixture', fixture, false, false));
                            J$.M(7386633, J$.R(7386625, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387689, J$e);
                        } finally {
                            if (J$.Fr(7387697))
                                continue jalangiLabel22;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7386945, J$.R(7386689, 'test', test, false, true), false)(J$.T(7386697, 'non-configurable circular getters use a replacer instead of markers', 21, false), J$.T(7386937, function (assert) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(7386905, arguments.callee, this, arguments);
                            arguments = J$.N(7386913, 'arguments', arguments, true, false, false);
                            assert = J$.N(7386921, 'assert', assert, true, false, false);
                            J$.N(7386929, 'fixture', fixture, false, false, false);
                            const fixture = J$.W(7386721, 'fixture', J$.T(7386713, { name: J$.T(7386705, 'Tywin Lannister', 21, false) }, 11, false), fixture, false, false);
                            J$.M(7386817, J$.I(typeof Object === 'undefined' ? Object = J$.R(7386729, 'Object', undefined, true, true) : Object = J$.R(7386729, 'Object', Object, true, true)), 'defineProperty', false)(J$.R(7386737, 'fixture', fixture, false, false), J$.T(7386745, 'circle', 21, false), J$.T(7386809, {
                                configurable: J$.T(7386753, false, 23, false),
                                get: J$.T(7386793, function () {
                                    jalangiLabel23:
                                        while (true) {
                                            try {
                                                J$.Fe(7386777, arguments.callee, this, arguments);
                                                arguments = J$.N(7386785, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7386769, J$.R(7386761, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7387705, J$e);
                                            } finally {
                                                if (J$.Fr(7387713))
                                                    continue jalangiLabel23;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                enumerable: J$.T(7386801, true, 23, false)
                            }, 11, false));
                            J$.F(7386841, J$.R(7386825, 'fss', fss, false, true), false)(J$.R(7386833, 'fixture', fixture, false, false));
                            J$.M(7386881, J$.R(7386849, 'assert', assert, false, false), 'is', false)(J$.G(7386865, J$.R(7386857, 'fixture', fixture, false, false), 'circle'), J$.R(7386873, 'fixture', fixture, false, false));
                            J$.M(7386897, J$.R(7386889, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387721, J$e);
                        } finally {
                            if (J$.Fr(7387729))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(7387289, J$.R(7386953, 'test', test, false, true), false)(J$.T(7386961, 'getter child circular reference are replaced instead of marked', 21, false), J$.T(7387281, function (assert) {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(7387233, arguments.callee, this, arguments);
                            arguments = J$.N(7387241, 'arguments', arguments, true, false, false);
                            assert = J$.N(7387249, 'assert', assert, true, false, false);
                            J$.N(7387257, 'fixture', fixture, false, false, false);
                            J$.N(7387265, 'expected', expected, false, false, false);
                            J$.N(7387273, 'actual', actual, false, false, false);
                            const fixture = J$.W(7387073, 'fixture', J$.T(7387065, {
                                name: J$.T(7386969, 'Tywin Lannister', 21, false),
                                child: J$.T(7387025, {
                                    name: J$.T(7386977, 'Tyrion Lannister', 21, false),
                                    get dinklage() {
                                        jalangiLabel25:
                                            while (true) {
                                                try {
                                                    J$.Fe(7387009, arguments.callee, this, arguments);
                                                    arguments = J$.N(7387017, 'arguments', arguments, true, false, false);
                                                    return J$.Rt(7387001, J$.G(7386993, J$.R(7386985, 'fixture', fixture, false, false), 'child'));
                                                } catch (J$e) {
                                                    J$.Ex(7387737, J$e);
                                                } finally {
                                                    if (J$.Fr(7387745))
                                                        continue jalangiLabel25;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }
                                }, 11, true),
                                get self() {
                                    jalangiLabel26:
                                        while (true) {
                                            try {
                                                J$.Fe(7387049, arguments.callee, this, arguments);
                                                arguments = J$.N(7387057, 'arguments', arguments, true, false, false);
                                                return J$.Rt(7387041, J$.R(7387033, 'fixture', fixture, false, false));
                                            } catch (J$e) {
                                                J$.Ex(7387753, J$e);
                                            } finally {
                                                if (J$.Fr(7387761))
                                                    continue jalangiLabel26;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }
                            }, 11, true), fixture, false, false);
                            const expected = J$.W(7387145, 'expected', J$.F(7387137, J$.R(7387081, 's', s, false, true), false)(J$.T(7387129, {
                                name: J$.T(7387089, 'Tywin Lannister', 21, false),
                                child: J$.T(7387113, {
                                    name: J$.T(7387097, 'Tyrion Lannister', 21, false),
                                    dinklage: J$.T(7387105, '[Circular]', 21, false)
                                }, 11, false),
                                self: J$.T(7387121, '[Circular]', 21, false)
                            }, 11, false)), expected, false, false);
                            const actual = J$.W(7387177, 'actual', J$.F(7387169, J$.R(7387153, 'fss', fss, false, true), false)(J$.R(7387161, 'fixture', fixture, false, false)), actual, false, false);
                            J$.M(7387209, J$.R(7387185, 'assert', assert, false, false), 'is', false)(J$.R(7387193, 'actual', actual, false, false), J$.R(7387201, 'expected', expected, false, false));
                            J$.M(7387225, J$.R(7387217, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(7387769, J$e);
                        } finally {
                            if (J$.Fr(7387777))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(7387785, J$e);
        } finally {
            if (J$.Sr(7387793))
                continue jalangiLabel28;
            else
                break jalangiLabel28;
        }
    }
// JALANGI DO NOT INSTRUMENT

