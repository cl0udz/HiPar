J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(7552097, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/json-stringify-safe/stringify.js');
            function stringify(obj, replacer, spaces, cycleReplacer) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7551353, arguments.callee, this, arguments);
                            arguments = J$.N(7551361, 'arguments', arguments, true, false, false);
                            obj = J$.N(7551369, 'obj', obj, true, false, false);
                            replacer = J$.N(7551377, 'replacer', replacer, true, false, false);
                            spaces = J$.N(7551385, 'spaces', spaces, true, false, false);
                            cycleReplacer = J$.N(7551393, 'cycleReplacer', cycleReplacer, true, false, false);
                            return J$.Rt(7551345, J$.M(7551337, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(7551281, 'JSON', undefined, true, true) : JSON = J$.R(7551281, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(7551289, 'obj', obj, false, false), J$.F(7551321, J$.R(7551297, 'serializer', serializer, false, true), false)(J$.R(7551305, 'replacer', replacer, false, false), J$.R(7551313, 'cycleReplacer', cycleReplacer, false, false)), J$.R(7551329, 'spaces', spaces, false, false)));
                        } catch (J$e) {
                            J$.Ex(7552137, J$e);
                        } finally {
                            if (J$.Fr(7552145))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function serializer(replacer, cycleReplacer) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7552049, arguments.callee, this, arguments);
                            arguments = J$.N(7552057, 'arguments', arguments, true, false, false);
                            replacer = J$.N(7552065, 'replacer', replacer, true, false, false);
                            cycleReplacer = J$.N(7552073, 'cycleReplacer', cycleReplacer, true, false, false);
                            J$.N(7552081, 'stack', stack, false, false, false);
                            J$.N(7552089, 'keys', keys, false, false, false);
                            var stack = J$.W(7551417, 'stack', J$.T(7551401, [], 10, false), stack, false, false), keys = J$.W(7551425, 'keys', J$.T(7551409, [], 10, false), keys, false, false);
                            if (J$.C(401632, J$.B(754234, '==', J$.R(7551433, 'cycleReplacer', cycleReplacer, false, false), J$.T(7551441, null, 25, false))))
                                cycleReplacer = J$.W(7551625, 'cycleReplacer', J$.T(7551617, function (key, value) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(7551585, arguments.callee, this, arguments);
                                                arguments = J$.N(7551593, 'arguments', arguments, true, false, false);
                                                key = J$.N(7551601, 'key', key, true, false, false);
                                                value = J$.N(7551609, 'value', value, true, false, false);
                                                if (J$.C(401624, J$.B(754242, '===', J$.G(7551465, J$.R(7551449, 'stack', stack, false, false), J$.T(7551457, 0, 22, false)), J$.R(7551473, 'value', value, false, false))))
                                                    return J$.Rt(7551489, J$.T(7551481, '[Circular ~]', 21, false));
                                                return J$.Rt(7551577, J$.B(754258, '+', J$.B(754250, '+', J$.T(7551497, '[Circular ~.', 21, false), J$.M(7551561, J$.M(7551545, J$.R(7551505, 'keys', keys, false, false), 'slice', false)(J$.T(7551513, 0, 22, false), J$.M(7551537, J$.R(7551521, 'stack', stack, false, false), 'indexOf', false)(J$.R(7551529, 'value', value, false, false))), 'join', false)(J$.T(7551553, '.', 21, false))), J$.T(7551569, ']', 21, false)));
                                            } catch (J$e) {
                                                J$.Ex(7552153, J$e);
                                            } finally {
                                                if (J$.Fr(7552161))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), cycleReplacer, false, false);
                            return J$.Rt(7552041, J$.T(7552033, function (key, value) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(7551993, arguments.callee, this, arguments);
                                            arguments = J$.N(7552001, 'arguments', arguments, true, false, false);
                                            key = J$.N(7552009, 'key', key, true, false, false);
                                            value = J$.N(7552017, 'value', value, true, false, false);
                                            J$.N(7552025, 'thisPos', thisPos, false, false, false);
                                            if (J$.C(401664, J$.B(754266, '>', J$.G(7551641, J$.R(7551633, 'stack', stack, false, false), 'length'), J$.T(7551649, 0, 22, false)))) {
                                                var thisPos = J$.W(7551681, 'thisPos', J$.M(7551673, J$.R(7551657, 'stack', stack, false, false), 'indexOf', false)(J$.R(7551665, 'this', this, false, false)), thisPos, false, false);
                                                J$.C(401640, J$.U(754274, '~', J$.R(7551689, 'thisPos', thisPos, false, false))) ? J$.M(7551721, J$.R(7551697, 'stack', stack, false, false), 'splice', false)(J$.B(754282, '+', J$.R(7551705, 'thisPos', thisPos, false, false), J$.T(7551713, 1, 22, false))) : J$.M(7551745, J$.R(7551729, 'stack', stack, false, false), 'push', false)(J$.R(7551737, 'this', this, false, false));
                                                J$.C(401648, J$.U(754290, '~', J$.R(7551753, 'thisPos', thisPos, false, false))) ? J$.M(7551793, J$.R(7551761, 'keys', keys, false, false), 'splice', false)(J$.R(7551769, 'thisPos', thisPos, false, false), J$.T(7551777, Infinity, 22, false), J$.R(7551785, 'key', key, false, false)) : J$.M(7551817, J$.R(7551801, 'keys', keys, false, false), 'push', false)(J$.R(7551809, 'key', key, false, false));
                                                if (J$.C(401656, J$.U(754298, '~', J$.M(7551841, J$.R(7551825, 'stack', stack, false, false), 'indexOf', false)(J$.R(7551833, 'value', value, false, false)))))
                                                    value = J$.W(7551889, 'value', J$.M(7551881, J$.R(7551849, 'cycleReplacer', cycleReplacer, false, false), 'call', false)(J$.R(7551857, 'this', this, false, false), J$.R(7551865, 'key', key, false, false), J$.R(7551873, 'value', value, false, false)), value, false, false);
                                            } else
                                                J$.M(7551913, J$.R(7551897, 'stack', stack, false, false), 'push', false)(J$.R(7551905, 'value', value, false, false));
                                            return J$.Rt(7551985, J$.C(401672, J$.B(754306, '==', J$.R(7551921, 'replacer', replacer, false, false), J$.T(7551929, null, 25, false))) ? J$.R(7551937, 'value', value, false, false) : J$.M(7551977, J$.R(7551945, 'replacer', replacer, false, false), 'call', false)(J$.R(7551953, 'this', this, false, false), J$.R(7551961, 'key', key, false, false), J$.R(7551969, 'value', value, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(7552169, J$e);
                                        } finally {
                                            if (J$.Fr(7552177))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7552185, J$e);
                        } finally {
                            if (J$.Fr(7552193))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            stringify = J$.N(7552113, 'stringify', J$.T(7552105, stringify, 12, false), true, false, false);
            serializer = J$.N(7552129, 'serializer', J$.T(7552121, serializer, 12, false), true, false, false);
            exports = J$.W(7551249, 'exports', J$.P(7551241, J$.I(typeof module === 'undefined' ? module = J$.R(7551225, 'module', undefined, true, true) : module = J$.R(7551225, 'module', module, true, true)), 'exports', J$.R(7551233, 'stringify', stringify, false, true)), J$.I(typeof exports === 'undefined' ? undefined : exports), true, true);
            J$.P(7551273, J$.I(typeof exports === 'undefined' ? exports = J$.R(7551257, 'exports', undefined, true, true) : exports = J$.R(7551257, 'exports', exports, true, true)), 'getSerialize', J$.R(7551265, 'serializer', serializer, false, true));
        } catch (J$e) {
            J$.Ex(7552201, J$e);
        } finally {
            if (J$.Sr(7552209))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

