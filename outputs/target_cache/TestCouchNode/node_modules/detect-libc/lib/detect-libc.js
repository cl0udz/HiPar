J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(7264577, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/detect-libc/lib/detect-libc.js');
            function contains(needle) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7263329, arguments.callee, this, arguments);
                            arguments = J$.N(7263337, 'arguments', arguments, true, false, false);
                            needle = J$.N(7263345, 'needle', needle, true, false, false);
                            return J$.Rt(7263321, J$.T(7263313, function (haystack) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(7263289, arguments.callee, this, arguments);
                                            arguments = J$.N(7263297, 'arguments', arguments, true, false, false);
                                            haystack = J$.N(7263305, 'haystack', haystack, true, false, false);
                                            return J$.Rt(7263281, J$.B(729010, '!==', J$.M(7263265, J$.R(7263249, 'haystack', haystack, false, false), 'indexOf', false)(J$.R(7263257, 'needle', needle, false, false)), J$.U(729002, '-', J$.T(7263273, 1, 22, false))));
                                        } catch (J$e) {
                                            J$.Ex(7264761, J$e);
                                        } finally {
                                            if (J$.Fr(7264769))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7264777, J$e);
                        } finally {
                            if (J$.Fr(7264785))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function versionFromMuslLdd(out) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7263441, arguments.callee, this, arguments);
                            arguments = J$.N(7263449, 'arguments', arguments, true, false, false);
                            out = J$.N(7263457, 'out', out, true, false, false);
                            return J$.Rt(7263433, J$.G(7263425, J$.M(7263409, J$.M(7263393, J$.G(7263385, J$.M(7263369, J$.R(7263353, 'out', out, false, false), 'split', false)(J$.T(7263361, /[\r\n]+/, 14, false)), J$.T(7263377, 1, 22, false)), 'trim', false)(), 'split', false)(J$.T(7263401, /\s/, 14, false)), J$.T(7263417, 1, 22, false)));
                        } catch (J$e) {
                            J$.Ex(7264793, J$e);
                        } finally {
                            if (J$.Fr(7264801))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function safeReaddirSync(path) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7263521, arguments.callee, this, arguments);
                            arguments = J$.N(7263529, 'arguments', arguments, true, false, false);
                            path = J$.N(7263537, 'path', path, true, false, false);
                            try {
                                return J$.Rt(7263489, J$.F(7263481, J$.R(7263465, 'readdirSync', readdirSync, false, true), false)(J$.R(7263473, 'path', path, false, false)));
                            } catch (e) {
                                J$.N(7263497, 'e', e, false, false, true);
                            }
                            return J$.Rt(7263513, J$.T(7263505, [], 10, false));
                        } catch (J$e) {
                            J$.Ex(7264809, J$e);
                        } finally {
                            if (J$.Fr(7264817))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7264585, 'platform', platform, false, false, false);
            J$.N(7264593, 'spawnSync', spawnSync, false, false, false);
            J$.N(7264601, 'readdirSync', readdirSync, false, false, false);
            J$.N(7264609, 'GLIBC', GLIBC, false, false, false);
            J$.N(7264617, 'MUSL', MUSL, false, false, false);
            J$.N(7264625, 'spawnOptions', spawnOptions, false, false, false);
            contains = J$.N(7264641, 'contains', J$.T(7264633, contains, 12, false), true, false, false);
            versionFromMuslLdd = J$.N(7264657, 'versionFromMuslLdd', J$.T(7264649, versionFromMuslLdd, 12, false), true, false, false);
            safeReaddirSync = J$.N(7264673, 'safeReaddirSync', J$.T(7264665, safeReaddirSync, 12, false), true, false, false);
            J$.N(7264681, 'family', family, false, false, false);
            J$.N(7264689, 'version', version, false, false, false);
            J$.N(7264697, 'method', method, false, false, false);
            J$.N(7264705, 'glibc', glibc, false, false, false);
            J$.N(7264713, 'ldd', ldd, false, false, false);
            J$.N(7264721, 'lib', lib, false, false, false);
            J$.N(7264729, 'usrSbin', usrSbin, false, false, false);
            J$.N(7264737, 'isNonGlibcLinux', isNonGlibcLinux, false, false, false);
            J$.T(7262969, 'use strict', 21, false);
            var platform = J$.W(7263009, 'platform', J$.M(7263001, J$.F(7262993, J$.I(typeof require === 'undefined' ? require = J$.R(7262977, 'require', undefined, true, true) : require = J$.R(7262977, 'require', require, true, true)), false)(J$.T(7262985, 'os', 21, false)), 'platform', false)(), platform, false, true);
            var spawnSync = J$.W(7263049, 'spawnSync', J$.G(7263041, J$.F(7263033, J$.I(typeof require === 'undefined' ? require = J$.R(7263017, 'require', undefined, true, true) : require = J$.R(7263017, 'require', require, true, true)), false)(J$.T(7263025, 'child_process', 21, false)), 'spawnSync'), spawnSync, false, true);
            var readdirSync = J$.W(7263089, 'readdirSync', J$.G(7263081, J$.F(7263073, J$.I(typeof require === 'undefined' ? require = J$.R(7263057, 'require', undefined, true, true) : require = J$.R(7263057, 'require', require, true, true)), false)(J$.T(7263065, 'fs', 21, false)), 'readdirSync'), readdirSync, false, true);
            var GLIBC = J$.W(7263105, 'GLIBC', J$.T(7263097, 'glibc', 21, false), GLIBC, false, true);
            var MUSL = J$.W(7263121, 'MUSL', J$.T(7263113, 'musl', 21, false), MUSL, false, true);
            var spawnOptions = J$.W(7263161, 'spawnOptions', J$.T(7263153, {
                encoding: J$.T(7263129, 'utf8', 21, false),
                env: J$.G(7263145, J$.I(typeof process === 'undefined' ? process = J$.R(7263137, 'process', undefined, true, true) : process = J$.R(7263137, 'process', process, true, true)), 'env')
            }, 11, false), spawnOptions, false, true);
            if (J$.C(388424, J$.U(728994, '!', J$.R(7263169, 'spawnSync', spawnSync, false, true)))) {
                spawnSync = J$.W(7263241, 'spawnSync', J$.T(7263233, function () {
                    jalangiLabel0:
                        while (true) {
                            try {
                                J$.Fe(7263217, arguments.callee, this, arguments);
                                arguments = J$.N(7263225, 'arguments', arguments, true, false, false);
                                return J$.Rt(7263209, J$.T(7263201, {
                                    status: J$.T(7263177, 126, 22, false),
                                    stdout: J$.T(7263185, '', 21, false),
                                    stderr: J$.T(7263193, '', 21, false)
                                }, 11, false));
                            } catch (J$e) {
                                J$.Ex(7264745, J$e);
                            } finally {
                                if (J$.Fr(7264753))
                                    continue jalangiLabel0;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false), spawnSync, false, true);
            }
            var family = J$.W(7263553, 'family', J$.T(7263545, '', 21, false), family, false, true);
            var version = J$.W(7263569, 'version', J$.T(7263561, '', 21, false), version, false, true);
            var method = J$.W(7263585, 'method', J$.T(7263577, '', 21, false), method, false, true);
            if (J$.C(388504, J$.B(729018, '===', J$.R(7263593, 'platform', platform, false, true), J$.T(7263601, 'linux', 21, false)))) {
                var glibc = J$.W(7263657, 'glibc', J$.F(7263649, J$.R(7263609, 'spawnSync', spawnSync, false, true), false)(J$.T(7263617, 'getconf', 21, false), J$.T(7263633, [J$.T(7263625, 'GNU_LIBC_VERSION', 21, false)], 10, false), J$.R(7263641, 'spawnOptions', spawnOptions, false, true)), glibc, false, true);
                if (J$.C(388496, J$.B(729026, '===', J$.G(7263673, J$.R(7263665, 'glibc', glibc, false, true), 'status'), J$.T(7263681, 0, 22, false)))) {
                    family = J$.W(7263697, 'family', J$.R(7263689, 'GLIBC', GLIBC, false, true), family, false, true);
                    version = J$.W(7263761, 'version', J$.G(7263753, J$.M(7263737, J$.M(7263721, J$.G(7263713, J$.R(7263705, 'glibc', glibc, false, true), 'stdout'), 'trim', false)(), 'split', false)(J$.T(7263729, ' ', 21, false)), J$.T(7263745, 1, 22, false)), version, false, true);
                    method = J$.W(7263777, 'method', J$.T(7263769, 'getconf', 21, false), method, false, true);
                } else {
                    var ldd = J$.W(7263833, 'ldd', J$.F(7263825, J$.R(7263785, 'spawnSync', spawnSync, false, true), false)(J$.T(7263793, 'ldd', 21, false), J$.T(7263809, [J$.T(7263801, '--version', 21, false)], 10, false), J$.R(7263817, 'spawnOptions', spawnOptions, false, true)), ldd, false, true);
                    if (J$.C(388488, J$.C(388432, J$.B(729034, '===', J$.G(7263849, J$.R(7263841, 'ldd', ldd, false, true), 'status'), J$.T(7263857, 0, 22, false))) ? J$.B(729050, '!==', J$.M(7263889, J$.G(7263873, J$.R(7263865, 'ldd', ldd, false, true), 'stdout'), 'indexOf', false)(J$.R(7263881, 'MUSL', MUSL, false, true)), J$.U(729042, '-', J$.T(7263897, 1, 22, false))) : J$._())) {
                        family = J$.W(7263913, 'family', J$.R(7263905, 'MUSL', MUSL, false, true), family, false, true);
                        version = J$.W(7263953, 'version', J$.F(7263945, J$.R(7263921, 'versionFromMuslLdd', versionFromMuslLdd, false, true), false)(J$.G(7263937, J$.R(7263929, 'ldd', ldd, false, true), 'stdout')), version, false, true);
                        method = J$.W(7263969, 'method', J$.T(7263961, 'ldd', 21, false), method, false, true);
                    } else if (J$.C(388480, J$.C(388440, J$.B(729058, '===', J$.G(7263985, J$.R(7263977, 'ldd', ldd, false, true), 'status'), J$.T(7263993, 1, 22, false))) ? J$.B(729074, '!==', J$.M(7264025, J$.G(7264009, J$.R(7264001, 'ldd', ldd, false, true), 'stderr'), 'indexOf', false)(J$.R(7264017, 'MUSL', MUSL, false, true)), J$.U(729066, '-', J$.T(7264033, 1, 22, false))) : J$._())) {
                        family = J$.W(7264049, 'family', J$.R(7264041, 'MUSL', MUSL, false, true), family, false, true);
                        version = J$.W(7264089, 'version', J$.F(7264081, J$.R(7264057, 'versionFromMuslLdd', versionFromMuslLdd, false, true), false)(J$.G(7264073, J$.R(7264065, 'ldd', ldd, false, true), 'stderr')), version, false, true);
                        method = J$.W(7264105, 'method', J$.T(7264097, 'ldd', 21, false), method, false, true);
                    } else {
                        var lib = J$.W(7264137, 'lib', J$.F(7264129, J$.R(7264113, 'safeReaddirSync', safeReaddirSync, false, true), false)(J$.T(7264121, '/lib', 21, false)), lib, false, true);
                        if (J$.C(388472, J$.M(7264177, J$.R(7264145, 'lib', lib, false, true), 'some', false)(J$.F(7264169, J$.R(7264153, 'contains', contains, false, true), false)(J$.T(7264161, '-linux-gnu', 21, false))))) {
                            family = J$.W(7264193, 'family', J$.R(7264185, 'GLIBC', GLIBC, false, true), family, false, true);
                            method = J$.W(7264209, 'method', J$.T(7264201, 'filesystem', 21, false), method, false, true);
                        } else if (J$.C(388464, J$.M(7264249, J$.R(7264217, 'lib', lib, false, true), 'some', false)(J$.F(7264241, J$.R(7264225, 'contains', contains, false, true), false)(J$.T(7264233, 'libc.musl-', 21, false))))) {
                            family = J$.W(7264265, 'family', J$.R(7264257, 'MUSL', MUSL, false, true), family, false, true);
                            method = J$.W(7264281, 'method', J$.T(7264273, 'filesystem', 21, false), method, false, true);
                        } else if (J$.C(388456, J$.M(7264321, J$.R(7264289, 'lib', lib, false, true), 'some', false)(J$.F(7264313, J$.R(7264297, 'contains', contains, false, true), false)(J$.T(7264305, 'ld-musl-', 21, false))))) {
                            family = J$.W(7264337, 'family', J$.R(7264329, 'MUSL', MUSL, false, true), family, false, true);
                            method = J$.W(7264353, 'method', J$.T(7264345, 'filesystem', 21, false), method, false, true);
                        } else {
                            var usrSbin = J$.W(7264385, 'usrSbin', J$.F(7264377, J$.R(7264361, 'safeReaddirSync', safeReaddirSync, false, true), false)(J$.T(7264369, '/usr/sbin', 21, false)), usrSbin, false, true);
                            if (J$.C(388448, J$.M(7264425, J$.R(7264393, 'usrSbin', usrSbin, false, true), 'some', false)(J$.F(7264417, J$.R(7264401, 'contains', contains, false, true), false)(J$.T(7264409, 'glibc', 21, false))))) {
                                family = J$.W(7264441, 'family', J$.R(7264433, 'GLIBC', GLIBC, false, true), family, false, true);
                                method = J$.W(7264457, 'method', J$.T(7264449, 'filesystem', 21, false), method, false, true);
                            }
                        }
                    }
                }
            }
            var isNonGlibcLinux = J$.W(7264497, 'isNonGlibcLinux', J$.C(388512, J$.B(729082, '!==', J$.R(7264465, 'family', family, false, true), J$.T(7264473, '', 21, false))) ? J$.B(729090, '!==', J$.R(7264481, 'family', family, false, true), J$.R(7264489, 'GLIBC', GLIBC, false, true)) : J$._(), isNonGlibcLinux, false, true);
            J$.P(7264569, J$.I(typeof module === 'undefined' ? module = J$.R(7264505, 'module', undefined, true, true) : module = J$.R(7264505, 'module', module, true, true)), 'exports', J$.T(7264561, {
                GLIBC: J$.R(7264513, 'GLIBC', GLIBC, false, true),
                MUSL: J$.R(7264521, 'MUSL', MUSL, false, true),
                family: J$.R(7264529, 'family', family, false, true),
                version: J$.R(7264537, 'version', version, false, true),
                method: J$.R(7264545, 'method', method, false, true),
                isNonGlibcLinux: J$.R(7264553, 'isNonGlibcLinux', isNonGlibcLinux, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(7264825, J$e);
        } finally {
            if (J$.Sr(7264833))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

