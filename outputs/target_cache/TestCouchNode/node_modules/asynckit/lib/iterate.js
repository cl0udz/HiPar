J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(6833681, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/asynckit/lib/iterate.js');
            function iterate(list, iterator, state, callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6833409, arguments.callee, this, arguments);
                            arguments = J$.N(6833417, 'arguments', arguments, true, false, false);
                            list = J$.N(6833425, 'list', list, true, false, false);
                            iterator = J$.N(6833433, 'iterator', iterator, true, false, false);
                            state = J$.N(6833441, 'state', state, true, false, false);
                            callback = J$.N(6833449, 'callback', callback, true, false, false);
                            J$.N(6833457, 'key', key, false, false, false);
                            var key = J$.W(6833105, 'key', J$.C(370344, J$.G(6833033, J$.R(6833017, 'state', state, false, false), J$.T(6833025, 'keyedList', 21, false))) ? J$.G(6833081, J$.G(6833057, J$.R(6833041, 'state', state, false, false), J$.T(6833049, 'keyedList', 21, false)), J$.G(6833073, J$.R(6833065, 'state', state, false, false), 'index')) : J$.G(6833097, J$.R(6833089, 'state', state, false, false), 'index'), key, false, false);
                            J$.P(6833401, J$.G(6833121, J$.R(6833113, 'state', state, false, false), 'jobs'), J$.R(6833129, 'key', key, false, false), J$.F(6833393, J$.R(6833137, 'runJob', runJob, false, true), false)(J$.R(6833145, 'iterator', iterator, false, false), J$.R(6833153, 'key', key, false, false), J$.G(6833177, J$.R(6833161, 'list', list, false, false), J$.R(6833169, 'key', key, false, false)), J$.T(6833385, function (error, output) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6833353, arguments.callee, this, arguments);
                                            arguments = J$.N(6833361, 'arguments', arguments, true, false, false);
                                            error = J$.N(6833369, 'error', error, true, false, false);
                                            output = J$.N(6833377, 'output', output, true, false, false);
                                            if (J$.C(370352, J$.U(699842, '!', J$.B(699834, 'in', J$.R(6833185, 'key', key, false, false), J$.G(6833201, J$.R(6833193, 'state', state, false, false), 'jobs'))))) {
                                                return J$.Rt(6833209, undefined);
                                            }
                                            J$.B(699850, 'delete', J$.G(6833225, J$.R(6833217, 'state', state, false, false), 'jobs'), J$.R(6833233, 'key', key, false, false));
                                            if (J$.C(370360, J$.R(6833241, 'error', error, false, false))) {
                                                J$.F(6833265, J$.R(6833249, 'abort', abort, false, true), false)(J$.R(6833257, 'state', state, false, false));
                                            } else {
                                                J$.P(6833305, J$.G(6833281, J$.R(6833273, 'state', state, false, false), 'results'), J$.R(6833289, 'key', key, false, false), J$.R(6833297, 'output', output, false, false));
                                            }
                                            J$.F(6833345, J$.R(6833313, 'callback', callback, false, false), false)(J$.R(6833321, 'error', error, false, false), J$.G(6833337, J$.R(6833329, 'state', state, false, false), 'results'));
                                        } catch (J$e) {
                                            J$.Ex(6833737, J$e);
                                        } finally {
                                            if (J$.Fr(6833745))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(6833753, J$e);
                        } finally {
                            if (J$.Fr(6833761))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function runJob(iterator, key, item, callback) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(6833625, arguments.callee, this, arguments);
                            arguments = J$.N(6833633, 'arguments', arguments, true, false, false);
                            iterator = J$.N(6833641, 'iterator', iterator, true, false, false);
                            key = J$.N(6833649, 'key', key, true, false, false);
                            item = J$.N(6833657, 'item', item, true, false, false);
                            callback = J$.N(6833665, 'callback', callback, true, false, false);
                            J$.N(6833673, 'aborter', aborter, false, false, false);
                            var aborter;
                            if (J$.C(370368, J$.B(699858, '==', J$.G(6833473, J$.R(6833465, 'iterator', iterator, false, false), 'length'), J$.T(6833481, 2, 22, false)))) {
                                aborter = J$.W(6833537, 'aborter', J$.F(6833529, J$.R(6833489, 'iterator', iterator, false, false), false)(J$.R(6833497, 'item', item, false, false), J$.F(6833521, J$.R(6833505, 'async', async, false, true), false)(J$.R(6833513, 'callback', callback, false, false))), aborter, false, false);
                            } else {
                                aborter = J$.W(6833601, 'aborter', J$.F(6833593, J$.R(6833545, 'iterator', iterator, false, false), false)(J$.R(6833553, 'item', item, false, false), J$.R(6833561, 'key', key, false, false), J$.F(6833585, J$.R(6833569, 'async', async, false, true), false)(J$.R(6833577, 'callback', callback, false, false))), aborter, false, false);
                            }
                            return J$.Rt(6833617, J$.R(6833609, 'aborter', aborter, false, false));
                        } catch (J$e) {
                            J$.Ex(6833769, J$e);
                        } finally {
                            if (J$.Fr(6833777))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6833689, 'async', async, false, false, false);
            J$.N(6833697, 'abort', abort, false, false, false);
            iterate = J$.N(6833713, 'iterate', J$.T(6833705, iterate, 12, false), true, false, false);
            runJob = J$.N(6833729, 'runJob', J$.T(6833721, runJob, 12, false), true, false, false);
            var async = J$.W(6832977, 'async', J$.F(6832945, J$.I(typeof require === 'undefined' ? require = J$.R(6832929, 'require', undefined, true, true) : require = J$.R(6832929, 'require', require, true, true)), false)(J$.T(6832937, './async.js', 21, false)), async, false, true), abort = J$.W(6832985, 'abort', J$.F(6832969, J$.I(typeof require === 'undefined' ? require = J$.R(6832953, 'require', undefined, true, true) : require = J$.R(6832953, 'require', require, true, true)), false)(J$.T(6832961, './abort.js', 21, false)), abort, false, true);
            J$.P(6833009, J$.I(typeof module === 'undefined' ? module = J$.R(6832993, 'module', undefined, true, true) : module = J$.R(6832993, 'module', module, true, true)), 'exports', J$.R(6833001, 'iterate', iterate, false, true));
        } catch (J$e) {
            J$.Ex(6833785, J$e);
        } finally {
            if (J$.Sr(6833793))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

