J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(4436289, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/toNumber.js');
            function toNumber(value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4436225, arguments.callee, this, arguments);
                            arguments = J$.N(4436233, 'arguments', arguments, true, false, false);
                            value = J$.N(4436241, 'value', value, true, false, false);
                            J$.N(4436249, 'other', other, false, false, false);
                            J$.N(4436257, 'isBinary', isBinary, false, false, false);
                            if (J$.C(247048, J$.B(550530, '==', J$.U(550522, 'typeof', J$.R(4435745, 'value', value, false, false)), J$.T(4435753, 'number', 21, false)))) {
                                return J$.Rt(4435769, J$.R(4435761, 'value', value, false, false));
                            }
                            if (J$.C(247056, J$.F(4435793, J$.R(4435777, 'isSymbol', isSymbol, false, true), false)(J$.R(4435785, 'value', value, false, false)))) {
                                return J$.Rt(4435809, J$.R(4435801, 'NAN', NAN, false, true));
                            }
                            if (J$.C(247080, J$.F(4435833, J$.R(4435817, 'isObject', isObject, false, true), false)(J$.R(4435825, 'value', value, false, false)))) {
                                var other = J$.W(4435889, 'other', J$.C(247064, J$.B(550546, '==', J$.U(550538, 'typeof', J$.G(4435849, J$.R(4435841, 'value', value, false, false), 'valueOf')), J$.T(4435857, 'function', 21, false))) ? J$.M(4435873, J$.R(4435865, 'value', value, false, false), 'valueOf', false)() : J$.R(4435881, 'value', value, false, false), other, false, false);
                                value = J$.W(4435945, 'value', J$.C(247072, J$.F(4435913, J$.R(4435897, 'isObject', isObject, false, true), false)(J$.R(4435905, 'other', other, false, false))) ? J$.B(550554, '+', J$.R(4435921, 'other', other, false, false), J$.T(4435929, '', 21, false)) : J$.R(4435937, 'other', other, false, false), value, false, false);
                            }
                            if (J$.C(247096, J$.B(550570, '!=', J$.U(550562, 'typeof', J$.R(4435953, 'value', value, false, false)), J$.T(4435961, 'string', 21, false)))) {
                                return J$.Rt(4436001, J$.C(247088, J$.B(550578, '===', J$.R(4435969, 'value', value, false, false), J$.T(4435977, 0, 22, false))) ? J$.R(4435985, 'value', value, false, false) : J$.U(550586, '+', J$.R(4435993, 'value', value, false, false)));
                            }
                            value = J$.W(4436041, 'value', J$.M(4436033, J$.R(4436009, 'value', value, false, false), 'replace', false)(J$.R(4436017, 'reTrim', reTrim, false, true), J$.T(4436025, '', 21, false)), value, false, false);
                            var isBinary = J$.W(4436073, 'isBinary', J$.M(4436065, J$.R(4436049, 'reIsBinary', reIsBinary, false, true), 'test', false)(J$.R(4436057, 'value', value, false, false)), isBinary, false, false);
                            return J$.Rt(4436217, J$.C(247128, J$.C(247104, J$.R(4436081, 'isBinary', isBinary, false, false)) ? J$._() : J$.M(4436105, J$.R(4436089, 'reIsOctal', reIsOctal, false, true), 'test', false)(J$.R(4436097, 'value', value, false, false))) ? J$.F(4436169, J$.R(4436113, 'freeParseInt', freeParseInt, false, true), false)(J$.M(4436137, J$.R(4436121, 'value', value, false, false), 'slice', false)(J$.T(4436129, 2, 22, false)), J$.C(247112, J$.R(4436145, 'isBinary', isBinary, false, false)) ? J$.T(4436153, 2, 22, false) : J$.T(4436161, 8, 22, false)) : J$.C(247120, J$.M(4436193, J$.R(4436177, 'reIsBadHex', reIsBadHex, false, true), 'test', false)(J$.R(4436185, 'value', value, false, false))) ? J$.R(4436201, 'NAN', NAN, false, true) : J$.U(550594, '+', J$.R(4436209, 'value', value, false, false)));
                        } catch (J$e) {
                            J$.Ex(4436377, J$e);
                        } finally {
                            if (J$.Fr(4436385))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4436297, 'isObject', isObject, false, false, false);
            J$.N(4436305, 'isSymbol', isSymbol, false, false, false);
            J$.N(4436313, 'NAN', NAN, false, false, false);
            J$.N(4436321, 'reTrim', reTrim, false, false, false);
            J$.N(4436329, 'reIsBadHex', reIsBadHex, false, false, false);
            J$.N(4436337, 'reIsBinary', reIsBinary, false, false, false);
            J$.N(4436345, 'reIsOctal', reIsOctal, false, false, false);
            J$.N(4436353, 'freeParseInt', freeParseInt, false, false, false);
            toNumber = J$.N(4436369, 'toNumber', J$.T(4436361, toNumber, 12, false), true, false, false);
            var isObject = J$.W(4435625, 'isObject', J$.F(4435593, J$.I(typeof require === 'undefined' ? require = J$.R(4435577, 'require', undefined, true, true) : require = J$.R(4435577, 'require', require, true, true)), false)(J$.T(4435585, './isObject', 21, false)), isObject, false, true), isSymbol = J$.W(4435633, 'isSymbol', J$.F(4435617, J$.I(typeof require === 'undefined' ? require = J$.R(4435601, 'require', undefined, true, true) : require = J$.R(4435601, 'require', require, true, true)), false)(J$.T(4435609, './isSymbol', 21, false)), isSymbol, false, true);
            var NAN = J$.W(4435657, 'NAN', J$.B(550514, '/', J$.T(4435641, 0, 22, false), J$.T(4435649, 0, 22, false)), NAN, false, true);
            var reTrim = J$.W(4435673, 'reTrim', J$.T(4435665, /^\s+|\s+$/g, 14, false), reTrim, false, true);
            var reIsBadHex = J$.W(4435689, 'reIsBadHex', J$.T(4435681, /^[-+]0x[0-9a-f]+$/i, 14, false), reIsBadHex, false, true);
            var reIsBinary = J$.W(4435705, 'reIsBinary', J$.T(4435697, /^0b[01]+$/i, 14, false), reIsBinary, false, true);
            var reIsOctal = J$.W(4435721, 'reIsOctal', J$.T(4435713, /^0o[0-7]+$/i, 14, false), reIsOctal, false, true);
            var freeParseInt = J$.W(4435737, 'freeParseInt', J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(4435729, 'parseInt', undefined, true, true) : parseInt = J$.R(4435729, 'parseInt', parseInt, true, true)), freeParseInt, false, true);
            J$.P(4436281, J$.I(typeof module === 'undefined' ? module = J$.R(4436265, 'module', undefined, true, true) : module = J$.R(4436265, 'module', module, true, true)), 'exports', J$.R(4436273, 'toNumber', toNumber, false, true));
        } catch (J$e) {
            J$.Ex(4436393, J$e);
        } finally {
            if (J$.Sr(4436401))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

