J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(7617401, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/_baseMerge.js');
            function baseMerge(object, source, srcIndex, customizer, stack) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7617321, arguments.callee, this, arguments);
                            arguments = J$.N(7617329, 'arguments', arguments, true, false, false);
                            object = J$.N(7617337, 'object', object, true, false, false);
                            source = J$.N(7617345, 'source', source, true, false, false);
                            srcIndex = J$.N(7617353, 'srcIndex', srcIndex, true, false, false);
                            customizer = J$.N(7617361, 'customizer', customizer, true, false, false);
                            stack = J$.N(7617369, 'stack', stack, true, false, false);
                            if (J$.C(404736, J$.B(758458, '===', J$.R(7616897, 'object', object, false, false), J$.R(7616905, 'source', source, false, false)))) {
                                return J$.Rt(7616913, undefined);
                            }
                            J$.F(7617313, J$.R(7616921, 'baseFor', baseFor, false, true), false)(J$.R(7616929, 'source', source, false, false), J$.T(7617297, function (srcValue, key) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(7617257, arguments.callee, this, arguments);
                                            arguments = J$.N(7617265, 'arguments', arguments, true, false, false);
                                            srcValue = J$.N(7617273, 'srcValue', srcValue, true, false, false);
                                            key = J$.N(7617281, 'key', key, true, false, false);
                                            J$.N(7617289, 'newValue', newValue, false, false, false);
                                            J$.C(404744, J$.R(7616937, 'stack', stack, false, false)) ? J$._() : stack = J$.W(7616961, 'stack', J$.F(7616953, J$.R(7616945, 'Stack', Stack, false, true), true)(), stack, false, false);
                                            if (J$.C(404768, J$.F(7616985, J$.R(7616969, 'isObject', isObject, false, true), false)(J$.R(7616977, 'srcValue', srcValue, false, false)))) {
                                                J$.F(7617057, J$.R(7616993, 'baseMergeDeep', baseMergeDeep, false, true), false)(J$.R(7617001, 'object', object, false, false), J$.R(7617009, 'source', source, false, false), J$.R(7617017, 'key', key, false, false), J$.R(7617025, 'srcIndex', srcIndex, false, false), J$.R(7617033, 'baseMerge', baseMerge, false, true), J$.R(7617041, 'customizer', customizer, false, false), J$.R(7617049, 'stack', stack, false, false));
                                            } else {
                                                var newValue = J$.W(7617177, 'newValue', J$.C(404752, J$.R(7617065, 'customizer', customizer, false, false)) ? J$.F(7617161, J$.R(7617073, 'customizer', customizer, false, false), false)(J$.F(7617105, J$.R(7617081, 'safeGet', safeGet, false, true), false)(J$.R(7617089, 'object', object, false, false), J$.R(7617097, 'key', key, false, false)), J$.R(7617113, 'srcValue', srcValue, false, false), J$.B(758466, '+', J$.R(7617121, 'key', key, false, false), J$.T(7617129, '', 21, false)), J$.R(7617137, 'object', object, false, false), J$.R(7617145, 'source', source, false, false), J$.R(7617153, 'stack', stack, false, false)) : J$.T(7617169, undefined, 24, false), newValue, false, false);
                                                if (J$.C(404760, J$.B(758474, '===', J$.R(7617185, 'newValue', newValue, false, false), J$.T(7617193, undefined, 24, false)))) {
                                                    newValue = J$.W(7617209, 'newValue', J$.R(7617201, 'srcValue', srcValue, false, false), newValue, false, false);
                                                }
                                                J$.F(7617249, J$.R(7617217, 'assignMergeValue', assignMergeValue, false, true), false)(J$.R(7617225, 'object', object, false, false), J$.R(7617233, 'key', key, false, false), J$.R(7617241, 'newValue', newValue, false, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(7617481, J$e);
                                        } finally {
                                            if (J$.Fr(7617489))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.R(7617305, 'keysIn', keysIn, false, true));
                        } catch (J$e) {
                            J$.Ex(7617497, J$e);
                        } finally {
                            if (J$.Fr(7617505))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7617409, 'Stack', Stack, false, false, false);
            J$.N(7617417, 'assignMergeValue', assignMergeValue, false, false, false);
            J$.N(7617425, 'baseFor', baseFor, false, false, false);
            J$.N(7617433, 'baseMergeDeep', baseMergeDeep, false, false, false);
            J$.N(7617441, 'isObject', isObject, false, false, false);
            J$.N(7617449, 'keysIn', keysIn, false, false, false);
            J$.N(7617457, 'safeGet', safeGet, false, false, false);
            baseMerge = J$.N(7617473, 'baseMerge', J$.T(7617465, baseMerge, 12, false), true, false, false);
            var Stack = J$.W(7616841, 'Stack', J$.F(7616689, J$.I(typeof require === 'undefined' ? require = J$.R(7616673, 'require', undefined, true, true) : require = J$.R(7616673, 'require', require, true, true)), false)(J$.T(7616681, './_Stack', 21, false)), Stack, false, true), assignMergeValue = J$.W(7616849, 'assignMergeValue', J$.F(7616713, J$.I(typeof require === 'undefined' ? require = J$.R(7616697, 'require', undefined, true, true) : require = J$.R(7616697, 'require', require, true, true)), false)(J$.T(7616705, './_assignMergeValue', 21, false)), assignMergeValue, false, true), baseFor = J$.W(7616857, 'baseFor', J$.F(7616737, J$.I(typeof require === 'undefined' ? require = J$.R(7616721, 'require', undefined, true, true) : require = J$.R(7616721, 'require', require, true, true)), false)(J$.T(7616729, './_baseFor', 21, false)), baseFor, false, true), baseMergeDeep = J$.W(7616865, 'baseMergeDeep', J$.F(7616761, J$.I(typeof require === 'undefined' ? require = J$.R(7616745, 'require', undefined, true, true) : require = J$.R(7616745, 'require', require, true, true)), false)(J$.T(7616753, './_baseMergeDeep', 21, false)), baseMergeDeep, false, true), isObject = J$.W(7616873, 'isObject', J$.F(7616785, J$.I(typeof require === 'undefined' ? require = J$.R(7616769, 'require', undefined, true, true) : require = J$.R(7616769, 'require', require, true, true)), false)(J$.T(7616777, './isObject', 21, false)), isObject, false, true), keysIn = J$.W(7616881, 'keysIn', J$.F(7616809, J$.I(typeof require === 'undefined' ? require = J$.R(7616793, 'require', undefined, true, true) : require = J$.R(7616793, 'require', require, true, true)), false)(J$.T(7616801, './keysIn', 21, false)), keysIn, false, true), safeGet = J$.W(7616889, 'safeGet', J$.F(7616833, J$.I(typeof require === 'undefined' ? require = J$.R(7616817, 'require', undefined, true, true) : require = J$.R(7616817, 'require', require, true, true)), false)(J$.T(7616825, './_safeGet', 21, false)), safeGet, false, true);
            J$.P(7617393, J$.I(typeof module === 'undefined' ? module = J$.R(7617377, 'module', undefined, true, true) : module = J$.R(7617377, 'module', module, true, true)), 'exports', J$.R(7617385, 'baseMerge', baseMerge, false, true));
        } catch (J$e) {
            J$.Ex(7617513, J$e);
        } finally {
            if (J$.Sr(7617521))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

