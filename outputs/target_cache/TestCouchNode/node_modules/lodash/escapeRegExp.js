J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(7803857, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/escapeRegExp.js');
            function escapeRegExp(string) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7803809, arguments.callee, this, arguments);
                            arguments = J$.N(7803817, 'arguments', arguments, true, false, false);
                            string = J$.N(7803825, 'string', string, true, false, false);
                            string = J$.W(7803721, 'string', J$.F(7803713, J$.R(7803697, 'toString', toString, false, true), false)(J$.R(7803705, 'string', string, false, false)), string, false, false);
                            return J$.Rt(7803801, J$.C(416128, J$.C(416120, J$.R(7803729, 'string', string, false, false)) ? J$.M(7803753, J$.R(7803737, 'reHasRegExpChar', reHasRegExpChar, false, true), 'test', false)(J$.R(7803745, 'string', string, false, false)) : J$._()) ? J$.M(7803785, J$.R(7803761, 'string', string, false, false), 'replace', false)(J$.R(7803769, 'reRegExpChar', reRegExpChar, false, true), J$.T(7803777, '\\$&', 21, false)) : J$.R(7803793, 'string', string, false, false));
                        } catch (J$e) {
                            J$.Ex(7803905, J$e);
                        } finally {
                            if (J$.Fr(7803913))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7803865, 'toString', toString, false, false, false);
            J$.N(7803873, 'reRegExpChar', reRegExpChar, false, false, false);
            J$.N(7803881, 'reHasRegExpChar', reHasRegExpChar, false, false, false);
            escapeRegExp = J$.N(7803897, 'escapeRegExp', J$.T(7803889, escapeRegExp, 12, false), true, false, false);
            var toString = J$.W(7803633, 'toString', J$.F(7803625, J$.I(typeof require === 'undefined' ? require = J$.R(7803609, 'require', undefined, true, true) : require = J$.R(7803609, 'require', require, true, true)), false)(J$.T(7803617, './toString', 21, false)), toString, false, true);
            var reRegExpChar = J$.W(7803681, 'reRegExpChar', J$.T(7803641, /[\\^$.*+?()[\]{}|]/g, 14, false), reRegExpChar, false, true), reHasRegExpChar = J$.W(7803689, 'reHasRegExpChar', J$.F(7803673, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(7803649, 'RegExp', undefined, true, true) : RegExp = J$.R(7803649, 'RegExp', RegExp, true, true)), false)(J$.G(7803665, J$.R(7803657, 'reRegExpChar', reRegExpChar, false, true), 'source')), reHasRegExpChar, false, true);
            J$.P(7803849, J$.I(typeof module === 'undefined' ? module = J$.R(7803833, 'module', undefined, true, true) : module = J$.R(7803833, 'module', module, true, true)), 'exports', J$.R(7803841, 'escapeRegExp', escapeRegExp, false, true));
        } catch (J$e) {
            J$.Ex(7803921, J$e);
        } finally {
            if (J$.Sr(7803929))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

