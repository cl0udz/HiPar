J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(7586577, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/_assignMergeValue.js');
            function assignMergeValue(object, key, value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7586513, arguments.callee, this, arguments);
                            arguments = J$.N(7586521, 'arguments', arguments, true, false, false);
                            object = J$.N(7586529, 'object', object, true, false, false);
                            key = J$.N(7586537, 'key', key, true, false, false);
                            value = J$.N(7586545, 'value', value, true, false, false);
                            if (J$.C(403096, J$.C(403088, J$.C(403072, J$.B(756762, '!==', J$.R(7586377, 'value', value, false, false), J$.T(7586385, undefined, 24, false))) ? J$.U(756770, '!', J$.F(7586433, J$.R(7586393, 'eq', eq, false, true), false)(J$.G(7586417, J$.R(7586401, 'object', object, false, false), J$.R(7586409, 'key', key, false, false)), J$.R(7586425, 'value', value, false, false))) : J$._()) ? J$._() : J$.C(403080, J$.B(756778, '===', J$.R(7586441, 'value', value, false, false), J$.T(7586449, undefined, 24, false))) ? J$.U(756794, '!', J$.B(756786, 'in', J$.R(7586457, 'key', key, false, false), J$.R(7586465, 'object', object, false, false))) : J$._())) {
                                J$.F(7586505, J$.R(7586473, 'baseAssignValue', baseAssignValue, false, true), false)(J$.R(7586481, 'object', object, false, false), J$.R(7586489, 'key', key, false, false), J$.R(7586497, 'value', value, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(7586617, J$e);
                        } finally {
                            if (J$.Fr(7586625))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7586585, 'baseAssignValue', baseAssignValue, false, false, false);
            J$.N(7586593, 'eq', eq, false, false, false);
            assignMergeValue = J$.N(7586609, 'assignMergeValue', J$.T(7586601, assignMergeValue, 12, false), true, false, false);
            var baseAssignValue = J$.W(7586361, 'baseAssignValue', J$.F(7586329, J$.I(typeof require === 'undefined' ? require = J$.R(7586313, 'require', undefined, true, true) : require = J$.R(7586313, 'require', require, true, true)), false)(J$.T(7586321, './_baseAssignValue', 21, false)), baseAssignValue, false, true), eq = J$.W(7586369, 'eq', J$.F(7586353, J$.I(typeof require === 'undefined' ? require = J$.R(7586337, 'require', undefined, true, true) : require = J$.R(7586337, 'require', require, true, true)), false)(J$.T(7586345, './eq', 21, false)), eq, false, true);
            J$.P(7586569, J$.I(typeof module === 'undefined' ? module = J$.R(7586553, 'module', undefined, true, true) : module = J$.R(7586553, 'module', module, true, true)), 'exports', J$.R(7586561, 'assignMergeValue', assignMergeValue, false, true));
        } catch (J$e) {
            J$.Ex(7586633, J$e);
        } finally {
            if (J$.Sr(7586641))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

