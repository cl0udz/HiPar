J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(7666297, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/_createWrap.js');
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7666129, arguments.callee, this, arguments);
                            arguments = J$.N(7666137, 'arguments', arguments, true, false, false);
                            func = J$.N(7666145, 'func', func, true, false, false);
                            bitmask = J$.N(7666153, 'bitmask', bitmask, true, false, false);
                            thisArg = J$.N(7666161, 'thisArg', thisArg, true, false, false);
                            partials = J$.N(7666169, 'partials', partials, true, false, false);
                            holders = J$.N(7666177, 'holders', holders, true, false, false);
                            argPos = J$.N(7666185, 'argPos', argPos, true, false, false);
                            ary = J$.N(7666193, 'ary', ary, true, false, false);
                            arity = J$.N(7666201, 'arity', arity, true, false, false);
                            J$.N(7666209, 'isBindKey', isBindKey, false, false, false);
                            J$.N(7666217, 'length', length, false, false, false);
                            J$.N(7666225, 'partialsRight', partialsRight, false, false, false);
                            J$.N(7666233, 'holdersRight', holdersRight, false, false, false);
                            J$.N(7666241, 'data', data, false, false, false);
                            J$.N(7666249, 'newData', newData, false, false, false);
                            J$.N(7666257, 'result', result, false, false, false);
                            J$.N(7666265, 'setter', setter, false, false, false);
                            var isBindKey = J$.W(7664745, 'isBindKey', J$.B(762178, '&', J$.R(7664729, 'bitmask', bitmask, false, false), J$.R(7664737, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, true)), isBindKey, false, false);
                            if (J$.C(407648, J$.C(407640, J$.U(762186, '!', J$.R(7664753, 'isBindKey', isBindKey, false, false))) ? J$.B(762202, '!=', J$.U(762194, 'typeof', J$.R(7664761, 'func', func, false, false)), J$.T(7664769, 'function', 21, false)) : J$._())) {
                                throw J$.F(7664793, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(7664777, 'TypeError', undefined, true, true) : TypeError = J$.R(7664777, 'TypeError', TypeError, true, true)), true)(J$.R(7664785, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, true));
                            }
                            var length = J$.W(7664833, 'length', J$.C(407656, J$.R(7664801, 'partials', partials, false, false)) ? J$.G(7664817, J$.R(7664809, 'partials', partials, false, false), 'length') : J$.T(7664825, 0, 22, false), length, false, false);
                            if (J$.C(407664, J$.U(762210, '!', J$.R(7664841, 'length', length, false, false)))) {
                                bitmask = J$.W(7664873, 'bitmask', J$.B(762234, '&', J$.R(7664865, 'bitmask', bitmask, false, false), J$.U(762226, '~', J$.B(762218, '|', J$.R(7664849, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true), J$.R(7664857, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))), bitmask, false, false);
                                partials = J$.W(7664897, 'partials', holders = J$.W(7664889, 'holders', J$.T(7664881, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            ary = J$.W(7664977, 'ary', J$.C(407672, J$.B(762242, '===', J$.R(7664905, 'ary', ary, false, false), J$.T(7664913, undefined, 24, false))) ? J$.R(7664921, 'ary', ary, false, false) : J$.F(7664969, J$.R(7664929, 'nativeMax', nativeMax, false, true), false)(J$.F(7664953, J$.R(7664937, 'toInteger', toInteger, false, true), false)(J$.R(7664945, 'ary', ary, false, false)), J$.T(7664961, 0, 22, false)), ary, false, false);
                            arity = J$.W(7665033, 'arity', J$.C(407680, J$.B(762250, '===', J$.R(7664985, 'arity', arity, false, false), J$.T(7664993, undefined, 24, false))) ? J$.R(7665001, 'arity', arity, false, false) : J$.F(7665025, J$.R(7665009, 'toInteger', toInteger, false, true), false)(J$.R(7665017, 'arity', arity, false, false)), arity, false, false);
                            length = J$.W(7665081, 'length', J$.B(762258, '-', J$.R(7665073, 'length', length, false, false), J$.C(407688, J$.R(7665041, 'holders', holders, false, false)) ? J$.G(7665057, J$.R(7665049, 'holders', holders, false, false), 'length') : J$.T(7665065, 0, 22, false)), length, false, false);
                            if (J$.C(407696, J$.B(762266, '&', J$.R(7665089, 'bitmask', bitmask, false, false), J$.R(7665097, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))) {
                                var partialsRight = J$.W(7665121, 'partialsRight', J$.R(7665105, 'partials', partials, false, false), partialsRight, false, false), holdersRight = J$.W(7665129, 'holdersRight', J$.R(7665113, 'holders', holders, false, false), holdersRight, false, false);
                                partials = J$.W(7665153, 'partials', holders = J$.W(7665145, 'holders', J$.T(7665137, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            var data = J$.W(7665201, 'data', J$.C(407704, J$.R(7665161, 'isBindKey', isBindKey, false, false)) ? J$.T(7665169, undefined, 24, false) : J$.F(7665193, J$.R(7665177, 'getData', getData, false, true), false)(J$.R(7665185, 'func', func, false, false)), data, false, false);
                            var newData = J$.W(7665297, 'newData', J$.T(7665289, [
                                J$.R(7665209, 'func', func, false, false),
                                J$.R(7665217, 'bitmask', bitmask, false, false),
                                J$.R(7665225, 'thisArg', thisArg, false, false),
                                J$.R(7665233, 'partials', partials, false, false),
                                J$.R(7665241, 'holders', holders, false, false),
                                J$.R(7665249, 'partialsRight', partialsRight, false, false),
                                J$.R(7665257, 'holdersRight', holdersRight, false, false),
                                J$.R(7665265, 'argPos', argPos, false, false),
                                J$.R(7665273, 'ary', ary, false, false),
                                J$.R(7665281, 'arity', arity, false, false)
                            ], 10, false), newData, false, false);
                            if (J$.C(407712, J$.R(7665305, 'data', data, false, false))) {
                                J$.F(7665337, J$.R(7665313, 'mergeData', mergeData, false, true), false)(J$.R(7665321, 'newData', newData, false, false), J$.R(7665329, 'data', data, false, false));
                            }
                            func = J$.W(7665369, 'func', J$.G(7665361, J$.R(7665345, 'newData', newData, false, false), J$.T(7665353, 0, 22, false)), func, false, false);
                            bitmask = J$.W(7665401, 'bitmask', J$.G(7665393, J$.R(7665377, 'newData', newData, false, false), J$.T(7665385, 1, 22, false)), bitmask, false, false);
                            thisArg = J$.W(7665433, 'thisArg', J$.G(7665425, J$.R(7665409, 'newData', newData, false, false), J$.T(7665417, 2, 22, false)), thisArg, false, false);
                            partials = J$.W(7665465, 'partials', J$.G(7665457, J$.R(7665441, 'newData', newData, false, false), J$.T(7665449, 3, 22, false)), partials, false, false);
                            holders = J$.W(7665497, 'holders', J$.G(7665489, J$.R(7665473, 'newData', newData, false, false), J$.T(7665481, 4, 22, false)), holders, false, false);
                            arity = J$.W(7665649, 'arity', J$.P(7665641, J$.R(7665505, 'newData', newData, false, false), J$.T(7665513, 9, 22, false), J$.C(407728, J$.B(762274, '===', J$.G(7665537, J$.R(7665521, 'newData', newData, false, false), J$.T(7665529, 9, 22, false)), J$.T(7665545, undefined, 24, false))) ? J$.C(407720, J$.R(7665553, 'isBindKey', isBindKey, false, false)) ? J$.T(7665561, 0, 22, false) : J$.G(7665577, J$.R(7665569, 'func', func, false, false), 'length') : J$.F(7665633, J$.R(7665585, 'nativeMax', nativeMax, false, true), false)(J$.B(762282, '-', J$.G(7665609, J$.R(7665593, 'newData', newData, false, false), J$.T(7665601, 9, 22, false)), J$.R(7665617, 'length', length, false, false)), J$.T(7665625, 0, 22, false))), arity, false, false);
                            if (J$.C(407744, J$.C(407736, J$.U(762290, '!', J$.R(7665657, 'arity', arity, false, false))) ? J$.B(762306, '&', J$.R(7665665, 'bitmask', bitmask, false, false), J$.B(762298, '|', J$.R(7665673, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(7665681, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true))) : J$._())) {
                                bitmask = J$.W(7665713, 'bitmask', J$.B(762330, '&', J$.R(7665705, 'bitmask', bitmask, false, false), J$.U(762322, '~', J$.B(762314, '|', J$.R(7665689, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(7665697, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))), bitmask, false, false);
                            }
                            if (J$.C(407800, J$.C(407752, J$.U(762338, '!', J$.R(7665721, 'bitmask', bitmask, false, false))) ? J$._() : J$.B(762346, '==', J$.R(7665729, 'bitmask', bitmask, false, false), J$.R(7665737, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true)))) {
                                var result = J$.W(7665785, 'result', J$.F(7665777, J$.R(7665745, 'createBind', createBind, false, true), false)(J$.R(7665753, 'func', func, false, false), J$.R(7665761, 'bitmask', bitmask, false, false), J$.R(7665769, 'thisArg', thisArg, false, false)), result, false, false);
                            } else if (J$.C(407792, J$.C(407760, J$.B(762354, '==', J$.R(7665793, 'bitmask', bitmask, false, false), J$.R(7665801, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true))) ? J$._() : J$.B(762362, '==', J$.R(7665809, 'bitmask', bitmask, false, false), J$.R(7665817, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))) {
                                result = J$.W(7665865, 'result', J$.F(7665857, J$.R(7665825, 'createCurry', createCurry, false, true), false)(J$.R(7665833, 'func', func, false, false), J$.R(7665841, 'bitmask', bitmask, false, false), J$.R(7665849, 'arity', arity, false, false)), result, false, false);
                            } else if (J$.C(407784, J$.C(407776, J$.C(407768, J$.B(762370, '==', J$.R(7665873, 'bitmask', bitmask, false, false), J$.R(7665881, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true))) ? J$._() : J$.B(762386, '==', J$.R(7665889, 'bitmask', bitmask, false, false), J$.B(762378, '|', J$.R(7665897, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true), J$.R(7665905, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true)))) ? J$.U(762394, '!', J$.G(7665921, J$.R(7665913, 'holders', holders, false, false), 'length')) : J$._())) {
                                result = J$.W(7665977, 'result', J$.F(7665969, J$.R(7665929, 'createPartial', createPartial, false, true), false)(J$.R(7665937, 'func', func, false, false), J$.R(7665945, 'bitmask', bitmask, false, false), J$.R(7665953, 'thisArg', thisArg, false, false), J$.R(7665961, 'partials', partials, false, false)), result, false, false);
                            } else {
                                result = J$.W(7666017, 'result', J$.M(7666009, J$.R(7665985, 'createHybrid', createHybrid, false, true), 'apply', false)(J$.T(7665993, undefined, 24, false), J$.R(7666001, 'newData', newData, false, false)), result, false, false);
                            }
                            var setter = J$.W(7666049, 'setter', J$.C(407808, J$.R(7666025, 'data', data, false, false)) ? J$.R(7666033, 'baseSetData', baseSetData, false, true) : J$.R(7666041, 'setData', setData, false, true), setter, false, false);
                            return J$.Rt(7666121, J$.F(7666113, J$.R(7666057, 'setWrapToString', setWrapToString, false, true), false)(J$.F(7666089, J$.R(7666065, 'setter', setter, false, false), false)(J$.R(7666073, 'result', result, false, false), J$.R(7666081, 'newData', newData, false, false)), J$.R(7666097, 'func', func, false, false), J$.R(7666105, 'bitmask', bitmask, false, false)));
                        } catch (J$e) {
                            J$.Ex(7666465, J$e);
                        } finally {
                            if (J$.Fr(7666473))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7666305, 'baseSetData', baseSetData, false, false, false);
            J$.N(7666313, 'createBind', createBind, false, false, false);
            J$.N(7666321, 'createCurry', createCurry, false, false, false);
            J$.N(7666329, 'createHybrid', createHybrid, false, false, false);
            J$.N(7666337, 'createPartial', createPartial, false, false, false);
            J$.N(7666345, 'getData', getData, false, false, false);
            J$.N(7666353, 'mergeData', mergeData, false, false, false);
            J$.N(7666361, 'setData', setData, false, false, false);
            J$.N(7666369, 'setWrapToString', setWrapToString, false, false, false);
            J$.N(7666377, 'toInteger', toInteger, false, false, false);
            J$.N(7666385, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, false, false);
            J$.N(7666393, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, false, false);
            J$.N(7666401, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, false, false);
            J$.N(7666409, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, false, false);
            J$.N(7666417, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, false, false);
            J$.N(7666425, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, false, false);
            J$.N(7666433, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, false, false);
            J$.N(7666441, 'nativeMax', nativeMax, false, false, false);
            createWrap = J$.N(7666457, 'createWrap', J$.T(7666449, createWrap, 12, false), true, false, false);
            var baseSetData = J$.W(7664513, 'baseSetData', J$.F(7664289, J$.I(typeof require === 'undefined' ? require = J$.R(7664273, 'require', undefined, true, true) : require = J$.R(7664273, 'require', require, true, true)), false)(J$.T(7664281, './_baseSetData', 21, false)), baseSetData, false, true), createBind = J$.W(7664521, 'createBind', J$.F(7664313, J$.I(typeof require === 'undefined' ? require = J$.R(7664297, 'require', undefined, true, true) : require = J$.R(7664297, 'require', require, true, true)), false)(J$.T(7664305, './_createBind', 21, false)), createBind, false, true), createCurry = J$.W(7664529, 'createCurry', J$.F(7664337, J$.I(typeof require === 'undefined' ? require = J$.R(7664321, 'require', undefined, true, true) : require = J$.R(7664321, 'require', require, true, true)), false)(J$.T(7664329, './_createCurry', 21, false)), createCurry, false, true), createHybrid = J$.W(7664537, 'createHybrid', J$.F(7664361, J$.I(typeof require === 'undefined' ? require = J$.R(7664345, 'require', undefined, true, true) : require = J$.R(7664345, 'require', require, true, true)), false)(J$.T(7664353, './_createHybrid', 21, false)), createHybrid, false, true), createPartial = J$.W(7664545, 'createPartial', J$.F(7664385, J$.I(typeof require === 'undefined' ? require = J$.R(7664369, 'require', undefined, true, true) : require = J$.R(7664369, 'require', require, true, true)), false)(J$.T(7664377, './_createPartial', 21, false)), createPartial, false, true), getData = J$.W(7664553, 'getData', J$.F(7664409, J$.I(typeof require === 'undefined' ? require = J$.R(7664393, 'require', undefined, true, true) : require = J$.R(7664393, 'require', require, true, true)), false)(J$.T(7664401, './_getData', 21, false)), getData, false, true), mergeData = J$.W(7664561, 'mergeData', J$.F(7664433, J$.I(typeof require === 'undefined' ? require = J$.R(7664417, 'require', undefined, true, true) : require = J$.R(7664417, 'require', require, true, true)), false)(J$.T(7664425, './_mergeData', 21, false)), mergeData, false, true), setData = J$.W(7664569, 'setData', J$.F(7664457, J$.I(typeof require === 'undefined' ? require = J$.R(7664441, 'require', undefined, true, true) : require = J$.R(7664441, 'require', require, true, true)), false)(J$.T(7664449, './_setData', 21, false)), setData, false, true), setWrapToString = J$.W(7664577, 'setWrapToString', J$.F(7664481, J$.I(typeof require === 'undefined' ? require = J$.R(7664465, 'require', undefined, true, true) : require = J$.R(7664465, 'require', require, true, true)), false)(J$.T(7664473, './_setWrapToString', 21, false)), setWrapToString, false, true), toInteger = J$.W(7664585, 'toInteger', J$.F(7664505, J$.I(typeof require === 'undefined' ? require = J$.R(7664489, 'require', undefined, true, true) : require = J$.R(7664489, 'require', require, true, true)), false)(J$.T(7664497, './toInteger', 21, false)), toInteger, false, true);
            var FUNC_ERROR_TEXT = J$.W(7664601, 'FUNC_ERROR_TEXT', J$.T(7664593, 'Expected a function', 21, false), FUNC_ERROR_TEXT, false, true);
            var WRAP_BIND_FLAG = J$.W(7664657, 'WRAP_BIND_FLAG', J$.T(7664609, 1, 22, false), WRAP_BIND_FLAG, false, true), WRAP_BIND_KEY_FLAG = J$.W(7664665, 'WRAP_BIND_KEY_FLAG', J$.T(7664617, 2, 22, false), WRAP_BIND_KEY_FLAG, false, true), WRAP_CURRY_FLAG = J$.W(7664673, 'WRAP_CURRY_FLAG', J$.T(7664625, 8, 22, false), WRAP_CURRY_FLAG, false, true), WRAP_CURRY_RIGHT_FLAG = J$.W(7664681, 'WRAP_CURRY_RIGHT_FLAG', J$.T(7664633, 16, 22, false), WRAP_CURRY_RIGHT_FLAG, false, true), WRAP_PARTIAL_FLAG = J$.W(7664689, 'WRAP_PARTIAL_FLAG', J$.T(7664641, 32, 22, false), WRAP_PARTIAL_FLAG, false, true), WRAP_PARTIAL_RIGHT_FLAG = J$.W(7664697, 'WRAP_PARTIAL_RIGHT_FLAG', J$.T(7664649, 64, 22, false), WRAP_PARTIAL_RIGHT_FLAG, false, true);
            var nativeMax = J$.W(7664721, 'nativeMax', J$.G(7664713, J$.I(typeof Math === 'undefined' ? Math = J$.R(7664705, 'Math', undefined, true, true) : Math = J$.R(7664705, 'Math', Math, true, true)), 'max'), nativeMax, false, true);
            J$.P(7666289, J$.I(typeof module === 'undefined' ? module = J$.R(7666273, 'module', undefined, true, true) : module = J$.R(7666273, 'module', module, true, true)), 'exports', J$.R(7666281, 'createWrap', createWrap, false, true));
        } catch (J$e) {
            J$.Ex(7666481, J$e);
        } finally {
            if (J$.Sr(7666489))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

