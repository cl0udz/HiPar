J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(4405193, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/lodash/parseInt.js');
            function parseInt(string, radix, guard) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4405129, arguments.callee, this, arguments);
                            arguments = J$.N(4405137, 'arguments', arguments, true, false, false);
                            string = J$.N(4405145, 'string', string, true, false, false);
                            radix = J$.N(4405153, 'radix', radix, true, false, false);
                            guard = J$.N(4405161, 'guard', guard, true, false, false);
                            if (J$.C(245656, J$.C(245640, J$.R(4404977, 'guard', guard, false, false)) ? J$._() : J$.B(549170, '==', J$.R(4404985, 'radix', radix, false, false), J$.T(4404993, null, 25, false)))) {
                                radix = J$.W(4405009, 'radix', J$.T(4405001, 0, 22, false), radix, false, false);
                            } else if (J$.C(245648, J$.R(4405017, 'radix', radix, false, false))) {
                                radix = J$.W(4405033, 'radix', J$.U(549178, '+', J$.R(4405025, 'radix', radix, false, false)), radix, false, false);
                            }
                            return J$.Rt(4405121, J$.F(4405113, J$.R(4405041, 'nativeParseInt', nativeParseInt, false, true), false)(J$.M(4405089, J$.F(4405065, J$.R(4405049, 'toString', toString, false, true), false)(J$.R(4405057, 'string', string, false, false)), 'replace', false)(J$.R(4405073, 'reTrimStart', reTrimStart, false, true), J$.T(4405081, '', 21, false)), J$.C(245664, J$.R(4405097, 'radix', radix, false, false)) ? J$._() : J$.T(4405105, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(4405249, J$e);
                        } finally {
                            if (J$.Fr(4405257))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4405201, 'root', root, false, false, false);
            J$.N(4405209, 'toString', toString, false, false, false);
            J$.N(4405217, 'reTrimStart', reTrimStart, false, false, false);
            J$.N(4405225, 'nativeParseInt', nativeParseInt, false, false, false);
            parseInt = J$.N(4405241, 'parseInt', J$.T(4405233, parseInt, 12, false), true, false, false);
            var root = J$.W(4404921, 'root', J$.F(4404889, J$.I(typeof require === 'undefined' ? require = J$.R(4404873, 'require', undefined, true, true) : require = J$.R(4404873, 'require', require, true, true)), false)(J$.T(4404881, './_root', 21, false)), root, false, true), toString = J$.W(4404929, 'toString', J$.F(4404913, J$.I(typeof require === 'undefined' ? require = J$.R(4404897, 'require', undefined, true, true) : require = J$.R(4404897, 'require', require, true, true)), false)(J$.T(4404905, './toString', 21, false)), toString, false, true);
            var reTrimStart = J$.W(4404945, 'reTrimStart', J$.T(4404937, /^\s+/, 14, false), reTrimStart, false, true);
            var nativeParseInt = J$.W(4404969, 'nativeParseInt', J$.G(4404961, J$.R(4404953, 'root', root, false, true), 'parseInt'), nativeParseInt, false, true);
            J$.P(4405185, J$.I(typeof module === 'undefined' ? module = J$.R(4405169, 'module', undefined, true, true) : module = J$.R(4405169, 'module', module, true, true)), 'exports', J$.R(4405177, 'parseInt', parseInt, false, true));
        } catch (J$e) {
            J$.Ex(4405265, J$e);
        } finally {
            if (J$.Sr(4405273))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

