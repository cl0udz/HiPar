J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(5921513, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/winston/test/transports/file-create-dir-test.js');
            J$.N(5921521, 'fs', fs, false, false, false);
            J$.N(5921529, 'assert', assert, false, false, false);
            J$.N(5921537, 'path', path, false, false, false);
            J$.N(5921545, 'winston', winston, false, false, false);
            J$.T(5920785, 'use strict', 21, false);
            const fs = J$.W(5920817, 'fs', J$.F(5920809, J$.I(typeof require === 'undefined' ? require = J$.R(5920793, 'require', undefined, true, true) : require = J$.R(5920793, 'require', require, true, true)), false)(J$.T(5920801, 'fs', 21, false)), fs, false, true);
            const assert = J$.W(5920849, 'assert', J$.F(5920841, J$.I(typeof require === 'undefined' ? require = J$.R(5920825, 'require', undefined, true, true) : require = J$.R(5920825, 'require', require, true, true)), false)(J$.T(5920833, 'assert', 21, false)), assert, false, true);
            const path = J$.W(5920881, 'path', J$.F(5920873, J$.I(typeof require === 'undefined' ? require = J$.R(5920857, 'require', undefined, true, true) : require = J$.R(5920857, 'require', require, true, true)), false)(J$.T(5920865, 'path', 21, false)), path, false, true);
            const winston = J$.W(5920913, 'winston', J$.F(5920905, J$.I(typeof require === 'undefined' ? require = J$.R(5920889, 'require', undefined, true, true) : require = J$.R(5920889, 'require', require, true, true)), false)(J$.T(5920897, '../../lib/winston', 21, false)), winston, false, true);
            J$.F(5921505, J$.I(typeof describe === 'undefined' ? describe = J$.R(5920921, 'describe', undefined, true, true) : describe = J$.R(5920921, 'describe', describe, true, true)), false)(J$.T(5920929, 'winston/transports/file/createLogDir', 21, false), J$.T(5921497, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5921473, arguments.callee, this, arguments);
                            arguments = J$.N(5921481, 'arguments', arguments, true, false, false);
                            J$.N(5921489, 'logDir', logDir, false, false, false);
                            const logDir = J$.W(5920969, 'logDir', J$.M(5920961, J$.R(5920937, 'path', path, false, true), 'resolve', false)(J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(5920945, '__dirname', undefined, true, true) : __dirname = J$.R(5920945, '__dirname', __dirname, true, true)), J$.T(5920953, '../fixtures/temp_logs', 21, false)), logDir, false, false);
                            J$.F(5921033, J$.I(typeof beforeEach === 'undefined' ? beforeEach = J$.R(5920977, 'beforeEach', undefined, true, true) : beforeEach = J$.R(5920977, 'beforeEach', beforeEach, true, true)), false)(J$.T(5921025, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(5921009, arguments.callee, this, arguments);
                                            arguments = J$.N(5921017, 'arguments', arguments, true, false, false);
                                            J$.M(5921001, J$.R(5920985, 'fs', fs, false, true), 'rmdirSync', false)(J$.R(5920993, 'logDir', logDir, false, false));
                                        } catch (J$e) {
                                            J$.Ex(5921553, J$e);
                                        } finally {
                                            if (J$.Fr(5921561))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(5921217, J$.I(typeof it === 'undefined' ? it = J$.R(5921041, 'it', undefined, true, true) : it = J$.R(5921041, 'it', it, true, true)), false)(J$.T(5921049, 'should create directory if it does not exist', 21, false), J$.T(5921209, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(5921193, arguments.callee, this, arguments);
                                            arguments = J$.N(5921201, 'arguments', arguments, true, false, false);
                                            J$.M(5921145, J$.R(5921057, 'winston', winston, false, true), 'createLogger', false)(J$.T(5921137, { transports: J$.T(5921129, [J$.M(5921121, J$.G(5921073, J$.R(5921065, 'winston', winston, false, true), 'transports'), 'File', true)(J$.T(5921113, { filename: J$.M(5921105, J$.R(5921081, 'path', path, false, true), 'join', false)(J$.R(5921089, 'logDir', logDir, false, false), J$.T(5921097, 'file.log', 21, false)) }, 11, false))], 10, false) }, 11, false));
                                            J$.F(5921185, J$.R(5921153, 'assert', assert, false, true), false)(J$.M(5921177, J$.R(5921161, 'fs', fs, false, true), 'existsSync', false)(J$.R(5921169, 'logDir', logDir, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5921569, J$e);
                                        } finally {
                                            if (J$.Fr(5921577))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(5921465, J$.I(typeof it === 'undefined' ? it = J$.R(5921225, 'it', undefined, true, true) : it = J$.R(5921225, 'it', it, true, true)), false)(J$.T(5921233, 'should create directory if it does not exist when write to the stream', 21, false), J$.T(5921457, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(5921425, arguments.callee, this, arguments);
                                            arguments = J$.N(5921433, 'arguments', arguments, true, false, false);
                                            J$.N(5921441, 'streamfile', streamfile, false, false, false);
                                            J$.N(5921449, 'stream', stream, false, false, false);
                                            const streamfile = J$.W(5921273, 'streamfile', J$.M(5921265, J$.R(5921241, 'path', path, false, true), 'join', false)(J$.R(5921249, 'logDir', logDir, false, false), J$.T(5921257, 'simple-stream.log', 21, false)), streamfile, false, false);
                                            const stream = J$.W(5921305, 'stream', J$.M(5921297, J$.R(5921281, 'fs', fs, false, true), 'createWriteStream', false)(J$.R(5921289, 'streamfile', streamfile, false, false)), stream, false, false);
                                            J$.M(5921377, J$.R(5921313, 'winston', winston, false, true), 'createLogger', false)(J$.T(5921369, { transports: J$.T(5921361, [J$.M(5921353, J$.G(5921329, J$.R(5921321, 'winston', winston, false, true), 'transports'), 'File', true)(J$.T(5921345, { stream: J$.R(5921337, 'stream', stream, false, false) }, 11, false))], 10, false) }, 11, false));
                                            J$.F(5921417, J$.R(5921385, 'assert', assert, false, true), false)(J$.M(5921409, J$.R(5921393, 'fs', fs, false, true), 'existsSync', false)(J$.R(5921401, 'logDir', logDir, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5921585, J$e);
                                        } finally {
                                            if (J$.Fr(5921593))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(5921601, J$e);
                        } finally {
                            if (J$.Fr(5921609))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(5921617, J$e);
        } finally {
            if (J$.Sr(5921625))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

