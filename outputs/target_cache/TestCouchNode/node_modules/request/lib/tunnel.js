J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(4938649, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/request/lib/tunnel.js');
            function constructProxyHost(uriObject) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4936337, arguments.callee, this, arguments);
                            arguments = J$.N(4936345, 'arguments', arguments, true, false, false);
                            uriObject = J$.N(4936353, 'uriObject', uriObject, true, false, false);
                            J$.N(4936361, 'port', port, false, false, false);
                            J$.N(4936369, 'protocol', protocol, false, false, false);
                            J$.N(4936377, 'proxyHost', proxyHost, false, false, false);
                            var port = J$.W(4936161, 'port', J$.G(4936153, J$.R(4936145, 'uriObject', uriObject, false, false), 'port'), port, false, false);
                            var protocol = J$.W(4936185, 'protocol', J$.G(4936177, J$.R(4936169, 'uriObject', uriObject, false, false), 'protocol'), protocol, false, false);
                            var proxyHost = J$.W(4936217, 'proxyHost', J$.B(574138, '+', J$.G(4936201, J$.R(4936193, 'uriObject', uriObject, false, false), 'hostname'), J$.T(4936209, ':', 21, false)), proxyHost, false, false);
                            if (J$.C(264944, J$.R(4936225, 'port', port, false, false))) {
                                proxyHost = J$.W(4936249, 'proxyHost', J$.B(574146, '+', J$.R(4936241, 'proxyHost', proxyHost, false, false), J$.R(4936233, 'port', port, false, false)), proxyHost, false, false);
                            } else if (J$.C(264936, J$.B(574154, '===', J$.R(4936257, 'protocol', protocol, false, false), J$.T(4936265, 'https:', 21, false)))) {
                                proxyHost = J$.W(4936289, 'proxyHost', J$.B(574162, '+', J$.R(4936281, 'proxyHost', proxyHost, false, false), J$.T(4936273, '443', 21, false)), proxyHost, false, false);
                            } else {
                                proxyHost = J$.W(4936313, 'proxyHost', J$.B(574170, '+', J$.R(4936305, 'proxyHost', proxyHost, false, false), J$.T(4936297, '80', 21, false)), proxyHost, false, false);
                            }
                            return J$.Rt(4936329, J$.R(4936321, 'proxyHost', proxyHost, false, false));
                        } catch (J$e) {
                            J$.Ex(4938785, J$e);
                        } finally {
                            if (J$.Fr(4938793))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4936745, arguments.callee, this, arguments);
                            arguments = J$.N(4936753, 'arguments', arguments, true, false, false);
                            headers = J$.N(4936761, 'headers', headers, true, false, false);
                            proxyHeaderWhiteList = J$.N(4936769, 'proxyHeaderWhiteList', proxyHeaderWhiteList, true, false, false);
                            J$.N(4936777, 'whiteList', whiteList, false, false, false);
                            var whiteList = J$.W(4936505, 'whiteList', J$.M(4936497, J$.R(4936385, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false), 'reduce', false)(J$.T(4936481, function (set, header) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(4936449, arguments.callee, this, arguments);
                                            arguments = J$.N(4936457, 'arguments', arguments, true, false, false);
                                            set = J$.N(4936465, 'set', set, true, false, false);
                                            header = J$.N(4936473, 'header', header, true, false, false);
                                            J$.P(4936425, J$.R(4936393, 'set', set, false, false), J$.M(4936409, J$.R(4936401, 'header', header, false, false), 'toLowerCase', false)(), J$.T(4936417, true, 23, false));
                                            return J$.Rt(4936441, J$.R(4936433, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(4938801, J$e);
                                        } finally {
                                            if (J$.Fr(4938809))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(4936489, {}, 11, false)), whiteList, false, false);
                            return J$.Rt(4936737, J$.M(4936729, J$.M(4936609, J$.M(4936529, J$.I(typeof Object === 'undefined' ? Object = J$.R(4936513, 'Object', undefined, true, true) : Object = J$.R(4936513, 'Object', Object, true, true)), 'keys', false)(J$.R(4936521, 'headers', headers, false, false)), 'filter', false)(J$.T(4936601, function (header) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(4936577, arguments.callee, this, arguments);
                                            arguments = J$.N(4936585, 'arguments', arguments, true, false, false);
                                            header = J$.N(4936593, 'header', header, true, false, false);
                                            return J$.Rt(4936569, J$.G(4936561, J$.R(4936537, 'whiteList', whiteList, false, false), J$.M(4936553, J$.R(4936545, 'header', header, false, false), 'toLowerCase', false)()));
                                        } catch (J$e) {
                                            J$.Ex(4938817, J$e);
                                        } finally {
                                            if (J$.Fr(4938825))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'reduce', false)(J$.T(4936713, function (set, header) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(4936681, arguments.callee, this, arguments);
                                            arguments = J$.N(4936689, 'arguments', arguments, true, false, false);
                                            set = J$.N(4936697, 'set', set, true, false, false);
                                            header = J$.N(4936705, 'header', header, true, false, false);
                                            J$.P(4936657, J$.R(4936617, 'set', set, false, false), J$.R(4936625, 'header', header, false, false), J$.G(4936649, J$.R(4936633, 'headers', headers, false, false), J$.R(4936641, 'header', header, false, false)));
                                            return J$.Rt(4936673, J$.R(4936665, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(4938833, J$e);
                                        } finally {
                                            if (J$.Fr(4938841))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(4936721, {}, 11, false)));
                        } catch (J$e) {
                            J$.Ex(4938849, J$e);
                        } finally {
                            if (J$.Fr(4938857))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelOptions(request, proxyHeaders) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4937065, arguments.callee, this, arguments);
                            arguments = J$.N(4937073, 'arguments', arguments, true, false, false);
                            request = J$.N(4937081, 'request', request, true, false, false);
                            proxyHeaders = J$.N(4937089, 'proxyHeaders', proxyHeaders, true, false, false);
                            J$.N(4937097, 'proxy', proxy, false, false, false);
                            J$.N(4937105, 'tunnelOptions', tunnelOptions, false, false, false);
                            var proxy = J$.W(4936801, 'proxy', J$.G(4936793, J$.R(4936785, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelOptions = J$.W(4937041, 'tunnelOptions', J$.T(4937033, {
                                proxy: J$.T(4936865, {
                                    host: J$.G(4936817, J$.R(4936809, 'proxy', proxy, false, false), 'hostname'),
                                    port: J$.U(574178, '+', J$.G(4936833, J$.R(4936825, 'proxy', proxy, false, false), 'port')),
                                    proxyAuth: J$.G(4936849, J$.R(4936841, 'proxy', proxy, false, false), 'auth'),
                                    headers: J$.R(4936857, 'proxyHeaders', proxyHeaders, false, false)
                                }, 11, false),
                                headers: J$.G(4936881, J$.R(4936873, 'request', request, false, false), 'headers'),
                                ca: J$.G(4936897, J$.R(4936889, 'request', request, false, false), 'ca'),
                                cert: J$.G(4936913, J$.R(4936905, 'request', request, false, false), 'cert'),
                                key: J$.G(4936929, J$.R(4936921, 'request', request, false, false), 'key'),
                                passphrase: J$.G(4936945, J$.R(4936937, 'request', request, false, false), 'passphrase'),
                                pfx: J$.G(4936961, J$.R(4936953, 'request', request, false, false), 'pfx'),
                                ciphers: J$.G(4936977, J$.R(4936969, 'request', request, false, false), 'ciphers'),
                                rejectUnauthorized: J$.G(4936993, J$.R(4936985, 'request', request, false, false), 'rejectUnauthorized'),
                                secureOptions: J$.G(4937009, J$.R(4937001, 'request', request, false, false), 'secureOptions'),
                                secureProtocol: J$.G(4937025, J$.R(4937017, 'request', request, false, false), 'secureProtocol')
                            }, 11, false), tunnelOptions, false, false);
                            return J$.Rt(4937057, J$.R(4937049, 'tunnelOptions', tunnelOptions, false, false));
                        } catch (J$e) {
                            J$.Ex(4938865, J$e);
                        } finally {
                            if (J$.Fr(4938873))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelFnName(uri, proxy) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4937257, arguments.callee, this, arguments);
                            arguments = J$.N(4937265, 'arguments', arguments, true, false, false);
                            uri = J$.N(4937273, 'uri', uri, true, false, false);
                            proxy = J$.N(4937281, 'proxy', proxy, true, false, false);
                            J$.N(4937289, 'uriProtocol', uriProtocol, false, false, false);
                            J$.N(4937297, 'proxyProtocol', proxyProtocol, false, false, false);
                            var uriProtocol = J$.W(4937153, 'uriProtocol', J$.C(264952, J$.B(574186, '===', J$.G(4937121, J$.R(4937113, 'uri', uri, false, false), 'protocol'), J$.T(4937129, 'https:', 21, false))) ? J$.T(4937137, 'https', 21, false) : J$.T(4937145, 'http', 21, false), uriProtocol, false, false);
                            var proxyProtocol = J$.W(4937201, 'proxyProtocol', J$.C(264960, J$.B(574194, '===', J$.G(4937169, J$.R(4937161, 'proxy', proxy, false, false), 'protocol'), J$.T(4937177, 'https:', 21, false))) ? J$.T(4937185, 'Https', 21, false) : J$.T(4937193, 'Http', 21, false), proxyProtocol, false, false);
                            return J$.Rt(4937249, J$.M(4937241, J$.T(4937225, [
                                J$.R(4937209, 'uriProtocol', uriProtocol, false, false),
                                J$.R(4937217, 'proxyProtocol', proxyProtocol, false, false)
                            ], 10, false), 'join', false)(J$.T(4937233, 'Over', 21, false)));
                        } catch (J$e) {
                            J$.Ex(4938881, J$e);
                        } finally {
                            if (J$.Fr(4938889))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getTunnelFn(request) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(4937425, arguments.callee, this, arguments);
                            arguments = J$.N(4937433, 'arguments', arguments, true, false, false);
                            request = J$.N(4937441, 'request', request, true, false, false);
                            J$.N(4937449, 'uri', uri, false, false, false);
                            J$.N(4937457, 'proxy', proxy, false, false, false);
                            J$.N(4937465, 'tunnelFnName', tunnelFnName, false, false, false);
                            var uri = J$.W(4937321, 'uri', J$.G(4937313, J$.R(4937305, 'request', request, false, false), 'uri'), uri, false, false);
                            var proxy = J$.W(4937345, 'proxy', J$.G(4937337, J$.R(4937329, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelFnName = J$.W(4937385, 'tunnelFnName', J$.F(4937377, J$.R(4937353, 'constructTunnelFnName', constructTunnelFnName, false, true), false)(J$.R(4937361, 'uri', uri, false, false), J$.R(4937369, 'proxy', proxy, false, false)), tunnelFnName, false, false);
                            return J$.Rt(4937417, J$.G(4937409, J$.R(4937393, 'tunnel', tunnel, false, true), J$.R(4937401, 'tunnelFnName', tunnelFnName, false, false)));
                        } catch (J$e) {
                            J$.Ex(4938897, J$e);
                        } finally {
                            if (J$.Fr(4938905))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Tunnel(request) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(4937601, arguments.callee, this, arguments);
                            arguments = J$.N(4937609, 'arguments', arguments, true, false, false);
                            request = J$.N(4937617, 'request', request, true, false, false);
                            J$.P(4937489, J$.R(4937473, 'this', this, false, false), 'request', J$.R(4937481, 'request', request, false, false));
                            J$.P(4937513, J$.R(4937497, 'this', this, false, false), 'proxyHeaderWhiteList', J$.R(4937505, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
                            J$.P(4937537, J$.R(4937521, 'this', this, false, false), 'proxyHeaderExclusiveList', J$.T(4937529, [], 10, false));
                            if (J$.C(264968, J$.B(574210, '!==', J$.U(574202, 'typeof', J$.G(4937553, J$.R(4937545, 'request', request, false, false), 'tunnel')), J$.T(4937561, 'undefined', 21, false)))) {
                                J$.P(4937593, J$.R(4937569, 'this', this, false, false), 'tunnelOverride', J$.G(4937585, J$.R(4937577, 'request', request, false, false), 'tunnel'));
                            }
                        } catch (J$e) {
                            J$.Ex(4938913, J$e);
                        } finally {
                            if (J$.Fr(4938921))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4938657, 'url', url, false, false, false);
            J$.N(4938665, 'tunnel', tunnel, false, false, false);
            J$.N(4938673, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, false, false);
            J$.N(4938681, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, false, false);
            constructProxyHost = J$.N(4938697, 'constructProxyHost', J$.T(4938689, constructProxyHost, 12, false), true, false, false);
            constructProxyHeaderWhiteList = J$.N(4938713, 'constructProxyHeaderWhiteList', J$.T(4938705, constructProxyHeaderWhiteList, 12, false), true, false, false);
            constructTunnelOptions = J$.N(4938729, 'constructTunnelOptions', J$.T(4938721, constructTunnelOptions, 12, false), true, false, false);
            constructTunnelFnName = J$.N(4938745, 'constructTunnelFnName', J$.T(4938737, constructTunnelFnName, 12, false), true, false, false);
            getTunnelFn = J$.N(4938761, 'getTunnelFn', J$.T(4938753, getTunnelFn, 12, false), true, false, false);
            Tunnel = J$.N(4938777, 'Tunnel', J$.T(4938769, Tunnel, 12, false), true, false, false);
            J$.T(4935865, 'use strict', 21, false);
            var url = J$.W(4935897, 'url', J$.F(4935889, J$.I(typeof require === 'undefined' ? require = J$.R(4935873, 'require', undefined, true, true) : require = J$.R(4935873, 'require', require, true, true)), false)(J$.T(4935881, 'url', 21, false)), url, false, true);
            var tunnel = J$.W(4935929, 'tunnel', J$.F(4935921, J$.I(typeof require === 'undefined' ? require = J$.R(4935905, 'require', undefined, true, true) : require = J$.R(4935905, 'require', require, true, true)), false)(J$.T(4935913, 'tunnel-agent', 21, false)), tunnel, false, true);
            var defaultProxyHeaderWhiteList = J$.W(4936113, 'defaultProxyHeaderWhiteList', J$.T(4936105, [
                J$.T(4935937, 'accept', 21, false),
                J$.T(4935945, 'accept-charset', 21, false),
                J$.T(4935953, 'accept-encoding', 21, false),
                J$.T(4935961, 'accept-language', 21, false),
                J$.T(4935969, 'accept-ranges', 21, false),
                J$.T(4935977, 'cache-control', 21, false),
                J$.T(4935985, 'content-encoding', 21, false),
                J$.T(4935993, 'content-language', 21, false),
                J$.T(4936001, 'content-location', 21, false),
                J$.T(4936009, 'content-md5', 21, false),
                J$.T(4936017, 'content-range', 21, false),
                J$.T(4936025, 'content-type', 21, false),
                J$.T(4936033, 'connection', 21, false),
                J$.T(4936041, 'date', 21, false),
                J$.T(4936049, 'expect', 21, false),
                J$.T(4936057, 'max-forwards', 21, false),
                J$.T(4936065, 'pragma', 21, false),
                J$.T(4936073, 'referer', 21, false),
                J$.T(4936081, 'te', 21, false),
                J$.T(4936089, 'user-agent', 21, false),
                J$.T(4936097, 'via', 21, false)
            ], 10, false), defaultProxyHeaderWhiteList, false, true);
            var defaultProxyHeaderExclusiveList = J$.W(4936137, 'defaultProxyHeaderExclusiveList', J$.T(4936129, [J$.T(4936121, 'proxy-authorization', 21, false)], 10, false), defaultProxyHeaderExclusiveList, false, true);
            J$.P(4937833, J$.G(4937633, J$.R(4937625, 'Tunnel', Tunnel, false, true), 'prototype'), 'isEnabled', J$.T(4937825, function () {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(4937793, arguments.callee, this, arguments);
                            arguments = J$.N(4937801, 'arguments', arguments, true, false, false);
                            J$.N(4937809, 'self', self, false, false, false);
                            J$.N(4937817, 'request', request, false, false, false);
                            var self = J$.W(4937649, 'self', J$.R(4937641, 'this', this, false, false), self, false, false);
                            var request = J$.W(4937673, 'request', J$.G(4937665, J$.R(4937657, 'self', self, false, false), 'request'), request, false, false);
                            if (J$.C(264976, J$.B(574226, '!==', J$.U(574218, 'typeof', J$.G(4937689, J$.R(4937681, 'self', self, false, false), 'tunnelOverride')), J$.T(4937697, 'undefined', 21, false)))) {
                                return J$.Rt(4937721, J$.G(4937713, J$.R(4937705, 'self', self, false, false), 'tunnelOverride'));
                            }
                            if (J$.C(264984, J$.B(574234, '===', J$.G(4937745, J$.G(4937737, J$.R(4937729, 'request', request, false, false), 'uri'), 'protocol'), J$.T(4937753, 'https:', 21, false)))) {
                                return J$.Rt(4937769, J$.T(4937761, true, 23, false));
                            }
                            return J$.Rt(4937785, J$.T(4937777, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(4938929, J$e);
                        } finally {
                            if (J$.Fr(4938937))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4938569, J$.G(4937849, J$.R(4937841, 'Tunnel', Tunnel, false, true), 'prototype'), 'setup', J$.T(4938561, function (options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(4938481, arguments.callee, this, arguments);
                            arguments = J$.N(4938489, 'arguments', arguments, true, false, false);
                            options = J$.N(4938497, 'options', options, true, false, false);
                            J$.N(4938505, 'self', self, false, false, false);
                            J$.N(4938513, 'request', request, false, false, false);
                            J$.N(4938521, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false, false);
                            J$.N(4938529, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false, false);
                            J$.N(4938537, 'proxyHeaders', proxyHeaders, false, false, false);
                            J$.N(4938545, 'tunnelFn', tunnelFn, false, false, false);
                            J$.N(4938553, 'tunnelOptions', tunnelOptions, false, false, false);
                            var self = J$.W(4937865, 'self', J$.R(4937857, 'this', this, false, false), self, false, false);
                            var request = J$.W(4937889, 'request', J$.G(4937881, J$.R(4937873, 'self', self, false, false), 'request'), request, false, false);
                            options = J$.W(4937913, 'options', J$.C(264992, J$.R(4937897, 'options', options, false, false)) ? J$._() : J$.T(4937905, {}, 11, false), options, false, false);
                            if (J$.C(265000, J$.B(574250, '===', J$.U(574242, 'typeof', J$.G(4937929, J$.R(4937921, 'request', request, false, false), 'proxy')), J$.T(4937937, 'string', 21, false)))) {
                                J$.P(4937985, J$.R(4937945, 'request', request, false, false), 'proxy', J$.M(4937977, J$.R(4937953, 'url', url, false, true), 'parse', false)(J$.G(4937969, J$.R(4937961, 'request', request, false, false), 'proxy')));
                            }
                            if (J$.C(265016, J$.C(265008, J$.U(574258, '!', J$.G(4938001, J$.R(4937993, 'request', request, false, false), 'proxy'))) ? J$._() : J$.U(574266, '!', J$.G(4938017, J$.R(4938009, 'request', request, false, false), 'tunnel')))) {
                                return J$.Rt(4938033, J$.T(4938025, false, 23, false));
                            }
                            if (J$.C(265024, J$.G(4938049, J$.R(4938041, 'options', options, false, false), 'proxyHeaderWhiteList'))) {
                                J$.P(4938081, J$.R(4938057, 'self', self, false, false), 'proxyHeaderWhiteList', J$.G(4938073, J$.R(4938065, 'options', options, false, false), 'proxyHeaderWhiteList'));
                            }
                            if (J$.C(265032, J$.G(4938097, J$.R(4938089, 'options', options, false, false), 'proxyHeaderExclusiveList'))) {
                                J$.P(4938129, J$.R(4938105, 'self', self, false, false), 'proxyHeaderExclusiveList', J$.G(4938121, J$.R(4938113, 'options', options, false, false), 'proxyHeaderExclusiveList'));
                            }
                            var proxyHeaderExclusiveList = J$.W(4938169, 'proxyHeaderExclusiveList', J$.M(4938161, J$.G(4938145, J$.R(4938137, 'self', self, false, false), 'proxyHeaderExclusiveList'), 'concat', false)(J$.R(4938153, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true)), proxyHeaderExclusiveList, false, false);
                            var proxyHeaderWhiteList = J$.W(4938209, 'proxyHeaderWhiteList', J$.M(4938201, J$.G(4938185, J$.R(4938177, 'self', self, false, false), 'proxyHeaderWhiteList'), 'concat', false)(J$.R(4938193, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false)), proxyHeaderWhiteList, false, false);
                            var proxyHeaders = J$.W(4938257, 'proxyHeaders', J$.F(4938249, J$.R(4938217, 'constructProxyHeaderWhiteList', constructProxyHeaderWhiteList, false, true), false)(J$.G(4938233, J$.R(4938225, 'request', request, false, false), 'headers'), J$.R(4938241, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false)), proxyHeaders, false, false);
                            J$.P(4938305, J$.R(4938265, 'proxyHeaders', proxyHeaders, false, false), 'host', J$.F(4938297, J$.R(4938273, 'constructProxyHost', constructProxyHost, false, true), false)(J$.G(4938289, J$.R(4938281, 'request', request, false, false), 'uri')));
                            J$.M(4938345, J$.R(4938313, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false), 'forEach', false)(J$.G(4938329, J$.R(4938321, 'request', request, false, false), 'removeHeader'), J$.R(4938337, 'request', request, false, false));
                            var tunnelFn = J$.W(4938377, 'tunnelFn', J$.F(4938369, J$.R(4938353, 'getTunnelFn', getTunnelFn, false, true), false)(J$.R(4938361, 'request', request, false, false)), tunnelFn, false, false);
                            var tunnelOptions = J$.W(4938417, 'tunnelOptions', J$.F(4938409, J$.R(4938385, 'constructTunnelOptions', constructTunnelOptions, false, true), false)(J$.R(4938393, 'request', request, false, false), J$.R(4938401, 'proxyHeaders', proxyHeaders, false, false)), tunnelOptions, false, false);
                            J$.P(4938457, J$.R(4938425, 'request', request, false, false), 'agent', J$.F(4938449, J$.R(4938433, 'tunnelFn', tunnelFn, false, false), false)(J$.R(4938441, 'tunnelOptions', tunnelOptions, false, false)));
                            return J$.Rt(4938473, J$.T(4938465, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(4938945, J$e);
                        } finally {
                            if (J$.Fr(4938953))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4938593, J$.R(4938577, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderWhiteList', J$.R(4938585, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
            J$.P(4938617, J$.R(4938601, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderExclusiveList', J$.R(4938609, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true));
            J$.P(4938641, J$.I(typeof exports === 'undefined' ? exports = J$.R(4938625, 'exports', undefined, true, true) : exports = J$.R(4938625, 'exports', exports, true, true)), 'Tunnel', J$.R(4938633, 'Tunnel', Tunnel, false, true));
        } catch (J$e) {
            J$.Ex(4938961, J$e);
        } finally {
            if (J$.Sr(4938969))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

