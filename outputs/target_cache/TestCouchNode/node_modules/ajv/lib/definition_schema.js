J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(6476969, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/ajv/lib/definition_schema.js');
            J$.N(6476977, 'metaSchema', metaSchema, false, false, false);
            J$.T(6476545, 'use strict', 21, false);
            var metaSchema = J$.W(6476577, 'metaSchema', J$.F(6476569, J$.I(typeof require === 'undefined' ? require = J$.R(6476553, 'require', undefined, true, true) : require = J$.R(6476553, 'require', require, true, true)), false)(J$.T(6476561, './refs/json-schema-draft-07.json', 21, false)), metaSchema, false, true);
            J$.P(6476961, J$.I(typeof module === 'undefined' ? module = J$.R(6476585, 'module', undefined, true, true) : module = J$.R(6476585, 'module', module, true, true)), 'exports', J$.T(6476953, {
                $id: J$.T(6476593, 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js', 21, false),
                definitions: J$.T(6476625, { simpleTypes: J$.G(6476617, J$.G(6476609, J$.R(6476601, 'metaSchema', metaSchema, false, true), 'definitions'), 'simpleTypes') }, 11, false),
                type: J$.T(6476633, 'object', 21, false),
                dependencies: J$.T(6476721, {
                    schema: J$.T(6476649, [J$.T(6476641, 'validate', 21, false)], 10, false),
                    $data: J$.T(6476665, [J$.T(6476657, 'validate', 21, false)], 10, false),
                    statements: J$.T(6476681, [J$.T(6476673, 'inline', 21, false)], 10, false),
                    valid: J$.T(6476713, { not: J$.T(6476705, { required: J$.T(6476697, [J$.T(6476689, 'macro', 21, false)], 10, false) }, 11, false) }, 11, false)
                }, 11, false),
                properties: J$.T(6476945, {
                    type: J$.G(6476745, J$.G(6476737, J$.R(6476729, 'metaSchema', metaSchema, false, true), 'properties'), 'type'),
                    schema: J$.T(6476761, { type: J$.T(6476753, 'boolean', 21, false) }, 11, false),
                    statements: J$.T(6476777, { type: J$.T(6476769, 'boolean', 21, false) }, 11, false),
                    dependencies: J$.T(6476809, {
                        type: J$.T(6476785, 'array', 21, false),
                        items: J$.T(6476801, { type: J$.T(6476793, 'string', 21, false) }, 11, false)
                    }, 11, false),
                    metaSchema: J$.T(6476825, { type: J$.T(6476817, 'object', 21, false) }, 11, false),
                    modifying: J$.T(6476841, { type: J$.T(6476833, 'boolean', 21, false) }, 11, false),
                    valid: J$.T(6476857, { type: J$.T(6476849, 'boolean', 21, false) }, 11, false),
                    $data: J$.T(6476873, { type: J$.T(6476865, 'boolean', 21, false) }, 11, false),
                    async: J$.T(6476889, { type: J$.T(6476881, 'boolean', 21, false) }, 11, false),
                    errors: J$.T(6476937, {
                        anyOf: J$.T(6476929, [
                            J$.T(6476905, { type: J$.T(6476897, 'boolean', 21, false) }, 11, false),
                            J$.T(6476921, { const: J$.T(6476913, 'full', 21, false) }, 11, false)
                        ], 10, false)
                    }, 11, false)
                }, 11, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(6476985, J$e);
        } finally {
            if (J$.Sr(6476993))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

