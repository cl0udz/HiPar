J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(6574249, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/ajv/scripts/compile-dots.js');
            J$.N(6574257, 'glob', glob, false, false, false);
            J$.N(6574265, 'fs', fs, false, false, false);
            J$.N(6574273, 'path', path, false, false, false);
            J$.N(6574281, 'doT', doT, false, false, false);
            J$.N(6574289, 'beautify', beautify, false, false, false);
            J$.N(6574297, 'defsRootPath', defsRootPath, false, false, false);
            J$.N(6574305, 'defs', defs, false, false, false);
            J$.N(6574313, 'defFiles', defFiles, false, false, false);
            J$.N(6574321, 'filesRootPath', filesRootPath, false, false, false);
            J$.N(6574329, 'files', files, false, false, false);
            J$.N(6574337, 'dotjsPath', dotjsPath, false, false, false);
            J$.N(6574345, 'FUNCTION_NAME', FUNCTION_NAME, false, false, false);
            J$.N(6574353, 'OUT_EMPTY_STRING', OUT_EMPTY_STRING, false, false, false);
            J$.N(6574361, 'ISTANBUL', ISTANBUL, false, false, false);
            J$.N(6574369, 'ERROR_KEYWORD', ERROR_KEYWORD, false, false, false);
            J$.N(6574377, 'ERROR_KEYWORD_OR', ERROR_KEYWORD_OR, false, false, false);
            J$.N(6574385, 'VARS', VARS, false, false, false);
            J$.T(6572265, 'use strict', 21, false);
            var glob = J$.W(6572401, 'glob', J$.F(6572289, J$.I(typeof require === 'undefined' ? require = J$.R(6572273, 'require', undefined, true, true) : require = J$.R(6572273, 'require', require, true, true)), false)(J$.T(6572281, 'glob', 21, false)), glob, false, true), fs = J$.W(6572409, 'fs', J$.F(6572313, J$.I(typeof require === 'undefined' ? require = J$.R(6572297, 'require', undefined, true, true) : require = J$.R(6572297, 'require', require, true, true)), false)(J$.T(6572305, 'fs', 21, false)), fs, false, true), path = J$.W(6572417, 'path', J$.F(6572337, J$.I(typeof require === 'undefined' ? require = J$.R(6572321, 'require', undefined, true, true) : require = J$.R(6572321, 'require', require, true, true)), false)(J$.T(6572329, 'path', 21, false)), path, false, true), doT = J$.W(6572425, 'doT', J$.F(6572361, J$.I(typeof require === 'undefined' ? require = J$.R(6572345, 'require', undefined, true, true) : require = J$.R(6572345, 'require', require, true, true)), false)(J$.T(6572353, 'dot', 21, false)), doT, false, true), beautify = J$.W(6572433, 'beautify', J$.G(6572393, J$.F(6572385, J$.I(typeof require === 'undefined' ? require = J$.R(6572369, 'require', undefined, true, true) : require = J$.R(6572369, 'require', require, true, true)), false)(J$.T(6572377, 'js-beautify', 21, false)), 'js_beautify'), beautify, false, true);
            var defsRootPath = J$.W(6572505, 'defsRootPath', J$.C(359256, J$.G(6572465, J$.G(6572449, J$.I(typeof process === 'undefined' ? process = J$.R(6572441, 'process', undefined, true, true) : process = J$.R(6572441, 'process', process, true, true)), 'argv'), J$.T(6572457, 2, 22, false))) ? J$._() : J$.M(6572497, J$.R(6572473, 'path', path, false, true), 'join', false)(J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(6572481, '__dirname', undefined, true, true) : __dirname = J$.R(6572481, '__dirname', __dirname, true, true)), J$.T(6572489, '../lib', 21, false)), defsRootPath, false, true);
            var defs = J$.W(6572521, 'defs', J$.T(6572513, {}, 11, false), defs, false, true);
            var defFiles = J$.W(6572569, 'defFiles', J$.M(6572561, J$.R(6572529, 'glob', glob, false, true), 'sync', false)(J$.T(6572537, './dot/**/*.def', 21, false), J$.T(6572553, { cwd: J$.R(6572545, 'defsRootPath', defsRootPath, false, true) }, 11, false)), defFiles, false, true);
            J$.M(6572737, J$.R(6572577, 'defFiles', defFiles, false, true), 'forEach', false)(J$.T(6572729, function (f) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6572697, arguments.callee, this, arguments);
                            arguments = J$.N(6572705, 'arguments', arguments, true, false, false);
                            f = J$.N(6572713, 'f', f, true, false, false);
                            J$.N(6572721, 'name', name, false, false, false);
                            var name = J$.W(6572617, 'name', J$.M(6572609, J$.R(6572585, 'path', path, false, true), 'basename', false)(J$.R(6572593, 'f', f, false, false), J$.T(6572601, '.def', 21, false)), name, false, false);
                            J$.P(6572689, J$.R(6572625, 'defs', defs, false, true), J$.R(6572633, 'name', name, false, false), J$.M(6572681, J$.R(6572641, 'fs', fs, false, true), 'readFileSync', false)(J$.M(6572673, J$.R(6572649, 'path', path, false, true), 'join', false)(J$.R(6572657, 'defsRootPath', defsRootPath, false, true), J$.R(6572665, 'f', f, false, false))));
                        } catch (J$e) {
                            J$.Ex(6574393, J$e);
                        } finally {
                            if (J$.Fr(6574401))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var filesRootPath = J$.W(6572809, 'filesRootPath', J$.C(359264, J$.G(6572769, J$.G(6572753, J$.I(typeof process === 'undefined' ? process = J$.R(6572745, 'process', undefined, true, true) : process = J$.R(6572745, 'process', process, true, true)), 'argv'), J$.T(6572761, 3, 22, false))) ? J$._() : J$.M(6572801, J$.R(6572777, 'path', path, false, true), 'join', false)(J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(6572785, '__dirname', undefined, true, true) : __dirname = J$.R(6572785, '__dirname', __dirname, true, true)), J$.T(6572793, '../lib', 21, false)), filesRootPath, false, true);
            var files = J$.W(6572857, 'files', J$.M(6572849, J$.R(6572817, 'glob', glob, false, true), 'sync', false)(J$.T(6572825, './dot/**/*.jst', 21, false), J$.T(6572841, { cwd: J$.R(6572833, 'filesRootPath', filesRootPath, false, true) }, 11, false)), files, false, true);
            var dotjsPath = J$.W(6572897, 'dotjsPath', J$.M(6572889, J$.R(6572865, 'path', path, false, true), 'join', false)(J$.R(6572873, 'filesRootPath', filesRootPath, false, true), J$.T(6572881, './dotjs', 21, false)), dotjsPath, false, true);
            try {
                J$.M(6572921, J$.R(6572905, 'fs', fs, false, true), 'mkdirSync', false)(J$.R(6572913, 'dotjsPath', dotjsPath, false, true));
            } catch (e) {
                J$.N(6572929, 'e', e, false, false, true);
            }
            J$.M(6572953, J$.I(typeof console === 'undefined' ? console = J$.R(6572937, 'console', undefined, true, true) : console = J$.R(6572937, 'console', console, true, true)), 'log', false)(J$.T(6572945, '\n\nCompiling:', 21, false));
            var FUNCTION_NAME = J$.W(6572969, 'FUNCTION_NAME', J$.T(6572961, /function\s+anonymous\s*\(it[^)]*\)\s*{/, 14, false), FUNCTION_NAME, false, true);
            var OUT_EMPTY_STRING = J$.W(6572985, 'OUT_EMPTY_STRING', J$.T(6572977, /out\s*\+=\s*'\s*';/g, 14, false), OUT_EMPTY_STRING, false, true);
            var ISTANBUL = J$.W(6573001, 'ISTANBUL', J$.T(6572993, /'(istanbul[^']+)';/g, 14, false), ISTANBUL, false, true);
            var ERROR_KEYWORD = J$.W(6573017, 'ERROR_KEYWORD', J$.T(6573009, /\$errorKeyword/g, 14, false), ERROR_KEYWORD, false, true);
            var ERROR_KEYWORD_OR = J$.W(6573033, 'ERROR_KEYWORD_OR', J$.T(6573025, /\$errorKeyword\s+\|\|/g, 14, false), ERROR_KEYWORD_OR, false, true);
            var VARS = J$.W(6573121, 'VARS', J$.T(6573113, [
                J$.T(6573041, '$errs', 21, false),
                J$.T(6573049, '$valid', 21, false),
                J$.T(6573057, '$lvl', 21, false),
                J$.T(6573065, '$data', 21, false),
                J$.T(6573073, '$dataLvl', 21, false),
                J$.T(6573081, '$errorKeyword', 21, false),
                J$.T(6573089, '$closingBraces', 21, false),
                J$.T(6573097, '$schemaPath', 21, false),
                J$.T(6573105, '$validate', 21, false)
            ], 10, false), VARS, false, true);
            J$.M(6574241, J$.R(6573129, 'files', files, false, true), 'forEach', false)(J$.T(6574233, function (f) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(6574129, arguments.callee, this, arguments);
                            function removeUnusedVar(v) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(6573857, arguments.callee, this, arguments);
                                            arguments = J$.N(6573865, 'arguments', arguments, true, false, false);
                                            v = J$.N(6573873, 'v', v, true, false, false);
                                            J$.N(6573881, 'regexp', regexp, false, false, false);
                                            J$.N(6573889, 'count', count, false, false, false);
                                            v = J$.W(6573649, 'v', J$.M(6573641, J$.R(6573617, 'v', v, false, false), 'replace', false)(J$.T(6573625, /\$/g, 14, false), J$.T(6573633, '\\$$', 21, false)), v, false, false);
                                            var regexp = J$.W(6573697, 'regexp', J$.F(6573689, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(6573657, 'RegExp', undefined, true, true) : RegExp = J$.R(6573657, 'RegExp', RegExp, true, true)), true)(J$.B(686978, '+', J$.R(6573665, 'v', v, false, false), J$.T(6573673, '[^A-Za-z0-9_$]', 21, false)), J$.T(6573681, 'g', 21, false)), regexp, false, false);
                                            var count = J$.W(6573729, 'count', J$.F(6573721, J$.R(6573705, 'occurrences', occurrences, false, false), false)(J$.R(6573713, 'regexp', regexp, false, false)), count, false, false);
                                            if (J$.C(359272, J$.B(686986, '==', J$.R(6573737, 'count', count, false, false), J$.T(6573745, 1, 22, false)))) {
                                                regexp = J$.W(6573809, 'regexp', J$.F(6573801, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(6573753, 'RegExp', undefined, true, true) : RegExp = J$.R(6573753, 'RegExp', RegExp, true, true)), true)(J$.B(687018, '+', J$.B(687010, '+', J$.B(687002, '+', J$.B(686994, '+', J$.T(6573761, 'var\\s+', 21, false), J$.R(6573769, 'v', v, false, false)), J$.T(6573777, '\\s*=[^;]+;|var\\s+', 21, false)), J$.R(6573785, 'v', v, false, false)), J$.T(6573793, ';', 21, false))), regexp, false, false);
                                                code = J$.W(6573849, 'code', J$.M(6573841, J$.R(6573817, 'code', code, false, false), 'replace', false)(J$.R(6573825, 'regexp', regexp, false, false), J$.T(6573833, '', 21, false)), code, false, false);
                                            }
                                        } catch (J$e) {
                                            J$.Ex(6574409, J$e);
                                        } finally {
                                            if (J$.Fr(6574417))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function removeAlwaysFalsyInOr() {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(6574025, arguments.callee, this, arguments);
                                            arguments = J$.N(6574033, 'arguments', arguments, true, false, false);
                                            J$.N(6574041, 'countUsed', countUsed, false, false, false);
                                            J$.N(6574049, 'countOr', countOr, false, false, false);
                                            var countUsed = J$.W(6573921, 'countUsed', J$.F(6573913, J$.R(6573897, 'occurrences', occurrences, false, false), false)(J$.R(6573905, 'ERROR_KEYWORD', ERROR_KEYWORD, false, true)), countUsed, false, false);
                                            var countOr = J$.W(6573953, 'countOr', J$.F(6573945, J$.R(6573929, 'occurrences', occurrences, false, false), false)(J$.R(6573937, 'ERROR_KEYWORD_OR', ERROR_KEYWORD_OR, false, true)), countOr, false, false);
                                            if (J$.C(359280, J$.B(687034, '==', J$.R(6573961, 'countUsed', countUsed, false, false), J$.B(687026, '+', J$.R(6573969, 'countOr', countOr, false, false), J$.T(6573977, 1, 22, false)))))
                                                code = J$.W(6574017, 'code', J$.M(6574009, J$.R(6573985, 'code', code, false, false), 'replace', false)(J$.R(6573993, 'ERROR_KEYWORD_OR', ERROR_KEYWORD_OR, false, true), J$.T(6574001, '', 21, false)), code, false, false);
                                        } catch (J$e) {
                                            J$.Ex(6574425, J$e);
                                        } finally {
                                            if (J$.Fr(6574433))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function occurrences(regexp) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(6574105, arguments.callee, this, arguments);
                                            arguments = J$.N(6574113, 'arguments', arguments, true, false, false);
                                            regexp = J$.N(6574121, 'regexp', regexp, true, false, false);
                                            return J$.Rt(6574097, J$.G(6574089, J$.C(359288, J$.M(6574073, J$.R(6574057, 'code', code, false, false), 'match', false)(J$.R(6574065, 'regexp', regexp, false, false))) ? J$._() : J$.T(6574081, [], 10, false), 'length'));
                                        } catch (J$e) {
                                            J$.Ex(6574441, J$e);
                                        } finally {
                                            if (J$.Fr(6574449))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(6574137, 'arguments', arguments, true, false, false);
                            f = J$.N(6574145, 'f', f, true, false, false);
                            J$.N(6574153, 'keyword', keyword, false, false, false);
                            J$.N(6574161, 'targetPath', targetPath, false, false, false);
                            J$.N(6574169, 'template', template, false, false, false);
                            J$.N(6574177, 'code', code, false, false, false);
                            removeUnusedVar = J$.N(6574193, 'removeUnusedVar', J$.T(6574185, removeUnusedVar, 12, false), true, false, false);
                            removeAlwaysFalsyInOr = J$.N(6574209, 'removeAlwaysFalsyInOr', J$.T(6574201, removeAlwaysFalsyInOr, 12, false), true, false, false);
                            occurrences = J$.N(6574225, 'occurrences', J$.T(6574217, occurrences, 12, false), true, false, false);
                            var keyword = J$.W(6573169, 'keyword', J$.M(6573161, J$.R(6573137, 'path', path, false, true), 'basename', false)(J$.R(6573145, 'f', f, false, false), J$.T(6573153, '.jst', 21, false)), keyword, false, false);
                            var targetPath = J$.W(6573217, 'targetPath', J$.M(6573209, J$.R(6573177, 'path', path, false, true), 'join', false)(J$.R(6573185, 'dotjsPath', dotjsPath, false, true), J$.B(686938, '+', J$.R(6573193, 'keyword', keyword, false, false), J$.T(6573201, '.js', 21, false))), targetPath, false, false);
                            var template = J$.W(6573273, 'template', J$.M(6573265, J$.R(6573225, 'fs', fs, false, true), 'readFileSync', false)(J$.M(6573257, J$.R(6573233, 'path', path, false, true), 'join', false)(J$.R(6573241, 'filesRootPath', filesRootPath, false, true), J$.R(6573249, 'f', f, false, false))), template, false, false);
                            var code = J$.W(6573313, 'code', J$.M(6573305, J$.R(6573281, 'doT', doT, false, true), 'compile', false)(J$.R(6573289, 'template', template, false, false), J$.R(6573297, 'defs', defs, false, true)), code, false, false);
                            code = J$.W(6573425, 'code', J$.M(6573417, J$.M(6573393, J$.M(6573353, J$.M(6573329, J$.R(6573321, 'code', code, false, false), 'toString', false)(), 'replace', false)(J$.R(6573337, 'OUT_EMPTY_STRING', OUT_EMPTY_STRING, false, true), J$.T(6573345, '', 21, false)), 'replace', false)(J$.R(6573361, 'FUNCTION_NAME', FUNCTION_NAME, false, true), J$.B(686954, '+', J$.B(686946, '+', J$.T(6573369, 'function generate_', 21, false), J$.R(6573377, 'keyword', keyword, false, false)), J$.T(6573385, '(it, $keyword, $ruleType) {', 21, false))), 'replace', false)(J$.R(6573401, 'ISTANBUL', ISTANBUL, false, true), J$.T(6573409, '/* $1 */', 21, false)), code, false, false);
                            J$.F(6573441, J$.R(6573433, 'removeAlwaysFalsyInOr', removeAlwaysFalsyInOr, false, false), false)();
                            J$.M(6573465, J$.R(6573449, 'VARS', VARS, false, true), 'forEach', false)(J$.R(6573457, 'removeUnusedVar', removeUnusedVar, false, false));
                            code = J$.W(6573489, 'code', J$.B(686962, '+', J$.T(6573473, '\'use strict\';\nmodule.exports = ', 21, false), J$.R(6573481, 'code', code, false, false)), code, false, false);
                            code = J$.W(6573545, 'code', J$.B(686970, '+', J$.F(6573529, J$.R(6573497, 'beautify', beautify, false, true), false)(J$.R(6573505, 'code', code, false, false), J$.T(6573521, { indent_size: J$.T(6573513, 2, 22, false) }, 11, false)), J$.T(6573537, '\n', 21, false)), code, false, false);
                            J$.M(6573577, J$.R(6573553, 'fs', fs, false, true), 'writeFileSync', false)(J$.R(6573561, 'targetPath', targetPath, false, false), J$.R(6573569, 'code', code, false, false));
                            J$.M(6573609, J$.I(typeof console === 'undefined' ? console = J$.R(6573585, 'console', undefined, true, true) : console = J$.R(6573585, 'console', console, true, true)), 'log', false)(J$.T(6573593, 'compiled', 21, false), J$.R(6573601, 'keyword', keyword, false, false));
                        } catch (J$e) {
                            J$.Ex(6574457, J$e);
                        } finally {
                            if (J$.Fr(6574465))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(6574473, J$e);
        } finally {
            if (J$.Sr(6574481))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

