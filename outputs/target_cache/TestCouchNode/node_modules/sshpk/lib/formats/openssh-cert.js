J$.noInstrEval = false;
jalangiLabel19:
    while (true) {
        try {
            J$.Se(5080985, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/openssh-cert.js');
            function verify(cert, key) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5073697, arguments.callee, this, arguments);
                            arguments = J$.N(5073705, 'arguments', arguments, true, false, false);
                            cert = J$.N(5073713, 'cert', cert, true, false, false);
                            key = J$.N(5073721, 'key', key, true, false, false);
                            return J$.Rt(5073689, J$.T(5073681, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(5081281, J$e);
                        } finally {
                            if (J$.Fr(5081289))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5074201, arguments.callee, this, arguments);
                            arguments = J$.N(5074209, 'arguments', arguments, true, false, false);
                            buf = J$.N(5074217, 'buf', buf, true, false, false);
                            options = J$.N(5074225, 'options', options, true, false, false);
                            J$.N(5074233, 'parts', parts, false, false, false);
                            J$.N(5074241, 'algo', algo, false, false, false);
                            J$.N(5074249, 'data', data, false, false, false);
                            if (J$.C(272552, J$.M(5073905, J$.R(5073889, 'Buffer', Buffer, false, true), 'isBuffer', false)(J$.R(5073897, 'buf', buf, false, false))))
                                buf = J$.W(5073937, 'buf', J$.M(5073929, J$.R(5073913, 'buf', buf, false, false), 'toString', false)(J$.T(5073921, 'ascii', 21, false)), buf, false, false);
                            var parts = J$.W(5073977, 'parts', J$.M(5073969, J$.M(5073953, J$.R(5073945, 'buf', buf, false, false), 'trim', false)(), 'split', false)(J$.T(5073961, /[ \t\n]+/g, 14, false)), parts, false, false);
                            if (J$.C(272568, J$.C(272560, J$.B(586866, '<', J$.G(5073993, J$.R(5073985, 'parts', parts, false, false), 'length'), J$.T(5074001, 2, 22, false))) ? J$._() : J$.B(586874, '>', J$.G(5074017, J$.R(5074009, 'parts', parts, false, false), 'length'), J$.T(5074025, 3, 22, false))))
                                throw J$.F(5074049, J$.I(typeof Error === 'undefined' ? Error = J$.R(5074033, 'Error', undefined, true, true) : Error = J$.R(5074033, 'Error', Error, true, true)), true)(J$.T(5074041, 'Not a valid SSH certificate line', 21, false));
                            var algo = J$.W(5074081, 'algo', J$.G(5074073, J$.R(5074057, 'parts', parts, false, false), J$.T(5074065, 0, 22, false)), algo, false, false);
                            var data = J$.W(5074113, 'data', J$.G(5074105, J$.R(5074089, 'parts', parts, false, false), J$.T(5074097, 1, 22, false)), data, false, false);
                            data = J$.W(5074153, 'data', J$.M(5074145, J$.R(5074121, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5074129, 'data', data, false, false), J$.T(5074137, 'base64', 21, false)), data, false, false);
                            return J$.Rt(5074193, J$.F(5074185, J$.R(5074161, 'fromBuffer', fromBuffer, false, true), false)(J$.R(5074169, 'data', data, false, false), J$.R(5074177, 'algo', algo, false, false)));
                        } catch (J$e) {
                            J$.Ex(5081313, J$e);
                        } finally {
                            if (J$.Fr(5081321))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fromBuffer(data, algo, partial) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5076681, arguments.callee, this, arguments);
                            arguments = J$.N(5076689, 'arguments', arguments, true, false, false);
                            data = J$.N(5076697, 'data', data, true, false, false);
                            algo = J$.N(5076705, 'algo', algo, true, false, false);
                            partial = J$.N(5076713, 'partial', partial, true, false, false);
                            J$.N(5076721, 'sshbuf', sshbuf, false, false, false);
                            J$.N(5076729, 'innerAlgo', innerAlgo, false, false, false);
                            J$.N(5076737, 'cert', cert, false, false, false);
                            J$.N(5076745, 'key', key, false, false, false);
                            J$.N(5076753, 'parts', parts, false, false, false);
                            J$.N(5076761, 'partCount', partCount, false, false, false);
                            J$.N(5076769, 'algInfo', algInfo, false, false, false);
                            J$.N(5076777, 'res', res, false, false, false);
                            J$.N(5076785, 'i', i, false, false, false);
                            J$.N(5076793, 'p', p, false, false, false);
                            J$.N(5076801, 'type', type, false, false, false);
                            J$.N(5076809, 'principals', principals, false, false, false);
                            J$.N(5076817, 'pbuf', pbuf, false, false, false);
                            J$.N(5076825, 'psshbuf', psshbuf, false, false, false);
                            J$.N(5076833, 'exts', exts, false, false, false);
                            J$.N(5076841, 'extbuf', extbuf, false, false, false);
                            J$.N(5076849, 'ext', ext, false, false, false);
                            J$.N(5076857, 'signingKeyBuf', signingKeyBuf, false, false, false);
                            J$.N(5076865, 'sigBuf', sigBuf, false, false, false);
                            var sshbuf = J$.W(5074289, 'sshbuf', J$.F(5074281, J$.R(5074257, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5074273, { buffer: J$.R(5074265, 'data', data, false, false) }, 11, false)), sshbuf, false, false);
                            var innerAlgo = J$.W(5074313, 'innerAlgo', J$.M(5074305, J$.R(5074297, 'sshbuf', sshbuf, false, false), 'readString', false)(), innerAlgo, false, false);
                            if (J$.C(272584, J$.C(272576, J$.B(586882, '!==', J$.R(5074321, 'algo', algo, false, false), J$.T(5074329, undefined, 24, false))) ? J$.B(586890, '!==', J$.R(5074337, 'innerAlgo', innerAlgo, false, false), J$.R(5074345, 'algo', algo, false, false)) : J$._()))
                                throw J$.F(5074369, J$.I(typeof Error === 'undefined' ? Error = J$.R(5074353, 'Error', undefined, true, true) : Error = J$.R(5074353, 'Error', Error, true, true)), true)(J$.T(5074361, 'SSH certificate algorithm mismatch', 21, false));
                            if (J$.C(272592, J$.B(586898, '===', J$.R(5074377, 'algo', algo, false, false), J$.T(5074385, undefined, 24, false))))
                                algo = J$.W(5074401, 'algo', J$.R(5074393, 'innerAlgo', innerAlgo, false, false), algo, false, false);
                            var cert = J$.W(5074417, 'cert', J$.T(5074409, {}, 11, false), cert, false, false);
                            J$.P(5074441, J$.R(5074425, 'cert', cert, false, false), 'signatures', J$.T(5074433, {}, 11, false));
                            J$.P(5074473, J$.G(5074457, J$.R(5074449, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(5074465, {}, 11, false));
                            J$.P(5074521, J$.G(5074497, J$.G(5074489, J$.R(5074481, 'cert', cert, false, false), 'signatures'), 'openssh'), 'nonce', J$.M(5074513, J$.R(5074505, 'sshbuf', sshbuf, false, false), 'readBuffer', false)());
                            var key = J$.W(5074537, 'key', J$.T(5074529, {}, 11, false), key, false, false);
                            var parts = J$.W(5074569, 'parts', J$.P(5074561, J$.R(5074545, 'key', key, false, false), 'parts', J$.T(5074553, [], 10, false)), parts, false, false);
                            J$.P(5074609, J$.R(5074577, 'key', key, false, false), 'type', J$.F(5074601, J$.R(5074585, 'getAlg', getAlg, false, true), false)(J$.R(5074593, 'algo', algo, false, false)));
                            var partCount = J$.W(5074673, 'partCount', J$.G(5074665, J$.G(5074657, J$.G(5074649, J$.G(5074625, J$.R(5074617, 'algs', algs, false, true), 'info'), J$.G(5074641, J$.R(5074633, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(272600, J$.B(586906, '<', J$.G(5074689, J$.R(5074681, 'parts', parts, false, false), 'length'), J$.R(5074697, 'partCount', partCount, false, false))))
                                J$.M(5074729, J$.R(5074705, 'parts', parts, false, false), 'push', false)(J$.M(5074721, J$.R(5074713, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            J$.M(5074777, J$.R(5074737, 'assert', assert, false, true), 'ok', false)(J$.B(586914, '>=', J$.G(5074753, J$.R(5074745, 'parts', parts, false, false), 'length'), J$.T(5074761, 1, 22, false)), J$.T(5074769, 'key must have at least one part', 21, false));
                            var algInfo = J$.W(5074825, 'algInfo', J$.G(5074817, J$.G(5074793, J$.R(5074785, 'algs', algs, false, true), 'info'), J$.G(5074809, J$.R(5074801, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(272608, J$.B(586922, '===', J$.G(5074841, J$.R(5074833, 'key', key, false, false), 'type'), J$.T(5074849, 'ecdsa', 21, false)))) {
                                var res = J$.W(5074881, 'res', J$.M(5074873, J$.R(5074857, 'ECDSA_ALGO', ECDSA_ALGO, false, true), 'exec', false)(J$.R(5074865, 'algo', algo, false, false)), res, false, false);
                                J$.M(5074913, J$.R(5074889, 'assert', assert, false, true), 'ok', false)(J$.B(586930, '!==', J$.R(5074897, 'res', res, false, false), J$.T(5074905, null, 25, false)));
                                J$.M(5074993, J$.R(5074921, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5074945, J$.R(5074929, 'res', res, false, false), J$.T(5074937, 1, 22, false)), J$.M(5074985, J$.G(5074977, J$.G(5074969, J$.R(5074953, 'parts', parts, false, false), J$.T(5074961, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            for (var i = J$.W(5075009, 'i', J$.T(5075001, 0, 22, false), i, false, false); J$.C(272632, J$.B(586938, '<', J$.R(5075017, 'i', i, false, false), J$.G(5075041, J$.G(5075033, J$.R(5075025, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(5075057, 'i', J$.B(586954, '+', J$.U(586946, '+', J$.R(5075049, 'i', i, false, false)), 1), i, false, false)) {
                                J$.P(5075121, J$.G(5075081, J$.R(5075065, 'parts', parts, false, false), J$.R(5075073, 'i', i, false, false)), 'name', J$.G(5075113, J$.G(5075097, J$.R(5075089, 'algInfo', algInfo, false, false), 'parts'), J$.R(5075105, 'i', i, false, false)));
                                if (J$.C(272624, J$.C(272616, J$.B(586962, '!==', J$.G(5075153, J$.G(5075145, J$.R(5075129, 'parts', parts, false, false), J$.R(5075137, 'i', i, false, false)), 'name'), J$.T(5075161, 'curve', 21, false))) ? J$.B(586970, '!==', J$.G(5075177, J$.R(5075169, 'algInfo', algInfo, false, false), 'normalize'), J$.T(5075185, false, 23, false)) : J$._())) {
                                    var p = J$.W(5075217, 'p', J$.G(5075209, J$.R(5075193, 'parts', parts, false, false), J$.R(5075201, 'i', i, false, false)), p, false, false);
                                    J$.P(5075265, J$.R(5075225, 'p', p, false, false), 'data', J$.M(5075257, J$.R(5075233, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5075249, J$.R(5075241, 'p', p, false, false), 'data')));
                                }
                            }
                            J$.P(5075305, J$.R(5075273, 'cert', cert, false, false), 'subjectKey', J$.F(5075297, J$.R(5075281, 'Key', Key, false, true), true)(J$.R(5075289, 'key', key, false, false)));
                            J$.P(5075337, J$.R(5075313, 'cert', cert, false, false), 'serial', J$.M(5075329, J$.R(5075321, 'sshbuf', sshbuf, false, false), 'readInt64', false)());
                            var type = J$.W(5075377, 'type', J$.G(5075369, J$.R(5075345, 'TYPES', TYPES, false, true), J$.M(5075361, J$.R(5075353, 'sshbuf', sshbuf, false, false), 'readInt', false)()), type, false, false);
                            J$.M(5075409, J$.R(5075385, 'assert', assert, false, true), 'string', false)(J$.R(5075393, 'type', type, false, false), J$.T(5075401, 'valid cert type', 21, false));
                            J$.P(5075457, J$.G(5075433, J$.G(5075425, J$.R(5075417, 'cert', cert, false, false), 'signatures'), 'openssh'), 'keyId', J$.M(5075449, J$.R(5075441, 'sshbuf', sshbuf, false, false), 'readString', false)());
                            var principals = J$.W(5075473, 'principals', J$.T(5075465, [], 10, false), principals, false, false);
                            var pbuf = J$.W(5075497, 'pbuf', J$.M(5075489, J$.R(5075481, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), pbuf, false, false);
                            var psshbuf = J$.W(5075537, 'psshbuf', J$.F(5075529, J$.R(5075505, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5075521, { buffer: J$.R(5075513, 'pbuf', pbuf, false, false) }, 11, false)), psshbuf, false, false);
                            while (J$.C(272640, J$.U(586978, '!', J$.M(5075553, J$.R(5075545, 'psshbuf', psshbuf, false, false), 'atEnd', false)())))
                                J$.M(5075585, J$.R(5075561, 'principals', principals, false, false), 'push', false)(J$.M(5075577, J$.R(5075569, 'psshbuf', psshbuf, false, false), 'readString', false)());
                            if (J$.C(272648, J$.B(586986, '===', J$.G(5075601, J$.R(5075593, 'principals', principals, false, false), 'length'), J$.T(5075609, 0, 22, false))))
                                principals = J$.W(5075633, 'principals', J$.T(5075625, [J$.T(5075617, '*', 21, false)], 10, false), principals, false, false);
                            J$.P(5075825, J$.R(5075641, 'cert', cert, false, false), 'subjects', J$.M(5075817, J$.R(5075649, 'principals', principals, false, false), 'map', false)(J$.T(5075809, function (pr) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(5075785, arguments.callee, this, arguments);
                                            arguments = J$.N(5075793, 'arguments', arguments, true, false, false);
                                            pr = J$.N(5075801, 'pr', pr, true, false, false);
                                            if (J$.C(272664, J$.B(586994, '===', J$.R(5075657, 'type', type, false, false), J$.T(5075665, 'user', 21, false))))
                                                return J$.Rt(5075697, J$.M(5075689, J$.R(5075673, 'Identity', Identity, false, true), 'forUser', false)(J$.R(5075681, 'pr', pr, false, false)));
                                            else if (J$.C(272656, J$.B(587002, '===', J$.R(5075705, 'type', type, false, false), J$.T(5075713, 'host', 21, false))))
                                                return J$.Rt(5075745, J$.M(5075737, J$.R(5075721, 'Identity', Identity, false, true), 'forHost', false)(J$.R(5075729, 'pr', pr, false, false)));
                                            throw J$.F(5075777, J$.I(typeof Error === 'undefined' ? Error = J$.R(5075753, 'Error', undefined, true, true) : Error = J$.R(5075753, 'Error', Error, true, true)), true)(J$.B(587010, '+', J$.T(5075761, 'Unknown identity type ', 21, false), J$.R(5075769, 'type', type, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5081329, J$e);
                                        } finally {
                                            if (J$.Fr(5081337))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                            J$.P(5075873, J$.R(5075833, 'cert', cert, false, false), 'validFrom', J$.F(5075865, J$.R(5075841, 'int64ToDate', int64ToDate, false, true), false)(J$.M(5075857, J$.R(5075849, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            J$.P(5075921, J$.R(5075881, 'cert', cert, false, false), 'validUntil', J$.F(5075913, J$.R(5075889, 'int64ToDate', int64ToDate, false, true), false)(J$.M(5075905, J$.R(5075897, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            var exts = J$.W(5075937, 'exts', J$.T(5075929, [], 10, false), exts, false, false);
                            var extbuf = J$.W(5075985, 'extbuf', J$.F(5075977, J$.R(5075945, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5075969, { buffer: J$.M(5075961, J$.R(5075953, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            var ext;
                            while (J$.C(272672, J$.U(587018, '!', J$.M(5076001, J$.R(5075993, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(5076025, 'ext', J$.T(5076017, { critical: J$.T(5076009, true, 23, false) }, 11, false), ext, false, false);
                                J$.P(5076057, J$.R(5076033, 'ext', ext, false, false), 'name', J$.M(5076049, J$.R(5076041, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(5076089, J$.R(5076065, 'ext', ext, false, false), 'data', J$.M(5076081, J$.R(5076073, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(5076113, J$.R(5076097, 'exts', exts, false, false), 'push', false)(J$.R(5076105, 'ext', ext, false, false));
                            }
                            extbuf = J$.W(5076161, 'extbuf', J$.F(5076153, J$.R(5076121, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5076145, { buffer: J$.M(5076137, J$.R(5076129, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            while (J$.C(272680, J$.U(587026, '!', J$.M(5076177, J$.R(5076169, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(5076201, 'ext', J$.T(5076193, { critical: J$.T(5076185, false, 23, false) }, 11, false), ext, false, false);
                                J$.P(5076233, J$.R(5076209, 'ext', ext, false, false), 'name', J$.M(5076225, J$.R(5076217, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(5076265, J$.R(5076241, 'ext', ext, false, false), 'data', J$.M(5076257, J$.R(5076249, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(5076289, J$.R(5076273, 'exts', exts, false, false), 'push', false)(J$.R(5076281, 'ext', ext, false, false));
                            }
                            J$.P(5076329, J$.G(5076313, J$.G(5076305, J$.R(5076297, 'cert', cert, false, false), 'signatures'), 'openssh'), 'exts', J$.R(5076321, 'exts', exts, false, false));
                            J$.M(5076345, J$.R(5076337, 'sshbuf', sshbuf, false, false), 'readBuffer', false)();
                            var signingKeyBuf = J$.W(5076369, 'signingKeyBuf', J$.M(5076361, J$.R(5076353, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), signingKeyBuf, false, false);
                            J$.P(5076409, J$.R(5076377, 'cert', cert, false, false), 'issuerKey', J$.M(5076401, J$.R(5076385, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(5076393, 'signingKeyBuf', signingKeyBuf, false, false)));
                            J$.P(5076449, J$.R(5076417, 'cert', cert, false, false), 'issuer', J$.M(5076441, J$.R(5076425, 'Identity', Identity, false, true), 'forHost', false)(J$.T(5076433, '**', 21, false)));
                            var sigBuf = J$.W(5076473, 'sigBuf', J$.M(5076465, J$.R(5076457, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), sigBuf, false, false);
                            J$.P(5076561, J$.G(5076497, J$.G(5076489, J$.R(5076481, 'cert', cert, false, false), 'signatures'), 'openssh'), 'signature', J$.M(5076553, J$.R(5076505, 'Signature', Signature, false, true), 'parse', false)(J$.R(5076513, 'sigBuf', sigBuf, false, false), J$.G(5076537, J$.G(5076529, J$.R(5076521, 'cert', cert, false, false), 'issuerKey'), 'type'), J$.T(5076545, 'ssh', 21, false)));
                            if (J$.C(272688, J$.B(587034, '!==', J$.R(5076569, 'partial', partial, false, false), J$.T(5076577, undefined, 24, false)))) {
                                J$.P(5076609, J$.R(5076585, 'partial', partial, false, false), 'remainder', J$.M(5076601, J$.R(5076593, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(5076641, J$.R(5076617, 'partial', partial, false, false), 'consumed', J$.G(5076633, J$.R(5076625, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(5076673, J$.F(5076665, J$.R(5076649, 'Certificate', Certificate, false, true), true)(J$.R(5076657, 'cert', cert, false, false)));
                        } catch (J$e) {
                            J$.Ex(5081345, J$e);
                        } finally {
                            if (J$.Fr(5081353))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function int64ToDate(buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5077049, arguments.callee, this, arguments);
                            arguments = J$.N(5077057, 'arguments', arguments, true, false, false);
                            buf = J$.N(5077065, 'buf', buf, true, false, false);
                            J$.N(5077073, 'i', i, false, false, false);
                            J$.N(5077081, 'd', d, false, false, false);
                            var i = J$.W(5076905, 'i', J$.B(587042, '*', J$.M(5076889, J$.R(5076873, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(5076881, 0, 22, false)), J$.T(5076897, 4294967296, 22, false)), i, false, false);
                            i = J$.W(5076945, 'i', J$.B(587050, '+', J$.R(5076937, 'i', i, false, false), J$.M(5076929, J$.R(5076913, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(5076921, 4, 22, false))), i, false, false);
                            var d = J$.W(5076969, 'd', J$.F(5076961, J$.I(typeof Date === 'undefined' ? Date = J$.R(5076953, 'Date', undefined, true, true) : Date = J$.R(5076953, 'Date', Date, true, true)), true)(), d, false, false);
                            J$.M(5077001, J$.R(5076977, 'd', d, false, false), 'setTime', false)(J$.B(587058, '*', J$.R(5076985, 'i', i, false, false), J$.T(5076993, 1000, 22, false)));
                            J$.P(5077025, J$.R(5077009, 'd', d, false, false), 'sourceInt64', J$.R(5077017, 'buf', buf, false, false));
                            return J$.Rt(5077041, J$.R(5077033, 'd', d, false, false));
                        } catch (J$e) {
                            J$.Ex(5081361, J$e);
                        } finally {
                            if (J$.Fr(5081369))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dateToInt64(date) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5077377, arguments.callee, this, arguments);
                            arguments = J$.N(5077385, 'arguments', arguments, true, false, false);
                            date = J$.N(5077393, 'date', date, true, false, false);
                            J$.N(5077401, 'i', i, false, false, false);
                            J$.N(5077409, 'upper', upper, false, false, false);
                            J$.N(5077417, 'lower', lower, false, false, false);
                            J$.N(5077425, 'buf', buf, false, false, false);
                            if (J$.C(272696, J$.B(587066, '!==', J$.G(5077097, J$.R(5077089, 'date', date, false, false), 'sourceInt64'), J$.T(5077105, undefined, 24, false))))
                                return J$.Rt(5077129, J$.G(5077121, J$.R(5077113, 'date', date, false, false), 'sourceInt64'));
                            var i = J$.W(5077177, 'i', J$.M(5077169, J$.I(typeof Math === 'undefined' ? Math = J$.R(5077137, 'Math', undefined, true, true) : Math = J$.R(5077137, 'Math', Math, true, true)), 'round', false)(J$.B(587074, '/', J$.M(5077153, J$.R(5077145, 'date', date, false, false), 'getTime', false)(), J$.T(5077161, 1000, 22, false))), i, false, false);
                            var upper = J$.W(5077217, 'upper', J$.M(5077209, J$.I(typeof Math === 'undefined' ? Math = J$.R(5077185, 'Math', undefined, true, true) : Math = J$.R(5077185, 'Math', Math, true, true)), 'floor', false)(J$.B(587082, '/', J$.R(5077193, 'i', i, false, false), J$.T(5077201, 4294967296, 22, false))), upper, false, false);
                            var lower = J$.W(5077257, 'lower', J$.M(5077249, J$.I(typeof Math === 'undefined' ? Math = J$.R(5077225, 'Math', undefined, true, true) : Math = J$.R(5077225, 'Math', Math, true, true)), 'floor', false)(J$.B(587090, '%', J$.R(5077233, 'i', i, false, false), J$.T(5077241, 4294967296, 22, false))), lower, false, false);
                            var buf = J$.W(5077289, 'buf', J$.M(5077281, J$.R(5077265, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(5077273, 8, 22, false)), buf, false, false);
                            J$.M(5077321, J$.R(5077297, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(5077305, 'upper', upper, false, false), J$.T(5077313, 0, 22, false));
                            J$.M(5077353, J$.R(5077329, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(5077337, 'lower', lower, false, false), J$.T(5077345, 4, 22, false));
                            return J$.Rt(5077369, J$.R(5077361, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(5081377, J$e);
                        } finally {
                            if (J$.Fr(5081385))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sign(cert, key) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5077793, arguments.callee, this, arguments);
                            arguments = J$.N(5077801, 'arguments', arguments, true, false, false);
                            cert = J$.N(5077809, 'cert', cert, true, false, false);
                            key = J$.N(5077817, 'key', key, true, false, false);
                            J$.N(5077825, 'blob', blob, false, false, false);
                            J$.N(5077833, 'sig', sig, false, false, false);
                            J$.N(5077841, 'hashAlgo', hashAlgo, false, false, false);
                            J$.N(5077849, 'signer', signer, false, false, false);
                            if (J$.C(272704, J$.B(587098, '===', J$.G(5077449, J$.G(5077441, J$.R(5077433, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(5077457, undefined, 24, false))))
                                J$.P(5077489, J$.G(5077473, J$.R(5077465, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(5077481, {}, 11, false));
                            try {
                                var blob = J$.W(5077529, 'blob', J$.F(5077521, J$.R(5077497, 'toBuffer', toBuffer, false, true), false)(J$.R(5077505, 'cert', cert, false, false), J$.T(5077513, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(5077569, 'e', e, false, false, true);
                                J$.B(587106, 'delete', J$.G(5077545, J$.R(5077537, 'cert', cert, false, false), 'signatures'), 'openssh');
                                return J$.Rt(5077561, J$.T(5077553, false, 23, false));
                            }
                            var sig = J$.W(5077601, 'sig', J$.G(5077593, J$.G(5077585, J$.R(5077577, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            var hashAlgo = J$.W(5077617, 'hashAlgo', J$.T(5077609, undefined, 24, false), hashAlgo, false, false);
                            if (J$.C(272720, J$.C(272712, J$.B(587114, '===', J$.G(5077633, J$.R(5077625, 'key', key, false, false), 'type'), J$.T(5077641, 'rsa', 21, false))) ? J$._() : J$.B(587122, '===', J$.G(5077657, J$.R(5077649, 'key', key, false, false), 'type'), J$.T(5077665, 'dsa', 21, false))))
                                hashAlgo = J$.W(5077681, 'hashAlgo', J$.T(5077673, 'sha1', 21, false), hashAlgo, false, false);
                            var signer = J$.W(5077713, 'signer', J$.M(5077705, J$.R(5077689, 'key', key, false, false), 'createSign', false)(J$.R(5077697, 'hashAlgo', hashAlgo, false, false)), signer, false, false);
                            J$.M(5077737, J$.R(5077721, 'signer', signer, false, false), 'write', false)(J$.R(5077729, 'blob', blob, false, false));
                            J$.P(5077769, J$.R(5077745, 'sig', sig, false, false), 'signature', J$.M(5077761, J$.R(5077753, 'signer', signer, false, false), 'sign', false)());
                            return J$.Rt(5077785, J$.T(5077777, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(5081393, J$e);
                        } finally {
                            if (J$.Fr(5081401))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function signAsync(cert, signer, done) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5078257, arguments.callee, this, arguments);
                            arguments = J$.N(5078265, 'arguments', arguments, true, false, false);
                            cert = J$.N(5078273, 'cert', cert, true, false, false);
                            signer = J$.N(5078281, 'signer', signer, true, false, false);
                            done = J$.N(5078289, 'done', done, true, false, false);
                            J$.N(5078297, 'blob', blob, false, false, false);
                            J$.N(5078305, 'sig', sig, false, false, false);
                            if (J$.C(272728, J$.B(587130, '===', J$.G(5077873, J$.G(5077865, J$.R(5077857, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(5077881, undefined, 24, false))))
                                J$.P(5077913, J$.G(5077897, J$.R(5077889, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(5077905, {}, 11, false));
                            try {
                                var blob = J$.W(5077953, 'blob', J$.F(5077945, J$.R(5077921, 'toBuffer', toBuffer, false, true), false)(J$.R(5077929, 'cert', cert, false, false), J$.T(5077937, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(5078009, 'e', e, false, false, true);
                                J$.B(587138, 'delete', J$.G(5077969, J$.R(5077961, 'cert', cert, false, false), 'signatures'), 'openssh');
                                J$.F(5077993, J$.R(5077977, 'done', done, false, false), false)(J$.R(5077985, 'e', e, false, false));
                                return J$.Rt(5078001, undefined);
                            }
                            var sig = J$.W(5078041, 'sig', J$.G(5078033, J$.G(5078025, J$.R(5078017, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            J$.F(5078249, J$.R(5078049, 'signer', signer, false, false), false)(J$.R(5078057, 'blob', blob, false, false), J$.T(5078241, function (err, signature) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(5078209, arguments.callee, this, arguments);
                                            arguments = J$.N(5078217, 'arguments', arguments, true, false, false);
                                            err = J$.N(5078225, 'err', err, true, false, false);
                                            signature = J$.N(5078233, 'signature', signature, true, false, false);
                                            if (J$.C(272736, J$.R(5078065, 'err', err, false, false))) {
                                                J$.F(5078089, J$.R(5078073, 'done', done, false, false), false)(J$.R(5078081, 'err', err, false, false));
                                                return J$.Rt(5078097, undefined);
                                            }
                                            try {
                                                J$.M(5078121, J$.R(5078105, 'signature', signature, false, false), 'toBuffer', false)(J$.T(5078113, 'ssh', 21, false));
                                            } catch (e) {
                                                J$.N(5078161, 'e', e, false, false, true);
                                                J$.F(5078145, J$.R(5078129, 'done', done, false, false), false)(J$.R(5078137, 'e', e, false, false));
                                                return J$.Rt(5078153, undefined);
                                            }
                                            J$.P(5078185, J$.R(5078169, 'sig', sig, false, false), 'signature', J$.R(5078177, 'signature', signature, false, false));
                                            J$.F(5078201, J$.R(5078193, 'done', done, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(5081409, J$e);
                                        } finally {
                                            if (J$.Fr(5081417))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(5081425, J$e);
                        } finally {
                            if (J$.Fr(5081433))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(cert, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5078521, arguments.callee, this, arguments);
                            arguments = J$.N(5078529, 'arguments', arguments, true, false, false);
                            cert = J$.N(5078537, 'cert', cert, true, false, false);
                            options = J$.N(5078545, 'options', options, true, false, false);
                            J$.N(5078553, 'blob', blob, false, false, false);
                            J$.N(5078561, 'out', out, false, false, false);
                            if (J$.C(272744, J$.B(587146, '===', J$.R(5078313, 'options', options, false, false), J$.T(5078321, undefined, 24, false))))
                                options = J$.W(5078337, 'options', J$.T(5078329, {}, 11, false), options, false, false);
                            var blob = J$.W(5078369, 'blob', J$.F(5078361, J$.R(5078345, 'toBuffer', toBuffer, false, true), false)(J$.R(5078353, 'cert', cert, false, false)), blob, false, false);
                            var out = J$.W(5078441, 'out', J$.B(587162, '+', J$.B(587154, '+', J$.F(5078401, J$.R(5078377, 'getCertType', getCertType, false, true), false)(J$.G(5078393, J$.R(5078385, 'cert', cert, false, false), 'subjectKey')), J$.T(5078409, ' ', 21, false)), J$.M(5078433, J$.R(5078417, 'blob', blob, false, false), 'toString', false)(J$.T(5078425, 'base64', 21, false))), out, false, false);
                            if (J$.C(272752, J$.G(5078457, J$.R(5078449, 'options', options, false, false), 'comment')))
                                out = J$.W(5078497, 'out', J$.B(587178, '+', J$.B(587170, '+', J$.R(5078465, 'out', out, false, false), J$.T(5078473, ' ', 21, false)), J$.G(5078489, J$.R(5078481, 'options', options, false, false), 'comment')), out, false, false);
                            return J$.Rt(5078513, J$.R(5078505, 'out', out, false, false));
                        } catch (J$e) {
                            J$.Ex(5081441, J$e);
                        } finally {
                            if (J$.Fr(5081449))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function toBuffer(cert, noSig) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(5080449, arguments.callee, this, arguments);
                            arguments = J$.N(5080457, 'arguments', arguments, true, false, false);
                            cert = J$.N(5080465, 'cert', cert, true, false, false);
                            noSig = J$.N(5080473, 'noSig', noSig, true, false, false);
                            J$.N(5080481, 'sig', sig, false, false, false);
                            J$.N(5080489, 'buf', buf, false, false, false);
                            J$.N(5080497, 'key', key, false, false, false);
                            J$.N(5080505, 'algInfo', algInfo, false, false, false);
                            J$.N(5080513, 'type', type, false, false, false);
                            J$.N(5080521, 'sub', sub, false, false, false);
                            J$.N(5080529, 'exts', exts, false, false, false);
                            J$.N(5080537, 'extbuf', extbuf, false, false, false);
                            J$.M(5078609, J$.R(5078569, 'assert', assert, false, true), 'object', false)(J$.G(5078593, J$.G(5078585, J$.R(5078577, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(5078601, 'signature for openssh format', 21, false));
                            var sig = J$.W(5078641, 'sig', J$.G(5078633, J$.G(5078625, J$.R(5078617, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            if (J$.C(272760, J$.B(587186, '===', J$.G(5078657, J$.R(5078649, 'sig', sig, false, false), 'nonce'), J$.T(5078665, undefined, 24, false))))
                                J$.P(5078705, J$.R(5078673, 'sig', sig, false, false), 'nonce', J$.M(5078697, J$.R(5078681, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(5078689, 16, 22, false)));
                            var buf = J$.W(5078737, 'buf', J$.F(5078729, J$.R(5078713, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5078721, {}, 11, false)), buf, false, false);
                            J$.M(5078785, J$.R(5078745, 'buf', buf, false, false), 'writeString', false)(J$.F(5078777, J$.R(5078753, 'getCertType', getCertType, false, true), false)(J$.G(5078769, J$.R(5078761, 'cert', cert, false, false), 'subjectKey')));
                            J$.M(5078817, J$.R(5078793, 'buf', buf, false, false), 'writeBuffer', false)(J$.G(5078809, J$.R(5078801, 'sig', sig, false, false), 'nonce'));
                            var key = J$.W(5078841, 'key', J$.G(5078833, J$.R(5078825, 'cert', cert, false, false), 'subjectKey'), key, false, false);
                            var algInfo = J$.W(5078889, 'algInfo', J$.G(5078881, J$.G(5078857, J$.R(5078849, 'algs', algs, false, true), 'info'), J$.G(5078873, J$.R(5078865, 'key', key, false, false), 'type')), algInfo, false, false);
                            J$.M(5078993, J$.G(5078905, J$.R(5078897, 'algInfo', algInfo, false, false), 'parts'), 'forEach', false)(J$.T(5078985, function (part) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(5078961, arguments.callee, this, arguments);
                                            arguments = J$.N(5078969, 'arguments', arguments, true, false, false);
                                            part = J$.N(5078977, 'part', part, true, false, false);
                                            J$.M(5078953, J$.R(5078913, 'buf', buf, false, false), 'writePart', false)(J$.G(5078945, J$.G(5078929, J$.R(5078921, 'key', key, false, false), 'part'), J$.R(5078937, 'part', part, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5081457, J$e);
                                        } finally {
                                            if (J$.Fr(5081465))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(5079025, J$.R(5079001, 'buf', buf, false, false), 'writeInt64', false)(J$.G(5079017, J$.R(5079009, 'cert', cert, false, false), 'serial'));
                            var type = J$.W(5079073, 'type', J$.G(5079065, J$.G(5079057, J$.G(5079041, J$.R(5079033, 'cert', cert, false, false), 'subjects'), J$.T(5079049, 0, 22, false)), 'type'), type, false, false);
                            J$.M(5079105, J$.R(5079081, 'assert', assert, false, true), 'notStrictEqual', false)(J$.R(5079089, 'type', type, false, false), J$.T(5079097, 'unknown', 21, false));
                            J$.M(5079201, J$.G(5079121, J$.R(5079113, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(5079193, function (id) {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(5079169, arguments.callee, this, arguments);
                                            arguments = J$.N(5079177, 'arguments', arguments, true, false, false);
                                            id = J$.N(5079185, 'id', id, true, false, false);
                                            J$.M(5079161, J$.R(5079129, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5079145, J$.R(5079137, 'id', id, false, false), 'type'), J$.R(5079153, 'type', type, false, false));
                                        } catch (J$e) {
                                            J$.Ex(5081473, J$e);
                                        } finally {
                                            if (J$.Fr(5081481))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            type = J$.W(5079233, 'type', J$.G(5079225, J$.R(5079209, 'TYPES', TYPES, false, true), J$.R(5079217, 'type', type, false, false)), type, false, false);
                            J$.M(5079257, J$.R(5079241, 'buf', buf, false, false), 'writeInt', false)(J$.R(5079249, 'type', type, false, false));
                            if (J$.C(272776, J$.B(587194, '===', J$.G(5079273, J$.R(5079265, 'sig', sig, false, false), 'keyId'), J$.T(5079281, undefined, 24, false)))) {
                                J$.P(5079425, J$.R(5079289, 'sig', sig, false, false), 'keyId', J$.B(587210, '+', J$.B(587202, '+', J$.G(5079329, J$.G(5079321, J$.G(5079305, J$.R(5079297, 'cert', cert, false, false), 'subjects'), J$.T(5079313, 0, 22, false)), 'type'), J$.T(5079337, '_', 21, false)), J$.C(272768, J$.G(5079377, J$.G(5079369, J$.G(5079353, J$.R(5079345, 'cert', cert, false, false), 'subjects'), J$.T(5079361, 0, 22, false)), 'uid')) ? J$._() : J$.G(5079417, J$.G(5079409, J$.G(5079393, J$.R(5079385, 'cert', cert, false, false), 'subjects'), J$.T(5079401, 0, 22, false)), 'hostname')));
                            }
                            J$.M(5079457, J$.R(5079433, 'buf', buf, false, false), 'writeString', false)(J$.G(5079449, J$.R(5079441, 'sig', sig, false, false), 'keyId'));
                            var sub = J$.W(5079489, 'sub', J$.F(5079481, J$.R(5079465, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5079473, {}, 11, false)), sub, false, false);
                            J$.M(5079657, J$.G(5079505, J$.R(5079497, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(5079649, function (id) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(5079625, arguments.callee, this, arguments);
                                            arguments = J$.N(5079633, 'arguments', arguments, true, false, false);
                                            id = J$.N(5079641, 'id', id, true, false, false);
                                            if (J$.C(272792, J$.B(587218, '===', J$.R(5079513, 'type', type, false, false), J$.G(5079529, J$.R(5079521, 'TYPES', TYPES, false, true), 'host'))))
                                                J$.M(5079561, J$.R(5079537, 'sub', sub, false, false), 'writeString', false)(J$.G(5079553, J$.R(5079545, 'id', id, false, false), 'hostname'));
                                            else if (J$.C(272784, J$.B(587226, '===', J$.R(5079569, 'type', type, false, false), J$.G(5079585, J$.R(5079577, 'TYPES', TYPES, false, true), 'user'))))
                                                J$.M(5079617, J$.R(5079593, 'sub', sub, false, false), 'writeString', false)(J$.G(5079609, J$.R(5079601, 'id', id, false, false), 'uid'));
                                        } catch (J$e) {
                                            J$.Ex(5081489, J$e);
                                        } finally {
                                            if (J$.Fr(5081497))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(5079689, J$.R(5079665, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5079681, J$.R(5079673, 'sub', sub, false, false), 'toBuffer', false)());
                            J$.M(5079737, J$.R(5079697, 'buf', buf, false, false), 'writeInt64', false)(J$.F(5079729, J$.R(5079705, 'dateToInt64', dateToInt64, false, true), false)(J$.G(5079721, J$.R(5079713, 'cert', cert, false, false), 'validFrom')));
                            J$.M(5079785, J$.R(5079745, 'buf', buf, false, false), 'writeInt64', false)(J$.F(5079777, J$.R(5079753, 'dateToInt64', dateToInt64, false, true), false)(J$.G(5079769, J$.R(5079761, 'cert', cert, false, false), 'validUntil')));
                            var exts = J$.W(5079809, 'exts', J$.G(5079801, J$.R(5079793, 'sig', sig, false, false), 'exts'), exts, false, false);
                            if (J$.C(272800, J$.B(587234, '===', J$.R(5079817, 'exts', exts, false, false), J$.T(5079825, undefined, 24, false))))
                                exts = J$.W(5079841, 'exts', J$.T(5079833, [], 10, false), exts, false, false);
                            var extbuf = J$.W(5079873, 'extbuf', J$.F(5079865, J$.R(5079849, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5079857, {}, 11, false)), extbuf, false, false);
                            J$.M(5080017, J$.R(5079881, 'exts', exts, false, false), 'forEach', false)(J$.T(5080009, function (ext) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(5079985, arguments.callee, this, arguments);
                                            arguments = J$.N(5079993, 'arguments', arguments, true, false, false);
                                            ext = J$.N(5080001, 'ext', ext, true, false, false);
                                            if (J$.C(272808, J$.B(587242, '!==', J$.G(5079897, J$.R(5079889, 'ext', ext, false, false), 'critical'), J$.T(5079905, true, 23, false))))
                                                return J$.Rt(5079913, undefined);
                                            J$.M(5079945, J$.R(5079921, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(5079937, J$.R(5079929, 'ext', ext, false, false), 'name'));
                                            J$.M(5079977, J$.R(5079953, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(5079969, J$.R(5079961, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(5081505, J$e);
                                        } finally {
                                            if (J$.Fr(5081513))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(5080049, J$.R(5080025, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5080041, J$.R(5080033, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            extbuf = J$.W(5080081, 'extbuf', J$.F(5080073, J$.R(5080057, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5080065, {}, 11, false)), extbuf, false, false);
                            J$.M(5080225, J$.R(5080089, 'exts', exts, false, false), 'forEach', false)(J$.T(5080217, function (ext) {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(5080193, arguments.callee, this, arguments);
                                            arguments = J$.N(5080201, 'arguments', arguments, true, false, false);
                                            ext = J$.N(5080209, 'ext', ext, true, false, false);
                                            if (J$.C(272816, J$.B(587250, '===', J$.G(5080105, J$.R(5080097, 'ext', ext, false, false), 'critical'), J$.T(5080113, true, 23, false))))
                                                return J$.Rt(5080121, undefined);
                                            J$.M(5080153, J$.R(5080129, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(5080145, J$.R(5080137, 'ext', ext, false, false), 'name'));
                                            J$.M(5080185, J$.R(5080161, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(5080177, J$.R(5080169, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(5081521, J$e);
                                        } finally {
                                            if (J$.Fr(5081529))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(5080257, J$.R(5080233, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5080249, J$.R(5080241, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            J$.M(5080297, J$.R(5080265, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5080289, J$.R(5080273, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(5080281, 0, 22, false)));
                            sub = J$.W(5080337, 'sub', J$.M(5080329, J$.R(5080305, 'rfc4253', rfc4253, false, true), 'write', false)(J$.G(5080321, J$.R(5080313, 'cert', cert, false, false), 'issuerKey')), sub, false, false);
                            J$.M(5080361, J$.R(5080345, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(5080353, 'sub', sub, false, false));
                            if (J$.C(272824, J$.U(587258, '!', J$.R(5080369, 'noSig', noSig, false, false))))
                                J$.M(5080417, J$.R(5080377, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5080409, J$.G(5080393, J$.R(5080385, 'sig', sig, false, false), 'signature'), 'toBuffer', false)(J$.T(5080401, 'ssh', 21, false)));
                            return J$.Rt(5080441, J$.M(5080433, J$.R(5080425, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(5081537, J$e);
                        } finally {
                            if (J$.Fr(5081545))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getAlg(certType) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(5080713, arguments.callee, this, arguments);
                            arguments = J$.N(5080721, 'arguments', arguments, true, false, false);
                            certType = J$.N(5080729, 'certType', certType, true, false, false);
                            if (J$.C(272832, J$.B(587266, '===', J$.R(5080545, 'certType', certType, false, false), J$.T(5080553, 'ssh-rsa-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(5080569, J$.T(5080561, 'rsa', 21, false));
                            if (J$.C(272840, J$.B(587274, '===', J$.R(5080577, 'certType', certType, false, false), J$.T(5080585, 'ssh-dss-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(5080601, J$.T(5080593, 'dsa', 21, false));
                            if (J$.C(272848, J$.M(5080625, J$.R(5080609, 'certType', certType, false, false), 'match', false)(J$.R(5080617, 'ECDSA_ALGO', ECDSA_ALGO, false, true))))
                                return J$.Rt(5080641, J$.T(5080633, 'ecdsa', 21, false));
                            if (J$.C(272856, J$.B(587282, '===', J$.R(5080649, 'certType', certType, false, false), J$.T(5080657, 'ssh-ed25519-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(5080673, J$.T(5080665, 'ed25519', 21, false));
                            throw J$.F(5080705, J$.I(typeof Error === 'undefined' ? Error = J$.R(5080681, 'Error', undefined, true, true) : Error = J$.R(5080681, 'Error', Error, true, true)), true)(J$.B(587290, '+', J$.T(5080689, 'Unsupported cert type ', 21, false), J$.R(5080697, 'certType', certType, false, false)));
                        } catch (J$e) {
                            J$.Ex(5081553, J$e);
                        } finally {
                            if (J$.Fr(5081561))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCertType(key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(5080961, arguments.callee, this, arguments);
                            arguments = J$.N(5080969, 'arguments', arguments, true, false, false);
                            key = J$.N(5080977, 'key', key, true, false, false);
                            if (J$.C(272864, J$.B(587298, '===', J$.G(5080745, J$.R(5080737, 'key', key, false, false), 'type'), J$.T(5080753, 'rsa', 21, false))))
                                return J$.Rt(5080769, J$.T(5080761, 'ssh-rsa-cert-v01@openssh.com', 21, false));
                            if (J$.C(272872, J$.B(587306, '===', J$.G(5080785, J$.R(5080777, 'key', key, false, false), 'type'), J$.T(5080793, 'dsa', 21, false))))
                                return J$.Rt(5080809, J$.T(5080801, 'ssh-dss-cert-v01@openssh.com', 21, false));
                            if (J$.C(272880, J$.B(587314, '===', J$.G(5080825, J$.R(5080817, 'key', key, false, false), 'type'), J$.T(5080833, 'ecdsa', 21, false))))
                                return J$.Rt(5080873, J$.B(587330, '+', J$.B(587322, '+', J$.T(5080841, 'ecdsa-sha2-', 21, false), J$.G(5080857, J$.R(5080849, 'key', key, false, false), 'curve')), J$.T(5080865, '-cert-v01@openssh.com', 21, false)));
                            if (J$.C(272888, J$.B(587338, '===', J$.G(5080889, J$.R(5080881, 'key', key, false, false), 'type'), J$.T(5080897, 'ed25519', 21, false))))
                                return J$.Rt(5080913, J$.T(5080905, 'ssh-ed25519-cert-v01@openssh.com', 21, false));
                            throw J$.F(5080953, J$.I(typeof Error === 'undefined' ? Error = J$.R(5080921, 'Error', undefined, true, true) : Error = J$.R(5080921, 'Error', Error, true, true)), true)(J$.B(587346, '+', J$.T(5080929, 'Unsupported key type ', 21, false), J$.G(5080945, J$.R(5080937, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(5081569, J$e);
                        } finally {
                            if (J$.Fr(5081577))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5080993, 'assert', assert, false, false, false);
            J$.N(5081001, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(5081009, 'crypto', crypto, false, false, false);
            J$.N(5081017, 'Buffer', Buffer, false, false, false);
            J$.N(5081025, 'algs', algs, false, false, false);
            J$.N(5081033, 'Key', Key, false, false, false);
            J$.N(5081041, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5081049, 'Identity', Identity, false, false, false);
            J$.N(5081057, 'rfc4253', rfc4253, false, false, false);
            J$.N(5081065, 'Signature', Signature, false, false, false);
            J$.N(5081073, 'utils', utils, false, false, false);
            J$.N(5081081, 'Certificate', Certificate, false, false, false);
            verify = J$.N(5081097, 'verify', J$.T(5081089, verify, 12, false), true, false, false);
            J$.N(5081105, 'TYPES', TYPES, false, false, false);
            J$.N(5081113, 'ECDSA_ALGO', ECDSA_ALGO, false, false, false);
            read = J$.N(5081129, 'read', J$.T(5081121, read, 12, false), true, false, false);
            fromBuffer = J$.N(5081145, 'fromBuffer', J$.T(5081137, fromBuffer, 12, false), true, false, false);
            int64ToDate = J$.N(5081161, 'int64ToDate', J$.T(5081153, int64ToDate, 12, false), true, false, false);
            dateToInt64 = J$.N(5081177, 'dateToInt64', J$.T(5081169, dateToInt64, 12, false), true, false, false);
            sign = J$.N(5081193, 'sign', J$.T(5081185, sign, 12, false), true, false, false);
            signAsync = J$.N(5081209, 'signAsync', J$.T(5081201, signAsync, 12, false), true, false, false);
            write = J$.N(5081225, 'write', J$.T(5081217, write, 12, false), true, false, false);
            toBuffer = J$.N(5081241, 'toBuffer', J$.T(5081233, toBuffer, 12, false), true, false, false);
            getAlg = J$.N(5081257, 'getAlg', J$.T(5081249, getAlg, 12, false), true, false, false);
            getCertType = J$.N(5081273, 'getCertType', J$.T(5081265, getCertType, 12, false), true, false, false);
            J$.P(5073281, J$.I(typeof module === 'undefined' ? module = J$.R(5073209, 'module', undefined, true, true) : module = J$.R(5073209, 'module', module, true, true)), 'exports', J$.T(5073273, {
                read: J$.R(5073217, 'read', read, false, true),
                verify: J$.R(5073225, 'verify', verify, false, true),
                sign: J$.R(5073233, 'sign', sign, false, true),
                signAsync: J$.R(5073241, 'signAsync', signAsync, false, true),
                write: J$.R(5073249, 'write', write, false, true),
                fromBuffer: J$.R(5073257, 'fromBuffer', fromBuffer, false, true),
                toBuffer: J$.R(5073265, 'toBuffer', toBuffer, false, true)
            }, 11, false));
            var assert = J$.W(5073313, 'assert', J$.F(5073305, J$.I(typeof require === 'undefined' ? require = J$.R(5073289, 'require', undefined, true, true) : require = J$.R(5073289, 'require', require, true, true)), false)(J$.T(5073297, 'assert-plus', 21, false)), assert, false, true);
            var SSHBuffer = J$.W(5073345, 'SSHBuffer', J$.F(5073337, J$.I(typeof require === 'undefined' ? require = J$.R(5073321, 'require', undefined, true, true) : require = J$.R(5073321, 'require', require, true, true)), false)(J$.T(5073329, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var crypto = J$.W(5073377, 'crypto', J$.F(5073369, J$.I(typeof require === 'undefined' ? require = J$.R(5073353, 'require', undefined, true, true) : require = J$.R(5073353, 'require', require, true, true)), false)(J$.T(5073361, 'crypto', 21, false)), crypto, false, true);
            var Buffer = J$.W(5073417, 'Buffer', J$.G(5073409, J$.F(5073401, J$.I(typeof require === 'undefined' ? require = J$.R(5073385, 'require', undefined, true, true) : require = J$.R(5073385, 'require', require, true, true)), false)(J$.T(5073393, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5073449, 'algs', J$.F(5073441, J$.I(typeof require === 'undefined' ? require = J$.R(5073425, 'require', undefined, true, true) : require = J$.R(5073425, 'require', require, true, true)), false)(J$.T(5073433, '../algs', 21, false)), algs, false, true);
            var Key = J$.W(5073481, 'Key', J$.F(5073473, J$.I(typeof require === 'undefined' ? require = J$.R(5073457, 'require', undefined, true, true) : require = J$.R(5073457, 'require', require, true, true)), false)(J$.T(5073465, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5073513, 'PrivateKey', J$.F(5073505, J$.I(typeof require === 'undefined' ? require = J$.R(5073489, 'require', undefined, true, true) : require = J$.R(5073489, 'require', require, true, true)), false)(J$.T(5073497, '../private-key', 21, false)), PrivateKey, false, true);
            var Identity = J$.W(5073545, 'Identity', J$.F(5073537, J$.I(typeof require === 'undefined' ? require = J$.R(5073521, 'require', undefined, true, true) : require = J$.R(5073521, 'require', require, true, true)), false)(J$.T(5073529, '../identity', 21, false)), Identity, false, true);
            var rfc4253 = J$.W(5073577, 'rfc4253', J$.F(5073569, J$.I(typeof require === 'undefined' ? require = J$.R(5073553, 'require', undefined, true, true) : require = J$.R(5073553, 'require', require, true, true)), false)(J$.T(5073561, './rfc4253', 21, false)), rfc4253, false, true);
            var Signature = J$.W(5073609, 'Signature', J$.F(5073601, J$.I(typeof require === 'undefined' ? require = J$.R(5073585, 'require', undefined, true, true) : require = J$.R(5073585, 'require', require, true, true)), false)(J$.T(5073593, '../signature', 21, false)), Signature, false, true);
            var utils = J$.W(5073641, 'utils', J$.F(5073633, J$.I(typeof require === 'undefined' ? require = J$.R(5073617, 'require', undefined, true, true) : require = J$.R(5073617, 'require', require, true, true)), false)(J$.T(5073625, '../utils', 21, false)), utils, false, true);
            var Certificate = J$.W(5073673, 'Certificate', J$.F(5073665, J$.I(typeof require === 'undefined' ? require = J$.R(5073649, 'require', undefined, true, true) : require = J$.R(5073649, 'require', require, true, true)), false)(J$.T(5073657, '../certificate', 21, false)), Certificate, false, true);
            var TYPES = J$.W(5073753, 'TYPES', J$.T(5073745, {
                'user': J$.T(5073729, 1, 22, false),
                'host': J$.T(5073737, 2, 22, false)
            }, 11, false), TYPES, false, true);
            J$.M(5073865, J$.M(5073777, J$.I(typeof Object === 'undefined' ? Object = J$.R(5073761, 'Object', undefined, true, true) : Object = J$.R(5073761, 'Object', Object, true, true)), 'keys', false)(J$.R(5073769, 'TYPES', TYPES, false, true)), 'forEach', false)(J$.T(5073857, function (k) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5073833, arguments.callee, this, arguments);
                            arguments = J$.N(5073841, 'arguments', arguments, true, false, false);
                            k = J$.N(5073849, 'k', k, true, false, false);
                            J$.P(5073825, J$.R(5073785, 'TYPES', TYPES, false, true), J$.G(5073809, J$.R(5073793, 'TYPES', TYPES, false, true), J$.R(5073801, 'k', k, false, false)), J$.R(5073817, 'k', k, false, false));
                        } catch (J$e) {
                            J$.Ex(5081297, J$e);
                        } finally {
                            if (J$.Fr(5081305))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var ECDSA_ALGO = J$.W(5073881, 'ECDSA_ALGO', J$.T(5073873, /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/, 14, false), ECDSA_ALGO, false, true);
        } catch (J$e) {
            J$.Ex(5081585, J$e);
        } finally {
            if (J$.Sr(5081593))
                continue jalangiLabel19;
            else
                break jalangiLabel19;
        }
    }
// JALANGI DO NOT INSTRUMENT

