J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(5125401, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/ssh.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5124921, arguments.callee, this, arguments);
                            arguments = J$.N(5124929, 'arguments', arguments, true, false, false);
                            buf = J$.N(5124937, 'buf', buf, true, false, false);
                            options = J$.N(5124945, 'options', options, true, false, false);
                            J$.N(5124953, 'trimmed', trimmed, false, false, false);
                            J$.N(5124961, 'm', m, false, false, false);
                            J$.N(5124969, 'type', type, false, false, false);
                            J$.N(5124977, 'kbuf', kbuf, false, false, false);
                            J$.N(5124985, 'key', key, false, false, false);
                            J$.N(5124993, 'ret', ret, false, false, false);
                            J$.N(5125001, 'data', data, false, false, false);
                            J$.N(5125009, 'realOffset', realOffset, false, false, false);
                            J$.N(5125017, 'padding', padding, false, false, false);
                            J$.N(5125025, 'trailer', trailer, false, false, false);
                            if (J$.C(274496, J$.B(589490, '!==', J$.U(589482, 'typeof', J$.R(5123545, 'buf', buf, false, false)), J$.T(5123553, 'string', 21, false)))) {
                                J$.M(5123585, J$.R(5123561, 'assert', assert, false, true), 'buffer', false)(J$.R(5123569, 'buf', buf, false, false), J$.T(5123577, 'buf', 21, false));
                                buf = J$.W(5123617, 'buf', J$.M(5123609, J$.R(5123593, 'buf', buf, false, false), 'toString', false)(J$.T(5123601, 'ascii', 21, false)), buf, false, false);
                            }
                            var trimmed = J$.W(5123665, 'trimmed', J$.M(5123657, J$.M(5123633, J$.R(5123625, 'buf', buf, false, false), 'trim', false)(), 'replace', false)(J$.T(5123641, /[\\\r]/g, 14, false), J$.T(5123649, '', 21, false)), trimmed, false, false);
                            var m = J$.W(5123697, 'm', J$.M(5123689, J$.R(5123673, 'trimmed', trimmed, false, false), 'match', false)(J$.R(5123681, 'SSHKEY_RE', SSHKEY_RE, false, true)), m, false, false);
                            if (J$.C(274504, J$.U(589498, '!', J$.R(5123705, 'm', m, false, false))))
                                m = J$.W(5123737, 'm', J$.M(5123729, J$.R(5123713, 'trimmed', trimmed, false, false), 'match', false)(J$.R(5123721, 'SSHKEY_RE2', SSHKEY_RE2, false, true)), m, false, false);
                            J$.M(5123769, J$.R(5123745, 'assert', assert, false, true), 'ok', false)(J$.R(5123753, 'm', m, false, false), J$.T(5123761, 'key must match regex', 21, false));
                            var type = J$.W(5123817, 'type', J$.M(5123809, J$.R(5123777, 'rfc4253', rfc4253, false, true), 'algToKeyType', false)(J$.G(5123801, J$.R(5123785, 'm', m, false, false), J$.T(5123793, 1, 22, false))), type, false, false);
                            var kbuf = J$.W(5123873, 'kbuf', J$.M(5123865, J$.R(5123825, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5123849, J$.R(5123833, 'm', m, false, false), J$.T(5123841, 2, 22, false)), J$.T(5123857, 'base64', 21, false)), kbuf, false, false);
                            var key;
                            var ret = J$.W(5123889, 'ret', J$.T(5123881, {}, 11, false), ret, false, false);
                            if (J$.C(274512, J$.G(5123913, J$.R(5123897, 'm', m, false, false), J$.T(5123905, 4, 22, false)))) {
                                try {
                                    key = J$.W(5123945, 'key', J$.M(5123937, J$.R(5123921, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(5123929, 'kbuf', kbuf, false, false)), key, false, false);
                                } catch (e) {
                                    J$.N(5124121, 'e', e, false, false, true);
                                    m = J$.W(5123977, 'm', J$.M(5123969, J$.R(5123953, 'trimmed', trimmed, false, false), 'match', false)(J$.R(5123961, 'SSHKEY_RE2', SSHKEY_RE2, false, true)), m, false, false);
                                    J$.M(5124009, J$.R(5123985, 'assert', assert, false, true), 'ok', false)(J$.R(5123993, 'm', m, false, false), J$.T(5124001, 'key must match regex', 21, false));
                                    kbuf = J$.W(5124065, 'kbuf', J$.M(5124057, J$.R(5124017, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5124041, J$.R(5124025, 'm', m, false, false), J$.T(5124033, 2, 22, false)), J$.T(5124049, 'base64', 21, false)), kbuf, false, false);
                                    key = J$.W(5124113, 'key', J$.M(5124105, J$.R(5124073, 'rfc4253', rfc4253, false, true), 'readInternal', false)(J$.R(5124081, 'ret', ret, false, false), J$.T(5124089, 'public', 21, false), J$.R(5124097, 'kbuf', kbuf, false, false)), key, false, false);
                                }
                            } else {
                                key = J$.W(5124169, 'key', J$.M(5124161, J$.R(5124129, 'rfc4253', rfc4253, false, true), 'readInternal', false)(J$.R(5124137, 'ret', ret, false, false), J$.T(5124145, 'public', 21, false), J$.R(5124153, 'kbuf', kbuf, false, false)), key, false, false);
                            }
                            J$.M(5124209, J$.R(5124177, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5124185, 'type', type, false, false), J$.G(5124201, J$.R(5124193, 'key', key, false, false), 'type'));
                            if (J$.C(274576, J$.C(274520, J$.G(5124233, J$.R(5124217, 'm', m, false, false), J$.T(5124225, 4, 22, false))) ? J$.B(589506, '>', J$.G(5124265, J$.G(5124257, J$.R(5124241, 'm', m, false, false), J$.T(5124249, 4, 22, false)), 'length'), J$.T(5124273, 0, 22, false)) : J$._())) {
                                J$.P(5124313, J$.R(5124281, 'key', key, false, false), 'comment', J$.G(5124305, J$.R(5124289, 'm', m, false, false), J$.T(5124297, 4, 22, false)));
                            } else if (J$.C(274568, J$.G(5124329, J$.R(5124321, 'ret', ret, false, false), 'consumed'))) {
                                var data = J$.W(5124417, 'data', J$.B(589514, '+', J$.G(5124353, J$.R(5124337, 'm', m, false, false), J$.T(5124345, 2, 22, false)), J$.C(274528, J$.G(5124377, J$.R(5124361, 'm', m, false, false), J$.T(5124369, 3, 22, false))) ? J$.G(5124401, J$.R(5124385, 'm', m, false, false), J$.T(5124393, 3, 22, false)) : J$.T(5124409, '', 21, false)), data, false, false);
                                var realOffset = J$.W(5124473, 'realOffset', J$.B(589530, '*', J$.M(5124457, J$.I(typeof Math === 'undefined' ? Math = J$.R(5124425, 'Math', undefined, true, true) : Math = J$.R(5124425, 'Math', Math, true, true)), 'ceil', false)(J$.B(589522, '/', J$.G(5124441, J$.R(5124433, 'ret', ret, false, false), 'consumed'), J$.T(5124449, 3, 22, false))), J$.T(5124465, 4, 22, false)), realOffset, false, false);
                                data = J$.W(5124577, 'data', J$.B(589554, '+', J$.M(5124537, J$.M(5124513, J$.R(5124481, 'data', data, false, false), 'slice', false)(J$.T(5124489, 0, 22, false), J$.B(589538, '-', J$.R(5124497, 'realOffset', realOffset, false, false), J$.T(5124505, 2, 22, false))), 'replace', false)(J$.T(5124521, /[^a-zA-Z0-9+\/=]/g, 14, false), J$.T(5124529, '', 21, false)), J$.M(5124569, J$.R(5124545, 'data', data, false, false), 'slice', false)(J$.B(589546, '-', J$.R(5124553, 'realOffset', realOffset, false, false), J$.T(5124561, 2, 22, false)))), data, false, false);
                                var padding = J$.W(5124609, 'padding', J$.B(589562, '%', J$.G(5124593, J$.R(5124585, 'ret', ret, false, false), 'consumed'), J$.T(5124601, 3, 22, false)), padding, false, false);
                                if (J$.C(274544, J$.C(274536, J$.B(589570, '>', J$.R(5124617, 'padding', padding, false, false), J$.T(5124625, 0, 22, false))) ? J$.B(589586, '!==', J$.M(5124665, J$.R(5124633, 'data', data, false, false), 'slice', false)(J$.B(589578, '-', J$.R(5124641, 'realOffset', realOffset, false, false), J$.T(5124649, 1, 22, false)), J$.R(5124657, 'realOffset', realOffset, false, false)), J$.T(5124673, '=', 21, false)) : J$._()))
                                    J$.B(589610, '+', realOffset = J$.W(5124689, 'realOffset', J$.B(589602, '-', J$.U(589594, '+', J$.R(5124681, 'realOffset', realOffset, false, false)), 1), realOffset, false, false), 1);
                                while (J$.C(274552, J$.B(589626, '===', J$.M(5124729, J$.R(5124697, 'data', data, false, false), 'slice', false)(J$.R(5124705, 'realOffset', realOffset, false, false), J$.B(589618, '+', J$.R(5124713, 'realOffset', realOffset, false, false), J$.T(5124721, 1, 22, false))), J$.T(5124737, '=', 21, false))))
                                    J$.B(589650, '-', realOffset = J$.W(5124753, 'realOffset', J$.B(589642, '+', J$.U(589634, '+', J$.R(5124745, 'realOffset', realOffset, false, false)), 1), realOffset, false, false), 1);
                                var trailer = J$.W(5124785, 'trailer', J$.M(5124777, J$.R(5124761, 'data', data, false, false), 'slice', false)(J$.R(5124769, 'realOffset', realOffset, false, false)), trailer, false, false);
                                trailer = J$.W(5124849, 'trailer', J$.M(5124841, J$.M(5124817, J$.R(5124793, 'trailer', trailer, false, false), 'replace', false)(J$.T(5124801, /[\r\n]/g, 14, false), J$.T(5124809, ' ', 21, false)), 'replace', false)(J$.T(5124825, /^\s+/, 14, false), J$.T(5124833, '', 21, false)), trailer, false, false);
                                if (J$.C(274560, J$.M(5124873, J$.R(5124857, 'trailer', trailer, false, false), 'match', false)(J$.T(5124865, /^[a-zA-Z0-9]/, 14, false))))
                                    J$.P(5124897, J$.R(5124881, 'key', key, false, false), 'comment', J$.R(5124889, 'trailer', trailer, false, false));
                            }
                            return J$.Rt(5124913, J$.R(5124905, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(5125513, J$e);
                        } finally {
                            if (J$.Fr(5125521))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5125345, arguments.callee, this, arguments);
                            arguments = J$.N(5125353, 'arguments', arguments, true, false, false);
                            key = J$.N(5125361, 'key', key, true, false, false);
                            options = J$.N(5125369, 'options', options, true, false, false);
                            J$.N(5125377, 'parts', parts, false, false, false);
                            J$.N(5125385, 'alg', alg, false, false, false);
                            J$.N(5125393, 'buf', buf, false, false, false);
                            J$.M(5125049, J$.R(5125033, 'assert', assert, false, true), 'object', false)(J$.R(5125041, 'key', key, false, false));
                            if (J$.C(274584, J$.U(589658, '!', J$.M(5125073, J$.R(5125057, 'Key', Key, false, true), 'isKey', false)(J$.R(5125065, 'key', key, false, false)))))
                                throw J$.F(5125097, J$.I(typeof Error === 'undefined' ? Error = J$.R(5125081, 'Error', undefined, true, true) : Error = J$.R(5125081, 'Error', Error, true, true)), true)(J$.T(5125089, 'Must be a public key', 21, false));
                            var parts = J$.W(5125113, 'parts', J$.T(5125105, [], 10, false), parts, false, false);
                            var alg = J$.W(5125145, 'alg', J$.M(5125137, J$.R(5125121, 'rfc4253', rfc4253, false, true), 'keyTypeToAlg', false)(J$.R(5125129, 'key', key, false, false)), alg, false, false);
                            J$.M(5125169, J$.R(5125153, 'parts', parts, false, false), 'push', false)(J$.R(5125161, 'alg', alg, false, false));
                            var buf = J$.W(5125201, 'buf', J$.M(5125193, J$.R(5125177, 'rfc4253', rfc4253, false, true), 'write', false)(J$.R(5125185, 'key', key, false, false)), buf, false, false);
                            J$.M(5125241, J$.R(5125209, 'parts', parts, false, false), 'push', false)(J$.M(5125233, J$.R(5125217, 'buf', buf, false, false), 'toString', false)(J$.T(5125225, 'base64', 21, false)));
                            if (J$.C(274592, J$.G(5125257, J$.R(5125249, 'key', key, false, false), 'comment')))
                                J$.M(5125289, J$.R(5125265, 'parts', parts, false, false), 'push', false)(J$.G(5125281, J$.R(5125273, 'key', key, false, false), 'comment'));
                            return J$.Rt(5125337, J$.M(5125329, J$.R(5125297, 'Buffer', Buffer, false, true), 'from', false)(J$.M(5125321, J$.R(5125305, 'parts', parts, false, false), 'join', false)(J$.T(5125313, ' ', 21, false))));
                        } catch (J$e) {
                            J$.Ex(5125529, J$e);
                        } finally {
                            if (J$.Fr(5125537))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5125409, 'assert', assert, false, false, false);
            J$.N(5125417, 'Buffer', Buffer, false, false, false);
            J$.N(5125425, 'rfc4253', rfc4253, false, false, false);
            J$.N(5125433, 'utils', utils, false, false, false);
            J$.N(5125441, 'Key', Key, false, false, false);
            J$.N(5125449, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5125457, 'sshpriv', sshpriv, false, false, false);
            J$.N(5125465, 'SSHKEY_RE', SSHKEY_RE, false, false, false);
            J$.N(5125473, 'SSHKEY_RE2', SSHKEY_RE2, false, false, false);
            read = J$.N(5125489, 'read', J$.T(5125481, read, 12, false), true, false, false);
            write = J$.N(5125505, 'write', J$.T(5125497, write, 12, false), true, false, false);
            J$.P(5123273, J$.I(typeof module === 'undefined' ? module = J$.R(5123241, 'module', undefined, true, true) : module = J$.R(5123241, 'module', module, true, true)), 'exports', J$.T(5123265, {
                read: J$.R(5123249, 'read', read, false, true),
                write: J$.R(5123257, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(5123305, 'assert', J$.F(5123297, J$.I(typeof require === 'undefined' ? require = J$.R(5123281, 'require', undefined, true, true) : require = J$.R(5123281, 'require', require, true, true)), false)(J$.T(5123289, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5123345, 'Buffer', J$.G(5123337, J$.F(5123329, J$.I(typeof require === 'undefined' ? require = J$.R(5123313, 'require', undefined, true, true) : require = J$.R(5123313, 'require', require, true, true)), false)(J$.T(5123321, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var rfc4253 = J$.W(5123377, 'rfc4253', J$.F(5123369, J$.I(typeof require === 'undefined' ? require = J$.R(5123353, 'require', undefined, true, true) : require = J$.R(5123353, 'require', require, true, true)), false)(J$.T(5123361, './rfc4253', 21, false)), rfc4253, false, true);
            var utils = J$.W(5123409, 'utils', J$.F(5123401, J$.I(typeof require === 'undefined' ? require = J$.R(5123385, 'require', undefined, true, true) : require = J$.R(5123385, 'require', require, true, true)), false)(J$.T(5123393, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(5123441, 'Key', J$.F(5123433, J$.I(typeof require === 'undefined' ? require = J$.R(5123417, 'require', undefined, true, true) : require = J$.R(5123417, 'require', require, true, true)), false)(J$.T(5123425, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5123473, 'PrivateKey', J$.F(5123465, J$.I(typeof require === 'undefined' ? require = J$.R(5123449, 'require', undefined, true, true) : require = J$.R(5123449, 'require', require, true, true)), false)(J$.T(5123457, '../private-key', 21, false)), PrivateKey, false, true);
            var sshpriv = J$.W(5123505, 'sshpriv', J$.F(5123497, J$.I(typeof require === 'undefined' ? require = J$.R(5123481, 'require', undefined, true, true) : require = J$.R(5123481, 'require', require, true, true)), false)(J$.T(5123489, './ssh-private', 21, false)), sshpriv, false, true);
            var SSHKEY_RE = J$.W(5123521, 'SSHKEY_RE', J$.T(5123513, /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/, 14, false), SSHKEY_RE, false, true);
            var SSHKEY_RE2 = J$.W(5123537, 'SSHKEY_RE2', J$.T(5123529, /^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/, 14, false), SSHKEY_RE2, false, true);
        } catch (J$e) {
            J$.Ex(5125545, J$e);
        } finally {
            if (J$.Sr(5125553))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

