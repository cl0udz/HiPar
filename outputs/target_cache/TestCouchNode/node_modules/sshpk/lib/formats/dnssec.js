J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(5072761, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/dnssec.js');
            function read(buf, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5066537, arguments.callee, this, arguments);
                            arguments = J$.N(5066545, 'arguments', arguments, true, false, false);
                            buf = J$.N(5066553, 'buf', buf, true, false, false);
                            options = J$.N(5066561, 'options', options, true, false, false);
                            J$.N(5066569, 'lines', lines, false, false, false);
                            J$.N(5066577, 'algElems', algElems, false, false, false);
                            J$.N(5066585, 'algoNum', algoNum, false, false, false);
                            J$.N(5066593, 'algoName', algoName, false, false, false);
                            J$.N(5066601, 'line', line, false, false, false);
                            if (J$.C(272240, J$.B(586034, '!==', J$.U(586026, 'typeof', J$.R(5065865, 'buf', buf, false, false)), J$.T(5065873, 'string', 21, false)))) {
                                J$.M(5065905, J$.R(5065881, 'assert', assert, false, true), 'buffer', false)(J$.R(5065889, 'buf', buf, false, false), J$.T(5065897, 'buf', 21, false));
                                buf = J$.W(5065937, 'buf', J$.M(5065929, J$.R(5065913, 'buf', buf, false, false), 'toString', false)(J$.T(5065921, 'ascii', 21, false)), buf, false, false);
                            }
                            var lines = J$.W(5065969, 'lines', J$.M(5065961, J$.R(5065945, 'buf', buf, false, false), 'split', false)(J$.T(5065953, '\n', 21, false)), lines, false, false);
                            if (J$.C(272256, J$.M(5066009, J$.G(5065993, J$.R(5065977, 'lines', lines, false, false), J$.T(5065985, 0, 22, false)), 'match', false)(J$.T(5066001, /^Private-key-format\: v1/, 14, false)))) {
                                var algElems = J$.W(5066057, 'algElems', J$.M(5066049, J$.G(5066033, J$.R(5066017, 'lines', lines, false, false), J$.T(5066025, 1, 22, false)), 'split', false)(J$.T(5066041, ' ', 21, false)), algElems, false, false);
                                var algoNum = J$.W(5066113, 'algoNum', J$.F(5066105, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(5066065, 'parseInt', undefined, true, true) : parseInt = J$.R(5066065, 'parseInt', parseInt, true, true)), false)(J$.G(5066089, J$.R(5066073, 'algElems', algElems, false, false), J$.T(5066081, 1, 22, false)), J$.T(5066097, 10, 22, false)), algoNum, false, false);
                                var algoName = J$.W(5066145, 'algoName', J$.G(5066137, J$.R(5066121, 'algElems', algElems, false, false), J$.T(5066129, 2, 22, false)), algoName, false, false);
                                if (J$.C(272248, J$.U(586042, '!', J$.G(5066169, J$.R(5066153, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5066161, 'algoNum', algoNum, false, false)))))
                                    throw J$.F(5066201, J$.I(typeof Error === 'undefined' ? Error = J$.R(5066177, 'Error', undefined, true, true) : Error = J$.R(5066177, 'Error', Error, true, true)), true)(J$.B(586050, '+', J$.T(5066185, 'Unsupported algorithm: ', 21, false), J$.R(5066193, 'algoName', algoName, false, false)));
                                return J$.Rt(5066257, J$.F(5066249, J$.R(5066209, 'readDNSSECPrivateKey', readDNSSECPrivateKey, false, true), false)(J$.R(5066217, 'algoNum', algoNum, false, false), J$.M(5066241, J$.R(5066225, 'lines', lines, false, false), 'slice', false)(J$.T(5066233, 2, 22, false))));
                            }
                            var line = J$.W(5066273, 'line', J$.T(5066265, 0, 22, false), line, false, false);
                            while (J$.C(272264, J$.M(5066313, J$.G(5066297, J$.R(5066281, 'lines', lines, false, false), J$.R(5066289, 'line', line, false, false)), 'match', false)(J$.T(5066305, /^\;/, 14, false))))
                                J$.B(586074, '-', line = J$.W(5066329, 'line', J$.B(586066, '+', J$.U(586058, '+', J$.R(5066321, 'line', line, false, false)), 1), line, false, false), 1);
                            if (J$.C(272288, J$.C(272280, J$.C(272272, J$.M(5066369, J$.G(5066353, J$.R(5066337, 'lines', lines, false, false), J$.R(5066345, 'line', line, false, false)), 'match', false)(J$.T(5066361, /\. IN KEY /, 14, false))) ? J$._() : J$.M(5066409, J$.G(5066393, J$.R(5066377, 'lines', lines, false, false), J$.R(5066385, 'line', line, false, false)), 'match', false)(J$.T(5066401, /\. IN DNSKEY /, 14, false))) ? J$.B(586090, '===', J$.G(5066449, J$.G(5066441, J$.R(5066417, 'lines', lines, false, false), J$.B(586082, '+', J$.R(5066425, 'line', line, false, false), J$.T(5066433, 1, 22, false))), 'length'), J$.T(5066457, 0, 22, false)) : J$._())) {
                                return J$.Rt(5066505, J$.F(5066497, J$.R(5066465, 'readRFC3110', readRFC3110, false, true), false)(J$.G(5066489, J$.R(5066473, 'lines', lines, false, false), J$.R(5066481, 'line', line, false, false))));
                            }
                            throw J$.F(5066529, J$.I(typeof Error === 'undefined' ? Error = J$.R(5066513, 'Error', undefined, true, true) : Error = J$.R(5066513, 'Error', Error, true, true)), true)(J$.T(5066521, 'Cannot parse dnssec key', 21, false));
                        } catch (J$e) {
                            J$.Ex(5073017, J$e);
                        } finally {
                            if (J$.Fr(5073025))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readRFC3110(keyString) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5067673, arguments.callee, this, arguments);
                            arguments = J$.N(5067681, 'arguments', arguments, true, false, false);
                            keyString = J$.N(5067689, 'keyString', keyString, true, false, false);
                            J$.N(5067697, 'elems', elems, false, false, false);
                            J$.N(5067705, 'algorithm', algorithm, false, false, false);
                            J$.N(5067713, 'base64key', base64key, false, false, false);
                            J$.N(5067721, 'keyBuffer', keyBuffer, false, false, false);
                            J$.N(5067729, 'publicExponentLen', publicExponentLen, false, false, false);
                            J$.N(5067737, 'publicExponent', publicExponent, false, false, false);
                            J$.N(5067745, 'modulus', modulus, false, false, false);
                            J$.N(5067753, 'rsaKey', rsaKey, false, false, false);
                            J$.N(5067761, 'curve', curve, false, false, false);
                            J$.N(5067769, 'size', size, false, false, false);
                            J$.N(5067777, 'ecdsaKey', ecdsaKey, false, false, false);
                            var elems = J$.W(5066633, 'elems', J$.M(5066625, J$.R(5066609, 'keyString', keyString, false, false), 'split', false)(J$.T(5066617, ' ', 21, false)), elems, false, false);
                            var algorithm = J$.W(5066689, 'algorithm', J$.F(5066681, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(5066641, 'parseInt', undefined, true, true) : parseInt = J$.R(5066641, 'parseInt', parseInt, true, true)), false)(J$.G(5066665, J$.R(5066649, 'elems', elems, false, false), J$.T(5066657, 5, 22, false)), J$.T(5066673, 10, 22, false)), algorithm, false, false);
                            if (J$.C(272296, J$.U(586098, '!', J$.G(5066713, J$.R(5066697, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5066705, 'algorithm', algorithm, false, false)))))
                                throw J$.F(5066745, J$.I(typeof Error === 'undefined' ? Error = J$.R(5066721, 'Error', undefined, true, true) : Error = J$.R(5066721, 'Error', Error, true, true)), true)(J$.B(586106, '+', J$.T(5066729, 'Unsupported algorithm: ', 21, false), J$.R(5066737, 'algorithm', algorithm, false, false)));
                            var base64key = J$.W(5066801, 'base64key', J$.M(5066793, J$.M(5066785, J$.R(5066753, 'elems', elems, false, false), 'slice', false)(J$.T(5066761, 6, 22, false), J$.G(5066777, J$.R(5066769, 'elems', elems, false, false), 'length')), 'join', false)(), base64key, false, false);
                            var keyBuffer = J$.W(5066841, 'keyBuffer', J$.M(5066833, J$.R(5066809, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5066817, 'base64key', base64key, false, false), J$.T(5066825, 'base64', 21, false)), keyBuffer, false, false);
                            if (J$.C(272320, J$.M(5066881, J$.G(5066865, J$.R(5066849, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5066857, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(5066873, /^RSA-/, 14, false)))) {
                                var publicExponentLen = J$.W(5066913, 'publicExponentLen', J$.M(5066905, J$.R(5066889, 'keyBuffer', keyBuffer, false, false), 'readUInt8', false)(J$.T(5066897, 0, 22, false)), publicExponentLen, false, false);
                                if (J$.C(272312, J$.C(272304, J$.B(586114, '!=', J$.R(5066921, 'publicExponentLen', publicExponentLen, false, false), J$.T(5066929, 3, 22, false))) ? J$.B(586122, '!=', J$.R(5066937, 'publicExponentLen', publicExponentLen, false, false), J$.T(5066945, 1, 22, false)) : J$._()))
                                    throw J$.F(5066977, J$.I(typeof Error === 'undefined' ? Error = J$.R(5066953, 'Error', undefined, true, true) : Error = J$.R(5066953, 'Error', Error, true, true)), true)(J$.B(586130, '+', J$.T(5066961, 'Cannot parse dnssec key: ', 21, false), J$.T(5066969, 'unsupported exponent length', 21, false)));
                                var publicExponent = J$.W(5067025, 'publicExponent', J$.M(5067017, J$.R(5066985, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.T(5066993, 1, 22, false), J$.B(586138, '+', J$.R(5067001, 'publicExponentLen', publicExponentLen, false, false), J$.T(5067009, 1, 22, false))), publicExponent, false, false);
                                publicExponent = J$.W(5067057, 'publicExponent', J$.M(5067049, J$.R(5067033, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(5067041, 'publicExponent', publicExponent, false, false)), publicExponent, false, false);
                                var modulus = J$.W(5067097, 'modulus', J$.M(5067089, J$.R(5067065, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.B(586146, '+', J$.T(5067073, 1, 22, false), J$.R(5067081, 'publicExponentLen', publicExponentLen, false, false))), modulus, false, false);
                                modulus = J$.W(5067129, 'modulus', J$.M(5067121, J$.R(5067105, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(5067113, 'modulus', modulus, false, false)), modulus, false, false);
                                var rsaKey = J$.W(5067161, 'rsaKey', J$.T(5067153, {
                                    type: J$.T(5067137, 'rsa', 21, false),
                                    parts: J$.T(5067145, [], 10, false)
                                }, 11, false), rsaKey, false, false);
                                J$.M(5067209, J$.G(5067177, J$.R(5067169, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(5067201, {
                                    name: J$.T(5067185, 'e', 21, false),
                                    data: J$.R(5067193, 'publicExponent', publicExponent, false, false)
                                }, 11, false));
                                J$.M(5067257, J$.G(5067225, J$.R(5067217, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(5067249, {
                                    name: J$.T(5067233, 'n', 21, false),
                                    data: J$.R(5067241, 'modulus', modulus, false, false)
                                }, 11, false));
                                return J$.Rt(5067289, J$.F(5067281, J$.R(5067265, 'Key', Key, false, true), true)(J$.R(5067273, 'rsaKey', rsaKey, false, false)));
                            }
                            if (J$.C(272344, J$.C(272328, J$.B(586154, '===', J$.G(5067313, J$.R(5067297, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5067305, 'algorithm', algorithm, false, false)), J$.T(5067321, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(586162, '===', J$.G(5067345, J$.R(5067329, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5067337, 'algorithm', algorithm, false, false)), J$.T(5067353, 'ECDSA-P256-SHA256', 21, false)))) {
                                var curve = J$.W(5067369, 'curve', J$.T(5067361, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(5067385, 'size', J$.T(5067377, 384, 22, false), size, false, false);
                                if (J$.C(272336, J$.M(5067425, J$.G(5067409, J$.R(5067393, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5067401, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(5067417, /^ECDSA-P256-SHA256/, 14, false)))) {
                                    curve = J$.W(5067441, 'curve', J$.T(5067433, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(5067457, 'size', J$.T(5067449, 256, 22, false), size, false, false);
                                }
                                var ecdsaKey = J$.W(5067585, 'ecdsaKey', J$.T(5067577, {
                                    type: J$.T(5067465, 'ecdsa', 21, false),
                                    curve: J$.R(5067473, 'curve', curve, false, false),
                                    size: J$.R(5067481, 'size', size, false, false),
                                    parts: J$.T(5067569, [
                                        J$.T(5067521, {
                                            name: J$.T(5067489, 'curve', 21, false),
                                            data: J$.M(5067513, J$.R(5067497, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5067505, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(5067561, {
                                            name: J$.T(5067529, 'Q', 21, false),
                                            data: J$.M(5067553, J$.R(5067537, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(5067545, 'keyBuffer', keyBuffer, false, false))
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(5067617, J$.F(5067609, J$.R(5067593, 'Key', Key, false, true), true)(J$.R(5067601, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(5067665, J$.I(typeof Error === 'undefined' ? Error = J$.R(5067625, 'Error', undefined, true, true) : Error = J$.R(5067625, 'Error', Error, true, true)), true)(J$.B(586170, '+', J$.T(5067633, 'Unsupported algorithm: ', 21, false), J$.G(5067657, J$.R(5067641, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5067649, 'algorithm', algorithm, false, false))));
                        } catch (J$e) {
                            J$.Ex(5073033, J$e);
                        } finally {
                            if (J$.Fr(5073041))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function elementToBuf(e) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5067857, arguments.callee, this, arguments);
                            arguments = J$.N(5067865, 'arguments', arguments, true, false, false);
                            e = J$.N(5067873, 'e', e, true, false, false);
                            return J$.Rt(5067849, J$.M(5067841, J$.R(5067785, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5067825, J$.M(5067809, J$.R(5067793, 'e', e, false, false), 'split', false)(J$.T(5067801, ' ', 21, false)), J$.T(5067817, 1, 22, false)), J$.T(5067833, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5073049, J$e);
                        } finally {
                            if (J$.Fr(5073057))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECRSAPrivateKey(elements) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5069225, arguments.callee, this, arguments);
                            arguments = J$.N(5069233, 'arguments', arguments, true, false, false);
                            elements = J$.N(5069241, 'elements', elements, true, false, false);
                            J$.N(5069249, 'rsaParams', rsaParams, false, false, false);
                            J$.N(5069257, 'key', key, false, false, false);
                            var rsaParams = J$.W(5067889, 'rsaParams', J$.T(5067881, {}, 11, false), rsaParams, false, false);
                            J$.M(5068705, J$.R(5067897, 'elements', elements, false, false), 'forEach', false)(J$.T(5068697, function (element) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(5068673, arguments.callee, this, arguments);
                                            arguments = J$.N(5068681, 'arguments', arguments, true, false, false);
                                            element = J$.N(5068689, 'element', element, true, false, false);
                                            if (J$.C(272408, J$.B(586178, '===', J$.G(5067937, J$.M(5067921, J$.R(5067905, 'element', element, false, false), 'split', false)(J$.T(5067913, ' ', 21, false)), J$.T(5067929, 0, 22, false)), J$.T(5067945, 'Modulus:', 21, false))))
                                                J$.P(5067993, J$.R(5067953, 'rsaParams', rsaParams, false, false), J$.T(5067961, 'n', 21, false), J$.F(5067985, J$.R(5067969, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5067977, 'element', element, false, false)));
                                            else if (J$.C(272400, J$.B(586186, '===', J$.G(5068033, J$.M(5068017, J$.R(5068001, 'element', element, false, false), 'split', false)(J$.T(5068009, ' ', 21, false)), J$.T(5068025, 0, 22, false)), J$.T(5068041, 'PublicExponent:', 21, false))))
                                                J$.P(5068089, J$.R(5068049, 'rsaParams', rsaParams, false, false), J$.T(5068057, 'e', 21, false), J$.F(5068081, J$.R(5068065, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068073, 'element', element, false, false)));
                                            else if (J$.C(272392, J$.B(586194, '===', J$.G(5068129, J$.M(5068113, J$.R(5068097, 'element', element, false, false), 'split', false)(J$.T(5068105, ' ', 21, false)), J$.T(5068121, 0, 22, false)), J$.T(5068137, 'PrivateExponent:', 21, false))))
                                                J$.P(5068185, J$.R(5068145, 'rsaParams', rsaParams, false, false), J$.T(5068153, 'd', 21, false), J$.F(5068177, J$.R(5068161, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068169, 'element', element, false, false)));
                                            else if (J$.C(272384, J$.B(586202, '===', J$.G(5068225, J$.M(5068209, J$.R(5068193, 'element', element, false, false), 'split', false)(J$.T(5068201, ' ', 21, false)), J$.T(5068217, 0, 22, false)), J$.T(5068233, 'Prime1:', 21, false))))
                                                J$.P(5068281, J$.R(5068241, 'rsaParams', rsaParams, false, false), J$.T(5068249, 'p', 21, false), J$.F(5068273, J$.R(5068257, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068265, 'element', element, false, false)));
                                            else if (J$.C(272376, J$.B(586210, '===', J$.G(5068321, J$.M(5068305, J$.R(5068289, 'element', element, false, false), 'split', false)(J$.T(5068297, ' ', 21, false)), J$.T(5068313, 0, 22, false)), J$.T(5068329, 'Prime2:', 21, false))))
                                                J$.P(5068377, J$.R(5068337, 'rsaParams', rsaParams, false, false), J$.T(5068345, 'q', 21, false), J$.F(5068369, J$.R(5068353, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068361, 'element', element, false, false)));
                                            else if (J$.C(272368, J$.B(586218, '===', J$.G(5068417, J$.M(5068401, J$.R(5068385, 'element', element, false, false), 'split', false)(J$.T(5068393, ' ', 21, false)), J$.T(5068409, 0, 22, false)), J$.T(5068425, 'Exponent1:', 21, false))))
                                                J$.P(5068473, J$.R(5068433, 'rsaParams', rsaParams, false, false), J$.T(5068441, 'dmodp', 21, false), J$.F(5068465, J$.R(5068449, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068457, 'element', element, false, false)));
                                            else if (J$.C(272360, J$.B(586226, '===', J$.G(5068513, J$.M(5068497, J$.R(5068481, 'element', element, false, false), 'split', false)(J$.T(5068489, ' ', 21, false)), J$.T(5068505, 0, 22, false)), J$.T(5068521, 'Exponent2:', 21, false))))
                                                J$.P(5068569, J$.R(5068529, 'rsaParams', rsaParams, false, false), J$.T(5068537, 'dmodq', 21, false), J$.F(5068561, J$.R(5068545, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068553, 'element', element, false, false)));
                                            else if (J$.C(272352, J$.B(586234, '===', J$.G(5068609, J$.M(5068593, J$.R(5068577, 'element', element, false, false), 'split', false)(J$.T(5068585, ' ', 21, false)), J$.T(5068601, 0, 22, false)), J$.T(5068617, 'Coefficient:', 21, false))))
                                                J$.P(5068665, J$.R(5068625, 'rsaParams', rsaParams, false, false), J$.T(5068633, 'iqmp', 21, false), J$.F(5068657, J$.R(5068641, 'elementToBuf', elementToBuf, false, true), false)(J$.R(5068649, 'element', element, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5073065, J$e);
                                        } finally {
                                            if (J$.Fr(5073073))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            var key = J$.W(5069185, 'key', J$.T(5069177, {
                                type: J$.T(5068713, 'rsa', 21, false),
                                parts: J$.T(5069169, [
                                    J$.T(5068769, {
                                        name: J$.T(5068721, 'e', 21, false),
                                        data: J$.M(5068761, J$.R(5068729, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5068753, J$.R(5068737, 'rsaParams', rsaParams, false, false), J$.T(5068745, 'e', 21, false)))
                                    }, 11, false),
                                    J$.T(5068825, {
                                        name: J$.T(5068777, 'n', 21, false),
                                        data: J$.M(5068817, J$.R(5068785, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5068809, J$.R(5068793, 'rsaParams', rsaParams, false, false), J$.T(5068801, 'n', 21, false)))
                                    }, 11, false),
                                    J$.T(5068881, {
                                        name: J$.T(5068833, 'd', 21, false),
                                        data: J$.M(5068873, J$.R(5068841, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5068865, J$.R(5068849, 'rsaParams', rsaParams, false, false), J$.T(5068857, 'd', 21, false)))
                                    }, 11, false),
                                    J$.T(5068937, {
                                        name: J$.T(5068889, 'p', 21, false),
                                        data: J$.M(5068929, J$.R(5068897, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5068921, J$.R(5068905, 'rsaParams', rsaParams, false, false), J$.T(5068913, 'p', 21, false)))
                                    }, 11, false),
                                    J$.T(5068993, {
                                        name: J$.T(5068945, 'q', 21, false),
                                        data: J$.M(5068985, J$.R(5068953, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5068977, J$.R(5068961, 'rsaParams', rsaParams, false, false), J$.T(5068969, 'q', 21, false)))
                                    }, 11, false),
                                    J$.T(5069049, {
                                        name: J$.T(5069001, 'dmodp', 21, false),
                                        data: J$.M(5069041, J$.R(5069009, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5069033, J$.R(5069017, 'rsaParams', rsaParams, false, false), J$.T(5069025, 'dmodp', 21, false)))
                                    }, 11, false),
                                    J$.T(5069105, {
                                        name: J$.T(5069057, 'dmodq', 21, false),
                                        data: J$.M(5069097, J$.R(5069065, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5069089, J$.R(5069073, 'rsaParams', rsaParams, false, false), J$.T(5069081, 'dmodq', 21, false)))
                                    }, 11, false),
                                    J$.T(5069161, {
                                        name: J$.T(5069113, 'iqmp', 21, false),
                                        data: J$.M(5069153, J$.R(5069121, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5069145, J$.R(5069129, 'rsaParams', rsaParams, false, false), J$.T(5069137, 'iqmp', 21, false)))
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5069217, J$.F(5069209, J$.R(5069193, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5069201, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5073081, J$e);
                        } finally {
                            if (J$.Fr(5073089))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECPrivateKey(alg, elements) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5069889, arguments.callee, this, arguments);
                            arguments = J$.N(5069897, 'arguments', arguments, true, false, false);
                            alg = J$.N(5069905, 'alg', alg, true, false, false);
                            elements = J$.N(5069913, 'elements', elements, true, false, false);
                            J$.N(5069921, 'd', d, false, false, false);
                            J$.N(5069929, 'curve', curve, false, false, false);
                            J$.N(5069937, 'size', size, false, false, false);
                            J$.N(5069945, 'publicKey', publicKey, false, false, false);
                            J$.N(5069953, 'Q', Q, false, false, false);
                            J$.N(5069961, 'ecdsaKey', ecdsaKey, false, false, false);
                            if (J$.C(272416, J$.M(5069297, J$.G(5069281, J$.R(5069265, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5069273, 'alg', alg, false, false)), 'match', false)(J$.T(5069289, /^RSA-/, 14, false)))) {
                                return J$.Rt(5069329, J$.F(5069321, J$.R(5069305, 'readDNSSECRSAPrivateKey', readDNSSECRSAPrivateKey, false, true), false)(J$.R(5069313, 'elements', elements, false, false)));
                            }
                            if (J$.C(272440, J$.C(272424, J$.B(586242, '===', J$.G(5069353, J$.R(5069337, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5069345, 'alg', alg, false, false)), J$.T(5069361, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(586250, '===', J$.G(5069385, J$.R(5069369, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5069377, 'alg', alg, false, false)), J$.T(5069393, 'ECDSA-P256-SHA256', 21, false)))) {
                                var d = J$.W(5069481, 'd', J$.M(5069473, J$.R(5069401, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5069457, J$.M(5069441, J$.G(5069425, J$.R(5069409, 'elements', elements, false, false), J$.T(5069417, 0, 22, false)), 'split', false)(J$.T(5069433, ' ', 21, false)), J$.T(5069449, 1, 22, false)), J$.T(5069465, 'base64', 21, false)), d, false, false);
                                var curve = J$.W(5069497, 'curve', J$.T(5069489, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(5069513, 'size', J$.T(5069505, 384, 22, false), size, false, false);
                                if (J$.C(272432, J$.B(586258, '===', J$.G(5069537, J$.R(5069521, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5069529, 'alg', alg, false, false)), J$.T(5069545, 'ECDSA-P256-SHA256', 21, false)))) {
                                    curve = J$.W(5069561, 'curve', J$.T(5069553, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(5069577, 'size', J$.T(5069569, 256, 22, false), size, false, false);
                                }
                                var publicKey = J$.W(5069617, 'publicKey', J$.M(5069609, J$.R(5069585, 'utils', utils, false, true), 'publicFromPrivateECDSA', false)(J$.R(5069593, 'curve', curve, false, false), J$.R(5069601, 'd', d, false, false)), publicKey, false, false);
                                var Q = J$.W(5069665, 'Q', J$.G(5069657, J$.G(5069649, J$.G(5069633, J$.R(5069625, 'publicKey', publicKey, false, false), 'part'), J$.T(5069641, 'Q', 21, false)), 'data'), Q, false, false);
                                var ecdsaKey = J$.W(5069801, 'ecdsaKey', J$.T(5069793, {
                                    type: J$.T(5069673, 'ecdsa', 21, false),
                                    curve: J$.R(5069681, 'curve', curve, false, false),
                                    size: J$.R(5069689, 'size', size, false, false),
                                    parts: J$.T(5069785, [
                                        J$.T(5069729, {
                                            name: J$.T(5069697, 'curve', 21, false),
                                            data: J$.M(5069721, J$.R(5069705, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5069713, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(5069753, {
                                            name: J$.T(5069737, 'd', 21, false),
                                            data: J$.R(5069745, 'd', d, false, false)
                                        }, 11, false),
                                        J$.T(5069777, {
                                            name: J$.T(5069761, 'Q', 21, false),
                                            data: J$.R(5069769, 'Q', Q, false, false)
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(5069833, J$.F(5069825, J$.R(5069809, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5069817, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(5069881, J$.I(typeof Error === 'undefined' ? Error = J$.R(5069841, 'Error', undefined, true, true) : Error = J$.R(5069841, 'Error', Error, true, true)), true)(J$.B(586266, '+', J$.T(5069849, 'Unsupported algorithm: ', 21, false), J$.G(5069873, J$.R(5069857, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(5069865, 'alg', alg, false, false))));
                        } catch (J$e) {
                            J$.Ex(5073097, J$e);
                        } finally {
                            if (J$.Fr(5073105))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dnssecTimestamp(date) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5070177, arguments.callee, this, arguments);
                            arguments = J$.N(5070185, 'arguments', arguments, true, false, false);
                            date = J$.N(5070193, 'date', date, true, false, false);
                            J$.N(5070201, 'year', year, false, false, false);
                            J$.N(5070209, 'month', month, false, false, false);
                            J$.N(5070217, 'timestampStr', timestampStr, false, false, false);
                            var year = J$.W(5069993, 'year', J$.B(586274, '+', J$.M(5069977, J$.R(5069969, 'date', date, false, false), 'getFullYear', false)(), J$.T(5069985, '', 21, false)), year, false, false);
                            var month = J$.W(5070025, 'month', J$.B(586282, '+', J$.M(5070009, J$.R(5070001, 'date', date, false, false), 'getMonth', false)(), J$.T(5070017, 1, 22, false)), month, false, false);
                            var timestampStr = J$.W(5070065, 'timestampStr', J$.B(586298, '+', J$.B(586290, '+', J$.R(5070033, 'year', year, false, false), J$.R(5070041, 'month', month, false, false)), J$.M(5070057, J$.R(5070049, 'date', date, false, false), 'getUTCDate', false)()), timestampStr, false, false);
                            timestampStr = J$.W(5070121, 'timestampStr', J$.B(586322, '+', J$.R(5070113, 'timestampStr', timestampStr, false, false), J$.B(586314, '+', J$.B(586306, '+', J$.T(5070073, '', 21, false), J$.M(5070089, J$.R(5070081, 'date', date, false, false), 'getUTCHours', false)()), J$.M(5070105, J$.R(5070097, 'date', date, false, false), 'getUTCMinutes', false)())), timestampStr, false, false);
                            timestampStr = J$.W(5070153, 'timestampStr', J$.B(586330, '+', J$.R(5070145, 'timestampStr', timestampStr, false, false), J$.M(5070137, J$.R(5070129, 'date', date, false, false), 'getUTCSeconds', false)()), timestampStr, false, false);
                            return J$.Rt(5070169, J$.R(5070161, 'timestampStr', timestampStr, false, false));
                        } catch (J$e) {
                            J$.Ex(5073113, J$e);
                        } finally {
                            if (J$.Fr(5073121))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function rsaAlgFromOptions(opts) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(5070409, arguments.callee, this, arguments);
                            arguments = J$.N(5070417, 'arguments', arguments, true, false, false);
                            opts = J$.N(5070425, 'opts', opts, true, false, false);
                            if (J$.C(272480, J$.C(272456, J$.C(272448, J$.U(586338, '!', J$.R(5070225, 'opts', opts, false, false))) ? J$._() : J$.U(586346, '!', J$.G(5070241, J$.R(5070233, 'opts', opts, false, false), 'hashAlgo'))) ? J$._() : J$.B(586354, '===', J$.G(5070257, J$.R(5070249, 'opts', opts, false, false), 'hashAlgo'), J$.T(5070265, 'sha1', 21, false))))
                                return J$.Rt(5070281, J$.T(5070273, '5 (RSASHA1)', 21, false));
                            else if (J$.C(272472, J$.B(586362, '===', J$.G(5070297, J$.R(5070289, 'opts', opts, false, false), 'hashAlgo'), J$.T(5070305, 'sha256', 21, false))))
                                return J$.Rt(5070321, J$.T(5070313, '8 (RSASHA256)', 21, false));
                            else if (J$.C(272464, J$.B(586370, '===', J$.G(5070337, J$.R(5070329, 'opts', opts, false, false), 'hashAlgo'), J$.T(5070345, 'sha512', 21, false))))
                                return J$.Rt(5070361, J$.T(5070353, '10 (RSASHA512)', 21, false));
                            else
                                throw J$.F(5070401, J$.I(typeof Error === 'undefined' ? Error = J$.R(5070369, 'Error', undefined, true, true) : Error = J$.R(5070369, 'Error', Error, true, true)), true)(J$.B(586378, '+', J$.T(5070377, 'Unknown or unsupported hash: ', 21, false), J$.G(5070393, J$.R(5070385, 'opts', opts, false, false), 'hashAlgo')));
                        } catch (J$e) {
                            J$.Ex(5073129, J$e);
                        } finally {
                            if (J$.Fr(5073137))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeRSA(key, options) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5071793, arguments.callee, this, arguments);
                            arguments = J$.N(5071801, 'arguments', arguments, true, false, false);
                            key = J$.N(5071809, 'key', key, true, false, false);
                            options = J$.N(5071817, 'options', options, true, false, false);
                            J$.N(5071825, 'out', out, false, false, false);
                            J$.N(5071833, 'n', n, false, false, false);
                            J$.N(5071841, 'e', e, false, false, false);
                            J$.N(5071849, 'd', d, false, false, false);
                            J$.N(5071857, 'p', p, false, false, false);
                            J$.N(5071865, 'q', q, false, false, false);
                            J$.N(5071873, 'dmodp', dmodp, false, false, false);
                            J$.N(5071881, 'dmodq', dmodq, false, false, false);
                            J$.N(5071889, 'iqmp', iqmp, false, false, false);
                            J$.N(5071897, 'timestamp', timestamp, false, false, false);
                            if (J$.C(272496, J$.C(272488, J$.U(586386, '!', J$.G(5070449, J$.G(5070441, J$.R(5070433, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(586394, '!', J$.G(5070473, J$.G(5070465, J$.R(5070457, 'key', key, false, false), 'part'), 'dmodq')))) {
                                J$.M(5070497, J$.R(5070481, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(5070489, 'key', key, false, false));
                            }
                            var out = J$.W(5070513, 'out', J$.T(5070505, '', 21, false), out, false, false);
                            out = J$.W(5070537, 'out', J$.B(586402, '+', J$.R(5070529, 'out', out, false, false), J$.T(5070521, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            out = J$.W(5070593, 'out', J$.B(586426, '+', J$.R(5070585, 'out', out, false, false), J$.B(586418, '+', J$.B(586410, '+', J$.T(5070545, 'Algorithm: ', 21, false), J$.F(5070569, J$.R(5070553, 'rsaAlgFromOptions', rsaAlgFromOptions, false, true), false)(J$.R(5070561, 'options', options, false, false))), J$.T(5070577, '\n', 21, false))), out, false, false);
                            var n = J$.W(5070657, 'n', J$.M(5070649, J$.R(5070601, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5070641, J$.G(5070633, J$.G(5070617, J$.R(5070609, 'key', key, false, false), 'part'), J$.T(5070625, 'n', 21, false)), 'data')), n, false, false);
                            out = J$.W(5070713, 'out', J$.B(586450, '+', J$.R(5070705, 'out', out, false, false), J$.B(586442, '+', J$.B(586434, '+', J$.T(5070665, 'Modulus: ', 21, false), J$.M(5070689, J$.R(5070673, 'n', n, false, false), 'toString', false)(J$.T(5070681, 'base64', 21, false))), J$.T(5070697, '\n', 21, false))), out, false, false);
                            var e = J$.W(5070777, 'e', J$.M(5070769, J$.R(5070721, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5070761, J$.G(5070753, J$.G(5070737, J$.R(5070729, 'key', key, false, false), 'part'), J$.T(5070745, 'e', 21, false)), 'data')), e, false, false);
                            out = J$.W(5070833, 'out', J$.B(586474, '+', J$.R(5070825, 'out', out, false, false), J$.B(586466, '+', J$.B(586458, '+', J$.T(5070785, 'PublicExponent: ', 21, false), J$.M(5070809, J$.R(5070793, 'e', e, false, false), 'toString', false)(J$.T(5070801, 'base64', 21, false))), J$.T(5070817, '\n', 21, false))), out, false, false);
                            var d = J$.W(5070897, 'd', J$.M(5070889, J$.R(5070841, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5070881, J$.G(5070873, J$.G(5070857, J$.R(5070849, 'key', key, false, false), 'part'), J$.T(5070865, 'd', 21, false)), 'data')), d, false, false);
                            out = J$.W(5070953, 'out', J$.B(586498, '+', J$.R(5070945, 'out', out, false, false), J$.B(586490, '+', J$.B(586482, '+', J$.T(5070905, 'PrivateExponent: ', 21, false), J$.M(5070929, J$.R(5070913, 'd', d, false, false), 'toString', false)(J$.T(5070921, 'base64', 21, false))), J$.T(5070937, '\n', 21, false))), out, false, false);
                            var p = J$.W(5071017, 'p', J$.M(5071009, J$.R(5070961, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5071001, J$.G(5070993, J$.G(5070977, J$.R(5070969, 'key', key, false, false), 'part'), J$.T(5070985, 'p', 21, false)), 'data')), p, false, false);
                            out = J$.W(5071073, 'out', J$.B(586522, '+', J$.R(5071065, 'out', out, false, false), J$.B(586514, '+', J$.B(586506, '+', J$.T(5071025, 'Prime1: ', 21, false), J$.M(5071049, J$.R(5071033, 'p', p, false, false), 'toString', false)(J$.T(5071041, 'base64', 21, false))), J$.T(5071057, '\n', 21, false))), out, false, false);
                            var q = J$.W(5071137, 'q', J$.M(5071129, J$.R(5071081, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5071121, J$.G(5071113, J$.G(5071097, J$.R(5071089, 'key', key, false, false), 'part'), J$.T(5071105, 'q', 21, false)), 'data')), q, false, false);
                            out = J$.W(5071193, 'out', J$.B(586546, '+', J$.R(5071185, 'out', out, false, false), J$.B(586538, '+', J$.B(586530, '+', J$.T(5071145, 'Prime2: ', 21, false), J$.M(5071169, J$.R(5071153, 'q', q, false, false), 'toString', false)(J$.T(5071161, 'base64', 21, false))), J$.T(5071177, '\n', 21, false))), out, false, false);
                            var dmodp = J$.W(5071257, 'dmodp', J$.M(5071249, J$.R(5071201, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5071241, J$.G(5071233, J$.G(5071217, J$.R(5071209, 'key', key, false, false), 'part'), J$.T(5071225, 'dmodp', 21, false)), 'data')), dmodp, false, false);
                            out = J$.W(5071313, 'out', J$.B(586570, '+', J$.R(5071305, 'out', out, false, false), J$.B(586562, '+', J$.B(586554, '+', J$.T(5071265, 'Exponent1: ', 21, false), J$.M(5071289, J$.R(5071273, 'dmodp', dmodp, false, false), 'toString', false)(J$.T(5071281, 'base64', 21, false))), J$.T(5071297, '\n', 21, false))), out, false, false);
                            var dmodq = J$.W(5071377, 'dmodq', J$.M(5071369, J$.R(5071321, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5071361, J$.G(5071353, J$.G(5071337, J$.R(5071329, 'key', key, false, false), 'part'), J$.T(5071345, 'dmodq', 21, false)), 'data')), dmodq, false, false);
                            out = J$.W(5071433, 'out', J$.B(586594, '+', J$.R(5071425, 'out', out, false, false), J$.B(586586, '+', J$.B(586578, '+', J$.T(5071385, 'Exponent2: ', 21, false), J$.M(5071409, J$.R(5071393, 'dmodq', dmodq, false, false), 'toString', false)(J$.T(5071401, 'base64', 21, false))), J$.T(5071417, '\n', 21, false))), out, false, false);
                            var iqmp = J$.W(5071497, 'iqmp', J$.M(5071489, J$.R(5071441, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(5071481, J$.G(5071473, J$.G(5071457, J$.R(5071449, 'key', key, false, false), 'part'), J$.T(5071465, 'iqmp', 21, false)), 'data')), iqmp, false, false);
                            out = J$.W(5071553, 'out', J$.B(586618, '+', J$.R(5071545, 'out', out, false, false), J$.B(586610, '+', J$.B(586602, '+', J$.T(5071505, 'Coefficient: ', 21, false), J$.M(5071529, J$.R(5071513, 'iqmp', iqmp, false, false), 'toString', false)(J$.T(5071521, 'base64', 21, false))), J$.T(5071537, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(5071577, 'timestamp', J$.F(5071569, J$.I(typeof Date === 'undefined' ? Date = J$.R(5071561, 'Date', undefined, true, true) : Date = J$.R(5071561, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(5071633, 'out', J$.B(586642, '+', J$.R(5071625, 'out', out, false, false), J$.B(586634, '+', J$.B(586626, '+', J$.T(5071585, 'Created: ', 21, false), J$.F(5071609, J$.R(5071593, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5071601, 'timestamp', timestamp, false, false))), J$.T(5071617, '\n', 21, false))), out, false, false);
                            out = J$.W(5071689, 'out', J$.B(586666, '+', J$.R(5071681, 'out', out, false, false), J$.B(586658, '+', J$.B(586650, '+', J$.T(5071641, 'Publish: ', 21, false), J$.F(5071665, J$.R(5071649, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5071657, 'timestamp', timestamp, false, false))), J$.T(5071673, '\n', 21, false))), out, false, false);
                            out = J$.W(5071745, 'out', J$.B(586690, '+', J$.R(5071737, 'out', out, false, false), J$.B(586682, '+', J$.B(586674, '+', J$.T(5071697, 'Activate: ', 21, false), J$.F(5071721, J$.R(5071705, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5071713, 'timestamp', timestamp, false, false))), J$.T(5071729, '\n', 21, false))), out, false, false);
                            return J$.Rt(5071785, J$.M(5071777, J$.R(5071753, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5071761, 'out', out, false, false), J$.T(5071769, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5073145, J$e);
                        } finally {
                            if (J$.Fr(5073153))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeECDSA(key, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5072401, arguments.callee, this, arguments);
                            arguments = J$.N(5072409, 'arguments', arguments, true, false, false);
                            key = J$.N(5072417, 'key', key, true, false, false);
                            options = J$.N(5072425, 'options', options, true, false, false);
                            J$.N(5072433, 'out', out, false, false, false);
                            J$.N(5072441, 'base64Key', base64Key, false, false, false);
                            J$.N(5072449, 'timestamp', timestamp, false, false, false);
                            var out = J$.W(5071913, 'out', J$.T(5071905, '', 21, false), out, false, false);
                            out = J$.W(5071937, 'out', J$.B(586698, '+', J$.R(5071929, 'out', out, false, false), J$.T(5071921, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            if (J$.C(272512, J$.B(586706, '===', J$.G(5071953, J$.R(5071945, 'key', key, false, false), 'curve'), J$.T(5071961, 'nistp256', 21, false)))) {
                                out = J$.W(5071985, 'out', J$.B(586714, '+', J$.R(5071977, 'out', out, false, false), J$.T(5071969, 'Algorithm: 13 (ECDSAP256SHA256)\n', 21, false)), out, false, false);
                            } else if (J$.C(272504, J$.B(586722, '===', J$.G(5072001, J$.R(5071993, 'key', key, false, false), 'curve'), J$.T(5072009, 'nistp384', 21, false)))) {
                                out = J$.W(5072033, 'out', J$.B(586730, '+', J$.R(5072025, 'out', out, false, false), J$.T(5072017, 'Algorithm: 14 (ECDSAP384SHA384)\n', 21, false)), out, false, false);
                            } else {
                                throw J$.F(5072057, J$.I(typeof Error === 'undefined' ? Error = J$.R(5072041, 'Error', undefined, true, true) : Error = J$.R(5072041, 'Error', Error, true, true)), true)(J$.T(5072049, 'Unsupported curve', 21, false));
                            }
                            var base64Key = J$.W(5072121, 'base64Key', J$.M(5072113, J$.G(5072097, J$.G(5072089, J$.G(5072073, J$.R(5072065, 'key', key, false, false), 'part'), J$.T(5072081, 'd', 21, false)), 'data'), 'toString', false)(J$.T(5072105, 'base64', 21, false)), base64Key, false, false);
                            out = J$.W(5072161, 'out', J$.B(586754, '+', J$.R(5072153, 'out', out, false, false), J$.B(586746, '+', J$.B(586738, '+', J$.T(5072129, 'PrivateKey: ', 21, false), J$.R(5072137, 'base64Key', base64Key, false, false)), J$.T(5072145, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(5072185, 'timestamp', J$.F(5072177, J$.I(typeof Date === 'undefined' ? Date = J$.R(5072169, 'Date', undefined, true, true) : Date = J$.R(5072169, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(5072241, 'out', J$.B(586778, '+', J$.R(5072233, 'out', out, false, false), J$.B(586770, '+', J$.B(586762, '+', J$.T(5072193, 'Created: ', 21, false), J$.F(5072217, J$.R(5072201, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5072209, 'timestamp', timestamp, false, false))), J$.T(5072225, '\n', 21, false))), out, false, false);
                            out = J$.W(5072297, 'out', J$.B(586802, '+', J$.R(5072289, 'out', out, false, false), J$.B(586794, '+', J$.B(586786, '+', J$.T(5072249, 'Publish: ', 21, false), J$.F(5072273, J$.R(5072257, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5072265, 'timestamp', timestamp, false, false))), J$.T(5072281, '\n', 21, false))), out, false, false);
                            out = J$.W(5072353, 'out', J$.B(586826, '+', J$.R(5072345, 'out', out, false, false), J$.B(586818, '+', J$.B(586810, '+', J$.T(5072305, 'Activate: ', 21, false), J$.F(5072329, J$.R(5072313, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(5072321, 'timestamp', timestamp, false, false))), J$.T(5072337, '\n', 21, false))), out, false, false);
                            return J$.Rt(5072393, J$.M(5072385, J$.R(5072361, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5072369, 'out', out, false, false), J$.T(5072377, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5073161, J$e);
                        } finally {
                            if (J$.Fr(5073169))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(5072729, arguments.callee, this, arguments);
                            arguments = J$.N(5072737, 'arguments', arguments, true, false, false);
                            key = J$.N(5072745, 'key', key, true, false, false);
                            options = J$.N(5072753, 'options', options, true, false, false);
                            if (J$.C(272544, J$.M(5072473, J$.R(5072457, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5072465, 'key', key, false, false)))) {
                                if (J$.C(272528, J$.B(586834, '===', J$.G(5072489, J$.R(5072481, 'key', key, false, false), 'type'), J$.T(5072497, 'rsa', 21, false)))) {
                                    return J$.Rt(5072537, J$.F(5072529, J$.R(5072505, 'writeRSA', writeRSA, false, true), false)(J$.R(5072513, 'key', key, false, false), J$.R(5072521, 'options', options, false, false)));
                                } else if (J$.C(272520, J$.B(586842, '===', J$.G(5072553, J$.R(5072545, 'key', key, false, false), 'type'), J$.T(5072561, 'ecdsa', 21, false)))) {
                                    return J$.Rt(5072601, J$.F(5072593, J$.R(5072569, 'writeECDSA', writeECDSA, false, true), false)(J$.R(5072577, 'key', key, false, false), J$.R(5072585, 'options', options, false, false)));
                                } else {
                                    throw J$.F(5072641, J$.I(typeof Error === 'undefined' ? Error = J$.R(5072609, 'Error', undefined, true, true) : Error = J$.R(5072609, 'Error', Error, true, true)), true)(J$.B(586850, '+', J$.T(5072617, 'Unsupported algorithm: ', 21, false), J$.G(5072633, J$.R(5072625, 'key', key, false, false), 'type')));
                                }
                            } else if (J$.C(272536, J$.M(5072665, J$.R(5072649, 'Key', Key, false, true), 'isKey', false)(J$.R(5072657, 'key', key, false, false)))) {
                                throw J$.F(5072697, J$.I(typeof Error === 'undefined' ? Error = J$.R(5072673, 'Error', undefined, true, true) : Error = J$.R(5072673, 'Error', Error, true, true)), true)(J$.B(586858, '+', J$.T(5072681, 'Format "dnssec" only supports ', 21, false), J$.T(5072689, 'writing private keys', 21, false)));
                            } else {
                                throw J$.F(5072721, J$.I(typeof Error === 'undefined' ? Error = J$.R(5072705, 'Error', undefined, true, true) : Error = J$.R(5072705, 'Error', Error, true, true)), true)(J$.T(5072713, 'key is not a Key or PrivateKey', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5073177, J$e);
                        } finally {
                            if (J$.Fr(5073185))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5072769, 'assert', assert, false, false, false);
            J$.N(5072777, 'Buffer', Buffer, false, false, false);
            J$.N(5072785, 'Key', Key, false, false, false);
            J$.N(5072793, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5072801, 'utils', utils, false, false, false);
            J$.N(5072809, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(5072817, 'Dhe', Dhe, false, false, false);
            J$.N(5072825, 'supportedAlgos', supportedAlgos, false, false, false);
            J$.N(5072833, 'supportedAlgosById', supportedAlgosById, false, false, false);
            read = J$.N(5072849, 'read', J$.T(5072841, read, 12, false), true, false, false);
            readRFC3110 = J$.N(5072865, 'readRFC3110', J$.T(5072857, readRFC3110, 12, false), true, false, false);
            elementToBuf = J$.N(5072881, 'elementToBuf', J$.T(5072873, elementToBuf, 12, false), true, false, false);
            readDNSSECRSAPrivateKey = J$.N(5072897, 'readDNSSECRSAPrivateKey', J$.T(5072889, readDNSSECRSAPrivateKey, 12, false), true, false, false);
            readDNSSECPrivateKey = J$.N(5072913, 'readDNSSECPrivateKey', J$.T(5072905, readDNSSECPrivateKey, 12, false), true, false, false);
            dnssecTimestamp = J$.N(5072929, 'dnssecTimestamp', J$.T(5072921, dnssecTimestamp, 12, false), true, false, false);
            rsaAlgFromOptions = J$.N(5072945, 'rsaAlgFromOptions', J$.T(5072937, rsaAlgFromOptions, 12, false), true, false, false);
            writeRSA = J$.N(5072961, 'writeRSA', J$.T(5072953, writeRSA, 12, false), true, false, false);
            writeECDSA = J$.N(5072977, 'writeECDSA', J$.T(5072969, writeECDSA, 12, false), true, false, false);
            write = J$.N(5072993, 'write', J$.T(5072985, write, 12, false), true, false, false);
            J$.P(5065433, J$.I(typeof module === 'undefined' ? module = J$.R(5065401, 'module', undefined, true, true) : module = J$.R(5065401, 'module', module, true, true)), 'exports', J$.T(5065425, {
                read: J$.R(5065409, 'read', read, false, true),
                write: J$.R(5065417, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(5065465, 'assert', J$.F(5065457, J$.I(typeof require === 'undefined' ? require = J$.R(5065441, 'require', undefined, true, true) : require = J$.R(5065441, 'require', require, true, true)), false)(J$.T(5065449, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5065505, 'Buffer', J$.G(5065497, J$.F(5065489, J$.I(typeof require === 'undefined' ? require = J$.R(5065473, 'require', undefined, true, true) : require = J$.R(5065473, 'require', require, true, true)), false)(J$.T(5065481, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var Key = J$.W(5065537, 'Key', J$.F(5065529, J$.I(typeof require === 'undefined' ? require = J$.R(5065513, 'require', undefined, true, true) : require = J$.R(5065513, 'require', require, true, true)), false)(J$.T(5065521, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5065569, 'PrivateKey', J$.F(5065561, J$.I(typeof require === 'undefined' ? require = J$.R(5065545, 'require', undefined, true, true) : require = J$.R(5065545, 'require', require, true, true)), false)(J$.T(5065553, '../private-key', 21, false)), PrivateKey, false, true);
            var utils = J$.W(5065601, 'utils', J$.F(5065593, J$.I(typeof require === 'undefined' ? require = J$.R(5065577, 'require', undefined, true, true) : require = J$.R(5065577, 'require', require, true, true)), false)(J$.T(5065585, '../utils', 21, false)), utils, false, true);
            var SSHBuffer = J$.W(5065633, 'SSHBuffer', J$.F(5065625, J$.I(typeof require === 'undefined' ? require = J$.R(5065609, 'require', undefined, true, true) : require = J$.R(5065609, 'require', require, true, true)), false)(J$.T(5065617, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var Dhe = J$.W(5065665, 'Dhe', J$.F(5065657, J$.I(typeof require === 'undefined' ? require = J$.R(5065641, 'require', undefined, true, true) : require = J$.R(5065641, 'require', require, true, true)), false)(J$.T(5065649, '../dhe', 21, false)), Dhe, false, true);
            var supportedAlgos = J$.W(5065721, 'supportedAlgos', J$.T(5065713, {
                'rsa-sha1': J$.T(5065673, 5, 22, false),
                'rsa-sha256': J$.T(5065681, 8, 22, false),
                'rsa-sha512': J$.T(5065689, 10, 22, false),
                'ecdsa-p256-sha256': J$.T(5065697, 13, 22, false),
                'ecdsa-p384-sha384': J$.T(5065705, 14, 22, false)
            }, 11, false), supportedAlgos, false, true);
            var supportedAlgosById = J$.W(5065737, 'supportedAlgosById', J$.T(5065729, {}, 11, false), supportedAlgosById, false, true);
            J$.M(5065857, J$.M(5065761, J$.I(typeof Object === 'undefined' ? Object = J$.R(5065745, 'Object', undefined, true, true) : Object = J$.R(5065745, 'Object', Object, true, true)), 'keys', false)(J$.R(5065753, 'supportedAlgos', supportedAlgos, false, true)), 'forEach', false)(J$.T(5065849, function (k) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5065825, arguments.callee, this, arguments);
                            arguments = J$.N(5065833, 'arguments', arguments, true, false, false);
                            k = J$.N(5065841, 'k', k, true, false, false);
                            J$.P(5065817, J$.R(5065769, 'supportedAlgosById', supportedAlgosById, false, true), J$.G(5065793, J$.R(5065777, 'supportedAlgos', supportedAlgos, false, true), J$.R(5065785, 'k', k, false, false)), J$.M(5065809, J$.R(5065801, 'k', k, false, false), 'toUpperCase', false)());
                        } catch (J$e) {
                            J$.Ex(5073001, J$e);
                        } finally {
                            if (J$.Fr(5073009))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(5073193, J$e);
        } finally {
            if (J$.Sr(5073201))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

