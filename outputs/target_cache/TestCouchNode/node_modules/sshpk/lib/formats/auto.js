J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(5065097, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/auto.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5063289, arguments.callee, this, arguments);
                            arguments = J$.N(5063297, 'arguments', arguments, true, false, false);
                            buf = J$.N(5063305, 'buf', buf, true, false, false);
                            options = J$.N(5063313, 'options', options, true, false, false);
                            if (J$.C(271984, J$.B(585618, '===', J$.U(585610, 'typeof', J$.R(5062521, 'buf', buf, false, false)), J$.T(5062529, 'string', 21, false)))) {
                                if (J$.C(271912, J$.M(5062561, J$.M(5062545, J$.R(5062537, 'buf', buf, false, false), 'trim', false)(), 'match', false)(J$.T(5062553, /^[-]+[ ]*BEGIN/, 14, false))))
                                    return J$.Rt(5062601, J$.M(5062593, J$.R(5062569, 'pem', pem, false, true), 'read', false)(J$.R(5062577, 'buf', buf, false, false), J$.R(5062585, 'options', options, false, false)));
                                if (J$.C(271920, J$.M(5062625, J$.R(5062609, 'buf', buf, false, false), 'match', false)(J$.T(5062617, /^\s*ssh-[a-z]/, 14, false))))
                                    return J$.Rt(5062665, J$.M(5062657, J$.R(5062633, 'ssh', ssh, false, true), 'read', false)(J$.R(5062641, 'buf', buf, false, false), J$.R(5062649, 'options', options, false, false)));
                                if (J$.C(271928, J$.M(5062689, J$.R(5062673, 'buf', buf, false, false), 'match', false)(J$.T(5062681, /^\s*ecdsa-/, 14, false))))
                                    return J$.Rt(5062729, J$.M(5062721, J$.R(5062697, 'ssh', ssh, false, true), 'read', false)(J$.R(5062705, 'buf', buf, false, false), J$.R(5062713, 'options', options, false, false)));
                                if (J$.C(271936, J$.M(5062753, J$.R(5062737, 'buf', buf, false, false), 'match', false)(J$.T(5062745, /^putty-user-key-file-2:/i, 14, false))))
                                    return J$.Rt(5062793, J$.M(5062785, J$.R(5062761, 'putty', putty, false, true), 'read', false)(J$.R(5062769, 'buf', buf, false, false), J$.R(5062777, 'options', options, false, false)));
                                if (J$.C(271944, J$.F(5062817, J$.R(5062801, 'findDNSSECHeader', findDNSSECHeader, false, true), false)(J$.R(5062809, 'buf', buf, false, false))))
                                    return J$.Rt(5062857, J$.M(5062849, J$.R(5062825, 'dnssec', dnssec, false, true), 'read', false)(J$.R(5062833, 'buf', buf, false, false), J$.R(5062841, 'options', options, false, false)));
                                buf = J$.W(5062897, 'buf', J$.M(5062889, J$.R(5062865, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5062873, 'buf', buf, false, false), J$.T(5062881, 'binary', 21, false)), buf, false, false);
                            } else {
                                J$.M(5062921, J$.R(5062905, 'assert', assert, false, true), 'buffer', false)(J$.R(5062913, 'buf', buf, false, false));
                                if (J$.C(271952, J$.F(5062945, J$.R(5062929, 'findPEMHeader', findPEMHeader, false, true), false)(J$.R(5062937, 'buf', buf, false, false))))
                                    return J$.Rt(5062985, J$.M(5062977, J$.R(5062953, 'pem', pem, false, true), 'read', false)(J$.R(5062961, 'buf', buf, false, false), J$.R(5062969, 'options', options, false, false)));
                                if (J$.C(271960, J$.F(5063009, J$.R(5062993, 'findSSHHeader', findSSHHeader, false, true), false)(J$.R(5063001, 'buf', buf, false, false))))
                                    return J$.Rt(5063049, J$.M(5063041, J$.R(5063017, 'ssh', ssh, false, true), 'read', false)(J$.R(5063025, 'buf', buf, false, false), J$.R(5063033, 'options', options, false, false)));
                                if (J$.C(271968, J$.F(5063073, J$.R(5063057, 'findPuTTYHeader', findPuTTYHeader, false, true), false)(J$.R(5063065, 'buf', buf, false, false))))
                                    return J$.Rt(5063113, J$.M(5063105, J$.R(5063081, 'putty', putty, false, true), 'read', false)(J$.R(5063089, 'buf', buf, false, false), J$.R(5063097, 'options', options, false, false)));
                                if (J$.C(271976, J$.F(5063137, J$.R(5063121, 'findDNSSECHeader', findDNSSECHeader, false, true), false)(J$.R(5063129, 'buf', buf, false, false))))
                                    return J$.Rt(5063177, J$.M(5063169, J$.R(5063145, 'dnssec', dnssec, false, true), 'read', false)(J$.R(5063153, 'buf', buf, false, false), J$.R(5063161, 'options', options, false, false)));
                            }
                            if (J$.C(271992, J$.B(585626, '<', J$.M(5063201, J$.R(5063185, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(5063193, 0, 22, false)), J$.G(5063217, J$.R(5063209, 'buf', buf, false, false), 'length'))))
                                return J$.Rt(5063257, J$.M(5063249, J$.R(5063225, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(5063233, 'buf', buf, false, false), J$.R(5063241, 'options', options, false, false)));
                            throw J$.F(5063281, J$.I(typeof Error === 'undefined' ? Error = J$.R(5063265, 'Error', undefined, true, true) : Error = J$.R(5063265, 'Error', Error, true, true)), true)(J$.T(5063273, 'Failed to auto-detect format of key', 21, false));
                        } catch (J$e) {
                            J$.Ex(5065289, J$e);
                        } finally {
                            if (J$.Fr(5065297))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findPuTTYHeader(buf) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5063609, arguments.callee, this, arguments);
                            arguments = J$.N(5063617, 'arguments', arguments, true, false, false);
                            buf = J$.N(5063625, 'buf', buf, true, false, false);
                            J$.N(5063633, 'offset', offset, false, false, false);
                            var offset = J$.W(5063329, 'offset', J$.T(5063321, 0, 22, false), offset, false, false);
                            while (J$.C(272024, J$.C(272016, J$.B(585634, '<', J$.R(5063337, 'offset', offset, false, false), J$.G(5063353, J$.R(5063345, 'buf', buf, false, false), 'length'))) ? J$.C(272008, J$.C(272000, J$.B(585642, '===', J$.G(5063377, J$.R(5063361, 'buf', buf, false, false), J$.R(5063369, 'offset', offset, false, false)), J$.T(5063385, 32, 22, false))) ? J$._() : J$.B(585650, '===', J$.G(5063409, J$.R(5063393, 'buf', buf, false, false), J$.R(5063401, 'offset', offset, false, false)), J$.T(5063417, 10, 22, false))) ? J$._() : J$.B(585658, '===', J$.G(5063441, J$.R(5063425, 'buf', buf, false, false), J$.R(5063433, 'offset', offset, false, false)), J$.T(5063449, 9, 22, false)) : J$._()))
                                offset = J$.W(5063465, 'offset', J$.B(585674, '+', J$.U(585666, '+', J$.R(5063457, 'offset', offset, false, false)), 1), offset, false, false);
                            if (J$.C(272040, J$.C(272032, J$.B(585690, '<=', J$.B(585682, '+', J$.R(5063473, 'offset', offset, false, false), J$.T(5063481, 22, 22, false)), J$.G(5063497, J$.R(5063489, 'buf', buf, false, false), 'length'))) ? J$.B(585706, '===', J$.M(5063561, J$.M(5063553, J$.M(5063537, J$.R(5063505, 'buf', buf, false, false), 'slice', false)(J$.R(5063513, 'offset', offset, false, false), J$.B(585698, '+', J$.R(5063521, 'offset', offset, false, false), J$.T(5063529, 22, 22, false))), 'toString', false)(J$.T(5063545, 'ascii', 21, false)), 'toLowerCase', false)(), J$.T(5063569, 'putty-user-key-file-2:', 21, false)) : J$._()))
                                return J$.Rt(5063585, J$.T(5063577, true, 23, false));
                            return J$.Rt(5063601, J$.T(5063593, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(5065305, J$e);
                        } finally {
                            if (J$.Fr(5065313))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findSSHHeader(buf) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5064033, arguments.callee, this, arguments);
                            arguments = J$.N(5064041, 'arguments', arguments, true, false, false);
                            buf = J$.N(5064049, 'buf', buf, true, false, false);
                            J$.N(5064057, 'offset', offset, false, false, false);
                            var offset = J$.W(5063649, 'offset', J$.T(5063641, 0, 22, false), offset, false, false);
                            while (J$.C(272072, J$.C(272064, J$.B(585714, '<', J$.R(5063657, 'offset', offset, false, false), J$.G(5063673, J$.R(5063665, 'buf', buf, false, false), 'length'))) ? J$.C(272056, J$.C(272048, J$.B(585722, '===', J$.G(5063697, J$.R(5063681, 'buf', buf, false, false), J$.R(5063689, 'offset', offset, false, false)), J$.T(5063705, 32, 22, false))) ? J$._() : J$.B(585730, '===', J$.G(5063729, J$.R(5063713, 'buf', buf, false, false), J$.R(5063721, 'offset', offset, false, false)), J$.T(5063737, 10, 22, false))) ? J$._() : J$.B(585738, '===', J$.G(5063761, J$.R(5063745, 'buf', buf, false, false), J$.R(5063753, 'offset', offset, false, false)), J$.T(5063769, 9, 22, false)) : J$._()))
                                offset = J$.W(5063785, 'offset', J$.B(585754, '+', J$.U(585746, '+', J$.R(5063777, 'offset', offset, false, false)), 1), offset, false, false);
                            if (J$.C(272088, J$.C(272080, J$.B(585770, '<=', J$.B(585762, '+', J$.R(5063793, 'offset', offset, false, false), J$.T(5063801, 4, 22, false)), J$.G(5063817, J$.R(5063809, 'buf', buf, false, false), 'length'))) ? J$.B(585786, '===', J$.M(5063873, J$.M(5063857, J$.R(5063825, 'buf', buf, false, false), 'slice', false)(J$.R(5063833, 'offset', offset, false, false), J$.B(585778, '+', J$.R(5063841, 'offset', offset, false, false), J$.T(5063849, 4, 22, false))), 'toString', false)(J$.T(5063865, 'ascii', 21, false)), J$.T(5063881, 'ssh-', 21, false)) : J$._()))
                                return J$.Rt(5063897, J$.T(5063889, true, 23, false));
                            if (J$.C(272104, J$.C(272096, J$.B(585802, '<=', J$.B(585794, '+', J$.R(5063905, 'offset', offset, false, false), J$.T(5063913, 6, 22, false)), J$.G(5063929, J$.R(5063921, 'buf', buf, false, false), 'length'))) ? J$.B(585818, '===', J$.M(5063985, J$.M(5063969, J$.R(5063937, 'buf', buf, false, false), 'slice', false)(J$.R(5063945, 'offset', offset, false, false), J$.B(585810, '+', J$.R(5063953, 'offset', offset, false, false), J$.T(5063961, 6, 22, false))), 'toString', false)(J$.T(5063977, 'ascii', 21, false)), J$.T(5063993, 'ecdsa-', 21, false)) : J$._()))
                                return J$.Rt(5064009, J$.T(5064001, true, 23, false));
                            return J$.Rt(5064025, J$.T(5064017, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(5065321, J$e);
                        } finally {
                            if (J$.Fr(5065329))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findPEMHeader(buf) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5064505, arguments.callee, this, arguments);
                            arguments = J$.N(5064513, 'arguments', arguments, true, false, false);
                            buf = J$.N(5064521, 'buf', buf, true, false, false);
                            J$.N(5064529, 'offset', offset, false, false, false);
                            var offset = J$.W(5064073, 'offset', J$.T(5064065, 0, 22, false), offset, false, false);
                            while (J$.C(272128, J$.C(272120, J$.B(585826, '<', J$.R(5064081, 'offset', offset, false, false), J$.G(5064097, J$.R(5064089, 'buf', buf, false, false), 'length'))) ? J$.C(272112, J$.B(585834, '===', J$.G(5064121, J$.R(5064105, 'buf', buf, false, false), J$.R(5064113, 'offset', offset, false, false)), J$.T(5064129, 32, 22, false))) ? J$._() : J$.B(585842, '===', J$.G(5064153, J$.R(5064137, 'buf', buf, false, false), J$.R(5064145, 'offset', offset, false, false)), J$.T(5064161, 10, 22, false)) : J$._()))
                                offset = J$.W(5064177, 'offset', J$.B(585858, '+', J$.U(585850, '+', J$.R(5064169, 'offset', offset, false, false)), 1), offset, false, false);
                            if (J$.C(272136, J$.B(585866, '!==', J$.G(5064201, J$.R(5064185, 'buf', buf, false, false), J$.R(5064193, 'offset', offset, false, false)), J$.T(5064209, 45, 22, false))))
                                return J$.Rt(5064225, J$.T(5064217, false, 23, false));
                            while (J$.C(272152, J$.C(272144, J$.B(585874, '<', J$.R(5064233, 'offset', offset, false, false), J$.G(5064249, J$.R(5064241, 'buf', buf, false, false), 'length'))) ? J$.B(585882, '===', J$.G(5064273, J$.R(5064257, 'buf', buf, false, false), J$.R(5064265, 'offset', offset, false, false)), J$.T(5064281, 45, 22, false)) : J$._()))
                                offset = J$.W(5064297, 'offset', J$.B(585898, '+', J$.U(585890, '+', J$.R(5064289, 'offset', offset, false, false)), 1), offset, false, false);
                            while (J$.C(272168, J$.C(272160, J$.B(585906, '<', J$.R(5064305, 'offset', offset, false, false), J$.G(5064321, J$.R(5064313, 'buf', buf, false, false), 'length'))) ? J$.B(585914, '===', J$.G(5064345, J$.R(5064329, 'buf', buf, false, false), J$.R(5064337, 'offset', offset, false, false)), J$.T(5064353, 32, 22, false)) : J$._()))
                                offset = J$.W(5064369, 'offset', J$.B(585930, '+', J$.U(585922, '+', J$.R(5064361, 'offset', offset, false, false)), 1), offset, false, false);
                            if (J$.C(272184, J$.C(272176, J$.B(585946, '>', J$.B(585938, '+', J$.R(5064377, 'offset', offset, false, false), J$.T(5064385, 5, 22, false)), J$.G(5064401, J$.R(5064393, 'buf', buf, false, false), 'length'))) ? J$._() : J$.B(585962, '!==', J$.M(5064457, J$.M(5064441, J$.R(5064409, 'buf', buf, false, false), 'slice', false)(J$.R(5064417, 'offset', offset, false, false), J$.B(585954, '+', J$.R(5064425, 'offset', offset, false, false), J$.T(5064433, 5, 22, false))), 'toString', false)(J$.T(5064449, 'ascii', 21, false)), J$.T(5064465, 'BEGIN', 21, false))))
                                return J$.Rt(5064481, J$.T(5064473, false, 23, false));
                            return J$.Rt(5064497, J$.T(5064489, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(5065337, J$e);
                        } finally {
                            if (J$.Fr(5065345))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findDNSSECHeader(buf) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5064993, arguments.callee, this, arguments);
                            arguments = J$.N(5065001, 'arguments', arguments, true, false, false);
                            buf = J$.N(5065009, 'buf', buf, true, false, false);
                            J$.N(5065017, 'headerCheck', headerCheck, false, false, false);
                            J$.N(5065025, 'lines', lines, false, false, false);
                            J$.N(5065033, 'line', line, false, false, false);
                            if (J$.C(272192, J$.B(585970, '<=', J$.G(5064545, J$.R(5064537, 'buf', buf, false, false), 'length'), J$.G(5064561, J$.R(5064553, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true), 'length'))))
                                return J$.Rt(5064577, J$.T(5064569, false, 23, false));
                            var headerCheck = J$.W(5064625, 'headerCheck', J$.M(5064617, J$.R(5064585, 'buf', buf, false, false), 'slice', false)(J$.T(5064593, 0, 22, false), J$.G(5064609, J$.R(5064601, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true), 'length')), headerCheck, false, false);
                            if (J$.C(272200, J$.B(585978, '===', J$.M(5064649, J$.R(5064633, 'headerCheck', headerCheck, false, false), 'toString', false)(J$.T(5064641, 'ascii', 21, false)), J$.R(5064657, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true))))
                                return J$.Rt(5064673, J$.T(5064665, true, 23, false));
                            if (J$.C(272208, J$.B(585994, '!==', J$.U(585986, 'typeof', J$.R(5064681, 'buf', buf, false, false)), J$.T(5064689, 'string', 21, false)))) {
                                buf = J$.W(5064721, 'buf', J$.M(5064713, J$.R(5064697, 'buf', buf, false, false), 'toString', false)(J$.T(5064705, 'ascii', 21, false)), buf, false, false);
                            }
                            var lines = J$.W(5064753, 'lines', J$.M(5064745, J$.R(5064729, 'buf', buf, false, false), 'split', false)(J$.T(5064737, '\n', 21, false)), lines, false, false);
                            var line = J$.W(5064769, 'line', J$.T(5064761, 0, 22, false), line, false, false);
                            while (J$.C(272216, J$.M(5064809, J$.G(5064793, J$.R(5064777, 'lines', lines, false, false), J$.R(5064785, 'line', line, false, false)), 'match', false)(J$.T(5064801, /^\;/, 14, false))))
                                J$.B(586018, '-', line = J$.W(5064825, 'line', J$.B(586010, '+', J$.U(586002, '+', J$.R(5064817, 'line', line, false, false)), 1), line, false, false), 1);
                            if (J$.C(272224, J$.M(5064881, J$.M(5064865, J$.G(5064849, J$.R(5064833, 'lines', lines, false, false), J$.R(5064841, 'line', line, false, false)), 'toString', false)(J$.T(5064857, 'ascii', 21, false)), 'match', false)(J$.T(5064873, /\. IN KEY /, 14, false))))
                                return J$.Rt(5064897, J$.T(5064889, true, 23, false));
                            if (J$.C(272232, J$.M(5064953, J$.M(5064937, J$.G(5064921, J$.R(5064905, 'lines', lines, false, false), J$.R(5064913, 'line', line, false, false)), 'toString', false)(J$.T(5064929, 'ascii', 21, false)), 'match', false)(J$.T(5064945, /\. IN DNSKEY /, 14, false))))
                                return J$.Rt(5064969, J$.T(5064961, true, 23, false));
                            return J$.Rt(5064985, J$.T(5064977, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(5065353, J$e);
                        } finally {
                            if (J$.Fr(5065361))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5065065, arguments.callee, this, arguments);
                            arguments = J$.N(5065073, 'arguments', arguments, true, false, false);
                            key = J$.N(5065081, 'key', key, true, false, false);
                            options = J$.N(5065089, 'options', options, true, false, false);
                            throw J$.F(5065057, J$.I(typeof Error === 'undefined' ? Error = J$.R(5065041, 'Error', undefined, true, true) : Error = J$.R(5065041, 'Error', Error, true, true)), true)(J$.T(5065049, '"auto" format cannot be used for writing', 21, false));
                        } catch (J$e) {
                            J$.Ex(5065369, J$e);
                        } finally {
                            if (J$.Fr(5065377))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5065105, 'assert', assert, false, false, false);
            J$.N(5065113, 'Buffer', Buffer, false, false, false);
            J$.N(5065121, 'utils', utils, false, false, false);
            J$.N(5065129, 'Key', Key, false, false, false);
            J$.N(5065137, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5065145, 'pem', pem, false, false, false);
            J$.N(5065153, 'ssh', ssh, false, false, false);
            J$.N(5065161, 'rfc4253', rfc4253, false, false, false);
            J$.N(5065169, 'dnssec', dnssec, false, false, false);
            J$.N(5065177, 'putty', putty, false, false, false);
            J$.N(5065185, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, false, false);
            read = J$.N(5065201, 'read', J$.T(5065193, read, 12, false), true, false, false);
            findPuTTYHeader = J$.N(5065217, 'findPuTTYHeader', J$.T(5065209, findPuTTYHeader, 12, false), true, false, false);
            findSSHHeader = J$.N(5065233, 'findSSHHeader', J$.T(5065225, findSSHHeader, 12, false), true, false, false);
            findPEMHeader = J$.N(5065249, 'findPEMHeader', J$.T(5065241, findPEMHeader, 12, false), true, false, false);
            findDNSSECHeader = J$.N(5065265, 'findDNSSECHeader', J$.T(5065257, findDNSSECHeader, 12, false), true, false, false);
            write = J$.N(5065281, 'write', J$.T(5065273, write, 12, false), true, false, false);
            J$.P(5062169, J$.I(typeof module === 'undefined' ? module = J$.R(5062137, 'module', undefined, true, true) : module = J$.R(5062137, 'module', module, true, true)), 'exports', J$.T(5062161, {
                read: J$.R(5062145, 'read', read, false, true),
                write: J$.R(5062153, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(5062201, 'assert', J$.F(5062193, J$.I(typeof require === 'undefined' ? require = J$.R(5062177, 'require', undefined, true, true) : require = J$.R(5062177, 'require', require, true, true)), false)(J$.T(5062185, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5062241, 'Buffer', J$.G(5062233, J$.F(5062225, J$.I(typeof require === 'undefined' ? require = J$.R(5062209, 'require', undefined, true, true) : require = J$.R(5062209, 'require', require, true, true)), false)(J$.T(5062217, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var utils = J$.W(5062273, 'utils', J$.F(5062265, J$.I(typeof require === 'undefined' ? require = J$.R(5062249, 'require', undefined, true, true) : require = J$.R(5062249, 'require', require, true, true)), false)(J$.T(5062257, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(5062305, 'Key', J$.F(5062297, J$.I(typeof require === 'undefined' ? require = J$.R(5062281, 'require', undefined, true, true) : require = J$.R(5062281, 'require', require, true, true)), false)(J$.T(5062289, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5062337, 'PrivateKey', J$.F(5062329, J$.I(typeof require === 'undefined' ? require = J$.R(5062313, 'require', undefined, true, true) : require = J$.R(5062313, 'require', require, true, true)), false)(J$.T(5062321, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(5062369, 'pem', J$.F(5062361, J$.I(typeof require === 'undefined' ? require = J$.R(5062345, 'require', undefined, true, true) : require = J$.R(5062345, 'require', require, true, true)), false)(J$.T(5062353, './pem', 21, false)), pem, false, true);
            var ssh = J$.W(5062401, 'ssh', J$.F(5062393, J$.I(typeof require === 'undefined' ? require = J$.R(5062377, 'require', undefined, true, true) : require = J$.R(5062377, 'require', require, true, true)), false)(J$.T(5062385, './ssh', 21, false)), ssh, false, true);
            var rfc4253 = J$.W(5062433, 'rfc4253', J$.F(5062425, J$.I(typeof require === 'undefined' ? require = J$.R(5062409, 'require', undefined, true, true) : require = J$.R(5062409, 'require', require, true, true)), false)(J$.T(5062417, './rfc4253', 21, false)), rfc4253, false, true);
            var dnssec = J$.W(5062465, 'dnssec', J$.F(5062457, J$.I(typeof require === 'undefined' ? require = J$.R(5062441, 'require', undefined, true, true) : require = J$.R(5062441, 'require', require, true, true)), false)(J$.T(5062449, './dnssec', 21, false)), dnssec, false, true);
            var putty = J$.W(5062497, 'putty', J$.F(5062489, J$.I(typeof require === 'undefined' ? require = J$.R(5062473, 'require', undefined, true, true) : require = J$.R(5062473, 'require', require, true, true)), false)(J$.T(5062481, './putty', 21, false)), putty, false, true);
            var DNSSEC_PRIVKEY_HEADER_PREFIX = J$.W(5062513, 'DNSSEC_PRIVKEY_HEADER_PREFIX', J$.T(5062505, 'Private-key-format: v1', 21, false), DNSSEC_PRIVKEY_HEADER_PREFIX, false, true);
        } catch (J$e) {
            J$.Ex(5065385, J$e);
        } finally {
            if (J$.Sr(5065393))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

