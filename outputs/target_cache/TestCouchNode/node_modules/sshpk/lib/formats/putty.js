J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(5113361, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/putty.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5112273, arguments.callee, this, arguments);
                            arguments = J$.N(5112281, 'arguments', arguments, true, false, false);
                            buf = J$.N(5112289, 'buf', buf, true, false, false);
                            options = J$.N(5112297, 'options', options, true, false, false);
                            J$.N(5112305, 'lines', lines, false, false, false);
                            J$.N(5112313, 'found', found, false, false, false);
                            J$.N(5112321, 'parts', parts, false, false, false);
                            J$.N(5112329, 'si', si, false, false, false);
                            J$.N(5112337, 'alg', alg, false, false, false);
                            J$.N(5112345, 'comment', comment, false, false, false);
                            J$.N(5112353, 'publicLines', publicLines, false, false, false);
                            J$.N(5112361, 'publicBuf', publicBuf, false, false, false);
                            J$.N(5112369, 'keyType', keyType, false, false, false);
                            J$.N(5112377, 'key', key, false, false, false);
                            var lines = J$.W(5111273, 'lines', J$.M(5111265, J$.M(5111249, J$.R(5111233, 'buf', buf, false, false), 'toString', false)(J$.T(5111241, 'ascii', 21, false)), 'split', false)(J$.T(5111257, /[\r\n]+/, 14, false)), lines, false, false);
                            var found = J$.W(5111289, 'found', J$.T(5111281, false, 23, false), found, false, false);
                            var parts;
                            var si = J$.W(5111305, 'si', J$.T(5111297, 0, 22, false), si, false, false);
                            while (J$.C(273864, J$.B(588394, '<', J$.R(5111313, 'si', si, false, false), J$.G(5111329, J$.R(5111321, 'lines', lines, false, false), 'length')))) {
                                parts = J$.W(5111385, 'parts', J$.F(5111377, J$.R(5111337, 'splitHeader', splitHeader, false, true), false)(J$.G(5111369, J$.R(5111345, 'lines', lines, false, false), J$.B(588418, '-', si = J$.W(5111361, 'si', J$.B(588410, '+', J$.U(588402, '+', J$.R(5111353, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                                if (J$.C(273856, J$.C(273848, J$.R(5111393, 'parts', parts, false, false)) ? J$.B(588426, '===', J$.M(5111425, J$.G(5111417, J$.R(5111401, 'parts', parts, false, false), J$.T(5111409, 0, 22, false)), 'toLowerCase', false)(), J$.T(5111433, 'putty-user-key-file-2', 21, false)) : J$._())) {
                                    found = J$.W(5111449, 'found', J$.T(5111441, true, 23, false), found, false, false);
                                    break;
                                }
                            }
                            if (J$.C(273872, J$.U(588434, '!', J$.R(5111457, 'found', found, false, false)))) {
                                throw J$.F(5111481, J$.I(typeof Error === 'undefined' ? Error = J$.R(5111465, 'Error', undefined, true, true) : Error = J$.R(5111465, 'Error', Error, true, true)), true)(J$.T(5111473, 'No PuTTY format first line found', 21, false));
                            }
                            var alg = J$.W(5111513, 'alg', J$.G(5111505, J$.R(5111489, 'parts', parts, false, false), J$.T(5111497, 1, 22, false)), alg, false, false);
                            parts = J$.W(5111569, 'parts', J$.F(5111561, J$.R(5111521, 'splitHeader', splitHeader, false, true), false)(J$.G(5111553, J$.R(5111529, 'lines', lines, false, false), J$.B(588458, '-', si = J$.W(5111545, 'si', J$.B(588450, '+', J$.U(588442, '+', J$.R(5111537, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(5111625, J$.R(5111577, 'assert', assert, false, true), 'equal', false)(J$.M(5111609, J$.G(5111601, J$.R(5111585, 'parts', parts, false, false), J$.T(5111593, 0, 22, false)), 'toLowerCase', false)(), J$.T(5111617, 'encryption', 21, false));
                            parts = J$.W(5111681, 'parts', J$.F(5111673, J$.R(5111633, 'splitHeader', splitHeader, false, true), false)(J$.G(5111665, J$.R(5111641, 'lines', lines, false, false), J$.B(588482, '-', si = J$.W(5111657, 'si', J$.B(588474, '+', J$.U(588466, '+', J$.R(5111649, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(5111737, J$.R(5111689, 'assert', assert, false, true), 'equal', false)(J$.M(5111721, J$.G(5111713, J$.R(5111697, 'parts', parts, false, false), J$.T(5111705, 0, 22, false)), 'toLowerCase', false)(), J$.T(5111729, 'comment', 21, false));
                            var comment = J$.W(5111769, 'comment', J$.G(5111761, J$.R(5111745, 'parts', parts, false, false), J$.T(5111753, 1, 22, false)), comment, false, false);
                            parts = J$.W(5111825, 'parts', J$.F(5111817, J$.R(5111777, 'splitHeader', splitHeader, false, true), false)(J$.G(5111809, J$.R(5111785, 'lines', lines, false, false), J$.B(588506, '-', si = J$.W(5111801, 'si', J$.B(588498, '+', J$.U(588490, '+', J$.R(5111793, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(5111881, J$.R(5111833, 'assert', assert, false, true), 'equal', false)(J$.M(5111865, J$.G(5111857, J$.R(5111841, 'parts', parts, false, false), J$.T(5111849, 0, 22, false)), 'toLowerCase', false)(), J$.T(5111873, 'public-lines', 21, false));
                            var publicLines = J$.W(5111937, 'publicLines', J$.F(5111929, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(5111889, 'parseInt', undefined, true, true) : parseInt = J$.R(5111889, 'parseInt', parseInt, true, true)), false)(J$.G(5111913, J$.R(5111897, 'parts', parts, false, false), J$.T(5111905, 1, 22, false)), J$.T(5111921, 10, 22, false)), publicLines, false, false);
                            if (J$.C(273896, J$.C(273888, J$.C(273880, J$.U(588514, '!', J$.F(5111961, J$.I(typeof isFinite === 'undefined' ? isFinite = J$.R(5111945, 'isFinite', undefined, true, true) : isFinite = J$.R(5111945, 'isFinite', isFinite, true, true)), false)(J$.R(5111953, 'publicLines', publicLines, false, false)))) ? J$._() : J$.B(588522, '<', J$.R(5111969, 'publicLines', publicLines, false, false), J$.T(5111977, 0, 22, false))) ? J$._() : J$.B(588530, '>', J$.R(5111985, 'publicLines', publicLines, false, false), J$.G(5112001, J$.R(5111993, 'lines', lines, false, false), 'length')))) {
                                throw J$.F(5112025, J$.I(typeof Error === 'undefined' ? Error = J$.R(5112009, 'Error', undefined, true, true) : Error = J$.R(5112009, 'Error', Error, true, true)), true)(J$.T(5112017, 'Invalid public-lines count', 21, false));
                            }
                            var publicBuf = J$.W(5112113, 'publicBuf', J$.M(5112105, J$.R(5112033, 'Buffer', Buffer, false, true), 'from', false)(J$.M(5112089, J$.M(5112073, J$.R(5112041, 'lines', lines, false, false), 'slice', false)(J$.R(5112049, 'si', si, false, false), J$.B(588538, '+', J$.R(5112057, 'si', si, false, false), J$.R(5112065, 'publicLines', publicLines, false, false))), 'join', false)(J$.T(5112081, '', 21, false)), J$.T(5112097, 'base64', 21, false)), publicBuf, false, false);
                            var keyType = J$.W(5112145, 'keyType', J$.M(5112137, J$.R(5112121, 'rfc4253', rfc4253, false, true), 'algToKeyType', false)(J$.R(5112129, 'alg', alg, false, false)), keyType, false, false);
                            var key = J$.W(5112177, 'key', J$.M(5112169, J$.R(5112153, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(5112161, 'publicBuf', publicBuf, false, false)), key, false, false);
                            if (J$.C(273904, J$.B(588546, '!==', J$.G(5112193, J$.R(5112185, 'key', key, false, false), 'type'), J$.R(5112201, 'keyType', keyType, false, false)))) {
                                throw J$.F(5112225, J$.I(typeof Error === 'undefined' ? Error = J$.R(5112209, 'Error', undefined, true, true) : Error = J$.R(5112209, 'Error', Error, true, true)), true)(J$.T(5112217, 'Outer key algorithm mismatch', 21, false));
                            }
                            J$.P(5112249, J$.R(5112233, 'key', key, false, false), 'comment', J$.R(5112241, 'comment', comment, false, false));
                            return J$.Rt(5112265, J$.R(5112257, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(5113473, J$e);
                        } finally {
                            if (J$.Fr(5113481))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function splitHeader(line) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5112617, arguments.callee, this, arguments);
                            arguments = J$.N(5112625, 'arguments', arguments, true, false, false);
                            line = J$.N(5112633, 'line', line, true, false, false);
                            J$.N(5112641, 'idx', idx, false, false, false);
                            J$.N(5112649, 'header', header, false, false, false);
                            J$.N(5112657, 'rest', rest, false, false, false);
                            var idx = J$.W(5112409, 'idx', J$.M(5112401, J$.R(5112385, 'line', line, false, false), 'indexOf', false)(J$.T(5112393, ':', 21, false)), idx, false, false);
                            if (J$.C(273912, J$.B(588562, '===', J$.R(5112417, 'idx', idx, false, false), J$.U(588554, '-', J$.T(5112425, 1, 22, false)))))
                                return J$.Rt(5112441, J$.T(5112433, null, 25, false));
                            var header = J$.W(5112481, 'header', J$.M(5112473, J$.R(5112449, 'line', line, false, false), 'slice', false)(J$.T(5112457, 0, 22, false), J$.R(5112465, 'idx', idx, false, false)), header, false, false);
                            idx = J$.W(5112497, 'idx', J$.B(588578, '+', J$.U(588570, '+', J$.R(5112489, 'idx', idx, false, false)), 1), idx, false, false);
                            while (J$.C(273920, J$.B(588586, '===', J$.G(5112521, J$.R(5112505, 'line', line, false, false), J$.R(5112513, 'idx', idx, false, false)), J$.T(5112529, ' ', 21, false))))
                                idx = J$.W(5112545, 'idx', J$.B(588602, '+', J$.U(588594, '+', J$.R(5112537, 'idx', idx, false, false)), 1), idx, false, false);
                            var rest = J$.W(5112577, 'rest', J$.M(5112569, J$.R(5112553, 'line', line, false, false), 'slice', false)(J$.R(5112561, 'idx', idx, false, false)), rest, false, false);
                            return J$.Rt(5112609, J$.T(5112601, [
                                J$.R(5112585, 'header', header, false, false),
                                J$.R(5112593, 'rest', rest, false, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(5113489, J$e);
                        } finally {
                            if (J$.Fr(5113497))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5113089, arguments.callee, this, arguments);
                            arguments = J$.N(5113097, 'arguments', arguments, true, false, false);
                            key = J$.N(5113105, 'key', key, true, false, false);
                            options = J$.N(5113113, 'options', options, true, false, false);
                            J$.N(5113121, 'alg', alg, false, false, false);
                            J$.N(5113129, 'buf', buf, false, false, false);
                            J$.N(5113137, 'comment', comment, false, false, false);
                            J$.N(5113145, 'b64', b64, false, false, false);
                            J$.N(5113153, 'lines', lines, false, false, false);
                            J$.M(5112681, J$.R(5112665, 'assert', assert, false, true), 'object', false)(J$.R(5112673, 'key', key, false, false));
                            if (J$.C(273928, J$.U(588610, '!', J$.M(5112705, J$.R(5112689, 'Key', Key, false, true), 'isKey', false)(J$.R(5112697, 'key', key, false, false)))))
                                throw J$.F(5112729, J$.I(typeof Error === 'undefined' ? Error = J$.R(5112713, 'Error', undefined, true, true) : Error = J$.R(5112713, 'Error', Error, true, true)), true)(J$.T(5112721, 'Must be a public key', 21, false));
                            var alg = J$.W(5112761, 'alg', J$.M(5112753, J$.R(5112737, 'rfc4253', rfc4253, false, true), 'keyTypeToAlg', false)(J$.R(5112745, 'key', key, false, false)), alg, false, false);
                            var buf = J$.W(5112793, 'buf', J$.M(5112785, J$.R(5112769, 'rfc4253', rfc4253, false, true), 'write', false)(J$.R(5112777, 'key', key, false, false)), buf, false, false);
                            var comment = J$.W(5112825, 'comment', J$.C(273936, J$.G(5112809, J$.R(5112801, 'key', key, false, false), 'comment')) ? J$._() : J$.T(5112817, '', 21, false), comment, false, false);
                            var b64 = J$.W(5112857, 'b64', J$.M(5112849, J$.R(5112833, 'buf', buf, false, false), 'toString', false)(J$.T(5112841, 'base64', 21, false)), b64, false, false);
                            var lines = J$.W(5112897, 'lines', J$.F(5112889, J$.R(5112865, 'wrap', wrap, false, true), false)(J$.R(5112873, 'b64', b64, false, false), J$.T(5112881, 64, 22, false)), lines, false, false);
                            J$.M(5112937, J$.R(5112905, 'lines', lines, false, false), 'unshift', false)(J$.B(588618, '+', J$.T(5112913, 'Public-Lines: ', 21, false), J$.G(5112929, J$.R(5112921, 'lines', lines, false, false), 'length')));
                            J$.M(5112969, J$.R(5112945, 'lines', lines, false, false), 'unshift', false)(J$.B(588626, '+', J$.T(5112953, 'Comment: ', 21, false), J$.R(5112961, 'comment', comment, false, false)));
                            J$.M(5112993, J$.R(5112977, 'lines', lines, false, false), 'unshift', false)(J$.T(5112985, 'Encryption: none', 21, false));
                            J$.M(5113025, J$.R(5113001, 'lines', lines, false, false), 'unshift', false)(J$.B(588634, '+', J$.T(5113009, 'PuTTY-User-Key-File-2: ', 21, false), J$.R(5113017, 'alg', alg, false, false)));
                            return J$.Rt(5113081, J$.M(5113073, J$.R(5113033, 'Buffer', Buffer, false, true), 'from', false)(J$.B(588642, '+', J$.M(5113057, J$.R(5113041, 'lines', lines, false, false), 'join', false)(J$.T(5113049, '\n', 21, false)), J$.T(5113065, '\n', 21, false))));
                        } catch (J$e) {
                            J$.Ex(5113505, J$e);
                        } finally {
                            if (J$.Fr(5113513))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrap(txt, len) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5113313, arguments.callee, this, arguments);
                            arguments = J$.N(5113321, 'arguments', arguments, true, false, false);
                            txt = J$.N(5113329, 'txt', txt, true, false, false);
                            len = J$.N(5113337, 'len', len, true, false, false);
                            J$.N(5113345, 'lines', lines, false, false, false);
                            J$.N(5113353, 'pos', pos, false, false, false);
                            var lines = J$.W(5113169, 'lines', J$.T(5113161, [], 10, false), lines, false, false);
                            var pos = J$.W(5113185, 'pos', J$.T(5113177, 0, 22, false), pos, false, false);
                            while (J$.C(273944, J$.B(588650, '<', J$.R(5113193, 'pos', pos, false, false), J$.G(5113209, J$.R(5113201, 'txt', txt, false, false), 'length')))) {
                                J$.M(5113265, J$.R(5113217, 'lines', lines, false, false), 'push', false)(J$.M(5113257, J$.R(5113225, 'txt', txt, false, false), 'slice', false)(J$.R(5113233, 'pos', pos, false, false), J$.B(588658, '+', J$.R(5113241, 'pos', pos, false, false), J$.T(5113249, 64, 22, false))));
                                pos = J$.W(5113289, 'pos', J$.B(588666, '+', J$.R(5113281, 'pos', pos, false, false), J$.T(5113273, 64, 22, false)), pos, false, false);
                            }
                            return J$.Rt(5113305, J$.R(5113297, 'lines', lines, false, false));
                        } catch (J$e) {
                            J$.Ex(5113521, J$e);
                        } finally {
                            if (J$.Fr(5113529))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5113369, 'assert', assert, false, false, false);
            J$.N(5113377, 'Buffer', Buffer, false, false, false);
            J$.N(5113385, 'rfc4253', rfc4253, false, false, false);
            J$.N(5113393, 'Key', Key, false, false, false);
            J$.N(5113401, 'errors', errors, false, false, false);
            read = J$.N(5113417, 'read', J$.T(5113409, read, 12, false), true, false, false);
            splitHeader = J$.N(5113433, 'splitHeader', J$.T(5113425, splitHeader, 12, false), true, false, false);
            write = J$.N(5113449, 'write', J$.T(5113441, write, 12, false), true, false, false);
            wrap = J$.N(5113465, 'wrap', J$.T(5113457, wrap, 12, false), true, false, false);
            J$.P(5111057, J$.I(typeof module === 'undefined' ? module = J$.R(5111025, 'module', undefined, true, true) : module = J$.R(5111025, 'module', module, true, true)), 'exports', J$.T(5111049, {
                read: J$.R(5111033, 'read', read, false, true),
                write: J$.R(5111041, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(5111089, 'assert', J$.F(5111081, J$.I(typeof require === 'undefined' ? require = J$.R(5111065, 'require', undefined, true, true) : require = J$.R(5111065, 'require', require, true, true)), false)(J$.T(5111073, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5111129, 'Buffer', J$.G(5111121, J$.F(5111113, J$.I(typeof require === 'undefined' ? require = J$.R(5111097, 'require', undefined, true, true) : require = J$.R(5111097, 'require', require, true, true)), false)(J$.T(5111105, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var rfc4253 = J$.W(5111161, 'rfc4253', J$.F(5111153, J$.I(typeof require === 'undefined' ? require = J$.R(5111137, 'require', undefined, true, true) : require = J$.R(5111137, 'require', require, true, true)), false)(J$.T(5111145, './rfc4253', 21, false)), rfc4253, false, true);
            var Key = J$.W(5111193, 'Key', J$.F(5111185, J$.I(typeof require === 'undefined' ? require = J$.R(5111169, 'require', undefined, true, true) : require = J$.R(5111169, 'require', require, true, true)), false)(J$.T(5111177, '../key', 21, false)), Key, false, true);
            var errors = J$.W(5111225, 'errors', J$.F(5111217, J$.I(typeof require === 'undefined' ? require = J$.R(5111201, 'require', undefined, true, true) : require = J$.R(5111201, 'require', require, true, true)), false)(J$.T(5111209, '../errors', 21, false)), errors, false, true);
        } catch (J$e) {
            J$.Ex(5113537, J$e);
        } finally {
            if (J$.Sr(5113545))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

