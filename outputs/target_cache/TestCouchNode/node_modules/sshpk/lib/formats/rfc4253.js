J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(5117153, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/rfc4253.js');
            function algToKeyType(alg) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5114169, arguments.callee, this, arguments);
                            arguments = J$.N(5114177, 'arguments', arguments, true, false, false);
                            alg = J$.N(5114185, 'alg', alg, true, false, false);
                            J$.M(5113961, J$.R(5113945, 'assert', assert, false, true), 'string', false)(J$.R(5113953, 'alg', alg, false, false));
                            if (J$.C(273984, J$.B(588674, '===', J$.R(5113969, 'alg', alg, false, false), J$.T(5113977, 'ssh-dss', 21, false))))
                                return J$.Rt(5113993, J$.T(5113985, 'dsa', 21, false));
                            else if (J$.C(273976, J$.B(588682, '===', J$.R(5114001, 'alg', alg, false, false), J$.T(5114009, 'ssh-rsa', 21, false))))
                                return J$.Rt(5114025, J$.T(5114017, 'rsa', 21, false));
                            else if (J$.C(273968, J$.B(588690, '===', J$.R(5114033, 'alg', alg, false, false), J$.T(5114041, 'ssh-ed25519', 21, false))))
                                return J$.Rt(5114057, J$.T(5114049, 'ed25519', 21, false));
                            else if (J$.C(273960, J$.B(588698, '===', J$.R(5114065, 'alg', alg, false, false), J$.T(5114073, 'ssh-curve25519', 21, false))))
                                return J$.Rt(5114089, J$.T(5114081, 'curve25519', 21, false));
                            else if (J$.C(273952, J$.M(5114113, J$.R(5114097, 'alg', alg, false, false), 'match', false)(J$.T(5114105, /^ecdsa-sha2-/, 14, false))))
                                return J$.Rt(5114129, J$.T(5114121, 'ecdsa', 21, false));
                            else
                                throw J$.F(5114161, J$.I(typeof Error === 'undefined' ? Error = J$.R(5114137, 'Error', undefined, true, true) : Error = J$.R(5114137, 'Error', Error, true, true)), true)(J$.B(588706, '+', J$.T(5114145, 'Unknown algorithm ', 21, false), J$.R(5114153, 'alg', alg, false, false)));
                        } catch (J$e) {
                            J$.Ex(5117281, J$e);
                        } finally {
                            if (J$.Fr(5117289))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function keyTypeToAlg(key) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5114497, arguments.callee, this, arguments);
                            arguments = J$.N(5114505, 'arguments', arguments, true, false, false);
                            key = J$.N(5114513, 'key', key, true, false, false);
                            J$.M(5114209, J$.R(5114193, 'assert', assert, false, true), 'object', false)(J$.R(5114201, 'key', key, false, false));
                            if (J$.C(274024, J$.B(588714, '===', J$.G(5114225, J$.R(5114217, 'key', key, false, false), 'type'), J$.T(5114233, 'dsa', 21, false))))
                                return J$.Rt(5114249, J$.T(5114241, 'ssh-dss', 21, false));
                            else if (J$.C(274016, J$.B(588722, '===', J$.G(5114265, J$.R(5114257, 'key', key, false, false), 'type'), J$.T(5114273, 'rsa', 21, false))))
                                return J$.Rt(5114289, J$.T(5114281, 'ssh-rsa', 21, false));
                            else if (J$.C(274008, J$.B(588730, '===', J$.G(5114305, J$.R(5114297, 'key', key, false, false), 'type'), J$.T(5114313, 'ed25519', 21, false))))
                                return J$.Rt(5114329, J$.T(5114321, 'ssh-ed25519', 21, false));
                            else if (J$.C(274000, J$.B(588738, '===', J$.G(5114345, J$.R(5114337, 'key', key, false, false), 'type'), J$.T(5114353, 'curve25519', 21, false))))
                                return J$.Rt(5114369, J$.T(5114361, 'ssh-curve25519', 21, false));
                            else if (J$.C(273992, J$.B(588746, '===', J$.G(5114385, J$.R(5114377, 'key', key, false, false), 'type'), J$.T(5114393, 'ecdsa', 21, false))))
                                return J$.Rt(5114449, J$.B(588754, '+', J$.T(5114401, 'ecdsa-sha2-', 21, false), J$.M(5114441, J$.G(5114433, J$.G(5114425, J$.G(5114417, J$.R(5114409, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)()));
                            else
                                throw J$.F(5114489, J$.I(typeof Error === 'undefined' ? Error = J$.R(5114457, 'Error', undefined, true, true) : Error = J$.R(5114457, 'Error', Error, true, true)), true)(J$.B(588762, '+', J$.T(5114465, 'Unknown key type ', 21, false), J$.G(5114481, J$.R(5114473, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(5117297, J$e);
                        } finally {
                            if (J$.Fr(5117305))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(partial, type, buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5116257, arguments.callee, this, arguments);
                            arguments = J$.N(5116265, 'arguments', arguments, true, false, false);
                            partial = J$.N(5116273, 'partial', partial, true, false, false);
                            type = J$.N(5116281, 'type', type, true, false, false);
                            buf = J$.N(5116289, 'buf', buf, true, false, false);
                            options = J$.N(5116297, 'options', options, true, false, false);
                            J$.N(5116305, 'key', key, false, false, false);
                            J$.N(5116313, 'parts', parts, false, false, false);
                            J$.N(5116321, 'sshbuf', sshbuf, false, false, false);
                            J$.N(5116329, 'alg', alg, false, false, false);
                            J$.N(5116337, 'partCount', partCount, false, false, false);
                            J$.N(5116345, 'Constructor', Constructor, false, false, false);
                            J$.N(5116353, 'algInfo', algInfo, false, false, false);
                            J$.N(5116361, 'res', res, false, false, false);
                            J$.N(5116369, 'normalized', normalized, false, false, false);
                            J$.N(5116377, 'i', i, false, false, false);
                            J$.N(5116385, 'p', p, false, false, false);
                            J$.N(5116393, 'nd', nd, false, false, false);
                            if (J$.C(274032, J$.B(588778, '===', J$.U(588770, 'typeof', J$.R(5114521, 'buf', buf, false, false)), J$.T(5114529, 'string', 21, false))))
                                buf = J$.W(5114561, 'buf', J$.M(5114553, J$.R(5114537, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5114545, 'buf', buf, false, false)), buf, false, false);
                            J$.M(5114593, J$.R(5114569, 'assert', assert, false, true), 'buffer', false)(J$.R(5114577, 'buf', buf, false, false), J$.T(5114585, 'buf', 21, false));
                            var key = J$.W(5114609, 'key', J$.T(5114601, {}, 11, false), key, false, false);
                            var parts = J$.W(5114641, 'parts', J$.P(5114633, J$.R(5114617, 'key', key, false, false), 'parts', J$.T(5114625, [], 10, false)), parts, false, false);
                            var sshbuf = J$.W(5114681, 'sshbuf', J$.F(5114673, J$.R(5114649, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5114665, { buffer: J$.R(5114657, 'buf', buf, false, false) }, 11, false)), sshbuf, false, false);
                            var alg = J$.W(5114705, 'alg', J$.M(5114697, J$.R(5114689, 'sshbuf', sshbuf, false, false), 'readString', false)(), alg, false, false);
                            J$.M(5114745, J$.R(5114713, 'assert', assert, false, true), 'ok', false)(J$.U(588786, '!', J$.M(5114729, J$.R(5114721, 'sshbuf', sshbuf, false, false), 'atEnd', false)()), J$.T(5114737, 'key must have at least one part', 21, false));
                            J$.P(5114785, J$.R(5114753, 'key', key, false, false), 'type', J$.F(5114777, J$.R(5114761, 'algToKeyType', algToKeyType, false, true), false)(J$.R(5114769, 'alg', alg, false, false)));
                            var partCount = J$.W(5114849, 'partCount', J$.G(5114841, J$.G(5114833, J$.G(5114825, J$.G(5114801, J$.R(5114793, 'algs', algs, false, true), 'info'), J$.G(5114817, J$.R(5114809, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            if (J$.C(274048, J$.C(274040, J$.R(5114857, 'type', type, false, false)) ? J$.B(588794, '===', J$.R(5114865, 'type', type, false, false), J$.T(5114873, 'private', 21, false)) : J$._()))
                                partCount = J$.W(5114937, 'partCount', J$.G(5114929, J$.G(5114921, J$.G(5114913, J$.G(5114889, J$.R(5114881, 'algs', algs, false, true), 'privInfo'), J$.G(5114905, J$.R(5114897, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(274064, J$.C(274056, J$.U(588802, '!', J$.M(5114953, J$.R(5114945, 'sshbuf', sshbuf, false, false), 'atEnd', false)())) ? J$.B(588810, '<', J$.G(5114969, J$.R(5114961, 'parts', parts, false, false), 'length'), J$.R(5114977, 'partCount', partCount, false, false)) : J$._()))
                                J$.M(5115009, J$.R(5114985, 'parts', parts, false, false), 'push', false)(J$.M(5115001, J$.R(5114993, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            while (J$.C(274080, J$.C(274072, J$.U(588818, '!', J$.R(5115017, 'partial', partial, false, false))) ? J$.U(588826, '!', J$.M(5115033, J$.R(5115025, 'sshbuf', sshbuf, false, false), 'atEnd', false)()) : J$._()))
                                J$.M(5115065, J$.R(5115041, 'parts', parts, false, false), 'push', false)(J$.M(5115057, J$.R(5115049, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            J$.M(5115113, J$.R(5115073, 'assert', assert, false, true), 'ok', false)(J$.B(588834, '>=', J$.G(5115089, J$.R(5115081, 'parts', parts, false, false), 'length'), J$.T(5115097, 1, 22, false)), J$.T(5115105, 'key must have at least one part', 21, false));
                            J$.M(5115161, J$.R(5115121, 'assert', assert, false, true), 'ok', false)(J$.C(274088, J$.R(5115129, 'partial', partial, false, false)) ? J$._() : J$.M(5115145, J$.R(5115137, 'sshbuf', sshbuf, false, false), 'atEnd', false)(), J$.T(5115153, 'leftover bytes at end of key', 21, false));
                            var Constructor = J$.W(5115177, 'Constructor', J$.R(5115169, 'Key', Key, false, true), Constructor, false, false);
                            var algInfo = J$.W(5115225, 'algInfo', J$.G(5115217, J$.G(5115193, J$.R(5115185, 'algs', algs, false, true), 'info'), J$.G(5115209, J$.R(5115201, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(274104, J$.C(274096, J$.B(588842, '===', J$.R(5115233, 'type', type, false, false), J$.T(5115241, 'private', 21, false))) ? J$._() : J$.B(588850, '!==', J$.G(5115265, J$.G(5115257, J$.R(5115249, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(5115281, J$.R(5115273, 'parts', parts, false, false), 'length')))) {
                                algInfo = J$.W(5115329, 'algInfo', J$.G(5115321, J$.G(5115297, J$.R(5115289, 'algs', algs, false, true), 'privInfo'), J$.G(5115313, J$.R(5115305, 'key', key, false, false), 'type')), algInfo, false, false);
                                Constructor = J$.W(5115345, 'Constructor', J$.R(5115337, 'PrivateKey', PrivateKey, false, true), Constructor, false, false);
                            }
                            J$.M(5115401, J$.R(5115353, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5115377, J$.G(5115369, J$.R(5115361, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(5115393, J$.R(5115385, 'parts', parts, false, false), 'length'));
                            if (J$.C(274112, J$.B(588858, '===', J$.G(5115417, J$.R(5115409, 'key', key, false, false), 'type'), J$.T(5115425, 'ecdsa', 21, false)))) {
                                var res = J$.W(5115457, 'res', J$.M(5115449, J$.T(5115433, /^ecdsa-sha2-(.+)$/, 14, false), 'exec', false)(J$.R(5115441, 'alg', alg, false, false)), res, false, false);
                                J$.M(5115489, J$.R(5115465, 'assert', assert, false, true), 'ok', false)(J$.B(588866, '!==', J$.R(5115473, 'res', res, false, false), J$.T(5115481, null, 25, false)));
                                J$.M(5115569, J$.R(5115497, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5115521, J$.R(5115505, 'res', res, false, false), J$.T(5115513, 1, 22, false)), J$.M(5115561, J$.G(5115553, J$.G(5115545, J$.R(5115529, 'parts', parts, false, false), J$.T(5115537, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            var normalized = J$.W(5115585, 'normalized', J$.T(5115577, true, 23, false), normalized, false, false);
                            for (var i = J$.W(5115601, 'i', J$.T(5115593, 0, 22, false), i, false, false); J$.C(274168, J$.B(588874, '<', J$.R(5115609, 'i', i, false, false), J$.G(5115633, J$.G(5115625, J$.R(5115617, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(5115649, 'i', J$.B(588890, '+', J$.U(588882, '+', J$.R(5115641, 'i', i, false, false)), 1), i, false, false)) {
                                var p = J$.W(5115681, 'p', J$.G(5115673, J$.R(5115657, 'parts', parts, false, false), J$.R(5115665, 'i', i, false, false)), p, false, false);
                                J$.P(5115729, J$.R(5115689, 'p', p, false, false), 'name', J$.G(5115721, J$.G(5115705, J$.R(5115697, 'algInfo', algInfo, false, false), 'parts'), J$.R(5115713, 'i', i, false, false)));
                                if (J$.C(274128, J$.C(274120, J$.B(588898, '===', J$.G(5115745, J$.R(5115737, 'key', key, false, false), 'type'), J$.T(5115753, 'ed25519', 21, false))) ? J$.B(588906, '===', J$.G(5115769, J$.R(5115761, 'p', p, false, false), 'name'), J$.T(5115777, 'k', 21, false)) : J$._()))
                                    J$.P(5115833, J$.R(5115785, 'p', p, false, false), 'data', J$.M(5115825, J$.G(5115801, J$.R(5115793, 'p', p, false, false), 'data'), 'slice', false)(J$.T(5115809, 0, 22, false), J$.T(5115817, 32, 22, false)));
                                if (J$.C(274160, J$.C(274136, J$.B(588914, '!==', J$.G(5115849, J$.R(5115841, 'p', p, false, false), 'name'), J$.T(5115857, 'curve', 21, false))) ? J$.B(588922, '!==', J$.G(5115873, J$.R(5115865, 'algInfo', algInfo, false, false), 'normalize'), J$.T(5115881, false, 23, false)) : J$._())) {
                                    var nd;
                                    if (J$.C(274144, J$.B(588930, '===', J$.G(5115897, J$.R(5115889, 'key', key, false, false), 'type'), J$.T(5115905, 'ed25519', 21, false)))) {
                                        nd = J$.W(5115953, 'nd', J$.M(5115945, J$.R(5115913, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.G(5115929, J$.R(5115921, 'p', p, false, false), 'data'), J$.T(5115937, 32, 22, false)), nd, false, false);
                                    } else {
                                        nd = J$.W(5115993, 'nd', J$.M(5115985, J$.R(5115961, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5115977, J$.R(5115969, 'p', p, false, false), 'data')), nd, false, false);
                                    }
                                    if (J$.C(274152, J$.B(588938, '!==', J$.M(5116017, J$.R(5116001, 'nd', nd, false, false), 'toString', false)(J$.T(5116009, 'binary', 21, false)), J$.M(5116049, J$.G(5116033, J$.R(5116025, 'p', p, false, false), 'data'), 'toString', false)(J$.T(5116041, 'binary', 21, false))))) {
                                        J$.P(5116073, J$.R(5116057, 'p', p, false, false), 'data', J$.R(5116065, 'nd', nd, false, false));
                                        normalized = J$.W(5116089, 'normalized', J$.T(5116081, false, 23, false), normalized, false, false);
                                    }
                                }
                            }
                            if (J$.C(274176, J$.R(5116097, 'normalized', normalized, false, false)))
                                J$.P(5116129, J$.R(5116105, 'key', key, false, false), '_rfc4253Cache', J$.M(5116121, J$.R(5116113, 'sshbuf', sshbuf, false, false), 'toBuffer', false)());
                            if (J$.C(274192, J$.C(274184, J$.R(5116137, 'partial', partial, false, false)) ? J$.B(588954, '===', J$.U(588946, 'typeof', J$.R(5116145, 'partial', partial, false, false)), J$.T(5116153, 'object', 21, false)) : J$._())) {
                                J$.P(5116185, J$.R(5116161, 'partial', partial, false, false), 'remainder', J$.M(5116177, J$.R(5116169, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(5116217, J$.R(5116193, 'partial', partial, false, false), 'consumed', J$.G(5116209, J$.R(5116201, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(5116249, J$.F(5116241, J$.R(5116225, 'Constructor', Constructor, false, false), true)(J$.R(5116233, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5117313, J$e);
                        } finally {
                            if (J$.Fr(5117321))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5117073, arguments.callee, this, arguments);
                            arguments = J$.N(5117081, 'arguments', arguments, true, false, false);
                            key = J$.N(5117089, 'key', key, true, false, false);
                            options = J$.N(5117097, 'options', options, true, false, false);
                            J$.N(5117105, 'alg', alg, false, false, false);
                            J$.N(5117113, 'i', i, false, false, false);
                            J$.N(5117121, 'algInfo', algInfo, false, false, false);
                            J$.N(5117129, 'parts', parts, false, false, false);
                            J$.N(5117137, 'buf', buf, false, false, false);
                            J$.N(5117145, 'data', data, false, false, false);
                            J$.M(5116417, J$.R(5116401, 'assert', assert, false, true), 'object', false)(J$.R(5116409, 'key', key, false, false));
                            var alg = J$.W(5116449, 'alg', J$.F(5116441, J$.R(5116425, 'keyTypeToAlg', keyTypeToAlg, false, true), false)(J$.R(5116433, 'key', key, false, false)), alg, false, false);
                            var i;
                            var algInfo = J$.W(5116497, 'algInfo', J$.G(5116489, J$.G(5116465, J$.R(5116457, 'algs', algs, false, true), 'info'), J$.G(5116481, J$.R(5116473, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(274200, J$.M(5116521, J$.R(5116505, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5116513, 'key', key, false, false))))
                                algInfo = J$.W(5116569, 'algInfo', J$.G(5116561, J$.G(5116537, J$.R(5116529, 'algs', algs, false, true), 'privInfo'), J$.G(5116553, J$.R(5116545, 'key', key, false, false), 'type')), algInfo, false, false);
                            var parts = J$.W(5116593, 'parts', J$.G(5116585, J$.R(5116577, 'algInfo', algInfo, false, false), 'parts'), parts, false, false);
                            var buf = J$.W(5116625, 'buf', J$.F(5116617, J$.R(5116601, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5116609, {}, 11, false)), buf, false, false);
                            J$.M(5116649, J$.R(5116633, 'buf', buf, false, false), 'writeString', false)(J$.R(5116641, 'alg', alg, false, false));
                            for (i = J$.W(5116665, 'i', J$.T(5116657, 0, 22, false), i, false, false); J$.C(274240, J$.B(588962, '<', J$.R(5116673, 'i', i, false, false), J$.G(5116689, J$.R(5116681, 'parts', parts, false, false), 'length'))); i = J$.W(5116705, 'i', J$.B(588978, '+', J$.U(588970, '+', J$.R(5116697, 'i', i, false, false)), 1), i, false, false)) {
                                var data = J$.W(5116769, 'data', J$.G(5116761, J$.G(5116753, J$.G(5116721, J$.R(5116713, 'key', key, false, false), 'part'), J$.G(5116745, J$.R(5116729, 'parts', parts, false, false), J$.R(5116737, 'i', i, false, false))), 'data'), data, false, false);
                                if (J$.C(274216, J$.B(588986, '!==', J$.G(5116785, J$.R(5116777, 'algInfo', algInfo, false, false), 'normalize'), J$.T(5116793, false, 23, false)))) {
                                    if (J$.C(274208, J$.B(588994, '===', J$.G(5116809, J$.R(5116801, 'key', key, false, false), 'type'), J$.T(5116817, 'ed25519', 21, false))))
                                        data = J$.W(5116857, 'data', J$.M(5116849, J$.R(5116825, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(5116833, 'data', data, false, false), J$.T(5116841, 32, 22, false)), data, false, false);
                                    else
                                        data = J$.W(5116889, 'data', J$.M(5116881, J$.R(5116865, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(5116873, 'data', data, false, false)), data, false, false);
                                }
                                if (J$.C(274232, J$.C(274224, J$.B(589002, '===', J$.G(5116905, J$.R(5116897, 'key', key, false, false), 'type'), J$.T(5116913, 'ed25519', 21, false))) ? J$.B(589010, '===', J$.G(5116937, J$.R(5116921, 'parts', parts, false, false), J$.R(5116929, 'i', i, false, false)), J$.T(5116945, 'k', 21, false)) : J$._()))
                                    data = J$.W(5117017, 'data', J$.M(5117009, J$.R(5116953, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(5117001, [
                                        J$.R(5116961, 'data', data, false, false),
                                        J$.G(5116993, J$.G(5116985, J$.G(5116977, J$.R(5116969, 'key', key, false, false), 'part'), 'A'), 'data')
                                    ], 10, false)), data, false, false);
                                J$.M(5117041, J$.R(5117025, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(5117033, 'data', data, false, false));
                            }
                            return J$.Rt(5117065, J$.M(5117057, J$.R(5117049, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(5117329, J$e);
                        } finally {
                            if (J$.Fr(5117337))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5117161, 'assert', assert, false, false, false);
            J$.N(5117169, 'Buffer', Buffer, false, false, false);
            J$.N(5117177, 'algs', algs, false, false, false);
            J$.N(5117185, 'utils', utils, false, false, false);
            J$.N(5117193, 'Key', Key, false, false, false);
            J$.N(5117201, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5117209, 'SSHBuffer', SSHBuffer, false, false, false);
            algToKeyType = J$.N(5117225, 'algToKeyType', J$.T(5117217, algToKeyType, 12, false), true, false, false);
            keyTypeToAlg = J$.N(5117241, 'keyTypeToAlg', J$.T(5117233, keyTypeToAlg, 12, false), true, false, false);
            read = J$.N(5117257, 'read', J$.T(5117249, read, 12, false), true, false, false);
            write = J$.N(5117273, 'write', J$.T(5117265, write, 12, false), true, false, false);
            J$.P(5113705, J$.I(typeof module === 'undefined' ? module = J$.R(5113553, 'module', undefined, true, true) : module = J$.R(5113553, 'module', module, true, true)), 'exports', J$.T(5113697, {
                read: J$.M(5113593, J$.R(5113561, 'read', read, false, true), 'bind', false)(J$.T(5113569, undefined, 24, false), J$.T(5113577, false, 23, false), J$.T(5113585, undefined, 24, false)),
                readType: J$.M(5113625, J$.R(5113601, 'read', read, false, true), 'bind', false)(J$.T(5113609, undefined, 24, false), J$.T(5113617, false, 23, false)),
                write: J$.R(5113633, 'write', write, false, true),
                readPartial: J$.M(5113665, J$.R(5113641, 'read', read, false, true), 'bind', false)(J$.T(5113649, undefined, 24, false), J$.T(5113657, true, 23, false)),
                readInternal: J$.R(5113673, 'read', read, false, true),
                keyTypeToAlg: J$.R(5113681, 'keyTypeToAlg', keyTypeToAlg, false, true),
                algToKeyType: J$.R(5113689, 'algToKeyType', algToKeyType, false, true)
            }, 11, false));
            var assert = J$.W(5113737, 'assert', J$.F(5113729, J$.I(typeof require === 'undefined' ? require = J$.R(5113713, 'require', undefined, true, true) : require = J$.R(5113713, 'require', require, true, true)), false)(J$.T(5113721, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5113777, 'Buffer', J$.G(5113769, J$.F(5113761, J$.I(typeof require === 'undefined' ? require = J$.R(5113745, 'require', undefined, true, true) : require = J$.R(5113745, 'require', require, true, true)), false)(J$.T(5113753, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5113809, 'algs', J$.F(5113801, J$.I(typeof require === 'undefined' ? require = J$.R(5113785, 'require', undefined, true, true) : require = J$.R(5113785, 'require', require, true, true)), false)(J$.T(5113793, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(5113841, 'utils', J$.F(5113833, J$.I(typeof require === 'undefined' ? require = J$.R(5113817, 'require', undefined, true, true) : require = J$.R(5113817, 'require', require, true, true)), false)(J$.T(5113825, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(5113873, 'Key', J$.F(5113865, J$.I(typeof require === 'undefined' ? require = J$.R(5113849, 'require', undefined, true, true) : require = J$.R(5113849, 'require', require, true, true)), false)(J$.T(5113857, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5113905, 'PrivateKey', J$.F(5113897, J$.I(typeof require === 'undefined' ? require = J$.R(5113881, 'require', undefined, true, true) : require = J$.R(5113881, 'require', require, true, true)), false)(J$.T(5113889, '../private-key', 21, false)), PrivateKey, false, true);
            var SSHBuffer = J$.W(5113937, 'SSHBuffer', J$.F(5113929, J$.I(typeof require === 'undefined' ? require = J$.R(5113913, 'require', undefined, true, true) : require = J$.R(5113913, 'require', require, true, true)), false)(J$.T(5113921, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
        } catch (J$e) {
            J$.Ex(5117345, J$e);
        } finally {
            if (J$.Sr(5117353))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

