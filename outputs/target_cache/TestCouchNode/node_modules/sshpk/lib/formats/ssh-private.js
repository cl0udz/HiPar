J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(5122977, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/ssh-private.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5117841, arguments.callee, this, arguments);
                            arguments = J$.N(5117849, 'arguments', arguments, true, false, false);
                            buf = J$.N(5117857, 'buf', buf, true, false, false);
                            options = J$.N(5117865, 'options', options, true, false, false);
                            return J$.Rt(5117833, J$.M(5117825, J$.R(5117801, 'pem', pem, false, true), 'read', false)(J$.R(5117809, 'buf', buf, false, false), J$.R(5117817, 'options', options, false, false)));
                        } catch (J$e) {
                            J$.Ex(5123145, J$e);
                        } finally {
                            if (J$.Fr(5123153))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readSSHPrivate(type, buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5119841, arguments.callee, this, arguments);
                            arguments = J$.N(5119849, 'arguments', arguments, true, false, false);
                            type = J$.N(5119857, 'type', type, true, false, false);
                            buf = J$.N(5119865, 'buf', buf, true, false, false);
                            options = J$.N(5119873, 'options', options, true, false, false);
                            J$.N(5119881, 'magic', magic, false, false, false);
                            J$.N(5119889, 'cipher', cipher, false, false, false);
                            J$.N(5119897, 'kdf', kdf, false, false, false);
                            J$.N(5119905, 'kdfOpts', kdfOpts, false, false, false);
                            J$.N(5119913, 'nkeys', nkeys, false, false, false);
                            J$.N(5119921, 'pubKey', pubKey, false, false, false);
                            J$.N(5119929, 'privKeyBlob', privKeyBlob, false, false, false);
                            J$.N(5119937, 'kdfOptsBuf', kdfOptsBuf, false, false, false);
                            J$.N(5119945, 'salt', salt, false, false, false);
                            J$.N(5119953, 'rounds', rounds, false, false, false);
                            J$.N(5119961, 'cinf', cinf, false, false, false);
                            J$.N(5119969, 'pass', pass, false, false, false);
                            J$.N(5119977, 'salti', salti, false, false, false);
                            J$.N(5119985, 'out', out, false, false, false);
                            J$.N(5119993, 'res', res, false, false, false);
                            J$.N(5120001, 'ckey', ckey, false, false, false);
                            J$.N(5120009, 'iv', iv, false, false, false);
                            J$.N(5120017, 'cipherStream', cipherStream, false, false, false);
                            J$.N(5120025, 'chunk', chunk, false, false, false);
                            J$.N(5120033, 'chunks', chunks, false, false, false);
                            J$.N(5120041, 'checkInt1', checkInt1, false, false, false);
                            J$.N(5120049, 'checkInt2', checkInt2, false, false, false);
                            J$.N(5120057, 'ret', ret, false, false, false);
                            J$.N(5120065, 'key', key, false, false, false);
                            J$.N(5120073, 'comment', comment, false, false, false);
                            buf = J$.W(5117921, 'buf', J$.F(5117913, J$.R(5117889, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5117905, { buffer: J$.R(5117897, 'buf', buf, false, false) }, 11, false)), buf, false, false);
                            var magic = J$.W(5117945, 'magic', J$.M(5117937, J$.R(5117929, 'buf', buf, false, false), 'readCString', false)(), magic, false, false);
                            J$.M(5117985, J$.R(5117953, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5117961, 'magic', magic, false, false), J$.R(5117969, 'MAGIC', MAGIC, false, true), J$.T(5117977, 'bad magic string', 21, false));
                            var cipher = J$.W(5118009, 'cipher', J$.M(5118001, J$.R(5117993, 'buf', buf, false, false), 'readString', false)(), cipher, false, false);
                            var kdf = J$.W(5118033, 'kdf', J$.M(5118025, J$.R(5118017, 'buf', buf, false, false), 'readString', false)(), kdf, false, false);
                            var kdfOpts = J$.W(5118057, 'kdfOpts', J$.M(5118049, J$.R(5118041, 'buf', buf, false, false), 'readBuffer', false)(), kdfOpts, false, false);
                            var nkeys = J$.W(5118081, 'nkeys', J$.M(5118073, J$.R(5118065, 'buf', buf, false, false), 'readInt', false)(), nkeys, false, false);
                            if (J$.C(274248, J$.B(589018, '!==', J$.R(5118089, 'nkeys', nkeys, false, false), J$.T(5118097, 1, 22, false)))) {
                                throw J$.F(5118129, J$.I(typeof Error === 'undefined' ? Error = J$.R(5118105, 'Error', undefined, true, true) : Error = J$.R(5118105, 'Error', Error, true, true)), true)(J$.B(589026, '+', J$.T(5118113, 'OpenSSH-format key file contains ', 21, false), J$.T(5118121, 'multiple keys: this is unsupported.', 21, false)));
                            }
                            var pubKey = J$.W(5118153, 'pubKey', J$.M(5118145, J$.R(5118137, 'buf', buf, false, false), 'readBuffer', false)(), pubKey, false, false);
                            if (J$.C(274256, J$.B(589034, '===', J$.R(5118161, 'type', type, false, false), J$.T(5118169, 'public', 21, false)))) {
                                J$.M(5118209, J$.R(5118177, 'assert', assert, false, true), 'ok', false)(J$.M(5118193, J$.R(5118185, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5118201, 'excess bytes left after key', 21, false));
                                return J$.Rt(5118241, J$.M(5118233, J$.R(5118217, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(5118225, 'pubKey', pubKey, false, false)));
                            }
                            var privKeyBlob = J$.W(5118265, 'privKeyBlob', J$.M(5118257, J$.R(5118249, 'buf', buf, false, false), 'readBuffer', false)(), privKeyBlob, false, false);
                            J$.M(5118305, J$.R(5118273, 'assert', assert, false, true), 'ok', false)(J$.M(5118289, J$.R(5118281, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5118297, 'excess bytes left after key', 21, false));
                            var kdfOptsBuf = J$.W(5118345, 'kdfOptsBuf', J$.F(5118337, J$.R(5118313, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5118329, { buffer: J$.R(5118321, 'kdfOpts', kdfOpts, false, false) }, 11, false)), kdfOptsBuf, false, false);
                            switch (J$.C1(274320, J$.R(5118353, 'kdf', kdf, false, false))) {
                            case J$.C2(274328, J$.T(5118409, 'none', 21, false)):
                                if (J$.C(274264, J$.B(589042, '!==', J$.R(5118361, 'cipher', cipher, false, false), J$.T(5118369, 'none', 21, false)))) {
                                    throw J$.F(5118401, J$.I(typeof Error === 'undefined' ? Error = J$.R(5118377, 'Error', undefined, true, true) : Error = J$.R(5118377, 'Error', Error, true, true)), true)(J$.B(589050, '+', J$.T(5118385, 'OpenSSH-format key uses KDF "none" ', 21, false), J$.T(5118393, 'but specifies a cipher other than "none"', 21, false)));
                                }
                                break;
                            case J$.C2(274336, J$.T(5119489, 'bcrypt', 21, false)):
                                var salt = J$.W(5118433, 'salt', J$.M(5118425, J$.R(5118417, 'kdfOptsBuf', kdfOptsBuf, false, false), 'readBuffer', false)(), salt, false, false);
                                var rounds = J$.W(5118457, 'rounds', J$.M(5118449, J$.R(5118441, 'kdfOptsBuf', kdfOptsBuf, false, false), 'readInt', false)(), rounds, false, false);
                                var cinf = J$.W(5118489, 'cinf', J$.M(5118481, J$.R(5118465, 'utils', utils, false, true), 'opensshCipherInfo', false)(J$.R(5118473, 'cipher', cipher, false, false)), cinf, false, false);
                                if (J$.C(274272, J$.B(589058, '===', J$.R(5118497, 'bcrypt', bcrypt, false, true), J$.T(5118505, undefined, 24, false)))) {
                                    bcrypt = J$.W(5118537, 'bcrypt', J$.F(5118529, J$.I(typeof require === 'undefined' ? require = J$.R(5118513, 'require', undefined, true, true) : require = J$.R(5118513, 'require', require, true, true)), false)(J$.T(5118521, 'bcrypt-pbkdf', 21, false)), bcrypt, false, true);
                                }
                                if (J$.C(274280, J$.B(589074, '===', J$.U(589066, 'typeof', J$.G(5118553, J$.R(5118545, 'options', options, false, false), 'passphrase')), J$.T(5118561, 'string', 21, false)))) {
                                    J$.P(5118617, J$.R(5118569, 'options', options, false, false), 'passphrase', J$.M(5118609, J$.R(5118577, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5118593, J$.R(5118585, 'options', options, false, false), 'passphrase'), J$.T(5118601, 'utf-8', 21, false)));
                                }
                                if (J$.C(274288, J$.U(589082, '!', J$.M(5118649, J$.R(5118625, 'Buffer', Buffer, false, true), 'isBuffer', false)(J$.G(5118641, J$.R(5118633, 'options', options, false, false), 'passphrase'))))) {
                                    throw J$.M(5118689, J$.R(5118657, 'errors', errors, false, true), 'KeyEncryptedError', true)(J$.G(5118673, J$.R(5118665, 'options', options, false, false), 'filename'), J$.T(5118681, 'OpenSSH', 21, false));
                                }
                                var pass = J$.W(5118729, 'pass', J$.F(5118721, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5118697, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5118697, 'Uint8Array', Uint8Array, true, true)), true)(J$.G(5118713, J$.R(5118705, 'options', options, false, false), 'passphrase')), pass, false, false);
                                var salti = J$.W(5118761, 'salti', J$.F(5118753, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5118737, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5118737, 'Uint8Array', Uint8Array, true, true)), true)(J$.R(5118745, 'salt', salt, false, false)), salti, false, false);
                                var out = J$.W(5118817, 'out', J$.F(5118809, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5118769, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5118769, 'Uint8Array', Uint8Array, true, true)), true)(J$.B(589090, '+', J$.G(5118785, J$.R(5118777, 'cinf', cinf, false, false), 'keySize'), J$.G(5118801, J$.R(5118793, 'cinf', cinf, false, false), 'blockSize'))), out, false, false);
                                var res = J$.W(5118921, 'res', J$.M(5118913, J$.R(5118825, 'bcrypt', bcrypt, false, true), 'pbkdf', false)(J$.R(5118833, 'pass', pass, false, false), J$.G(5118849, J$.R(5118841, 'pass', pass, false, false), 'length'), J$.R(5118857, 'salti', salti, false, false), J$.G(5118873, J$.R(5118865, 'salti', salti, false, false), 'length'), J$.R(5118881, 'out', out, false, false), J$.G(5118897, J$.R(5118889, 'out', out, false, false), 'length'), J$.R(5118905, 'rounds', rounds, false, false)), res, false, false);
                                if (J$.C(274296, J$.B(589098, '!==', J$.R(5118929, 'res', res, false, false), J$.T(5118937, 0, 22, false)))) {
                                    throw J$.F(5118969, J$.I(typeof Error === 'undefined' ? Error = J$.R(5118945, 'Error', undefined, true, true) : Error = J$.R(5118945, 'Error', Error, true, true)), true)(J$.B(589106, '+', J$.T(5118953, 'bcrypt_pbkdf function returned ', 21, false), J$.T(5118961, 'failure, parameters invalid', 21, false)));
                                }
                                out = J$.W(5119001, 'out', J$.M(5118993, J$.R(5118977, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5118985, 'out', out, false, false)), out, false, false);
                                var ckey = J$.W(5119049, 'ckey', J$.M(5119041, J$.R(5119009, 'out', out, false, false), 'slice', false)(J$.T(5119017, 0, 22, false), J$.G(5119033, J$.R(5119025, 'cinf', cinf, false, false), 'keySize')), ckey, false, false);
                                var iv = J$.W(5119121, 'iv', J$.M(5119113, J$.R(5119057, 'out', out, false, false), 'slice', false)(J$.G(5119073, J$.R(5119065, 'cinf', cinf, false, false), 'keySize'), J$.B(589114, '+', J$.G(5119089, J$.R(5119081, 'cinf', cinf, false, false), 'keySize'), J$.G(5119105, J$.R(5119097, 'cinf', cinf, false, false), 'blockSize'))), iv, false, false);
                                var cipherStream = J$.W(5119177, 'cipherStream', J$.M(5119169, J$.R(5119129, 'crypto', crypto, false, true), 'createDecipheriv', false)(J$.G(5119145, J$.R(5119137, 'cinf', cinf, false, false), 'opensslName'), J$.R(5119153, 'ckey', ckey, false, false), J$.R(5119161, 'iv', iv, false, false)), cipherStream, false, false);
                                J$.M(5119201, J$.R(5119185, 'cipherStream', cipherStream, false, false), 'setAutoPadding', false)(J$.T(5119193, false, 23, false));
                                var chunk, chunks = J$.W(5119217, 'chunks', J$.T(5119209, [], 10, false), chunks, false, false);
                                J$.M(5119353, J$.R(5119225, 'cipherStream', cipherStream, false, false), 'once', false)(J$.T(5119233, 'error', 21, false), J$.T(5119345, function (e) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(5119321, arguments.callee, this, arguments);
                                                arguments = J$.N(5119329, 'arguments', arguments, true, false, false);
                                                e = J$.N(5119337, 'e', e, true, false, false);
                                                if (J$.C(274304, J$.B(589130, '!==', J$.M(5119265, J$.M(5119249, J$.R(5119241, 'e', e, false, false), 'toString', false)(), 'indexOf', false)(J$.T(5119257, 'bad decrypt', 21, false)), J$.U(589122, '-', J$.T(5119273, 1, 22, false))))) {
                                                    throw J$.F(5119305, J$.I(typeof Error === 'undefined' ? Error = J$.R(5119281, 'Error', undefined, true, true) : Error = J$.R(5119281, 'Error', Error, true, true)), true)(J$.B(589138, '+', J$.T(5119289, 'Incorrect passphrase ', 21, false), J$.T(5119297, 'supplied, could not decrypt key', 21, false)));
                                                }
                                                throw J$.R(5119313, 'e', e, false, false);
                                            } catch (J$e) {
                                                J$.Ex(5123161, J$e);
                                            } finally {
                                                if (J$.Fr(5123169))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                                J$.M(5119377, J$.R(5119361, 'cipherStream', cipherStream, false, false), 'write', false)(J$.R(5119369, 'privKeyBlob', privKeyBlob, false, false));
                                J$.M(5119393, J$.R(5119385, 'cipherStream', cipherStream, false, false), 'end', false)();
                                while (J$.C(274312, J$.B(589146, '!==', chunk = J$.W(5119417, 'chunk', J$.M(5119409, J$.R(5119401, 'cipherStream', cipherStream, false, false), 'read', false)(), chunk, false, false), J$.T(5119425, null, 25, false))))
                                    J$.M(5119449, J$.R(5119433, 'chunks', chunks, false, false), 'push', false)(J$.R(5119441, 'chunk', chunk, false, false));
                                privKeyBlob = J$.W(5119481, 'privKeyBlob', J$.M(5119473, J$.R(5119457, 'Buffer', Buffer, false, true), 'concat', false)(J$.R(5119465, 'chunks', chunks, false, false)), privKeyBlob, false, false);
                                break;
                            default:
                                throw J$.F(5119529, J$.I(typeof Error === 'undefined' ? Error = J$.R(5119497, 'Error', undefined, true, true) : Error = J$.R(5119497, 'Error', Error, true, true)), true)(J$.B(589162, '+', J$.B(589154, '+', J$.T(5119505, 'OpenSSH-format key uses unknown KDF "', 21, false), J$.R(5119513, 'kdf', kdf, false, false)), J$.T(5119521, '"', 21, false)));
                            }
                            buf = J$.W(5119569, 'buf', J$.F(5119561, J$.R(5119537, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5119553, { buffer: J$.R(5119545, 'privKeyBlob', privKeyBlob, false, false) }, 11, false)), buf, false, false);
                            var checkInt1 = J$.W(5119593, 'checkInt1', J$.M(5119585, J$.R(5119577, 'buf', buf, false, false), 'readInt', false)(), checkInt1, false, false);
                            var checkInt2 = J$.W(5119617, 'checkInt2', J$.M(5119609, J$.R(5119601, 'buf', buf, false, false), 'readInt', false)(), checkInt2, false, false);
                            if (J$.C(274344, J$.B(589170, '!==', J$.R(5119625, 'checkInt1', checkInt1, false, false), J$.R(5119633, 'checkInt2', checkInt2, false, false)))) {
                                throw J$.F(5119665, J$.I(typeof Error === 'undefined' ? Error = J$.R(5119641, 'Error', undefined, true, true) : Error = J$.R(5119641, 'Error', Error, true, true)), true)(J$.B(589178, '+', J$.T(5119649, 'Incorrect passphrase supplied, could not ', 21, false), J$.T(5119657, 'decrypt key', 21, false)));
                            }
                            var ret = J$.W(5119681, 'ret', J$.T(5119673, {}, 11, false), ret, false, false);
                            var key = J$.W(5119737, 'key', J$.M(5119729, J$.R(5119689, 'rfc4253', rfc4253, false, true), 'readInternal', false)(J$.R(5119697, 'ret', ret, false, false), J$.T(5119705, 'private', 21, false), J$.M(5119721, J$.R(5119713, 'buf', buf, false, false), 'remainder', false)()), key, false, false);
                            J$.M(5119769, J$.R(5119745, 'buf', buf, false, false), 'skip', false)(J$.G(5119761, J$.R(5119753, 'ret', ret, false, false), 'consumed'));
                            var comment = J$.W(5119793, 'comment', J$.M(5119785, J$.R(5119777, 'buf', buf, false, false), 'readString', false)(), comment, false, false);
                            J$.P(5119817, J$.R(5119801, 'key', key, false, false), 'comment', J$.R(5119809, 'comment', comment, false, false));
                            return J$.Rt(5119833, J$.R(5119825, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(5123177, J$e);
                        } finally {
                            if (J$.Fr(5123185))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5122721, arguments.callee, this, arguments);
                            arguments = J$.N(5122729, 'arguments', arguments, true, false, false);
                            key = J$.N(5122737, 'key', key, true, false, false);
                            options = J$.N(5122745, 'options', options, true, false, false);
                            J$.N(5122753, 'pubKey', pubKey, false, false, false);
                            J$.N(5122761, 'cipher', cipher, false, false, false);
                            J$.N(5122769, 'kdf', kdf, false, false, false);
                            J$.N(5122777, 'kdfopts', kdfopts, false, false, false);
                            J$.N(5122785, 'cinf', cinf, false, false, false);
                            J$.N(5122793, 'passphrase', passphrase, false, false, false);
                            J$.N(5122801, 'privBuf', privBuf, false, false, false);
                            J$.N(5122809, 'checkInt', checkInt, false, false, false);
                            J$.N(5122817, 'n', n, false, false, false);
                            J$.N(5122825, 'salt', salt, false, false, false);
                            J$.N(5122833, 'rounds', rounds, false, false, false);
                            J$.N(5122841, 'kdfssh', kdfssh, false, false, false);
                            J$.N(5122849, 'pass', pass, false, false, false);
                            J$.N(5122857, 'salti', salti, false, false, false);
                            J$.N(5122865, 'out', out, false, false, false);
                            J$.N(5122873, 'res', res, false, false, false);
                            J$.N(5122881, 'ckey', ckey, false, false, false);
                            J$.N(5122889, 'iv', iv, false, false, false);
                            J$.N(5122897, 'cipherStream', cipherStream, false, false, false);
                            J$.N(5122905, 'chunk', chunk, false, false, false);
                            J$.N(5122913, 'chunks', chunks, false, false, false);
                            J$.N(5122921, 'buf', buf, false, false, false);
                            J$.N(5122929, 'header', header, false, false, false);
                            J$.N(5122937, 'tmp', tmp, false, false, false);
                            J$.N(5122945, 'len', len, false, false, false);
                            J$.N(5122953, 'o', o, false, false, false);
                            J$.N(5122961, 'i', i, false, false, false);
                            J$.N(5122969, 'limit', limit, false, false, false);
                            var pubKey;
                            if (J$.C(274352, J$.M(5120097, J$.R(5120081, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5120089, 'key', key, false, false))))
                                pubKey = J$.W(5120121, 'pubKey', J$.M(5120113, J$.R(5120105, 'key', key, false, false), 'toPublic', false)(), pubKey, false, false);
                            else
                                pubKey = J$.W(5120137, 'pubKey', J$.R(5120129, 'key', key, false, false), pubKey, false, false);
                            var cipher = J$.W(5120153, 'cipher', J$.T(5120145, 'none', 21, false), cipher, false, false);
                            var kdf = J$.W(5120169, 'kdf', J$.T(5120161, 'none', 21, false), kdf, false, false);
                            var kdfopts = J$.W(5120201, 'kdfopts', J$.M(5120193, J$.R(5120177, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(5120185, 0, 22, false)), kdfopts, false, false);
                            var cinf = J$.W(5120225, 'cinf', J$.T(5120217, { blockSize: J$.T(5120209, 8, 22, false) }, 11, false), cinf, false, false);
                            var passphrase;
                            if (J$.C(274384, J$.B(589186, '!==', J$.R(5120233, 'options', options, false, false), J$.T(5120241, undefined, 24, false)))) {
                                passphrase = J$.W(5120265, 'passphrase', J$.G(5120257, J$.R(5120249, 'options', options, false, false), 'passphrase'), passphrase, false, false);
                                if (J$.C(274360, J$.B(589202, '===', J$.U(589194, 'typeof', J$.R(5120273, 'passphrase', passphrase, false, false)), J$.T(5120281, 'string', 21, false))))
                                    passphrase = J$.W(5120321, 'passphrase', J$.M(5120313, J$.R(5120289, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5120297, 'passphrase', passphrase, false, false), J$.T(5120305, 'utf-8', 21, false)), passphrase, false, false);
                                if (J$.C(274376, J$.B(589210, '!==', J$.R(5120329, 'passphrase', passphrase, false, false), J$.T(5120337, undefined, 24, false)))) {
                                    J$.M(5120369, J$.R(5120345, 'assert', assert, false, true), 'buffer', false)(J$.R(5120353, 'passphrase', passphrase, false, false), J$.T(5120361, 'options.passphrase', 21, false));
                                    J$.M(5120409, J$.R(5120377, 'assert', assert, false, true), 'optionalString', false)(J$.G(5120393, J$.R(5120385, 'options', options, false, false), 'cipher'), J$.T(5120401, 'options.cipher', 21, false));
                                    cipher = J$.W(5120433, 'cipher', J$.G(5120425, J$.R(5120417, 'options', options, false, false), 'cipher'), cipher, false, false);
                                    if (J$.C(274368, J$.B(589218, '===', J$.R(5120441, 'cipher', cipher, false, false), J$.T(5120449, undefined, 24, false))))
                                        cipher = J$.W(5120465, 'cipher', J$.T(5120457, 'aes128-ctr', 21, false), cipher, false, false);
                                    cinf = J$.W(5120497, 'cinf', J$.M(5120489, J$.R(5120473, 'utils', utils, false, true), 'opensshCipherInfo', false)(J$.R(5120481, 'cipher', cipher, false, false)), cinf, false, false);
                                    kdf = J$.W(5120513, 'kdf', J$.T(5120505, 'bcrypt', 21, false), kdf, false, false);
                                }
                            }
                            var privBuf;
                            if (J$.C(274408, J$.M(5120537, J$.R(5120521, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5120529, 'key', key, false, false)))) {
                                privBuf = J$.W(5120569, 'privBuf', J$.F(5120561, J$.R(5120545, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5120553, {}, 11, false)), privBuf, false, false);
                                var checkInt = J$.W(5120617, 'checkInt', J$.M(5120609, J$.M(5120593, J$.R(5120577, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(5120585, 4, 22, false)), 'readUInt32BE', false)(J$.T(5120601, 0, 22, false)), checkInt, false, false);
                                J$.M(5120641, J$.R(5120625, 'privBuf', privBuf, false, false), 'writeInt', false)(J$.R(5120633, 'checkInt', checkInt, false, false));
                                J$.M(5120665, J$.R(5120649, 'privBuf', privBuf, false, false), 'writeInt', false)(J$.R(5120657, 'checkInt', checkInt, false, false));
                                J$.M(5120705, J$.R(5120673, 'privBuf', privBuf, false, false), 'write', false)(J$.M(5120697, J$.R(5120681, 'key', key, false, false), 'toBuffer', false)(J$.T(5120689, 'rfc4253', 21, false)));
                                J$.M(5120745, J$.R(5120713, 'privBuf', privBuf, false, false), 'writeString', false)(J$.C(274392, J$.G(5120729, J$.R(5120721, 'key', key, false, false), 'comment')) ? J$._() : J$.T(5120737, '', 21, false));
                                var n = J$.W(5120761, 'n', J$.T(5120753, 1, 22, false), n, false, false);
                                while (J$.C(274400, J$.B(589234, '!==', J$.B(589226, '%', J$.G(5120777, J$.R(5120769, 'privBuf', privBuf, false, false), '_offset'), J$.G(5120793, J$.R(5120785, 'cinf', cinf, false, false), 'blockSize')), J$.T(5120801, 0, 22, false))))
                                    J$.M(5120833, J$.R(5120809, 'privBuf', privBuf, false, false), 'writeChar', false)(J$.B(589258, '-', n = J$.W(5120825, 'n', J$.B(589250, '+', J$.U(589242, '+', J$.R(5120817, 'n', n, false, false)), 1), n, false, false), 1));
                                privBuf = J$.W(5120857, 'privBuf', J$.M(5120849, J$.R(5120841, 'privBuf', privBuf, false, false), 'toBuffer', false)(), privBuf, false, false);
                            }
                            switch (J$.C1(274440, J$.R(5120865, 'kdf', kdf, false, false))) {
                            case J$.C2(274448, J$.T(5120873, 'none', 21, false)):
                                break;
                            case J$.C2(274456, J$.T(5121793, 'bcrypt', 21, false)):
                                var salt = J$.W(5120905, 'salt', J$.M(5120897, J$.R(5120881, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(5120889, 16, 22, false)), salt, false, false);
                                var rounds = J$.W(5120921, 'rounds', J$.T(5120913, 16, 22, false), rounds, false, false);
                                var kdfssh = J$.W(5120953, 'kdfssh', J$.F(5120945, J$.R(5120929, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5120937, {}, 11, false)), kdfssh, false, false);
                                J$.M(5120977, J$.R(5120961, 'kdfssh', kdfssh, false, false), 'writeBuffer', false)(J$.R(5120969, 'salt', salt, false, false));
                                J$.M(5121001, J$.R(5120985, 'kdfssh', kdfssh, false, false), 'writeInt', false)(J$.R(5120993, 'rounds', rounds, false, false));
                                kdfopts = J$.W(5121025, 'kdfopts', J$.M(5121017, J$.R(5121009, 'kdfssh', kdfssh, false, false), 'toBuffer', false)(), kdfopts, false, false);
                                if (J$.C(274416, J$.B(589266, '===', J$.R(5121033, 'bcrypt', bcrypt, false, true), J$.T(5121041, undefined, 24, false)))) {
                                    bcrypt = J$.W(5121073, 'bcrypt', J$.F(5121065, J$.I(typeof require === 'undefined' ? require = J$.R(5121049, 'require', undefined, true, true) : require = J$.R(5121049, 'require', require, true, true)), false)(J$.T(5121057, 'bcrypt-pbkdf', 21, false)), bcrypt, false, true);
                                }
                                var pass = J$.W(5121105, 'pass', J$.F(5121097, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5121081, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5121081, 'Uint8Array', Uint8Array, true, true)), true)(J$.R(5121089, 'passphrase', passphrase, false, false)), pass, false, false);
                                var salti = J$.W(5121137, 'salti', J$.F(5121129, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5121113, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5121113, 'Uint8Array', Uint8Array, true, true)), true)(J$.R(5121121, 'salt', salt, false, false)), salti, false, false);
                                var out = J$.W(5121193, 'out', J$.F(5121185, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5121145, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5121145, 'Uint8Array', Uint8Array, true, true)), true)(J$.B(589274, '+', J$.G(5121161, J$.R(5121153, 'cinf', cinf, false, false), 'keySize'), J$.G(5121177, J$.R(5121169, 'cinf', cinf, false, false), 'blockSize'))), out, false, false);
                                var res = J$.W(5121297, 'res', J$.M(5121289, J$.R(5121201, 'bcrypt', bcrypt, false, true), 'pbkdf', false)(J$.R(5121209, 'pass', pass, false, false), J$.G(5121225, J$.R(5121217, 'pass', pass, false, false), 'length'), J$.R(5121233, 'salti', salti, false, false), J$.G(5121249, J$.R(5121241, 'salti', salti, false, false), 'length'), J$.R(5121257, 'out', out, false, false), J$.G(5121273, J$.R(5121265, 'out', out, false, false), 'length'), J$.R(5121281, 'rounds', rounds, false, false)), res, false, false);
                                if (J$.C(274424, J$.B(589282, '!==', J$.R(5121305, 'res', res, false, false), J$.T(5121313, 0, 22, false)))) {
                                    throw J$.F(5121345, J$.I(typeof Error === 'undefined' ? Error = J$.R(5121321, 'Error', undefined, true, true) : Error = J$.R(5121321, 'Error', Error, true, true)), true)(J$.B(589290, '+', J$.T(5121329, 'bcrypt_pbkdf function returned ', 21, false), J$.T(5121337, 'failure, parameters invalid', 21, false)));
                                }
                                out = J$.W(5121377, 'out', J$.M(5121369, J$.R(5121353, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5121361, 'out', out, false, false)), out, false, false);
                                var ckey = J$.W(5121425, 'ckey', J$.M(5121417, J$.R(5121385, 'out', out, false, false), 'slice', false)(J$.T(5121393, 0, 22, false), J$.G(5121409, J$.R(5121401, 'cinf', cinf, false, false), 'keySize')), ckey, false, false);
                                var iv = J$.W(5121497, 'iv', J$.M(5121489, J$.R(5121433, 'out', out, false, false), 'slice', false)(J$.G(5121449, J$.R(5121441, 'cinf', cinf, false, false), 'keySize'), J$.B(589298, '+', J$.G(5121465, J$.R(5121457, 'cinf', cinf, false, false), 'keySize'), J$.G(5121481, J$.R(5121473, 'cinf', cinf, false, false), 'blockSize'))), iv, false, false);
                                var cipherStream = J$.W(5121553, 'cipherStream', J$.M(5121545, J$.R(5121505, 'crypto', crypto, false, true), 'createCipheriv', false)(J$.G(5121521, J$.R(5121513, 'cinf', cinf, false, false), 'opensslName'), J$.R(5121529, 'ckey', ckey, false, false), J$.R(5121537, 'iv', iv, false, false)), cipherStream, false, false);
                                J$.M(5121577, J$.R(5121561, 'cipherStream', cipherStream, false, false), 'setAutoPadding', false)(J$.T(5121569, false, 23, false));
                                var chunk, chunks = J$.W(5121593, 'chunks', J$.T(5121585, [], 10, false), chunks, false, false);
                                J$.M(5121657, J$.R(5121601, 'cipherStream', cipherStream, false, false), 'once', false)(J$.T(5121609, 'error', 21, false), J$.T(5121649, function (e) {
                                    jalangiLabel3:
                                        while (true) {
                                            try {
                                                J$.Fe(5121625, arguments.callee, this, arguments);
                                                arguments = J$.N(5121633, 'arguments', arguments, true, false, false);
                                                e = J$.N(5121641, 'e', e, true, false, false);
                                                throw J$.R(5121617, 'e', e, false, false);
                                            } catch (J$e) {
                                                J$.Ex(5123193, J$e);
                                            } finally {
                                                if (J$.Fr(5123201))
                                                    continue jalangiLabel3;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                                J$.M(5121681, J$.R(5121665, 'cipherStream', cipherStream, false, false), 'write', false)(J$.R(5121673, 'privBuf', privBuf, false, false));
                                J$.M(5121697, J$.R(5121689, 'cipherStream', cipherStream, false, false), 'end', false)();
                                while (J$.C(274432, J$.B(589306, '!==', chunk = J$.W(5121721, 'chunk', J$.M(5121713, J$.R(5121705, 'cipherStream', cipherStream, false, false), 'read', false)(), chunk, false, false), J$.T(5121729, null, 25, false))))
                                    J$.M(5121753, J$.R(5121737, 'chunks', chunks, false, false), 'push', false)(J$.R(5121745, 'chunk', chunk, false, false));
                                privBuf = J$.W(5121785, 'privBuf', J$.M(5121777, J$.R(5121761, 'Buffer', Buffer, false, true), 'concat', false)(J$.R(5121769, 'chunks', chunks, false, false)), privBuf, false, false);
                                break;
                            default:
                                throw J$.F(5121825, J$.I(typeof Error === 'undefined' ? Error = J$.R(5121801, 'Error', undefined, true, true) : Error = J$.R(5121801, 'Error', Error, true, true)), true)(J$.B(589314, '+', J$.T(5121809, 'Unsupported kdf ', 21, false), J$.R(5121817, 'kdf', kdf, false, false)));
                            }
                            var buf = J$.W(5121857, 'buf', J$.F(5121849, J$.R(5121833, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5121841, {}, 11, false)), buf, false, false);
                            J$.M(5121881, J$.R(5121865, 'buf', buf, false, false), 'writeCString', false)(J$.R(5121873, 'MAGIC', MAGIC, false, true));
                            J$.M(5121905, J$.R(5121889, 'buf', buf, false, false), 'writeString', false)(J$.R(5121897, 'cipher', cipher, false, false));
                            J$.M(5121929, J$.R(5121913, 'buf', buf, false, false), 'writeString', false)(J$.R(5121921, 'kdf', kdf, false, false));
                            J$.M(5121953, J$.R(5121937, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(5121945, 'kdfopts', kdfopts, false, false));
                            J$.M(5121977, J$.R(5121961, 'buf', buf, false, false), 'writeInt', false)(J$.T(5121969, 1, 22, false));
                            J$.M(5122017, J$.R(5121985, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5122009, J$.R(5121993, 'pubKey', pubKey, false, false), 'toBuffer', false)(J$.T(5122001, 'rfc4253', 21, false)));
                            if (J$.C(274464, J$.R(5122025, 'privBuf', privBuf, false, false)))
                                J$.M(5122049, J$.R(5122033, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(5122041, 'privBuf', privBuf, false, false));
                            buf = J$.W(5122073, 'buf', J$.M(5122065, J$.R(5122057, 'buf', buf, false, false), 'toBuffer', false)(), buf, false, false);
                            var header;
                            if (J$.C(274472, J$.M(5122097, J$.R(5122081, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5122089, 'key', key, false, false))))
                                header = J$.W(5122113, 'header', J$.T(5122105, 'OPENSSH PRIVATE KEY', 21, false), header, false, false);
                            else
                                header = J$.W(5122129, 'header', J$.T(5122121, 'OPENSSH PUBLIC KEY', 21, false), header, false, false);
                            var tmp = J$.W(5122161, 'tmp', J$.M(5122153, J$.R(5122137, 'buf', buf, false, false), 'toString', false)(J$.T(5122145, 'base64', 21, false)), tmp, false, false);
                            var len = J$.W(5122257, 'len', J$.B(589370, '+', J$.B(589362, '+', J$.B(589346, '+', J$.B(589338, '+', J$.B(589330, '+', J$.G(5122177, J$.R(5122169, 'tmp', tmp, false, false), 'length'), J$.B(589322, '/', J$.G(5122193, J$.R(5122185, 'tmp', tmp, false, false), 'length'), J$.T(5122201, 70, 22, false))), J$.T(5122209, 18, 22, false)), J$.T(5122217, 16, 22, false)), J$.B(589354, '*', J$.G(5122233, J$.R(5122225, 'header', header, false, false), 'length'), J$.T(5122241, 2, 22, false))), J$.T(5122249, 10, 22, false)), len, false, false);
                            buf = J$.W(5122289, 'buf', J$.M(5122281, J$.R(5122265, 'Buffer', Buffer, false, true), 'alloc', false)(J$.R(5122273, 'len', len, false, false)), buf, false, false);
                            var o = J$.W(5122305, 'o', J$.T(5122297, 0, 22, false), o, false, false);
                            o = J$.W(5122369, 'o', J$.B(589394, '+', J$.R(5122361, 'o', o, false, false), J$.M(5122353, J$.R(5122313, 'buf', buf, false, false), 'write', false)(J$.B(589386, '+', J$.B(589378, '+', J$.T(5122321, '-----BEGIN ', 21, false), J$.R(5122329, 'header', header, false, false)), J$.T(5122337, '-----\n', 21, false)), J$.R(5122345, 'o', o, false, false))), o, false, false);
                            for (var i = J$.W(5122385, 'i', J$.T(5122377, 0, 22, false), i, false, false); J$.C(274488, J$.B(589402, '<', J$.R(5122393, 'i', i, false, false), J$.G(5122409, J$.R(5122401, 'tmp', tmp, false, false), 'length')));) {
                                var limit = J$.W(5122433, 'limit', J$.B(589410, '+', J$.R(5122417, 'i', i, false, false), J$.T(5122425, 70, 22, false)), limit, false, false);
                                if (J$.C(274480, J$.B(589418, '>', J$.R(5122441, 'limit', limit, false, false), J$.G(5122457, J$.R(5122449, 'tmp', tmp, false, false), 'length'))))
                                    limit = J$.W(5122481, 'limit', J$.G(5122473, J$.R(5122465, 'tmp', tmp, false, false), 'length'), limit, false, false);
                                o = J$.W(5122553, 'o', J$.B(589426, '+', J$.R(5122545, 'o', o, false, false), J$.M(5122537, J$.R(5122489, 'buf', buf, false, false), 'write', false)(J$.M(5122521, J$.R(5122497, 'tmp', tmp, false, false), 'slice', false)(J$.R(5122505, 'i', i, false, false), J$.R(5122513, 'limit', limit, false, false)), J$.R(5122529, 'o', o, false, false))), o, false, false);
                                J$.P(5122593, J$.R(5122561, 'buf', buf, false, false), J$.B(589450, '-', o = J$.W(5122577, 'o', J$.B(589442, '+', J$.U(589434, '+', J$.R(5122569, 'o', o, false, false)), 1), o, false, false), 1), J$.T(5122585, 10, 22, false));
                                i = J$.W(5122609, 'i', J$.R(5122601, 'limit', limit, false, false), i, false, false);
                            }
                            o = J$.W(5122673, 'o', J$.B(589474, '+', J$.R(5122665, 'o', o, false, false), J$.M(5122657, J$.R(5122617, 'buf', buf, false, false), 'write', false)(J$.B(589466, '+', J$.B(589458, '+', J$.T(5122625, '-----END ', 21, false), J$.R(5122633, 'header', header, false, false)), J$.T(5122641, '-----\n', 21, false)), J$.R(5122649, 'o', o, false, false))), o, false, false);
                            return J$.Rt(5122713, J$.M(5122705, J$.R(5122681, 'buf', buf, false, false), 'slice', false)(J$.T(5122689, 0, 22, false), J$.R(5122697, 'o', o, false, false)));
                        } catch (J$e) {
                            J$.Ex(5123209, J$e);
                        } finally {
                            if (J$.Fr(5123217))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5122985, 'assert', assert, false, false, false);
            J$.N(5122993, 'asn1', asn1, false, false, false);
            J$.N(5123001, 'Buffer', Buffer, false, false, false);
            J$.N(5123009, 'algs', algs, false, false, false);
            J$.N(5123017, 'utils', utils, false, false, false);
            J$.N(5123025, 'crypto', crypto, false, false, false);
            J$.N(5123033, 'Key', Key, false, false, false);
            J$.N(5123041, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5123049, 'pem', pem, false, false, false);
            J$.N(5123057, 'rfc4253', rfc4253, false, false, false);
            J$.N(5123065, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(5123073, 'errors', errors, false, false, false);
            J$.N(5123081, 'bcrypt', bcrypt, false, false, false);
            read = J$.N(5123097, 'read', J$.T(5123089, read, 12, false), true, false, false);
            J$.N(5123105, 'MAGIC', MAGIC, false, false, false);
            readSSHPrivate = J$.N(5123121, 'readSSHPrivate', J$.T(5123113, readSSHPrivate, 12, false), true, false, false);
            write = J$.N(5123137, 'write', J$.T(5123129, write, 12, false), true, false, false);
            J$.P(5117401, J$.I(typeof module === 'undefined' ? module = J$.R(5117361, 'module', undefined, true, true) : module = J$.R(5117361, 'module', module, true, true)), 'exports', J$.T(5117393, {
                read: J$.R(5117369, 'read', read, false, true),
                readSSHPrivate: J$.R(5117377, 'readSSHPrivate', readSSHPrivate, false, true),
                write: J$.R(5117385, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(5117433, 'assert', J$.F(5117425, J$.I(typeof require === 'undefined' ? require = J$.R(5117409, 'require', undefined, true, true) : require = J$.R(5117409, 'require', require, true, true)), false)(J$.T(5117417, 'assert-plus', 21, false)), assert, false, true);
            var asn1 = J$.W(5117465, 'asn1', J$.F(5117457, J$.I(typeof require === 'undefined' ? require = J$.R(5117441, 'require', undefined, true, true) : require = J$.R(5117441, 'require', require, true, true)), false)(J$.T(5117449, 'asn1', 21, false)), asn1, false, true);
            var Buffer = J$.W(5117505, 'Buffer', J$.G(5117497, J$.F(5117489, J$.I(typeof require === 'undefined' ? require = J$.R(5117473, 'require', undefined, true, true) : require = J$.R(5117473, 'require', require, true, true)), false)(J$.T(5117481, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5117537, 'algs', J$.F(5117529, J$.I(typeof require === 'undefined' ? require = J$.R(5117513, 'require', undefined, true, true) : require = J$.R(5117513, 'require', require, true, true)), false)(J$.T(5117521, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(5117569, 'utils', J$.F(5117561, J$.I(typeof require === 'undefined' ? require = J$.R(5117545, 'require', undefined, true, true) : require = J$.R(5117545, 'require', require, true, true)), false)(J$.T(5117553, '../utils', 21, false)), utils, false, true);
            var crypto = J$.W(5117601, 'crypto', J$.F(5117593, J$.I(typeof require === 'undefined' ? require = J$.R(5117577, 'require', undefined, true, true) : require = J$.R(5117577, 'require', require, true, true)), false)(J$.T(5117585, 'crypto', 21, false)), crypto, false, true);
            var Key = J$.W(5117633, 'Key', J$.F(5117625, J$.I(typeof require === 'undefined' ? require = J$.R(5117609, 'require', undefined, true, true) : require = J$.R(5117609, 'require', require, true, true)), false)(J$.T(5117617, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5117665, 'PrivateKey', J$.F(5117657, J$.I(typeof require === 'undefined' ? require = J$.R(5117641, 'require', undefined, true, true) : require = J$.R(5117641, 'require', require, true, true)), false)(J$.T(5117649, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(5117697, 'pem', J$.F(5117689, J$.I(typeof require === 'undefined' ? require = J$.R(5117673, 'require', undefined, true, true) : require = J$.R(5117673, 'require', require, true, true)), false)(J$.T(5117681, './pem', 21, false)), pem, false, true);
            var rfc4253 = J$.W(5117729, 'rfc4253', J$.F(5117721, J$.I(typeof require === 'undefined' ? require = J$.R(5117705, 'require', undefined, true, true) : require = J$.R(5117705, 'require', require, true, true)), false)(J$.T(5117713, './rfc4253', 21, false)), rfc4253, false, true);
            var SSHBuffer = J$.W(5117761, 'SSHBuffer', J$.F(5117753, J$.I(typeof require === 'undefined' ? require = J$.R(5117737, 'require', undefined, true, true) : require = J$.R(5117737, 'require', require, true, true)), false)(J$.T(5117745, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var errors = J$.W(5117793, 'errors', J$.F(5117785, J$.I(typeof require === 'undefined' ? require = J$.R(5117769, 'require', undefined, true, true) : require = J$.R(5117769, 'require', require, true, true)), false)(J$.T(5117777, '../errors', 21, false)), errors, false, true);
            var bcrypt;
            var MAGIC = J$.W(5117881, 'MAGIC', J$.T(5117873, 'openssh-key-v1', 21, false), MAGIC, false, true);
        } catch (J$e) {
            J$.Ex(5123225, J$e);
        } finally {
            if (J$.Sr(5123233))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

