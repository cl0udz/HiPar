J$.noInstrEval = false;
jalangiLabel20:
    while (true) {
        try {
            J$.Se(5096281, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/formats/pkcs1.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5088129, arguments.callee, this, arguments);
                            arguments = J$.N(5088137, 'arguments', arguments, true, false, false);
                            buf = J$.N(5088145, 'buf', buf, true, false, false);
                            options = J$.N(5088153, 'options', options, true, false, false);
                            return J$.Rt(5088121, J$.M(5088113, J$.R(5088081, 'pem', pem, false, true), 'read', false)(J$.R(5088089, 'buf', buf, false, false), J$.R(5088097, 'options', options, false, false), J$.T(5088105, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5096689, J$e);
                        } finally {
                            if (J$.Fr(5096697))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5088209, arguments.callee, this, arguments);
                            arguments = J$.N(5088217, 'arguments', arguments, true, false, false);
                            key = J$.N(5088225, 'key', key, true, false, false);
                            options = J$.N(5088233, 'options', options, true, false, false);
                            return J$.Rt(5088201, J$.M(5088193, J$.R(5088161, 'pem', pem, false, true), 'write', false)(J$.R(5088169, 'key', key, false, false), J$.R(5088177, 'options', options, false, false), J$.T(5088185, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5096705, J$e);
                        } finally {
                            if (J$.Fr(5096713))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readMPInt(der, nm) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5088385, arguments.callee, this, arguments);
                            arguments = J$.N(5088393, 'arguments', arguments, true, false, false);
                            der = J$.N(5088401, 'der', der, true, false, false);
                            nm = J$.N(5088409, 'nm', nm, true, false, false);
                            J$.M(5088305, J$.R(5088241, 'assert', assert, false, true), 'strictEqual', false)(J$.M(5088257, J$.R(5088249, 'der', der, false, false), 'peek', false)(), J$.G(5088281, J$.G(5088273, J$.R(5088265, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.B(587882, '+', J$.R(5088289, 'nm', nm, false, false), J$.T(5088297, ' is not an Integer', 21, false)));
                            return J$.Rt(5088377, J$.M(5088369, J$.R(5088313, 'utils', utils, false, true), 'mpNormalize', false)(J$.M(5088361, J$.R(5088321, 'der', der, false, false), 'readString', false)(J$.G(5088345, J$.G(5088337, J$.R(5088329, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(5088353, true, 23, false))));
                        } catch (J$e) {
                            J$.Ex(5096721, J$e);
                        } finally {
                            if (J$.Fr(5096729))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1(alg, type, der) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5088969, arguments.callee, this, arguments);
                            arguments = J$.N(5088977, 'arguments', arguments, true, false, false);
                            alg = J$.N(5088985, 'alg', alg, true, false, false);
                            type = J$.N(5088993, 'type', type, true, false, false);
                            der = J$.N(5089001, 'der', der, true, false, false);
                            switch (J$.C1(273304, J$.R(5088417, 'alg', alg, false, false))) {
                            case J$.C2(273312, J$.T(5088553, 'RSA', 21, false)):
                                if (J$.C(273256, J$.B(587890, '===', J$.R(5088425, 'type', type, false, false), J$.T(5088433, 'public', 21, false))))
                                    return J$.Rt(5088465, J$.F(5088457, J$.R(5088441, 'readPkcs1RSAPublic', readPkcs1RSAPublic, false, true), false)(J$.R(5088449, 'der', der, false, false)));
                                else if (J$.C(273248, J$.B(587898, '===', J$.R(5088473, 'type', type, false, false), J$.T(5088481, 'private', 21, false))))
                                    return J$.Rt(5088513, J$.F(5088505, J$.R(5088489, 'readPkcs1RSAPrivate', readPkcs1RSAPrivate, false, true), false)(J$.R(5088497, 'der', der, false, false)));
                                throw J$.F(5088545, J$.I(typeof Error === 'undefined' ? Error = J$.R(5088521, 'Error', undefined, true, true) : Error = J$.R(5088521, 'Error', Error, true, true)), true)(J$.B(587906, '+', J$.T(5088529, 'Unknown key type: ', 21, false), J$.R(5088537, 'type', type, false, false)));
                            case J$.C2(273320, J$.T(5088689, 'DSA', 21, false)):
                                if (J$.C(273272, J$.B(587914, '===', J$.R(5088561, 'type', type, false, false), J$.T(5088569, 'public', 21, false))))
                                    return J$.Rt(5088601, J$.F(5088593, J$.R(5088577, 'readPkcs1DSAPublic', readPkcs1DSAPublic, false, true), false)(J$.R(5088585, 'der', der, false, false)));
                                else if (J$.C(273264, J$.B(587922, '===', J$.R(5088609, 'type', type, false, false), J$.T(5088617, 'private', 21, false))))
                                    return J$.Rt(5088649, J$.F(5088641, J$.R(5088625, 'readPkcs1DSAPrivate', readPkcs1DSAPrivate, false, true), false)(J$.R(5088633, 'der', der, false, false)));
                                throw J$.F(5088681, J$.I(typeof Error === 'undefined' ? Error = J$.R(5088657, 'Error', undefined, true, true) : Error = J$.R(5088657, 'Error', Error, true, true)), true)(J$.B(587930, '+', J$.T(5088665, 'Unknown key type: ', 21, false), J$.R(5088673, 'type', type, false, false)));
                            case J$.C2(273328, J$.T(5088697, 'EC', 21, false)):
                            case J$.C2(273336, J$.T(5088833, 'ECDSA', 21, false)):
                                if (J$.C(273288, J$.B(587938, '===', J$.R(5088705, 'type', type, false, false), J$.T(5088713, 'private', 21, false))))
                                    return J$.Rt(5088745, J$.F(5088737, J$.R(5088721, 'readPkcs1ECDSAPrivate', readPkcs1ECDSAPrivate, false, true), false)(J$.R(5088729, 'der', der, false, false)));
                                else if (J$.C(273280, J$.B(587946, '===', J$.R(5088753, 'type', type, false, false), J$.T(5088761, 'public', 21, false))))
                                    return J$.Rt(5088793, J$.F(5088785, J$.R(5088769, 'readPkcs1ECDSAPublic', readPkcs1ECDSAPublic, false, true), false)(J$.R(5088777, 'der', der, false, false)));
                                throw J$.F(5088825, J$.I(typeof Error === 'undefined' ? Error = J$.R(5088801, 'Error', undefined, true, true) : Error = J$.R(5088801, 'Error', Error, true, true)), true)(J$.B(587954, '+', J$.T(5088809, 'Unknown key type: ', 21, false), J$.R(5088817, 'type', type, false, false)));
                            case J$.C2(273344, J$.T(5088841, 'EDDSA', 21, false)):
                            case J$.C2(273352, J$.T(5088929, 'EdDSA', 21, false)):
                                if (J$.C(273296, J$.B(587962, '===', J$.R(5088849, 'type', type, false, false), J$.T(5088857, 'private', 21, false))))
                                    return J$.Rt(5088889, J$.F(5088881, J$.R(5088865, 'readPkcs1EdDSAPrivate', readPkcs1EdDSAPrivate, false, true), false)(J$.R(5088873, 'der', der, false, false)));
                                throw J$.F(5088921, J$.I(typeof Error === 'undefined' ? Error = J$.R(5088897, 'Error', undefined, true, true) : Error = J$.R(5088897, 'Error', Error, true, true)), true)(J$.B(587970, '+', J$.R(5088905, 'type', type, false, false), J$.T(5088913, ' keys not supported with EdDSA', 21, false)));
                            default:
                                throw J$.F(5088961, J$.I(typeof Error === 'undefined' ? Error = J$.R(5088937, 'Error', undefined, true, true) : Error = J$.R(5088937, 'Error', Error, true, true)), true)(J$.B(587978, '+', J$.T(5088945, 'Unknown key algo: ', 21, false), J$.R(5088953, 'alg', alg, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(5096737, J$e);
                        } finally {
                            if (J$.Fr(5096745))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPublic(der) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5089201, arguments.callee, this, arguments);
                            arguments = J$.N(5089209, 'arguments', arguments, true, false, false);
                            der = J$.N(5089217, 'der', der, true, false, false);
                            J$.N(5089225, 'n', n, false, false, false);
                            J$.N(5089233, 'e', e, false, false, false);
                            J$.N(5089241, 'key', key, false, false, false);
                            var n = J$.W(5089041, 'n', J$.F(5089033, J$.R(5089009, 'readMPInt', readMPInt, false, true), false)(J$.R(5089017, 'der', der, false, false), J$.T(5089025, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(5089081, 'e', J$.F(5089073, J$.R(5089049, 'readMPInt', readMPInt, false, true), false)(J$.R(5089057, 'der', der, false, false), J$.T(5089065, 'exponent', 21, false)), e, false, false);
                            var key = J$.W(5089161, 'key', J$.T(5089153, {
                                type: J$.T(5089089, 'rsa', 21, false),
                                parts: J$.T(5089145, [
                                    J$.T(5089113, {
                                        name: J$.T(5089097, 'e', 21, false),
                                        data: J$.R(5089105, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(5089137, {
                                        name: J$.T(5089121, 'n', 21, false),
                                        data: J$.R(5089129, 'n', n, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5089193, J$.F(5089185, J$.R(5089169, 'Key', Key, false, true), true)(J$.R(5089177, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096753, J$e);
                        } finally {
                            if (J$.Fr(5096761))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPrivate(der) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5089913, arguments.callee, this, arguments);
                            arguments = J$.N(5089921, 'arguments', arguments, true, false, false);
                            der = J$.N(5089929, 'der', der, true, false, false);
                            J$.N(5089937, 'version', version, false, false, false);
                            J$.N(5089945, 'n', n, false, false, false);
                            J$.N(5089953, 'e', e, false, false, false);
                            J$.N(5089961, 'd', d, false, false, false);
                            J$.N(5089969, 'p', p, false, false, false);
                            J$.N(5089977, 'q', q, false, false, false);
                            J$.N(5089985, 'dmodp', dmodp, false, false, false);
                            J$.N(5089993, 'dmodq', dmodq, false, false, false);
                            J$.N(5090001, 'iqmp', iqmp, false, false, false);
                            J$.N(5090009, 'key', key, false, false, false);
                            var version = J$.W(5089281, 'version', J$.F(5089273, J$.R(5089249, 'readMPInt', readMPInt, false, true), false)(J$.R(5089257, 'der', der, false, false), J$.T(5089265, 'version', 21, false)), version, false, false);
                            J$.M(5089329, J$.R(5089289, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5089313, J$.R(5089297, 'version', version, false, false), J$.T(5089305, 0, 22, false)), J$.T(5089321, 0, 22, false));
                            var n = J$.W(5089369, 'n', J$.F(5089361, J$.R(5089337, 'readMPInt', readMPInt, false, true), false)(J$.R(5089345, 'der', der, false, false), J$.T(5089353, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(5089409, 'e', J$.F(5089401, J$.R(5089377, 'readMPInt', readMPInt, false, true), false)(J$.R(5089385, 'der', der, false, false), J$.T(5089393, 'public exponent', 21, false)), e, false, false);
                            var d = J$.W(5089449, 'd', J$.F(5089441, J$.R(5089417, 'readMPInt', readMPInt, false, true), false)(J$.R(5089425, 'der', der, false, false), J$.T(5089433, 'private exponent', 21, false)), d, false, false);
                            var p = J$.W(5089489, 'p', J$.F(5089481, J$.R(5089457, 'readMPInt', readMPInt, false, true), false)(J$.R(5089465, 'der', der, false, false), J$.T(5089473, 'prime1', 21, false)), p, false, false);
                            var q = J$.W(5089529, 'q', J$.F(5089521, J$.R(5089497, 'readMPInt', readMPInt, false, true), false)(J$.R(5089505, 'der', der, false, false), J$.T(5089513, 'prime2', 21, false)), q, false, false);
                            var dmodp = J$.W(5089569, 'dmodp', J$.F(5089561, J$.R(5089537, 'readMPInt', readMPInt, false, true), false)(J$.R(5089545, 'der', der, false, false), J$.T(5089553, 'exponent1', 21, false)), dmodp, false, false);
                            var dmodq = J$.W(5089609, 'dmodq', J$.F(5089601, J$.R(5089577, 'readMPInt', readMPInt, false, true), false)(J$.R(5089585, 'der', der, false, false), J$.T(5089593, 'exponent2', 21, false)), dmodq, false, false);
                            var iqmp = J$.W(5089649, 'iqmp', J$.F(5089641, J$.R(5089617, 'readMPInt', readMPInt, false, true), false)(J$.R(5089625, 'der', der, false, false), J$.T(5089633, 'iqmp', 21, false)), iqmp, false, false);
                            var key = J$.W(5089873, 'key', J$.T(5089865, {
                                type: J$.T(5089657, 'rsa', 21, false),
                                parts: J$.T(5089857, [
                                    J$.T(5089681, {
                                        name: J$.T(5089665, 'n', 21, false),
                                        data: J$.R(5089673, 'n', n, false, false)
                                    }, 11, false),
                                    J$.T(5089705, {
                                        name: J$.T(5089689, 'e', 21, false),
                                        data: J$.R(5089697, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(5089729, {
                                        name: J$.T(5089713, 'd', 21, false),
                                        data: J$.R(5089721, 'd', d, false, false)
                                    }, 11, false),
                                    J$.T(5089753, {
                                        name: J$.T(5089737, 'iqmp', 21, false),
                                        data: J$.R(5089745, 'iqmp', iqmp, false, false)
                                    }, 11, false),
                                    J$.T(5089777, {
                                        name: J$.T(5089761, 'p', 21, false),
                                        data: J$.R(5089769, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(5089801, {
                                        name: J$.T(5089785, 'q', 21, false),
                                        data: J$.R(5089793, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(5089825, {
                                        name: J$.T(5089809, 'dmodp', 21, false),
                                        data: J$.R(5089817, 'dmodp', dmodp, false, false)
                                    }, 11, false),
                                    J$.T(5089849, {
                                        name: J$.T(5089833, 'dmodq', 21, false),
                                        data: J$.R(5089841, 'dmodq', dmodq, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5089905, J$.F(5089897, J$.R(5089881, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5089889, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096769, J$e);
                        } finally {
                            if (J$.Fr(5096777))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPrivate(der) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5090489, arguments.callee, this, arguments);
                            arguments = J$.N(5090497, 'arguments', arguments, true, false, false);
                            der = J$.N(5090505, 'der', der, true, false, false);
                            J$.N(5090513, 'version', version, false, false, false);
                            J$.N(5090521, 'p', p, false, false, false);
                            J$.N(5090529, 'q', q, false, false, false);
                            J$.N(5090537, 'g', g, false, false, false);
                            J$.N(5090545, 'y', y, false, false, false);
                            J$.N(5090553, 'x', x, false, false, false);
                            J$.N(5090561, 'key', key, false, false, false);
                            var version = J$.W(5090049, 'version', J$.F(5090041, J$.R(5090017, 'readMPInt', readMPInt, false, true), false)(J$.R(5090025, 'der', der, false, false), J$.T(5090033, 'version', 21, false)), version, false, false);
                            J$.M(5090097, J$.R(5090057, 'assert', assert, false, true), 'strictEqual', false)(J$.M(5090081, J$.R(5090065, 'version', version, false, false), 'readUInt8', false)(J$.T(5090073, 0, 22, false)), J$.T(5090089, 0, 22, false));
                            var p = J$.W(5090137, 'p', J$.F(5090129, J$.R(5090105, 'readMPInt', readMPInt, false, true), false)(J$.R(5090113, 'der', der, false, false), J$.T(5090121, 'p', 21, false)), p, false, false);
                            var q = J$.W(5090177, 'q', J$.F(5090169, J$.R(5090145, 'readMPInt', readMPInt, false, true), false)(J$.R(5090153, 'der', der, false, false), J$.T(5090161, 'q', 21, false)), q, false, false);
                            var g = J$.W(5090217, 'g', J$.F(5090209, J$.R(5090185, 'readMPInt', readMPInt, false, true), false)(J$.R(5090193, 'der', der, false, false), J$.T(5090201, 'g', 21, false)), g, false, false);
                            var y = J$.W(5090257, 'y', J$.F(5090249, J$.R(5090225, 'readMPInt', readMPInt, false, true), false)(J$.R(5090233, 'der', der, false, false), J$.T(5090241, 'y', 21, false)), y, false, false);
                            var x = J$.W(5090297, 'x', J$.F(5090289, J$.R(5090265, 'readMPInt', readMPInt, false, true), false)(J$.R(5090273, 'der', der, false, false), J$.T(5090281, 'x', 21, false)), x, false, false);
                            var key = J$.W(5090449, 'key', J$.T(5090441, {
                                type: J$.T(5090305, 'dsa', 21, false),
                                parts: J$.T(5090433, [
                                    J$.T(5090329, {
                                        name: J$.T(5090313, 'p', 21, false),
                                        data: J$.R(5090321, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(5090353, {
                                        name: J$.T(5090337, 'q', 21, false),
                                        data: J$.R(5090345, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(5090377, {
                                        name: J$.T(5090361, 'g', 21, false),
                                        data: J$.R(5090369, 'g', g, false, false)
                                    }, 11, false),
                                    J$.T(5090401, {
                                        name: J$.T(5090385, 'y', 21, false),
                                        data: J$.R(5090393, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(5090425, {
                                        name: J$.T(5090409, 'x', 21, false),
                                        data: J$.R(5090417, 'x', x, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5090481, J$.F(5090473, J$.R(5090457, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5090465, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096785, J$e);
                        } finally {
                            if (J$.Fr(5096793))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1EdDSAPrivate(der) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5090993, arguments.callee, this, arguments);
                            arguments = J$.N(5091001, 'arguments', arguments, true, false, false);
                            der = J$.N(5091009, 'der', der, true, false, false);
                            J$.N(5091017, 'version', version, false, false, false);
                            J$.N(5091025, 'k', k, false, false, false);
                            J$.N(5091033, 'oid', oid, false, false, false);
                            J$.N(5091041, 'A', A, false, false, false);
                            J$.N(5091049, 'key', key, false, false, false);
                            var version = J$.W(5090601, 'version', J$.F(5090593, J$.R(5090569, 'readMPInt', readMPInt, false, true), false)(J$.R(5090577, 'der', der, false, false), J$.T(5090585, 'version', 21, false)), version, false, false);
                            J$.M(5090649, J$.R(5090609, 'assert', assert, false, true), 'strictEqual', false)(J$.M(5090633, J$.R(5090617, 'version', version, false, false), 'readUInt8', false)(J$.T(5090625, 0, 22, false)), J$.T(5090641, 1, 22, false));
                            var k = J$.W(5090705, 'k', J$.M(5090697, J$.R(5090657, 'der', der, false, false), 'readString', false)(J$.G(5090681, J$.G(5090673, J$.R(5090665, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(5090689, true, 23, false)), k, false, false);
                            J$.M(5090729, J$.R(5090713, 'der', der, false, false), 'readSequence', false)(J$.T(5090721, 160, 22, false));
                            var oid = J$.W(5090753, 'oid', J$.M(5090745, J$.R(5090737, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(5090793, J$.R(5090761, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5090769, 'oid', oid, false, false), J$.T(5090777, '1.3.101.112', 21, false), J$.T(5090785, 'the ed25519 curve identifier', 21, false));
                            J$.M(5090817, J$.R(5090801, 'der', der, false, false), 'readSequence', false)(J$.T(5090809, 161, 22, false));
                            var A = J$.W(5090849, 'A', J$.M(5090841, J$.R(5090825, 'utils', utils, false, true), 'readBitString', false)(J$.R(5090833, 'der', der, false, false)), A, false, false);
                            var key = J$.W(5090953, 'key', J$.T(5090945, {
                                type: J$.T(5090857, 'ed25519', 21, false),
                                parts: J$.T(5090937, [
                                    J$.T(5090905, {
                                        name: J$.T(5090865, 'A', 21, false),
                                        data: J$.M(5090897, J$.R(5090873, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(5090881, 'A', A, false, false), J$.T(5090889, 32, 22, false))
                                    }, 11, false),
                                    J$.T(5090929, {
                                        name: J$.T(5090913, 'k', 21, false),
                                        data: J$.R(5090921, 'k', k, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5090985, J$.F(5090977, J$.R(5090961, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5090969, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096801, J$e);
                        } finally {
                            if (J$.Fr(5096809))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPublic(der) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(5091377, arguments.callee, this, arguments);
                            arguments = J$.N(5091385, 'arguments', arguments, true, false, false);
                            der = J$.N(5091393, 'der', der, true, false, false);
                            J$.N(5091401, 'y', y, false, false, false);
                            J$.N(5091409, 'p', p, false, false, false);
                            J$.N(5091417, 'q', q, false, false, false);
                            J$.N(5091425, 'g', g, false, false, false);
                            J$.N(5091433, 'key', key, false, false, false);
                            var y = J$.W(5091089, 'y', J$.F(5091081, J$.R(5091057, 'readMPInt', readMPInt, false, true), false)(J$.R(5091065, 'der', der, false, false), J$.T(5091073, 'y', 21, false)), y, false, false);
                            var p = J$.W(5091129, 'p', J$.F(5091121, J$.R(5091097, 'readMPInt', readMPInt, false, true), false)(J$.R(5091105, 'der', der, false, false), J$.T(5091113, 'p', 21, false)), p, false, false);
                            var q = J$.W(5091169, 'q', J$.F(5091161, J$.R(5091137, 'readMPInt', readMPInt, false, true), false)(J$.R(5091145, 'der', der, false, false), J$.T(5091153, 'q', 21, false)), q, false, false);
                            var g = J$.W(5091209, 'g', J$.F(5091201, J$.R(5091177, 'readMPInt', readMPInt, false, true), false)(J$.R(5091185, 'der', der, false, false), J$.T(5091193, 'g', 21, false)), g, false, false);
                            var key = J$.W(5091337, 'key', J$.T(5091329, {
                                type: J$.T(5091217, 'dsa', 21, false),
                                parts: J$.T(5091321, [
                                    J$.T(5091241, {
                                        name: J$.T(5091225, 'y', 21, false),
                                        data: J$.R(5091233, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(5091265, {
                                        name: J$.T(5091249, 'p', 21, false),
                                        data: J$.R(5091257, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(5091289, {
                                        name: J$.T(5091273, 'q', 21, false),
                                        data: J$.R(5091281, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(5091313, {
                                        name: J$.T(5091297, 'g', 21, false),
                                        data: J$.R(5091305, 'g', g, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5091369, J$.F(5091361, J$.R(5091345, 'Key', Key, false, true), true)(J$.R(5091353, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096817, J$e);
                        } finally {
                            if (J$.Fr(5096825))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPublic(der) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5092001, arguments.callee, this, arguments);
                            arguments = J$.N(5092009, 'arguments', arguments, true, false, false);
                            der = J$.N(5092017, 'der', der, true, false, false);
                            J$.N(5092025, 'oid', oid, false, false, false);
                            J$.N(5092033, 'curveOid', curveOid, false, false, false);
                            J$.N(5092041, 'curve', curve, false, false, false);
                            J$.N(5092049, 'curves', curves, false, false, false);
                            J$.N(5092057, 'j', j, false, false, false);
                            J$.N(5092065, 'c', c, false, false, false);
                            J$.N(5092073, 'cd', cd, false, false, false);
                            J$.N(5092081, 'Q', Q, false, false, false);
                            J$.N(5092089, 'key', key, false, false, false);
                            J$.M(5091449, J$.R(5091441, 'der', der, false, false), 'readSequence', false)();
                            var oid = J$.W(5091473, 'oid', J$.M(5091465, J$.R(5091457, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(5091513, J$.R(5091481, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5091489, 'oid', oid, false, false), J$.T(5091497, '1.2.840.10045.2.1', 21, false), J$.T(5091505, 'must be ecPublicKey', 21, false));
                            var curveOid = J$.W(5091537, 'curveOid', J$.M(5091529, J$.R(5091521, 'der', der, false, false), 'readOID', false)(), curveOid, false, false);
                            var curve;
                            var curves = J$.W(5091577, 'curves', J$.M(5091569, J$.I(typeof Object === 'undefined' ? Object = J$.R(5091545, 'Object', undefined, true, true) : Object = J$.R(5091545, 'Object', Object, true, true)), 'keys', false)(J$.G(5091561, J$.R(5091553, 'algs', algs, false, true), 'curves')), curves, false, false);
                            for (var j = J$.W(5091593, 'j', J$.T(5091585, 0, 22, false), j, false, false); J$.C(273368, J$.B(587986, '<', J$.R(5091601, 'j', j, false, false), J$.G(5091617, J$.R(5091609, 'curves', curves, false, false), 'length'))); j = J$.W(5091633, 'j', J$.B(588002, '+', J$.U(587994, '+', J$.R(5091625, 'j', j, false, false)), 1), j, false, false)) {
                                var c = J$.W(5091665, 'c', J$.G(5091657, J$.R(5091641, 'curves', curves, false, false), J$.R(5091649, 'j', j, false, false)), c, false, false);
                                var cd = J$.W(5091705, 'cd', J$.G(5091697, J$.G(5091681, J$.R(5091673, 'algs', algs, false, true), 'curves'), J$.R(5091689, 'c', c, false, false)), cd, false, false);
                                if (J$.C(273360, J$.B(588010, '===', J$.G(5091721, J$.R(5091713, 'cd', cd, false, false), 'pkcs8oid'), J$.R(5091729, 'curveOid', curveOid, false, false)))) {
                                    curve = J$.W(5091745, 'curve', J$.R(5091737, 'c', c, false, false), curve, false, false);
                                    break;
                                }
                            }
                            J$.M(5091777, J$.R(5091753, 'assert', assert, false, true), 'string', false)(J$.R(5091761, 'curve', curve, false, false), J$.T(5091769, 'a known ECDSA named curve', 21, false));
                            var Q = J$.W(5091833, 'Q', J$.M(5091825, J$.R(5091785, 'der', der, false, false), 'readString', false)(J$.G(5091809, J$.G(5091801, J$.R(5091793, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(5091817, true, 23, false)), Q, false, false);
                            Q = J$.W(5091865, 'Q', J$.M(5091857, J$.R(5091841, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(5091849, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(5091961, 'key', J$.T(5091953, {
                                type: J$.T(5091873, 'ecdsa', 21, false),
                                parts: J$.T(5091945, [
                                    J$.T(5091913, {
                                        name: J$.T(5091881, 'curve', 21, false),
                                        data: J$.M(5091905, J$.R(5091889, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5091897, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(5091937, {
                                        name: J$.T(5091921, 'Q', 21, false),
                                        data: J$.R(5091929, 'Q', Q, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5091993, J$.F(5091985, J$.R(5091969, 'Key', Key, false, true), true)(J$.R(5091977, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096833, J$e);
                        } finally {
                            if (J$.Fr(5096841))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPrivate(der) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5092593, arguments.callee, this, arguments);
                            arguments = J$.N(5092601, 'arguments', arguments, true, false, false);
                            der = J$.N(5092609, 'der', der, true, false, false);
                            J$.N(5092617, 'version', version, false, false, false);
                            J$.N(5092625, 'd', d, false, false, false);
                            J$.N(5092633, 'curve', curve, false, false, false);
                            J$.N(5092641, 'Q', Q, false, false, false);
                            J$.N(5092649, 'key', key, false, false, false);
                            var version = J$.W(5092129, 'version', J$.F(5092121, J$.R(5092097, 'readMPInt', readMPInt, false, true), false)(J$.R(5092105, 'der', der, false, false), J$.T(5092113, 'version', 21, false)), version, false, false);
                            J$.M(5092177, J$.R(5092137, 'assert', assert, false, true), 'strictEqual', false)(J$.M(5092161, J$.R(5092145, 'version', version, false, false), 'readUInt8', false)(J$.T(5092153, 0, 22, false)), J$.T(5092169, 1, 22, false));
                            var d = J$.W(5092233, 'd', J$.M(5092225, J$.R(5092185, 'der', der, false, false), 'readString', false)(J$.G(5092209, J$.G(5092201, J$.R(5092193, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(5092217, true, 23, false)), d, false, false);
                            J$.M(5092257, J$.R(5092241, 'der', der, false, false), 'readSequence', false)(J$.T(5092249, 160, 22, false));
                            var curve = J$.W(5092289, 'curve', J$.F(5092281, J$.R(5092265, 'readECDSACurve', readECDSACurve, false, true), false)(J$.R(5092273, 'der', der, false, false)), curve, false, false);
                            J$.M(5092321, J$.R(5092297, 'assert', assert, false, true), 'string', false)(J$.R(5092305, 'curve', curve, false, false), J$.T(5092313, 'a known elliptic curve', 21, false));
                            J$.M(5092345, J$.R(5092329, 'der', der, false, false), 'readSequence', false)(J$.T(5092337, 161, 22, false));
                            var Q = J$.W(5092401, 'Q', J$.M(5092393, J$.R(5092353, 'der', der, false, false), 'readString', false)(J$.G(5092377, J$.G(5092369, J$.R(5092361, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(5092385, true, 23, false)), Q, false, false);
                            Q = J$.W(5092433, 'Q', J$.M(5092425, J$.R(5092409, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(5092417, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(5092553, 'key', J$.T(5092545, {
                                type: J$.T(5092441, 'ecdsa', 21, false),
                                parts: J$.T(5092537, [
                                    J$.T(5092481, {
                                        name: J$.T(5092449, 'curve', 21, false),
                                        data: J$.M(5092473, J$.R(5092457, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5092465, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(5092505, {
                                        name: J$.T(5092489, 'Q', 21, false),
                                        data: J$.R(5092497, 'Q', Q, false, false)
                                    }, 11, false),
                                    J$.T(5092529, {
                                        name: J$.T(5092513, 'd', 21, false),
                                        data: J$.R(5092521, 'd', d, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(5092585, J$.F(5092577, J$.R(5092561, 'PrivateKey', PrivateKey, false, true), true)(J$.R(5092569, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(5096849, J$e);
                        } finally {
                            if (J$.Fr(5096857))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1(der, key) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(5093129, arguments.callee, this, arguments);
                            arguments = J$.N(5093137, 'arguments', arguments, true, false, false);
                            der = J$.N(5093145, 'der', der, true, false, false);
                            key = J$.N(5093153, 'key', key, true, false, false);
                            J$.M(5092665, J$.R(5092657, 'der', der, false, false), 'startSequence', false)();
                            switch (J$.C1(273408, J$.G(5092681, J$.R(5092673, 'key', key, false, false), 'type'))) {
                            case J$.C2(273416, J$.T(5092777, 'rsa', 21, false)):
                                if (J$.C(273376, J$.M(5092705, J$.R(5092689, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5092697, 'key', key, false, false))))
                                    J$.F(5092737, J$.R(5092713, 'writePkcs1RSAPrivate', writePkcs1RSAPrivate, false, true), false)(J$.R(5092721, 'der', der, false, false), J$.R(5092729, 'key', key, false, false));
                                else
                                    J$.F(5092769, J$.R(5092745, 'writePkcs1RSAPublic', writePkcs1RSAPublic, false, true), false)(J$.R(5092753, 'der', der, false, false), J$.R(5092761, 'key', key, false, false));
                                break;
                            case J$.C2(273424, J$.T(5092873, 'dsa', 21, false)):
                                if (J$.C(273384, J$.M(5092801, J$.R(5092785, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5092793, 'key', key, false, false))))
                                    J$.F(5092833, J$.R(5092809, 'writePkcs1DSAPrivate', writePkcs1DSAPrivate, false, true), false)(J$.R(5092817, 'der', der, false, false), J$.R(5092825, 'key', key, false, false));
                                else
                                    J$.F(5092865, J$.R(5092841, 'writePkcs1DSAPublic', writePkcs1DSAPublic, false, true), false)(J$.R(5092849, 'der', der, false, false), J$.R(5092857, 'key', key, false, false));
                                break;
                            case J$.C2(273432, J$.T(5092969, 'ecdsa', 21, false)):
                                if (J$.C(273392, J$.M(5092897, J$.R(5092881, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5092889, 'key', key, false, false))))
                                    J$.F(5092929, J$.R(5092905, 'writePkcs1ECDSAPrivate', writePkcs1ECDSAPrivate, false, true), false)(J$.R(5092913, 'der', der, false, false), J$.R(5092921, 'key', key, false, false));
                                else
                                    J$.F(5092961, J$.R(5092937, 'writePkcs1ECDSAPublic', writePkcs1ECDSAPublic, false, true), false)(J$.R(5092945, 'der', der, false, false), J$.R(5092953, 'key', key, false, false));
                                break;
                            case J$.C2(273440, J$.T(5093065, 'ed25519', 21, false)):
                                if (J$.C(273400, J$.M(5092993, J$.R(5092977, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5092985, 'key', key, false, false))))
                                    J$.F(5093025, J$.R(5093001, 'writePkcs1EdDSAPrivate', writePkcs1EdDSAPrivate, false, true), false)(J$.R(5093009, 'der', der, false, false), J$.R(5093017, 'key', key, false, false));
                                else
                                    J$.F(5093057, J$.R(5093033, 'writePkcs1EdDSAPublic', writePkcs1EdDSAPublic, false, true), false)(J$.R(5093041, 'der', der, false, false), J$.R(5093049, 'key', key, false, false));
                                break;
                            default:
                                throw J$.F(5093105, J$.I(typeof Error === 'undefined' ? Error = J$.R(5093073, 'Error', undefined, true, true) : Error = J$.R(5093073, 'Error', Error, true, true)), true)(J$.B(588018, '+', J$.T(5093081, 'Unknown key algo: ', 21, false), J$.G(5093097, J$.R(5093089, 'key', key, false, false), 'type')));
                            }
                            J$.M(5093121, J$.R(5093113, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(5096865, J$e);
                        } finally {
                            if (J$.Fr(5096873))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPublic(der, key) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(5093305, arguments.callee, this, arguments);
                            arguments = J$.N(5093313, 'arguments', arguments, true, false, false);
                            der = J$.N(5093321, 'der', der, true, false, false);
                            key = J$.N(5093329, 'key', key, true, false, false);
                            J$.M(5093225, J$.R(5093161, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093193, J$.G(5093185, J$.G(5093177, J$.R(5093169, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(5093217, J$.G(5093209, J$.R(5093201, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093297, J$.R(5093233, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093265, J$.G(5093257, J$.G(5093249, J$.R(5093241, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(5093289, J$.G(5093281, J$.R(5093273, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(5096881, J$e);
                        } finally {
                            if (J$.Fr(5096889))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPrivate(der, key) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(5094073, arguments.callee, this, arguments);
                            arguments = J$.N(5094081, 'arguments', arguments, true, false, false);
                            der = J$.N(5094089, 'der', der, true, false, false);
                            key = J$.N(5094097, 'key', key, true, false, false);
                            J$.N(5094105, 'ver', ver, false, false, false);
                            var ver = J$.W(5093369, 'ver', J$.M(5093361, J$.R(5093337, 'Buffer', Buffer, false, true), 'from', false)(J$.T(5093353, [J$.T(5093345, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(5093417, J$.R(5093377, 'der', der, false, false), 'writeBuffer', false)(J$.R(5093385, 'ver', ver, false, false), J$.G(5093409, J$.G(5093401, J$.R(5093393, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093489, J$.R(5093425, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093457, J$.G(5093449, J$.G(5093441, J$.R(5093433, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(5093481, J$.G(5093473, J$.R(5093465, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093561, J$.R(5093497, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093529, J$.G(5093521, J$.G(5093513, J$.R(5093505, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(5093553, J$.G(5093545, J$.R(5093537, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093633, J$.R(5093569, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093601, J$.G(5093593, J$.G(5093585, J$.R(5093577, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(5093625, J$.G(5093617, J$.R(5093609, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093705, J$.R(5093641, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093673, J$.G(5093665, J$.G(5093657, J$.R(5093649, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(5093697, J$.G(5093689, J$.R(5093681, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093777, J$.R(5093713, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093745, J$.G(5093737, J$.G(5093729, J$.R(5093721, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(5093769, J$.G(5093761, J$.R(5093753, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            if (J$.C(273456, J$.C(273448, J$.U(588026, '!', J$.G(5093801, J$.G(5093793, J$.R(5093785, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(588034, '!', J$.G(5093825, J$.G(5093817, J$.R(5093809, 'key', key, false, false), 'part'), 'dmodq'))))
                                J$.M(5093849, J$.R(5093833, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(5093841, 'key', key, false, false));
                            J$.M(5093921, J$.R(5093857, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093889, J$.G(5093881, J$.G(5093873, J$.R(5093865, 'key', key, false, false), 'part'), 'dmodp'), 'data'), J$.G(5093913, J$.G(5093905, J$.R(5093897, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5093993, J$.R(5093929, 'der', der, false, false), 'writeBuffer', false)(J$.G(5093961, J$.G(5093953, J$.G(5093945, J$.R(5093937, 'key', key, false, false), 'part'), 'dmodq'), 'data'), J$.G(5093985, J$.G(5093977, J$.R(5093969, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094065, J$.R(5094001, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094033, J$.G(5094025, J$.G(5094017, J$.R(5094009, 'key', key, false, false), 'part'), 'iqmp'), 'data'), J$.G(5094057, J$.G(5094049, J$.R(5094041, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(5096897, J$e);
                        } finally {
                            if (J$.Fr(5096905))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPrivate(der, key) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(5094561, arguments.callee, this, arguments);
                            arguments = J$.N(5094569, 'arguments', arguments, true, false, false);
                            der = J$.N(5094577, 'der', der, true, false, false);
                            key = J$.N(5094585, 'key', key, true, false, false);
                            J$.N(5094593, 'ver', ver, false, false, false);
                            var ver = J$.W(5094145, 'ver', J$.M(5094137, J$.R(5094113, 'Buffer', Buffer, false, true), 'from', false)(J$.T(5094129, [J$.T(5094121, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(5094193, J$.R(5094153, 'der', der, false, false), 'writeBuffer', false)(J$.R(5094161, 'ver', ver, false, false), J$.G(5094185, J$.G(5094177, J$.R(5094169, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094265, J$.R(5094201, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094233, J$.G(5094225, J$.G(5094217, J$.R(5094209, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(5094257, J$.G(5094249, J$.R(5094241, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094337, J$.R(5094273, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094305, J$.G(5094297, J$.G(5094289, J$.R(5094281, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(5094329, J$.G(5094321, J$.R(5094313, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094409, J$.R(5094345, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094377, J$.G(5094369, J$.G(5094361, J$.R(5094353, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(5094401, J$.G(5094393, J$.R(5094385, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094481, J$.R(5094417, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094449, J$.G(5094441, J$.G(5094433, J$.R(5094425, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(5094473, J$.G(5094465, J$.R(5094457, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094553, J$.R(5094489, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094521, J$.G(5094513, J$.G(5094505, J$.R(5094497, 'key', key, false, false), 'part'), 'x'), 'data'), J$.G(5094545, J$.G(5094537, J$.R(5094529, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(5096913, J$e);
                        } finally {
                            if (J$.Fr(5096921))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPublic(der, key) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(5094889, arguments.callee, this, arguments);
                            arguments = J$.N(5094897, 'arguments', arguments, true, false, false);
                            der = J$.N(5094905, 'der', der, true, false, false);
                            key = J$.N(5094913, 'key', key, true, false, false);
                            J$.M(5094665, J$.R(5094601, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094633, J$.G(5094625, J$.G(5094617, J$.R(5094609, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(5094657, J$.G(5094649, J$.R(5094641, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094737, J$.R(5094673, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094705, J$.G(5094697, J$.G(5094689, J$.R(5094681, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(5094729, J$.G(5094721, J$.R(5094713, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094809, J$.R(5094745, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094777, J$.G(5094769, J$.G(5094761, J$.R(5094753, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(5094801, J$.G(5094793, J$.R(5094785, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5094881, J$.R(5094817, 'der', der, false, false), 'writeBuffer', false)(J$.G(5094849, J$.G(5094841, J$.G(5094833, J$.R(5094825, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(5094873, J$.G(5094865, J$.R(5094857, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(5096929, J$e);
                        } finally {
                            if (J$.Fr(5096937))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPublic(der, key) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(5095241, arguments.callee, this, arguments);
                            arguments = J$.N(5095249, 'arguments', arguments, true, false, false);
                            der = J$.N(5095257, 'der', der, true, false, false);
                            key = J$.N(5095265, 'key', key, true, false, false);
                            J$.N(5095273, 'curve', curve, false, false, false);
                            J$.N(5095281, 'curveOid', curveOid, false, false, false);
                            J$.N(5095289, 'Q', Q, false, false, false);
                            J$.M(5094929, J$.R(5094921, 'der', der, false, false), 'startSequence', false)();
                            J$.M(5094953, J$.R(5094937, 'der', der, false, false), 'writeOID', false)(J$.T(5094945, '1.2.840.10045.2.1', 21, false));
                            var curve = J$.W(5095001, 'curve', J$.M(5094993, J$.G(5094985, J$.G(5094977, J$.G(5094969, J$.R(5094961, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(5095049, 'curveOid', J$.G(5095041, J$.G(5095033, J$.G(5095017, J$.R(5095009, 'algs', algs, false, true), 'curves'), J$.R(5095025, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(5095081, J$.R(5095057, 'assert', assert, false, true), 'string', false)(J$.R(5095065, 'curveOid', curveOid, false, false), J$.T(5095073, 'a known ECDSA named curve', 21, false));
                            J$.M(5095105, J$.R(5095089, 'der', der, false, false), 'writeOID', false)(J$.R(5095097, 'curveOid', curveOid, false, false));
                            J$.M(5095121, J$.R(5095113, 'der', der, false, false), 'endSequence', false)();
                            var Q = J$.W(5095185, 'Q', J$.M(5095177, J$.R(5095129, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(5095161, J$.G(5095153, J$.G(5095145, J$.R(5095137, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(5095169, true, 23, false)), Q, false, false);
                            J$.M(5095233, J$.R(5095193, 'der', der, false, false), 'writeBuffer', false)(J$.R(5095201, 'Q', Q, false, false), J$.G(5095225, J$.G(5095217, J$.R(5095209, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                        } catch (J$e) {
                            J$.Ex(5096945, J$e);
                        } finally {
                            if (J$.Fr(5096953))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPrivate(der, key) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(5095801, arguments.callee, this, arguments);
                            arguments = J$.N(5095809, 'arguments', arguments, true, false, false);
                            der = J$.N(5095817, 'der', der, true, false, false);
                            key = J$.N(5095825, 'key', key, true, false, false);
                            J$.N(5095833, 'ver', ver, false, false, false);
                            J$.N(5095841, 'curve', curve, false, false, false);
                            J$.N(5095849, 'curveOid', curveOid, false, false, false);
                            J$.N(5095857, 'Q', Q, false, false, false);
                            var ver = J$.W(5095329, 'ver', J$.M(5095321, J$.R(5095297, 'Buffer', Buffer, false, true), 'from', false)(J$.T(5095313, [J$.T(5095305, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(5095377, J$.R(5095337, 'der', der, false, false), 'writeBuffer', false)(J$.R(5095345, 'ver', ver, false, false), J$.G(5095369, J$.G(5095361, J$.R(5095353, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5095449, J$.R(5095385, 'der', der, false, false), 'writeBuffer', false)(J$.G(5095417, J$.G(5095409, J$.G(5095401, J$.R(5095393, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(5095441, J$.G(5095433, J$.R(5095425, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(5095473, J$.R(5095457, 'der', der, false, false), 'startSequence', false)(J$.T(5095465, 160, 22, false));
                            var curve = J$.W(5095521, 'curve', J$.M(5095513, J$.G(5095505, J$.G(5095497, J$.G(5095489, J$.R(5095481, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(5095569, 'curveOid', J$.G(5095561, J$.G(5095553, J$.G(5095537, J$.R(5095529, 'algs', algs, false, true), 'curves'), J$.R(5095545, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(5095601, J$.R(5095577, 'assert', assert, false, true), 'string', false)(J$.R(5095585, 'curveOid', curveOid, false, false), J$.T(5095593, 'a known ECDSA named curve', 21, false));
                            J$.M(5095625, J$.R(5095609, 'der', der, false, false), 'writeOID', false)(J$.R(5095617, 'curveOid', curveOid, false, false));
                            J$.M(5095641, J$.R(5095633, 'der', der, false, false), 'endSequence', false)();
                            J$.M(5095665, J$.R(5095649, 'der', der, false, false), 'startSequence', false)(J$.T(5095657, 161, 22, false));
                            var Q = J$.W(5095729, 'Q', J$.M(5095721, J$.R(5095673, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(5095705, J$.G(5095697, J$.G(5095689, J$.R(5095681, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(5095713, true, 23, false)), Q, false, false);
                            J$.M(5095777, J$.R(5095737, 'der', der, false, false), 'writeBuffer', false)(J$.R(5095745, 'Q', Q, false, false), J$.G(5095769, J$.G(5095761, J$.R(5095753, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                            J$.M(5095793, J$.R(5095785, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(5096961, J$e);
                        } finally {
                            if (J$.Fr(5096969))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPrivate(der, key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(5096185, arguments.callee, this, arguments);
                            arguments = J$.N(5096193, 'arguments', arguments, true, false, false);
                            der = J$.N(5096201, 'der', der, true, false, false);
                            key = J$.N(5096209, 'key', key, true, false, false);
                            J$.N(5096217, 'ver', ver, false, false, false);
                            var ver = J$.W(5095897, 'ver', J$.M(5095889, J$.R(5095865, 'Buffer', Buffer, false, true), 'from', false)(J$.T(5095881, [J$.T(5095873, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(5095945, J$.R(5095905, 'der', der, false, false), 'writeBuffer', false)(J$.R(5095913, 'ver', ver, false, false), J$.G(5095937, J$.G(5095929, J$.R(5095921, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(5096017, J$.R(5095953, 'der', der, false, false), 'writeBuffer', false)(J$.G(5095985, J$.G(5095977, J$.G(5095969, J$.R(5095961, 'key', key, false, false), 'part'), 'k'), 'data'), J$.G(5096009, J$.G(5096001, J$.R(5095993, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(5096041, J$.R(5096025, 'der', der, false, false), 'startSequence', false)(J$.T(5096033, 160, 22, false));
                            J$.M(5096065, J$.R(5096049, 'der', der, false, false), 'writeOID', false)(J$.T(5096057, '1.3.101.112', 21, false));
                            J$.M(5096081, J$.R(5096073, 'der', der, false, false), 'endSequence', false)();
                            J$.M(5096105, J$.R(5096089, 'der', der, false, false), 'startSequence', false)(J$.T(5096097, 161, 22, false));
                            J$.M(5096161, J$.R(5096113, 'utils', utils, false, true), 'writeBitString', false)(J$.R(5096121, 'der', der, false, false), J$.G(5096153, J$.G(5096145, J$.G(5096137, J$.R(5096129, 'key', key, false, false), 'part'), 'A'), 'data'));
                            J$.M(5096177, J$.R(5096169, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(5096977, J$e);
                        } finally {
                            if (J$.Fr(5096985))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPublic(der, key) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(5096249, arguments.callee, this, arguments);
                            arguments = J$.N(5096257, 'arguments', arguments, true, false, false);
                            der = J$.N(5096265, 'der', der, true, false, false);
                            key = J$.N(5096273, 'key', key, true, false, false);
                            throw J$.F(5096241, J$.I(typeof Error === 'undefined' ? Error = J$.R(5096225, 'Error', undefined, true, true) : Error = J$.R(5096225, 'Error', Error, true, true)), true)(J$.T(5096233, 'Public keys are not supported for EdDSA PKCS#1', 21, false));
                        } catch (J$e) {
                            J$.Ex(5096993, J$e);
                        } finally {
                            if (J$.Fr(5097001))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5096289, 'assert', assert, false, false, false);
            J$.N(5096297, 'asn1', asn1, false, false, false);
            J$.N(5096305, 'Buffer', Buffer, false, false, false);
            J$.N(5096313, 'algs', algs, false, false, false);
            J$.N(5096321, 'utils', utils, false, false, false);
            J$.N(5096329, 'Key', Key, false, false, false);
            J$.N(5096337, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5096345, 'pem', pem, false, false, false);
            J$.N(5096353, 'pkcs8', pkcs8, false, false, false);
            J$.N(5096361, 'readECDSACurve', readECDSACurve, false, false, false);
            read = J$.N(5096377, 'read', J$.T(5096369, read, 12, false), true, false, false);
            write = J$.N(5096393, 'write', J$.T(5096385, write, 12, false), true, false, false);
            readMPInt = J$.N(5096409, 'readMPInt', J$.T(5096401, readMPInt, 12, false), true, false, false);
            readPkcs1 = J$.N(5096425, 'readPkcs1', J$.T(5096417, readPkcs1, 12, false), true, false, false);
            readPkcs1RSAPublic = J$.N(5096441, 'readPkcs1RSAPublic', J$.T(5096433, readPkcs1RSAPublic, 12, false), true, false, false);
            readPkcs1RSAPrivate = J$.N(5096457, 'readPkcs1RSAPrivate', J$.T(5096449, readPkcs1RSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPrivate = J$.N(5096473, 'readPkcs1DSAPrivate', J$.T(5096465, readPkcs1DSAPrivate, 12, false), true, false, false);
            readPkcs1EdDSAPrivate = J$.N(5096489, 'readPkcs1EdDSAPrivate', J$.T(5096481, readPkcs1EdDSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPublic = J$.N(5096505, 'readPkcs1DSAPublic', J$.T(5096497, readPkcs1DSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPublic = J$.N(5096521, 'readPkcs1ECDSAPublic', J$.T(5096513, readPkcs1ECDSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPrivate = J$.N(5096537, 'readPkcs1ECDSAPrivate', J$.T(5096529, readPkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1 = J$.N(5096553, 'writePkcs1', J$.T(5096545, writePkcs1, 12, false), true, false, false);
            writePkcs1RSAPublic = J$.N(5096569, 'writePkcs1RSAPublic', J$.T(5096561, writePkcs1RSAPublic, 12, false), true, false, false);
            writePkcs1RSAPrivate = J$.N(5096585, 'writePkcs1RSAPrivate', J$.T(5096577, writePkcs1RSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPrivate = J$.N(5096601, 'writePkcs1DSAPrivate', J$.T(5096593, writePkcs1DSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPublic = J$.N(5096617, 'writePkcs1DSAPublic', J$.T(5096609, writePkcs1DSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPublic = J$.N(5096633, 'writePkcs1ECDSAPublic', J$.T(5096625, writePkcs1ECDSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPrivate = J$.N(5096649, 'writePkcs1ECDSAPrivate', J$.T(5096641, writePkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPrivate = J$.N(5096665, 'writePkcs1EdDSAPrivate', J$.T(5096657, writePkcs1EdDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPublic = J$.N(5096681, 'writePkcs1EdDSAPublic', J$.T(5096673, writePkcs1EdDSAPublic, 12, false), true, false, false);
            J$.P(5087753, J$.I(typeof module === 'undefined' ? module = J$.R(5087705, 'module', undefined, true, true) : module = J$.R(5087705, 'module', module, true, true)), 'exports', J$.T(5087745, {
                read: J$.R(5087713, 'read', read, false, true),
                readPkcs1: J$.R(5087721, 'readPkcs1', readPkcs1, false, true),
                write: J$.R(5087729, 'write', write, false, true),
                writePkcs1: J$.R(5087737, 'writePkcs1', writePkcs1, false, true)
            }, 11, false));
            var assert = J$.W(5087785, 'assert', J$.F(5087777, J$.I(typeof require === 'undefined' ? require = J$.R(5087761, 'require', undefined, true, true) : require = J$.R(5087761, 'require', require, true, true)), false)(J$.T(5087769, 'assert-plus', 21, false)), assert, false, true);
            var asn1 = J$.W(5087817, 'asn1', J$.F(5087809, J$.I(typeof require === 'undefined' ? require = J$.R(5087793, 'require', undefined, true, true) : require = J$.R(5087793, 'require', require, true, true)), false)(J$.T(5087801, 'asn1', 21, false)), asn1, false, true);
            var Buffer = J$.W(5087857, 'Buffer', J$.G(5087849, J$.F(5087841, J$.I(typeof require === 'undefined' ? require = J$.R(5087825, 'require', undefined, true, true) : require = J$.R(5087825, 'require', require, true, true)), false)(J$.T(5087833, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5087889, 'algs', J$.F(5087881, J$.I(typeof require === 'undefined' ? require = J$.R(5087865, 'require', undefined, true, true) : require = J$.R(5087865, 'require', require, true, true)), false)(J$.T(5087873, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(5087921, 'utils', J$.F(5087913, J$.I(typeof require === 'undefined' ? require = J$.R(5087897, 'require', undefined, true, true) : require = J$.R(5087897, 'require', require, true, true)), false)(J$.T(5087905, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(5087953, 'Key', J$.F(5087945, J$.I(typeof require === 'undefined' ? require = J$.R(5087929, 'require', undefined, true, true) : require = J$.R(5087929, 'require', require, true, true)), false)(J$.T(5087937, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5087985, 'PrivateKey', J$.F(5087977, J$.I(typeof require === 'undefined' ? require = J$.R(5087961, 'require', undefined, true, true) : require = J$.R(5087961, 'require', require, true, true)), false)(J$.T(5087969, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(5088017, 'pem', J$.F(5088009, J$.I(typeof require === 'undefined' ? require = J$.R(5087993, 'require', undefined, true, true) : require = J$.R(5087993, 'require', require, true, true)), false)(J$.T(5088001, './pem', 21, false)), pem, false, true);
            var pkcs8 = J$.W(5088049, 'pkcs8', J$.F(5088041, J$.I(typeof require === 'undefined' ? require = J$.R(5088025, 'require', undefined, true, true) : require = J$.R(5088025, 'require', require, true, true)), false)(J$.T(5088033, './pkcs8', 21, false)), pkcs8, false, true);
            var readECDSACurve = J$.W(5088073, 'readECDSACurve', J$.G(5088065, J$.R(5088057, 'pkcs8', pkcs8, false, true), 'readECDSACurve'), readECDSACurve, false, true);
        } catch (J$e) {
            J$.Ex(5097009, J$e);
        } finally {
            if (J$.Sr(5097017))
                continue jalangiLabel20;
            else
                break jalangiLabel20;
        }
    }
// JALANGI DO NOT INSTRUMENT

