J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(5061769, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/fingerprint.js');
            function Fingerprint(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5058137, arguments.callee, this, arguments);
                            arguments = J$.N(5058145, 'arguments', arguments, true, false, false);
                            opts = J$.N(5058153, 'opts', opts, true, false, false);
                            J$.M(5057793, J$.R(5057769, 'assert', assert, false, true), 'object', false)(J$.R(5057777, 'opts', opts, false, false), J$.T(5057785, 'options', 21, false));
                            J$.M(5057833, J$.R(5057801, 'assert', assert, false, true), 'string', false)(J$.G(5057817, J$.R(5057809, 'opts', opts, false, false), 'type'), J$.T(5057825, 'options.type', 21, false));
                            J$.M(5057873, J$.R(5057841, 'assert', assert, false, true), 'buffer', false)(J$.G(5057857, J$.R(5057849, 'opts', opts, false, false), 'hash'), J$.T(5057865, 'options.hash', 21, false));
                            J$.M(5057913, J$.R(5057881, 'assert', assert, false, true), 'string', false)(J$.G(5057897, J$.R(5057889, 'opts', opts, false, false), 'algorithm'), J$.T(5057905, 'options.algorithm', 21, false));
                            J$.P(5057953, J$.R(5057921, 'this', this, false, false), 'algorithm', J$.M(5057945, J$.G(5057937, J$.R(5057929, 'opts', opts, false, false), 'algorithm'), 'toLowerCase', false)());
                            if (J$.C(271592, J$.B(585346, '!==', J$.G(5057993, J$.G(5057969, J$.R(5057961, 'algs', algs, false, true), 'hashAlgs'), J$.G(5057985, J$.R(5057977, 'this', this, false, false), 'algorithm')), J$.T(5058001, true, 23, false))))
                                throw J$.F(5058033, J$.R(5058009, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.G(5058025, J$.R(5058017, 'this', this, false, false), 'algorithm'));
                            J$.P(5058065, J$.R(5058041, 'this', this, false, false), 'hash', J$.G(5058057, J$.R(5058049, 'opts', opts, false, false), 'hash'));
                            J$.P(5058097, J$.R(5058073, 'this', this, false, false), 'type', J$.G(5058089, J$.R(5058081, 'opts', opts, false, false), 'type'));
                            J$.P(5058129, J$.R(5058105, 'this', this, false, false), 'hashType', J$.G(5058121, J$.R(5058113, 'opts', opts, false, false), 'hashType'));
                        } catch (J$e) {
                            J$.Ex(5061945, J$e);
                        } finally {
                            if (J$.Fr(5061953))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addColons(s) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5061297, arguments.callee, this, arguments);
                            arguments = J$.N(5061305, 'arguments', arguments, true, false, false);
                            s = J$.N(5061313, 's', s, true, false, false);
                            return J$.Rt(5061289, J$.M(5061281, J$.R(5061257, 's', s, false, false), 'replace', false)(J$.T(5061265, /(.{2})(?=.)/g, 14, false), J$.T(5061273, '$1:', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5062041, J$e);
                        } finally {
                            if (J$.Fr(5062049))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function base64Strip(s) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5061361, arguments.callee, this, arguments);
                            arguments = J$.N(5061369, 'arguments', arguments, true, false, false);
                            s = J$.N(5061377, 's', s, true, false, false);
                            return J$.Rt(5061353, J$.M(5061345, J$.R(5061321, 's', s, false, false), 'replace', false)(J$.T(5061329, /=*$/, 14, false), J$.T(5061337, '', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5062057, J$e);
                        } finally {
                            if (J$.Fr(5062065))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sshBase64Format(alg, h) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(5061441, arguments.callee, this, arguments);
                            arguments = J$.N(5061449, 'arguments', arguments, true, false, false);
                            alg = J$.N(5061457, 'alg', alg, true, false, false);
                            h = J$.N(5061465, 'h', h, true, false, false);
                            return J$.Rt(5061433, J$.B(585602, '+', J$.B(585594, '+', J$.M(5061393, J$.R(5061385, 'alg', alg, false, false), 'toUpperCase', false)(), J$.T(5061401, ':', 21, false)), J$.F(5061425, J$.R(5061409, 'base64Strip', base64Strip, false, true), false)(J$.R(5061417, 'h', h, false, false))));
                        } catch (J$e) {
                            J$.Ex(5062073, J$e);
                        } finally {
                            if (J$.Fr(5062081))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5061777, 'assert', assert, false, false, false);
            J$.N(5061785, 'Buffer', Buffer, false, false, false);
            J$.N(5061793, 'algs', algs, false, false, false);
            J$.N(5061801, 'crypto', crypto, false, false, false);
            J$.N(5061809, 'errs', errs, false, false, false);
            J$.N(5061817, 'Key', Key, false, false, false);
            J$.N(5061825, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5061833, 'Certificate', Certificate, false, false, false);
            J$.N(5061841, 'utils', utils, false, false, false);
            J$.N(5061849, 'FingerprintFormatError', FingerprintFormatError, false, false, false);
            J$.N(5061857, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            Fingerprint = J$.N(5061873, 'Fingerprint', J$.T(5061865, Fingerprint, 12, false), true, false, false);
            J$.N(5061881, 'base64RE', base64RE, false, false, false);
            J$.N(5061889, 'hexRE', hexRE, false, false, false);
            addColons = J$.N(5061905, 'addColons', J$.T(5061897, addColons, 12, false), true, false, false);
            base64Strip = J$.N(5061921, 'base64Strip', J$.T(5061913, base64Strip, 12, false), true, false, false);
            sshBase64Format = J$.N(5061937, 'sshBase64Format', J$.T(5061929, sshBase64Format, 12, false), true, false, false);
            J$.P(5057417, J$.I(typeof module === 'undefined' ? module = J$.R(5057401, 'module', undefined, true, true) : module = J$.R(5057401, 'module', module, true, true)), 'exports', J$.R(5057409, 'Fingerprint', Fingerprint, false, true));
            var assert = J$.W(5057449, 'assert', J$.F(5057441, J$.I(typeof require === 'undefined' ? require = J$.R(5057425, 'require', undefined, true, true) : require = J$.R(5057425, 'require', require, true, true)), false)(J$.T(5057433, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5057489, 'Buffer', J$.G(5057481, J$.F(5057473, J$.I(typeof require === 'undefined' ? require = J$.R(5057457, 'require', undefined, true, true) : require = J$.R(5057457, 'require', require, true, true)), false)(J$.T(5057465, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5057521, 'algs', J$.F(5057513, J$.I(typeof require === 'undefined' ? require = J$.R(5057497, 'require', undefined, true, true) : require = J$.R(5057497, 'require', require, true, true)), false)(J$.T(5057505, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(5057553, 'crypto', J$.F(5057545, J$.I(typeof require === 'undefined' ? require = J$.R(5057529, 'require', undefined, true, true) : require = J$.R(5057529, 'require', require, true, true)), false)(J$.T(5057537, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(5057585, 'errs', J$.F(5057577, J$.I(typeof require === 'undefined' ? require = J$.R(5057561, 'require', undefined, true, true) : require = J$.R(5057561, 'require', require, true, true)), false)(J$.T(5057569, './errors', 21, false)), errs, false, true);
            var Key = J$.W(5057617, 'Key', J$.F(5057609, J$.I(typeof require === 'undefined' ? require = J$.R(5057593, 'require', undefined, true, true) : require = J$.R(5057593, 'require', require, true, true)), false)(J$.T(5057601, './key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(5057649, 'PrivateKey', J$.F(5057641, J$.I(typeof require === 'undefined' ? require = J$.R(5057625, 'require', undefined, true, true) : require = J$.R(5057625, 'require', require, true, true)), false)(J$.T(5057633, './private-key', 21, false)), PrivateKey, false, true);
            var Certificate = J$.W(5057681, 'Certificate', J$.F(5057673, J$.I(typeof require === 'undefined' ? require = J$.R(5057657, 'require', undefined, true, true) : require = J$.R(5057657, 'require', require, true, true)), false)(J$.T(5057665, './certificate', 21, false)), Certificate, false, true);
            var utils = J$.W(5057713, 'utils', J$.F(5057705, J$.I(typeof require === 'undefined' ? require = J$.R(5057689, 'require', undefined, true, true) : require = J$.R(5057689, 'require', require, true, true)), false)(J$.T(5057697, './utils', 21, false)), utils, false, true);
            var FingerprintFormatError = J$.W(5057737, 'FingerprintFormatError', J$.G(5057729, J$.R(5057721, 'errs', errs, false, true), 'FingerprintFormatError'), FingerprintFormatError, false, true);
            var InvalidAlgorithmError = J$.W(5057761, 'InvalidAlgorithmError', J$.G(5057753, J$.R(5057745, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            J$.P(5058641, J$.G(5058169, J$.R(5058161, 'Fingerprint', Fingerprint, false, true), 'prototype'), 'toString', J$.T(5058633, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5058609, arguments.callee, this, arguments);
                            arguments = J$.N(5058617, 'arguments', arguments, true, false, false);
                            format = J$.N(5058625, 'format', format, true, false, false);
                            if (J$.C(271616, J$.B(585354, '===', J$.R(5058177, 'format', format, false, false), J$.T(5058185, undefined, 24, false)))) {
                                if (J$.C(271608, J$.C(271600, J$.B(585362, '===', J$.G(5058201, J$.R(5058193, 'this', this, false, false), 'algorithm'), J$.T(5058209, 'md5', 21, false))) ? J$._() : J$.B(585370, '===', J$.G(5058225, J$.R(5058217, 'this', this, false, false), 'hashType'), J$.T(5058233, 'spki', 21, false))))
                                    format = J$.W(5058249, 'format', J$.T(5058241, 'hex', 21, false), format, false, false);
                                else
                                    format = J$.W(5058265, 'format', J$.T(5058257, 'base64', 21, false), format, false, false);
                            }
                            J$.M(5058289, J$.R(5058273, 'assert', assert, false, true), 'string', false)(J$.R(5058281, 'format', format, false, false));
                            switch (J$.C1(271640, J$.R(5058297, 'format', format, false, false))) {
                            case J$.C2(271648, J$.T(5058425, 'hex', 21, false)):
                                if (J$.C(271624, J$.B(585378, '===', J$.G(5058313, J$.R(5058305, 'this', this, false, false), 'hashType'), J$.T(5058321, 'spki', 21, false))))
                                    return J$.Rt(5058361, J$.M(5058353, J$.G(5058337, J$.R(5058329, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(5058345, 'hex', 21, false)));
                                return J$.Rt(5058417, J$.F(5058409, J$.R(5058369, 'addColons', addColons, false, true), false)(J$.M(5058401, J$.G(5058385, J$.R(5058377, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(5058393, 'hex', 21, false))));
                            case J$.C2(271656, J$.T(5058569, 'base64', 21, false)):
                                if (J$.C(271632, J$.B(585386, '===', J$.G(5058441, J$.R(5058433, 'this', this, false, false), 'hashType'), J$.T(5058449, 'spki', 21, false))))
                                    return J$.Rt(5058489, J$.M(5058481, J$.G(5058465, J$.R(5058457, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(5058473, 'base64', 21, false)));
                                return J$.Rt(5058561, J$.F(5058553, J$.R(5058497, 'sshBase64Format', sshBase64Format, false, true), false)(J$.G(5058513, J$.R(5058505, 'this', this, false, false), 'algorithm'), J$.M(5058545, J$.G(5058529, J$.R(5058521, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(5058537, 'base64', 21, false))));
                            default:
                                throw J$.F(5058601, J$.R(5058577, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.T(5058585, undefined, 24, false), J$.R(5058593, 'format', format, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5061961, J$e);
                        } finally {
                            if (J$.Fr(5061969))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5059369, J$.G(5058657, J$.R(5058649, 'Fingerprint', Fingerprint, false, true), 'prototype'), 'matches', J$.T(5059361, function (other) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5059321, arguments.callee, this, arguments);
                            arguments = J$.N(5059329, 'arguments', arguments, true, false, false);
                            other = J$.N(5059337, 'other', other, true, false, false);
                            J$.N(5059345, 'theirHash', theirHash, false, false, false);
                            J$.N(5059353, 'theirHash2', theirHash2, false, false, false);
                            J$.M(5058689, J$.R(5058665, 'assert', assert, false, true), 'object', false)(J$.R(5058673, 'other', other, false, false), J$.T(5058681, 'key or certificate', 21, false));
                            if (J$.C(271688, J$.C(271664, J$.B(585394, '===', J$.G(5058705, J$.R(5058697, 'this', this, false, false), 'type'), J$.T(5058713, 'key', 21, false))) ? J$.B(585402, '!==', J$.G(5058729, J$.R(5058721, 'this', this, false, false), 'hashType'), J$.T(5058737, 'ssh', 21, false)) : J$._())) {
                                J$.M(5058801, J$.R(5058745, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(5058753, 'other', other, false, false), J$.R(5058761, 'Key', Key, false, true), J$.T(5058785, [
                                    J$.T(5058769, 1, 22, false),
                                    J$.T(5058777, 7, 22, false)
                                ], 10, false), J$.T(5058793, 'key with spki', 21, false));
                                if (J$.C(271672, J$.M(5058825, J$.R(5058809, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(5058817, 'other', other, false, false)))) {
                                    J$.M(5058889, J$.R(5058833, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(5058841, 'other', other, false, false), J$.R(5058849, 'PrivateKey', PrivateKey, false, true), J$.T(5058873, [
                                        J$.T(5058857, 1, 22, false),
                                        J$.T(5058865, 6, 22, false)
                                    ], 10, false), J$.T(5058881, 'privatekey with spki support', 21, false));
                                }
                            } else if (J$.C(271680, J$.B(585410, '===', J$.G(5058905, J$.R(5058897, 'this', this, false, false), 'type'), J$.T(5058913, 'key', 21, false)))) {
                                J$.M(5058977, J$.R(5058921, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(5058929, 'other', other, false, false), J$.R(5058937, 'Key', Key, false, true), J$.T(5058961, [
                                    J$.T(5058945, 1, 22, false),
                                    J$.T(5058953, 0, 22, false)
                                ], 10, false), J$.T(5058969, 'key', 21, false));
                            } else {
                                J$.M(5059041, J$.R(5058985, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(5058993, 'other', other, false, false), J$.R(5059001, 'Certificate', Certificate, false, true), J$.T(5059025, [
                                    J$.T(5059009, 1, 22, false),
                                    J$.T(5059017, 0, 22, false)
                                ], 10, false), J$.T(5059033, 'certificate', 21, false));
                            }
                            var theirHash = J$.W(5059097, 'theirHash', J$.M(5059089, J$.R(5059049, 'other', other, false, false), 'hash', false)(J$.G(5059065, J$.R(5059057, 'this', this, false, false), 'algorithm'), J$.G(5059081, J$.R(5059073, 'this', this, false, false), 'hashType')), theirHash, false, false);
                            var theirHash2 = J$.W(5059169, 'theirHash2', J$.M(5059161, J$.M(5059145, J$.M(5059129, J$.R(5059105, 'crypto', crypto, false, true), 'createHash', false)(J$.G(5059121, J$.R(5059113, 'this', this, false, false), 'algorithm')), 'update', false)(J$.R(5059137, 'theirHash', theirHash, false, false)), 'digest', false)(J$.T(5059153, 'base64', 21, false)), theirHash2, false, false);
                            if (J$.C(271696, J$.B(585418, '===', J$.G(5059185, J$.R(5059177, 'this', this, false, false), 'hash2'), J$.T(5059193, undefined, 24, false))))
                                J$.P(5059281, J$.R(5059201, 'this', this, false, false), 'hash2', J$.M(5059273, J$.M(5059257, J$.M(5059233, J$.R(5059209, 'crypto', crypto, false, true), 'createHash', false)(J$.G(5059225, J$.R(5059217, 'this', this, false, false), 'algorithm')), 'update', false)(J$.G(5059249, J$.R(5059241, 'this', this, false, false), 'hash')), 'digest', false)(J$.T(5059265, 'base64', 21, false)));
                            return J$.Rt(5059313, J$.B(585426, '===', J$.G(5059297, J$.R(5059289, 'this', this, false, false), 'hash2'), J$.R(5059305, 'theirHash2', theirHash2, false, false)));
                        } catch (J$e) {
                            J$.Ex(5061977, J$e);
                        } finally {
                            if (J$.Fr(5061985))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var base64RE = J$.W(5059385, 'base64RE', J$.T(5059377, /^[A-Za-z0-9+\/=]+$/, 14, false), base64RE, false, true);
            var hexRE = J$.W(5059401, 'hexRE', J$.T(5059393, /^[a-fA-F0-9]+$/, 14, false), hexRE, false, true);
            J$.P(5061249, J$.R(5059409, 'Fingerprint', Fingerprint, false, true), 'parse', J$.T(5061241, function (fp, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5061169, arguments.callee, this, arguments);
                            arguments = J$.N(5061177, 'arguments', arguments, true, false, false);
                            fp = J$.N(5061185, 'fp', fp, true, false, false);
                            options = J$.N(5061193, 'options', options, true, false, false);
                            J$.N(5061201, 'alg', alg, false, false, false);
                            J$.N(5061209, 'hash', hash, false, false, false);
                            J$.N(5061217, 'enAlgs', enAlgs, false, false, false);
                            J$.N(5061225, 'hashType', hashType, false, false, false);
                            J$.N(5061233, 'parts', parts, false, false, false);
                            J$.M(5059441, J$.R(5059417, 'assert', assert, false, true), 'string', false)(J$.R(5059425, 'fp', fp, false, false), J$.T(5059433, 'fingerprint', 21, false));
                            var alg, hash, enAlgs;
                            if (J$.C(271704, J$.M(5059465, J$.I(typeof Array === 'undefined' ? Array = J$.R(5059449, 'Array', undefined, true, true) : Array = J$.R(5059449, 'Array', Array, true, true)), 'isArray', false)(J$.R(5059457, 'options', options, false, false)))) {
                                enAlgs = J$.W(5059481, 'enAlgs', J$.R(5059473, 'options', options, false, false), enAlgs, false, false);
                                options = J$.W(5059497, 'options', J$.T(5059489, {}, 11, false), options, false, false);
                            }
                            J$.M(5059529, J$.R(5059505, 'assert', assert, false, true), 'optionalObject', false)(J$.R(5059513, 'options', options, false, false), J$.T(5059521, 'options', 21, false));
                            if (J$.C(271712, J$.B(585434, '===', J$.R(5059537, 'options', options, false, false), J$.T(5059545, undefined, 24, false))))
                                options = J$.W(5059561, 'options', J$.T(5059553, {}, 11, false), options, false, false);
                            if (J$.C(271720, J$.B(585442, '!==', J$.G(5059577, J$.R(5059569, 'options', options, false, false), 'enAlgs'), J$.T(5059585, undefined, 24, false))))
                                enAlgs = J$.W(5059609, 'enAlgs', J$.G(5059601, J$.R(5059593, 'options', options, false, false), 'enAlgs'), enAlgs, false, false);
                            if (J$.C(271728, J$.B(585450, '!==', J$.G(5059625, J$.R(5059617, 'options', options, false, false), 'algorithms'), J$.T(5059633, undefined, 24, false))))
                                enAlgs = J$.W(5059657, 'enAlgs', J$.G(5059649, J$.R(5059641, 'options', options, false, false), 'algorithms'), enAlgs, false, false);
                            J$.M(5059689, J$.R(5059665, 'assert', assert, false, true), 'optionalArrayOfString', false)(J$.R(5059673, 'enAlgs', enAlgs, false, false), J$.T(5059681, 'algorithms', 21, false));
                            var hashType = J$.W(5059705, 'hashType', J$.T(5059697, 'ssh', 21, false), hashType, false, false);
                            if (J$.C(271736, J$.B(585458, '!==', J$.G(5059721, J$.R(5059713, 'options', options, false, false), 'hashType'), J$.T(5059729, undefined, 24, false))))
                                hashType = J$.W(5059753, 'hashType', J$.G(5059745, J$.R(5059737, 'options', options, false, false), 'hashType'), hashType, false, false);
                            J$.M(5059785, J$.R(5059761, 'assert', assert, false, true), 'string', false)(J$.R(5059769, 'hashType', hashType, false, false), J$.T(5059777, 'options.hashType', 21, false));
                            var parts = J$.W(5059817, 'parts', J$.M(5059809, J$.R(5059793, 'fp', fp, false, false), 'split', false)(J$.T(5059801, ':', 21, false)), parts, false, false);
                            if (J$.C(271864, J$.B(585466, '==', J$.G(5059833, J$.R(5059825, 'parts', parts, false, false), 'length'), J$.T(5059841, 2, 22, false)))) {
                                alg = J$.W(5059881, 'alg', J$.M(5059873, J$.G(5059865, J$.R(5059849, 'parts', parts, false, false), J$.T(5059857, 0, 22, false)), 'toLowerCase', false)(), alg, false, false);
                                if (J$.C(271744, J$.U(585474, '!', J$.M(5059921, J$.R(5059889, 'base64RE', base64RE, false, true), 'test', false)(J$.G(5059913, J$.R(5059897, 'parts', parts, false, false), J$.T(5059905, 1, 22, false))))))
                                    throw J$.F(5059945, J$.R(5059929, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5059937, 'fp', fp, false, false));
                                try {
                                    hash = J$.W(5060001, 'hash', J$.M(5059993, J$.R(5059953, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5059977, J$.R(5059961, 'parts', parts, false, false), J$.T(5059969, 1, 22, false)), J$.T(5059985, 'base64', 21, false)), hash, false, false);
                                } catch (e) {
                                    J$.N(5060033, 'e', e, false, false, true);
                                    throw J$.F(5060025, J$.R(5060009, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060017, 'fp', fp, false, false));
                                }
                            } else if (J$.C(271856, J$.B(585482, '>', J$.G(5060049, J$.R(5060041, 'parts', parts, false, false), 'length'), J$.T(5060057, 2, 22, false)))) {
                                alg = J$.W(5060073, 'alg', J$.T(5060065, 'md5', 21, false), alg, false, false);
                                if (J$.C(271752, J$.B(585490, '===', J$.M(5060105, J$.G(5060097, J$.R(5060081, 'parts', parts, false, false), J$.T(5060089, 0, 22, false)), 'toLowerCase', false)(), J$.T(5060113, 'md5', 21, false))))
                                    parts = J$.W(5060145, 'parts', J$.M(5060137, J$.R(5060121, 'parts', parts, false, false), 'slice', false)(J$.T(5060129, 1, 22, false)), parts, false, false);
                                parts = J$.W(5060313, 'parts', J$.M(5060305, J$.R(5060153, 'parts', parts, false, false), 'map', false)(J$.T(5060297, function (p) {
                                    jalangiLabel3:
                                        while (true) {
                                            try {
                                                J$.Fe(5060273, arguments.callee, this, arguments);
                                                arguments = J$.N(5060281, 'arguments', arguments, true, false, false);
                                                p = J$.N(5060289, 'p', p, true, false, false);
                                                while (J$.C(271760, J$.B(585498, '<', J$.G(5060169, J$.R(5060161, 'p', p, false, false), 'length'), J$.T(5060177, 2, 22, false))))
                                                    p = J$.W(5060201, 'p', J$.B(585506, '+', J$.T(5060185, '0', 21, false), J$.R(5060193, 'p', p, false, false)), p, false, false);
                                                if (J$.C(271768, J$.B(585514, '>', J$.G(5060217, J$.R(5060209, 'p', p, false, false), 'length'), J$.T(5060225, 2, 22, false))))
                                                    throw J$.F(5060249, J$.R(5060233, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060241, 'fp', fp, false, false));
                                                return J$.Rt(5060265, J$.R(5060257, 'p', p, false, false));
                                            } catch (J$e) {
                                                J$.Ex(5061993, J$e);
                                            } finally {
                                                if (J$.Fr(5062001))
                                                    continue jalangiLabel3;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), parts, false, false);
                                parts = J$.W(5060345, 'parts', J$.M(5060337, J$.R(5060321, 'parts', parts, false, false), 'join', false)(J$.T(5060329, '', 21, false)), parts, false, false);
                                if (J$.C(271784, J$.C(271776, J$.U(585522, '!', J$.M(5060369, J$.R(5060353, 'hexRE', hexRE, false, true), 'test', false)(J$.R(5060361, 'parts', parts, false, false)))) ? J$._() : J$.B(585538, '!==', J$.B(585530, '%', J$.G(5060385, J$.R(5060377, 'parts', parts, false, false), 'length'), J$.T(5060393, 2, 22, false)), J$.T(5060401, 0, 22, false))))
                                    throw J$.F(5060425, J$.R(5060409, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060417, 'fp', fp, false, false));
                                try {
                                    hash = J$.W(5060465, 'hash', J$.M(5060457, J$.R(5060433, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5060441, 'parts', parts, false, false), J$.T(5060449, 'hex', 21, false)), hash, false, false);
                                } catch (e) {
                                    J$.N(5060497, 'e', e, false, false, true);
                                    throw J$.F(5060489, J$.R(5060473, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060481, 'fp', fp, false, false));
                                }
                            } else {
                                if (J$.C(271800, J$.M(5060521, J$.R(5060505, 'hexRE', hexRE, false, true), 'test', false)(J$.R(5060513, 'fp', fp, false, false)))) {
                                    hash = J$.W(5060561, 'hash', J$.M(5060553, J$.R(5060529, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5060537, 'fp', fp, false, false), J$.T(5060545, 'hex', 21, false)), hash, false, false);
                                } else if (J$.C(271792, J$.M(5060585, J$.R(5060569, 'base64RE', base64RE, false, true), 'test', false)(J$.R(5060577, 'fp', fp, false, false)))) {
                                    hash = J$.W(5060625, 'hash', J$.M(5060617, J$.R(5060593, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5060601, 'fp', fp, false, false), J$.T(5060609, 'base64', 21, false)), hash, false, false);
                                } else {
                                    throw J$.F(5060649, J$.R(5060633, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060641, 'fp', fp, false, false));
                                }
                                switch (J$.C1(271808, J$.G(5060665, J$.R(5060657, 'hash', hash, false, false), 'length'))) {
                                case J$.C2(271816, J$.T(5060689, 32, 22, false)):
                                    alg = J$.W(5060681, 'alg', J$.T(5060673, 'sha256', 21, false), alg, false, false);
                                    break;
                                case J$.C2(271824, J$.T(5060713, 16, 22, false)):
                                    alg = J$.W(5060705, 'alg', J$.T(5060697, 'md5', 21, false), alg, false, false);
                                    break;
                                case J$.C2(271832, J$.T(5060737, 20, 22, false)):
                                    alg = J$.W(5060729, 'alg', J$.T(5060721, 'sha1', 21, false), alg, false, false);
                                    break;
                                case J$.C2(271840, J$.T(5060761, 64, 22, false)):
                                    alg = J$.W(5060753, 'alg', J$.T(5060745, 'sha512', 21, false), alg, false, false);
                                    break;
                                default:
                                    throw J$.F(5060785, J$.R(5060769, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060777, 'fp', fp, false, false));
                                }
                                if (J$.C(271848, J$.B(585546, '===', J$.G(5060801, J$.R(5060793, 'options', options, false, false), 'hashType'), J$.T(5060809, undefined, 24, false))))
                                    hashType = J$.W(5060825, 'hashType', J$.T(5060817, 'spki', 21, false), hashType, false, false);
                            }
                            if (J$.C(271872, J$.B(585554, '===', J$.R(5060833, 'alg', alg, false, false), J$.T(5060841, undefined, 24, false))))
                                throw J$.F(5060865, J$.R(5060849, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(5060857, 'fp', fp, false, false));
                            if (J$.C(271880, J$.B(585562, '===', J$.G(5060897, J$.G(5060881, J$.R(5060873, 'algs', algs, false, true), 'hashAlgs'), J$.R(5060889, 'alg', alg, false, false)), J$.T(5060905, undefined, 24, false))))
                                throw J$.F(5060929, J$.R(5060913, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(5060921, 'alg', alg, false, false));
                            if (J$.C(271896, J$.B(585570, '!==', J$.R(5060937, 'enAlgs', enAlgs, false, false), J$.T(5060945, undefined, 24, false)))) {
                                enAlgs = J$.W(5061025, 'enAlgs', J$.M(5061017, J$.R(5060953, 'enAlgs', enAlgs, false, false), 'map', false)(J$.T(5061009, function (a) {
                                    jalangiLabel4:
                                        while (true) {
                                            try {
                                                J$.Fe(5060985, arguments.callee, this, arguments);
                                                arguments = J$.N(5060993, 'arguments', arguments, true, false, false);
                                                a = J$.N(5061001, 'a', a, true, false, false);
                                                return J$.Rt(5060977, J$.M(5060969, J$.R(5060961, 'a', a, false, false), 'toLowerCase', false)());
                                            } catch (J$e) {
                                                J$.Ex(5062009, J$e);
                                            } finally {
                                                if (J$.Fr(5062017))
                                                    continue jalangiLabel4;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), enAlgs, false, false);
                                if (J$.C(271888, J$.B(585586, '===', J$.M(5061049, J$.R(5061033, 'enAlgs', enAlgs, false, false), 'indexOf', false)(J$.R(5061041, 'alg', alg, false, false)), J$.U(585578, '-', J$.T(5061057, 1, 22, false)))))
                                    throw J$.F(5061081, J$.R(5061065, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(5061073, 'alg', alg, false, false));
                            }
                            return J$.Rt(5061161, J$.F(5061153, J$.R(5061089, 'Fingerprint', Fingerprint, false, true), true)(J$.T(5061145, {
                                algorithm: J$.R(5061097, 'alg', alg, false, false),
                                hash: J$.R(5061105, 'hash', hash, false, false),
                                type: J$.C(271904, J$.G(5061121, J$.R(5061113, 'options', options, false, false), 'type')) ? J$._() : J$.T(5061129, 'key', 21, false),
                                hashType: J$.R(5061137, 'hashType', hashType, false, false)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(5062025, J$e);
                        } finally {
                            if (J$.Fr(5062033))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5061569, J$.R(5061473, 'Fingerprint', Fingerprint, false, true), 'isFingerprint', J$.T(5061561, function (obj, ver) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5061529, arguments.callee, this, arguments);
                            arguments = J$.N(5061537, 'arguments', arguments, true, false, false);
                            obj = J$.N(5061545, 'obj', obj, true, false, false);
                            ver = J$.N(5061553, 'ver', ver, true, false, false);
                            return J$.Rt(5061521, J$.M(5061513, J$.R(5061481, 'utils', utils, false, true), 'isCompatible', false)(J$.R(5061489, 'obj', obj, false, false), J$.R(5061497, 'Fingerprint', Fingerprint, false, true), J$.R(5061505, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(5062089, J$e);
                        } finally {
                            if (J$.Fr(5062097))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5061617, J$.G(5061585, J$.R(5061577, 'Fingerprint', Fingerprint, false, true), 'prototype'), '_sshpkApiVersion', J$.T(5061609, [
                J$.T(5061593, 1, 22, false),
                J$.T(5061601, 2, 22, false)
            ], 10, false));
            J$.P(5061761, J$.R(5061625, 'Fingerprint', Fingerprint, false, true), '_oldVersionDetect', J$.T(5061753, function (obj) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5061729, arguments.callee, this, arguments);
                            arguments = J$.N(5061737, 'arguments', arguments, true, false, false);
                            obj = J$.N(5061745, 'obj', obj, true, false, false);
                            J$.M(5061657, J$.R(5061633, 'assert', assert, false, true), 'func', false)(J$.G(5061649, J$.R(5061641, 'obj', obj, false, false), 'toString'));
                            J$.M(5061689, J$.R(5061665, 'assert', assert, false, true), 'func', false)(J$.G(5061681, J$.R(5061673, 'obj', obj, false, false), 'matches'));
                            return J$.Rt(5061721, J$.T(5061713, [
                                J$.T(5061697, 1, 22, false),
                                J$.T(5061705, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(5062105, J$e);
                        } finally {
                            if (J$.Fr(5062113))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(5062121, J$e);
        } finally {
            if (J$.Sr(5062129))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

