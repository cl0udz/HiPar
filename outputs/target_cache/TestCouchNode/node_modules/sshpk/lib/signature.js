J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(5175273, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/signature.js');
            function Signature(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5169225, arguments.callee, this, arguments);
                            arguments = J$.N(5169233, 'arguments', arguments, true, false, false);
                            opts = J$.N(5169241, 'opts', opts, true, false, false);
                            J$.N(5169249, 'partLookup', partLookup, false, false, false);
                            J$.N(5169257, 'i', i, false, false, false);
                            J$.N(5169265, 'part', part, false, false, false);
                            J$.M(5168825, J$.R(5168801, 'assert', assert, false, true), 'object', false)(J$.R(5168809, 'opts', opts, false, false), J$.T(5168817, 'options', 21, false));
                            J$.M(5168865, J$.R(5168833, 'assert', assert, false, true), 'arrayOfObject', false)(J$.G(5168849, J$.R(5168841, 'opts', opts, false, false), 'parts'), J$.T(5168857, 'options.parts', 21, false));
                            J$.M(5168905, J$.R(5168873, 'assert', assert, false, true), 'string', false)(J$.G(5168889, J$.R(5168881, 'opts', opts, false, false), 'type'), J$.T(5168897, 'options.type', 21, false));
                            var partLookup = J$.W(5168921, 'partLookup', J$.T(5168913, {}, 11, false), partLookup, false, false);
                            for (var i = J$.W(5168937, 'i', J$.T(5168929, 0, 22, false), i, false, false); J$.C(276744, J$.B(592562, '<', J$.R(5168945, 'i', i, false, false), J$.G(5168969, J$.G(5168961, J$.R(5168953, 'opts', opts, false, false), 'parts'), 'length'))); i = J$.W(5168985, 'i', J$.B(592578, '+', J$.U(592570, '+', J$.R(5168977, 'i', i, false, false)), 1), i, false, false)) {
                                var part = J$.W(5169025, 'part', J$.G(5169017, J$.G(5169001, J$.R(5168993, 'opts', opts, false, false), 'parts'), J$.R(5169009, 'i', i, false, false)), part, false, false);
                                J$.P(5169065, J$.R(5169033, 'partLookup', partLookup, false, false), J$.G(5169049, J$.R(5169041, 'part', part, false, false), 'name'), J$.R(5169057, 'part', part, false, false));
                            }
                            J$.P(5169097, J$.R(5169073, 'this', this, false, false), 'type', J$.G(5169089, J$.R(5169081, 'opts', opts, false, false), 'type'));
                            J$.P(5169129, J$.R(5169105, 'this', this, false, false), 'hashAlgorithm', J$.G(5169121, J$.R(5169113, 'opts', opts, false, false), 'hashAlgo'));
                            J$.P(5169161, J$.R(5169137, 'this', this, false, false), 'curve', J$.G(5169153, J$.R(5169145, 'opts', opts, false, false), 'curve'));
                            J$.P(5169193, J$.R(5169169, 'this', this, false, false), 'parts', J$.G(5169185, J$.R(5169177, 'opts', opts, false, false), 'parts'));
                            J$.P(5169217, J$.R(5169201, 'this', this, false, false), 'part', J$.R(5169209, 'partLookup', partLookup, false, false));
                        } catch (J$e) {
                            J$.Ex(5175441, J$e);
                        } finally {
                            if (J$.Fr(5175449))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseOneNum(data, type, format, opts) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5173081, arguments.callee, this, arguments);
                            arguments = J$.N(5173089, 'arguments', arguments, true, false, false);
                            data = J$.N(5173097, 'data', data, true, false, false);
                            type = J$.N(5173105, 'type', type, true, false, false);
                            format = J$.N(5173113, 'format', format, true, false, false);
                            opts = J$.N(5173121, 'opts', opts, true, false, false);
                            J$.N(5173129, 'buf', buf, false, false, false);
                            J$.N(5173137, 'head', head, false, false, false);
                            J$.N(5173145, 'msg', msg, false, false, false);
                            J$.N(5173153, 'sig', sig, false, false, false);
                            if (J$.C(277104, J$.B(592842, '===', J$.R(5172353, 'format', format, false, false), J$.T(5172361, 'ssh', 21, false)))) {
                                try {
                                    var buf = J$.W(5172401, 'buf', J$.F(5172393, J$.R(5172369, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5172385, { buffer: J$.R(5172377, 'data', data, false, false) }, 11, false)), buf, false, false);
                                    var head = J$.W(5172425, 'head', J$.M(5172417, J$.R(5172409, 'buf', buf, false, false), 'readString', false)(), head, false, false);
                                } catch (e) {
                                    J$.N(5172433, 'e', e, false, false, true);
                                }
                                if (J$.C(277096, J$.B(592850, '!==', J$.R(5172441, 'buf', buf, false, false), J$.T(5172449, undefined, 24, false)))) {
                                    var msg = J$.W(5172505, 'msg', J$.B(592890, '+', J$.B(592882, '+', J$.B(592874, '+', J$.B(592866, '+', J$.B(592858, '+', J$.T(5172457, 'SSH signature does not match expected ', 21, false), J$.T(5172465, 'type (expected ', 21, false)), J$.R(5172473, 'type', type, false, false)), J$.T(5172481, ', got ', 21, false)), J$.R(5172489, 'head', head, false, false)), J$.T(5172497, ')', 21, false)), msg, false, false);
                                    switch (J$.C1(277056, J$.R(5172513, 'head', head, false, false))) {
                                    case J$.C2(277064, J$.T(5172585, 'ssh-rsa', 21, false)):
                                        J$.M(5172553, J$.R(5172521, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5172529, 'type', type, false, false), J$.T(5172537, 'rsa', 21, false), J$.R(5172545, 'msg', msg, false, false));
                                        J$.P(5172577, J$.R(5172561, 'opts', opts, false, false), 'hashAlgo', J$.T(5172569, 'sha1', 21, false));
                                        break;
                                    case J$.C2(277072, J$.T(5172657, 'rsa-sha2-256', 21, false)):
                                        J$.M(5172625, J$.R(5172593, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5172601, 'type', type, false, false), J$.T(5172609, 'rsa', 21, false), J$.R(5172617, 'msg', msg, false, false));
                                        J$.P(5172649, J$.R(5172633, 'opts', opts, false, false), 'hashAlgo', J$.T(5172641, 'sha256', 21, false));
                                        break;
                                    case J$.C2(277080, J$.T(5172729, 'rsa-sha2-512', 21, false)):
                                        J$.M(5172697, J$.R(5172665, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5172673, 'type', type, false, false), J$.T(5172681, 'rsa', 21, false), J$.R(5172689, 'msg', msg, false, false));
                                        J$.P(5172721, J$.R(5172705, 'opts', opts, false, false), 'hashAlgo', J$.T(5172713, 'sha512', 21, false));
                                        break;
                                    case J$.C2(277088, J$.T(5172801, 'ssh-ed25519', 21, false)):
                                        J$.M(5172769, J$.R(5172737, 'assert', assert, false, true), 'strictEqual', false)(J$.R(5172745, 'type', type, false, false), J$.T(5172753, 'ed25519', 21, false), J$.R(5172761, 'msg', msg, false, false));
                                        J$.P(5172793, J$.R(5172777, 'opts', opts, false, false), 'hashAlgo', J$.T(5172785, 'sha512', 21, false));
                                        break;
                                    default:
                                        throw J$.F(5172841, J$.I(typeof Error === 'undefined' ? Error = J$.R(5172809, 'Error', undefined, true, true) : Error = J$.R(5172809, 'Error', Error, true, true)), true)(J$.B(592906, '+', J$.B(592898, '+', J$.T(5172817, 'Unknown SSH signature ', 21, false), J$.T(5172825, 'type: ', 21, false)), J$.R(5172833, 'head', head, false, false)));
                                    }
                                    var sig = J$.W(5172865, 'sig', J$.M(5172857, J$.R(5172849, 'buf', buf, false, false), 'readPart', false)(), sig, false, false);
                                    J$.M(5172905, J$.R(5172873, 'assert', assert, false, true), 'ok', false)(J$.M(5172889, J$.R(5172881, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5172897, 'extra trailing bytes', 21, false));
                                    J$.P(5172929, J$.R(5172913, 'sig', sig, false, false), 'name', J$.T(5172921, 'sig', 21, false));
                                    J$.M(5172961, J$.G(5172945, J$.R(5172937, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(5172953, 'sig', sig, false, false));
                                    return J$.Rt(5172993, J$.F(5172985, J$.R(5172969, 'Signature', Signature, false, true), true)(J$.R(5172977, 'opts', opts, false, false)));
                                }
                            }
                            J$.M(5173041, J$.G(5173009, J$.R(5173001, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(5173033, {
                                name: J$.T(5173017, 'sig', 21, false),
                                data: J$.R(5173025, 'data', data, false, false)
                            }, 11, false));
                            return J$.Rt(5173073, J$.F(5173065, J$.R(5173049, 'Signature', Signature, false, true), true)(J$.R(5173057, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(5175505, J$e);
                        } finally {
                            if (J$.Fr(5175513))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSAasn1(data, type, format, opts) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5173481, arguments.callee, this, arguments);
                            arguments = J$.N(5173489, 'arguments', arguments, true, false, false);
                            data = J$.N(5173497, 'data', data, true, false, false);
                            type = J$.N(5173505, 'type', type, true, false, false);
                            format = J$.N(5173513, 'format', format, true, false, false);
                            opts = J$.N(5173521, 'opts', opts, true, false, false);
                            J$.N(5173529, 'der', der, false, false, false);
                            J$.N(5173537, 'r', r, false, false, false);
                            J$.N(5173545, 's', s, false, false, false);
                            var der = J$.W(5173185, 'der', J$.M(5173177, J$.R(5173161, 'asn1', asn1, false, true), 'BerReader', true)(J$.R(5173169, 'data', data, false, false)), der, false, false);
                            J$.M(5173201, J$.R(5173193, 'der', der, false, false), 'readSequence', false)();
                            var r = J$.W(5173257, 'r', J$.M(5173249, J$.R(5173209, 'der', der, false, false), 'readString', false)(J$.G(5173233, J$.G(5173225, J$.R(5173217, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(5173241, true, 23, false)), r, false, false);
                            var s = J$.W(5173313, 's', J$.M(5173305, J$.R(5173265, 'der', der, false, false), 'readString', false)(J$.G(5173289, J$.G(5173281, J$.R(5173273, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(5173297, true, 23, false)), s, false, false);
                            J$.M(5173377, J$.G(5173329, J$.R(5173321, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(5173369, {
                                name: J$.T(5173337, 'r', 21, false),
                                data: J$.M(5173361, J$.R(5173345, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(5173353, 'r', r, false, false))
                            }, 11, false));
                            J$.M(5173441, J$.G(5173393, J$.R(5173385, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(5173433, {
                                name: J$.T(5173401, 's', 21, false),
                                data: J$.M(5173425, J$.R(5173409, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(5173417, 's', s, false, false))
                            }, 11, false));
                            return J$.Rt(5173473, J$.F(5173465, J$.R(5173449, 'Signature', Signature, false, true), true)(J$.R(5173457, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(5175521, J$e);
                        } finally {
                            if (J$.Fr(5175529))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSA(data, type, format, opts) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5173977, arguments.callee, this, arguments);
                            arguments = J$.N(5173985, 'arguments', arguments, true, false, false);
                            data = J$.N(5173993, 'data', data, true, false, false);
                            type = J$.N(5174001, 'type', type, true, false, false);
                            format = J$.N(5174009, 'format', format, true, false, false);
                            opts = J$.N(5174017, 'opts', opts, true, false, false);
                            J$.N(5174025, 'buf', buf, false, false, false);
                            J$.N(5174033, 'd', d, false, false, false);
                            if (J$.C(277120, J$.B(592914, '!=', J$.G(5173561, J$.R(5173553, 'data', data, false, false), 'length'), J$.T(5173569, 40, 22, false)))) {
                                var buf = J$.W(5173609, 'buf', J$.F(5173601, J$.R(5173577, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5173593, { buffer: J$.R(5173585, 'data', data, false, false) }, 11, false)), buf, false, false);
                                var d = J$.W(5173633, 'd', J$.M(5173625, J$.R(5173617, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                if (J$.C(277112, J$.B(592922, '===', J$.M(5173657, J$.R(5173641, 'd', d, false, false), 'toString', false)(J$.T(5173649, 'ascii', 21, false)), J$.T(5173665, 'ssh-dss', 21, false))))
                                    d = J$.W(5173689, 'd', J$.M(5173681, J$.R(5173673, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                J$.M(5173729, J$.R(5173697, 'assert', assert, false, true), 'ok', false)(J$.M(5173713, J$.R(5173705, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5173721, 'extra trailing bytes', 21, false));
                                J$.M(5173777, J$.R(5173737, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5173753, J$.R(5173745, 'd', d, false, false), 'length'), J$.T(5173761, 40, 22, false), J$.T(5173769, 'invalid inner length', 21, false));
                                data = J$.W(5173793, 'data', J$.R(5173785, 'd', d, false, false), data, false, false);
                            }
                            J$.M(5173865, J$.G(5173809, J$.R(5173801, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(5173857, {
                                name: J$.T(5173817, 'r', 21, false),
                                data: J$.M(5173849, J$.R(5173825, 'data', data, false, false), 'slice', false)(J$.T(5173833, 0, 22, false), J$.T(5173841, 20, 22, false))
                            }, 11, false));
                            J$.M(5173937, J$.G(5173881, J$.R(5173873, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(5173929, {
                                name: J$.T(5173889, 's', 21, false),
                                data: J$.M(5173921, J$.R(5173897, 'data', data, false, false), 'slice', false)(J$.T(5173905, 20, 22, false), J$.T(5173913, 40, 22, false))
                            }, 11, false));
                            return J$.Rt(5173969, J$.F(5173961, J$.R(5173945, 'Signature', Signature, false, true), true)(J$.R(5173953, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(5175537, J$e);
                        } finally {
                            if (J$.Fr(5175545))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseECDSA(data, type, format, opts) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5174857, arguments.callee, this, arguments);
                            arguments = J$.N(5174865, 'arguments', arguments, true, false, false);
                            data = J$.N(5174873, 'data', data, true, false, false);
                            type = J$.N(5174881, 'type', type, true, false, false);
                            format = J$.N(5174889, 'format', format, true, false, false);
                            opts = J$.N(5174897, 'opts', opts, true, false, false);
                            J$.N(5174905, 'buf', buf, false, false, false);
                            J$.N(5174913, 'r', r, false, false, false);
                            J$.N(5174921, 's', s, false, false, false);
                            J$.N(5174929, 'inner', inner, false, false, false);
                            J$.N(5174937, 'stype', stype, false, false, false);
                            J$.N(5174945, 'parts', parts, false, false, false);
                            var buf = J$.W(5174073, 'buf', J$.F(5174065, J$.R(5174041, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5174057, { buffer: J$.R(5174049, 'data', data, false, false) }, 11, false)), buf, false, false);
                            var r, s;
                            var inner = J$.W(5174097, 'inner', J$.M(5174089, J$.R(5174081, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                            var stype = J$.W(5174129, 'stype', J$.M(5174121, J$.R(5174105, 'inner', inner, false, false), 'toString', false)(J$.T(5174113, 'ascii', 21, false)), stype, false, false);
                            if (J$.C(277160, J$.B(592930, '===', J$.M(5174161, J$.R(5174137, 'stype', stype, false, false), 'slice', false)(J$.T(5174145, 0, 22, false), J$.T(5174153, 6, 22, false)), J$.T(5174169, 'ecdsa-', 21, false)))) {
                                var parts = J$.W(5174201, 'parts', J$.M(5174193, J$.R(5174177, 'stype', stype, false, false), 'split', false)(J$.T(5174185, '-', 21, false)), parts, false, false);
                                J$.M(5174249, J$.R(5174209, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5174233, J$.R(5174217, 'parts', parts, false, false), J$.T(5174225, 0, 22, false)), J$.T(5174241, 'ecdsa', 21, false));
                                J$.M(5174297, J$.R(5174257, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5174281, J$.R(5174265, 'parts', parts, false, false), J$.T(5174273, 1, 22, false)), J$.T(5174289, 'sha2', 21, false));
                                J$.P(5174337, J$.R(5174305, 'opts', opts, false, false), 'curve', J$.G(5174329, J$.R(5174313, 'parts', parts, false, false), J$.T(5174321, 2, 22, false)));
                                switch (J$.C1(277128, J$.G(5174353, J$.R(5174345, 'opts', opts, false, false), 'curve'))) {
                                case J$.C2(277136, J$.T(5174385, 'nistp256', 21, false)):
                                    J$.P(5174377, J$.R(5174361, 'opts', opts, false, false), 'hashAlgo', J$.T(5174369, 'sha256', 21, false));
                                    break;
                                case J$.C2(277144, J$.T(5174417, 'nistp384', 21, false)):
                                    J$.P(5174409, J$.R(5174393, 'opts', opts, false, false), 'hashAlgo', J$.T(5174401, 'sha384', 21, false));
                                    break;
                                case J$.C2(277152, J$.T(5174449, 'nistp521', 21, false)):
                                    J$.P(5174441, J$.R(5174425, 'opts', opts, false, false), 'hashAlgo', J$.T(5174433, 'sha512', 21, false));
                                    break;
                                default:
                                    throw J$.F(5174489, J$.I(typeof Error === 'undefined' ? Error = J$.R(5174457, 'Error', undefined, true, true) : Error = J$.R(5174457, 'Error', Error, true, true)), true)(J$.B(592938, '+', J$.T(5174465, 'Unsupported ECDSA curve: ', 21, false), J$.G(5174481, J$.R(5174473, 'opts', opts, false, false), 'curve')));
                                }
                                inner = J$.W(5174513, 'inner', J$.M(5174505, J$.R(5174497, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                                J$.M(5174553, J$.R(5174521, 'assert', assert, false, true), 'ok', false)(J$.M(5174537, J$.R(5174529, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5174545, 'extra trailing bytes on outer', 21, false));
                                buf = J$.W(5174593, 'buf', J$.F(5174585, J$.R(5174561, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5174577, { buffer: J$.R(5174569, 'inner', inner, false, false) }, 11, false)), buf, false, false);
                                r = J$.W(5174617, 'r', J$.M(5174609, J$.R(5174601, 'buf', buf, false, false), 'readPart', false)(), r, false, false);
                            } else {
                                r = J$.W(5174641, 'r', J$.T(5174633, { data: J$.R(5174625, 'inner', inner, false, false) }, 11, false), r, false, false);
                            }
                            s = J$.W(5174665, 's', J$.M(5174657, J$.R(5174649, 'buf', buf, false, false), 'readPart', false)(), s, false, false);
                            J$.M(5174705, J$.R(5174673, 'assert', assert, false, true), 'ok', false)(J$.M(5174689, J$.R(5174681, 'buf', buf, false, false), 'atEnd', false)(), J$.T(5174697, 'extra trailing bytes', 21, false));
                            J$.P(5174729, J$.R(5174713, 'r', r, false, false), 'name', J$.T(5174721, 'r', 21, false));
                            J$.P(5174753, J$.R(5174737, 's', s, false, false), 'name', J$.T(5174745, 's', 21, false));
                            J$.M(5174785, J$.G(5174769, J$.R(5174761, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(5174777, 'r', r, false, false));
                            J$.M(5174817, J$.G(5174801, J$.R(5174793, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(5174809, 's', s, false, false));
                            return J$.Rt(5174849, J$.F(5174841, J$.R(5174825, 'Signature', Signature, false, true), true)(J$.R(5174833, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(5175553, J$e);
                        } finally {
                            if (J$.Fr(5175561))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5175281, 'assert', assert, false, false, false);
            J$.N(5175289, 'Buffer', Buffer, false, false, false);
            J$.N(5175297, 'algs', algs, false, false, false);
            J$.N(5175305, 'crypto', crypto, false, false, false);
            J$.N(5175313, 'errs', errs, false, false, false);
            J$.N(5175321, 'utils', utils, false, false, false);
            J$.N(5175329, 'asn1', asn1, false, false, false);
            J$.N(5175337, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(5175345, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(5175353, 'SignatureParseError', SignatureParseError, false, false, false);
            Signature = J$.N(5175369, 'Signature', J$.T(5175361, Signature, 12, false), true, false, false);
            parseOneNum = J$.N(5175385, 'parseOneNum', J$.T(5175377, parseOneNum, 12, false), true, false, false);
            parseDSAasn1 = J$.N(5175401, 'parseDSAasn1', J$.T(5175393, parseDSAasn1, 12, false), true, false, false);
            parseDSA = J$.N(5175417, 'parseDSA', J$.T(5175409, parseDSA, 12, false), true, false, false);
            parseECDSA = J$.N(5175433, 'parseECDSA', J$.T(5175425, parseECDSA, 12, false), true, false, false);
            J$.P(5168481, J$.I(typeof module === 'undefined' ? module = J$.R(5168465, 'module', undefined, true, true) : module = J$.R(5168465, 'module', module, true, true)), 'exports', J$.R(5168473, 'Signature', Signature, false, true));
            var assert = J$.W(5168513, 'assert', J$.F(5168505, J$.I(typeof require === 'undefined' ? require = J$.R(5168489, 'require', undefined, true, true) : require = J$.R(5168489, 'require', require, true, true)), false)(J$.T(5168497, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5168553, 'Buffer', J$.G(5168545, J$.F(5168537, J$.I(typeof require === 'undefined' ? require = J$.R(5168521, 'require', undefined, true, true) : require = J$.R(5168521, 'require', require, true, true)), false)(J$.T(5168529, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(5168585, 'algs', J$.F(5168577, J$.I(typeof require === 'undefined' ? require = J$.R(5168561, 'require', undefined, true, true) : require = J$.R(5168561, 'require', require, true, true)), false)(J$.T(5168569, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(5168617, 'crypto', J$.F(5168609, J$.I(typeof require === 'undefined' ? require = J$.R(5168593, 'require', undefined, true, true) : require = J$.R(5168593, 'require', require, true, true)), false)(J$.T(5168601, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(5168649, 'errs', J$.F(5168641, J$.I(typeof require === 'undefined' ? require = J$.R(5168625, 'require', undefined, true, true) : require = J$.R(5168625, 'require', require, true, true)), false)(J$.T(5168633, './errors', 21, false)), errs, false, true);
            var utils = J$.W(5168681, 'utils', J$.F(5168673, J$.I(typeof require === 'undefined' ? require = J$.R(5168657, 'require', undefined, true, true) : require = J$.R(5168657, 'require', require, true, true)), false)(J$.T(5168665, './utils', 21, false)), utils, false, true);
            var asn1 = J$.W(5168713, 'asn1', J$.F(5168705, J$.I(typeof require === 'undefined' ? require = J$.R(5168689, 'require', undefined, true, true) : require = J$.R(5168689, 'require', require, true, true)), false)(J$.T(5168697, 'asn1', 21, false)), asn1, false, true);
            var SSHBuffer = J$.W(5168745, 'SSHBuffer', J$.F(5168737, J$.I(typeof require === 'undefined' ? require = J$.R(5168721, 'require', undefined, true, true) : require = J$.R(5168721, 'require', require, true, true)), false)(J$.T(5168729, './ssh-buffer', 21, false)), SSHBuffer, false, true);
            var InvalidAlgorithmError = J$.W(5168769, 'InvalidAlgorithmError', J$.G(5168761, J$.R(5168753, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var SignatureParseError = J$.W(5168793, 'SignatureParseError', J$.G(5168785, J$.R(5168777, 'errs', errs, false, true), 'SignatureParseError'), SignatureParseError, false, true);
            J$.P(5171401, J$.G(5169281, J$.R(5169273, 'Signature', Signature, false, true), 'prototype'), 'toBuffer', J$.T(5171393, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5171305, arguments.callee, this, arguments);
                            arguments = J$.N(5171313, 'arguments', arguments, true, false, false);
                            format = J$.N(5171321, 'format', format, true, false, false);
                            J$.N(5171329, 'buf', buf, false, false, false);
                            J$.N(5171337, 'stype', stype, false, false, false);
                            J$.N(5171345, 'r', r, false, false, false);
                            J$.N(5171353, 's', s, false, false, false);
                            J$.N(5171361, 'der', der, false, false, false);
                            J$.N(5171369, 'inner', inner, false, false, false);
                            J$.N(5171377, 'curve', curve, false, false, false);
                            J$.N(5171385, 'sz', sz, false, false, false);
                            if (J$.C(276752, J$.B(592586, '===', J$.R(5169289, 'format', format, false, false), J$.T(5169297, undefined, 24, false))))
                                format = J$.W(5169313, 'format', J$.T(5169305, 'asn1', 21, false), format, false, false);
                            J$.M(5169345, J$.R(5169321, 'assert', assert, false, true), 'string', false)(J$.R(5169329, 'format', format, false, false), J$.T(5169337, 'format', 21, false));
                            var buf;
                            var stype = J$.W(5169377, 'stype', J$.B(592594, '+', J$.T(5169353, 'ssh-', 21, false), J$.G(5169369, J$.R(5169361, 'this', this, false, false), 'type')), stype, false, false);
                            switch (J$.C1(276944, J$.G(5169393, J$.R(5169385, 'this', this, false, false), 'type'))) {
                            case J$.C2(276952, J$.T(5169713, 'rsa', 21, false)):
                                switch (J$.C1(276760, J$.G(5169409, J$.R(5169401, 'this', this, false, false), 'hashAlgorithm'))) {
                                case J$.C2(276768, J$.T(5169433, 'sha256', 21, false)):
                                    stype = J$.W(5169425, 'stype', J$.T(5169417, 'rsa-sha2-256', 21, false), stype, false, false);
                                    break;
                                case J$.C2(276776, J$.T(5169457, 'sha512', 21, false)):
                                    stype = J$.W(5169449, 'stype', J$.T(5169441, 'rsa-sha2-512', 21, false), stype, false, false);
                                    break;
                                case J$.C2(276784, J$.T(5169465, 'sha1', 21, false)):
                                case J$.C2(276792, J$.T(5169473, undefined, 24, false)):
                                    break;
                                default:
                                    throw J$.F(5169529, J$.I(typeof Error === 'undefined' ? Error = J$.R(5169481, 'Error', undefined, true, true) : Error = J$.R(5169481, 'Error', Error, true, true)), true)(J$.B(592618, '+', J$.B(592610, '+', J$.B(592602, '+', J$.T(5169489, 'SSH signature ', 21, false), J$.T(5169497, 'format does not support hash ', 21, false)), J$.T(5169505, 'algorithm ', 21, false)), J$.G(5169521, J$.R(5169513, 'this', this, false, false), 'hashAlgorithm')));
                                }
                                if (J$.C(276800, J$.B(592626, '===', J$.R(5169537, 'format', format, false, false), J$.T(5169545, 'ssh', 21, false)))) {
                                    buf = J$.W(5169577, 'buf', J$.F(5169569, J$.R(5169553, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5169561, {}, 11, false)), buf, false, false);
                                    J$.M(5169601, J$.R(5169585, 'buf', buf, false, false), 'writeString', false)(J$.R(5169593, 'stype', stype, false, false));
                                    J$.M(5169641, J$.R(5169609, 'buf', buf, false, false), 'writePart', false)(J$.G(5169633, J$.G(5169625, J$.R(5169617, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(5169665, J$.M(5169657, J$.R(5169649, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(5169705, J$.G(5169697, J$.G(5169689, J$.G(5169681, J$.R(5169673, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(276960, J$.T(5169897, 'ed25519', 21, false)):
                                if (J$.C(276808, J$.B(592634, '===', J$.R(5169721, 'format', format, false, false), J$.T(5169729, 'ssh', 21, false)))) {
                                    buf = J$.W(5169761, 'buf', J$.F(5169753, J$.R(5169737, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5169745, {}, 11, false)), buf, false, false);
                                    J$.M(5169785, J$.R(5169769, 'buf', buf, false, false), 'writeString', false)(J$.R(5169777, 'stype', stype, false, false));
                                    J$.M(5169825, J$.R(5169793, 'buf', buf, false, false), 'writePart', false)(J$.G(5169817, J$.G(5169809, J$.R(5169801, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(5169849, J$.M(5169841, J$.R(5169833, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(5169889, J$.G(5169881, J$.G(5169873, J$.G(5169865, J$.R(5169857, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(276968, J$.T(5169905, 'dsa', 21, false)):
                            case J$.C2(276976, J$.T(5171273, 'ecdsa', 21, false)):
                                var r, s;
                                if (J$.C(276936, J$.B(592642, '===', J$.R(5169913, 'format', format, false, false), J$.T(5169921, 'asn1', 21, false)))) {
                                    var der = J$.W(5169945, 'der', J$.M(5169937, J$.R(5169929, 'asn1', asn1, false, true), 'BerWriter', true)(), der, false, false);
                                    J$.M(5169961, J$.R(5169953, 'der', der, false, false), 'startSequence', false)();
                                    r = J$.W(5170017, 'r', J$.M(5170009, J$.R(5169969, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5170001, J$.G(5169993, J$.G(5169985, J$.R(5169977, 'this', this, false, false), 'part'), 'r'), 'data')), r, false, false);
                                    s = J$.W(5170073, 's', J$.M(5170065, J$.R(5170025, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(5170057, J$.G(5170049, J$.G(5170041, J$.R(5170033, 'this', this, false, false), 'part'), 's'), 'data')), s, false, false);
                                    J$.M(5170121, J$.R(5170081, 'der', der, false, false), 'writeBuffer', false)(J$.R(5170089, 'r', r, false, false), J$.G(5170113, J$.G(5170105, J$.R(5170097, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(5170169, J$.R(5170129, 'der', der, false, false), 'writeBuffer', false)(J$.R(5170137, 's', s, false, false), J$.G(5170161, J$.G(5170153, J$.R(5170145, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(5170185, J$.R(5170177, 'der', der, false, false), 'endSequence', false)();
                                    return J$.Rt(5170209, J$.G(5170201, J$.R(5170193, 'der', der, false, false), 'buffer'));
                                } else if (J$.C(276928, J$.C(276816, J$.B(592650, '===', J$.R(5170217, 'format', format, false, false), J$.T(5170225, 'ssh', 21, false))) ? J$.B(592658, '===', J$.G(5170241, J$.R(5170233, 'this', this, false, false), 'type'), J$.T(5170249, 'dsa', 21, false)) : J$._())) {
                                    buf = J$.W(5170281, 'buf', J$.F(5170273, J$.R(5170257, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5170265, {}, 11, false)), buf, false, false);
                                    J$.M(5170305, J$.R(5170289, 'buf', buf, false, false), 'writeString', false)(J$.T(5170297, 'ssh-dss', 21, false));
                                    r = J$.W(5170345, 'r', J$.G(5170337, J$.G(5170329, J$.G(5170321, J$.R(5170313, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    if (J$.C(276832, J$.C(276824, J$.B(592666, '>', J$.G(5170361, J$.R(5170353, 'r', r, false, false), 'length'), J$.T(5170369, 20, 22, false))) ? J$.B(592674, '===', J$.G(5170393, J$.R(5170377, 'r', r, false, false), J$.T(5170385, 0, 22, false)), J$.T(5170401, 0, 22, false)) : J$._()))
                                        r = J$.W(5170433, 'r', J$.M(5170425, J$.R(5170409, 'r', r, false, false), 'slice', false)(J$.T(5170417, 1, 22, false)), r, false, false);
                                    s = J$.W(5170473, 's', J$.G(5170465, J$.G(5170457, J$.G(5170449, J$.R(5170441, 'this', this, false, false), 'part'), 's'), 'data'), s, false, false);
                                    if (J$.C(276848, J$.C(276840, J$.B(592682, '>', J$.G(5170489, J$.R(5170481, 's', s, false, false), 'length'), J$.T(5170497, 20, 22, false))) ? J$.B(592690, '===', J$.G(5170521, J$.R(5170505, 's', s, false, false), J$.T(5170513, 0, 22, false)), J$.T(5170529, 0, 22, false)) : J$._()))
                                        s = J$.W(5170561, 's', J$.M(5170553, J$.R(5170537, 's', s, false, false), 'slice', false)(J$.T(5170545, 1, 22, false)), s, false, false);
                                    if (J$.C(276872, J$.C(276864, J$.C(276856, J$.G(5170577, J$.R(5170569, 'this', this, false, false), 'hashAlgorithm')) ? J$.B(592698, '!==', J$.G(5170593, J$.R(5170585, 'this', this, false, false), 'hashAlgorithm'), J$.T(5170601, 'sha1', 21, false)) : J$._()) ? J$._() : J$.B(592714, '!==', J$.B(592706, '+', J$.G(5170617, J$.R(5170609, 'r', r, false, false), 'length'), J$.G(5170633, J$.R(5170625, 's', s, false, false), 'length')), J$.T(5170641, 40, 22, false)))) {
                                        throw J$.F(5170673, J$.I(typeof Error === 'undefined' ? Error = J$.R(5170649, 'Error', undefined, true, true) : Error = J$.R(5170649, 'Error', Error, true, true)), true)(J$.B(592722, '+', J$.T(5170657, 'OpenSSH only supports ', 21, false), J$.T(5170665, 'DSA signatures with SHA1 hash', 21, false)));
                                    }
                                    J$.M(5170729, J$.R(5170681, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5170721, J$.R(5170689, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(5170713, [
                                        J$.R(5170697, 'r', r, false, false),
                                        J$.R(5170705, 's', s, false, false)
                                    ], 10, false)));
                                    return J$.Rt(5170753, J$.M(5170745, J$.R(5170737, 'buf', buf, false, false), 'toBuffer', false)());
                                } else if (J$.C(276920, J$.C(276880, J$.B(592730, '===', J$.R(5170761, 'format', format, false, false), J$.T(5170769, 'ssh', 21, false))) ? J$.B(592738, '===', J$.G(5170785, J$.R(5170777, 'this', this, false, false), 'type'), J$.T(5170793, 'ecdsa', 21, false)) : J$._())) {
                                    var inner = J$.W(5170825, 'inner', J$.F(5170817, J$.R(5170801, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5170809, {}, 11, false)), inner, false, false);
                                    r = J$.W(5170865, 'r', J$.G(5170857, J$.G(5170849, J$.G(5170841, J$.R(5170833, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    J$.M(5170889, J$.R(5170873, 'inner', inner, false, false), 'writeBuffer', false)(J$.R(5170881, 'r', r, false, false));
                                    J$.M(5170929, J$.R(5170897, 'inner', inner, false, false), 'writePart', false)(J$.G(5170921, J$.G(5170913, J$.R(5170905, 'this', this, false, false), 'part'), 's'));
                                    buf = J$.W(5170961, 'buf', J$.F(5170953, J$.R(5170937, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(5170945, {}, 11, false)), buf, false, false);
                                    var curve;
                                    if (J$.C(276888, J$.B(592746, '===', J$.G(5170985, J$.R(5170969, 'r', r, false, false), J$.T(5170977, 0, 22, false)), J$.T(5170993, 0, 22, false))))
                                        r = J$.W(5171025, 'r', J$.M(5171017, J$.R(5171001, 'r', r, false, false), 'slice', false)(J$.T(5171009, 1, 22, false)), r, false, false);
                                    var sz = J$.W(5171057, 'sz', J$.B(592754, '*', J$.G(5171041, J$.R(5171033, 'r', r, false, false), 'length'), J$.T(5171049, 8, 22, false)), sz, false, false);
                                    if (J$.C(276912, J$.B(592762, '===', J$.R(5171065, 'sz', sz, false, false), J$.T(5171073, 256, 22, false))))
                                        curve = J$.W(5171089, 'curve', J$.T(5171081, 'nistp256', 21, false), curve, false, false);
                                    else if (J$.C(276904, J$.B(592770, '===', J$.R(5171097, 'sz', sz, false, false), J$.T(5171105, 384, 22, false))))
                                        curve = J$.W(5171121, 'curve', J$.T(5171113, 'nistp384', 21, false), curve, false, false);
                                    else if (J$.C(276896, J$.B(592778, '===', J$.R(5171129, 'sz', sz, false, false), J$.T(5171137, 528, 22, false))))
                                        curve = J$.W(5171153, 'curve', J$.T(5171145, 'nistp521', 21, false), curve, false, false);
                                    J$.M(5171185, J$.R(5171161, 'buf', buf, false, false), 'writeString', false)(J$.B(592786, '+', J$.T(5171169, 'ecdsa-sha2-', 21, false), J$.R(5171177, 'curve', curve, false, false)));
                                    J$.M(5171217, J$.R(5171193, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(5171209, J$.R(5171201, 'inner', inner, false, false), 'toBuffer', false)());
                                    return J$.Rt(5171241, J$.M(5171233, J$.R(5171225, 'buf', buf, false, false), 'toBuffer', false)());
                                }
                                throw J$.F(5171265, J$.I(typeof Error === 'undefined' ? Error = J$.R(5171249, 'Error', undefined, true, true) : Error = J$.R(5171249, 'Error', Error, true, true)), true)(J$.T(5171257, 'Invalid signature format', 21, false));
                            default:
                                throw J$.F(5171297, J$.I(typeof Error === 'undefined' ? Error = J$.R(5171281, 'Error', undefined, true, true) : Error = J$.R(5171281, 'Error', Error, true, true)), true)(J$.T(5171289, 'Invalid signature data', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5175457, J$e);
                        } finally {
                            if (J$.Fr(5175465))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5171537, J$.G(5171417, J$.R(5171409, 'Signature', Signature, false, true), 'prototype'), 'toString', J$.T(5171529, function (format) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5171505, arguments.callee, this, arguments);
                            arguments = J$.N(5171513, 'arguments', arguments, true, false, false);
                            format = J$.N(5171521, 'format', format, true, false, false);
                            J$.M(5171449, J$.R(5171425, 'assert', assert, false, true), 'optionalString', false)(J$.R(5171433, 'format', format, false, false), J$.T(5171441, 'format', 21, false));
                            return J$.Rt(5171497, J$.M(5171489, J$.M(5171473, J$.R(5171457, 'this', this, false, false), 'toBuffer', false)(J$.R(5171465, 'format', format, false, false)), 'toString', false)(J$.T(5171481, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(5175473, J$e);
                        } finally {
                            if (J$.Fr(5175481))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5172345, J$.R(5171545, 'Signature', Signature, false, true), 'parse', J$.T(5172337, function (data, type, format) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(5172289, arguments.callee, this, arguments);
                            arguments = J$.N(5172297, 'arguments', arguments, true, false, false);
                            data = J$.N(5172305, 'data', data, true, false, false);
                            type = J$.N(5172313, 'type', type, true, false, false);
                            format = J$.N(5172321, 'format', format, true, false, false);
                            J$.N(5172329, 'opts', opts, false, false, false);
                            if (J$.C(276984, J$.B(592802, '===', J$.U(592794, 'typeof', J$.R(5171553, 'data', data, false, false)), J$.T(5171561, 'string', 21, false))))
                                data = J$.W(5171601, 'data', J$.M(5171593, J$.R(5171569, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5171577, 'data', data, false, false), J$.T(5171585, 'base64', 21, false)), data, false, false);
                            J$.M(5171633, J$.R(5171609, 'assert', assert, false, true), 'buffer', false)(J$.R(5171617, 'data', data, false, false), J$.T(5171625, 'data', 21, false));
                            J$.M(5171665, J$.R(5171641, 'assert', assert, false, true), 'string', false)(J$.R(5171649, 'format', format, false, false), J$.T(5171657, 'format', 21, false));
                            J$.M(5171697, J$.R(5171673, 'assert', assert, false, true), 'string', false)(J$.R(5171681, 'type', type, false, false), J$.T(5171689, 'type', 21, false));
                            var opts = J$.W(5171713, 'opts', J$.T(5171705, {}, 11, false), opts, false, false);
                            J$.P(5171745, J$.R(5171721, 'opts', opts, false, false), 'type', J$.M(5171737, J$.R(5171729, 'type', type, false, false), 'toLowerCase', false)());
                            J$.P(5171769, J$.R(5171753, 'opts', opts, false, false), 'parts', J$.T(5171761, [], 10, false));
                            try {
                                J$.M(5171817, J$.R(5171777, 'assert', assert, false, true), 'ok', false)(J$.B(592810, '>', J$.G(5171793, J$.R(5171785, 'data', data, false, false), 'length'), J$.T(5171801, 0, 22, false)), J$.T(5171809, 'signature must not be empty', 21, false));
                                switch (J$.C1(277008, J$.G(5171833, J$.R(5171825, 'opts', opts, false, false), 'type'))) {
                                case J$.C2(277016, J$.T(5171897, 'rsa', 21, false)):
                                    return J$.Rt(5171889, J$.F(5171881, J$.R(5171841, 'parseOneNum', parseOneNum, false, true), false)(J$.R(5171849, 'data', data, false, false), J$.R(5171857, 'type', type, false, false), J$.R(5171865, 'format', format, false, false), J$.R(5171873, 'opts', opts, false, false)));
                                case J$.C2(277024, J$.T(5171961, 'ed25519', 21, false)):
                                    return J$.Rt(5171953, J$.F(5171945, J$.R(5171905, 'parseOneNum', parseOneNum, false, true), false)(J$.R(5171913, 'data', data, false, false), J$.R(5171921, 'type', type, false, false), J$.R(5171929, 'format', format, false, false), J$.R(5171937, 'opts', opts, false, false)));
                                case J$.C2(277032, J$.T(5171969, 'dsa', 21, false)):
                                case J$.C2(277040, J$.T(5172185, 'ecdsa', 21, false)):
                                    if (J$.C(277000, J$.B(592818, '===', J$.R(5171977, 'format', format, false, false), J$.T(5171985, 'asn1', 21, false))))
                                        return J$.Rt(5172041, J$.F(5172033, J$.R(5171993, 'parseDSAasn1', parseDSAasn1, false, true), false)(J$.R(5172001, 'data', data, false, false), J$.R(5172009, 'type', type, false, false), J$.R(5172017, 'format', format, false, false), J$.R(5172025, 'opts', opts, false, false)));
                                    else if (J$.C(276992, J$.B(592826, '===', J$.G(5172057, J$.R(5172049, 'opts', opts, false, false), 'type'), J$.T(5172065, 'dsa', 21, false))))
                                        return J$.Rt(5172121, J$.F(5172113, J$.R(5172073, 'parseDSA', parseDSA, false, true), false)(J$.R(5172081, 'data', data, false, false), J$.R(5172089, 'type', type, false, false), J$.R(5172097, 'format', format, false, false), J$.R(5172105, 'opts', opts, false, false)));
                                    else
                                        return J$.Rt(5172177, J$.F(5172169, J$.R(5172129, 'parseECDSA', parseECDSA, false, true), false)(J$.R(5172137, 'data', data, false, false), J$.R(5172145, 'type', type, false, false), J$.R(5172153, 'format', format, false, false), J$.R(5172161, 'opts', opts, false, false)));
                                default:
                                    throw J$.F(5172209, J$.R(5172193, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(5172201, 'type', type, false, false));
                                }
                            } catch (e) {
                                J$.N(5172281, 'e', e, false, false, true);
                                if (J$.C(277048, J$.B(592834, 'instanceof', J$.R(5172217, 'e', e, false, false), J$.R(5172225, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true))))
                                    throw J$.R(5172233, 'e', e, false, false);
                                throw J$.F(5172273, J$.R(5172241, 'SignatureParseError', SignatureParseError, false, true), true)(J$.R(5172249, 'type', type, false, false), J$.R(5172257, 'format', format, false, false), J$.R(5172265, 'e', e, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(5175489, J$e);
                        } finally {
                            if (J$.Fr(5175497))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5175049, J$.R(5174953, 'Signature', Signature, false, true), 'isSignature', J$.T(5175041, function (obj, ver) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(5175009, arguments.callee, this, arguments);
                            arguments = J$.N(5175017, 'arguments', arguments, true, false, false);
                            obj = J$.N(5175025, 'obj', obj, true, false, false);
                            ver = J$.N(5175033, 'ver', ver, true, false, false);
                            return J$.Rt(5175001, J$.M(5174993, J$.R(5174961, 'utils', utils, false, true), 'isCompatible', false)(J$.R(5174969, 'obj', obj, false, false), J$.R(5174977, 'Signature', Signature, false, true), J$.R(5174985, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(5175569, J$e);
                        } finally {
                            if (J$.Fr(5175577))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(5175097, J$.G(5175065, J$.R(5175057, 'Signature', Signature, false, true), 'prototype'), '_sshpkApiVersion', J$.T(5175089, [
                J$.T(5175073, 2, 22, false),
                J$.T(5175081, 1, 22, false)
            ], 10, false));
            J$.P(5175265, J$.R(5175105, 'Signature', Signature, false, true), '_oldVersionDetect', J$.T(5175257, function (obj) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5175233, arguments.callee, this, arguments);
                            arguments = J$.N(5175241, 'arguments', arguments, true, false, false);
                            obj = J$.N(5175249, 'obj', obj, true, false, false);
                            J$.M(5175137, J$.R(5175113, 'assert', assert, false, true), 'func', false)(J$.G(5175129, J$.R(5175121, 'obj', obj, false, false), 'toBuffer'));
                            if (J$.C(277168, J$.M(5175161, J$.R(5175145, 'obj', obj, false, false), 'hasOwnProperty', false)(J$.T(5175153, 'hashAlgorithm', 21, false))))
                                return J$.Rt(5175193, J$.T(5175185, [
                                    J$.T(5175169, 2, 22, false),
                                    J$.T(5175177, 0, 22, false)
                                ], 10, false));
                            return J$.Rt(5175225, J$.T(5175217, [
                                J$.T(5175201, 1, 22, false),
                                J$.T(5175209, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(5175585, J$e);
                        } finally {
                            if (J$.Fr(5175593))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(5175601, J$e);
        } finally {
            if (J$.Sr(5175609))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

