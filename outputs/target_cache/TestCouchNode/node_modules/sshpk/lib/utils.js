J$.noInstrEval = false;
jalangiLabel20:
    while (true) {
        try {
            J$.Se(5189705, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/sshpk/lib/utils.js');
            function isCompatible(obj, klass, needVer) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(5181209, arguments.callee, this, arguments);
                            arguments = J$.N(5181217, 'arguments', arguments, true, false, false);
                            obj = J$.N(5181225, 'obj', obj, true, false, false);
                            klass = J$.N(5181233, 'klass', klass, true, false, false);
                            needVer = J$.N(5181241, 'needVer', needVer, true, false, false);
                            J$.N(5181249, 'proto', proto, false, false, false);
                            J$.N(5181257, 'depth', depth, false, false, false);
                            J$.N(5181265, 'ver', ver, false, false, false);
                            if (J$.C(277288, J$.C(277280, J$.B(593266, '===', J$.R(5180593, 'obj', obj, false, false), J$.T(5180601, null, 25, false))) ? J$._() : J$.B(593282, '!==', J$.U(593274, 'typeof', J$.R(5180609, 'obj', obj, false, false)), J$.T(5180617, 'object', 21, false))))
                                return J$.Rt(5180633, J$.T(5180625, false, 23, false));
                            if (J$.C(277296, J$.B(593290, '===', J$.R(5180641, 'needVer', needVer, false, false), J$.T(5180649, undefined, 24, false))))
                                needVer = J$.W(5180681, 'needVer', J$.G(5180673, J$.G(5180665, J$.R(5180657, 'klass', klass, false, false), 'prototype'), '_sshpkApiVersion'), needVer, false, false);
                            if (J$.C(277312, J$.C(277304, J$.B(593298, 'instanceof', J$.R(5180689, 'obj', obj, false, false), J$.R(5180697, 'klass', klass, false, false))) ? J$.B(593306, '==', J$.G(5180737, J$.G(5180721, J$.G(5180713, J$.R(5180705, 'klass', klass, false, false), 'prototype'), '_sshpkApiVersion'), J$.T(5180729, 0, 22, false)), J$.G(5180761, J$.R(5180745, 'needVer', needVer, false, false), J$.T(5180753, 0, 22, false))) : J$._()))
                                return J$.Rt(5180777, J$.T(5180769, true, 23, false));
                            var proto = J$.W(5180809, 'proto', J$.M(5180801, J$.I(typeof Object === 'undefined' ? Object = J$.R(5180785, 'Object', undefined, true, true) : Object = J$.R(5180785, 'Object', Object, true, true)), 'getPrototypeOf', false)(J$.R(5180793, 'obj', obj, false, false)), proto, false, false);
                            var depth = J$.W(5180825, 'depth', J$.T(5180817, 0, 22, false), depth, false, false);
                            while (J$.C(277336, J$.B(593314, '!==', J$.G(5180849, J$.G(5180841, J$.R(5180833, 'proto', proto, false, false), 'constructor'), 'name'), J$.G(5180865, J$.R(5180857, 'klass', klass, false, false), 'name')))) {
                                proto = J$.W(5180897, 'proto', J$.M(5180889, J$.I(typeof Object === 'undefined' ? Object = J$.R(5180873, 'Object', undefined, true, true) : Object = J$.R(5180873, 'Object', Object, true, true)), 'getPrototypeOf', false)(J$.R(5180881, 'proto', proto, false, false)), proto, false, false);
                                if (J$.C(277328, J$.C(277320, J$.U(593322, '!', J$.R(5180905, 'proto', proto, false, false))) ? J$._() : J$.B(593346, '>', depth = J$.W(5180921, 'depth', J$.B(593338, '+', J$.U(593330, '+', J$.R(5180913, 'depth', depth, false, false)), 1), depth, false, false), J$.R(5180929, 'MAX_CLASS_DEPTH', MAX_CLASS_DEPTH, false, true))))
                                    return J$.Rt(5180945, J$.T(5180937, false, 23, false));
                            }
                            if (J$.C(277344, J$.B(593354, '!==', J$.G(5180969, J$.G(5180961, J$.R(5180953, 'proto', proto, false, false), 'constructor'), 'name'), J$.G(5180985, J$.R(5180977, 'klass', klass, false, false), 'name'))))
                                return J$.Rt(5181001, J$.T(5180993, false, 23, false));
                            var ver = J$.W(5181025, 'ver', J$.G(5181017, J$.R(5181009, 'proto', proto, false, false), '_sshpkApiVersion'), ver, false, false);
                            if (J$.C(277352, J$.B(593362, '===', J$.R(5181033, 'ver', ver, false, false), J$.T(5181041, undefined, 24, false))))
                                ver = J$.W(5181073, 'ver', J$.M(5181065, J$.R(5181049, 'klass', klass, false, false), '_oldVersionDetect', false)(J$.R(5181057, 'obj', obj, false, false)), ver, false, false);
                            if (J$.C(277368, J$.C(277360, J$.B(593370, '!=', J$.G(5181097, J$.R(5181081, 'ver', ver, false, false), J$.T(5181089, 0, 22, false)), J$.G(5181121, J$.R(5181105, 'needVer', needVer, false, false), J$.T(5181113, 0, 22, false)))) ? J$._() : J$.B(593378, '<', J$.G(5181145, J$.R(5181129, 'ver', ver, false, false), J$.T(5181137, 1, 22, false)), J$.G(5181169, J$.R(5181153, 'needVer', needVer, false, false), J$.T(5181161, 1, 22, false)))))
                                return J$.Rt(5181185, J$.T(5181177, false, 23, false));
                            return J$.Rt(5181201, J$.T(5181193, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(5190121, J$e);
                        } finally {
                            if (J$.Fr(5190129))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertCompatible(obj, klass, needVer, name) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(5182113, arguments.callee, this, arguments);
                            arguments = J$.N(5182121, 'arguments', arguments, true, false, false);
                            obj = J$.N(5182129, 'obj', obj, true, false, false);
                            klass = J$.N(5182137, 'klass', klass, true, false, false);
                            needVer = J$.N(5182145, 'needVer', needVer, true, false, false);
                            name = J$.N(5182153, 'name', name, true, false, false);
                            J$.N(5182161, 'proto', proto, false, false, false);
                            J$.N(5182169, 'depth', depth, false, false, false);
                            J$.N(5182177, 'ver', ver, false, false, false);
                            if (J$.C(277376, J$.B(593386, '===', J$.R(5181273, 'name', name, false, false), J$.T(5181281, undefined, 24, false))))
                                name = J$.W(5181297, 'name', J$.T(5181289, 'object', 21, false), name, false, false);
                            J$.M(5181337, J$.R(5181305, 'assert', assert, false, true), 'ok', false)(J$.R(5181313, 'obj', obj, false, false), J$.B(593394, '+', J$.R(5181321, 'name', name, false, false), J$.T(5181329, ' must not be null', 21, false)));
                            J$.M(5181377, J$.R(5181345, 'assert', assert, false, true), 'object', false)(J$.R(5181353, 'obj', obj, false, false), J$.B(593402, '+', J$.R(5181361, 'name', name, false, false), J$.T(5181369, ' must be an object', 21, false)));
                            if (J$.C(277384, J$.B(593410, '===', J$.R(5181385, 'needVer', needVer, false, false), J$.T(5181393, undefined, 24, false))))
                                needVer = J$.W(5181425, 'needVer', J$.G(5181417, J$.G(5181409, J$.R(5181401, 'klass', klass, false, false), 'prototype'), '_sshpkApiVersion'), needVer, false, false);
                            if (J$.C(277400, J$.C(277392, J$.B(593418, 'instanceof', J$.R(5181433, 'obj', obj, false, false), J$.R(5181441, 'klass', klass, false, false))) ? J$.B(593426, '==', J$.G(5181481, J$.G(5181465, J$.G(5181457, J$.R(5181449, 'klass', klass, false, false), 'prototype'), '_sshpkApiVersion'), J$.T(5181473, 0, 22, false)), J$.G(5181505, J$.R(5181489, 'needVer', needVer, false, false), J$.T(5181497, 0, 22, false))) : J$._()))
                                return J$.Rt(5181513, undefined);
                            var proto = J$.W(5181545, 'proto', J$.M(5181537, J$.I(typeof Object === 'undefined' ? Object = J$.R(5181521, 'Object', undefined, true, true) : Object = J$.R(5181521, 'Object', Object, true, true)), 'getPrototypeOf', false)(J$.R(5181529, 'obj', obj, false, false)), proto, false, false);
                            var depth = J$.W(5181561, 'depth', J$.T(5181553, 0, 22, false), depth, false, false);
                            while (J$.C(277416, J$.B(593434, '!==', J$.G(5181585, J$.G(5181577, J$.R(5181569, 'proto', proto, false, false), 'constructor'), 'name'), J$.G(5181601, J$.R(5181593, 'klass', klass, false, false), 'name')))) {
                                proto = J$.W(5181633, 'proto', J$.M(5181625, J$.I(typeof Object === 'undefined' ? Object = J$.R(5181609, 'Object', undefined, true, true) : Object = J$.R(5181609, 'Object', Object, true, true)), 'getPrototypeOf', false)(J$.R(5181617, 'proto', proto, false, false)), proto, false, false);
                                J$.M(5181721, J$.R(5181641, 'assert', assert, false, true), 'ok', false)(J$.C(277408, J$.R(5181649, 'proto', proto, false, false)) ? J$.B(593458, '<=', depth = J$.W(5181665, 'depth', J$.B(593450, '+', J$.U(593442, '+', J$.R(5181657, 'depth', depth, false, false)), 1), depth, false, false), J$.R(5181673, 'MAX_CLASS_DEPTH', MAX_CLASS_DEPTH, false, true)) : J$._(), J$.B(593482, '+', J$.B(593474, '+', J$.B(593466, '+', J$.R(5181681, 'name', name, false, false), J$.T(5181689, ' must be a ', 21, false)), J$.G(5181705, J$.R(5181697, 'klass', klass, false, false), 'name')), J$.T(5181713, ' instance', 21, false)));
                            }
                            J$.M(5181817, J$.R(5181729, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5181753, J$.G(5181745, J$.R(5181737, 'proto', proto, false, false), 'constructor'), 'name'), J$.G(5181769, J$.R(5181761, 'klass', klass, false, false), 'name'), J$.B(593506, '+', J$.B(593498, '+', J$.B(593490, '+', J$.R(5181777, 'name', name, false, false), J$.T(5181785, ' must be a ', 21, false)), J$.G(5181801, J$.R(5181793, 'klass', klass, false, false), 'name')), J$.T(5181809, ' instance', 21, false)));
                            var ver = J$.W(5181841, 'ver', J$.G(5181833, J$.R(5181825, 'proto', proto, false, false), '_sshpkApiVersion'), ver, false, false);
                            if (J$.C(277424, J$.B(593514, '===', J$.R(5181849, 'ver', ver, false, false), J$.T(5181857, undefined, 24, false))))
                                ver = J$.W(5181889, 'ver', J$.M(5181881, J$.R(5181865, 'klass', klass, false, false), '_oldVersionDetect', false)(J$.R(5181873, 'obj', obj, false, false)), ver, false, false);
                            J$.M(5182105, J$.R(5181897, 'assert', assert, false, true), 'ok', false)(J$.C(277432, J$.B(593522, '==', J$.G(5181921, J$.R(5181905, 'ver', ver, false, false), J$.T(5181913, 0, 22, false)), J$.G(5181945, J$.R(5181929, 'needVer', needVer, false, false), J$.T(5181937, 0, 22, false)))) ? J$.B(593530, '>=', J$.G(5181969, J$.R(5181953, 'ver', ver, false, false), J$.T(5181961, 1, 22, false)), J$.G(5181993, J$.R(5181977, 'needVer', needVer, false, false), J$.T(5181985, 1, 22, false))) : J$._(), J$.B(593586, '+', J$.B(593578, '+', J$.B(593570, '+', J$.B(593562, '+', J$.B(593554, '+', J$.B(593546, '+', J$.B(593538, '+', J$.R(5182001, 'name', name, false, false), J$.T(5182009, ' must be compatible with ', 21, false)), J$.G(5182025, J$.R(5182017, 'klass', klass, false, false), 'name')), J$.T(5182033, ' klass ', 21, false)), J$.T(5182041, 'version ', 21, false)), J$.G(5182065, J$.R(5182049, 'needVer', needVer, false, false), J$.T(5182057, 0, 22, false))), J$.T(5182073, '.', 21, false)), J$.G(5182097, J$.R(5182081, 'needVer', needVer, false, false), J$.T(5182089, 1, 22, false))));
                        } catch (J$e) {
                            J$.Ex(5190137, J$e);
                        } finally {
                            if (J$.Fr(5190145))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function opensslKeyDeriv(cipher, salt, passphrase, count) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(5182985, arguments.callee, this, arguments);
                            arguments = J$.N(5182993, 'arguments', arguments, true, false, false);
                            cipher = J$.N(5183001, 'cipher', cipher, true, false, false);
                            salt = J$.N(5183009, 'salt', salt, true, false, false);
                            passphrase = J$.N(5183017, 'passphrase', passphrase, true, false, false);
                            count = J$.N(5183025, 'count', count, true, false, false);
                            J$.N(5183033, 'clen', clen, false, false, false);
                            J$.N(5183041, 'D', D, false, false, false);
                            J$.N(5183049, 'D_prev', D_prev, false, false, false);
                            J$.N(5183057, 'bufs', bufs, false, false, false);
                            J$.N(5183065, 'material', material, false, false, false);
                            J$.N(5183073, 'j', j, false, false, false);
                            J$.M(5182313, J$.R(5182289, 'assert', assert, false, true), 'buffer', false)(J$.R(5182297, 'salt', salt, false, false), J$.T(5182305, 'salt', 21, false));
                            J$.M(5182345, J$.R(5182321, 'assert', assert, false, true), 'buffer', false)(J$.R(5182329, 'passphrase', passphrase, false, false), J$.T(5182337, 'passphrase', 21, false));
                            J$.M(5182377, J$.R(5182353, 'assert', assert, false, true), 'number', false)(J$.R(5182361, 'count', count, false, false), J$.T(5182369, 'iteration count', 21, false));
                            var clen = J$.W(5182409, 'clen', J$.G(5182401, J$.R(5182385, 'CIPHER_LEN', CIPHER_LEN, false, true), J$.R(5182393, 'cipher', cipher, false, false)), clen, false, false);
                            J$.M(5182441, J$.R(5182417, 'assert', assert, false, true), 'object', false)(J$.R(5182425, 'clen', clen, false, false), J$.T(5182433, 'supported cipher', 21, false));
                            salt = J$.W(5182481, 'salt', J$.M(5182473, J$.R(5182449, 'salt', salt, false, false), 'slice', false)(J$.T(5182457, 0, 22, false), J$.R(5182465, 'PKCS5_SALT_LEN', PKCS5_SALT_LEN, false, true)), salt, false, false);
                            var D, D_prev, bufs;
                            var material = J$.W(5182513, 'material', J$.M(5182505, J$.R(5182489, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(5182497, 0, 22, false)), material, false, false);
                            while (J$.C(277456, J$.B(593602, '<', J$.G(5182529, J$.R(5182521, 'material', material, false, false), 'length'), J$.B(593594, '+', J$.G(5182545, J$.R(5182537, 'clen', clen, false, false), 'key'), J$.G(5182561, J$.R(5182553, 'clen', clen, false, false), 'iv'))))) {
                                bufs = J$.W(5182577, 'bufs', J$.T(5182569, [], 10, false), bufs, false, false);
                                if (J$.C(277440, J$.R(5182585, 'D_prev', D_prev, false, false)))
                                    J$.M(5182609, J$.R(5182593, 'bufs', bufs, false, false), 'push', false)(J$.R(5182601, 'D_prev', D_prev, false, false));
                                J$.M(5182633, J$.R(5182617, 'bufs', bufs, false, false), 'push', false)(J$.R(5182625, 'passphrase', passphrase, false, false));
                                J$.M(5182657, J$.R(5182641, 'bufs', bufs, false, false), 'push', false)(J$.R(5182649, 'salt', salt, false, false));
                                D = J$.W(5182689, 'D', J$.M(5182681, J$.R(5182665, 'Buffer', Buffer, false, true), 'concat', false)(J$.R(5182673, 'bufs', bufs, false, false)), D, false, false);
                                for (var j = J$.W(5182705, 'j', J$.T(5182697, 0, 22, false), j, false, false); J$.C(277448, J$.B(593610, '<', J$.R(5182713, 'j', j, false, false), J$.R(5182721, 'count', count, false, false))); j = J$.W(5182737, 'j', J$.B(593626, '+', J$.U(593618, '+', J$.R(5182729, 'j', j, false, false)), 1), j, false, false))
                                    D = J$.W(5182793, 'D', J$.M(5182785, J$.M(5182777, J$.M(5182761, J$.R(5182745, 'crypto', crypto, false, true), 'createHash', false)(J$.T(5182753, 'md5', 21, false)), 'update', false)(J$.R(5182769, 'D', D, false, false)), 'digest', false)(), D, false, false);
                                material = J$.W(5182841, 'material', J$.M(5182833, J$.R(5182801, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(5182825, [
                                    J$.R(5182809, 'material', material, false, false),
                                    J$.R(5182817, 'D', D, false, false)
                                ], 10, false)), material, false, false);
                                D_prev = J$.W(5182857, 'D_prev', J$.R(5182849, 'D', D, false, false), D_prev, false, false);
                            }
                            return J$.Rt(5182977, J$.T(5182969, {
                                key: J$.M(5182897, J$.R(5182865, 'material', material, false, false), 'slice', false)(J$.T(5182873, 0, 22, false), J$.G(5182889, J$.R(5182881, 'clen', clen, false, false), 'key')),
                                iv: J$.M(5182961, J$.R(5182905, 'material', material, false, false), 'slice', false)(J$.G(5182921, J$.R(5182913, 'clen', clen, false, false), 'key'), J$.B(593634, '+', J$.G(5182937, J$.R(5182929, 'clen', clen, false, false), 'key'), J$.G(5182953, J$.R(5182945, 'clen', clen, false, false), 'iv')))
                            }, 11, false));
                        } catch (J$e) {
                            J$.Ex(5190153, J$e);
                        } finally {
                            if (J$.Fr(5190161))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function pbkdf2(hashAlg, salt, iterations, size, passphrase) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(5183833, arguments.callee, this, arguments);
                            function T(I) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(5183769, arguments.callee, this, arguments);
                                            arguments = J$.N(5183777, 'arguments', arguments, true, false, false);
                                            I = J$.N(5183785, 'I', I, true, false, false);
                                            J$.N(5183793, 'hmac', hmac, false, false, false);
                                            J$.N(5183801, 'Ti', Ti, false, false, false);
                                            J$.N(5183809, 'Uc', Uc, false, false, false);
                                            J$.N(5183817, 'c', c, false, false, false);
                                            J$.N(5183825, 'x', x, false, false, false);
                                            J$.M(5183409, J$.R(5183369, 'hkey', hkey, false, false), 'writeUInt32BE', false)(J$.R(5183377, 'I', I, false, false), J$.B(593690, '-', J$.G(5183393, J$.R(5183385, 'hkey', hkey, false, false), 'length'), J$.T(5183401, 4, 22, false)));
                                            var hmac = J$.W(5183449, 'hmac', J$.M(5183441, J$.R(5183417, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(5183425, 'hashAlg', hashAlg, false, false), J$.R(5183433, 'passphrase', passphrase, false, false)), hmac, false, false);
                                            J$.M(5183473, J$.R(5183457, 'hmac', hmac, false, false), 'update', false)(J$.R(5183465, 'hkey', hkey, false, false));
                                            var Ti = J$.W(5183497, 'Ti', J$.M(5183489, J$.R(5183481, 'hmac', hmac, false, false), 'digest', false)(), Ti, false, false);
                                            var Uc = J$.W(5183513, 'Uc', J$.R(5183505, 'Ti', Ti, false, false), Uc, false, false);
                                            var c = J$.W(5183529, 'c', J$.T(5183521, 1, 22, false), c, false, false);
                                            while (J$.C(277480, J$.B(593722, '<', J$.B(593714, '-', c = J$.W(5183545, 'c', J$.B(593706, '+', J$.U(593698, '+', J$.R(5183537, 'c', c, false, false)), 1), c, false, false), 1), J$.R(5183553, 'iterations', iterations, false, false)))) {
                                                hmac = J$.W(5183593, 'hmac', J$.M(5183585, J$.R(5183561, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(5183569, 'hashAlg', hashAlg, false, false), J$.R(5183577, 'passphrase', passphrase, false, false)), hmac, false, false);
                                                J$.M(5183617, J$.R(5183601, 'hmac', hmac, false, false), 'update', false)(J$.R(5183609, 'Uc', Uc, false, false));
                                                Uc = J$.W(5183641, 'Uc', J$.M(5183633, J$.R(5183625, 'hmac', hmac, false, false), 'digest', false)(), Uc, false, false);
                                                for (var x = J$.W(5183657, 'x', J$.T(5183649, 0, 22, false), x, false, false); J$.C(277472, J$.B(593730, '<', J$.R(5183665, 'x', x, false, false), J$.G(5183681, J$.R(5183673, 'Ti', Ti, false, false), 'length'))); x = J$.W(5183697, 'x', J$.B(593746, '+', J$.U(593738, '+', J$.R(5183689, 'x', x, false, false)), 1), x, false, false))
                                                    J$.A(5183745, J$.R(5183705, 'Ti', Ti, false, false), J$.R(5183713, 'x', x, false, false), '^')(J$.G(5183737, J$.R(5183721, 'Uc', Uc, false, false), J$.R(5183729, 'x', x, false, false)));
                                            }
                                            return J$.Rt(5183761, J$.R(5183753, 'Ti', Ti, false, false));
                                        } catch (J$e) {
                                            J$.Ex(5190169, J$e);
                                        } finally {
                                            if (J$.Fr(5190177))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(5183841, 'arguments', arguments, true, false, false);
                            hashAlg = J$.N(5183849, 'hashAlg', hashAlg, true, false, false);
                            salt = J$.N(5183857, 'salt', salt, true, false, false);
                            iterations = J$.N(5183865, 'iterations', iterations, true, false, false);
                            size = J$.N(5183873, 'size', size, true, false, false);
                            passphrase = J$.N(5183881, 'passphrase', passphrase, true, false, false);
                            J$.N(5183889, 'hkey', hkey, false, false, false);
                            J$.N(5183897, 'gen', gen, false, false, false);
                            J$.N(5183905, 'ts', ts, false, false, false);
                            J$.N(5183913, 'i', i, false, false, false);
                            J$.N(5183921, 't', t, false, false, false);
                            T = J$.N(5183937, 'T', J$.T(5183929, T, 12, false), true, false, false);
                            var hkey = J$.W(5183121, 'hkey', J$.M(5183113, J$.R(5183081, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(593642, '+', J$.G(5183097, J$.R(5183089, 'salt', salt, false, false), 'length'), J$.T(5183105, 4, 22, false))), hkey, false, false);
                            J$.M(5183145, J$.R(5183129, 'salt', salt, false, false), 'copy', false)(J$.R(5183137, 'hkey', hkey, false, false));
                            var gen = J$.W(5183169, 'gen', J$.T(5183153, 0, 22, false), gen, false, false), ts = J$.W(5183177, 'ts', J$.T(5183161, [], 10, false), ts, false, false);
                            var i = J$.W(5183193, 'i', J$.T(5183185, 1, 22, false), i, false, false);
                            while (J$.C(277464, J$.B(593650, '<', J$.R(5183201, 'gen', gen, false, false), J$.R(5183209, 'size', size, false, false)))) {
                                var t = J$.W(5183249, 't', J$.F(5183241, J$.R(5183217, 'T', T, false, false), false)(J$.B(593674, '-', i = J$.W(5183233, 'i', J$.B(593666, '+', J$.U(593658, '+', J$.R(5183225, 'i', i, false, false)), 1), i, false, false), 1)), t, false, false);
                                gen = J$.W(5183281, 'gen', J$.B(593682, '+', J$.R(5183273, 'gen', gen, false, false), J$.G(5183265, J$.R(5183257, 't', t, false, false), 'length')), gen, false, false);
                                J$.M(5183305, J$.R(5183289, 'ts', ts, false, false), 'push', false)(J$.R(5183297, 't', t, false, false));
                            }
                            return J$.Rt(5183361, J$.M(5183353, J$.M(5183329, J$.R(5183313, 'Buffer', Buffer, false, true), 'concat', false)(J$.R(5183321, 'ts', ts, false, false)), 'slice', false)(J$.T(5183337, 0, 22, false), J$.R(5183345, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(5190185, J$e);
                        } finally {
                            if (J$.Fr(5190193))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function countZeros(buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(5184177, arguments.callee, this, arguments);
                            arguments = J$.N(5184185, 'arguments', arguments, true, false, false);
                            buf = J$.N(5184193, 'buf', buf, true, false, false);
                            J$.N(5184201, 'o', o, false, false, false);
                            J$.N(5184209, 'obit', obit, false, false, false);
                            J$.N(5184217, 'mask', mask, false, false, false);
                            var o = J$.W(5183961, 'o', J$.T(5183945, 0, 22, false), o, false, false), obit = J$.W(5183969, 'obit', J$.T(5183953, 8, 22, false), obit, false, false);
                            while (J$.C(277504, J$.B(593754, '<', J$.R(5183977, 'o', o, false, false), J$.G(5183993, J$.R(5183985, 'buf', buf, false, false), 'length')))) {
                                var mask = J$.W(5184017, 'mask', J$.B(593762, '<<', J$.T(5184001, 1, 22, false), J$.R(5184009, 'obit', obit, false, false)), mask, false, false);
                                if (J$.C(277488, J$.B(593778, '===', J$.B(593770, '&', J$.G(5184041, J$.R(5184025, 'buf', buf, false, false), J$.R(5184033, 'o', o, false, false)), J$.R(5184049, 'mask', mask, false, false)), J$.R(5184057, 'mask', mask, false, false))))
                                    break;
                                J$.B(593802, '+', obit = J$.W(5184073, 'obit', J$.B(593794, '-', J$.U(593786, '+', J$.R(5184065, 'obit', obit, false, false)), 1), obit, false, false), 1);
                                if (J$.C(277496, J$.B(593810, '<', J$.R(5184081, 'obit', obit, false, false), J$.T(5184089, 0, 22, false)))) {
                                    J$.B(593834, '-', o = J$.W(5184105, 'o', J$.B(593826, '+', J$.U(593818, '+', J$.R(5184097, 'o', o, false, false)), 1), o, false, false), 1);
                                    obit = J$.W(5184121, 'obit', J$.T(5184113, 8, 22, false), obit, false, false);
                                }
                            }
                            return J$.Rt(5184169, J$.B(593866, '-', J$.B(593858, '+', J$.B(593842, '*', J$.R(5184129, 'o', o, false, false), J$.T(5184137, 8, 22, false)), J$.B(593850, '-', J$.T(5184145, 8, 22, false), J$.R(5184153, 'obit', obit, false, false))), J$.T(5184161, 1, 22, false)));
                        } catch (J$e) {
                            J$.Ex(5190201, J$e);
                        } finally {
                            if (J$.Fr(5190209))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function bufferSplit(buf, chr) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(5184753, arguments.callee, this, arguments);
                            arguments = J$.N(5184761, 'arguments', arguments, true, false, false);
                            buf = J$.N(5184769, 'buf', buf, true, false, false);
                            chr = J$.N(5184777, 'chr', chr, true, false, false);
                            J$.N(5184785, 'parts', parts, false, false, false);
                            J$.N(5184793, 'lastPart', lastPart, false, false, false);
                            J$.N(5184801, 'matches', matches, false, false, false);
                            J$.N(5184809, 'i', i, false, false, false);
                            J$.N(5184817, 'newPart', newPart, false, false, false);
                            J$.M(5184241, J$.R(5184225, 'assert', assert, false, true), 'buffer', false)(J$.R(5184233, 'buf', buf, false, false));
                            J$.M(5184265, J$.R(5184249, 'assert', assert, false, true), 'string', false)(J$.R(5184257, 'chr', chr, false, false));
                            var parts = J$.W(5184281, 'parts', J$.T(5184273, [], 10, false), parts, false, false);
                            var lastPart = J$.W(5184297, 'lastPart', J$.T(5184289, 0, 22, false), lastPart, false, false);
                            var matches = J$.W(5184313, 'matches', J$.T(5184305, 0, 22, false), matches, false, false);
                            for (var i = J$.W(5184329, 'i', J$.T(5184321, 0, 22, false), i, false, false); J$.C(277536, J$.B(593874, '<', J$.R(5184337, 'i', i, false, false), J$.G(5184353, J$.R(5184345, 'buf', buf, false, false), 'length'))); i = J$.W(5184369, 'i', J$.B(593890, '+', J$.U(593882, '+', J$.R(5184361, 'i', i, false, false)), 1), i, false, false)) {
                                if (J$.C(277520, J$.B(593898, '===', J$.G(5184393, J$.R(5184377, 'buf', buf, false, false), J$.R(5184385, 'i', i, false, false)), J$.M(5184417, J$.R(5184401, 'chr', chr, false, false), 'charCodeAt', false)(J$.R(5184409, 'matches', matches, false, false)))))
                                    matches = J$.W(5184433, 'matches', J$.B(593914, '+', J$.U(593906, '+', J$.R(5184425, 'matches', matches, false, false)), 1), matches, false, false);
                                else if (J$.C(277512, J$.B(593922, '===', J$.G(5184457, J$.R(5184441, 'buf', buf, false, false), J$.R(5184449, 'i', i, false, false)), J$.M(5184481, J$.R(5184465, 'chr', chr, false, false), 'charCodeAt', false)(J$.T(5184473, 0, 22, false)))))
                                    matches = J$.W(5184497, 'matches', J$.T(5184489, 1, 22, false), matches, false, false);
                                else
                                    matches = J$.W(5184513, 'matches', J$.T(5184505, 0, 22, false), matches, false, false);
                                if (J$.C(277528, J$.B(593930, '>=', J$.R(5184521, 'matches', matches, false, false), J$.G(5184537, J$.R(5184529, 'chr', chr, false, false), 'length')))) {
                                    var newPart = J$.W(5184561, 'newPart', J$.B(593938, '+', J$.R(5184545, 'i', i, false, false), J$.T(5184553, 1, 22, false)), newPart, false, false);
                                    J$.M(5184617, J$.R(5184569, 'parts', parts, false, false), 'push', false)(J$.M(5184609, J$.R(5184577, 'buf', buf, false, false), 'slice', false)(J$.R(5184585, 'lastPart', lastPart, false, false), J$.B(593946, '-', J$.R(5184593, 'newPart', newPart, false, false), J$.R(5184601, 'matches', matches, false, false))));
                                    lastPart = J$.W(5184633, 'lastPart', J$.R(5184625, 'newPart', newPart, false, false), lastPart, false, false);
                                    matches = J$.W(5184649, 'matches', J$.T(5184641, 0, 22, false), matches, false, false);
                                }
                            }
                            if (J$.C(277544, J$.B(593954, '<=', J$.R(5184657, 'lastPart', lastPart, false, false), J$.G(5184673, J$.R(5184665, 'buf', buf, false, false), 'length'))))
                                J$.M(5184729, J$.R(5184681, 'parts', parts, false, false), 'push', false)(J$.M(5184721, J$.R(5184689, 'buf', buf, false, false), 'slice', false)(J$.R(5184697, 'lastPart', lastPart, false, false), J$.G(5184713, J$.R(5184705, 'buf', buf, false, false), 'length')));
                            return J$.Rt(5184745, J$.R(5184737, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(5190217, J$e);
                        } finally {
                            if (J$.Fr(5190225))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function ecNormalize(buf, addZero) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(5185393, arguments.callee, this, arguments);
                            arguments = J$.N(5185401, 'arguments', arguments, true, false, false);
                            buf = J$.N(5185409, 'buf', buf, true, false, false);
                            addZero = J$.N(5185417, 'addZero', addZero, true, false, false);
                            J$.N(5185425, 'b', b, false, false, false);
                            J$.M(5184841, J$.R(5184825, 'assert', assert, false, true), 'buffer', false)(J$.R(5184833, 'buf', buf, false, false));
                            if (J$.C(277624, J$.C(277552, J$.B(593962, '===', J$.G(5184865, J$.R(5184849, 'buf', buf, false, false), J$.T(5184857, 0, 22, false)), J$.T(5184873, 0, 22, false))) ? J$.B(593970, '===', J$.G(5184897, J$.R(5184881, 'buf', buf, false, false), J$.T(5184889, 1, 22, false)), J$.T(5184905, 4, 22, false)) : J$._())) {
                                if (J$.C(277560, J$.R(5184913, 'addZero', addZero, false, false)))
                                    return J$.Rt(5184929, J$.R(5184921, 'buf', buf, false, false));
                                return J$.Rt(5184961, J$.M(5184953, J$.R(5184937, 'buf', buf, false, false), 'slice', false)(J$.T(5184945, 1, 22, false)));
                            } else if (J$.C(277616, J$.B(593978, '===', J$.G(5184985, J$.R(5184969, 'buf', buf, false, false), J$.T(5184977, 0, 22, false)), J$.T(5184993, 4, 22, false)))) {
                                if (J$.C(277568, J$.U(593986, '!', J$.R(5185001, 'addZero', addZero, false, false))))
                                    return J$.Rt(5185017, J$.R(5185009, 'buf', buf, false, false));
                            } else {
                                while (J$.C(277576, J$.B(593994, '===', J$.G(5185041, J$.R(5185025, 'buf', buf, false, false), J$.T(5185033, 0, 22, false)), J$.T(5185049, 0, 22, false))))
                                    buf = J$.W(5185081, 'buf', J$.M(5185073, J$.R(5185057, 'buf', buf, false, false), 'slice', false)(J$.T(5185065, 1, 22, false)), buf, false, false);
                                if (J$.C(277592, J$.C(277584, J$.B(594002, '===', J$.G(5185105, J$.R(5185089, 'buf', buf, false, false), J$.T(5185097, 0, 22, false)), J$.T(5185113, 2, 22, false))) ? J$._() : J$.B(594010, '===', J$.G(5185137, J$.R(5185121, 'buf', buf, false, false), J$.T(5185129, 0, 22, false)), J$.T(5185145, 3, 22, false))))
                                    throw J$.F(5185177, J$.I(typeof Error === 'undefined' ? Error = J$.R(5185153, 'Error', undefined, true, true) : Error = J$.R(5185153, 'Error', Error, true, true)), true)(J$.B(594018, '+', J$.T(5185161, 'Compressed elliptic curve points ', 21, false), J$.T(5185169, 'are not supported', 21, false)));
                                if (J$.C(277600, J$.B(594026, '!==', J$.G(5185201, J$.R(5185185, 'buf', buf, false, false), J$.T(5185193, 0, 22, false)), J$.T(5185209, 4, 22, false))))
                                    throw J$.F(5185233, J$.I(typeof Error === 'undefined' ? Error = J$.R(5185217, 'Error', undefined, true, true) : Error = J$.R(5185217, 'Error', Error, true, true)), true)(J$.T(5185225, 'Not a valid elliptic curve point', 21, false));
                                if (J$.C(277608, J$.U(594034, '!', J$.R(5185241, 'addZero', addZero, false, false))))
                                    return J$.Rt(5185257, J$.R(5185249, 'buf', buf, false, false));
                            }
                            var b = J$.W(5185305, 'b', J$.M(5185297, J$.R(5185265, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(594042, '+', J$.G(5185281, J$.R(5185273, 'buf', buf, false, false), 'length'), J$.T(5185289, 1, 22, false))), b, false, false);
                            J$.P(5185337, J$.R(5185313, 'b', b, false, false), J$.T(5185321, 0, 22, false), J$.T(5185329, 0, 22, false));
                            J$.M(5185369, J$.R(5185345, 'buf', buf, false, false), 'copy', false)(J$.R(5185353, 'b', b, false, false), J$.T(5185361, 1, 22, false));
                            return J$.Rt(5185385, J$.R(5185377, 'b', b, false, false));
                        } catch (J$e) {
                            J$.Ex(5190233, J$e);
                        } finally {
                            if (J$.Fr(5190241))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readBitString(der, tag) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(5185665, arguments.callee, this, arguments);
                            arguments = J$.N(5185673, 'arguments', arguments, true, false, false);
                            der = J$.N(5185681, 'der', der, true, false, false);
                            tag = J$.N(5185689, 'tag', tag, true, false, false);
                            J$.N(5185697, 'buf', buf, false, false, false);
                            if (J$.C(277632, J$.B(594050, '===', J$.R(5185433, 'tag', tag, false, false), J$.T(5185441, undefined, 24, false))))
                                tag = J$.W(5185473, 'tag', J$.G(5185465, J$.G(5185457, J$.R(5185449, 'asn1', asn1, false, true), 'Ber'), 'BitString'), tag, false, false);
                            var buf = J$.W(5185513, 'buf', J$.M(5185505, J$.R(5185481, 'der', der, false, false), 'readString', false)(J$.R(5185489, 'tag', tag, false, false), J$.T(5185497, true, 23, false)), buf, false, false);
                            J$.M(5185625, J$.R(5185521, 'assert', assert, false, true), 'strictEqual', false)(J$.G(5185545, J$.R(5185529, 'buf', buf, false, false), J$.T(5185537, 0, 22, false)), J$.T(5185553, 0, 22, false), J$.B(594074, '+', J$.B(594066, '+', J$.B(594058, '+', J$.T(5185561, 'bit strings with unused bits are ', 21, false), J$.T(5185569, 'not supported (0x', 21, false)), J$.M(5185609, J$.G(5185593, J$.R(5185577, 'buf', buf, false, false), J$.T(5185585, 0, 22, false)), 'toString', false)(J$.T(5185601, 16, 22, false))), J$.T(5185617, ')', 21, false)));
                            return J$.Rt(5185657, J$.M(5185649, J$.R(5185633, 'buf', buf, false, false), 'slice', false)(J$.T(5185641, 1, 22, false)));
                        } catch (J$e) {
                            J$.Ex(5190249, J$e);
                        } finally {
                            if (J$.Fr(5190257))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeBitString(der, buf, tag) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(5185897, arguments.callee, this, arguments);
                            arguments = J$.N(5185905, 'arguments', arguments, true, false, false);
                            der = J$.N(5185913, 'der', der, true, false, false);
                            buf = J$.N(5185921, 'buf', buf, true, false, false);
                            tag = J$.N(5185929, 'tag', tag, true, false, false);
                            J$.N(5185937, 'b', b, false, false, false);
                            if (J$.C(277640, J$.B(594082, '===', J$.R(5185705, 'tag', tag, false, false), J$.T(5185713, undefined, 24, false))))
                                tag = J$.W(5185745, 'tag', J$.G(5185737, J$.G(5185729, J$.R(5185721, 'asn1', asn1, false, true), 'Ber'), 'BitString'), tag, false, false);
                            var b = J$.W(5185793, 'b', J$.M(5185785, J$.R(5185753, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(594090, '+', J$.G(5185769, J$.R(5185761, 'buf', buf, false, false), 'length'), J$.T(5185777, 1, 22, false))), b, false, false);
                            J$.P(5185825, J$.R(5185801, 'b', b, false, false), J$.T(5185809, 0, 22, false), J$.T(5185817, 0, 22, false));
                            J$.M(5185857, J$.R(5185833, 'buf', buf, false, false), 'copy', false)(J$.R(5185841, 'b', b, false, false), J$.T(5185849, 1, 22, false));
                            J$.M(5185889, J$.R(5185865, 'der', der, false, false), 'writeBuffer', false)(J$.R(5185873, 'b', b, false, false), J$.R(5185881, 'tag', tag, false, false));
                        } catch (J$e) {
                            J$.Ex(5190265, J$e);
                        } finally {
                            if (J$.Fr(5190273))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function mpNormalize(buf) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5186281, arguments.callee, this, arguments);
                            arguments = J$.N(5186289, 'arguments', arguments, true, false, false);
                            buf = J$.N(5186297, 'buf', buf, true, false, false);
                            J$.N(5186305, 'b', b, false, false, false);
                            J$.M(5185961, J$.R(5185945, 'assert', assert, false, true), 'buffer', false)(J$.R(5185953, 'buf', buf, false, false));
                            while (J$.C(277664, J$.C(277656, J$.C(277648, J$.B(594098, '>', J$.G(5185977, J$.R(5185969, 'buf', buf, false, false), 'length'), J$.T(5185985, 1, 22, false))) ? J$.B(594106, '===', J$.G(5186009, J$.R(5185993, 'buf', buf, false, false), J$.T(5186001, 0, 22, false)), J$.T(5186017, 0, 22, false)) : J$._()) ? J$.B(594122, '===', J$.B(594114, '&', J$.G(5186041, J$.R(5186025, 'buf', buf, false, false), J$.T(5186033, 1, 22, false)), J$.T(5186049, 128, 22, false)), J$.T(5186057, 0, 22, false)) : J$._()))
                                buf = J$.W(5186089, 'buf', J$.M(5186081, J$.R(5186065, 'buf', buf, false, false), 'slice', false)(J$.T(5186073, 1, 22, false)), buf, false, false);
                            if (J$.C(277672, J$.B(594138, '===', J$.B(594130, '&', J$.G(5186113, J$.R(5186097, 'buf', buf, false, false), J$.T(5186105, 0, 22, false)), J$.T(5186121, 128, 22, false)), J$.T(5186129, 128, 22, false)))) {
                                var b = J$.W(5186177, 'b', J$.M(5186169, J$.R(5186137, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(594146, '+', J$.G(5186153, J$.R(5186145, 'buf', buf, false, false), 'length'), J$.T(5186161, 1, 22, false))), b, false, false);
                                J$.P(5186209, J$.R(5186185, 'b', b, false, false), J$.T(5186193, 0, 22, false), J$.T(5186201, 0, 22, false));
                                J$.M(5186241, J$.R(5186217, 'buf', buf, false, false), 'copy', false)(J$.R(5186225, 'b', b, false, false), J$.T(5186233, 1, 22, false));
                                buf = J$.W(5186257, 'buf', J$.R(5186249, 'b', b, false, false), buf, false, false);
                            }
                            return J$.Rt(5186273, J$.R(5186265, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190281, J$e);
                        } finally {
                            if (J$.Fr(5190289))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function mpDenormalize(buf) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(5186441, arguments.callee, this, arguments);
                            arguments = J$.N(5186449, 'arguments', arguments, true, false, false);
                            buf = J$.N(5186457, 'buf', buf, true, false, false);
                            J$.M(5186329, J$.R(5186313, 'assert', assert, false, true), 'buffer', false)(J$.R(5186321, 'buf', buf, false, false));
                            while (J$.C(277688, J$.C(277680, J$.B(594154, '>', J$.G(5186345, J$.R(5186337, 'buf', buf, false, false), 'length'), J$.T(5186353, 1, 22, false))) ? J$.B(594162, '===', J$.G(5186377, J$.R(5186361, 'buf', buf, false, false), J$.T(5186369, 0, 22, false)), J$.T(5186385, 0, 22, false)) : J$._()))
                                buf = J$.W(5186417, 'buf', J$.M(5186409, J$.R(5186393, 'buf', buf, false, false), 'slice', false)(J$.T(5186401, 1, 22, false)), buf, false, false);
                            return J$.Rt(5186433, J$.R(5186425, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190297, J$e);
                        } finally {
                            if (J$.Fr(5190305))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function zeroPadToLength(buf, len) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(5186785, arguments.callee, this, arguments);
                            arguments = J$.N(5186793, 'arguments', arguments, true, false, false);
                            buf = J$.N(5186801, 'buf', buf, true, false, false);
                            len = J$.N(5186809, 'len', len, true, false, false);
                            J$.N(5186817, 'b', b, false, false, false);
                            J$.M(5186481, J$.R(5186465, 'assert', assert, false, true), 'buffer', false)(J$.R(5186473, 'buf', buf, false, false));
                            J$.M(5186505, J$.R(5186489, 'assert', assert, false, true), 'number', false)(J$.R(5186497, 'len', len, false, false));
                            while (J$.C(277696, J$.B(594170, '>', J$.G(5186521, J$.R(5186513, 'buf', buf, false, false), 'length'), J$.R(5186529, 'len', len, false, false)))) {
                                J$.M(5186577, J$.R(5186537, 'assert', assert, false, true), 'equal', false)(J$.G(5186561, J$.R(5186545, 'buf', buf, false, false), J$.T(5186553, 0, 22, false)), J$.T(5186569, 0, 22, false));
                                buf = J$.W(5186609, 'buf', J$.M(5186601, J$.R(5186585, 'buf', buf, false, false), 'slice', false)(J$.T(5186593, 1, 22, false)), buf, false, false);
                            }
                            while (J$.C(277704, J$.B(594178, '<', J$.G(5186625, J$.R(5186617, 'buf', buf, false, false), 'length'), J$.R(5186633, 'len', len, false, false)))) {
                                var b = J$.W(5186681, 'b', J$.M(5186673, J$.R(5186641, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(594186, '+', J$.G(5186657, J$.R(5186649, 'buf', buf, false, false), 'length'), J$.T(5186665, 1, 22, false))), b, false, false);
                                J$.P(5186713, J$.R(5186689, 'b', b, false, false), J$.T(5186697, 0, 22, false), J$.T(5186705, 0, 22, false));
                                J$.M(5186745, J$.R(5186721, 'buf', buf, false, false), 'copy', false)(J$.R(5186729, 'b', b, false, false), J$.T(5186737, 1, 22, false));
                                buf = J$.W(5186761, 'buf', J$.R(5186753, 'b', b, false, false), buf, false, false);
                            }
                            return J$.Rt(5186777, J$.R(5186769, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190313, J$e);
                        } finally {
                            if (J$.Fr(5190321))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function bigintToMpBuf(bigint) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(5186913, arguments.callee, this, arguments);
                            arguments = J$.N(5186921, 'arguments', arguments, true, false, false);
                            bigint = J$.N(5186929, 'bigint', bigint, true, false, false);
                            J$.N(5186937, 'buf', buf, false, false, false);
                            var buf = J$.W(5186857, 'buf', J$.M(5186849, J$.R(5186825, 'Buffer', Buffer, false, true), 'from', false)(J$.M(5186841, J$.R(5186833, 'bigint', bigint, false, false), 'toByteArray', false)()), buf, false, false);
                            buf = J$.W(5186889, 'buf', J$.F(5186881, J$.R(5186865, 'mpNormalize', mpNormalize, false, true), false)(J$.R(5186873, 'buf', buf, false, false)), buf, false, false);
                            return J$.Rt(5186905, J$.R(5186897, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190329, J$e);
                        } finally {
                            if (J$.Fr(5190337))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function calculateDSAPublic(g, p, x) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(5187201, arguments.callee, this, arguments);
                            arguments = J$.N(5187209, 'arguments', arguments, true, false, false);
                            g = J$.N(5187217, 'g', g, true, false, false);
                            p = J$.N(5187225, 'p', p, true, false, false);
                            x = J$.N(5187233, 'x', x, true, false, false);
                            J$.N(5187241, 'y', y, false, false, false);
                            J$.N(5187249, 'ybuf', ybuf, false, false, false);
                            J$.M(5186961, J$.R(5186945, 'assert', assert, false, true), 'buffer', false)(J$.R(5186953, 'g', g, false, false));
                            J$.M(5186985, J$.R(5186969, 'assert', assert, false, true), 'buffer', false)(J$.R(5186977, 'p', p, false, false));
                            J$.M(5187009, J$.R(5186993, 'assert', assert, false, true), 'buffer', false)(J$.R(5187001, 'x', x, false, false));
                            g = J$.W(5187041, 'g', J$.F(5187033, J$.R(5187017, 'jsbn', jsbn, false, true), true)(J$.R(5187025, 'g', g, false, false)), g, false, false);
                            p = J$.W(5187073, 'p', J$.F(5187065, J$.R(5187049, 'jsbn', jsbn, false, true), true)(J$.R(5187057, 'p', p, false, false)), p, false, false);
                            x = J$.W(5187105, 'x', J$.F(5187097, J$.R(5187081, 'jsbn', jsbn, false, true), true)(J$.R(5187089, 'x', x, false, false)), x, false, false);
                            var y = J$.W(5187145, 'y', J$.M(5187137, J$.R(5187113, 'g', g, false, false), 'modPow', false)(J$.R(5187121, 'x', x, false, false), J$.R(5187129, 'p', p, false, false)), y, false, false);
                            var ybuf = J$.W(5187177, 'ybuf', J$.F(5187169, J$.R(5187153, 'bigintToMpBuf', bigintToMpBuf, false, true), false)(J$.R(5187161, 'y', y, false, false)), ybuf, false, false);
                            return J$.Rt(5187193, J$.R(5187185, 'ybuf', ybuf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190345, J$e);
                        } finally {
                            if (J$.Fr(5190353))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function calculateED25519Public(k) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(5187385, arguments.callee, this, arguments);
                            arguments = J$.N(5187393, 'arguments', arguments, true, false, false);
                            k = J$.N(5187401, 'k', k, true, false, false);
                            J$.N(5187409, 'kp', kp, false, false, false);
                            J$.M(5187273, J$.R(5187257, 'assert', assert, false, true), 'buffer', false)(J$.R(5187265, 'k', k, false, false));
                            var kp = J$.W(5187337, 'kp', J$.M(5187329, J$.G(5187297, J$.G(5187289, J$.R(5187281, 'nacl', nacl, false, true), 'sign'), 'keyPair'), 'fromSeed', false)(J$.F(5187321, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5187305, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5187305, 'Uint8Array', Uint8Array, true, true)), true)(J$.R(5187313, 'k', k, false, false))), kp, false, false);
                            return J$.Rt(5187377, J$.M(5187369, J$.R(5187345, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5187361, J$.R(5187353, 'kp', kp, false, false), 'publicKey')));
                        } catch (J$e) {
                            J$.Ex(5190361, J$e);
                        } finally {
                            if (J$.Fr(5190369))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function calculateX25519Public(k) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(5187545, arguments.callee, this, arguments);
                            arguments = J$.N(5187553, 'arguments', arguments, true, false, false);
                            k = J$.N(5187561, 'k', k, true, false, false);
                            J$.N(5187569, 'kp', kp, false, false, false);
                            J$.M(5187433, J$.R(5187417, 'assert', assert, false, true), 'buffer', false)(J$.R(5187425, 'k', k, false, false));
                            var kp = J$.W(5187497, 'kp', J$.M(5187489, J$.G(5187457, J$.G(5187449, J$.R(5187441, 'nacl', nacl, false, true), 'box'), 'keyPair'), 'fromSeed', false)(J$.F(5187481, J$.I(typeof Uint8Array === 'undefined' ? Uint8Array = J$.R(5187465, 'Uint8Array', undefined, true, true) : Uint8Array = J$.R(5187465, 'Uint8Array', Uint8Array, true, true)), true)(J$.R(5187473, 'k', k, false, false))), kp, false, false);
                            return J$.Rt(5187537, J$.M(5187529, J$.R(5187505, 'Buffer', Buffer, false, true), 'from', false)(J$.G(5187521, J$.R(5187513, 'kp', kp, false, false), 'publicKey')));
                        } catch (J$e) {
                            J$.Ex(5190377, J$e);
                        } finally {
                            if (J$.Fr(5190385))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addRSAMissing(key) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(5188225, arguments.callee, this, arguments);
                            arguments = J$.N(5188233, 'arguments', arguments, true, false, false);
                            key = J$.N(5188241, 'key', key, true, false, false);
                            J$.N(5188249, 'd', d, false, false, false);
                            J$.N(5188257, 'buf', buf, false, false, false);
                            J$.N(5188265, 'p', p, false, false, false);
                            J$.N(5188273, 'dmodp', dmodp, false, false, false);
                            J$.N(5188281, 'q', q, false, false, false);
                            J$.N(5188289, 'dmodq', dmodq, false, false, false);
                            J$.M(5187593, J$.R(5187577, 'assert', assert, false, true), 'object', false)(J$.R(5187585, 'key', key, false, false));
                            J$.F(5187649, J$.R(5187601, 'assertCompatible', assertCompatible, false, true), false)(J$.R(5187609, 'key', key, false, false), J$.R(5187617, 'PrivateKey', PrivateKey, false, true), J$.T(5187641, [
                                J$.T(5187625, 1, 22, false),
                                J$.T(5187633, 1, 22, false)
                            ], 10, false));
                            var d = J$.W(5187705, 'd', J$.F(5187697, J$.R(5187657, 'jsbn', jsbn, false, true), true)(J$.G(5187689, J$.G(5187681, J$.G(5187673, J$.R(5187665, 'key', key, false, false), 'part'), 'd'), 'data')), d, false, false);
                            var buf;
                            if (J$.C(277712, J$.U(594194, '!', J$.G(5187729, J$.G(5187721, J$.R(5187713, 'key', key, false, false), 'part'), 'dmodp')))) {
                                var p = J$.W(5187785, 'p', J$.F(5187777, J$.R(5187737, 'jsbn', jsbn, false, true), true)(J$.G(5187769, J$.G(5187761, J$.G(5187753, J$.R(5187745, 'key', key, false, false), 'part'), 'p'), 'data')), p, false, false);
                                var dmodp = J$.W(5187833, 'dmodp', J$.M(5187825, J$.R(5187793, 'd', d, false, false), 'mod', false)(J$.M(5187817, J$.R(5187801, 'p', p, false, false), 'subtract', false)(J$.T(5187809, 1, 22, false))), dmodp, false, false);
                                buf = J$.W(5187865, 'buf', J$.F(5187857, J$.R(5187841, 'bigintToMpBuf', bigintToMpBuf, false, true), false)(J$.R(5187849, 'dmodp', dmodp, false, false)), buf, false, false);
                                J$.P(5187913, J$.G(5187881, J$.R(5187873, 'key', key, false, false), 'part'), 'dmodp', J$.T(5187905, {
                                    name: J$.T(5187889, 'dmodp', 21, false),
                                    data: J$.R(5187897, 'buf', buf, false, false)
                                }, 11, false));
                                J$.M(5187961, J$.G(5187929, J$.R(5187921, 'key', key, false, false), 'parts'), 'push', false)(J$.G(5187953, J$.G(5187945, J$.R(5187937, 'key', key, false, false), 'part'), 'dmodp'));
                            }
                            if (J$.C(277720, J$.U(594202, '!', J$.G(5187985, J$.G(5187977, J$.R(5187969, 'key', key, false, false), 'part'), 'dmodq')))) {
                                var q = J$.W(5188041, 'q', J$.F(5188033, J$.R(5187993, 'jsbn', jsbn, false, true), true)(J$.G(5188025, J$.G(5188017, J$.G(5188009, J$.R(5188001, 'key', key, false, false), 'part'), 'q'), 'data')), q, false, false);
                                var dmodq = J$.W(5188089, 'dmodq', J$.M(5188081, J$.R(5188049, 'd', d, false, false), 'mod', false)(J$.M(5188073, J$.R(5188057, 'q', q, false, false), 'subtract', false)(J$.T(5188065, 1, 22, false))), dmodq, false, false);
                                buf = J$.W(5188121, 'buf', J$.F(5188113, J$.R(5188097, 'bigintToMpBuf', bigintToMpBuf, false, true), false)(J$.R(5188105, 'dmodq', dmodq, false, false)), buf, false, false);
                                J$.P(5188169, J$.G(5188137, J$.R(5188129, 'key', key, false, false), 'part'), 'dmodq', J$.T(5188161, {
                                    name: J$.T(5188145, 'dmodq', 21, false),
                                    data: J$.R(5188153, 'buf', buf, false, false)
                                }, 11, false));
                                J$.M(5188217, J$.G(5188185, J$.R(5188177, 'key', key, false, false), 'parts'), 'push', false)(J$.G(5188209, J$.G(5188201, J$.R(5188193, 'key', key, false, false), 'part'), 'dmodq'));
                            }
                        } catch (J$e) {
                            J$.Ex(5190393, J$e);
                        } finally {
                            if (J$.Fr(5190401))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function publicFromPrivateECDSA(curveName, priv) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(5188937, arguments.callee, this, arguments);
                            arguments = J$.N(5188945, 'arguments', arguments, true, false, false);
                            curveName = J$.N(5188953, 'curveName', curveName, true, false, false);
                            priv = J$.N(5188961, 'priv', priv, true, false, false);
                            J$.N(5188969, 'params', params, false, false, false);
                            J$.N(5188977, 'p', p, false, false, false);
                            J$.N(5188985, 'a', a, false, false, false);
                            J$.N(5188993, 'b', b, false, false, false);
                            J$.N(5189001, 'curve', curve, false, false, false);
                            J$.N(5189009, 'G', G, false, false, false);
                            J$.N(5189017, 'd', d, false, false, false);
                            J$.N(5189025, 'pub', pub, false, false, false);
                            J$.N(5189033, 'parts', parts, false, false, false);
                            J$.N(5189041, 'key', key, false, false, false);
                            J$.M(5188321, J$.R(5188297, 'assert', assert, false, true), 'string', false)(J$.R(5188305, 'curveName', curveName, false, false), J$.T(5188313, 'curveName', 21, false));
                            J$.M(5188345, J$.R(5188329, 'assert', assert, false, true), 'buffer', false)(J$.R(5188337, 'priv', priv, false, false));
                            var params = J$.W(5188385, 'params', J$.G(5188377, J$.G(5188361, J$.R(5188353, 'algs', algs, false, true), 'curves'), J$.R(5188369, 'curveName', curveName, false, false)), params, false, false);
                            var p = J$.W(5188425, 'p', J$.F(5188417, J$.R(5188393, 'jsbn', jsbn, false, true), true)(J$.G(5188409, J$.R(5188401, 'params', params, false, false), 'p')), p, false, false);
                            var a = J$.W(5188465, 'a', J$.F(5188457, J$.R(5188433, 'jsbn', jsbn, false, true), true)(J$.G(5188449, J$.R(5188441, 'params', params, false, false), 'a')), a, false, false);
                            var b = J$.W(5188505, 'b', J$.F(5188497, J$.R(5188473, 'jsbn', jsbn, false, true), true)(J$.G(5188489, J$.R(5188481, 'params', params, false, false), 'b')), b, false, false);
                            var curve = J$.W(5188553, 'curve', J$.M(5188545, J$.R(5188513, 'ec', ec, false, true), 'ECCurveFp', true)(J$.R(5188521, 'p', p, false, false), J$.R(5188529, 'a', a, false, false), J$.R(5188537, 'b', b, false, false)), curve, false, false);
                            var G = J$.W(5188609, 'G', J$.M(5188601, J$.R(5188561, 'curve', curve, false, false), 'decodePointHex', false)(J$.M(5188593, J$.G(5188577, J$.R(5188569, 'params', params, false, false), 'G'), 'toString', false)(J$.T(5188585, 'hex', 21, false))), G, false, false);
                            var d = J$.W(5188657, 'd', J$.F(5188649, J$.R(5188617, 'jsbn', jsbn, false, true), true)(J$.F(5188641, J$.R(5188625, 'mpNormalize', mpNormalize, false, true), false)(J$.R(5188633, 'priv', priv, false, false))), d, false, false);
                            var pub = J$.W(5188689, 'pub', J$.M(5188681, J$.R(5188665, 'G', G, false, false), 'multiply', false)(J$.R(5188673, 'd', d, false, false)), pub, false, false);
                            pub = J$.W(5188745, 'pub', J$.M(5188737, J$.R(5188697, 'Buffer', Buffer, false, true), 'from', false)(J$.M(5188721, J$.R(5188705, 'curve', curve, false, false), 'encodePointHex', false)(J$.R(5188713, 'pub', pub, false, false)), J$.T(5188729, 'hex', 21, false)), pub, false, false);
                            var parts = J$.W(5188761, 'parts', J$.T(5188753, [], 10, false), parts, false, false);
                            J$.M(5188817, J$.R(5188769, 'parts', parts, false, false), 'push', false)(J$.T(5188809, {
                                name: J$.T(5188777, 'curve', 21, false),
                                data: J$.M(5188801, J$.R(5188785, 'Buffer', Buffer, false, true), 'from', false)(J$.R(5188793, 'curveName', curveName, false, false))
                            }, 11, false));
                            J$.M(5188857, J$.R(5188825, 'parts', parts, false, false), 'push', false)(J$.T(5188849, {
                                name: J$.T(5188833, 'Q', 21, false),
                                data: J$.R(5188841, 'pub', pub, false, false)
                            }, 11, false));
                            var key = J$.W(5188913, 'key', J$.F(5188905, J$.R(5188865, 'Key', Key, false, true), true)(J$.T(5188897, {
                                type: J$.T(5188873, 'ecdsa', 21, false),
                                curve: J$.R(5188881, 'curve', curve, false, false),
                                parts: J$.R(5188889, 'parts', parts, false, false)
                            }, 11, false)), key, false, false);
                            return J$.Rt(5188929, J$.R(5188921, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(5190409, J$e);
                        } finally {
                            if (J$.Fr(5190417))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function opensshCipherInfo(cipher) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(5189673, arguments.callee, this, arguments);
                            arguments = J$.N(5189681, 'arguments', arguments, true, false, false);
                            cipher = J$.N(5189689, 'cipher', cipher, true, false, false);
                            J$.N(5189697, 'inf', inf, false, false, false);
                            var inf = J$.W(5189057, 'inf', J$.T(5189049, {}, 11, false), inf, false, false);
                            switch (J$.C1(277728, J$.R(5189065, 'cipher', cipher, false, false))) {
                            case J$.C2(277736, J$.T(5189145, '3des-cbc', 21, false)):
                                J$.P(5189089, J$.R(5189073, 'inf', inf, false, false), 'keySize', J$.T(5189081, 24, 22, false));
                                J$.P(5189113, J$.R(5189097, 'inf', inf, false, false), 'blockSize', J$.T(5189105, 8, 22, false));
                                J$.P(5189137, J$.R(5189121, 'inf', inf, false, false), 'opensslName', J$.T(5189129, 'des-ede3-cbc', 21, false));
                                break;
                            case J$.C2(277744, J$.T(5189225, 'blowfish-cbc', 21, false)):
                                J$.P(5189169, J$.R(5189153, 'inf', inf, false, false), 'keySize', J$.T(5189161, 16, 22, false));
                                J$.P(5189193, J$.R(5189177, 'inf', inf, false, false), 'blockSize', J$.T(5189185, 8, 22, false));
                                J$.P(5189217, J$.R(5189201, 'inf', inf, false, false), 'opensslName', J$.T(5189209, 'bf-cbc', 21, false));
                                break;
                            case J$.C2(277752, J$.T(5189233, 'aes128-cbc', 21, false)):
                            case J$.C2(277760, J$.T(5189241, 'aes128-ctr', 21, false)):
                            case J$.C2(277768, J$.T(5189353, 'aes128-gcm@openssh.com', 21, false)):
                                J$.P(5189265, J$.R(5189249, 'inf', inf, false, false), 'keySize', J$.T(5189257, 16, 22, false));
                                J$.P(5189289, J$.R(5189273, 'inf', inf, false, false), 'blockSize', J$.T(5189281, 16, 22, false));
                                J$.P(5189345, J$.R(5189297, 'inf', inf, false, false), 'opensslName', J$.B(594210, '+', J$.T(5189305, 'aes-128-', 21, false), J$.M(5189337, J$.R(5189313, 'cipher', cipher, false, false), 'slice', false)(J$.T(5189321, 7, 22, false), J$.T(5189329, 10, 22, false))));
                                break;
                            case J$.C2(277776, J$.T(5189361, 'aes192-cbc', 21, false)):
                            case J$.C2(277784, J$.T(5189369, 'aes192-ctr', 21, false)):
                            case J$.C2(277792, J$.T(5189481, 'aes192-gcm@openssh.com', 21, false)):
                                J$.P(5189393, J$.R(5189377, 'inf', inf, false, false), 'keySize', J$.T(5189385, 24, 22, false));
                                J$.P(5189417, J$.R(5189401, 'inf', inf, false, false), 'blockSize', J$.T(5189409, 16, 22, false));
                                J$.P(5189473, J$.R(5189425, 'inf', inf, false, false), 'opensslName', J$.B(594218, '+', J$.T(5189433, 'aes-192-', 21, false), J$.M(5189465, J$.R(5189441, 'cipher', cipher, false, false), 'slice', false)(J$.T(5189449, 7, 22, false), J$.T(5189457, 10, 22, false))));
                                break;
                            case J$.C2(277800, J$.T(5189489, 'aes256-cbc', 21, false)):
                            case J$.C2(277808, J$.T(5189497, 'aes256-ctr', 21, false)):
                            case J$.C2(277816, J$.T(5189609, 'aes256-gcm@openssh.com', 21, false)):
                                J$.P(5189521, J$.R(5189505, 'inf', inf, false, false), 'keySize', J$.T(5189513, 32, 22, false));
                                J$.P(5189545, J$.R(5189529, 'inf', inf, false, false), 'blockSize', J$.T(5189537, 16, 22, false));
                                J$.P(5189601, J$.R(5189553, 'inf', inf, false, false), 'opensslName', J$.B(594226, '+', J$.T(5189561, 'aes-256-', 21, false), J$.M(5189593, J$.R(5189569, 'cipher', cipher, false, false), 'slice', false)(J$.T(5189577, 7, 22, false), J$.T(5189585, 10, 22, false))));
                                break;
                            default:
                                throw J$.F(5189649, J$.I(typeof Error === 'undefined' ? Error = J$.R(5189617, 'Error', undefined, true, true) : Error = J$.R(5189617, 'Error', Error, true, true)), true)(J$.B(594242, '+', J$.B(594234, '+', J$.T(5189625, 'Unsupported openssl cipher "', 21, false), J$.R(5189633, 'cipher', cipher, false, false)), J$.T(5189641, '"', 21, false)));
                            }
                            return J$.Rt(5189665, J$.R(5189657, 'inf', inf, false, false));
                        } catch (J$e) {
                            J$.Ex(5190425, J$e);
                        } finally {
                            if (J$.Fr(5190433))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5189713, 'assert', assert, false, false, false);
            J$.N(5189721, 'Buffer', Buffer, false, false, false);
            J$.N(5189729, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(5189737, 'Key', Key, false, false, false);
            J$.N(5189745, 'crypto', crypto, false, false, false);
            J$.N(5189753, 'algs', algs, false, false, false);
            J$.N(5189761, 'asn1', asn1, false, false, false);
            J$.N(5189769, 'ec', ec, false, false, false);
            J$.N(5189777, 'jsbn', jsbn, false, false, false);
            J$.N(5189785, 'nacl', nacl, false, false, false);
            J$.N(5189793, 'MAX_CLASS_DEPTH', MAX_CLASS_DEPTH, false, false, false);
            isCompatible = J$.N(5189809, 'isCompatible', J$.T(5189801, isCompatible, 12, false), true, false, false);
            assertCompatible = J$.N(5189825, 'assertCompatible', J$.T(5189817, assertCompatible, 12, false), true, false, false);
            J$.N(5189833, 'CIPHER_LEN', CIPHER_LEN, false, false, false);
            J$.N(5189841, 'PKCS5_SALT_LEN', PKCS5_SALT_LEN, false, false, false);
            opensslKeyDeriv = J$.N(5189857, 'opensslKeyDeriv', J$.T(5189849, opensslKeyDeriv, 12, false), true, false, false);
            pbkdf2 = J$.N(5189873, 'pbkdf2', J$.T(5189865, pbkdf2, 12, false), true, false, false);
            countZeros = J$.N(5189889, 'countZeros', J$.T(5189881, countZeros, 12, false), true, false, false);
            bufferSplit = J$.N(5189905, 'bufferSplit', J$.T(5189897, bufferSplit, 12, false), true, false, false);
            ecNormalize = J$.N(5189921, 'ecNormalize', J$.T(5189913, ecNormalize, 12, false), true, false, false);
            readBitString = J$.N(5189937, 'readBitString', J$.T(5189929, readBitString, 12, false), true, false, false);
            writeBitString = J$.N(5189953, 'writeBitString', J$.T(5189945, writeBitString, 12, false), true, false, false);
            mpNormalize = J$.N(5189969, 'mpNormalize', J$.T(5189961, mpNormalize, 12, false), true, false, false);
            mpDenormalize = J$.N(5189985, 'mpDenormalize', J$.T(5189977, mpDenormalize, 12, false), true, false, false);
            zeroPadToLength = J$.N(5190001, 'zeroPadToLength', J$.T(5189993, zeroPadToLength, 12, false), true, false, false);
            bigintToMpBuf = J$.N(5190017, 'bigintToMpBuf', J$.T(5190009, bigintToMpBuf, 12, false), true, false, false);
            calculateDSAPublic = J$.N(5190033, 'calculateDSAPublic', J$.T(5190025, calculateDSAPublic, 12, false), true, false, false);
            calculateED25519Public = J$.N(5190049, 'calculateED25519Public', J$.T(5190041, calculateED25519Public, 12, false), true, false, false);
            calculateX25519Public = J$.N(5190065, 'calculateX25519Public', J$.T(5190057, calculateX25519Public, 12, false), true, false, false);
            addRSAMissing = J$.N(5190081, 'addRSAMissing', J$.T(5190073, addRSAMissing, 12, false), true, false, false);
            publicFromPrivateECDSA = J$.N(5190097, 'publicFromPrivateECDSA', J$.T(5190089, publicFromPrivateECDSA, 12, false), true, false, false);
            opensshCipherInfo = J$.N(5190113, 'opensshCipherInfo', J$.T(5190105, opensshCipherInfo, 12, false), true, false, false);
            J$.P(5180233, J$.I(typeof module === 'undefined' ? module = J$.R(5180073, 'module', undefined, true, true) : module = J$.R(5180073, 'module', module, true, true)), 'exports', J$.T(5180225, {
                bufferSplit: J$.R(5180081, 'bufferSplit', bufferSplit, false, true),
                addRSAMissing: J$.R(5180089, 'addRSAMissing', addRSAMissing, false, true),
                calculateDSAPublic: J$.R(5180097, 'calculateDSAPublic', calculateDSAPublic, false, true),
                calculateED25519Public: J$.R(5180105, 'calculateED25519Public', calculateED25519Public, false, true),
                calculateX25519Public: J$.R(5180113, 'calculateX25519Public', calculateX25519Public, false, true),
                mpNormalize: J$.R(5180121, 'mpNormalize', mpNormalize, false, true),
                mpDenormalize: J$.R(5180129, 'mpDenormalize', mpDenormalize, false, true),
                ecNormalize: J$.R(5180137, 'ecNormalize', ecNormalize, false, true),
                countZeros: J$.R(5180145, 'countZeros', countZeros, false, true),
                assertCompatible: J$.R(5180153, 'assertCompatible', assertCompatible, false, true),
                isCompatible: J$.R(5180161, 'isCompatible', isCompatible, false, true),
                opensslKeyDeriv: J$.R(5180169, 'opensslKeyDeriv', opensslKeyDeriv, false, true),
                opensshCipherInfo: J$.R(5180177, 'opensshCipherInfo', opensshCipherInfo, false, true),
                publicFromPrivateECDSA: J$.R(5180185, 'publicFromPrivateECDSA', publicFromPrivateECDSA, false, true),
                zeroPadToLength: J$.R(5180193, 'zeroPadToLength', zeroPadToLength, false, true),
                writeBitString: J$.R(5180201, 'writeBitString', writeBitString, false, true),
                readBitString: J$.R(5180209, 'readBitString', readBitString, false, true),
                pbkdf2: J$.R(5180217, 'pbkdf2', pbkdf2, false, true)
            }, 11, false));
            var assert = J$.W(5180265, 'assert', J$.F(5180257, J$.I(typeof require === 'undefined' ? require = J$.R(5180241, 'require', undefined, true, true) : require = J$.R(5180241, 'require', require, true, true)), false)(J$.T(5180249, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(5180305, 'Buffer', J$.G(5180297, J$.F(5180289, J$.I(typeof require === 'undefined' ? require = J$.R(5180273, 'require', undefined, true, true) : require = J$.R(5180273, 'require', require, true, true)), false)(J$.T(5180281, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var PrivateKey = J$.W(5180337, 'PrivateKey', J$.F(5180329, J$.I(typeof require === 'undefined' ? require = J$.R(5180313, 'require', undefined, true, true) : require = J$.R(5180313, 'require', require, true, true)), false)(J$.T(5180321, './private-key', 21, false)), PrivateKey, false, true);
            var Key = J$.W(5180369, 'Key', J$.F(5180361, J$.I(typeof require === 'undefined' ? require = J$.R(5180345, 'require', undefined, true, true) : require = J$.R(5180345, 'require', require, true, true)), false)(J$.T(5180353, './key', 21, false)), Key, false, true);
            var crypto = J$.W(5180401, 'crypto', J$.F(5180393, J$.I(typeof require === 'undefined' ? require = J$.R(5180377, 'require', undefined, true, true) : require = J$.R(5180377, 'require', require, true, true)), false)(J$.T(5180385, 'crypto', 21, false)), crypto, false, true);
            var algs = J$.W(5180433, 'algs', J$.F(5180425, J$.I(typeof require === 'undefined' ? require = J$.R(5180409, 'require', undefined, true, true) : require = J$.R(5180409, 'require', require, true, true)), false)(J$.T(5180417, './algs', 21, false)), algs, false, true);
            var asn1 = J$.W(5180465, 'asn1', J$.F(5180457, J$.I(typeof require === 'undefined' ? require = J$.R(5180441, 'require', undefined, true, true) : require = J$.R(5180441, 'require', require, true, true)), false)(J$.T(5180449, 'asn1', 21, false)), asn1, false, true);
            var ec = J$.W(5180497, 'ec', J$.F(5180489, J$.I(typeof require === 'undefined' ? require = J$.R(5180473, 'require', undefined, true, true) : require = J$.R(5180473, 'require', require, true, true)), false)(J$.T(5180481, 'ecc-jsbn/lib/ec', 21, false)), ec, false, true);
            var jsbn = J$.W(5180537, 'jsbn', J$.G(5180529, J$.F(5180521, J$.I(typeof require === 'undefined' ? require = J$.R(5180505, 'require', undefined, true, true) : require = J$.R(5180505, 'require', require, true, true)), false)(J$.T(5180513, 'jsbn', 21, false)), 'BigInteger'), jsbn, false, true);
            var nacl = J$.W(5180569, 'nacl', J$.F(5180561, J$.I(typeof require === 'undefined' ? require = J$.R(5180545, 'require', undefined, true, true) : require = J$.R(5180545, 'require', require, true, true)), false)(J$.T(5180553, 'tweetnacl', 21, false)), nacl, false, true);
            var MAX_CLASS_DEPTH = J$.W(5180585, 'MAX_CLASS_DEPTH', J$.T(5180577, 3, 22, false), MAX_CLASS_DEPTH, false, true);
            var CIPHER_LEN = J$.W(5182265, 'CIPHER_LEN', J$.T(5182257, {
                'des-ede3-cbc': J$.T(5182201, {
                    key: J$.T(5182185, 24, 22, false),
                    iv: J$.T(5182193, 8, 22, false)
                }, 11, false),
                'aes-128-cbc': J$.T(5182225, {
                    key: J$.T(5182209, 16, 22, false),
                    iv: J$.T(5182217, 16, 22, false)
                }, 11, false),
                'aes-256-cbc': J$.T(5182249, {
                    key: J$.T(5182233, 32, 22, false),
                    iv: J$.T(5182241, 16, 22, false)
                }, 11, false)
            }, 11, false), CIPHER_LEN, false, true);
            var PKCS5_SALT_LEN = J$.W(5182281, 'PKCS5_SALT_LEN', J$.T(5182273, 8, 22, false), PKCS5_SALT_LEN, false, true);
        } catch (J$e) {
            J$.Ex(5190441, J$e);
        } finally {
            if (J$.Sr(5190449))
                continue jalangiLabel20;
            else
                break jalangiLabel20;
        }
    }
// JALANGI DO NOT INSTRUMENT

