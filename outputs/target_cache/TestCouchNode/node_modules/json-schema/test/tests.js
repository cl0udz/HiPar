J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(7539217, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/json-schema/test/tests.js');
            function loadSchema(path) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7537617, arguments.callee, this, arguments);
                            arguments = J$.N(7537625, 'arguments', arguments, true, false, false);
                            path = J$.N(7537633, 'path', path, true, false, false);
                            J$.N(7537641, 'data', data, false, false, false);
                            J$.N(7537649, 'schema', schema, false, false, false);
                            var data = J$.W(7537561, 'data', J$.M(7537553, J$.R(7537529, 'fs', fs, false, true), 'readFileSync', false)(J$.R(7537537, 'path', path, false, false), J$.T(7537545, 'utf-8', 21, false)), data, false, false);
                            var schema = J$.W(7537593, 'schema', J$.M(7537585, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(7537569, 'JSON', undefined, true, true) : JSON = J$.R(7537569, 'JSON', JSON, true, true)), 'parse', false)(J$.R(7537577, 'data', data, false, false)), schema, false, false);
                            return J$.Rt(7537609, J$.R(7537601, 'schema', schema, false, false));
                        } catch (J$e) {
                            J$.Ex(7539401, J$e);
                        } finally {
                            if (J$.Fr(7539409))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resultIsValid() {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7537945, arguments.callee, this, arguments);
                            arguments = J$.N(7537953, 'arguments', arguments, true, false, false);
                            return J$.Rt(7537937, J$.T(7537929, function (result) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(7537897, arguments.callee, this, arguments);
                                            arguments = J$.N(7537905, 'arguments', arguments, true, false, false);
                                            result = J$.N(7537913, 'result', result, true, false, false);
                                            J$.N(7537921, 'i', i, false, false, false);
                                            J$.M(7537673, J$.R(7537657, 'assert', assert, false, true), 'isObject', false)(J$.R(7537665, 'result', result, false, false));
                                            J$.M(7537713, J$.R(7537681, 'assert', assert, false, true), 'equal', false)(J$.U(753882, 'typeof', J$.G(7537697, J$.R(7537689, 'result', result, false, false), 'valid')), J$.T(7537705, 'boolean', 21, false));
                                            J$.M(7537745, J$.R(7537721, 'assert', assert, false, true), 'isArray', false)(J$.G(7537737, J$.R(7537729, 'result', result, false, false), 'errors'));
                                            for (var i = J$.W(7537761, 'i', J$.T(7537753, 0, 22, false), i, false, false); J$.C(401472, J$.B(753890, '<', J$.R(7537769, 'i', i, false, false), J$.G(7537793, J$.G(7537785, J$.R(7537777, 'result', result, false, false), 'errors'), 'length'))); J$.B(753914, '-', i = J$.W(7537809, 'i', J$.B(753906, '+', J$.U(753898, '+', J$.R(7537801, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                J$.M(7537889, J$.R(7537817, 'assert', assert, false, true), 'notEqual', false)(J$.G(7537849, J$.G(7537833, J$.R(7537825, 'result', result, false, false), 'errors'), J$.R(7537841, 'i', i, false, false)), J$.T(7537857, null, 25, false), J$.B(753930, '+', J$.B(753922, '+', J$.T(7537865, 'errors[', 21, false), J$.R(7537873, 'i', i, false, false)), J$.T(7537881, '] is null', 21, false)));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(7539417, J$e);
                                        } finally {
                                            if (J$.Fr(7539425))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7539433, J$e);
                        } finally {
                            if (J$.Fr(7539441))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertValidates(doc, schema) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(7538345, arguments.callee, this, arguments);
                            arguments = J$.N(7538353, 'arguments', arguments, true, false, false);
                            doc = J$.N(7538361, 'doc', doc, true, false, false);
                            schema = J$.N(7538369, 'schema', schema, true, false, false);
                            J$.N(7538377, 'context', context, false, false, false);
                            var context = J$.W(7537969, 'context', J$.T(7537961, {}, 11, false), context, false, false);
                            J$.P(7538321, J$.R(7537977, 'context', context, false, false), J$.B(753962, '+', J$.B(753954, '+', J$.B(753946, '+', J$.B(753938, '+', J$.T(7537985, ': validate(', 21, false), J$.R(7537993, 'doc', doc, false, false)), J$.T(7538001, ', ', 21, false)), J$.R(7538009, 'schema', schema, false, false)), J$.T(7538017, ')', 21, false)), J$.T(7538313, {
                                topic: J$.F(7538081, J$.R(7538025, 'validate', validate, false, true), false)(J$.G(7538049, J$.R(7538033, 'schemas', schemas, false, true), J$.R(7538041, 'doc', doc, false, false)), J$.G(7538073, J$.R(7538057, 'schemas', schemas, false, true), J$.R(7538065, 'schema', schema, false, false))),
                                'returns valid result': J$.F(7538097, J$.R(7538089, 'resultIsValid', resultIsValid, false, true), false)(),
                                'with valid=true': J$.T(7538169, function (result) {
                                    jalangiLabel5:
                                        while (true) {
                                            try {
                                                J$.Fe(7538145, arguments.callee, this, arguments);
                                                arguments = J$.N(7538153, 'arguments', arguments, true, false, false);
                                                result = J$.N(7538161, 'result', result, true, false, false);
                                                J$.M(7538137, J$.R(7538105, 'assert', assert, false, true), 'equal', false)(J$.G(7538121, J$.R(7538113, 'result', result, false, false), 'valid'), J$.T(7538129, true, 23, false));
                                            } catch (J$e) {
                                                J$.Ex(7539449, J$e);
                                            } finally {
                                                if (J$.Fr(7539457))
                                                    continue jalangiLabel5;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                'and no errors': J$.T(7538305, function (result) {
                                    jalangiLabel6:
                                        while (true) {
                                            try {
                                                J$.Fe(7538281, arguments.callee, this, arguments);
                                                arguments = J$.N(7538289, 'arguments', arguments, true, false, false);
                                                result = J$.N(7538297, 'result', result, true, false, false);
                                                if (J$.C(401480, J$.B(753970, '==', J$.G(7538201, J$.G(7538185, J$.R(7538177, 'result', result, false, false), 'errors'), J$.T(7538193, 0, 22, false)), J$.T(7538209, null, 25, false))))
                                                    J$.M(7538233, J$.R(7538217, 'assert', assert, false, true), 'fail', false)(J$.T(7538225, '(errors contains null)', 21, false));
                                                J$.M(7538273, J$.R(7538241, 'assert', assert, false, true), 'length', false)(J$.G(7538257, J$.R(7538249, 'result', result, false, false), 'errors'), J$.T(7538265, 0, 22, false));
                                            } catch (J$e) {
                                                J$.Ex(7539465, J$e);
                                            } finally {
                                                if (J$.Fr(7539473))
                                                    continue jalangiLabel6;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)
                            }, 11, false));
                            return J$.Rt(7538337, J$.R(7538329, 'context', context, false, false));
                        } catch (J$e) {
                            J$.Ex(7539481, J$e);
                        } finally {
                            if (J$.Fr(7539489))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertSelfValidates(doc) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(7538665, arguments.callee, this, arguments);
                            arguments = J$.N(7538673, 'arguments', arguments, true, false, false);
                            doc = J$.N(7538681, 'doc', doc, true, false, false);
                            J$.N(7538689, 'context', context, false, false, false);
                            var context = J$.W(7538393, 'context', J$.T(7538385, {}, 11, false), context, false, false);
                            J$.P(7538641, J$.R(7538401, 'context', context, false, false), J$.B(753986, '+', J$.B(753978, '+', J$.T(7538409, ': validate(', 21, false), J$.R(7538417, 'doc', doc, false, false)), J$.T(7538425, ')', 21, false)), J$.T(7538633, {
                                topic: J$.F(7538465, J$.R(7538433, 'validate', validate, false, true), false)(J$.G(7538457, J$.R(7538441, 'schemas', schemas, false, true), J$.R(7538449, 'doc', doc, false, false))),
                                'returns valid result': J$.F(7538481, J$.R(7538473, 'resultIsValid', resultIsValid, false, true), false)(),
                                'with valid=true': J$.T(7538553, function (result) {
                                    jalangiLabel8:
                                        while (true) {
                                            try {
                                                J$.Fe(7538529, arguments.callee, this, arguments);
                                                arguments = J$.N(7538537, 'arguments', arguments, true, false, false);
                                                result = J$.N(7538545, 'result', result, true, false, false);
                                                J$.M(7538521, J$.R(7538489, 'assert', assert, false, true), 'equal', false)(J$.G(7538505, J$.R(7538497, 'result', result, false, false), 'valid'), J$.T(7538513, true, 23, false));
                                            } catch (J$e) {
                                                J$.Ex(7539497, J$e);
                                            } finally {
                                                if (J$.Fr(7539505))
                                                    continue jalangiLabel8;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                'and no errors': J$.T(7538625, function (result) {
                                    jalangiLabel9:
                                        while (true) {
                                            try {
                                                J$.Fe(7538601, arguments.callee, this, arguments);
                                                arguments = J$.N(7538609, 'arguments', arguments, true, false, false);
                                                result = J$.N(7538617, 'result', result, true, false, false);
                                                J$.M(7538593, J$.R(7538561, 'assert', assert, false, true), 'length', false)(J$.G(7538577, J$.R(7538569, 'result', result, false, false), 'errors'), J$.T(7538585, 0, 22, false));
                                            } catch (J$e) {
                                                J$.Ex(7539513, J$e);
                                            } finally {
                                                if (J$.Fr(7539521))
                                                    continue jalangiLabel9;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)
                            }, 11, false));
                            return J$.Rt(7538657, J$.R(7538649, 'context', context, false, false));
                        } catch (J$e) {
                            J$.Ex(7539529, J$e);
                        } finally {
                            if (J$.Fr(7539537))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7539225, 'assert', assert, false, false, false);
            J$.N(7539233, 'vows', vows, false, false, false);
            J$.N(7539241, 'path', path, false, false, false);
            J$.N(7539249, 'fs', fs, false, false, false);
            J$.N(7539257, 'validate', validate, false, false, false);
            J$.N(7539265, 'revision', revision, false, false, false);
            J$.N(7539273, 'schemaRoot', schemaRoot, false, false, false);
            J$.N(7539281, 'schemaNames', schemaNames, false, false, false);
            J$.N(7539289, 'schemas', schemas, false, false, false);
            loadSchema = J$.N(7539305, 'loadSchema', J$.T(7539297, loadSchema, 12, false), true, false, false);
            resultIsValid = J$.N(7539321, 'resultIsValid', J$.T(7539313, resultIsValid, 12, false), true, false, false);
            assertValidates = J$.N(7539337, 'assertValidates', J$.T(7539329, assertValidates, 12, false), true, false, false);
            assertSelfValidates = J$.N(7539353, 'assertSelfValidates', J$.T(7539345, assertSelfValidates, 12, false), true, false, false);
            J$.N(7539361, 'suite', suite, false, false, false);
            var assert = J$.W(7536881, 'assert', J$.F(7536873, J$.I(typeof require === 'undefined' ? require = J$.R(7536857, 'require', undefined, true, true) : require = J$.R(7536857, 'require', require, true, true)), false)(J$.T(7536865, 'assert', 21, false)), assert, false, true);
            var vows = J$.W(7536913, 'vows', J$.F(7536905, J$.I(typeof require === 'undefined' ? require = J$.R(7536889, 'require', undefined, true, true) : require = J$.R(7536889, 'require', require, true, true)), false)(J$.T(7536897, 'vows', 21, false)), vows, false, true);
            var path = J$.W(7536945, 'path', J$.F(7536937, J$.I(typeof require === 'undefined' ? require = J$.R(7536921, 'require', undefined, true, true) : require = J$.R(7536921, 'require', require, true, true)), false)(J$.T(7536929, 'path', 21, false)), path, false, true);
            var fs = J$.W(7536977, 'fs', J$.F(7536969, J$.I(typeof require === 'undefined' ? require = J$.R(7536953, 'require', undefined, true, true) : require = J$.R(7536953, 'require', require, true, true)), false)(J$.T(7536961, 'fs', 21, false)), fs, false, true);
            var validate = J$.W(7537017, 'validate', J$.G(7537009, J$.F(7537001, J$.I(typeof require === 'undefined' ? require = J$.R(7536985, 'require', undefined, true, true) : require = J$.R(7536985, 'require', require, true, true)), false)(J$.T(7536993, '../lib/validate', 21, false)), 'validate'), validate, false, true);
            var revision = J$.W(7537033, 'revision', J$.T(7537025, 'draft-03', 21, false), revision, false, true);
            var schemaRoot = J$.W(7537081, 'schemaRoot', J$.M(7537073, J$.R(7537041, 'path', path, false, true), 'join', false)(J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(7537049, '__dirname', undefined, true, true) : __dirname = J$.R(7537049, '__dirname', __dirname, true, true)), J$.T(7537057, '..', 21, false), J$.R(7537065, 'revision', revision, false, true)), schemaRoot, false, true);
            var schemaNames = J$.W(7537129, 'schemaNames', J$.T(7537121, [
                J$.T(7537089, 'schema', 21, false),
                J$.T(7537097, 'hyper-schema', 21, false),
                J$.T(7537105, 'links', 21, false),
                J$.T(7537113, 'json-ref', 21, false)
            ], 10, false), schemaNames, false, true);
            var schemas = J$.W(7537145, 'schemas', J$.T(7537137, {}, 11, false), schemas, false, true);
            J$.M(7537289, J$.R(7537153, 'schemaNames', schemaNames, false, true), 'forEach', false)(J$.T(7537281, function (name) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7537249, arguments.callee, this, arguments);
                            arguments = J$.N(7537257, 'arguments', arguments, true, false, false);
                            name = J$.N(7537265, 'name', name, true, false, false);
                            J$.N(7537273, 'file', file, false, false, false);
                            var file = J$.W(7537193, 'file', J$.M(7537185, J$.R(7537161, 'path', path, false, true), 'join', false)(J$.R(7537169, 'schemaRoot', schemaRoot, false, true), J$.R(7537177, 'name', name, false, false)), file, false, false);
                            J$.P(7537241, J$.R(7537201, 'schemas', schemas, false, true), J$.R(7537209, 'name', name, false, false), J$.F(7537233, J$.R(7537217, 'loadSchema', loadSchema, false, true), false)(J$.R(7537225, 'file', file, false, false)));
                        } catch (J$e) {
                            J$.Ex(7539369, J$e);
                        } finally {
                            if (J$.Fr(7539377))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.M(7537521, J$.R(7537297, 'schemaNames', schemaNames, false, true), 'forEach', false)(J$.T(7537513, function (name) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7537465, arguments.callee, this, arguments);
                            arguments = J$.N(7537473, 'arguments', arguments, true, false, false);
                            name = J$.N(7537481, 'name', name, true, false, false);
                            J$.N(7537489, 's', s, false, false, false);
                            J$.N(7537497, 'n', n, false, false, false);
                            J$.N(7537505, 'f', f, false, false, false);
                            var s, n = J$.W(7537353, 'n', J$.B(753866, '+', J$.R(7537305, 'name', name, false, false), J$.T(7537313, '-nsd', 21, false)), n, false, false), f = J$.W(7537361, 'f', J$.M(7537345, J$.R(7537321, 'path', path, false, true), 'join', false)(J$.R(7537329, 'schemaRoot', schemaRoot, false, true), J$.R(7537337, 'name', name, false, false)), f, false, false);
                            J$.P(7537409, J$.R(7537369, 'schemas', schemas, false, true), J$.R(7537377, 'n', n, false, false), J$.F(7537401, J$.R(7537385, 'loadSchema', loadSchema, false, true), false)(J$.R(7537393, 'f', f, false, false)));
                            s = J$.W(7537441, 's', J$.G(7537433, J$.R(7537417, 'schemas', schemas, false, true), J$.R(7537425, 'n', n, false, false)), s, false, false);
                            J$.B(753874, 'delete', J$.R(7537449, 's', s, false, false), J$.T(7537457, '$schema', 21, false));
                        } catch (J$e) {
                            J$.Ex(7539385, J$e);
                        } finally {
                            if (J$.Fr(7539393))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var suite = J$.W(7539209, 'suite', J$.M(7539201, J$.M(7539185, J$.M(7538713, J$.R(7538697, 'vows', vows, false, true), 'describe', false)(J$.T(7538705, 'JSON Schema', 21, false)), 'addBatch', false)(J$.T(7539177, {
                'Core-NSD self-validates': J$.F(7538737, J$.R(7538721, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7538729, 'schema-nsd', 21, false)),
                'Core-NSD/Core-NSD': J$.F(7538769, J$.R(7538745, 'assertValidates', assertValidates, false, true), false)(J$.T(7538753, 'schema-nsd', 21, false), J$.T(7538761, 'schema-nsd', 21, false)),
                'Core-NSD/Core': J$.F(7538801, J$.R(7538777, 'assertValidates', assertValidates, false, true), false)(J$.T(7538785, 'schema-nsd', 21, false), J$.T(7538793, 'schema', 21, false)),
                'Core self-validates': J$.F(7538825, J$.R(7538809, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7538817, 'schema', 21, false)),
                'Core/Core': J$.F(7538857, J$.R(7538833, 'assertValidates', assertValidates, false, true), false)(J$.T(7538841, 'schema', 21, false), J$.T(7538849, 'schema', 21, false)),
                'Hyper-NSD self-validates': J$.F(7538881, J$.R(7538865, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7538873, 'hyper-schema-nsd', 21, false)),
                'Hyper self-validates': J$.F(7538905, J$.R(7538889, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7538897, 'hyper-schema', 21, false)),
                'Hyper/Hyper': J$.F(7538937, J$.R(7538913, 'assertValidates', assertValidates, false, true), false)(J$.T(7538921, 'hyper-schema', 21, false), J$.T(7538929, 'hyper-schema', 21, false)),
                'Hyper/Core': J$.F(7538969, J$.R(7538945, 'assertValidates', assertValidates, false, true), false)(J$.T(7538953, 'hyper-schema', 21, false), J$.T(7538961, 'schema', 21, false)),
                'Links-NSD self-validates': J$.F(7538993, J$.R(7538977, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7538985, 'links-nsd', 21, false)),
                'Links self-validates': J$.F(7539017, J$.R(7539001, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7539009, 'links', 21, false)),
                'Links/Hyper': J$.F(7539049, J$.R(7539025, 'assertValidates', assertValidates, false, true), false)(J$.T(7539033, 'links', 21, false), J$.T(7539041, 'hyper-schema', 21, false)),
                'Links/Core': J$.F(7539081, J$.R(7539057, 'assertValidates', assertValidates, false, true), false)(J$.T(7539065, 'links', 21, false), J$.T(7539073, 'schema', 21, false)),
                'Json-Ref self-validates': J$.F(7539105, J$.R(7539089, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(7539097, 'json-ref', 21, false)),
                'Json-Ref/Hyper': J$.F(7539137, J$.R(7539113, 'assertValidates', assertValidates, false, true), false)(J$.T(7539121, 'json-ref', 21, false), J$.T(7539129, 'hyper-schema', 21, false)),
                'Json-Ref/Core': J$.F(7539169, J$.R(7539145, 'assertValidates', assertValidates, false, true), false)(J$.T(7539153, 'json-ref', 21, false), J$.T(7539161, 'schema', 21, false))
            }, 11, false)), 'export', false)(J$.I(typeof module === 'undefined' ? module = J$.R(7539193, 'module', undefined, true, true) : module = J$.R(7539193, 'module', module, true, true))), suite, false, true);
        } catch (J$e) {
            J$.Ex(7539545, J$e);
        } finally {
            if (J$.Sr(7539553))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

