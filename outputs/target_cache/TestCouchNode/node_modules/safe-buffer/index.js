J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(4971601, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/safe-buffer/index.js');
            function copyProps(src, dst) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4970633, arguments.callee, this, arguments);
                            arguments = J$.N(4970641, 'arguments', arguments, true, false, false);
                            src = J$.N(4970649, 'src', src, true, false, false);
                            dst = J$.N(4970657, 'dst', dst, true, false, false);
                            J$.N(4970665, 'key', key, false, false, false);
                            for (var key in J$.H(4970617, J$.R(4970561, 'src', src, false, false))) {
                                J$.N(4970625, 'key', key, false, true, false);
                                {
                                    {
                                        J$.P(4970609, J$.R(4970569, 'dst', dst, false, false), J$.R(4970577, 'key', key, false, false), J$.G(4970601, J$.R(4970585, 'src', src, false, false), J$.R(4970593, 'key', key, false, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(4971657, J$e);
                        } finally {
                            if (J$.Fr(4971665))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SafeBuffer(arg, encodingOrOffset, length) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4970865, arguments.callee, this, arguments);
                            arguments = J$.N(4970873, 'arguments', arguments, true, false, false);
                            arg = J$.N(4970881, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(4970889, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(4970897, 'length', length, true, false, false);
                            return J$.Rt(4970857, J$.F(4970849, J$.R(4970817, 'Buffer', Buffer, false, true), false)(J$.R(4970825, 'arg', arg, false, false), J$.R(4970833, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(4970841, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(4971673, J$e);
                        } finally {
                            if (J$.Fr(4971681))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4971609, 'buffer', buffer, false, false, false);
            J$.N(4971617, 'Buffer', Buffer, false, false, false);
            copyProps = J$.N(4971633, 'copyProps', J$.T(4971625, copyProps, 12, false), true, false, false);
            SafeBuffer = J$.N(4971649, 'SafeBuffer', J$.T(4971641, SafeBuffer, 12, false), true, false, false);
            var buffer = J$.W(4970529, 'buffer', J$.F(4970521, J$.I(typeof require === 'undefined' ? require = J$.R(4970505, 'require', undefined, true, true) : require = J$.R(4970505, 'require', require, true, true)), false)(J$.T(4970513, 'buffer', 21, false)), buffer, false, true);
            var Buffer = J$.W(4970553, 'Buffer', J$.G(4970545, J$.R(4970537, 'buffer', buffer, false, true), 'Buffer'), Buffer, false, true);
            if (J$.C(267704, J$.C(267696, J$.C(267688, J$.C(267680, J$.G(4970681, J$.R(4970673, 'Buffer', Buffer, false, true), 'from')) ? J$.G(4970697, J$.R(4970689, 'Buffer', Buffer, false, true), 'alloc') : J$._()) ? J$.G(4970713, J$.R(4970705, 'Buffer', Buffer, false, true), 'allocUnsafe') : J$._()) ? J$.G(4970729, J$.R(4970721, 'Buffer', Buffer, false, true), 'allocUnsafeSlow') : J$._())) {
                J$.P(4970753, J$.I(typeof module === 'undefined' ? module = J$.R(4970737, 'module', undefined, true, true) : module = J$.R(4970737, 'module', module, true, true)), 'exports', J$.R(4970745, 'buffer', buffer, false, true));
            } else {
                J$.F(4970785, J$.R(4970761, 'copyProps', copyProps, false, true), false)(J$.R(4970769, 'buffer', buffer, false, true), J$.I(typeof exports === 'undefined' ? exports = J$.R(4970777, 'exports', undefined, true, true) : exports = J$.R(4970777, 'exports', exports, true, true)));
                J$.P(4970809, J$.I(typeof exports === 'undefined' ? exports = J$.R(4970793, 'exports', undefined, true, true) : exports = J$.R(4970793, 'exports', exports, true, true)), 'Buffer', J$.R(4970801, 'SafeBuffer', SafeBuffer, false, true));
            }
            J$.F(4970929, J$.R(4970905, 'copyProps', copyProps, false, true), false)(J$.R(4970913, 'Buffer', Buffer, false, true), J$.R(4970921, 'SafeBuffer', SafeBuffer, false, true));
            J$.P(4971081, J$.R(4970937, 'SafeBuffer', SafeBuffer, false, true), 'from', J$.T(4971073, function (arg, encodingOrOffset, length) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4971033, arguments.callee, this, arguments);
                            arguments = J$.N(4971041, 'arguments', arguments, true, false, false);
                            arg = J$.N(4971049, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(4971057, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(4971065, 'length', length, true, false, false);
                            if (J$.C(267712, J$.B(576114, '===', J$.U(576106, 'typeof', J$.R(4970945, 'arg', arg, false, false)), J$.T(4970953, 'number', 21, false)))) {
                                throw J$.F(4970977, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4970961, 'TypeError', undefined, true, true) : TypeError = J$.R(4970961, 'TypeError', TypeError, true, true)), true)(J$.T(4970969, 'Argument must not be a number', 21, false));
                            }
                            return J$.Rt(4971025, J$.F(4971017, J$.R(4970985, 'Buffer', Buffer, false, true), false)(J$.R(4970993, 'arg', arg, false, false), J$.R(4971001, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(4971009, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(4971689, J$e);
                        } finally {
                            if (J$.Fr(4971697))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4971353, J$.R(4971089, 'SafeBuffer', SafeBuffer, false, true), 'alloc', J$.T(4971345, function (size, fill, encoding) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4971297, arguments.callee, this, arguments);
                            arguments = J$.N(4971305, 'arguments', arguments, true, false, false);
                            size = J$.N(4971313, 'size', size, true, false, false);
                            fill = J$.N(4971321, 'fill', fill, true, false, false);
                            encoding = J$.N(4971329, 'encoding', encoding, true, false, false);
                            J$.N(4971337, 'buf', buf, false, false, false);
                            if (J$.C(267720, J$.B(576130, '!==', J$.U(576122, 'typeof', J$.R(4971097, 'size', size, false, false)), J$.T(4971105, 'number', 21, false)))) {
                                throw J$.F(4971129, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4971113, 'TypeError', undefined, true, true) : TypeError = J$.R(4971113, 'TypeError', TypeError, true, true)), true)(J$.T(4971121, 'Argument must be a number', 21, false));
                            }
                            var buf = J$.W(4971161, 'buf', J$.F(4971153, J$.R(4971137, 'Buffer', Buffer, false, true), false)(J$.R(4971145, 'size', size, false, false)), buf, false, false);
                            if (J$.C(267736, J$.B(576138, '!==', J$.R(4971169, 'fill', fill, false, false), J$.T(4971177, undefined, 24, false)))) {
                                if (J$.C(267728, J$.B(576154, '===', J$.U(576146, 'typeof', J$.R(4971185, 'encoding', encoding, false, false)), J$.T(4971193, 'string', 21, false)))) {
                                    J$.M(4971225, J$.R(4971201, 'buf', buf, false, false), 'fill', false)(J$.R(4971209, 'fill', fill, false, false), J$.R(4971217, 'encoding', encoding, false, false));
                                } else {
                                    J$.M(4971249, J$.R(4971233, 'buf', buf, false, false), 'fill', false)(J$.R(4971241, 'fill', fill, false, false));
                                }
                            } else {
                                J$.M(4971273, J$.R(4971257, 'buf', buf, false, false), 'fill', false)(J$.T(4971265, 0, 22, false));
                            }
                            return J$.Rt(4971289, J$.R(4971281, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(4971705, J$e);
                        } finally {
                            if (J$.Fr(4971713))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4971473, J$.R(4971361, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafe', J$.T(4971465, function (size) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4971441, arguments.callee, this, arguments);
                            arguments = J$.N(4971449, 'arguments', arguments, true, false, false);
                            size = J$.N(4971457, 'size', size, true, false, false);
                            if (J$.C(267744, J$.B(576170, '!==', J$.U(576162, 'typeof', J$.R(4971369, 'size', size, false, false)), J$.T(4971377, 'number', 21, false)))) {
                                throw J$.F(4971401, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4971385, 'TypeError', undefined, true, true) : TypeError = J$.R(4971385, 'TypeError', TypeError, true, true)), true)(J$.T(4971393, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(4971433, J$.F(4971425, J$.R(4971409, 'Buffer', Buffer, false, true), false)(J$.R(4971417, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(4971721, J$e);
                        } finally {
                            if (J$.Fr(4971729))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4971593, J$.R(4971481, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafeSlow', J$.T(4971585, function (size) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4971561, arguments.callee, this, arguments);
                            arguments = J$.N(4971569, 'arguments', arguments, true, false, false);
                            size = J$.N(4971577, 'size', size, true, false, false);
                            if (J$.C(267752, J$.B(576186, '!==', J$.U(576178, 'typeof', J$.R(4971489, 'size', size, false, false)), J$.T(4971497, 'number', 21, false)))) {
                                throw J$.F(4971521, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4971505, 'TypeError', undefined, true, true) : TypeError = J$.R(4971505, 'TypeError', TypeError, true, true)), true)(J$.T(4971513, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(4971553, J$.M(4971545, J$.R(4971529, 'buffer', buffer, false, true), 'SlowBuffer', false)(J$.R(4971537, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(4971737, J$e);
                        } finally {
                            if (J$.Fr(4971745))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4971753, J$e);
        } finally {
            if (J$.Sr(4971761))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

