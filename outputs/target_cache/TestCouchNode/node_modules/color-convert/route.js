J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(7026569, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/color-convert/route.js');
            function buildGraph() {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7024961, arguments.callee, this, arguments);
                            arguments = J$.N(7024969, 'arguments', arguments, true, false, false);
                            J$.N(7024977, 'graph', graph, false, false, false);
                            J$.N(7024985, 'models', models, false, false, false);
                            J$.N(7024993, 'len', len, false, false, false);
                            J$.N(7025001, 'i', i, false, false, false);
                            var graph = J$.W(7024769, 'graph', J$.T(7024761, {}, 11, false), graph, false, false);
                            var models = J$.W(7024801, 'models', J$.M(7024793, J$.I(typeof Object === 'undefined' ? Object = J$.R(7024777, 'Object', undefined, true, true) : Object = J$.R(7024777, 'Object', Object, true, true)), 'keys', false)(J$.R(7024785, 'conversions', conversions, false, true)), models, false, false);
                            for (var len = J$.W(7024833, 'len', J$.G(7024817, J$.R(7024809, 'models', models, false, false), 'length'), len, false, false), i = J$.W(7024841, 'i', J$.T(7024825, 0, 22, false), i, false, false); J$.C(378400, J$.B(715306, '<', J$.R(7024849, 'i', i, false, false), J$.R(7024857, 'len', len, false, false))); J$.B(715330, '-', i = J$.W(7024873, 'i', J$.B(715322, '+', J$.U(715314, '+', J$.R(7024865, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(7024937, J$.R(7024881, 'graph', graph, false, false), J$.G(7024905, J$.R(7024889, 'models', models, false, false), J$.R(7024897, 'i', i, false, false)), J$.T(7024929, {
                                    distance: J$.U(715338, '-', J$.T(7024913, 1, 22, false)),
                                    parent: J$.T(7024921, null, 25, false)
                                }, 11, false));
                            }
                            return J$.Rt(7024953, J$.R(7024945, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(7026649, J$e);
                        } finally {
                            if (J$.Fr(7026657))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function deriveBFS(fromModel) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7025465, arguments.callee, this, arguments);
                            arguments = J$.N(7025473, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(7025481, 'fromModel', fromModel, true, false, false);
                            J$.N(7025489, 'graph', graph, false, false, false);
                            J$.N(7025497, 'queue', queue, false, false, false);
                            J$.N(7025505, 'current', current, false, false, false);
                            J$.N(7025513, 'adjacents', adjacents, false, false, false);
                            J$.N(7025521, 'len', len, false, false, false);
                            J$.N(7025529, 'i', i, false, false, false);
                            J$.N(7025537, 'adjacent', adjacent, false, false, false);
                            J$.N(7025545, 'node', node, false, false, false);
                            var graph = J$.W(7025025, 'graph', J$.F(7025017, J$.R(7025009, 'buildGraph', buildGraph, false, true), false)(), graph, false, false);
                            var queue = J$.W(7025049, 'queue', J$.T(7025041, [J$.R(7025033, 'fromModel', fromModel, false, false)], 10, false), queue, false, false);
                            J$.P(7025089, J$.G(7025073, J$.R(7025057, 'graph', graph, false, false), J$.R(7025065, 'fromModel', fromModel, false, false)), 'distance', J$.T(7025081, 0, 22, false));
                            while (J$.C(378424, J$.G(7025105, J$.R(7025097, 'queue', queue, false, false), 'length'))) {
                                var current = J$.W(7025129, 'current', J$.M(7025121, J$.R(7025113, 'queue', queue, false, false), 'pop', false)(), current, false, false);
                                var adjacents = J$.W(7025177, 'adjacents', J$.M(7025169, J$.I(typeof Object === 'undefined' ? Object = J$.R(7025137, 'Object', undefined, true, true) : Object = J$.R(7025137, 'Object', Object, true, true)), 'keys', false)(J$.G(7025161, J$.R(7025145, 'conversions', conversions, false, true), J$.R(7025153, 'current', current, false, false))), adjacents, false, false);
                                for (var len = J$.W(7025209, 'len', J$.G(7025193, J$.R(7025185, 'adjacents', adjacents, false, false), 'length'), len, false, false), i = J$.W(7025217, 'i', J$.T(7025201, 0, 22, false), i, false, false); J$.C(378416, J$.B(715346, '<', J$.R(7025225, 'i', i, false, false), J$.R(7025233, 'len', len, false, false))); J$.B(715370, '-', i = J$.W(7025249, 'i', J$.B(715362, '+', J$.U(715354, '+', J$.R(7025241, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    var adjacent = J$.W(7025281, 'adjacent', J$.G(7025273, J$.R(7025257, 'adjacents', adjacents, false, false), J$.R(7025265, 'i', i, false, false)), adjacent, false, false);
                                    var node = J$.W(7025313, 'node', J$.G(7025305, J$.R(7025289, 'graph', graph, false, false), J$.R(7025297, 'adjacent', adjacent, false, false)), node, false, false);
                                    if (J$.C(378408, J$.B(715386, '===', J$.G(7025329, J$.R(7025321, 'node', node, false, false), 'distance'), J$.U(715378, '-', J$.T(7025337, 1, 22, false))))) {
                                        J$.P(7025393, J$.R(7025345, 'node', node, false, false), 'distance', J$.B(715394, '+', J$.G(7025377, J$.G(7025369, J$.R(7025353, 'graph', graph, false, false), J$.R(7025361, 'current', current, false, false)), 'distance'), J$.T(7025385, 1, 22, false)));
                                        J$.P(7025417, J$.R(7025401, 'node', node, false, false), 'parent', J$.R(7025409, 'current', current, false, false));
                                        J$.M(7025441, J$.R(7025425, 'queue', queue, false, false), 'unshift', false)(J$.R(7025433, 'adjacent', adjacent, false, false));
                                    }
                                }
                            }
                            return J$.Rt(7025457, J$.R(7025449, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(7026665, J$e);
                        } finally {
                            if (J$.Fr(7026673))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function link(from, to) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7025641, arguments.callee, this, arguments);
                            arguments = J$.N(7025649, 'arguments', arguments, true, false, false);
                            from = J$.N(7025657, 'from', from, true, false, false);
                            to = J$.N(7025665, 'to', to, true, false, false);
                            return J$.Rt(7025633, J$.T(7025625, function (args) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(7025601, arguments.callee, this, arguments);
                                            arguments = J$.N(7025609, 'arguments', arguments, true, false, false);
                                            args = J$.N(7025617, 'args', args, true, false, false);
                                            return J$.Rt(7025593, J$.F(7025585, J$.R(7025553, 'to', to, false, false), false)(J$.F(7025577, J$.R(7025561, 'from', from, false, false), false)(J$.R(7025569, 'args', args, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(7026681, J$e);
                                        } finally {
                                            if (J$.Fr(7026689))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7026697, J$e);
                        } finally {
                            if (J$.Fr(7026705))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrapConversion(toModel, graph) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7026097, arguments.callee, this, arguments);
                            arguments = J$.N(7026105, 'arguments', arguments, true, false, false);
                            toModel = J$.N(7026113, 'toModel', toModel, true, false, false);
                            graph = J$.N(7026121, 'graph', graph, true, false, false);
                            J$.N(7026129, 'path', path, false, false, false);
                            J$.N(7026137, 'fn', fn, false, false, false);
                            J$.N(7026145, 'cur', cur, false, false, false);
                            var path = J$.W(7025721, 'path', J$.T(7025713, [
                                J$.G(7025697, J$.G(7025689, J$.R(7025673, 'graph', graph, false, false), J$.R(7025681, 'toModel', toModel, false, false)), 'parent'),
                                J$.R(7025705, 'toModel', toModel, false, false)
                            ], 10, false), path, false, false);
                            var fn = J$.W(7025793, 'fn', J$.G(7025785, J$.G(7025769, J$.R(7025729, 'conversions', conversions, false, true), J$.G(7025761, J$.G(7025753, J$.R(7025737, 'graph', graph, false, false), J$.R(7025745, 'toModel', toModel, false, false)), 'parent')), J$.R(7025777, 'toModel', toModel, false, false)), fn, false, false);
                            var cur = J$.W(7025833, 'cur', J$.G(7025825, J$.G(7025817, J$.R(7025801, 'graph', graph, false, false), J$.R(7025809, 'toModel', toModel, false, false)), 'parent'), cur, false, false);
                            while (J$.C(378432, J$.G(7025865, J$.G(7025857, J$.R(7025841, 'graph', graph, false, false), J$.R(7025849, 'cur', cur, false, false)), 'parent'))) {
                                J$.M(7025913, J$.R(7025873, 'path', path, false, false), 'unshift', false)(J$.G(7025905, J$.G(7025897, J$.R(7025881, 'graph', graph, false, false), J$.R(7025889, 'cur', cur, false, false)), 'parent'));
                                fn = J$.W(7026009, 'fn', J$.F(7026001, J$.R(7025921, 'link', link, false, true), false)(J$.G(7025985, J$.G(7025969, J$.R(7025929, 'conversions', conversions, false, true), J$.G(7025961, J$.G(7025953, J$.R(7025937, 'graph', graph, false, false), J$.R(7025945, 'cur', cur, false, false)), 'parent')), J$.R(7025977, 'cur', cur, false, false)), J$.R(7025993, 'fn', fn, false, false)), fn, false, false);
                                cur = J$.W(7026049, 'cur', J$.G(7026041, J$.G(7026033, J$.R(7026017, 'graph', graph, false, false), J$.R(7026025, 'cur', cur, false, false)), 'parent'), cur, false, false);
                            }
                            J$.P(7026073, J$.R(7026057, 'fn', fn, false, false), 'conversion', J$.R(7026065, 'path', path, false, false));
                            return J$.Rt(7026089, J$.R(7026081, 'fn', fn, false, false));
                        } catch (J$e) {
                            J$.Ex(7026713, J$e);
                        } finally {
                            if (J$.Fr(7026721))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7026577, 'conversions', conversions, false, false, false);
            buildGraph = J$.N(7026593, 'buildGraph', J$.T(7026585, buildGraph, 12, false), true, false, false);
            deriveBFS = J$.N(7026609, 'deriveBFS', J$.T(7026601, deriveBFS, 12, false), true, false, false);
            link = J$.N(7026625, 'link', J$.T(7026617, link, 12, false), true, false, false);
            wrapConversion = J$.N(7026641, 'wrapConversion', J$.T(7026633, wrapConversion, 12, false), true, false, false);
            var conversions = J$.W(7024753, 'conversions', J$.F(7024745, J$.I(typeof require === 'undefined' ? require = J$.R(7024729, 'require', undefined, true, true) : require = J$.R(7024729, 'require', require, true, true)), false)(J$.T(7024737, './conversions', 21, false)), conversions, false, true);
            J$.P(7026561, J$.I(typeof module === 'undefined' ? module = J$.R(7026153, 'module', undefined, true, true) : module = J$.R(7026153, 'module', module, true, true)), 'exports', J$.T(7026553, function (fromModel) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(7026473, arguments.callee, this, arguments);
                            arguments = J$.N(7026481, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(7026489, 'fromModel', fromModel, true, false, false);
                            J$.N(7026497, 'graph', graph, false, false, false);
                            J$.N(7026505, 'conversion', conversion, false, false, false);
                            J$.N(7026513, 'models', models, false, false, false);
                            J$.N(7026521, 'len', len, false, false, false);
                            J$.N(7026529, 'i', i, false, false, false);
                            J$.N(7026537, 'toModel', toModel, false, false, false);
                            J$.N(7026545, 'node', node, false, false, false);
                            var graph = J$.W(7026185, 'graph', J$.F(7026177, J$.R(7026161, 'deriveBFS', deriveBFS, false, true), false)(J$.R(7026169, 'fromModel', fromModel, false, false)), graph, false, false);
                            var conversion = J$.W(7026201, 'conversion', J$.T(7026193, {}, 11, false), conversion, false, false);
                            var models = J$.W(7026233, 'models', J$.M(7026225, J$.I(typeof Object === 'undefined' ? Object = J$.R(7026209, 'Object', undefined, true, true) : Object = J$.R(7026209, 'Object', Object, true, true)), 'keys', false)(J$.R(7026217, 'graph', graph, false, false)), models, false, false);
                            for (var len = J$.W(7026265, 'len', J$.G(7026249, J$.R(7026241, 'models', models, false, false), 'length'), len, false, false), i = J$.W(7026273, 'i', J$.T(7026257, 0, 22, false), i, false, false); J$.C(378448, J$.B(715402, '<', J$.R(7026281, 'i', i, false, false), J$.R(7026289, 'len', len, false, false))); J$.B(715426, '-', i = J$.W(7026305, 'i', J$.B(715418, '+', J$.U(715410, '+', J$.R(7026297, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var toModel = J$.W(7026337, 'toModel', J$.G(7026329, J$.R(7026313, 'models', models, false, false), J$.R(7026321, 'i', i, false, false)), toModel, false, false);
                                var node = J$.W(7026369, 'node', J$.G(7026361, J$.R(7026345, 'graph', graph, false, false), J$.R(7026353, 'toModel', toModel, false, false)), node, false, false);
                                if (J$.C(378440, J$.B(715434, '===', J$.G(7026385, J$.R(7026377, 'node', node, false, false), 'parent'), J$.T(7026393, null, 25, false)))) {
                                    continue;
                                }
                                J$.P(7026449, J$.R(7026401, 'conversion', conversion, false, false), J$.R(7026409, 'toModel', toModel, false, false), J$.F(7026441, J$.R(7026417, 'wrapConversion', wrapConversion, false, true), false)(J$.R(7026425, 'toModel', toModel, false, false), J$.R(7026433, 'graph', graph, false, false)));
                            }
                            return J$.Rt(7026465, J$.R(7026457, 'conversion', conversion, false, false));
                        } catch (J$e) {
                            J$.Ex(7026729, J$e);
                        } finally {
                            if (J$.Fr(7026737))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(7026745, J$e);
        } finally {
            if (J$.Sr(7026753))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

