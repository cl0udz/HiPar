J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(6854225, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchNode/node_modules/aws4/lru.js');
            function LruCache(size) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6852457, arguments.callee, this, arguments);
                            arguments = J$.N(6852465, 'arguments', arguments, true, false, false);
                            size = J$.N(6852473, 'size', size, true, false, false);
                            J$.P(6852377, J$.R(6852353, 'this', this, false, false), 'capacity', J$.B(700898, '|', J$.R(6852361, 'size', size, false, false), J$.T(6852369, 0, 22, false)));
                            J$.P(6852417, J$.R(6852385, 'this', this, false, false), 'map', J$.M(6852409, J$.I(typeof Object === 'undefined' ? Object = J$.R(6852393, 'Object', undefined, true, true) : Object = J$.R(6852393, 'Object', Object, true, true)), 'create', false)(J$.T(6852401, null, 25, false)));
                            J$.P(6852449, J$.R(6852425, 'this', this, false, false), 'list', J$.F(6852441, J$.R(6852433, 'DoublyLinkedList', DoublyLinkedList, false, true), true)());
                        } catch (J$e) {
                            J$.Ex(6854297, J$e);
                        } finally {
                            if (J$.Fr(6854305))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function DoublyLinkedList() {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(6853305, arguments.callee, this, arguments);
                            arguments = J$.N(6853313, 'arguments', arguments, true, false, false);
                            J$.P(6853273, J$.R(6853257, 'this', this, false, false), 'firstNode', J$.T(6853265, null, 25, false));
                            J$.P(6853297, J$.R(6853281, 'this', this, false, false), 'lastNode', J$.T(6853289, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(6854377, J$e);
                        } finally {
                            if (J$.Fr(6854385))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function DoublyLinkedNode(key, val) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(6854193, arguments.callee, this, arguments);
                            arguments = J$.N(6854201, 'arguments', arguments, true, false, false);
                            key = J$.N(6854209, 'key', key, true, false, false);
                            val = J$.N(6854217, 'val', val, true, false, false);
                            J$.P(6854113, J$.R(6854097, 'this', this, false, false), 'key', J$.R(6854105, 'key', key, false, false));
                            J$.P(6854137, J$.R(6854121, 'this', this, false, false), 'val', J$.R(6854129, 'val', val, false, false));
                            J$.P(6854161, J$.R(6854145, 'this', this, false, false), 'prev', J$.T(6854153, null, 25, false));
                            J$.P(6854185, J$.R(6854169, 'this', this, false, false), 'next', J$.T(6854177, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(6854441, J$e);
                        } finally {
                            if (J$.Fr(6854449))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            LruCache = J$.N(6854241, 'LruCache', J$.T(6854233, LruCache, 12, false), true, false, false);
            DoublyLinkedList = J$.N(6854257, 'DoublyLinkedList', J$.T(6854249, DoublyLinkedList, 12, false), true, false, false);
            DoublyLinkedNode = J$.N(6854273, 'DoublyLinkedNode', J$.T(6854265, DoublyLinkedNode, 12, false), true, false, false);
            J$.P(6852345, J$.I(typeof module === 'undefined' ? module = J$.R(6852273, 'module', undefined, true, true) : module = J$.R(6852273, 'module', module, true, true)), 'exports', J$.T(6852337, function (size) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6852313, arguments.callee, this, arguments);
                            arguments = J$.N(6852321, 'arguments', arguments, true, false, false);
                            size = J$.N(6852329, 'size', size, true, false, false);
                            return J$.Rt(6852305, J$.F(6852297, J$.R(6852281, 'LruCache', LruCache, false, true), true)(J$.R(6852289, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(6854281, J$e);
                        } finally {
                            if (J$.Fr(6854289))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6852657, J$.G(6852489, J$.R(6852481, 'LruCache', LruCache, false, true), 'prototype'), 'get', J$.T(6852649, function (key) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(6852617, arguments.callee, this, arguments);
                            arguments = J$.N(6852625, 'arguments', arguments, true, false, false);
                            key = J$.N(6852633, 'key', key, true, false, false);
                            J$.N(6852641, 'node', node, false, false, false);
                            var node = J$.W(6852529, 'node', J$.G(6852521, J$.G(6852505, J$.R(6852497, 'this', this, false, false), 'map'), J$.R(6852513, 'key', key, false, false)), node, false, false);
                            if (J$.C(371424, J$.B(700906, '==', J$.R(6852537, 'node', node, false, false), J$.T(6852545, null, 25, false))))
                                return J$.Rt(6852561, J$.T(6852553, undefined, 24, false));
                            J$.M(6852585, J$.R(6852569, 'this', this, false, false), 'used', false)(J$.R(6852577, 'node', node, false, false));
                            return J$.Rt(6852609, J$.G(6852601, J$.R(6852593, 'node', node, false, false), 'val'));
                        } catch (J$e) {
                            J$.Ex(6854313, J$e);
                        } finally {
                            if (J$.Fr(6854321))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6853009, J$.G(6852673, J$.R(6852665, 'LruCache', LruCache, false, true), 'prototype'), 'set', J$.T(6853001, function (key, val) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(6852961, arguments.callee, this, arguments);
                            arguments = J$.N(6852969, 'arguments', arguments, true, false, false);
                            key = J$.N(6852977, 'key', key, true, false, false);
                            val = J$.N(6852985, 'val', val, true, false, false);
                            J$.N(6852993, 'node', node, false, false, false);
                            var node = J$.W(6852713, 'node', J$.G(6852705, J$.G(6852689, J$.R(6852681, 'this', this, false, false), 'map'), J$.R(6852697, 'key', key, false, false)), node, false, false);
                            if (J$.C(371448, J$.B(700914, '!=', J$.R(6852721, 'node', node, false, false), J$.T(6852729, null, 25, false)))) {
                                J$.P(6852753, J$.R(6852737, 'node', node, false, false), 'val', J$.R(6852745, 'val', val, false, false));
                            } else {
                                if (J$.C(371432, J$.U(700922, '!', J$.G(6852769, J$.R(6852761, 'this', this, false, false), 'capacity'))))
                                    J$.M(6852785, J$.R(6852777, 'this', this, false, false), 'prune', false)();
                                if (J$.C(371440, J$.U(700930, '!', J$.G(6852801, J$.R(6852793, 'this', this, false, false), 'capacity'))))
                                    return J$.Rt(6852817, J$.T(6852809, false, 23, false));
                                node = J$.W(6852857, 'node', J$.F(6852849, J$.R(6852825, 'DoublyLinkedNode', DoublyLinkedNode, false, true), true)(J$.R(6852833, 'key', key, false, false), J$.R(6852841, 'val', val, false, false)), node, false, false);
                                J$.P(6852897, J$.G(6852873, J$.R(6852865, 'this', this, false, false), 'map'), J$.R(6852881, 'key', key, false, false), J$.R(6852889, 'node', node, false, false));
                                J$.B(700938, '+', J$.A(6852913, J$.R(6852905, 'this', this, false, false), 'capacity', '-')(1), 1);
                            }
                            J$.M(6852937, J$.R(6852921, 'this', this, false, false), 'used', false)(J$.R(6852929, 'node', node, false, false));
                            return J$.Rt(6852953, J$.T(6852945, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(6854329, J$e);
                        } finally {
                            if (J$.Fr(6854337))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6853097, J$.G(6853025, J$.R(6853017, 'LruCache', LruCache, false, true), 'prototype'), 'used', J$.T(6853089, function (node) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(6853065, arguments.callee, this, arguments);
                            arguments = J$.N(6853073, 'arguments', arguments, true, false, false);
                            node = J$.N(6853081, 'node', node, true, false, false);
                            J$.M(6853057, J$.G(6853041, J$.R(6853033, 'this', this, false, false), 'list'), 'moveToFront', false)(J$.R(6853049, 'node', node, false, false));
                        } catch (J$e) {
                            J$.Ex(6854345, J$e);
                        } finally {
                            if (J$.Fr(6854353))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6853249, J$.G(6853113, J$.R(6853105, 'LruCache', LruCache, false, true), 'prototype'), 'prune', J$.T(6853241, function () {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(6853217, arguments.callee, this, arguments);
                            arguments = J$.N(6853225, 'arguments', arguments, true, false, false);
                            J$.N(6853233, 'node', node, false, false, false);
                            var node = J$.W(6853145, 'node', J$.M(6853137, J$.G(6853129, J$.R(6853121, 'this', this, false, false), 'list'), 'pop', false)(), node, false, false);
                            if (J$.C(371456, J$.B(700946, '!=', J$.R(6853153, 'node', node, false, false), J$.T(6853161, null, 25, false)))) {
                                J$.B(700954, 'delete', J$.G(6853177, J$.R(6853169, 'this', this, false, false), 'map'), J$.G(6853193, J$.R(6853185, 'node', node, false, false), 'key'));
                                J$.B(700962, '-', J$.A(6853209, J$.R(6853201, 'this', this, false, false), 'capacity', '+')(1), 1);
                            }
                        } catch (J$e) {
                            J$.Ex(6854361, J$e);
                        } finally {
                            if (J$.Fr(6854369))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6853657, J$.G(6853329, J$.R(6853321, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'moveToFront', J$.T(6853649, function (node) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(6853625, arguments.callee, this, arguments);
                            arguments = J$.N(6853633, 'arguments', arguments, true, false, false);
                            node = J$.N(6853641, 'node', node, true, false, false);
                            if (J$.C(371464, J$.B(700970, '==', J$.G(6853345, J$.R(6853337, 'this', this, false, false), 'firstNode'), J$.R(6853353, 'node', node, false, false))))
                                return J$.Rt(6853361, undefined);
                            J$.M(6853385, J$.R(6853369, 'this', this, false, false), 'remove', false)(J$.R(6853377, 'node', node, false, false));
                            if (J$.C(371472, J$.B(700978, '==', J$.G(6853401, J$.R(6853393, 'this', this, false, false), 'firstNode'), J$.T(6853409, null, 25, false)))) {
                                J$.P(6853433, J$.R(6853417, 'this', this, false, false), 'firstNode', J$.R(6853425, 'node', node, false, false));
                                J$.P(6853457, J$.R(6853441, 'this', this, false, false), 'lastNode', J$.R(6853449, 'node', node, false, false));
                                J$.P(6853481, J$.R(6853465, 'node', node, false, false), 'prev', J$.T(6853473, null, 25, false));
                                J$.P(6853505, J$.R(6853489, 'node', node, false, false), 'next', J$.T(6853497, null, 25, false));
                            } else {
                                J$.P(6853529, J$.R(6853513, 'node', node, false, false), 'prev', J$.T(6853521, null, 25, false));
                                J$.P(6853561, J$.R(6853537, 'node', node, false, false), 'next', J$.G(6853553, J$.R(6853545, 'this', this, false, false), 'firstNode'));
                                J$.P(6853593, J$.G(6853577, J$.R(6853569, 'node', node, false, false), 'next'), 'prev', J$.R(6853585, 'node', node, false, false));
                                J$.P(6853617, J$.R(6853601, 'this', this, false, false), 'firstNode', J$.R(6853609, 'node', node, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(6854393, J$e);
                        } finally {
                            if (J$.Fr(6854401))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6853793, J$.G(6853673, J$.R(6853665, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'pop', J$.T(6853785, function () {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(6853761, arguments.callee, this, arguments);
                            arguments = J$.N(6853769, 'arguments', arguments, true, false, false);
                            J$.N(6853777, 'lastNode', lastNode, false, false, false);
                            var lastNode = J$.W(6853697, 'lastNode', J$.G(6853689, J$.R(6853681, 'this', this, false, false), 'lastNode'), lastNode, false, false);
                            if (J$.C(371480, J$.B(700986, '!=', J$.R(6853705, 'lastNode', lastNode, false, false), J$.T(6853713, null, 25, false)))) {
                                J$.M(6853737, J$.R(6853721, 'this', this, false, false), 'remove', false)(J$.R(6853729, 'lastNode', lastNode, false, false));
                            }
                            return J$.Rt(6853753, J$.R(6853745, 'lastNode', lastNode, false, false));
                        } catch (J$e) {
                            J$.Ex(6854409, J$e);
                        } finally {
                            if (J$.Fr(6854417))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(6854089, J$.G(6853809, J$.R(6853801, 'DoublyLinkedList', DoublyLinkedList, false, true), 'prototype'), 'remove', J$.T(6854081, function (node) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(6854057, arguments.callee, this, arguments);
                            arguments = J$.N(6854065, 'arguments', arguments, true, false, false);
                            node = J$.N(6854073, 'node', node, true, false, false);
                            if (J$.C(371496, J$.B(700994, '==', J$.G(6853825, J$.R(6853817, 'this', this, false, false), 'firstNode'), J$.R(6853833, 'node', node, false, false)))) {
                                J$.P(6853865, J$.R(6853841, 'this', this, false, false), 'firstNode', J$.G(6853857, J$.R(6853849, 'node', node, false, false), 'next'));
                            } else if (J$.C(371488, J$.B(701002, '!=', J$.G(6853881, J$.R(6853873, 'node', node, false, false), 'prev'), J$.T(6853889, null, 25, false)))) {
                                J$.P(6853929, J$.G(6853905, J$.R(6853897, 'node', node, false, false), 'prev'), 'next', J$.G(6853921, J$.R(6853913, 'node', node, false, false), 'next'));
                            }
                            if (J$.C(371512, J$.B(701010, '==', J$.G(6853945, J$.R(6853937, 'this', this, false, false), 'lastNode'), J$.R(6853953, 'node', node, false, false)))) {
                                J$.P(6853985, J$.R(6853961, 'this', this, false, false), 'lastNode', J$.G(6853977, J$.R(6853969, 'node', node, false, false), 'prev'));
                            } else if (J$.C(371504, J$.B(701018, '!=', J$.G(6854001, J$.R(6853993, 'node', node, false, false), 'next'), J$.T(6854009, null, 25, false)))) {
                                J$.P(6854049, J$.G(6854025, J$.R(6854017, 'node', node, false, false), 'next'), 'prev', J$.G(6854041, J$.R(6854033, 'node', node, false, false), 'prev'));
                            }
                        } catch (J$e) {
                            J$.Ex(6854425, J$e);
                        } finally {
                            if (J$.Fr(6854433))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(6854457, J$e);
        } finally {
            if (J$.Sr(6854465))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

