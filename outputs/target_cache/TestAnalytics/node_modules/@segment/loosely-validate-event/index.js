J$.noInstrEval = false;
jalangiLabel9:
    while (true) {
        try {
            J$.Se(2155673, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestAnalytics/node_modules/@segment/loosely-validate-event/index.js');
            function looselyValidateEvent(event, type) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2154281, arguments.callee, this, arguments);
                            arguments = J$.N(2154289, 'arguments', arguments, true, false, false);
                            event = J$.N(2154297, 'event', event, true, false, false);
                            type = J$.N(2154305, 'type', type, true, false, false);
                            J$.F(2153913, J$.R(2153897, 'validateGenericEvent', validateGenericEvent, false, true), false)(J$.R(2153905, 'event', event, false, false));
                            type = J$.W(2153945, 'type', J$.C(102208, J$.R(2153921, 'type', type, false, false)) ? J$._() : J$.G(2153937, J$.R(2153929, 'event', event, false, false), 'type'), type, false, false);
                            J$.F(2153977, J$.R(2153953, 'assert', assert, false, true), false)(J$.R(2153961, 'type', type, false, false), J$.T(2153969, 'You must pass an event type.', 21, false));
                            switch (J$.C1(102216, J$.R(2153985, 'type', type, false, false))) {
                            case J$.C2(102224, J$.T(2154025, 'track', 21, false)):
                                return J$.Rt(2154017, J$.F(2154009, J$.R(2153993, 'validateTrackEvent', validateTrackEvent, false, true), false)(J$.R(2154001, 'event', event, false, false)));
                            case J$.C2(102232, J$.T(2154065, 'group', 21, false)):
                                return J$.Rt(2154057, J$.F(2154049, J$.R(2154033, 'validateGroupEvent', validateGroupEvent, false, true), false)(J$.R(2154041, 'event', event, false, false)));
                            case J$.C2(102240, J$.T(2154105, 'identify', 21, false)):
                                return J$.Rt(2154097, J$.F(2154089, J$.R(2154073, 'validateIdentifyEvent', validateIdentifyEvent, false, true), false)(J$.R(2154081, 'event', event, false, false)));
                            case J$.C2(102248, J$.T(2154145, 'page', 21, false)):
                                return J$.Rt(2154137, J$.F(2154129, J$.R(2154113, 'validatePageEvent', validatePageEvent, false, true), false)(J$.R(2154121, 'event', event, false, false)));
                            case J$.C2(102256, J$.T(2154185, 'screen', 21, false)):
                                return J$.Rt(2154177, J$.F(2154169, J$.R(2154153, 'validateScreenEvent', validateScreenEvent, false, true), false)(J$.R(2154161, 'event', event, false, false)));
                            case J$.C2(102264, J$.T(2154225, 'alias', 21, false)):
                                return J$.Rt(2154217, J$.F(2154209, J$.R(2154193, 'validateAliasEvent', validateAliasEvent, false, true), false)(J$.R(2154201, 'event', event, false, false)));
                            default:
                                J$.F(2154273, J$.R(2154233, 'assert', assert, false, true), false)(J$.T(2154241, 0, 22, false), J$.B(286570, '+', J$.B(286562, '+', J$.T(2154249, 'Invalid event type: "', 21, false), J$.R(2154257, 'type', type, false, false)), J$.T(2154265, '"', 21, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(2155849, J$e);
                        } finally {
                            if (J$.Fr(2155857))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateTrackEvent(event) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2154409, arguments.callee, this, arguments);
                            arguments = J$.N(2154417, 'arguments', arguments, true, false, false);
                            event = J$.N(2154425, 'event', event, true, false, false);
                            J$.F(2154361, J$.R(2154313, 'assert', assert, false, true), false)(J$.C(102272, J$.G(2154329, J$.R(2154321, 'event', event, false, false), 'anonymousId')) ? J$._() : J$.G(2154345, J$.R(2154337, 'event', event, false, false), 'userId'), J$.T(2154353, 'You must pass either an "anonymousId" or a "userId".', 21, false));
                            J$.F(2154401, J$.R(2154369, 'assert', assert, false, true), false)(J$.G(2154385, J$.R(2154377, 'event', event, false, false), 'event'), J$.T(2154393, 'You must pass an "event".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155865, J$e);
                        } finally {
                            if (J$.Fr(2155873))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateGroupEvent(event) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2154529, arguments.callee, this, arguments);
                            arguments = J$.N(2154537, 'arguments', arguments, true, false, false);
                            event = J$.N(2154545, 'event', event, true, false, false);
                            J$.F(2154481, J$.R(2154433, 'assert', assert, false, true), false)(J$.C(102280, J$.G(2154449, J$.R(2154441, 'event', event, false, false), 'anonymousId')) ? J$._() : J$.G(2154465, J$.R(2154457, 'event', event, false, false), 'userId'), J$.T(2154473, 'You must pass either an "anonymousId" or a "userId".', 21, false));
                            J$.F(2154521, J$.R(2154489, 'assert', assert, false, true), false)(J$.G(2154505, J$.R(2154497, 'event', event, false, false), 'groupId'), J$.T(2154513, 'You must pass a "groupId".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155881, J$e);
                        } finally {
                            if (J$.Fr(2155889))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateIdentifyEvent(event) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(2154609, arguments.callee, this, arguments);
                            arguments = J$.N(2154617, 'arguments', arguments, true, false, false);
                            event = J$.N(2154625, 'event', event, true, false, false);
                            J$.F(2154601, J$.R(2154553, 'assert', assert, false, true), false)(J$.C(102288, J$.G(2154569, J$.R(2154561, 'event', event, false, false), 'anonymousId')) ? J$._() : J$.G(2154585, J$.R(2154577, 'event', event, false, false), 'userId'), J$.T(2154593, 'You must pass either an "anonymousId" or a "userId".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155897, J$e);
                        } finally {
                            if (J$.Fr(2155905))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validatePageEvent(event) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2154689, arguments.callee, this, arguments);
                            arguments = J$.N(2154697, 'arguments', arguments, true, false, false);
                            event = J$.N(2154705, 'event', event, true, false, false);
                            J$.F(2154681, J$.R(2154633, 'assert', assert, false, true), false)(J$.C(102296, J$.G(2154649, J$.R(2154641, 'event', event, false, false), 'anonymousId')) ? J$._() : J$.G(2154665, J$.R(2154657, 'event', event, false, false), 'userId'), J$.T(2154673, 'You must pass either an "anonymousId" or a "userId".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155913, J$e);
                        } finally {
                            if (J$.Fr(2155921))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateScreenEvent(event) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(2154769, arguments.callee, this, arguments);
                            arguments = J$.N(2154777, 'arguments', arguments, true, false, false);
                            event = J$.N(2154785, 'event', event, true, false, false);
                            J$.F(2154761, J$.R(2154713, 'assert', assert, false, true), false)(J$.C(102304, J$.G(2154729, J$.R(2154721, 'event', event, false, false), 'anonymousId')) ? J$._() : J$.G(2154745, J$.R(2154737, 'event', event, false, false), 'userId'), J$.T(2154753, 'You must pass either an "anonymousId" or a "userId".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155929, J$e);
                        } finally {
                            if (J$.Fr(2155937))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateAliasEvent(event) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(2154873, arguments.callee, this, arguments);
                            arguments = J$.N(2154881, 'arguments', arguments, true, false, false);
                            event = J$.N(2154889, 'event', event, true, false, false);
                            J$.F(2154825, J$.R(2154793, 'assert', assert, false, true), false)(J$.G(2154809, J$.R(2154801, 'event', event, false, false), 'userId'), J$.T(2154817, 'You must pass a "userId".', 21, false));
                            J$.F(2154865, J$.R(2154833, 'assert', assert, false, true), false)(J$.G(2154849, J$.R(2154841, 'event', event, false, false), 'previousId'), J$.T(2154857, 'You must pass a "previousId".', 21, false));
                        } catch (J$e) {
                            J$.Ex(2155945, J$e);
                        } finally {
                            if (J$.Fr(2155953))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateGenericEvent(event) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(2155609, arguments.callee, this, arguments);
                            arguments = J$.N(2155617, 'arguments', arguments, true, false, false);
                            event = J$.N(2155625, 'event', event, true, false, false);
                            J$.N(2155633, 'json', json, false, false, false);
                            J$.N(2155641, 'key', key, false, false, false);
                            J$.N(2155649, 'val', val, false, false, false);
                            J$.N(2155657, 'rule', rule, false, false, false);
                            J$.N(2155665, 'a', a, false, false, false);
                            J$.F(2155113, J$.R(2155065, 'assert', assert, false, true), false)(J$.B(286578, '===', J$.F(2155089, J$.R(2155073, 'type', type, false, true), false)(J$.R(2155081, 'event', event, false, false)), J$.T(2155097, 'object', 21, false)), J$.T(2155105, 'You must pass a message object.', 21, false));
                            var json = J$.W(2155145, 'json', J$.M(2155137, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(2155121, 'JSON', undefined, true, true) : JSON = J$.R(2155121, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(2155129, 'event', event, false, false)), json, false, false);
                            J$.F(2155209, J$.R(2155153, 'assert', assert, false, true), false)(J$.B(286586, '<', J$.M(2155185, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(2155161, 'Buffer', undefined, true, true) : Buffer = J$.R(2155161, 'Buffer', Buffer, true, true)), 'byteLength', false)(J$.R(2155169, 'json', json, false, false), J$.T(2155177, 'utf8', 21, false)), J$.R(2155193, 'MAX_SIZE', MAX_SIZE, false, true)), J$.T(2155201, 'Your message must be < 32kb.', 21, false));
                            for (var key in J$.H(2155593, J$.R(2155217, 'genericValidationRules', genericValidationRules, false, true))) {
                                J$.N(2155601, 'key', key, false, true, false);
                                {
                                    {
                                        var val = J$.W(2155249, 'val', J$.G(2155241, J$.R(2155225, 'event', event, false, false), J$.R(2155233, 'key', key, false, false)), val, false, false);
                                        if (J$.C(102312, J$.U(286594, '!', J$.R(2155257, 'val', val, false, false))))
                                            continue;
                                        var rule = J$.W(2155289, 'rule', J$.G(2155281, J$.R(2155265, 'genericValidationRules', genericValidationRules, false, true), J$.R(2155273, 'key', key, false, false)), rule, false, false);
                                        if (J$.C(102320, J$.B(286602, '!==', J$.F(2155313, J$.R(2155297, 'type', type, false, true), false)(J$.R(2155305, 'rule', rule, false, false)), J$.T(2155321, 'array', 21, false)))) {
                                            rule = J$.W(2155345, 'rule', J$.T(2155337, [J$.R(2155329, 'rule', rule, false, false)], 10, false), rule, false, false);
                                        }
                                        var a = J$.W(2155401, 'a', J$.C(102328, J$.B(286610, '===', J$.G(2155369, J$.R(2155353, 'rule', rule, false, false), J$.T(2155361, 0, 22, false)), J$.T(2155377, 'object', 21, false))) ? J$.T(2155385, 'an', 21, false) : J$.T(2155393, 'a', 21, false), a, false, false);
                                        J$.F(2155585, J$.R(2155409, 'assert', assert, false, true), false)(J$.M(2155497, J$.R(2155417, 'rule', rule, false, false), 'some', false)(J$.T(2155489, function (e) {
                                            jalangiLabel7:
                                                while (true) {
                                                    try {
                                                        J$.Fe(2155465, arguments.callee, this, arguments);
                                                        arguments = J$.N(2155473, 'arguments', arguments, true, false, false);
                                                        e = J$.N(2155481, 'e', e, true, false, false);
                                                        return J$.Rt(2155457, J$.B(286618, '===', J$.F(2155441, J$.R(2155425, 'type', type, false, true), false)(J$.R(2155433, 'val', val, false, false)), J$.R(2155449, 'e', e, false, false)));
                                                    } catch (J$e) {
                                                        J$.Ex(2155961, J$e);
                                                    } finally {
                                                        if (J$.Fr(2155969))
                                                            continue jalangiLabel7;
                                                        else
                                                            return J$.Ra();
                                                    }
                                                }
                                        }, 12, false)), J$.B(286666, '+', J$.B(286658, '+', J$.B(286650, '+', J$.B(286642, '+', J$.B(286634, '+', J$.B(286626, '+', J$.T(2155505, '"', 21, false), J$.R(2155513, 'key', key, false, false)), J$.T(2155521, '" must be ', 21, false)), J$.R(2155529, 'a', a, false, false)), J$.T(2155537, ' ', 21, false)), J$.F(2155569, J$.R(2155545, 'join', join, false, true), false)(J$.R(2155553, 'rule', rule, false, false), J$.T(2155561, 'or', 21, false))), J$.T(2155577, '.', 21, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(2155977, J$e);
                        } finally {
                            if (J$.Fr(2155985))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2155681, 'type', type, false, false, false);
            J$.N(2155689, 'join', join, false, false, false);
            J$.N(2155697, 'assert', assert, false, false, false);
            J$.N(2155705, 'MAX_SIZE', MAX_SIZE, false, false, false);
            looselyValidateEvent = J$.N(2155721, 'looselyValidateEvent', J$.T(2155713, looselyValidateEvent, 12, false), true, false, false);
            validateTrackEvent = J$.N(2155737, 'validateTrackEvent', J$.T(2155729, validateTrackEvent, 12, false), true, false, false);
            validateGroupEvent = J$.N(2155753, 'validateGroupEvent', J$.T(2155745, validateGroupEvent, 12, false), true, false, false);
            validateIdentifyEvent = J$.N(2155769, 'validateIdentifyEvent', J$.T(2155761, validateIdentifyEvent, 12, false), true, false, false);
            validatePageEvent = J$.N(2155785, 'validatePageEvent', J$.T(2155777, validatePageEvent, 12, false), true, false, false);
            validateScreenEvent = J$.N(2155801, 'validateScreenEvent', J$.T(2155793, validateScreenEvent, 12, false), true, false, false);
            validateAliasEvent = J$.N(2155817, 'validateAliasEvent', J$.T(2155809, validateAliasEvent, 12, false), true, false, false);
            J$.N(2155825, 'genericValidationRules', genericValidationRules, false, false, false);
            validateGenericEvent = J$.N(2155841, 'validateGenericEvent', J$.T(2155833, validateGenericEvent, 12, false), true, false, false);
            var type = J$.W(2153777, 'type', J$.F(2153769, J$.I(typeof require === 'undefined' ? require = J$.R(2153753, 'require', undefined, true, true) : require = J$.R(2153753, 'require', require, true, true)), false)(J$.T(2153761, 'component-type', 21, false)), type, false, true);
            var join = J$.W(2153809, 'join', J$.F(2153801, J$.I(typeof require === 'undefined' ? require = J$.R(2153785, 'require', undefined, true, true) : require = J$.R(2153785, 'require', require, true, true)), false)(J$.T(2153793, 'join-component', 21, false)), join, false, true);
            var assert = J$.W(2153841, 'assert', J$.F(2153833, J$.I(typeof require === 'undefined' ? require = J$.R(2153817, 'require', undefined, true, true) : require = J$.R(2153817, 'require', require, true, true)), false)(J$.T(2153825, 'assert', 21, false)), assert, false, true);
            var MAX_SIZE = J$.W(2153865, 'MAX_SIZE', J$.B(286554, '<<', J$.T(2153849, 32, 22, false), J$.T(2153857, 10, 22, false)), MAX_SIZE, false, true);
            J$.P(2153889, J$.I(typeof module === 'undefined' ? module = J$.R(2153873, 'module', undefined, true, true) : module = J$.R(2153873, 'module', module, true, true)), 'exports', J$.R(2153881, 'looselyValidateEvent', looselyValidateEvent, false, true));
            var genericValidationRules = J$.W(2155057, 'genericValidationRules', J$.T(2155049, {
                anonymousId: J$.T(2154913, [
                    J$.T(2154897, 'string', 21, false),
                    J$.T(2154905, 'number', 21, false)
                ], 10, false),
                category: J$.T(2154921, 'string', 21, false),
                context: J$.T(2154929, 'object', 21, false),
                event: J$.T(2154937, 'string', 21, false),
                groupId: J$.T(2154961, [
                    J$.T(2154945, 'string', 21, false),
                    J$.T(2154953, 'number', 21, false)
                ], 10, false),
                integrations: J$.T(2154969, 'object', 21, false),
                name: J$.T(2154977, 'string', 21, false),
                previousId: J$.T(2155001, [
                    J$.T(2154985, 'string', 21, false),
                    J$.T(2154993, 'number', 21, false)
                ], 10, false),
                timestamp: J$.T(2155009, 'date', 21, false),
                userId: J$.T(2155033, [
                    J$.T(2155017, 'string', 21, false),
                    J$.T(2155025, 'number', 21, false)
                ], 10, false),
                type: J$.T(2155041, 'string', 21, false)
            }, 11, false), genericValidationRules, false, true);
        } catch (J$e) {
            J$.Ex(2155993, J$e);
        } finally {
            if (J$.Sr(2156001))
                continue jalangiLabel9;
            else
                break jalangiLabel9;
        }
    }
// JALANGI DO NOT INSTRUMENT

