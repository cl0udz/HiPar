J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(3389249, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestJs-yaml/node_modules/js-yaml/bin/js-yaml.js');
            function readFile(filename, encoding, callback) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3388249, arguments.callee, this, arguments);
                            arguments = J$.N(3388257, 'arguments', arguments, true, false, false);
                            filename = J$.N(3388265, 'filename', filename, true, false, false);
                            encoding = J$.N(3388273, 'encoding', encoding, true, false, false);
                            callback = J$.N(3388281, 'callback', callback, true, false, false);
                            J$.N(3388289, 'chunks', chunks, false, false, false);
                            if (J$.C(170656, J$.B(369682, '===', J$.G(3387961, J$.R(3387953, 'options', options, false, true), 'file'), J$.T(3387969, '-', 21, false)))) {
                                var chunks = J$.W(3387985, 'chunks', J$.T(3387977, [], 10, false), chunks, false, false);
                                J$.M(3388073, J$.G(3388001, J$.I(typeof process === 'undefined' ? process = J$.R(3387993, 'process', undefined, true, true) : process = J$.R(3387993, 'process', process, true, true)), 'stdin'), 'on', false)(J$.T(3388009, 'data', 21, false), J$.T(3388065, function (chunk) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(3388041, arguments.callee, this, arguments);
                                                arguments = J$.N(3388049, 'arguments', arguments, true, false, false);
                                                chunk = J$.N(3388057, 'chunk', chunk, true, false, false);
                                                J$.M(3388033, J$.R(3388017, 'chunks', chunks, false, false), 'push', false)(J$.R(3388025, 'chunk', chunk, false, false));
                                            } catch (J$e) {
                                                J$.Ex(3389313, J$e);
                                            } finally {
                                                if (J$.Fr(3389321))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                                J$.M(3388201, J$.G(3388089, J$.I(typeof process === 'undefined' ? process = J$.R(3388081, 'process', undefined, true, true) : process = J$.R(3388081, 'process', process, true, true)), 'stdin'), 'on', false)(J$.T(3388097, 'end', 21, false), J$.T(3388193, function () {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(3388177, arguments.callee, this, arguments);
                                                arguments = J$.N(3388185, 'arguments', arguments, true, false, false);
                                                return J$.Rt(3388169, J$.F(3388161, J$.R(3388105, 'callback', callback, false, false), false)(J$.T(3388113, null, 25, false), J$.M(3388153, J$.M(3388137, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(3388121, 'Buffer', undefined, true, true) : Buffer = J$.R(3388121, 'Buffer', Buffer, true, true)), 'concat', false)(J$.R(3388129, 'chunks', chunks, false, false)), 'toString', false)(J$.R(3388145, 'encoding', encoding, false, false))));
                                            } catch (J$e) {
                                                J$.Ex(3389329, J$e);
                                            } finally {
                                                if (J$.Fr(3389337))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            } else {
                                J$.M(3388241, J$.R(3388209, 'fs', fs, false, true), 'readFile', false)(J$.R(3388217, 'filename', filename, false, false), J$.R(3388225, 'encoding', encoding, false, false), J$.R(3388233, 'callback', callback, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3389345, J$e);
                        } finally {
                            if (J$.Fr(3389353))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3389257, 'fs', fs, false, false, false);
            J$.N(3389265, 'argparse', argparse, false, false, false);
            J$.N(3389273, 'yaml', yaml, false, false, false);
            J$.N(3389281, 'cli', cli, false, false, false);
            J$.N(3389289, 'options', options, false, false, false);
            readFile = J$.N(3389305, 'readFile', J$.T(3389297, readFile, 12, false), true, false, false);
            J$.T(3387465, 'use strict', 21, false);
            var fs = J$.W(3387497, 'fs', J$.F(3387489, J$.I(typeof require === 'undefined' ? require = J$.R(3387473, 'require', undefined, true, true) : require = J$.R(3387473, 'require', require, true, true)), false)(J$.T(3387481, 'fs', 21, false)), fs, false, true);
            var argparse = J$.W(3387529, 'argparse', J$.F(3387521, J$.I(typeof require === 'undefined' ? require = J$.R(3387505, 'require', undefined, true, true) : require = J$.R(3387505, 'require', require, true, true)), false)(J$.T(3387513, 'argparse', 21, false)), argparse, false, true);
            var yaml = J$.W(3387561, 'yaml', J$.F(3387553, J$.I(typeof require === 'undefined' ? require = J$.R(3387537, 'require', undefined, true, true) : require = J$.R(3387537, 'require', require, true, true)), false)(J$.T(3387545, '..', 21, false)), yaml, false, true);
            var cli = J$.W(3387641, 'cli', J$.M(3387633, J$.R(3387569, 'argparse', argparse, false, true), 'ArgumentParser', true)(J$.T(3387625, {
                prog: J$.T(3387577, 'js-yaml', 21, false),
                version: J$.G(3387609, J$.F(3387601, J$.I(typeof require === 'undefined' ? require = J$.R(3387585, 'require', undefined, true, true) : require = J$.R(3387585, 'require', require, true, true)), false)(J$.T(3387593, '../package.json', 21, false)), 'version'),
                addHelp: J$.T(3387617, true, 23, false)
            }, 11, false)), cli, false, true);
            J$.M(3387705, J$.R(3387649, 'cli', cli, false, true), 'addArgument', false)(J$.T(3387673, [
                J$.T(3387657, '-c', 21, false),
                J$.T(3387665, '--compact', 21, false)
            ], 10, false), J$.T(3387697, {
                help: J$.T(3387681, 'Display errors in compact mode', 21, false),
                action: J$.T(3387689, 'storeTrue', 21, false)
            }, 11, false));
            J$.M(3387793, J$.R(3387713, 'cli', cli, false, true), 'addArgument', false)(J$.T(3387737, [
                J$.T(3387721, '-j', 21, false),
                J$.T(3387729, '--to-json', 21, false)
            ], 10, false), J$.T(3387785, {
                help: J$.G(3387761, J$.G(3387753, J$.R(3387745, 'argparse', argparse, false, true), 'Const'), 'SUPPRESS'),
                dest: J$.T(3387769, 'json', 21, false),
                action: J$.T(3387777, 'storeTrue', 21, false)
            }, 11, false));
            J$.M(3387857, J$.R(3387801, 'cli', cli, false, true), 'addArgument', false)(J$.T(3387825, [
                J$.T(3387809, '-t', 21, false),
                J$.T(3387817, '--trace', 21, false)
            ], 10, false), J$.T(3387849, {
                help: J$.T(3387833, 'Show stack trace on error', 21, false),
                action: J$.T(3387841, 'storeTrue', 21, false)
            }, 11, false));
            J$.M(3387921, J$.R(3387865, 'cli', cli, false, true), 'addArgument', false)(J$.T(3387881, [J$.T(3387873, 'file', 21, false)], 10, false), J$.T(3387913, {
                help: J$.T(3387889, 'File to read, utf-8 encoded without BOM', 21, false),
                nargs: J$.T(3387897, '?', 21, false),
                defaultValue: J$.T(3387905, '-', 21, false)
            }, 11, false));
            var options = J$.W(3387945, 'options', J$.M(3387937, J$.R(3387929, 'cli', cli, false, true), 'parseArgs', false)(), options, false, true);
            J$.F(3389241, J$.R(3388297, 'readFile', readFile, false, true), false)(J$.G(3388313, J$.R(3388305, 'options', options, false, true), 'file'), J$.T(3388321, 'utf8', 21, false), J$.T(3389233, function (error, input) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3389185, arguments.callee, this, arguments);
                            arguments = J$.N(3389193, 'arguments', arguments, true, false, false);
                            error = J$.N(3389201, 'error', error, true, false, false);
                            input = J$.N(3389209, 'input', input, true, false, false);
                            J$.N(3389217, 'output', output, false, false, false);
                            J$.N(3389225, 'isYaml', isYaml, false, false, false);
                            var output, isYaml;
                            if (J$.C(170696, J$.R(3388329, 'error', error, false, false))) {
                                if (J$.C(170664, J$.B(369690, '===', J$.G(3388345, J$.R(3388337, 'error', error, false, false), 'code'), J$.T(3388353, 'ENOENT', 21, false)))) {
                                    J$.M(3388393, J$.I(typeof console === 'undefined' ? console = J$.R(3388361, 'console', undefined, true, true) : console = J$.R(3388361, 'console', console, true, true)), 'error', false)(J$.B(369698, '+', J$.T(3388369, 'File not found: ', 21, false), J$.G(3388385, J$.R(3388377, 'options', options, false, true), 'file')));
                                    J$.M(3388417, J$.I(typeof process === 'undefined' ? process = J$.R(3388401, 'process', undefined, true, true) : process = J$.R(3388401, 'process', process, true, true)), 'exit', false)(J$.T(3388409, 2, 22, false));
                                }
                                J$.M(3388505, J$.I(typeof console === 'undefined' ? console = J$.R(3388425, 'console', undefined, true, true) : console = J$.R(3388425, 'console', console, true, true)), 'error', false)(J$.C(170688, J$.C(170680, J$.C(170672, J$.G(3388441, J$.R(3388433, 'options', options, false, true), 'trace')) ? J$.G(3388457, J$.R(3388449, 'error', error, false, false), 'stack') : J$._()) ? J$._() : J$.G(3388473, J$.R(3388465, 'error', error, false, false), 'message')) ? J$._() : J$.F(3388497, J$.I(typeof String === 'undefined' ? String = J$.R(3388481, 'String', undefined, true, true) : String = J$.R(3388481, 'String', String, true, true)), false)(J$.R(3388489, 'error', error, false, false)));
                                J$.M(3388529, J$.I(typeof process === 'undefined' ? process = J$.R(3388513, 'process', undefined, true, true) : process = J$.R(3388513, 'process', process, true, true)), 'exit', false)(J$.T(3388521, 1, 22, false));
                            }
                            try {
                                output = J$.W(3388561, 'output', J$.M(3388553, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(3388537, 'JSON', undefined, true, true) : JSON = J$.R(3388537, 'JSON', JSON, true, true)), 'parse', false)(J$.R(3388545, 'input', input, false, false)), output, false, false);
                                isYaml = J$.W(3388577, 'isYaml', J$.T(3388569, false, 23, false), isYaml, false, false);
                            } catch (err) {
                                J$.N(3389073, 'err', err, false, false, true);
                                if (J$.C(170760, J$.B(369706, 'instanceof', J$.R(3388585, 'err', err, false, false), J$.I(typeof SyntaxError === 'undefined' ? SyntaxError = J$.R(3388593, 'SyntaxError', undefined, true, true) : SyntaxError = J$.R(3388593, 'SyntaxError', SyntaxError, true, true))))) {
                                    try {
                                        output = J$.W(3388609, 'output', J$.T(3388601, [], 10, false), output, false, false);
                                        J$.M(3388697, J$.R(3388617, 'yaml', yaml, false, true), 'loadAll', false)(J$.R(3388625, 'input', input, false, false), J$.T(3388681, function (doc) {
                                            jalangiLabel3:
                                                while (true) {
                                                    try {
                                                        J$.Fe(3388657, arguments.callee, this, arguments);
                                                        arguments = J$.N(3388665, 'arguments', arguments, true, false, false);
                                                        doc = J$.N(3388673, 'doc', doc, true, false, false);
                                                        J$.M(3388649, J$.R(3388633, 'output', output, false, false), 'push', false)(J$.R(3388641, 'doc', doc, false, false));
                                                    } catch (J$e) {
                                                        J$.Ex(3389361, J$e);
                                                    } finally {
                                                        if (J$.Fr(3389369))
                                                            continue jalangiLabel3;
                                                        else
                                                            return J$.Ra();
                                                    }
                                                }
                                        }, 12, false), J$.T(3388689, {}, 11, false));
                                        isYaml = J$.W(3388713, 'isYaml', J$.T(3388705, true, 23, false), isYaml, false, false);
                                        if (J$.C(170712, J$.B(369714, '===', J$.G(3388729, J$.R(3388721, 'output', output, false, false), 'length'), J$.T(3388737, 0, 22, false))))
                                            output = J$.W(3388753, 'output', J$.T(3388745, null, 25, false), output, false, false);
                                        else if (J$.C(170704, J$.B(369722, '===', J$.G(3388769, J$.R(3388761, 'output', output, false, false), 'length'), J$.T(3388777, 1, 22, false))))
                                            output = J$.W(3388809, 'output', J$.G(3388801, J$.R(3388785, 'output', output, false, false), J$.T(3388793, 0, 22, false)), output, false, false);
                                    } catch (e) {
                                        J$.N(3388953, 'e', e, false, false, true);
                                        if (J$.C(170728, J$.C(170720, J$.G(3388825, J$.R(3388817, 'options', options, false, true), 'trace')) ? J$.G(3388841, J$.R(3388833, 'err', err, false, false), 'stack') : J$._()))
                                            J$.M(3388873, J$.I(typeof console === 'undefined' ? console = J$.R(3388849, 'console', undefined, true, true) : console = J$.R(3388849, 'console', console, true, true)), 'error', false)(J$.G(3388865, J$.R(3388857, 'e', e, false, false), 'stack'));
                                        else
                                            J$.M(3388921, J$.I(typeof console === 'undefined' ? console = J$.R(3388881, 'console', undefined, true, true) : console = J$.R(3388881, 'console', console, true, true)), 'error', false)(J$.M(3388913, J$.R(3388889, 'e', e, false, false), 'toString', false)(J$.G(3388905, J$.R(3388897, 'options', options, false, true), 'compact')));
                                        J$.M(3388945, J$.I(typeof process === 'undefined' ? process = J$.R(3388929, 'process', undefined, true, true) : process = J$.R(3388929, 'process', process, true, true)), 'exit', false)(J$.T(3388937, 1, 22, false));
                                    }
                                } else {
                                    J$.M(3389041, J$.I(typeof console === 'undefined' ? console = J$.R(3388961, 'console', undefined, true, true) : console = J$.R(3388961, 'console', console, true, true)), 'error', false)(J$.C(170752, J$.C(170744, J$.C(170736, J$.G(3388977, J$.R(3388969, 'options', options, false, true), 'trace')) ? J$.G(3388993, J$.R(3388985, 'err', err, false, false), 'stack') : J$._()) ? J$._() : J$.G(3389009, J$.R(3389001, 'err', err, false, false), 'message')) ? J$._() : J$.F(3389033, J$.I(typeof String === 'undefined' ? String = J$.R(3389017, 'String', undefined, true, true) : String = J$.R(3389017, 'String', String, true, true)), false)(J$.R(3389025, 'err', err, false, false)));
                                    J$.M(3389065, J$.I(typeof process === 'undefined' ? process = J$.R(3389049, 'process', undefined, true, true) : process = J$.R(3389049, 'process', process, true, true)), 'exit', false)(J$.T(3389057, 1, 22, false));
                                }
                            }
                            if (J$.C(170768, J$.R(3389081, 'isYaml', isYaml, false, false)))
                                J$.M(3389137, J$.I(typeof console === 'undefined' ? console = J$.R(3389089, 'console', undefined, true, true) : console = J$.R(3389089, 'console', console, true, true)), 'log', false)(J$.M(3389129, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(3389097, 'JSON', undefined, true, true) : JSON = J$.R(3389097, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(3389105, 'output', output, false, false), J$.T(3389113, null, 25, false), J$.T(3389121, '  ', 21, false)));
                            else
                                J$.M(3389177, J$.I(typeof console === 'undefined' ? console = J$.R(3389145, 'console', undefined, true, true) : console = J$.R(3389145, 'console', console, true, true)), 'log', false)(J$.M(3389169, J$.R(3389153, 'yaml', yaml, false, true), 'dump', false)(J$.R(3389161, 'output', output, false, false)));
                        } catch (J$e) {
                            J$.Ex(3389377, J$e);
                        } finally {
                            if (J$.Fr(3389385))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3389393, J$e);
        } finally {
            if (J$.Sr(3389401))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

