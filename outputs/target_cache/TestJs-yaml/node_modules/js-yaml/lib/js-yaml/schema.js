J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(3595185, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema.js');
            function compileList(schema, name, result) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3593737, arguments.callee, this, arguments);
                            arguments = J$.N(3593745, 'arguments', arguments, true, false, false);
                            schema = J$.N(3593753, 'schema', schema, true, false, false);
                            name = J$.N(3593761, 'name', name, true, false, false);
                            result = J$.N(3593769, 'result', result, true, false, false);
                            J$.N(3593777, 'exclude', exclude, false, false, false);
                            var exclude = J$.W(3593289, 'exclude', J$.T(3593281, [], 10, false), exclude, false, false);
                            J$.M(3593393, J$.G(3593305, J$.R(3593297, 'schema', schema, false, false), 'include'), 'forEach', false)(J$.T(3593385, function (includedSchema) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3593361, arguments.callee, this, arguments);
                                            arguments = J$.N(3593369, 'arguments', arguments, true, false, false);
                                            includedSchema = J$.N(3593377, 'includedSchema', includedSchema, true, false, false);
                                            result = J$.W(3593353, 'result', J$.F(3593345, J$.R(3593313, 'compileList', compileList, false, true), false)(J$.R(3593321, 'includedSchema', includedSchema, false, false), J$.R(3593329, 'name', name, false, false), J$.R(3593337, 'result', result, false, false)), result, false, false);
                                        } catch (J$e) {
                                            J$.Ex(3595265, J$e);
                                        } finally {
                                            if (J$.Fr(3595273))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3593625, J$.G(3593417, J$.R(3593401, 'schema', schema, false, false), J$.R(3593409, 'name', name, false, false)), 'forEach', false)(J$.T(3593617, function (currentType) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(3593593, arguments.callee, this, arguments);
                                            arguments = J$.N(3593601, 'arguments', arguments, true, false, false);
                                            currentType = J$.N(3593609, 'currentType', currentType, true, false, false);
                                            J$.M(3593561, J$.R(3593425, 'result', result, false, false), 'forEach', false)(J$.T(3593553, function (previousType, previousIndex) {
                                                jalangiLabel1:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3593521, arguments.callee, this, arguments);
                                                            arguments = J$.N(3593529, 'arguments', arguments, true, false, false);
                                                            previousType = J$.N(3593537, 'previousType', previousType, true, false, false);
                                                            previousIndex = J$.N(3593545, 'previousIndex', previousIndex, true, false, false);
                                                            if (J$.C(189016, J$.C(189008, J$.B(395354, '===', J$.G(3593441, J$.R(3593433, 'previousType', previousType, false, false), 'tag'), J$.G(3593457, J$.R(3593449, 'currentType', currentType, false, false), 'tag'))) ? J$.B(395362, '===', J$.G(3593473, J$.R(3593465, 'previousType', previousType, false, false), 'kind'), J$.G(3593489, J$.R(3593481, 'currentType', currentType, false, false), 'kind')) : J$._())) {
                                                                J$.M(3593513, J$.R(3593497, 'exclude', exclude, false, false), 'push', false)(J$.R(3593505, 'previousIndex', previousIndex, false, false));
                                                            }
                                                        } catch (J$e) {
                                                            J$.Ex(3595281, J$e);
                                                        } finally {
                                                            if (J$.Fr(3595289))
                                                                continue jalangiLabel1;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(3593585, J$.R(3593569, 'result', result, false, false), 'push', false)(J$.R(3593577, 'currentType', currentType, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3595297, J$e);
                                        } finally {
                                            if (J$.Fr(3595305))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(3593729, J$.M(3593721, J$.R(3593633, 'result', result, false, false), 'filter', false)(J$.T(3593713, function (type, index) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3593681, arguments.callee, this, arguments);
                                            arguments = J$.N(3593689, 'arguments', arguments, true, false, false);
                                            type = J$.N(3593697, 'type', type, true, false, false);
                                            index = J$.N(3593705, 'index', index, true, false, false);
                                            return J$.Rt(3593673, J$.B(395378, '===', J$.M(3593657, J$.R(3593641, 'exclude', exclude, false, false), 'indexOf', false)(J$.R(3593649, 'index', index, false, false)), J$.U(395370, '-', J$.T(3593665, 1, 22, false))));
                                        } catch (J$e) {
                                            J$.Ex(3595313, J$e);
                                        } finally {
                                            if (J$.Fr(3595321))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(3595329, J$e);
                        } finally {
                            if (J$.Fr(3595337))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileMap() {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3594105, arguments.callee, this, arguments);
                            function collectType(type) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(3593945, arguments.callee, this, arguments);
                                            arguments = J$.N(3593953, 'arguments', arguments, true, false, false);
                                            type = J$.N(3593961, 'type', type, true, false, false);
                                            J$.P(3593937, J$.G(3593857, J$.R(3593833, 'result', result, false, false), J$.G(3593849, J$.R(3593841, 'type', type, false, false), 'kind')), J$.G(3593873, J$.R(3593865, 'type', type, false, false), 'tag'), J$.P(3593929, J$.G(3593897, J$.R(3593881, 'result', result, false, false), J$.T(3593889, 'fallback', 21, false)), J$.G(3593913, J$.R(3593905, 'type', type, false, false), 'tag'), J$.R(3593921, 'type', type, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3595345, J$e);
                                        } finally {
                                            if (J$.Fr(3595353))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(3594113, 'arguments', arguments, true, false, false);
                            J$.N(3594121, 'result', result, false, false, false);
                            J$.N(3594129, 'index', index, false, false, false);
                            J$.N(3594137, 'length', length, false, false, false);
                            collectType = J$.N(3594153, 'collectType', J$.T(3594145, collectType, 12, false), true, false, false);
                            var result = J$.W(3593825, 'result', J$.T(3593817, {
                                    scalar: J$.T(3593785, {}, 11, false),
                                    sequence: J$.T(3593793, {}, 11, false),
                                    mapping: J$.T(3593801, {}, 11, false),
                                    fallback: J$.T(3593809, {}, 11, false)
                                }, 11, false), result, false, false), index, length;
                            for (index = J$.W(3593977, 'index', J$.T(3593969, 0, 22, false), index, false, false), length = J$.W(3594001, 'length', J$.G(3593993, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3593985, 'arguments', undefined, true, true) : arguments = J$.R(3593985, 'arguments', arguments, true, true)), 'length'), length, false, false); J$.C(189024, J$.B(395386, '<', J$.R(3594009, 'index', index, false, false), J$.R(3594017, 'length', length, false, false))); index = J$.W(3594041, 'index', J$.B(395394, '+', J$.R(3594033, 'index', index, false, false), J$.T(3594025, 1, 22, false)), index, false, false)) {
                                J$.M(3594081, J$.G(3594065, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3594049, 'arguments', undefined, true, true) : arguments = J$.R(3594049, 'arguments', arguments, true, true)), J$.R(3594057, 'index', index, false, false)), 'forEach', false)(J$.R(3594073, 'collectType', collectType, false, false));
                            }
                            return J$.Rt(3594097, J$.R(3594089, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(3595361, J$e);
                        } finally {
                            if (J$.Fr(3595369))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Schema(definition) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3594577, arguments.callee, this, arguments);
                            arguments = J$.N(3594585, 'arguments', arguments, true, false, false);
                            definition = J$.N(3594593, 'definition', definition, true, false, false);
                            J$.P(3594193, J$.R(3594161, 'this', this, false, false), 'include', J$.C(189032, J$.G(3594177, J$.R(3594169, 'definition', definition, false, false), 'include')) ? J$._() : J$.T(3594185, [], 10, false));
                            J$.P(3594233, J$.R(3594201, 'this', this, false, false), 'implicit', J$.C(189040, J$.G(3594217, J$.R(3594209, 'definition', definition, false, false), 'implicit')) ? J$._() : J$.T(3594225, [], 10, false));
                            J$.P(3594273, J$.R(3594241, 'this', this, false, false), 'explicit', J$.C(189048, J$.G(3594257, J$.R(3594249, 'definition', definition, false, false), 'explicit')) ? J$._() : J$.T(3594265, [], 10, false));
                            J$.M(3594393, J$.G(3594289, J$.R(3594281, 'this', this, false, false), 'implicit'), 'forEach', false)(J$.T(3594385, function (type) {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(3594361, arguments.callee, this, arguments);
                                            arguments = J$.N(3594369, 'arguments', arguments, true, false, false);
                                            type = J$.N(3594377, 'type', type, true, false, false);
                                            if (J$.C(189064, J$.C(189056, J$.G(3594305, J$.R(3594297, 'type', type, false, false), 'loadKind')) ? J$.B(395402, '!==', J$.G(3594321, J$.R(3594313, 'type', type, false, false), 'loadKind'), J$.T(3594329, 'scalar', 21, false)) : J$._())) {
                                                throw J$.F(3594353, J$.R(3594337, 'YAMLException', YAMLException, false, true), true)(J$.T(3594345, 'There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.', 21, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(3595377, J$e);
                                        } finally {
                                            if (J$.Fr(3595385))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.P(3594449, J$.R(3594401, 'this', this, false, false), 'compiledImplicit', J$.F(3594441, J$.R(3594409, 'compileList', compileList, false, true), false)(J$.R(3594417, 'this', this, false, false), J$.T(3594425, 'implicit', 21, false), J$.T(3594433, [], 10, false)));
                            J$.P(3594505, J$.R(3594457, 'this', this, false, false), 'compiledExplicit', J$.F(3594497, J$.R(3594465, 'compileList', compileList, false, true), false)(J$.R(3594473, 'this', this, false, false), J$.T(3594481, 'explicit', 21, false), J$.T(3594489, [], 10, false)));
                            J$.P(3594569, J$.R(3594513, 'this', this, false, false), 'compiledTypeMap', J$.F(3594561, J$.R(3594521, 'compileMap', compileMap, false, true), false)(J$.G(3594537, J$.R(3594529, 'this', this, false, false), 'compiledImplicit'), J$.G(3594553, J$.R(3594545, 'this', this, false, false), 'compiledExplicit')));
                        } catch (J$e) {
                            J$.Ex(3595393, J$e);
                        } finally {
                            if (J$.Fr(3595401))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3595193, 'common', common, false, false, false);
            J$.N(3595201, 'YAMLException', YAMLException, false, false, false);
            J$.N(3595209, 'Type', Type, false, false, false);
            compileList = J$.N(3595225, 'compileList', J$.T(3595217, compileList, 12, false), true, false, false);
            compileMap = J$.N(3595241, 'compileMap', J$.T(3595233, compileMap, 12, false), true, false, false);
            Schema = J$.N(3595257, 'Schema', J$.T(3595249, Schema, 12, false), true, false, false);
            J$.T(3593177, 'use strict', 21, false);
            var common = J$.W(3593209, 'common', J$.F(3593201, J$.I(typeof require === 'undefined' ? require = J$.R(3593185, 'require', undefined, true, true) : require = J$.R(3593185, 'require', require, true, true)), false)(J$.T(3593193, './common', 21, false)), common, false, true);
            var YAMLException = J$.W(3593241, 'YAMLException', J$.F(3593233, J$.I(typeof require === 'undefined' ? require = J$.R(3593217, 'require', undefined, true, true) : require = J$.R(3593217, 'require', require, true, true)), false)(J$.T(3593225, './exception', 21, false)), YAMLException, false, true);
            var Type = J$.W(3593273, 'Type', J$.F(3593265, J$.I(typeof require === 'undefined' ? require = J$.R(3593249, 'require', undefined, true, true) : require = J$.R(3593249, 'require', require, true, true)), false)(J$.T(3593257, './type', 21, false)), Type, false, true);
            J$.P(3594617, J$.R(3594601, 'Schema', Schema, false, true), 'DEFAULT', J$.T(3594609, null, 25, false));
            J$.P(3595153, J$.R(3594625, 'Schema', Schema, false, true), 'create', J$.T(3595145, function createSchema() {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(3595113, arguments.callee, this, arguments);
                            arguments = J$.N(3595121, 'arguments', arguments, true, false, false);
                            J$.N(3595129, 'schemas', schemas, false, false, false);
                            J$.N(3595137, 'types', types, false, false, false);
                            var schemas, types;
                            switch (J$.C1(189072, J$.G(3594641, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3594633, 'arguments', undefined, true, true) : arguments = J$.R(3594633, 'arguments', arguments, true, true)), 'length'))) {
                            case J$.C2(189080, J$.T(3594705, 1, 22, false)):
                                schemas = J$.W(3594665, 'schemas', J$.G(3594657, J$.R(3594649, 'Schema', Schema, false, true), 'DEFAULT'), schemas, false, false);
                                types = J$.W(3594697, 'types', J$.G(3594689, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3594673, 'arguments', undefined, true, true) : arguments = J$.R(3594673, 'arguments', arguments, true, true)), J$.T(3594681, 0, 22, false)), types, false, false);
                                break;
                            case J$.C2(189088, J$.T(3594777, 2, 22, false)):
                                schemas = J$.W(3594737, 'schemas', J$.G(3594729, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3594713, 'arguments', undefined, true, true) : arguments = J$.R(3594713, 'arguments', arguments, true, true)), J$.T(3594721, 0, 22, false)), schemas, false, false);
                                types = J$.W(3594769, 'types', J$.G(3594761, J$.I(typeof arguments === 'undefined' ? arguments = J$.R(3594745, 'arguments', undefined, true, true) : arguments = J$.R(3594745, 'arguments', arguments, true, true)), J$.T(3594753, 1, 22, false)), types, false, false);
                                break;
                            default:
                                throw J$.F(3594801, J$.R(3594785, 'YAMLException', YAMLException, false, true), true)(J$.T(3594793, 'Wrong number of arguments for Schema.create function', 21, false));
                            }
                            schemas = J$.W(3594833, 'schemas', J$.M(3594825, J$.R(3594809, 'common', common, false, true), 'toArray', false)(J$.R(3594817, 'schemas', schemas, false, false)), schemas, false, false);
                            types = J$.W(3594865, 'types', J$.M(3594857, J$.R(3594841, 'common', common, false, true), 'toArray', false)(J$.R(3594849, 'types', types, false, false)), types, false, false);
                            if (J$.C(189096, J$.U(395418, '!', J$.M(3594937, J$.R(3594873, 'schemas', schemas, false, false), 'every', false)(J$.T(3594929, function (schema) {
                                    jalangiLabel9:
                                        while (true) {
                                            try {
                                                J$.Fe(3594905, arguments.callee, this, arguments);
                                                arguments = J$.N(3594913, 'arguments', arguments, true, false, false);
                                                schema = J$.N(3594921, 'schema', schema, true, false, false);
                                                return J$.Rt(3594897, J$.B(395410, 'instanceof', J$.R(3594881, 'schema', schema, false, false), J$.R(3594889, 'Schema', Schema, false, true)));
                                            } catch (J$e) {
                                                J$.Ex(3595409, J$e);
                                            } finally {
                                                if (J$.Fr(3595417))
                                                    continue jalangiLabel9;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false))))) {
                                throw J$.F(3594961, J$.R(3594945, 'YAMLException', YAMLException, false, true), true)(J$.T(3594953, 'Specified list of super schemas (or a single Schema object) contains a non-Schema object.', 21, false));
                            }
                            if (J$.C(189104, J$.U(395434, '!', J$.M(3595033, J$.R(3594969, 'types', types, false, false), 'every', false)(J$.T(3595025, function (type) {
                                    jalangiLabel10:
                                        while (true) {
                                            try {
                                                J$.Fe(3595001, arguments.callee, this, arguments);
                                                arguments = J$.N(3595009, 'arguments', arguments, true, false, false);
                                                type = J$.N(3595017, 'type', type, true, false, false);
                                                return J$.Rt(3594993, J$.B(395426, 'instanceof', J$.R(3594977, 'type', type, false, false), J$.R(3594985, 'Type', Type, false, true)));
                                            } catch (J$e) {
                                                J$.Ex(3595425, J$e);
                                            } finally {
                                                if (J$.Fr(3595433))
                                                    continue jalangiLabel10;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false))))) {
                                throw J$.F(3595057, J$.R(3595041, 'YAMLException', YAMLException, false, true), true)(J$.T(3595049, 'Specified list of YAML types (or a single Type object) contains a non-Type object.', 21, false));
                            }
                            return J$.Rt(3595105, J$.F(3595097, J$.R(3595065, 'Schema', Schema, false, true), true)(J$.T(3595089, {
                                include: J$.R(3595073, 'schemas', schemas, false, false),
                                explicit: J$.R(3595081, 'types', types, false, false)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(3595441, J$e);
                        } finally {
                            if (J$.Fr(3595449))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3595177, J$.I(typeof module === 'undefined' ? module = J$.R(3595161, 'module', undefined, true, true) : module = J$.R(3595161, 'module', module, true, true)), 'exports', J$.R(3595169, 'Schema', Schema, false, true));
        } catch (J$e) {
            J$.Ex(3595457, J$e);
        } finally {
            if (J$.Sr(3595465))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

