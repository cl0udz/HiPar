J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(3600961, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/float.js');
            function resolveYamlFloat(data) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3599489, arguments.callee, this, arguments);
                            arguments = J$.N(3599497, 'arguments', arguments, true, false, false);
                            data = J$.N(3599505, 'data', data, true, false, false);
                            if (J$.C(189368, J$.B(396306, '===', J$.R(3599353, 'data', data, false, false), J$.T(3599361, null, 25, false))))
                                return J$.Rt(3599377, J$.T(3599369, false, 23, false));
                            if (J$.C(189384, J$.C(189376, J$.U(396314, '!', J$.M(3599401, J$.R(3599385, 'YAML_FLOAT_PATTERN', YAML_FLOAT_PATTERN, false, true), 'test', false)(J$.R(3599393, 'data', data, false, false)))) ? J$._() : J$.B(396330, '===', J$.G(3599441, J$.R(3599409, 'data', data, false, false), J$.B(396322, '-', J$.G(3599425, J$.R(3599417, 'data', data, false, false), 'length'), J$.T(3599433, 1, 22, false))), J$.T(3599449, '_', 21, false)))) {
                                return J$.Rt(3599465, J$.T(3599457, false, 23, false));
                            }
                            return J$.Rt(3599481, J$.T(3599473, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(3601065, J$e);
                        } finally {
                            if (J$.Fr(3601073))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructYamlFloat(data) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3600169, arguments.callee, this, arguments);
                            arguments = J$.N(3600177, 'arguments', arguments, true, false, false);
                            data = J$.N(3600185, 'data', data, true, false, false);
                            J$.N(3600193, 'value', value, false, false, false);
                            J$.N(3600201, 'sign', sign, false, false, false);
                            J$.N(3600209, 'base', base, false, false, false);
                            J$.N(3600217, 'digits', digits, false, false, false);
                            var value, sign, base, digits;
                            value = J$.W(3599553, 'value', J$.M(3599545, J$.M(3599537, J$.R(3599513, 'data', data, false, false), 'replace', false)(J$.T(3599521, /_/g, 14, false), J$.T(3599529, '', 21, false)), 'toLowerCase', false)(), value, false, false);
                            sign = J$.W(3599609, 'sign', J$.C(189392, J$.B(396338, '===', J$.G(3599577, J$.R(3599561, 'value', value, false, false), J$.T(3599569, 0, 22, false)), J$.T(3599585, '-', 21, false))) ? J$.U(396346, '-', J$.T(3599593, 1, 22, false)) : J$.T(3599601, 1, 22, false), sign, false, false);
                            digits = J$.W(3599625, 'digits', J$.T(3599617, [], 10, false), digits, false, false);
                            if (J$.C(189400, J$.B(396354, '>=', J$.M(3599665, J$.T(3599633, '+-', 21, false), 'indexOf', false)(J$.G(3599657, J$.R(3599641, 'value', value, false, false), J$.T(3599649, 0, 22, false))), J$.T(3599673, 0, 22, false)))) {
                                value = J$.W(3599705, 'value', J$.M(3599697, J$.R(3599681, 'value', value, false, false), 'slice', false)(J$.T(3599689, 1, 22, false)), value, false, false);
                            }
                            if (J$.C(189432, J$.B(396362, '===', J$.R(3599713, 'value', value, false, false), J$.T(3599721, '.inf', 21, false)))) {
                                return J$.Rt(3599777, J$.C(189408, J$.B(396370, '===', J$.R(3599729, 'sign', sign, false, false), J$.T(3599737, 1, 22, false))) ? J$.G(3599753, J$.I(typeof Number === 'undefined' ? Number = J$.R(3599745, 'Number', undefined, true, true) : Number = J$.R(3599745, 'Number', Number, true, true)), 'POSITIVE_INFINITY') : J$.G(3599769, J$.I(typeof Number === 'undefined' ? Number = J$.R(3599761, 'Number', undefined, true, true) : Number = J$.R(3599761, 'Number', Number, true, true)), 'NEGATIVE_INFINITY'));
                            } else if (J$.C(189424, J$.B(396378, '===', J$.R(3599785, 'value', value, false, false), J$.T(3599793, '.nan', 21, false)))) {
                                return J$.Rt(3599809, J$.T(3599801, NaN, 22, false));
                            } else if (J$.C(189416, J$.B(396386, '>=', J$.M(3599833, J$.R(3599817, 'value', value, false, false), 'indexOf', false)(J$.T(3599825, ':', 21, false)), J$.T(3599841, 0, 22, false)))) {
                                J$.M(3599953, J$.M(3599865, J$.R(3599849, 'value', value, false, false), 'split', false)(J$.T(3599857, ':', 21, false)), 'forEach', false)(J$.T(3599945, function (v) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(3599921, arguments.callee, this, arguments);
                                                arguments = J$.N(3599929, 'arguments', arguments, true, false, false);
                                                v = J$.N(3599937, 'v', v, true, false, false);
                                                J$.M(3599913, J$.R(3599873, 'digits', digits, false, false), 'unshift', false)(J$.F(3599905, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(3599881, 'parseFloat', undefined, true, true) : parseFloat = J$.R(3599881, 'parseFloat', parseFloat, true, true)), false)(J$.R(3599889, 'v', v, false, false), J$.T(3599897, 10, 22, false)));
                                            } catch (J$e) {
                                                J$.Ex(3601081, J$e);
                                            } finally {
                                                if (J$.Fr(3601089))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                                value = J$.W(3599969, 'value', J$.T(3599961, 0, 22, false), value, false, false);
                                base = J$.W(3599985, 'base', J$.T(3599977, 1, 22, false), base, false, false);
                                J$.M(3600089, J$.R(3599993, 'digits', digits, false, false), 'forEach', false)(J$.T(3600081, function (d) {
                                    jalangiLabel2:
                                        while (true) {
                                            try {
                                                J$.Fe(3600057, arguments.callee, this, arguments);
                                                arguments = J$.N(3600065, 'arguments', arguments, true, false, false);
                                                d = J$.N(3600073, 'd', d, true, false, false);
                                                value = J$.W(3600025, 'value', J$.B(396402, '+', J$.R(3600017, 'value', value, false, false), J$.B(396394, '*', J$.R(3600001, 'd', d, false, false), J$.R(3600009, 'base', base, false, false))), value, false, false);
                                                base = J$.W(3600049, 'base', J$.B(396410, '*', J$.R(3600041, 'base', base, false, false), J$.T(3600033, 60, 22, false)), base, false, false);
                                            } catch (J$e) {
                                                J$.Ex(3601097, J$e);
                                            } finally {
                                                if (J$.Fr(3601105))
                                                    continue jalangiLabel2;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                                return J$.Rt(3600113, J$.B(396418, '*', J$.R(3600097, 'sign', sign, false, false), J$.R(3600105, 'value', value, false, false)));
                            }
                            return J$.Rt(3600161, J$.B(396426, '*', J$.R(3600121, 'sign', sign, false, false), J$.F(3600153, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(3600129, 'parseFloat', undefined, true, true) : parseFloat = J$.R(3600129, 'parseFloat', parseFloat, true, true)), false)(J$.R(3600137, 'value', value, false, false), J$.T(3600145, 10, 22, false))));
                        } catch (J$e) {
                            J$.Ex(3601113, J$e);
                        } finally {
                            if (J$.Fr(3601121))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function representYamlFloat(object, style) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3600697, arguments.callee, this, arguments);
                            arguments = J$.N(3600705, 'arguments', arguments, true, false, false);
                            object = J$.N(3600713, 'object', object, true, false, false);
                            style = J$.N(3600721, 'style', style, true, false, false);
                            J$.N(3600729, 'res', res, false, false, false);
                            var res;
                            if (J$.C(189560, J$.F(3600257, J$.I(typeof isNaN === 'undefined' ? isNaN = J$.R(3600241, 'isNaN', undefined, true, true) : isNaN = J$.R(3600241, 'isNaN', isNaN, true, true)), false)(J$.R(3600249, 'object', object, false, false)))) {
                                switch (J$.C1(189440, J$.R(3600265, 'style', style, false, false))) {
                                case J$.C2(189448, J$.T(3600289, 'lowercase', 21, false)):
                                    return J$.Rt(3600281, J$.T(3600273, '.nan', 21, false));
                                case J$.C2(189456, J$.T(3600313, 'uppercase', 21, false)):
                                    return J$.Rt(3600305, J$.T(3600297, '.NAN', 21, false));
                                case J$.C2(189464, J$.T(3600337, 'camelcase', 21, false)):
                                    return J$.Rt(3600329, J$.T(3600321, '.NaN', 21, false));
                                }
                            } else if (J$.C(189552, J$.B(396434, '===', J$.G(3600353, J$.I(typeof Number === 'undefined' ? Number = J$.R(3600345, 'Number', undefined, true, true) : Number = J$.R(3600345, 'Number', Number, true, true)), 'POSITIVE_INFINITY'), J$.R(3600361, 'object', object, false, false)))) {
                                switch (J$.C1(189472, J$.R(3600369, 'style', style, false, false))) {
                                case J$.C2(189480, J$.T(3600393, 'lowercase', 21, false)):
                                    return J$.Rt(3600385, J$.T(3600377, '.inf', 21, false));
                                case J$.C2(189488, J$.T(3600417, 'uppercase', 21, false)):
                                    return J$.Rt(3600409, J$.T(3600401, '.INF', 21, false));
                                case J$.C2(189496, J$.T(3600441, 'camelcase', 21, false)):
                                    return J$.Rt(3600433, J$.T(3600425, '.Inf', 21, false));
                                }
                            } else if (J$.C(189544, J$.B(396442, '===', J$.G(3600457, J$.I(typeof Number === 'undefined' ? Number = J$.R(3600449, 'Number', undefined, true, true) : Number = J$.R(3600449, 'Number', Number, true, true)), 'NEGATIVE_INFINITY'), J$.R(3600465, 'object', object, false, false)))) {
                                switch (J$.C1(189504, J$.R(3600473, 'style', style, false, false))) {
                                case J$.C2(189512, J$.T(3600497, 'lowercase', 21, false)):
                                    return J$.Rt(3600489, J$.T(3600481, '-.inf', 21, false));
                                case J$.C2(189520, J$.T(3600521, 'uppercase', 21, false)):
                                    return J$.Rt(3600513, J$.T(3600505, '-.INF', 21, false));
                                case J$.C2(189528, J$.T(3600545, 'camelcase', 21, false)):
                                    return J$.Rt(3600537, J$.T(3600529, '-.Inf', 21, false));
                                }
                            } else if (J$.C(189536, J$.M(3600569, J$.R(3600553, 'common', common, false, true), 'isNegativeZero', false)(J$.R(3600561, 'object', object, false, false)))) {
                                return J$.Rt(3600585, J$.T(3600577, '-0.0', 21, false));
                            }
                            res = J$.W(3600617, 'res', J$.M(3600609, J$.R(3600593, 'object', object, false, false), 'toString', false)(J$.T(3600601, 10, 22, false)), res, false, false);
                            return J$.Rt(3600689, J$.C(189568, J$.M(3600641, J$.R(3600625, 'SCIENTIFIC_WITHOUT_DOT', SCIENTIFIC_WITHOUT_DOT, false, true), 'test', false)(J$.R(3600633, 'res', res, false, false))) ? J$.M(3600673, J$.R(3600649, 'res', res, false, false), 'replace', false)(J$.T(3600657, 'e', 21, false), J$.T(3600665, '.e', 21, false)) : J$.R(3600681, 'res', res, false, false));
                        } catch (J$e) {
                            J$.Ex(3601129, J$e);
                        } finally {
                            if (J$.Fr(3601137))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isFloat(object) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3600841, arguments.callee, this, arguments);
                            arguments = J$.N(3600849, 'arguments', arguments, true, false, false);
                            object = J$.N(3600857, 'object', object, true, false, false);
                            return J$.Rt(3600833, J$.C(189584, J$.B(396450, '===', J$.M(3600769, J$.G(3600753, J$.G(3600745, J$.I(typeof Object === 'undefined' ? Object = J$.R(3600737, 'Object', undefined, true, true) : Object = J$.R(3600737, 'Object', Object, true, true)), 'prototype'), 'toString'), 'call', false)(J$.R(3600761, 'object', object, false, false)), J$.T(3600777, '[object Number]', 21, false))) ? J$.C(189576, J$.B(396466, '!==', J$.B(396458, '%', J$.R(3600785, 'object', object, false, false), J$.T(3600793, 1, 22, false)), J$.T(3600801, 0, 22, false))) ? J$._() : J$.M(3600825, J$.R(3600809, 'common', common, false, true), 'isNegativeZero', false)(J$.R(3600817, 'object', object, false, false)) : J$._());
                        } catch (J$e) {
                            J$.Ex(3601145, J$e);
                        } finally {
                            if (J$.Fr(3601153))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3600969, 'common', common, false, false, false);
            J$.N(3600977, 'Type', Type, false, false, false);
            J$.N(3600985, 'YAML_FLOAT_PATTERN', YAML_FLOAT_PATTERN, false, false, false);
            resolveYamlFloat = J$.N(3601001, 'resolveYamlFloat', J$.T(3600993, resolveYamlFloat, 12, false), true, false, false);
            constructYamlFloat = J$.N(3601017, 'constructYamlFloat', J$.T(3601009, constructYamlFloat, 12, false), true, false, false);
            J$.N(3601025, 'SCIENTIFIC_WITHOUT_DOT', SCIENTIFIC_WITHOUT_DOT, false, false, false);
            representYamlFloat = J$.N(3601041, 'representYamlFloat', J$.T(3601033, representYamlFloat, 12, false), true, false, false);
            isFloat = J$.N(3601057, 'isFloat', J$.T(3601049, isFloat, 12, false), true, false, false);
            J$.T(3599217, 'use strict', 21, false);
            var common = J$.W(3599249, 'common', J$.F(3599241, J$.I(typeof require === 'undefined' ? require = J$.R(3599225, 'require', undefined, true, true) : require = J$.R(3599225, 'require', require, true, true)), false)(J$.T(3599233, '../common', 21, false)), common, false, true);
            var Type = J$.W(3599281, 'Type', J$.F(3599273, J$.I(typeof require === 'undefined' ? require = J$.R(3599257, 'require', undefined, true, true) : require = J$.R(3599257, 'require', require, true, true)), false)(J$.T(3599265, '../type', 21, false)), Type, false, true);
            var YAML_FLOAT_PATTERN = J$.W(3599345, 'YAML_FLOAT_PATTERN', J$.F(3599337, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(3599289, 'RegExp', undefined, true, true) : RegExp = J$.R(3599289, 'RegExp', RegExp, true, true)), true)(J$.B(396298, '+', J$.B(396290, '+', J$.B(396282, '+', J$.B(396274, '+', J$.T(3599297, '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?', 21, false), J$.T(3599305, '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?', 21, false)), J$.T(3599313, '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*', 21, false)), J$.T(3599321, '|[-+]?\\.(?:inf|Inf|INF)', 21, false)), J$.T(3599329, '|\\.(?:nan|NaN|NAN))$', 21, false))), YAML_FLOAT_PATTERN, false, true);
            var SCIENTIFIC_WITHOUT_DOT = J$.W(3600233, 'SCIENTIFIC_WITHOUT_DOT', J$.T(3600225, /^[-+]?[0-9]+e/, 14, false), SCIENTIFIC_WITHOUT_DOT, false, true);
            J$.P(3600953, J$.I(typeof module === 'undefined' ? module = J$.R(3600865, 'module', undefined, true, true) : module = J$.R(3600865, 'module', module, true, true)), 'exports', J$.F(3600945, J$.R(3600873, 'Type', Type, false, true), true)(J$.T(3600881, 'tag:yaml.org,2002:float', 21, false), J$.T(3600937, {
                kind: J$.T(3600889, 'scalar', 21, false),
                resolve: J$.R(3600897, 'resolveYamlFloat', resolveYamlFloat, false, true),
                construct: J$.R(3600905, 'constructYamlFloat', constructYamlFloat, false, true),
                predicate: J$.R(3600913, 'isFloat', isFloat, false, true),
                represent: J$.R(3600921, 'representYamlFloat', representYamlFloat, false, true),
                defaultStyle: J$.T(3600929, 'lowercase', 21, false)
            }, 11, false)));
        } catch (J$e) {
            J$.Ex(3601161, J$e);
        } finally {
            if (J$.Sr(3601169))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

