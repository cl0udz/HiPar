J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(3170425, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestJs-yaml/node_modules/argparse/lib/action/append.js');
            J$.N(3170433, 'util', util, false, false, false);
            J$.N(3170441, 'Action', Action, false, false, false);
            J$.N(3170449, 'c', c, false, false, false);
            J$.N(3170457, 'ActionAppend', ActionAppend, false, false, false);
            J$.T(3169841, 'use strict', 21, false);
            var util = J$.W(3169873, 'util', J$.F(3169865, J$.I(typeof require === 'undefined' ? require = J$.R(3169849, 'require', undefined, true, true) : require = J$.R(3169849, 'require', require, true, true)), false)(J$.T(3169857, 'util', 21, false)), util, false, true);
            var Action = J$.W(3169905, 'Action', J$.F(3169897, J$.I(typeof require === 'undefined' ? require = J$.R(3169881, 'require', undefined, true, true) : require = J$.R(3169881, 'require', require, true, true)), false)(J$.T(3169889, '../action', 21, false)), Action, false, true);
            var c = J$.W(3169937, 'c', J$.F(3169929, J$.I(typeof require === 'undefined' ? require = J$.R(3169913, 'require', undefined, true, true) : require = J$.R(3169913, 'require', require, true, true)), false)(J$.T(3169921, '../const', 21, false)), c, false, true);
            var ActionAppend = J$.W(3170185, 'ActionAppend', J$.P(3170177, J$.I(typeof module === 'undefined' ? module = J$.R(3169945, 'module', undefined, true, true) : module = J$.R(3169945, 'module', module, true, true)), 'exports', J$.T(3170169, function ActionAppend(options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3170145, arguments.callee, this, arguments);
                            arguments = J$.N(3170153, 'arguments', arguments, true, false, false);
                            options = J$.N(3170161, 'options', options, true, false, false);
                            options = J$.W(3169969, 'options', J$.C(156968, J$.R(3169953, 'options', options, false, false)) ? J$._() : J$.T(3169961, {}, 11, false), options, false, false);
                            if (J$.C(156976, J$.B(356722, '<=', J$.G(3169985, J$.R(3169977, 'this', this, false, false), 'nargs'), J$.T(3169993, 0, 22, false)))) {
                                throw J$.F(3170033, J$.I(typeof Error === 'undefined' ? Error = J$.R(3170001, 'Error', undefined, true, true) : Error = J$.R(3170001, 'Error', Error, true, true)), true)(J$.B(356738, '+', J$.B(356730, '+', J$.T(3170009, 'nargs for append actions must be > 0; if arg ', 21, false), J$.T(3170017, 'strings are not supplying the value to append, ', 21, false)), J$.T(3170025, 'the append const action may be more appropriate', 21, false)));
                            }
                            if (J$.C(156992, J$.C(156984, J$.U(356754, '!', J$.U(356746, '!', J$.G(3170049, J$.R(3170041, 'this', this, false, false), 'constant')))) ? J$.B(356762, '!==', J$.G(3170065, J$.R(3170057, 'this', this, false, false), 'nargs'), J$.G(3170081, J$.R(3170073, 'c', c, false, true), 'OPTIONAL')) : J$._())) {
                                throw J$.F(3170105, J$.I(typeof Error === 'undefined' ? Error = J$.R(3170089, 'Error', undefined, true, true) : Error = J$.R(3170089, 'Error', Error, true, true)), true)(J$.T(3170097, 'nargs must be OPTIONAL to supply const', 21, false));
                            }
                            J$.M(3170137, J$.R(3170113, 'Action', Action, false, true), 'call', false)(J$.R(3170121, 'this', this, false, false), J$.R(3170129, 'options', options, false, false));
                        } catch (J$e) {
                            J$.Ex(3170465, J$e);
                        } finally {
                            if (J$.Fr(3170473))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false)), ActionAppend, false, true);
            J$.M(3170217, J$.R(3170193, 'util', util, false, true), 'inherits', false)(J$.R(3170201, 'ActionAppend', ActionAppend, false, true), J$.R(3170209, 'Action', Action, false, true));
            J$.P(3170417, J$.G(3170233, J$.R(3170225, 'ActionAppend', ActionAppend, false, true), 'prototype'), 'call', J$.T(3170409, function (parser, namespace, values) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3170361, arguments.callee, this, arguments);
                            arguments = J$.N(3170369, 'arguments', arguments, true, false, false);
                            parser = J$.N(3170377, 'parser', parser, true, false, false);
                            namespace = J$.N(3170385, 'namespace', namespace, true, false, false);
                            values = J$.N(3170393, 'values', values, true, false, false);
                            J$.N(3170401, 'items', items, false, false, false);
                            var items = J$.W(3170289, 'items', J$.M(3170281, J$.C(157000, J$.G(3170265, J$.R(3170241, 'namespace', namespace, false, false), J$.G(3170257, J$.R(3170249, 'this', this, false, false), 'dest'))) ? J$._() : J$.T(3170273, [], 10, false), 'slice', false)(), items, false, false);
                            J$.M(3170313, J$.R(3170297, 'items', items, false, false), 'push', false)(J$.R(3170305, 'values', values, false, false));
                            J$.M(3170353, J$.R(3170321, 'namespace', namespace, false, false), 'set', false)(J$.G(3170337, J$.R(3170329, 'this', this, false, false), 'dest'), J$.R(3170345, 'items', items, false, false));
                        } catch (J$e) {
                            J$.Ex(3170481, J$e);
                        } finally {
                            if (J$.Fr(3170489))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3170497, J$e);
        } finally {
            if (J$.Sr(3170505))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

