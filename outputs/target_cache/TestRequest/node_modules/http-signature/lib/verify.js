J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2840585, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/http-signature/lib/verify.js');
            J$.N(2840593, 'assert', assert, false, false, false);
            J$.N(2840601, 'crypto', crypto, false, false, false);
            J$.N(2840609, 'sshpk', sshpk, false, false, false);
            J$.N(2840617, 'utils', utils, false, false, false);
            J$.N(2840625, 'HASH_ALGOS', HASH_ALGOS, false, false, false);
            J$.N(2840633, 'PK_ALGOS', PK_ALGOS, false, false, false);
            J$.N(2840641, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(2840649, 'HttpSignatureError', HttpSignatureError, false, false, false);
            J$.N(2840657, 'validateAlgorithm', validateAlgorithm, false, false, false);
            J$.T(2838993, 'use strict', 21, false);
            J$.F(2839017, J$.I(typeof require === 'undefined' ? require = J$.R(2839001, 'require', undefined, true, true) : require = J$.R(2839001, 'require', require, true, true)), false)(J$.T(2839009, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(2839041, J$.I(typeof require === 'undefined' ? require = J$.R(2839025, 'require', undefined, true, true) : require = J$.R(2839025, 'require', require, true, true)), false)(J$.T(2839033, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(2839065, J$.I(typeof require === 'undefined' ? require = J$.R(2839049, 'require', undefined, true, true) : require = J$.R(2839049, 'require', require, true, true)), false)(J$.T(2839057, 'core-js/modules/es.regexp.to-string', 21, false));
            var assert = J$.W(2839097, 'assert', J$.F(2839089, J$.I(typeof require === 'undefined' ? require = J$.R(2839073, 'require', undefined, true, true) : require = J$.R(2839073, 'require', require, true, true)), false)(J$.T(2839081, 'assert-plus', 21, false)), assert, false, true);
            var crypto = J$.W(2839129, 'crypto', J$.F(2839121, J$.I(typeof require === 'undefined' ? require = J$.R(2839105, 'require', undefined, true, true) : require = J$.R(2839105, 'require', require, true, true)), false)(J$.T(2839113, 'crypto', 21, false)), crypto, false, true);
            var sshpk = J$.W(2839161, 'sshpk', J$.F(2839153, J$.I(typeof require === 'undefined' ? require = J$.R(2839137, 'require', undefined, true, true) : require = J$.R(2839137, 'require', require, true, true)), false)(J$.T(2839145, 'sshpk', 21, false)), sshpk, false, true);
            var utils = J$.W(2839193, 'utils', J$.F(2839185, J$.I(typeof require === 'undefined' ? require = J$.R(2839169, 'require', undefined, true, true) : require = J$.R(2839169, 'require', require, true, true)), false)(J$.T(2839177, './utils', 21, false)), utils, false, true);
            var HASH_ALGOS = J$.W(2839217, 'HASH_ALGOS', J$.G(2839209, J$.R(2839201, 'utils', utils, false, true), 'HASH_ALGOS'), HASH_ALGOS, false, true);
            var PK_ALGOS = J$.W(2839241, 'PK_ALGOS', J$.G(2839233, J$.R(2839225, 'utils', utils, false, true), 'PK_ALGOS'), PK_ALGOS, false, true);
            var InvalidAlgorithmError = J$.W(2839265, 'InvalidAlgorithmError', J$.G(2839257, J$.R(2839249, 'utils', utils, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var HttpSignatureError = J$.W(2839289, 'HttpSignatureError', J$.G(2839281, J$.R(2839273, 'utils', utils, false, true), 'HttpSignatureError'), HttpSignatureError, false, true);
            var validateAlgorithm = J$.W(2839313, 'validateAlgorithm', J$.G(2839305, J$.R(2839297, 'utils', utils, false, true), 'validateAlgorithm'), validateAlgorithm, false, true);
            J$.P(2840577, J$.I(typeof module === 'undefined' ? module = J$.R(2839321, 'module', undefined, true, true) : module = J$.R(2839321, 'module', module, true, true)), 'exports', J$.T(2840569, {
                verifySignature: J$.T(2839825, function verifySignature(parsedSignature, pubkey) {
                    jalangiLabel0:
                        while (true) {
                            try {
                                J$.Fe(2839777, arguments.callee, this, arguments);
                                arguments = J$.N(2839785, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(2839793, 'parsedSignature', parsedSignature, true, false, false);
                                pubkey = J$.N(2839801, 'pubkey', pubkey, true, false, false);
                                J$.N(2839809, 'alg', alg, false, false, false);
                                J$.N(2839817, 'v', v, false, false, false);
                                J$.M(2839353, J$.R(2839329, 'assert', assert, false, true), 'object', false)(J$.R(2839337, 'parsedSignature', parsedSignature, false, false), J$.T(2839345, 'parsedSignature', 21, false));
                                if (J$.C(137104, J$.C(137096, J$.B(414450, '===', J$.U(414442, 'typeof', J$.R(2839361, 'pubkey', pubkey, false, false)), J$.T(2839369, 'string', 21, false))) ? J$._() : J$.M(2839393, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(2839377, 'Buffer', undefined, true, true) : Buffer = J$.R(2839377, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(2839385, 'pubkey', pubkey, false, false))))
                                    pubkey = J$.W(2839425, 'pubkey', J$.M(2839417, J$.R(2839401, 'sshpk', sshpk, false, true), 'parseKey', false)(J$.R(2839409, 'pubkey', pubkey, false, false)), pubkey, false, false);
                                J$.M(2839505, J$.R(2839433, 'assert', assert, false, true), 'ok', false)(J$.M(2839489, J$.G(2839449, J$.R(2839441, 'sshpk', sshpk, false, true), 'Key'), 'isKey', false)(J$.R(2839457, 'pubkey', pubkey, false, false), J$.T(2839481, [
                                    J$.T(2839465, 1, 22, false),
                                    J$.T(2839473, 1, 22, false)
                                ], 10, false)), J$.T(2839497, 'pubkey must be a sshpk.Key', 21, false));
                                var alg = J$.W(2839545, 'alg', J$.F(2839537, J$.R(2839513, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(2839529, J$.R(2839521, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(137120, J$.C(137112, J$.B(414458, '===', J$.G(2839569, J$.R(2839553, 'alg', alg, false, false), J$.T(2839561, 0, 22, false)), J$.T(2839577, 'hmac', 21, false))) ? J$._() : J$.B(414466, '!==', J$.G(2839601, J$.R(2839585, 'alg', alg, false, false), J$.T(2839593, 0, 22, false)), J$.G(2839617, J$.R(2839609, 'pubkey', pubkey, false, false), 'type'))))
                                    return J$.Rt(2839633, J$.T(2839625, false, 23, false));
                                var v = J$.W(2839681, 'v', J$.M(2839673, J$.R(2839641, 'pubkey', pubkey, false, false), 'createVerify', false)(J$.G(2839665, J$.R(2839649, 'alg', alg, false, false), J$.T(2839657, 1, 22, false))), v, false, false);
                                J$.M(2839713, J$.R(2839689, 'v', v, false, false), 'update', false)(J$.G(2839705, J$.R(2839697, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                return J$.Rt(2839769, J$.M(2839761, J$.R(2839721, 'v', v, false, false), 'verify', false)(J$.G(2839745, J$.G(2839737, J$.R(2839729, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(2839753, 'base64', 21, false)));
                            } catch (J$e) {
                                J$.Ex(2840665, J$e);
                            } finally {
                                if (J$.Fr(2840673))
                                    continue jalangiLabel0;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false),
                verifyHMAC: J$.T(2840561, function verifyHMAC(parsedSignature, secret) {
                    jalangiLabel1:
                        while (true) {
                            try {
                                J$.Fe(2840489, arguments.callee, this, arguments);
                                arguments = J$.N(2840497, 'arguments', arguments, true, false, false);
                                parsedSignature = J$.N(2840505, 'parsedSignature', parsedSignature, true, false, false);
                                secret = J$.N(2840513, 'secret', secret, true, false, false);
                                J$.N(2840521, 'alg', alg, false, false, false);
                                J$.N(2840529, 'hashAlg', hashAlg, false, false, false);
                                J$.N(2840537, 'hmac', hmac, false, false, false);
                                J$.N(2840545, 'h1', h1, false, false, false);
                                J$.N(2840553, 'h2', h2, false, false, false);
                                J$.M(2839857, J$.R(2839833, 'assert', assert, false, true), 'object', false)(J$.R(2839841, 'parsedSignature', parsedSignature, false, false), J$.T(2839849, 'parsedHMAC', 21, false));
                                J$.M(2839889, J$.R(2839865, 'assert', assert, false, true), 'string', false)(J$.R(2839873, 'secret', secret, false, false), J$.T(2839881, 'secret', 21, false));
                                var alg = J$.W(2839929, 'alg', J$.F(2839921, J$.R(2839897, 'validateAlgorithm', validateAlgorithm, false, true), false)(J$.G(2839913, J$.R(2839905, 'parsedSignature', parsedSignature, false, false), 'algorithm')), alg, false, false);
                                if (J$.C(137128, J$.B(414474, '!==', J$.G(2839953, J$.R(2839937, 'alg', alg, false, false), J$.T(2839945, 0, 22, false)), J$.T(2839961, 'hmac', 21, false))))
                                    return J$.Rt(2839977, J$.T(2839969, false, 23, false));
                                var hashAlg = J$.W(2840017, 'hashAlg', J$.M(2840009, J$.G(2840001, J$.R(2839985, 'alg', alg, false, false), J$.T(2839993, 1, 22, false)), 'toUpperCase', false)(), hashAlg, false, false);
                                var hmac = J$.W(2840057, 'hmac', J$.M(2840049, J$.R(2840025, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(2840033, 'hashAlg', hashAlg, false, false), J$.R(2840041, 'secret', secret, false, false)), hmac, false, false);
                                J$.M(2840089, J$.R(2840065, 'hmac', hmac, false, false), 'update', false)(J$.G(2840081, J$.R(2840073, 'parsedSignature', parsedSignature, false, false), 'signingString'));
                                var h1 = J$.W(2840129, 'h1', J$.M(2840121, J$.R(2840097, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(2840105, 'hashAlg', hashAlg, false, false), J$.R(2840113, 'secret', secret, false, false)), h1, false, false);
                                J$.M(2840161, J$.R(2840137, 'h1', h1, false, false), 'update', false)(J$.M(2840153, J$.R(2840145, 'hmac', hmac, false, false), 'digest', false)());
                                h1 = J$.W(2840185, 'h1', J$.M(2840177, J$.R(2840169, 'h1', h1, false, false), 'digest', false)(), h1, false, false);
                                var h2 = J$.W(2840225, 'h2', J$.M(2840217, J$.R(2840193, 'crypto', crypto, false, true), 'createHmac', false)(J$.R(2840201, 'hashAlg', hashAlg, false, false), J$.R(2840209, 'secret', secret, false, false)), h2, false, false);
                                J$.M(2840289, J$.R(2840233, 'h2', h2, false, false), 'update', false)(J$.F(2840281, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(2840241, 'Buffer', undefined, true, true) : Buffer = J$.R(2840241, 'Buffer', Buffer, true, true)), true)(J$.G(2840265, J$.G(2840257, J$.R(2840249, 'parsedSignature', parsedSignature, false, false), 'params'), 'signature'), J$.T(2840273, 'base64', 21, false)));
                                h2 = J$.W(2840313, 'h2', J$.M(2840305, J$.R(2840297, 'h2', h2, false, false), 'digest', false)(), h2, false, false);
                                if (J$.C(137136, J$.B(414490, '===', J$.U(414482, 'typeof', J$.R(2840321, 'h1', h1, false, false)), J$.T(2840329, 'string', 21, false))))
                                    return J$.Rt(2840353, J$.B(414498, '===', J$.R(2840337, 'h1', h1, false, false), J$.R(2840345, 'h2', h2, false, false)));
                                if (J$.C(137152, J$.C(137144, J$.M(2840377, J$.I(typeof Buffer === 'undefined' ? Buffer = J$.R(2840361, 'Buffer', undefined, true, true) : Buffer = J$.R(2840361, 'Buffer', Buffer, true, true)), 'isBuffer', false)(J$.R(2840369, 'h1', h1, false, false))) ? J$.U(414506, '!', J$.G(2840393, J$.R(2840385, 'h1', h1, false, false), 'equals')) : J$._()))
                                    return J$.Rt(2840449, J$.B(414514, '===', J$.M(2840417, J$.R(2840401, 'h1', h1, false, false), 'toString', false)(J$.T(2840409, 'binary', 21, false)), J$.M(2840441, J$.R(2840425, 'h2', h2, false, false), 'toString', false)(J$.T(2840433, 'binary', 21, false))));
                                return J$.Rt(2840481, J$.M(2840473, J$.R(2840457, 'h1', h1, false, false), 'equals', false)(J$.R(2840465, 'h2', h2, false, false)));
                            } catch (J$e) {
                                J$.Ex(2840681, J$e);
                            } finally {
                                if (J$.Fr(2840689))
                                    continue jalangiLabel1;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(2840697, J$e);
        } finally {
            if (J$.Sr(2840705))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

