J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(3455129, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/signature.js');
            function Signature(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3449081, arguments.callee, this, arguments);
                            arguments = J$.N(3449089, 'arguments', arguments, true, false, false);
                            opts = J$.N(3449097, 'opts', opts, true, false, false);
                            J$.N(3449105, 'partLookup', partLookup, false, false, false);
                            J$.N(3449113, 'i', i, false, false, false);
                            J$.N(3449121, 'part', part, false, false, false);
                            J$.M(3448681, J$.R(3448657, 'assert', assert, false, true), 'object', false)(J$.R(3448665, 'opts', opts, false, false), J$.T(3448673, 'options', 21, false));
                            J$.M(3448721, J$.R(3448689, 'assert', assert, false, true), 'arrayOfObject', false)(J$.G(3448705, J$.R(3448697, 'opts', opts, false, false), 'parts'), J$.T(3448713, 'options.parts', 21, false));
                            J$.M(3448761, J$.R(3448729, 'assert', assert, false, true), 'string', false)(J$.G(3448745, J$.R(3448737, 'opts', opts, false, false), 'type'), J$.T(3448753, 'options.type', 21, false));
                            var partLookup = J$.W(3448777, 'partLookup', J$.T(3448769, {}, 11, false), partLookup, false, false);
                            for (var i = J$.W(3448793, 'i', J$.T(3448785, 0, 22, false), i, false, false); J$.C(160232, J$.B(452746, '<', J$.R(3448801, 'i', i, false, false), J$.G(3448825, J$.G(3448817, J$.R(3448809, 'opts', opts, false, false), 'parts'), 'length'))); i = J$.W(3448841, 'i', J$.B(452762, '+', J$.U(452754, '+', J$.R(3448833, 'i', i, false, false)), 1), i, false, false)) {
                                var part = J$.W(3448881, 'part', J$.G(3448873, J$.G(3448857, J$.R(3448849, 'opts', opts, false, false), 'parts'), J$.R(3448865, 'i', i, false, false)), part, false, false);
                                J$.P(3448921, J$.R(3448889, 'partLookup', partLookup, false, false), J$.G(3448905, J$.R(3448897, 'part', part, false, false), 'name'), J$.R(3448913, 'part', part, false, false));
                            }
                            J$.P(3448953, J$.R(3448929, 'this', this, false, false), 'type', J$.G(3448945, J$.R(3448937, 'opts', opts, false, false), 'type'));
                            J$.P(3448985, J$.R(3448961, 'this', this, false, false), 'hashAlgorithm', J$.G(3448977, J$.R(3448969, 'opts', opts, false, false), 'hashAlgo'));
                            J$.P(3449017, J$.R(3448993, 'this', this, false, false), 'curve', J$.G(3449009, J$.R(3449001, 'opts', opts, false, false), 'curve'));
                            J$.P(3449049, J$.R(3449025, 'this', this, false, false), 'parts', J$.G(3449041, J$.R(3449033, 'opts', opts, false, false), 'parts'));
                            J$.P(3449073, J$.R(3449057, 'this', this, false, false), 'part', J$.R(3449065, 'partLookup', partLookup, false, false));
                        } catch (J$e) {
                            J$.Ex(3455297, J$e);
                        } finally {
                            if (J$.Fr(3455305))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseOneNum(data, type, format, opts) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3452937, arguments.callee, this, arguments);
                            arguments = J$.N(3452945, 'arguments', arguments, true, false, false);
                            data = J$.N(3452953, 'data', data, true, false, false);
                            type = J$.N(3452961, 'type', type, true, false, false);
                            format = J$.N(3452969, 'format', format, true, false, false);
                            opts = J$.N(3452977, 'opts', opts, true, false, false);
                            J$.N(3452985, 'buf', buf, false, false, false);
                            J$.N(3452993, 'head', head, false, false, false);
                            J$.N(3453001, 'msg', msg, false, false, false);
                            J$.N(3453009, 'sig', sig, false, false, false);
                            if (J$.C(160592, J$.B(453026, '===', J$.R(3452209, 'format', format, false, false), J$.T(3452217, 'ssh', 21, false)))) {
                                try {
                                    var buf = J$.W(3452257, 'buf', J$.F(3452249, J$.R(3452225, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3452241, { buffer: J$.R(3452233, 'data', data, false, false) }, 11, false)), buf, false, false);
                                    var head = J$.W(3452281, 'head', J$.M(3452273, J$.R(3452265, 'buf', buf, false, false), 'readString', false)(), head, false, false);
                                } catch (e) {
                                    J$.N(3452289, 'e', e, false, false, true);
                                }
                                if (J$.C(160584, J$.B(453034, '!==', J$.R(3452297, 'buf', buf, false, false), J$.T(3452305, undefined, 24, false)))) {
                                    var msg = J$.W(3452361, 'msg', J$.B(453074, '+', J$.B(453066, '+', J$.B(453058, '+', J$.B(453050, '+', J$.B(453042, '+', J$.T(3452313, 'SSH signature does not match expected ', 21, false), J$.T(3452321, 'type (expected ', 21, false)), J$.R(3452329, 'type', type, false, false)), J$.T(3452337, ', got ', 21, false)), J$.R(3452345, 'head', head, false, false)), J$.T(3452353, ')', 21, false)), msg, false, false);
                                    switch (J$.C1(160544, J$.R(3452369, 'head', head, false, false))) {
                                    case J$.C2(160552, J$.T(3452441, 'ssh-rsa', 21, false)):
                                        J$.M(3452409, J$.R(3452377, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3452385, 'type', type, false, false), J$.T(3452393, 'rsa', 21, false), J$.R(3452401, 'msg', msg, false, false));
                                        J$.P(3452433, J$.R(3452417, 'opts', opts, false, false), 'hashAlgo', J$.T(3452425, 'sha1', 21, false));
                                        break;
                                    case J$.C2(160560, J$.T(3452513, 'rsa-sha2-256', 21, false)):
                                        J$.M(3452481, J$.R(3452449, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3452457, 'type', type, false, false), J$.T(3452465, 'rsa', 21, false), J$.R(3452473, 'msg', msg, false, false));
                                        J$.P(3452505, J$.R(3452489, 'opts', opts, false, false), 'hashAlgo', J$.T(3452497, 'sha256', 21, false));
                                        break;
                                    case J$.C2(160568, J$.T(3452585, 'rsa-sha2-512', 21, false)):
                                        J$.M(3452553, J$.R(3452521, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3452529, 'type', type, false, false), J$.T(3452537, 'rsa', 21, false), J$.R(3452545, 'msg', msg, false, false));
                                        J$.P(3452577, J$.R(3452561, 'opts', opts, false, false), 'hashAlgo', J$.T(3452569, 'sha512', 21, false));
                                        break;
                                    case J$.C2(160576, J$.T(3452657, 'ssh-ed25519', 21, false)):
                                        J$.M(3452625, J$.R(3452593, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3452601, 'type', type, false, false), J$.T(3452609, 'ed25519', 21, false), J$.R(3452617, 'msg', msg, false, false));
                                        J$.P(3452649, J$.R(3452633, 'opts', opts, false, false), 'hashAlgo', J$.T(3452641, 'sha512', 21, false));
                                        break;
                                    default:
                                        throw J$.F(3452697, J$.I(typeof Error === 'undefined' ? Error = J$.R(3452665, 'Error', undefined, true, true) : Error = J$.R(3452665, 'Error', Error, true, true)), true)(J$.B(453090, '+', J$.B(453082, '+', J$.T(3452673, 'Unknown SSH signature ', 21, false), J$.T(3452681, 'type: ', 21, false)), J$.R(3452689, 'head', head, false, false)));
                                    }
                                    var sig = J$.W(3452721, 'sig', J$.M(3452713, J$.R(3452705, 'buf', buf, false, false), 'readPart', false)(), sig, false, false);
                                    J$.M(3452761, J$.R(3452729, 'assert', assert, false, true), 'ok', false)(J$.M(3452745, J$.R(3452737, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3452753, 'extra trailing bytes', 21, false));
                                    J$.P(3452785, J$.R(3452769, 'sig', sig, false, false), 'name', J$.T(3452777, 'sig', 21, false));
                                    J$.M(3452817, J$.G(3452801, J$.R(3452793, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3452809, 'sig', sig, false, false));
                                    return J$.Rt(3452849, J$.F(3452841, J$.R(3452825, 'Signature', Signature, false, true), true)(J$.R(3452833, 'opts', opts, false, false)));
                                }
                            }
                            J$.M(3452897, J$.G(3452865, J$.R(3452857, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3452889, {
                                name: J$.T(3452873, 'sig', 21, false),
                                data: J$.R(3452881, 'data', data, false, false)
                            }, 11, false));
                            return J$.Rt(3452929, J$.F(3452921, J$.R(3452905, 'Signature', Signature, false, true), true)(J$.R(3452913, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3455361, J$e);
                        } finally {
                            if (J$.Fr(3455369))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSAasn1(data, type, format, opts) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3453337, arguments.callee, this, arguments);
                            arguments = J$.N(3453345, 'arguments', arguments, true, false, false);
                            data = J$.N(3453353, 'data', data, true, false, false);
                            type = J$.N(3453361, 'type', type, true, false, false);
                            format = J$.N(3453369, 'format', format, true, false, false);
                            opts = J$.N(3453377, 'opts', opts, true, false, false);
                            J$.N(3453385, 'der', der, false, false, false);
                            J$.N(3453393, 'r', r, false, false, false);
                            J$.N(3453401, 's', s, false, false, false);
                            var der = J$.W(3453041, 'der', J$.M(3453033, J$.R(3453017, 'asn1', asn1, false, true), 'BerReader', true)(J$.R(3453025, 'data', data, false, false)), der, false, false);
                            J$.M(3453057, J$.R(3453049, 'der', der, false, false), 'readSequence', false)();
                            var r = J$.W(3453113, 'r', J$.M(3453105, J$.R(3453065, 'der', der, false, false), 'readString', false)(J$.G(3453089, J$.G(3453081, J$.R(3453073, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3453097, true, 23, false)), r, false, false);
                            var s = J$.W(3453169, 's', J$.M(3453161, J$.R(3453121, 'der', der, false, false), 'readString', false)(J$.G(3453145, J$.G(3453137, J$.R(3453129, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3453153, true, 23, false)), s, false, false);
                            J$.M(3453233, J$.G(3453185, J$.R(3453177, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3453225, {
                                name: J$.T(3453193, 'r', 21, false),
                                data: J$.M(3453217, J$.R(3453201, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3453209, 'r', r, false, false))
                            }, 11, false));
                            J$.M(3453297, J$.G(3453249, J$.R(3453241, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3453289, {
                                name: J$.T(3453257, 's', 21, false),
                                data: J$.M(3453281, J$.R(3453265, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3453273, 's', s, false, false))
                            }, 11, false));
                            return J$.Rt(3453329, J$.F(3453321, J$.R(3453305, 'Signature', Signature, false, true), true)(J$.R(3453313, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3455377, J$e);
                        } finally {
                            if (J$.Fr(3455385))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSA(data, type, format, opts) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3453833, arguments.callee, this, arguments);
                            arguments = J$.N(3453841, 'arguments', arguments, true, false, false);
                            data = J$.N(3453849, 'data', data, true, false, false);
                            type = J$.N(3453857, 'type', type, true, false, false);
                            format = J$.N(3453865, 'format', format, true, false, false);
                            opts = J$.N(3453873, 'opts', opts, true, false, false);
                            J$.N(3453881, 'buf', buf, false, false, false);
                            J$.N(3453889, 'd', d, false, false, false);
                            if (J$.C(160608, J$.B(453098, '!=', J$.G(3453417, J$.R(3453409, 'data', data, false, false), 'length'), J$.T(3453425, 40, 22, false)))) {
                                var buf = J$.W(3453465, 'buf', J$.F(3453457, J$.R(3453433, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3453449, { buffer: J$.R(3453441, 'data', data, false, false) }, 11, false)), buf, false, false);
                                var d = J$.W(3453489, 'd', J$.M(3453481, J$.R(3453473, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                if (J$.C(160600, J$.B(453106, '===', J$.M(3453513, J$.R(3453497, 'd', d, false, false), 'toString', false)(J$.T(3453505, 'ascii', 21, false)), J$.T(3453521, 'ssh-dss', 21, false))))
                                    d = J$.W(3453545, 'd', J$.M(3453537, J$.R(3453529, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                J$.M(3453585, J$.R(3453553, 'assert', assert, false, true), 'ok', false)(J$.M(3453569, J$.R(3453561, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3453577, 'extra trailing bytes', 21, false));
                                J$.M(3453633, J$.R(3453593, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3453609, J$.R(3453601, 'd', d, false, false), 'length'), J$.T(3453617, 40, 22, false), J$.T(3453625, 'invalid inner length', 21, false));
                                data = J$.W(3453649, 'data', J$.R(3453641, 'd', d, false, false), data, false, false);
                            }
                            J$.M(3453721, J$.G(3453665, J$.R(3453657, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3453713, {
                                name: J$.T(3453673, 'r', 21, false),
                                data: J$.M(3453705, J$.R(3453681, 'data', data, false, false), 'slice', false)(J$.T(3453689, 0, 22, false), J$.T(3453697, 20, 22, false))
                            }, 11, false));
                            J$.M(3453793, J$.G(3453737, J$.R(3453729, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3453785, {
                                name: J$.T(3453745, 's', 21, false),
                                data: J$.M(3453777, J$.R(3453753, 'data', data, false, false), 'slice', false)(J$.T(3453761, 20, 22, false), J$.T(3453769, 40, 22, false))
                            }, 11, false));
                            return J$.Rt(3453825, J$.F(3453817, J$.R(3453801, 'Signature', Signature, false, true), true)(J$.R(3453809, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3455393, J$e);
                        } finally {
                            if (J$.Fr(3455401))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseECDSA(data, type, format, opts) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3454713, arguments.callee, this, arguments);
                            arguments = J$.N(3454721, 'arguments', arguments, true, false, false);
                            data = J$.N(3454729, 'data', data, true, false, false);
                            type = J$.N(3454737, 'type', type, true, false, false);
                            format = J$.N(3454745, 'format', format, true, false, false);
                            opts = J$.N(3454753, 'opts', opts, true, false, false);
                            J$.N(3454761, 'buf', buf, false, false, false);
                            J$.N(3454769, 'r', r, false, false, false);
                            J$.N(3454777, 's', s, false, false, false);
                            J$.N(3454785, 'inner', inner, false, false, false);
                            J$.N(3454793, 'stype', stype, false, false, false);
                            J$.N(3454801, 'parts', parts, false, false, false);
                            var buf = J$.W(3453929, 'buf', J$.F(3453921, J$.R(3453897, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3453913, { buffer: J$.R(3453905, 'data', data, false, false) }, 11, false)), buf, false, false);
                            var r, s;
                            var inner = J$.W(3453953, 'inner', J$.M(3453945, J$.R(3453937, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                            var stype = J$.W(3453985, 'stype', J$.M(3453977, J$.R(3453961, 'inner', inner, false, false), 'toString', false)(J$.T(3453969, 'ascii', 21, false)), stype, false, false);
                            if (J$.C(160648, J$.B(453114, '===', J$.M(3454017, J$.R(3453993, 'stype', stype, false, false), 'slice', false)(J$.T(3454001, 0, 22, false), J$.T(3454009, 6, 22, false)), J$.T(3454025, 'ecdsa-', 21, false)))) {
                                var parts = J$.W(3454057, 'parts', J$.M(3454049, J$.R(3454033, 'stype', stype, false, false), 'split', false)(J$.T(3454041, '-', 21, false)), parts, false, false);
                                J$.M(3454105, J$.R(3454065, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3454089, J$.R(3454073, 'parts', parts, false, false), J$.T(3454081, 0, 22, false)), J$.T(3454097, 'ecdsa', 21, false));
                                J$.M(3454153, J$.R(3454113, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3454137, J$.R(3454121, 'parts', parts, false, false), J$.T(3454129, 1, 22, false)), J$.T(3454145, 'sha2', 21, false));
                                J$.P(3454193, J$.R(3454161, 'opts', opts, false, false), 'curve', J$.G(3454185, J$.R(3454169, 'parts', parts, false, false), J$.T(3454177, 2, 22, false)));
                                switch (J$.C1(160616, J$.G(3454209, J$.R(3454201, 'opts', opts, false, false), 'curve'))) {
                                case J$.C2(160624, J$.T(3454241, 'nistp256', 21, false)):
                                    J$.P(3454233, J$.R(3454217, 'opts', opts, false, false), 'hashAlgo', J$.T(3454225, 'sha256', 21, false));
                                    break;
                                case J$.C2(160632, J$.T(3454273, 'nistp384', 21, false)):
                                    J$.P(3454265, J$.R(3454249, 'opts', opts, false, false), 'hashAlgo', J$.T(3454257, 'sha384', 21, false));
                                    break;
                                case J$.C2(160640, J$.T(3454305, 'nistp521', 21, false)):
                                    J$.P(3454297, J$.R(3454281, 'opts', opts, false, false), 'hashAlgo', J$.T(3454289, 'sha512', 21, false));
                                    break;
                                default:
                                    throw J$.F(3454345, J$.I(typeof Error === 'undefined' ? Error = J$.R(3454313, 'Error', undefined, true, true) : Error = J$.R(3454313, 'Error', Error, true, true)), true)(J$.B(453122, '+', J$.T(3454321, 'Unsupported ECDSA curve: ', 21, false), J$.G(3454337, J$.R(3454329, 'opts', opts, false, false), 'curve')));
                                }
                                inner = J$.W(3454369, 'inner', J$.M(3454361, J$.R(3454353, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                                J$.M(3454409, J$.R(3454377, 'assert', assert, false, true), 'ok', false)(J$.M(3454393, J$.R(3454385, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3454401, 'extra trailing bytes on outer', 21, false));
                                buf = J$.W(3454449, 'buf', J$.F(3454441, J$.R(3454417, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3454433, { buffer: J$.R(3454425, 'inner', inner, false, false) }, 11, false)), buf, false, false);
                                r = J$.W(3454473, 'r', J$.M(3454465, J$.R(3454457, 'buf', buf, false, false), 'readPart', false)(), r, false, false);
                            } else {
                                r = J$.W(3454497, 'r', J$.T(3454489, { data: J$.R(3454481, 'inner', inner, false, false) }, 11, false), r, false, false);
                            }
                            s = J$.W(3454521, 's', J$.M(3454513, J$.R(3454505, 'buf', buf, false, false), 'readPart', false)(), s, false, false);
                            J$.M(3454561, J$.R(3454529, 'assert', assert, false, true), 'ok', false)(J$.M(3454545, J$.R(3454537, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3454553, 'extra trailing bytes', 21, false));
                            J$.P(3454585, J$.R(3454569, 'r', r, false, false), 'name', J$.T(3454577, 'r', 21, false));
                            J$.P(3454609, J$.R(3454593, 's', s, false, false), 'name', J$.T(3454601, 's', 21, false));
                            J$.M(3454641, J$.G(3454625, J$.R(3454617, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3454633, 'r', r, false, false));
                            J$.M(3454673, J$.G(3454657, J$.R(3454649, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3454665, 's', s, false, false));
                            return J$.Rt(3454705, J$.F(3454697, J$.R(3454681, 'Signature', Signature, false, true), true)(J$.R(3454689, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3455409, J$e);
                        } finally {
                            if (J$.Fr(3455417))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3455137, 'assert', assert, false, false, false);
            J$.N(3455145, 'Buffer', Buffer, false, false, false);
            J$.N(3455153, 'algs', algs, false, false, false);
            J$.N(3455161, 'crypto', crypto, false, false, false);
            J$.N(3455169, 'errs', errs, false, false, false);
            J$.N(3455177, 'utils', utils, false, false, false);
            J$.N(3455185, 'asn1', asn1, false, false, false);
            J$.N(3455193, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(3455201, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(3455209, 'SignatureParseError', SignatureParseError, false, false, false);
            Signature = J$.N(3455225, 'Signature', J$.T(3455217, Signature, 12, false), true, false, false);
            parseOneNum = J$.N(3455241, 'parseOneNum', J$.T(3455233, parseOneNum, 12, false), true, false, false);
            parseDSAasn1 = J$.N(3455257, 'parseDSAasn1', J$.T(3455249, parseDSAasn1, 12, false), true, false, false);
            parseDSA = J$.N(3455273, 'parseDSA', J$.T(3455265, parseDSA, 12, false), true, false, false);
            parseECDSA = J$.N(3455289, 'parseECDSA', J$.T(3455281, parseECDSA, 12, false), true, false, false);
            J$.T(3448121, 'use strict', 21, false);
            J$.F(3448145, J$.I(typeof require === 'undefined' ? require = J$.R(3448129, 'require', undefined, true, true) : require = J$.R(3448129, 'require', require, true, true)), false)(J$.T(3448137, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3448169, J$.I(typeof require === 'undefined' ? require = J$.R(3448153, 'require', undefined, true, true) : require = J$.R(3448153, 'require', require, true, true)), false)(J$.T(3448161, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3448193, J$.I(typeof require === 'undefined' ? require = J$.R(3448177, 'require', undefined, true, true) : require = J$.R(3448177, 'require', require, true, true)), false)(J$.T(3448185, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3448217, J$.I(typeof require === 'undefined' ? require = J$.R(3448201, 'require', undefined, true, true) : require = J$.R(3448201, 'require', require, true, true)), false)(J$.T(3448209, 'core-js/modules/es.function.name', 21, false));
            J$.F(3448241, J$.I(typeof require === 'undefined' ? require = J$.R(3448225, 'require', undefined, true, true) : require = J$.R(3448225, 'require', require, true, true)), false)(J$.T(3448233, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3448265, J$.I(typeof require === 'undefined' ? require = J$.R(3448249, 'require', undefined, true, true) : require = J$.R(3448249, 'require', require, true, true)), false)(J$.T(3448257, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3448289, J$.I(typeof require === 'undefined' ? require = J$.R(3448273, 'require', undefined, true, true) : require = J$.R(3448273, 'require', require, true, true)), false)(J$.T(3448281, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3448313, J$.I(typeof require === 'undefined' ? require = J$.R(3448297, 'require', undefined, true, true) : require = J$.R(3448297, 'require', require, true, true)), false)(J$.T(3448305, 'core-js/modules/es.string.split', 21, false));
            J$.P(3448337, J$.I(typeof module === 'undefined' ? module = J$.R(3448321, 'module', undefined, true, true) : module = J$.R(3448321, 'module', module, true, true)), 'exports', J$.R(3448329, 'Signature', Signature, false, true));
            var assert = J$.W(3448369, 'assert', J$.F(3448361, J$.I(typeof require === 'undefined' ? require = J$.R(3448345, 'require', undefined, true, true) : require = J$.R(3448345, 'require', require, true, true)), false)(J$.T(3448353, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3448409, 'Buffer', J$.G(3448401, J$.F(3448393, J$.I(typeof require === 'undefined' ? require = J$.R(3448377, 'require', undefined, true, true) : require = J$.R(3448377, 'require', require, true, true)), false)(J$.T(3448385, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3448441, 'algs', J$.F(3448433, J$.I(typeof require === 'undefined' ? require = J$.R(3448417, 'require', undefined, true, true) : require = J$.R(3448417, 'require', require, true, true)), false)(J$.T(3448425, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(3448473, 'crypto', J$.F(3448465, J$.I(typeof require === 'undefined' ? require = J$.R(3448449, 'require', undefined, true, true) : require = J$.R(3448449, 'require', require, true, true)), false)(J$.T(3448457, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(3448505, 'errs', J$.F(3448497, J$.I(typeof require === 'undefined' ? require = J$.R(3448481, 'require', undefined, true, true) : require = J$.R(3448481, 'require', require, true, true)), false)(J$.T(3448489, './errors', 21, false)), errs, false, true);
            var utils = J$.W(3448537, 'utils', J$.F(3448529, J$.I(typeof require === 'undefined' ? require = J$.R(3448513, 'require', undefined, true, true) : require = J$.R(3448513, 'require', require, true, true)), false)(J$.T(3448521, './utils', 21, false)), utils, false, true);
            var asn1 = J$.W(3448569, 'asn1', J$.F(3448561, J$.I(typeof require === 'undefined' ? require = J$.R(3448545, 'require', undefined, true, true) : require = J$.R(3448545, 'require', require, true, true)), false)(J$.T(3448553, 'asn1', 21, false)), asn1, false, true);
            var SSHBuffer = J$.W(3448601, 'SSHBuffer', J$.F(3448593, J$.I(typeof require === 'undefined' ? require = J$.R(3448577, 'require', undefined, true, true) : require = J$.R(3448577, 'require', require, true, true)), false)(J$.T(3448585, './ssh-buffer', 21, false)), SSHBuffer, false, true);
            var InvalidAlgorithmError = J$.W(3448625, 'InvalidAlgorithmError', J$.G(3448617, J$.R(3448609, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var SignatureParseError = J$.W(3448649, 'SignatureParseError', J$.G(3448641, J$.R(3448633, 'errs', errs, false, true), 'SignatureParseError'), SignatureParseError, false, true);
            J$.P(3451257, J$.G(3449137, J$.R(3449129, 'Signature', Signature, false, true), 'prototype'), 'toBuffer', J$.T(3451249, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3451161, arguments.callee, this, arguments);
                            arguments = J$.N(3451169, 'arguments', arguments, true, false, false);
                            format = J$.N(3451177, 'format', format, true, false, false);
                            J$.N(3451185, 'buf', buf, false, false, false);
                            J$.N(3451193, 'stype', stype, false, false, false);
                            J$.N(3451201, 'r', r, false, false, false);
                            J$.N(3451209, 's', s, false, false, false);
                            J$.N(3451217, 'der', der, false, false, false);
                            J$.N(3451225, 'inner', inner, false, false, false);
                            J$.N(3451233, 'curve', curve, false, false, false);
                            J$.N(3451241, 'sz', sz, false, false, false);
                            if (J$.C(160240, J$.B(452770, '===', J$.R(3449145, 'format', format, false, false), J$.T(3449153, undefined, 24, false))))
                                format = J$.W(3449169, 'format', J$.T(3449161, 'asn1', 21, false), format, false, false);
                            J$.M(3449201, J$.R(3449177, 'assert', assert, false, true), 'string', false)(J$.R(3449185, 'format', format, false, false), J$.T(3449193, 'format', 21, false));
                            var buf;
                            var stype = J$.W(3449233, 'stype', J$.B(452778, '+', J$.T(3449209, 'ssh-', 21, false), J$.G(3449225, J$.R(3449217, 'this', this, false, false), 'type')), stype, false, false);
                            switch (J$.C1(160432, J$.G(3449249, J$.R(3449241, 'this', this, false, false), 'type'))) {
                            case J$.C2(160440, J$.T(3449569, 'rsa', 21, false)):
                                switch (J$.C1(160248, J$.G(3449265, J$.R(3449257, 'this', this, false, false), 'hashAlgorithm'))) {
                                case J$.C2(160256, J$.T(3449289, 'sha256', 21, false)):
                                    stype = J$.W(3449281, 'stype', J$.T(3449273, 'rsa-sha2-256', 21, false), stype, false, false);
                                    break;
                                case J$.C2(160264, J$.T(3449313, 'sha512', 21, false)):
                                    stype = J$.W(3449305, 'stype', J$.T(3449297, 'rsa-sha2-512', 21, false), stype, false, false);
                                    break;
                                case J$.C2(160272, J$.T(3449321, 'sha1', 21, false)):
                                case J$.C2(160280, J$.T(3449329, undefined, 24, false)):
                                    break;
                                default:
                                    throw J$.F(3449385, J$.I(typeof Error === 'undefined' ? Error = J$.R(3449337, 'Error', undefined, true, true) : Error = J$.R(3449337, 'Error', Error, true, true)), true)(J$.B(452802, '+', J$.B(452794, '+', J$.B(452786, '+', J$.T(3449345, 'SSH signature ', 21, false), J$.T(3449353, 'format does not support hash ', 21, false)), J$.T(3449361, 'algorithm ', 21, false)), J$.G(3449377, J$.R(3449369, 'this', this, false, false), 'hashAlgorithm')));
                                }
                                if (J$.C(160288, J$.B(452810, '===', J$.R(3449393, 'format', format, false, false), J$.T(3449401, 'ssh', 21, false)))) {
                                    buf = J$.W(3449433, 'buf', J$.F(3449425, J$.R(3449409, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3449417, {}, 11, false)), buf, false, false);
                                    J$.M(3449457, J$.R(3449441, 'buf', buf, false, false), 'writeString', false)(J$.R(3449449, 'stype', stype, false, false));
                                    J$.M(3449497, J$.R(3449465, 'buf', buf, false, false), 'writePart', false)(J$.G(3449489, J$.G(3449481, J$.R(3449473, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(3449521, J$.M(3449513, J$.R(3449505, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(3449561, J$.G(3449553, J$.G(3449545, J$.G(3449537, J$.R(3449529, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(160448, J$.T(3449753, 'ed25519', 21, false)):
                                if (J$.C(160296, J$.B(452818, '===', J$.R(3449577, 'format', format, false, false), J$.T(3449585, 'ssh', 21, false)))) {
                                    buf = J$.W(3449617, 'buf', J$.F(3449609, J$.R(3449593, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3449601, {}, 11, false)), buf, false, false);
                                    J$.M(3449641, J$.R(3449625, 'buf', buf, false, false), 'writeString', false)(J$.R(3449633, 'stype', stype, false, false));
                                    J$.M(3449681, J$.R(3449649, 'buf', buf, false, false), 'writePart', false)(J$.G(3449673, J$.G(3449665, J$.R(3449657, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(3449705, J$.M(3449697, J$.R(3449689, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(3449745, J$.G(3449737, J$.G(3449729, J$.G(3449721, J$.R(3449713, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(160456, J$.T(3449761, 'dsa', 21, false)):
                            case J$.C2(160464, J$.T(3451129, 'ecdsa', 21, false)):
                                var r, s;
                                if (J$.C(160424, J$.B(452826, '===', J$.R(3449769, 'format', format, false, false), J$.T(3449777, 'asn1', 21, false)))) {
                                    var der = J$.W(3449801, 'der', J$.M(3449793, J$.R(3449785, 'asn1', asn1, false, true), 'BerWriter', true)(), der, false, false);
                                    J$.M(3449817, J$.R(3449809, 'der', der, false, false), 'startSequence', false)();
                                    r = J$.W(3449873, 'r', J$.M(3449865, J$.R(3449825, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3449857, J$.G(3449849, J$.G(3449841, J$.R(3449833, 'this', this, false, false), 'part'), 'r'), 'data')), r, false, false);
                                    s = J$.W(3449929, 's', J$.M(3449921, J$.R(3449881, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3449913, J$.G(3449905, J$.G(3449897, J$.R(3449889, 'this', this, false, false), 'part'), 's'), 'data')), s, false, false);
                                    J$.M(3449977, J$.R(3449937, 'der', der, false, false), 'writeBuffer', false)(J$.R(3449945, 'r', r, false, false), J$.G(3449969, J$.G(3449961, J$.R(3449953, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(3450025, J$.R(3449985, 'der', der, false, false), 'writeBuffer', false)(J$.R(3449993, 's', s, false, false), J$.G(3450017, J$.G(3450009, J$.R(3450001, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(3450041, J$.R(3450033, 'der', der, false, false), 'endSequence', false)();
                                    return J$.Rt(3450065, J$.G(3450057, J$.R(3450049, 'der', der, false, false), 'buffer'));
                                } else if (J$.C(160416, J$.C(160304, J$.B(452834, '===', J$.R(3450073, 'format', format, false, false), J$.T(3450081, 'ssh', 21, false))) ? J$.B(452842, '===', J$.G(3450097, J$.R(3450089, 'this', this, false, false), 'type'), J$.T(3450105, 'dsa', 21, false)) : J$._())) {
                                    buf = J$.W(3450137, 'buf', J$.F(3450129, J$.R(3450113, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3450121, {}, 11, false)), buf, false, false);
                                    J$.M(3450161, J$.R(3450145, 'buf', buf, false, false), 'writeString', false)(J$.T(3450153, 'ssh-dss', 21, false));
                                    r = J$.W(3450201, 'r', J$.G(3450193, J$.G(3450185, J$.G(3450177, J$.R(3450169, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    if (J$.C(160320, J$.C(160312, J$.B(452850, '>', J$.G(3450217, J$.R(3450209, 'r', r, false, false), 'length'), J$.T(3450225, 20, 22, false))) ? J$.B(452858, '===', J$.G(3450249, J$.R(3450233, 'r', r, false, false), J$.T(3450241, 0, 22, false)), J$.T(3450257, 0, 22, false)) : J$._()))
                                        r = J$.W(3450289, 'r', J$.M(3450281, J$.R(3450265, 'r', r, false, false), 'slice', false)(J$.T(3450273, 1, 22, false)), r, false, false);
                                    s = J$.W(3450329, 's', J$.G(3450321, J$.G(3450313, J$.G(3450305, J$.R(3450297, 'this', this, false, false), 'part'), 's'), 'data'), s, false, false);
                                    if (J$.C(160336, J$.C(160328, J$.B(452866, '>', J$.G(3450345, J$.R(3450337, 's', s, false, false), 'length'), J$.T(3450353, 20, 22, false))) ? J$.B(452874, '===', J$.G(3450377, J$.R(3450361, 's', s, false, false), J$.T(3450369, 0, 22, false)), J$.T(3450385, 0, 22, false)) : J$._()))
                                        s = J$.W(3450417, 's', J$.M(3450409, J$.R(3450393, 's', s, false, false), 'slice', false)(J$.T(3450401, 1, 22, false)), s, false, false);
                                    if (J$.C(160360, J$.C(160352, J$.C(160344, J$.G(3450433, J$.R(3450425, 'this', this, false, false), 'hashAlgorithm')) ? J$.B(452882, '!==', J$.G(3450449, J$.R(3450441, 'this', this, false, false), 'hashAlgorithm'), J$.T(3450457, 'sha1', 21, false)) : J$._()) ? J$._() : J$.B(452898, '!==', J$.B(452890, '+', J$.G(3450473, J$.R(3450465, 'r', r, false, false), 'length'), J$.G(3450489, J$.R(3450481, 's', s, false, false), 'length')), J$.T(3450497, 40, 22, false)))) {
                                        throw J$.F(3450529, J$.I(typeof Error === 'undefined' ? Error = J$.R(3450505, 'Error', undefined, true, true) : Error = J$.R(3450505, 'Error', Error, true, true)), true)(J$.B(452906, '+', J$.T(3450513, 'OpenSSH only supports ', 21, false), J$.T(3450521, 'DSA signatures with SHA1 hash', 21, false)));
                                    }
                                    J$.M(3450585, J$.R(3450537, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3450577, J$.R(3450545, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(3450569, [
                                        J$.R(3450553, 'r', r, false, false),
                                        J$.R(3450561, 's', s, false, false)
                                    ], 10, false)));
                                    return J$.Rt(3450609, J$.M(3450601, J$.R(3450593, 'buf', buf, false, false), 'toBuffer', false)());
                                } else if (J$.C(160408, J$.C(160368, J$.B(452914, '===', J$.R(3450617, 'format', format, false, false), J$.T(3450625, 'ssh', 21, false))) ? J$.B(452922, '===', J$.G(3450641, J$.R(3450633, 'this', this, false, false), 'type'), J$.T(3450649, 'ecdsa', 21, false)) : J$._())) {
                                    var inner = J$.W(3450681, 'inner', J$.F(3450673, J$.R(3450657, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3450665, {}, 11, false)), inner, false, false);
                                    r = J$.W(3450721, 'r', J$.G(3450713, J$.G(3450705, J$.G(3450697, J$.R(3450689, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    J$.M(3450745, J$.R(3450729, 'inner', inner, false, false), 'writeBuffer', false)(J$.R(3450737, 'r', r, false, false));
                                    J$.M(3450785, J$.R(3450753, 'inner', inner, false, false), 'writePart', false)(J$.G(3450777, J$.G(3450769, J$.R(3450761, 'this', this, false, false), 'part'), 's'));
                                    buf = J$.W(3450817, 'buf', J$.F(3450809, J$.R(3450793, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3450801, {}, 11, false)), buf, false, false);
                                    var curve;
                                    if (J$.C(160376, J$.B(452930, '===', J$.G(3450841, J$.R(3450825, 'r', r, false, false), J$.T(3450833, 0, 22, false)), J$.T(3450849, 0, 22, false))))
                                        r = J$.W(3450881, 'r', J$.M(3450873, J$.R(3450857, 'r', r, false, false), 'slice', false)(J$.T(3450865, 1, 22, false)), r, false, false);
                                    var sz = J$.W(3450913, 'sz', J$.B(452938, '*', J$.G(3450897, J$.R(3450889, 'r', r, false, false), 'length'), J$.T(3450905, 8, 22, false)), sz, false, false);
                                    if (J$.C(160400, J$.B(452946, '===', J$.R(3450921, 'sz', sz, false, false), J$.T(3450929, 256, 22, false))))
                                        curve = J$.W(3450945, 'curve', J$.T(3450937, 'nistp256', 21, false), curve, false, false);
                                    else if (J$.C(160392, J$.B(452954, '===', J$.R(3450953, 'sz', sz, false, false), J$.T(3450961, 384, 22, false))))
                                        curve = J$.W(3450977, 'curve', J$.T(3450969, 'nistp384', 21, false), curve, false, false);
                                    else if (J$.C(160384, J$.B(452962, '===', J$.R(3450985, 'sz', sz, false, false), J$.T(3450993, 528, 22, false))))
                                        curve = J$.W(3451009, 'curve', J$.T(3451001, 'nistp521', 21, false), curve, false, false);
                                    J$.M(3451041, J$.R(3451017, 'buf', buf, false, false), 'writeString', false)(J$.B(452970, '+', J$.T(3451025, 'ecdsa-sha2-', 21, false), J$.R(3451033, 'curve', curve, false, false)));
                                    J$.M(3451073, J$.R(3451049, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3451065, J$.R(3451057, 'inner', inner, false, false), 'toBuffer', false)());
                                    return J$.Rt(3451097, J$.M(3451089, J$.R(3451081, 'buf', buf, false, false), 'toBuffer', false)());
                                }
                                throw J$.F(3451121, J$.I(typeof Error === 'undefined' ? Error = J$.R(3451105, 'Error', undefined, true, true) : Error = J$.R(3451105, 'Error', Error, true, true)), true)(J$.T(3451113, 'Invalid signature format', 21, false));
                            default:
                                throw J$.F(3451153, J$.I(typeof Error === 'undefined' ? Error = J$.R(3451137, 'Error', undefined, true, true) : Error = J$.R(3451137, 'Error', Error, true, true)), true)(J$.T(3451145, 'Invalid signature data', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3455313, J$e);
                        } finally {
                            if (J$.Fr(3455321))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3451393, J$.G(3451273, J$.R(3451265, 'Signature', Signature, false, true), 'prototype'), 'toString', J$.T(3451385, function (format) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3451361, arguments.callee, this, arguments);
                            arguments = J$.N(3451369, 'arguments', arguments, true, false, false);
                            format = J$.N(3451377, 'format', format, true, false, false);
                            J$.M(3451305, J$.R(3451281, 'assert', assert, false, true), 'optionalString', false)(J$.R(3451289, 'format', format, false, false), J$.T(3451297, 'format', 21, false));
                            return J$.Rt(3451353, J$.M(3451345, J$.M(3451329, J$.R(3451313, 'this', this, false, false), 'toBuffer', false)(J$.R(3451321, 'format', format, false, false)), 'toString', false)(J$.T(3451337, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3455329, J$e);
                        } finally {
                            if (J$.Fr(3455337))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3452201, J$.R(3451401, 'Signature', Signature, false, true), 'parse', J$.T(3452193, function (data, type, format) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3452145, arguments.callee, this, arguments);
                            arguments = J$.N(3452153, 'arguments', arguments, true, false, false);
                            data = J$.N(3452161, 'data', data, true, false, false);
                            type = J$.N(3452169, 'type', type, true, false, false);
                            format = J$.N(3452177, 'format', format, true, false, false);
                            J$.N(3452185, 'opts', opts, false, false, false);
                            if (J$.C(160472, J$.B(452986, '===', J$.U(452978, 'typeof', J$.R(3451409, 'data', data, false, false)), J$.T(3451417, 'string', 21, false))))
                                data = J$.W(3451457, 'data', J$.M(3451449, J$.R(3451425, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3451433, 'data', data, false, false), J$.T(3451441, 'base64', 21, false)), data, false, false);
                            J$.M(3451489, J$.R(3451465, 'assert', assert, false, true), 'buffer', false)(J$.R(3451473, 'data', data, false, false), J$.T(3451481, 'data', 21, false));
                            J$.M(3451521, J$.R(3451497, 'assert', assert, false, true), 'string', false)(J$.R(3451505, 'format', format, false, false), J$.T(3451513, 'format', 21, false));
                            J$.M(3451553, J$.R(3451529, 'assert', assert, false, true), 'string', false)(J$.R(3451537, 'type', type, false, false), J$.T(3451545, 'type', 21, false));
                            var opts = J$.W(3451569, 'opts', J$.T(3451561, {}, 11, false), opts, false, false);
                            J$.P(3451601, J$.R(3451577, 'opts', opts, false, false), 'type', J$.M(3451593, J$.R(3451585, 'type', type, false, false), 'toLowerCase', false)());
                            J$.P(3451625, J$.R(3451609, 'opts', opts, false, false), 'parts', J$.T(3451617, [], 10, false));
                            try {
                                J$.M(3451673, J$.R(3451633, 'assert', assert, false, true), 'ok', false)(J$.B(452994, '>', J$.G(3451649, J$.R(3451641, 'data', data, false, false), 'length'), J$.T(3451657, 0, 22, false)), J$.T(3451665, 'signature must not be empty', 21, false));
                                switch (J$.C1(160496, J$.G(3451689, J$.R(3451681, 'opts', opts, false, false), 'type'))) {
                                case J$.C2(160504, J$.T(3451753, 'rsa', 21, false)):
                                    return J$.Rt(3451745, J$.F(3451737, J$.R(3451697, 'parseOneNum', parseOneNum, false, true), false)(J$.R(3451705, 'data', data, false, false), J$.R(3451713, 'type', type, false, false), J$.R(3451721, 'format', format, false, false), J$.R(3451729, 'opts', opts, false, false)));
                                case J$.C2(160512, J$.T(3451817, 'ed25519', 21, false)):
                                    return J$.Rt(3451809, J$.F(3451801, J$.R(3451761, 'parseOneNum', parseOneNum, false, true), false)(J$.R(3451769, 'data', data, false, false), J$.R(3451777, 'type', type, false, false), J$.R(3451785, 'format', format, false, false), J$.R(3451793, 'opts', opts, false, false)));
                                case J$.C2(160520, J$.T(3451825, 'dsa', 21, false)):
                                case J$.C2(160528, J$.T(3452041, 'ecdsa', 21, false)):
                                    if (J$.C(160488, J$.B(453002, '===', J$.R(3451833, 'format', format, false, false), J$.T(3451841, 'asn1', 21, false))))
                                        return J$.Rt(3451897, J$.F(3451889, J$.R(3451849, 'parseDSAasn1', parseDSAasn1, false, true), false)(J$.R(3451857, 'data', data, false, false), J$.R(3451865, 'type', type, false, false), J$.R(3451873, 'format', format, false, false), J$.R(3451881, 'opts', opts, false, false)));
                                    else if (J$.C(160480, J$.B(453010, '===', J$.G(3451913, J$.R(3451905, 'opts', opts, false, false), 'type'), J$.T(3451921, 'dsa', 21, false))))
                                        return J$.Rt(3451977, J$.F(3451969, J$.R(3451929, 'parseDSA', parseDSA, false, true), false)(J$.R(3451937, 'data', data, false, false), J$.R(3451945, 'type', type, false, false), J$.R(3451953, 'format', format, false, false), J$.R(3451961, 'opts', opts, false, false)));
                                    else
                                        return J$.Rt(3452033, J$.F(3452025, J$.R(3451985, 'parseECDSA', parseECDSA, false, true), false)(J$.R(3451993, 'data', data, false, false), J$.R(3452001, 'type', type, false, false), J$.R(3452009, 'format', format, false, false), J$.R(3452017, 'opts', opts, false, false)));
                                default:
                                    throw J$.F(3452065, J$.R(3452049, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(3452057, 'type', type, false, false));
                                }
                            } catch (e) {
                                J$.N(3452137, 'e', e, false, false, true);
                                if (J$.C(160536, J$.B(453018, 'instanceof', J$.R(3452073, 'e', e, false, false), J$.R(3452081, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true))))
                                    throw J$.R(3452089, 'e', e, false, false);
                                throw J$.F(3452129, J$.R(3452097, 'SignatureParseError', SignatureParseError, false, true), true)(J$.R(3452105, 'type', type, false, false), J$.R(3452113, 'format', format, false, false), J$.R(3452121, 'e', e, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3455345, J$e);
                        } finally {
                            if (J$.Fr(3455353))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3454905, J$.R(3454809, 'Signature', Signature, false, true), 'isSignature', J$.T(3454897, function (obj, ver) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3454865, arguments.callee, this, arguments);
                            arguments = J$.N(3454873, 'arguments', arguments, true, false, false);
                            obj = J$.N(3454881, 'obj', obj, true, false, false);
                            ver = J$.N(3454889, 'ver', ver, true, false, false);
                            return J$.Rt(3454857, J$.M(3454849, J$.R(3454817, 'utils', utils, false, true), 'isCompatible', false)(J$.R(3454825, 'obj', obj, false, false), J$.R(3454833, 'Signature', Signature, false, true), J$.R(3454841, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(3455425, J$e);
                        } finally {
                            if (J$.Fr(3455433))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3454953, J$.G(3454921, J$.R(3454913, 'Signature', Signature, false, true), 'prototype'), '_sshpkApiVersion', J$.T(3454945, [
                J$.T(3454929, 2, 22, false),
                J$.T(3454937, 1, 22, false)
            ], 10, false));
            J$.P(3455121, J$.R(3454961, 'Signature', Signature, false, true), '_oldVersionDetect', J$.T(3455113, function (obj) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3455089, arguments.callee, this, arguments);
                            arguments = J$.N(3455097, 'arguments', arguments, true, false, false);
                            obj = J$.N(3455105, 'obj', obj, true, false, false);
                            J$.M(3454993, J$.R(3454969, 'assert', assert, false, true), 'func', false)(J$.G(3454985, J$.R(3454977, 'obj', obj, false, false), 'toBuffer'));
                            if (J$.C(160656, J$.M(3455017, J$.R(3455001, 'obj', obj, false, false), 'hasOwnProperty', false)(J$.T(3455009, 'hashAlgorithm', 21, false))))
                                return J$.Rt(3455049, J$.T(3455041, [
                                    J$.T(3455025, 2, 22, false),
                                    J$.T(3455033, 0, 22, false)
                                ], 10, false));
                            return J$.Rt(3455081, J$.T(3455073, [
                                J$.T(3455057, 1, 22, false),
                                J$.T(3455065, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(3455441, J$e);
                        } finally {
                            if (J$.Fr(3455449))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3455457, J$e);
        } finally {
            if (J$.Sr(3455465))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

