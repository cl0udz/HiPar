J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(3335249, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/fingerprint.js');
            function Fingerprint(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3331617, arguments.callee, this, arguments);
                            arguments = J$.N(3331625, 'arguments', arguments, true, false, false);
                            opts = J$.N(3331633, 'opts', opts, true, false, false);
                            J$.M(3331273, J$.R(3331249, 'assert', assert, false, true), 'object', false)(J$.R(3331257, 'opts', opts, false, false), J$.T(3331265, 'options', 21, false));
                            J$.M(3331313, J$.R(3331281, 'assert', assert, false, true), 'string', false)(J$.G(3331297, J$.R(3331289, 'opts', opts, false, false), 'type'), J$.T(3331305, 'options.type', 21, false));
                            J$.M(3331353, J$.R(3331321, 'assert', assert, false, true), 'buffer', false)(J$.G(3331337, J$.R(3331329, 'opts', opts, false, false), 'hash'), J$.T(3331345, 'options.hash', 21, false));
                            J$.M(3331393, J$.R(3331361, 'assert', assert, false, true), 'string', false)(J$.G(3331377, J$.R(3331369, 'opts', opts, false, false), 'algorithm'), J$.T(3331385, 'options.algorithm', 21, false));
                            J$.P(3331433, J$.R(3331401, 'this', this, false, false), 'algorithm', J$.M(3331425, J$.G(3331417, J$.R(3331409, 'opts', opts, false, false), 'algorithm'), 'toLowerCase', false)());
                            if (J$.C(154936, J$.B(445314, '!==', J$.G(3331473, J$.G(3331449, J$.R(3331441, 'algs', algs, false, true), 'hashAlgs'), J$.G(3331465, J$.R(3331457, 'this', this, false, false), 'algorithm')), J$.T(3331481, true, 23, false))))
                                throw J$.F(3331513, J$.R(3331489, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.G(3331505, J$.R(3331497, 'this', this, false, false), 'algorithm'));
                            J$.P(3331545, J$.R(3331521, 'this', this, false, false), 'hash', J$.G(3331537, J$.R(3331529, 'opts', opts, false, false), 'hash'));
                            J$.P(3331577, J$.R(3331553, 'this', this, false, false), 'type', J$.G(3331569, J$.R(3331561, 'opts', opts, false, false), 'type'));
                            J$.P(3331609, J$.R(3331585, 'this', this, false, false), 'hashType', J$.G(3331601, J$.R(3331593, 'opts', opts, false, false), 'hashType'));
                        } catch (J$e) {
                            J$.Ex(3335425, J$e);
                        } finally {
                            if (J$.Fr(3335433))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function addColons(s) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3334777, arguments.callee, this, arguments);
                            arguments = J$.N(3334785, 'arguments', arguments, true, false, false);
                            s = J$.N(3334793, 's', s, true, false, false);
                            return J$.Rt(3334769, J$.M(3334761, J$.R(3334737, 's', s, false, false), 'replace', false)(J$.T(3334745, /(.{2})(?=.)/g, 14, false), J$.T(3334753, '$1:', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3335521, J$e);
                        } finally {
                            if (J$.Fr(3335529))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function base64Strip(s) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3334841, arguments.callee, this, arguments);
                            arguments = J$.N(3334849, 'arguments', arguments, true, false, false);
                            s = J$.N(3334857, 's', s, true, false, false);
                            return J$.Rt(3334833, J$.M(3334825, J$.R(3334801, 's', s, false, false), 'replace', false)(J$.T(3334809, /=*$/, 14, false), J$.T(3334817, '', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3335537, J$e);
                        } finally {
                            if (J$.Fr(3335545))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sshBase64Format(alg, h) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3334921, arguments.callee, this, arguments);
                            arguments = J$.N(3334929, 'arguments', arguments, true, false, false);
                            alg = J$.N(3334937, 'alg', alg, true, false, false);
                            h = J$.N(3334945, 'h', h, true, false, false);
                            return J$.Rt(3334913, J$.B(445570, '+', J$.B(445562, '+', J$.M(3334873, J$.R(3334865, 'alg', alg, false, false), 'toUpperCase', false)(), J$.T(3334881, ':', 21, false)), J$.F(3334905, J$.R(3334889, 'base64Strip', base64Strip, false, true), false)(J$.R(3334897, 'h', h, false, false))));
                        } catch (J$e) {
                            J$.Ex(3335553, J$e);
                        } finally {
                            if (J$.Fr(3335561))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3335257, 'assert', assert, false, false, false);
            J$.N(3335265, 'Buffer', Buffer, false, false, false);
            J$.N(3335273, 'algs', algs, false, false, false);
            J$.N(3335281, 'crypto', crypto, false, false, false);
            J$.N(3335289, 'errs', errs, false, false, false);
            J$.N(3335297, 'Key', Key, false, false, false);
            J$.N(3335305, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3335313, 'Certificate', Certificate, false, false, false);
            J$.N(3335321, 'utils', utils, false, false, false);
            J$.N(3335329, 'FingerprintFormatError', FingerprintFormatError, false, false, false);
            J$.N(3335337, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            Fingerprint = J$.N(3335353, 'Fingerprint', J$.T(3335345, Fingerprint, 12, false), true, false, false);
            J$.N(3335361, 'base64RE', base64RE, false, false, false);
            J$.N(3335369, 'hexRE', hexRE, false, false, false);
            addColons = J$.N(3335385, 'addColons', J$.T(3335377, addColons, 12, false), true, false, false);
            base64Strip = J$.N(3335401, 'base64Strip', J$.T(3335393, base64Strip, 12, false), true, false, false);
            sshBase64Format = J$.N(3335417, 'sshBase64Format', J$.T(3335409, sshBase64Format, 12, false), true, false, false);
            J$.T(3330609, 'use strict', 21, false);
            J$.F(3330633, J$.I(typeof require === 'undefined' ? require = J$.R(3330617, 'require', undefined, true, true) : require = J$.R(3330617, 'require', require, true, true)), false)(J$.T(3330625, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(3330657, J$.I(typeof require === 'undefined' ? require = J$.R(3330641, 'require', undefined, true, true) : require = J$.R(3330641, 'require', require, true, true)), false)(J$.T(3330649, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(3330681, J$.I(typeof require === 'undefined' ? require = J$.R(3330665, 'require', undefined, true, true) : require = J$.R(3330665, 'require', require, true, true)), false)(J$.T(3330673, 'core-js/modules/es.array.join', 21, false));
            J$.F(3330705, J$.I(typeof require === 'undefined' ? require = J$.R(3330689, 'require', undefined, true, true) : require = J$.R(3330689, 'require', require, true, true)), false)(J$.T(3330697, 'core-js/modules/es.array.map', 21, false));
            J$.F(3330729, J$.I(typeof require === 'undefined' ? require = J$.R(3330713, 'require', undefined, true, true) : require = J$.R(3330713, 'require', require, true, true)), false)(J$.T(3330721, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3330753, J$.I(typeof require === 'undefined' ? require = J$.R(3330737, 'require', undefined, true, true) : require = J$.R(3330737, 'require', require, true, true)), false)(J$.T(3330745, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3330777, J$.I(typeof require === 'undefined' ? require = J$.R(3330761, 'require', undefined, true, true) : require = J$.R(3330761, 'require', require, true, true)), false)(J$.T(3330769, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3330801, J$.I(typeof require === 'undefined' ? require = J$.R(3330785, 'require', undefined, true, true) : require = J$.R(3330785, 'require', require, true, true)), false)(J$.T(3330793, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3330825, J$.I(typeof require === 'undefined' ? require = J$.R(3330809, 'require', undefined, true, true) : require = J$.R(3330809, 'require', require, true, true)), false)(J$.T(3330817, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3330849, J$.I(typeof require === 'undefined' ? require = J$.R(3330833, 'require', undefined, true, true) : require = J$.R(3330833, 'require', require, true, true)), false)(J$.T(3330841, 'core-js/modules/es.string.replace', 21, false));
            J$.F(3330873, J$.I(typeof require === 'undefined' ? require = J$.R(3330857, 'require', undefined, true, true) : require = J$.R(3330857, 'require', require, true, true)), false)(J$.T(3330865, 'core-js/modules/es.string.split', 21, false));
            J$.P(3330897, J$.I(typeof module === 'undefined' ? module = J$.R(3330881, 'module', undefined, true, true) : module = J$.R(3330881, 'module', module, true, true)), 'exports', J$.R(3330889, 'Fingerprint', Fingerprint, false, true));
            var assert = J$.W(3330929, 'assert', J$.F(3330921, J$.I(typeof require === 'undefined' ? require = J$.R(3330905, 'require', undefined, true, true) : require = J$.R(3330905, 'require', require, true, true)), false)(J$.T(3330913, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3330969, 'Buffer', J$.G(3330961, J$.F(3330953, J$.I(typeof require === 'undefined' ? require = J$.R(3330937, 'require', undefined, true, true) : require = J$.R(3330937, 'require', require, true, true)), false)(J$.T(3330945, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3331001, 'algs', J$.F(3330993, J$.I(typeof require === 'undefined' ? require = J$.R(3330977, 'require', undefined, true, true) : require = J$.R(3330977, 'require', require, true, true)), false)(J$.T(3330985, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(3331033, 'crypto', J$.F(3331025, J$.I(typeof require === 'undefined' ? require = J$.R(3331009, 'require', undefined, true, true) : require = J$.R(3331009, 'require', require, true, true)), false)(J$.T(3331017, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(3331065, 'errs', J$.F(3331057, J$.I(typeof require === 'undefined' ? require = J$.R(3331041, 'require', undefined, true, true) : require = J$.R(3331041, 'require', require, true, true)), false)(J$.T(3331049, './errors', 21, false)), errs, false, true);
            var Key = J$.W(3331097, 'Key', J$.F(3331089, J$.I(typeof require === 'undefined' ? require = J$.R(3331073, 'require', undefined, true, true) : require = J$.R(3331073, 'require', require, true, true)), false)(J$.T(3331081, './key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3331129, 'PrivateKey', J$.F(3331121, J$.I(typeof require === 'undefined' ? require = J$.R(3331105, 'require', undefined, true, true) : require = J$.R(3331105, 'require', require, true, true)), false)(J$.T(3331113, './private-key', 21, false)), PrivateKey, false, true);
            var Certificate = J$.W(3331161, 'Certificate', J$.F(3331153, J$.I(typeof require === 'undefined' ? require = J$.R(3331137, 'require', undefined, true, true) : require = J$.R(3331137, 'require', require, true, true)), false)(J$.T(3331145, './certificate', 21, false)), Certificate, false, true);
            var utils = J$.W(3331193, 'utils', J$.F(3331185, J$.I(typeof require === 'undefined' ? require = J$.R(3331169, 'require', undefined, true, true) : require = J$.R(3331169, 'require', require, true, true)), false)(J$.T(3331177, './utils', 21, false)), utils, false, true);
            var FingerprintFormatError = J$.W(3331217, 'FingerprintFormatError', J$.G(3331209, J$.R(3331201, 'errs', errs, false, true), 'FingerprintFormatError'), FingerprintFormatError, false, true);
            var InvalidAlgorithmError = J$.W(3331241, 'InvalidAlgorithmError', J$.G(3331233, J$.R(3331225, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            J$.P(3332121, J$.G(3331649, J$.R(3331641, 'Fingerprint', Fingerprint, false, true), 'prototype'), 'toString', J$.T(3332113, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3332089, arguments.callee, this, arguments);
                            arguments = J$.N(3332097, 'arguments', arguments, true, false, false);
                            format = J$.N(3332105, 'format', format, true, false, false);
                            if (J$.C(154960, J$.B(445322, '===', J$.R(3331657, 'format', format, false, false), J$.T(3331665, undefined, 24, false)))) {
                                if (J$.C(154952, J$.C(154944, J$.B(445330, '===', J$.G(3331681, J$.R(3331673, 'this', this, false, false), 'algorithm'), J$.T(3331689, 'md5', 21, false))) ? J$._() : J$.B(445338, '===', J$.G(3331705, J$.R(3331697, 'this', this, false, false), 'hashType'), J$.T(3331713, 'spki', 21, false))))
                                    format = J$.W(3331729, 'format', J$.T(3331721, 'hex', 21, false), format, false, false);
                                else
                                    format = J$.W(3331745, 'format', J$.T(3331737, 'base64', 21, false), format, false, false);
                            }
                            J$.M(3331769, J$.R(3331753, 'assert', assert, false, true), 'string', false)(J$.R(3331761, 'format', format, false, false));
                            switch (J$.C1(154984, J$.R(3331777, 'format', format, false, false))) {
                            case J$.C2(154992, J$.T(3331905, 'hex', 21, false)):
                                if (J$.C(154968, J$.B(445346, '===', J$.G(3331793, J$.R(3331785, 'this', this, false, false), 'hashType'), J$.T(3331801, 'spki', 21, false))))
                                    return J$.Rt(3331841, J$.M(3331833, J$.G(3331817, J$.R(3331809, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(3331825, 'hex', 21, false)));
                                return J$.Rt(3331897, J$.F(3331889, J$.R(3331849, 'addColons', addColons, false, true), false)(J$.M(3331881, J$.G(3331865, J$.R(3331857, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(3331873, 'hex', 21, false))));
                            case J$.C2(155000, J$.T(3332049, 'base64', 21, false)):
                                if (J$.C(154976, J$.B(445354, '===', J$.G(3331921, J$.R(3331913, 'this', this, false, false), 'hashType'), J$.T(3331929, 'spki', 21, false))))
                                    return J$.Rt(3331969, J$.M(3331961, J$.G(3331945, J$.R(3331937, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(3331953, 'base64', 21, false)));
                                return J$.Rt(3332041, J$.F(3332033, J$.R(3331977, 'sshBase64Format', sshBase64Format, false, true), false)(J$.G(3331993, J$.R(3331985, 'this', this, false, false), 'algorithm'), J$.M(3332025, J$.G(3332009, J$.R(3332001, 'this', this, false, false), 'hash'), 'toString', false)(J$.T(3332017, 'base64', 21, false))));
                            default:
                                throw J$.F(3332081, J$.R(3332057, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.T(3332065, undefined, 24, false), J$.R(3332073, 'format', format, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3335441, J$e);
                        } finally {
                            if (J$.Fr(3335449))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3332849, J$.G(3332137, J$.R(3332129, 'Fingerprint', Fingerprint, false, true), 'prototype'), 'matches', J$.T(3332841, function (other) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3332801, arguments.callee, this, arguments);
                            arguments = J$.N(3332809, 'arguments', arguments, true, false, false);
                            other = J$.N(3332817, 'other', other, true, false, false);
                            J$.N(3332825, 'theirHash', theirHash, false, false, false);
                            J$.N(3332833, 'theirHash2', theirHash2, false, false, false);
                            J$.M(3332169, J$.R(3332145, 'assert', assert, false, true), 'object', false)(J$.R(3332153, 'other', other, false, false), J$.T(3332161, 'key or certificate', 21, false));
                            if (J$.C(155032, J$.C(155008, J$.B(445362, '===', J$.G(3332185, J$.R(3332177, 'this', this, false, false), 'type'), J$.T(3332193, 'key', 21, false))) ? J$.B(445370, '!==', J$.G(3332209, J$.R(3332201, 'this', this, false, false), 'hashType'), J$.T(3332217, 'ssh', 21, false)) : J$._())) {
                                J$.M(3332281, J$.R(3332225, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(3332233, 'other', other, false, false), J$.R(3332241, 'Key', Key, false, true), J$.T(3332265, [
                                    J$.T(3332249, 1, 22, false),
                                    J$.T(3332257, 7, 22, false)
                                ], 10, false), J$.T(3332273, 'key with spki', 21, false));
                                if (J$.C(155016, J$.M(3332305, J$.R(3332289, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3332297, 'other', other, false, false)))) {
                                    J$.M(3332369, J$.R(3332313, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(3332321, 'other', other, false, false), J$.R(3332329, 'PrivateKey', PrivateKey, false, true), J$.T(3332353, [
                                        J$.T(3332337, 1, 22, false),
                                        J$.T(3332345, 6, 22, false)
                                    ], 10, false), J$.T(3332361, 'privatekey with spki support', 21, false));
                                }
                            } else if (J$.C(155024, J$.B(445378, '===', J$.G(3332385, J$.R(3332377, 'this', this, false, false), 'type'), J$.T(3332393, 'key', 21, false)))) {
                                J$.M(3332457, J$.R(3332401, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(3332409, 'other', other, false, false), J$.R(3332417, 'Key', Key, false, true), J$.T(3332441, [
                                    J$.T(3332425, 1, 22, false),
                                    J$.T(3332433, 0, 22, false)
                                ], 10, false), J$.T(3332449, 'key', 21, false));
                            } else {
                                J$.M(3332521, J$.R(3332465, 'utils', utils, false, true), 'assertCompatible', false)(J$.R(3332473, 'other', other, false, false), J$.R(3332481, 'Certificate', Certificate, false, true), J$.T(3332505, [
                                    J$.T(3332489, 1, 22, false),
                                    J$.T(3332497, 0, 22, false)
                                ], 10, false), J$.T(3332513, 'certificate', 21, false));
                            }
                            var theirHash = J$.W(3332577, 'theirHash', J$.M(3332569, J$.R(3332529, 'other', other, false, false), 'hash', false)(J$.G(3332545, J$.R(3332537, 'this', this, false, false), 'algorithm'), J$.G(3332561, J$.R(3332553, 'this', this, false, false), 'hashType')), theirHash, false, false);
                            var theirHash2 = J$.W(3332649, 'theirHash2', J$.M(3332641, J$.M(3332625, J$.M(3332609, J$.R(3332585, 'crypto', crypto, false, true), 'createHash', false)(J$.G(3332601, J$.R(3332593, 'this', this, false, false), 'algorithm')), 'update', false)(J$.R(3332617, 'theirHash', theirHash, false, false)), 'digest', false)(J$.T(3332633, 'base64', 21, false)), theirHash2, false, false);
                            if (J$.C(155040, J$.B(445386, '===', J$.G(3332665, J$.R(3332657, 'this', this, false, false), 'hash2'), J$.T(3332673, undefined, 24, false))))
                                J$.P(3332761, J$.R(3332681, 'this', this, false, false), 'hash2', J$.M(3332753, J$.M(3332737, J$.M(3332713, J$.R(3332689, 'crypto', crypto, false, true), 'createHash', false)(J$.G(3332705, J$.R(3332697, 'this', this, false, false), 'algorithm')), 'update', false)(J$.G(3332729, J$.R(3332721, 'this', this, false, false), 'hash')), 'digest', false)(J$.T(3332745, 'base64', 21, false)));
                            return J$.Rt(3332793, J$.B(445394, '===', J$.G(3332777, J$.R(3332769, 'this', this, false, false), 'hash2'), J$.R(3332785, 'theirHash2', theirHash2, false, false)));
                        } catch (J$e) {
                            J$.Ex(3335457, J$e);
                        } finally {
                            if (J$.Fr(3335465))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var base64RE = J$.W(3332865, 'base64RE', J$.T(3332857, /^[A-Za-z0-9+\/=]+$/, 14, false), base64RE, false, true);
            var hexRE = J$.W(3332881, 'hexRE', J$.T(3332873, /^[a-fA-F0-9]+$/, 14, false), hexRE, false, true);
            J$.P(3334729, J$.R(3332889, 'Fingerprint', Fingerprint, false, true), 'parse', J$.T(3334721, function (fp, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3334649, arguments.callee, this, arguments);
                            arguments = J$.N(3334657, 'arguments', arguments, true, false, false);
                            fp = J$.N(3334665, 'fp', fp, true, false, false);
                            options = J$.N(3334673, 'options', options, true, false, false);
                            J$.N(3334681, 'alg', alg, false, false, false);
                            J$.N(3334689, 'hash', hash, false, false, false);
                            J$.N(3334697, 'enAlgs', enAlgs, false, false, false);
                            J$.N(3334705, 'hashType', hashType, false, false, false);
                            J$.N(3334713, 'parts', parts, false, false, false);
                            J$.M(3332921, J$.R(3332897, 'assert', assert, false, true), 'string', false)(J$.R(3332905, 'fp', fp, false, false), J$.T(3332913, 'fingerprint', 21, false));
                            var alg, hash, enAlgs;
                            if (J$.C(155048, J$.M(3332945, J$.I(typeof Array === 'undefined' ? Array = J$.R(3332929, 'Array', undefined, true, true) : Array = J$.R(3332929, 'Array', Array, true, true)), 'isArray', false)(J$.R(3332937, 'options', options, false, false)))) {
                                enAlgs = J$.W(3332961, 'enAlgs', J$.R(3332953, 'options', options, false, false), enAlgs, false, false);
                                options = J$.W(3332977, 'options', J$.T(3332969, {}, 11, false), options, false, false);
                            }
                            J$.M(3333009, J$.R(3332985, 'assert', assert, false, true), 'optionalObject', false)(J$.R(3332993, 'options', options, false, false), J$.T(3333001, 'options', 21, false));
                            if (J$.C(155056, J$.B(445402, '===', J$.R(3333017, 'options', options, false, false), J$.T(3333025, undefined, 24, false))))
                                options = J$.W(3333041, 'options', J$.T(3333033, {}, 11, false), options, false, false);
                            if (J$.C(155064, J$.B(445410, '!==', J$.G(3333057, J$.R(3333049, 'options', options, false, false), 'enAlgs'), J$.T(3333065, undefined, 24, false))))
                                enAlgs = J$.W(3333089, 'enAlgs', J$.G(3333081, J$.R(3333073, 'options', options, false, false), 'enAlgs'), enAlgs, false, false);
                            if (J$.C(155072, J$.B(445418, '!==', J$.G(3333105, J$.R(3333097, 'options', options, false, false), 'algorithms'), J$.T(3333113, undefined, 24, false))))
                                enAlgs = J$.W(3333137, 'enAlgs', J$.G(3333129, J$.R(3333121, 'options', options, false, false), 'algorithms'), enAlgs, false, false);
                            J$.M(3333169, J$.R(3333145, 'assert', assert, false, true), 'optionalArrayOfString', false)(J$.R(3333153, 'enAlgs', enAlgs, false, false), J$.T(3333161, 'algorithms', 21, false));
                            var hashType = J$.W(3333185, 'hashType', J$.T(3333177, 'ssh', 21, false), hashType, false, false);
                            if (J$.C(155080, J$.B(445426, '!==', J$.G(3333201, J$.R(3333193, 'options', options, false, false), 'hashType'), J$.T(3333209, undefined, 24, false))))
                                hashType = J$.W(3333233, 'hashType', J$.G(3333225, J$.R(3333217, 'options', options, false, false), 'hashType'), hashType, false, false);
                            J$.M(3333265, J$.R(3333241, 'assert', assert, false, true), 'string', false)(J$.R(3333249, 'hashType', hashType, false, false), J$.T(3333257, 'options.hashType', 21, false));
                            var parts = J$.W(3333297, 'parts', J$.M(3333289, J$.R(3333273, 'fp', fp, false, false), 'split', false)(J$.T(3333281, ':', 21, false)), parts, false, false);
                            if (J$.C(155208, J$.B(445434, '==', J$.G(3333313, J$.R(3333305, 'parts', parts, false, false), 'length'), J$.T(3333321, 2, 22, false)))) {
                                alg = J$.W(3333361, 'alg', J$.M(3333353, J$.G(3333345, J$.R(3333329, 'parts', parts, false, false), J$.T(3333337, 0, 22, false)), 'toLowerCase', false)(), alg, false, false);
                                if (J$.C(155088, J$.U(445442, '!', J$.M(3333401, J$.R(3333369, 'base64RE', base64RE, false, true), 'test', false)(J$.G(3333393, J$.R(3333377, 'parts', parts, false, false), J$.T(3333385, 1, 22, false))))))
                                    throw J$.F(3333425, J$.R(3333409, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3333417, 'fp', fp, false, false));
                                try {
                                    hash = J$.W(3333481, 'hash', J$.M(3333473, J$.R(3333433, 'Buffer', Buffer, false, true), 'from', false)(J$.G(3333457, J$.R(3333441, 'parts', parts, false, false), J$.T(3333449, 1, 22, false)), J$.T(3333465, 'base64', 21, false)), hash, false, false);
                                } catch (e) {
                                    J$.N(3333513, 'e', e, false, false, true);
                                    throw J$.F(3333505, J$.R(3333489, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3333497, 'fp', fp, false, false));
                                }
                            } else if (J$.C(155200, J$.B(445450, '>', J$.G(3333529, J$.R(3333521, 'parts', parts, false, false), 'length'), J$.T(3333537, 2, 22, false)))) {
                                alg = J$.W(3333553, 'alg', J$.T(3333545, 'md5', 21, false), alg, false, false);
                                if (J$.C(155096, J$.B(445458, '===', J$.M(3333585, J$.G(3333577, J$.R(3333561, 'parts', parts, false, false), J$.T(3333569, 0, 22, false)), 'toLowerCase', false)(), J$.T(3333593, 'md5', 21, false))))
                                    parts = J$.W(3333625, 'parts', J$.M(3333617, J$.R(3333601, 'parts', parts, false, false), 'slice', false)(J$.T(3333609, 1, 22, false)), parts, false, false);
                                parts = J$.W(3333793, 'parts', J$.M(3333785, J$.R(3333633, 'parts', parts, false, false), 'map', false)(J$.T(3333777, function (p) {
                                    jalangiLabel3:
                                        while (true) {
                                            try {
                                                J$.Fe(3333753, arguments.callee, this, arguments);
                                                arguments = J$.N(3333761, 'arguments', arguments, true, false, false);
                                                p = J$.N(3333769, 'p', p, true, false, false);
                                                while (J$.C(155104, J$.B(445466, '<', J$.G(3333649, J$.R(3333641, 'p', p, false, false), 'length'), J$.T(3333657, 2, 22, false)))) {
                                                    p = J$.W(3333681, 'p', J$.B(445474, '+', J$.T(3333665, '0', 21, false), J$.R(3333673, 'p', p, false, false)), p, false, false);
                                                }
                                                if (J$.C(155112, J$.B(445482, '>', J$.G(3333697, J$.R(3333689, 'p', p, false, false), 'length'), J$.T(3333705, 2, 22, false))))
                                                    throw J$.F(3333729, J$.R(3333713, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3333721, 'fp', fp, false, false));
                                                return J$.Rt(3333745, J$.R(3333737, 'p', p, false, false));
                                            } catch (J$e) {
                                                J$.Ex(3335473, J$e);
                                            } finally {
                                                if (J$.Fr(3335481))
                                                    continue jalangiLabel3;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), parts, false, false);
                                parts = J$.W(3333825, 'parts', J$.M(3333817, J$.R(3333801, 'parts', parts, false, false), 'join', false)(J$.T(3333809, '', 21, false)), parts, false, false);
                                if (J$.C(155128, J$.C(155120, J$.U(445490, '!', J$.M(3333849, J$.R(3333833, 'hexRE', hexRE, false, true), 'test', false)(J$.R(3333841, 'parts', parts, false, false)))) ? J$._() : J$.B(445506, '!==', J$.B(445498, '%', J$.G(3333865, J$.R(3333857, 'parts', parts, false, false), 'length'), J$.T(3333873, 2, 22, false)), J$.T(3333881, 0, 22, false))))
                                    throw J$.F(3333905, J$.R(3333889, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3333897, 'fp', fp, false, false));
                                try {
                                    hash = J$.W(3333945, 'hash', J$.M(3333937, J$.R(3333913, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3333921, 'parts', parts, false, false), J$.T(3333929, 'hex', 21, false)), hash, false, false);
                                } catch (e) {
                                    J$.N(3333977, 'e', e, false, false, true);
                                    throw J$.F(3333969, J$.R(3333953, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3333961, 'fp', fp, false, false));
                                }
                            } else {
                                if (J$.C(155144, J$.M(3334001, J$.R(3333985, 'hexRE', hexRE, false, true), 'test', false)(J$.R(3333993, 'fp', fp, false, false)))) {
                                    hash = J$.W(3334041, 'hash', J$.M(3334033, J$.R(3334009, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3334017, 'fp', fp, false, false), J$.T(3334025, 'hex', 21, false)), hash, false, false);
                                } else if (J$.C(155136, J$.M(3334065, J$.R(3334049, 'base64RE', base64RE, false, true), 'test', false)(J$.R(3334057, 'fp', fp, false, false)))) {
                                    hash = J$.W(3334105, 'hash', J$.M(3334097, J$.R(3334073, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3334081, 'fp', fp, false, false), J$.T(3334089, 'base64', 21, false)), hash, false, false);
                                } else {
                                    throw J$.F(3334129, J$.R(3334113, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3334121, 'fp', fp, false, false));
                                }
                                switch (J$.C1(155152, J$.G(3334145, J$.R(3334137, 'hash', hash, false, false), 'length'))) {
                                case J$.C2(155160, J$.T(3334169, 32, 22, false)):
                                    alg = J$.W(3334161, 'alg', J$.T(3334153, 'sha256', 21, false), alg, false, false);
                                    break;
                                case J$.C2(155168, J$.T(3334193, 16, 22, false)):
                                    alg = J$.W(3334185, 'alg', J$.T(3334177, 'md5', 21, false), alg, false, false);
                                    break;
                                case J$.C2(155176, J$.T(3334217, 20, 22, false)):
                                    alg = J$.W(3334209, 'alg', J$.T(3334201, 'sha1', 21, false), alg, false, false);
                                    break;
                                case J$.C2(155184, J$.T(3334241, 64, 22, false)):
                                    alg = J$.W(3334233, 'alg', J$.T(3334225, 'sha512', 21, false), alg, false, false);
                                    break;
                                default:
                                    throw J$.F(3334265, J$.R(3334249, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3334257, 'fp', fp, false, false));
                                }
                                if (J$.C(155192, J$.B(445514, '===', J$.G(3334281, J$.R(3334273, 'options', options, false, false), 'hashType'), J$.T(3334289, undefined, 24, false))))
                                    hashType = J$.W(3334305, 'hashType', J$.T(3334297, 'spki', 21, false), hashType, false, false);
                            }
                            if (J$.C(155216, J$.B(445522, '===', J$.R(3334313, 'alg', alg, false, false), J$.T(3334321, undefined, 24, false))))
                                throw J$.F(3334345, J$.R(3334329, 'FingerprintFormatError', FingerprintFormatError, false, true), true)(J$.R(3334337, 'fp', fp, false, false));
                            if (J$.C(155224, J$.B(445530, '===', J$.G(3334377, J$.G(3334361, J$.R(3334353, 'algs', algs, false, true), 'hashAlgs'), J$.R(3334369, 'alg', alg, false, false)), J$.T(3334385, undefined, 24, false))))
                                throw J$.F(3334409, J$.R(3334393, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(3334401, 'alg', alg, false, false));
                            if (J$.C(155240, J$.B(445538, '!==', J$.R(3334417, 'enAlgs', enAlgs, false, false), J$.T(3334425, undefined, 24, false)))) {
                                enAlgs = J$.W(3334505, 'enAlgs', J$.M(3334497, J$.R(3334433, 'enAlgs', enAlgs, false, false), 'map', false)(J$.T(3334489, function (a) {
                                    jalangiLabel4:
                                        while (true) {
                                            try {
                                                J$.Fe(3334465, arguments.callee, this, arguments);
                                                arguments = J$.N(3334473, 'arguments', arguments, true, false, false);
                                                a = J$.N(3334481, 'a', a, true, false, false);
                                                return J$.Rt(3334457, J$.M(3334449, J$.R(3334441, 'a', a, false, false), 'toLowerCase', false)());
                                            } catch (J$e) {
                                                J$.Ex(3335489, J$e);
                                            } finally {
                                                if (J$.Fr(3335497))
                                                    continue jalangiLabel4;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), enAlgs, false, false);
                                if (J$.C(155232, J$.B(445554, '===', J$.M(3334529, J$.R(3334513, 'enAlgs', enAlgs, false, false), 'indexOf', false)(J$.R(3334521, 'alg', alg, false, false)), J$.U(445546, '-', J$.T(3334537, 1, 22, false)))))
                                    throw J$.F(3334561, J$.R(3334545, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(3334553, 'alg', alg, false, false));
                            }
                            return J$.Rt(3334641, J$.F(3334633, J$.R(3334569, 'Fingerprint', Fingerprint, false, true), true)(J$.T(3334625, {
                                algorithm: J$.R(3334577, 'alg', alg, false, false),
                                hash: J$.R(3334585, 'hash', hash, false, false),
                                type: J$.C(155248, J$.G(3334601, J$.R(3334593, 'options', options, false, false), 'type')) ? J$._() : J$.T(3334609, 'key', 21, false),
                                hashType: J$.R(3334617, 'hashType', hashType, false, false)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(3335505, J$e);
                        } finally {
                            if (J$.Fr(3335513))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3335049, J$.R(3334953, 'Fingerprint', Fingerprint, false, true), 'isFingerprint', J$.T(3335041, function (obj, ver) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3335009, arguments.callee, this, arguments);
                            arguments = J$.N(3335017, 'arguments', arguments, true, false, false);
                            obj = J$.N(3335025, 'obj', obj, true, false, false);
                            ver = J$.N(3335033, 'ver', ver, true, false, false);
                            return J$.Rt(3335001, J$.M(3334993, J$.R(3334961, 'utils', utils, false, true), 'isCompatible', false)(J$.R(3334969, 'obj', obj, false, false), J$.R(3334977, 'Fingerprint', Fingerprint, false, true), J$.R(3334985, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(3335569, J$e);
                        } finally {
                            if (J$.Fr(3335577))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3335097, J$.G(3335065, J$.R(3335057, 'Fingerprint', Fingerprint, false, true), 'prototype'), '_sshpkApiVersion', J$.T(3335089, [
                J$.T(3335073, 1, 22, false),
                J$.T(3335081, 2, 22, false)
            ], 10, false));
            J$.P(3335241, J$.R(3335105, 'Fingerprint', Fingerprint, false, true), '_oldVersionDetect', J$.T(3335233, function (obj) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3335209, arguments.callee, this, arguments);
                            arguments = J$.N(3335217, 'arguments', arguments, true, false, false);
                            obj = J$.N(3335225, 'obj', obj, true, false, false);
                            J$.M(3335137, J$.R(3335113, 'assert', assert, false, true), 'func', false)(J$.G(3335129, J$.R(3335121, 'obj', obj, false, false), 'toString'));
                            J$.M(3335169, J$.R(3335145, 'assert', assert, false, true), 'func', false)(J$.G(3335161, J$.R(3335153, 'obj', obj, false, false), 'matches'));
                            return J$.Rt(3335201, J$.T(3335193, [
                                J$.T(3335177, 1, 22, false),
                                J$.T(3335185, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(3335585, J$e);
                        } finally {
                            if (J$.Fr(3335593))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3335601, J$e);
        } finally {
            if (J$.Sr(3335609))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

