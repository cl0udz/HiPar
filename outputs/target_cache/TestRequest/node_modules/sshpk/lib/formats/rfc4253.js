J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(3393409, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/rfc4253.js');
            function _typeof(obj) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3389769, arguments.callee, this, arguments);
                            arguments = J$.N(3389777, 'arguments', arguments, true, false, false);
                            obj = J$.N(3389785, 'obj', obj, true, false, false);
                            if (J$.C(157384, J$.C(157344, J$.B(448722, '===', J$.U(448714, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(3389505, 'Symbol', undefined, true, true) : Symbol = J$.R(3389505, 'Symbol', Symbol, true, true))), J$.T(3389513, 'function', 21, false))) ? J$.B(448738, '===', J$.U(448730, 'typeof', J$.G(3389529, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(3389521, 'Symbol', undefined, true, true) : Symbol = J$.R(3389521, 'Symbol', Symbol, true, true)), 'iterator')), J$.T(3389537, 'symbol', 21, false)) : J$._())) {
                                _typeof = J$.W(3389593, '_typeof', J$.T(3389585, function _typeof(obj) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(3389561, arguments.callee, this, arguments);
                                                arguments = J$.N(3389569, 'arguments', arguments, true, false, false);
                                                obj = J$.N(3389577, 'obj', obj, true, false, false);
                                                return J$.Rt(3389553, J$.U(448746, 'typeof', J$.R(3389545, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(3393553, J$e);
                                            } finally {
                                                if (J$.Fr(3393561))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            } else {
                                _typeof = J$.W(3389729, '_typeof', J$.T(3389721, function _typeof(obj) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(3389697, arguments.callee, this, arguments);
                                                arguments = J$.N(3389705, 'arguments', arguments, true, false, false);
                                                obj = J$.N(3389713, 'obj', obj, true, false, false);
                                                return J$.Rt(3389689, J$.C(157376, J$.C(157368, J$.C(157360, J$.C(157352, J$.R(3389601, 'obj', obj, false, false)) ? J$.B(448762, '===', J$.U(448754, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(3389609, 'Symbol', undefined, true, true) : Symbol = J$.R(3389609, 'Symbol', Symbol, true, true))), J$.T(3389617, 'function', 21, false)) : J$._()) ? J$.B(448770, '===', J$.G(3389633, J$.R(3389625, 'obj', obj, false, false), 'constructor'), J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(3389641, 'Symbol', undefined, true, true) : Symbol = J$.R(3389641, 'Symbol', Symbol, true, true))) : J$._()) ? J$.B(448778, '!==', J$.R(3389649, 'obj', obj, false, false), J$.G(3389665, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(3389657, 'Symbol', undefined, true, true) : Symbol = J$.R(3389657, 'Symbol', Symbol, true, true)), 'prototype')) : J$._()) ? J$.T(3389673, 'symbol', 21, false) : J$.U(448786, 'typeof', J$.R(3389681, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(3393569, J$e);
                                            } finally {
                                                if (J$.Fr(3393577))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            }
                            return J$.Rt(3389761, J$.F(3389753, J$.R(3389737, '_typeof', _typeof, false, true), false)(J$.R(3389745, 'obj', obj, false, false)));
                        } catch (J$e) {
                            J$.Ex(3393585, J$e);
                        } finally {
                            if (J$.Fr(3393593))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function algToKeyType(alg) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3390409, arguments.callee, this, arguments);
                            arguments = J$.N(3390417, 'arguments', arguments, true, false, false);
                            alg = J$.N(3390425, 'alg', alg, true, false, false);
                            J$.M(3390201, J$.R(3390185, 'assert', assert, false, true), 'string', false)(J$.R(3390193, 'alg', alg, false, false));
                            if (J$.C(157424, J$.B(448794, '===', J$.R(3390209, 'alg', alg, false, false), J$.T(3390217, 'ssh-dss', 21, false))))
                                return J$.Rt(3390233, J$.T(3390225, 'dsa', 21, false));
                            else if (J$.C(157416, J$.B(448802, '===', J$.R(3390241, 'alg', alg, false, false), J$.T(3390249, 'ssh-rsa', 21, false))))
                                return J$.Rt(3390265, J$.T(3390257, 'rsa', 21, false));
                            else if (J$.C(157408, J$.B(448810, '===', J$.R(3390273, 'alg', alg, false, false), J$.T(3390281, 'ssh-ed25519', 21, false))))
                                return J$.Rt(3390297, J$.T(3390289, 'ed25519', 21, false));
                            else if (J$.C(157400, J$.B(448818, '===', J$.R(3390305, 'alg', alg, false, false), J$.T(3390313, 'ssh-curve25519', 21, false))))
                                return J$.Rt(3390329, J$.T(3390321, 'curve25519', 21, false));
                            else if (J$.C(157392, J$.M(3390353, J$.R(3390337, 'alg', alg, false, false), 'match', false)(J$.T(3390345, /^ecdsa-sha2-/, 14, false))))
                                return J$.Rt(3390369, J$.T(3390361, 'ecdsa', 21, false));
                            else
                                throw J$.F(3390401, J$.I(typeof Error === 'undefined' ? Error = J$.R(3390377, 'Error', undefined, true, true) : Error = J$.R(3390377, 'Error', Error, true, true)), true)(J$.B(448826, '+', J$.T(3390385, 'Unknown algorithm ', 21, false), J$.R(3390393, 'alg', alg, false, false)));
                        } catch (J$e) {
                            J$.Ex(3393601, J$e);
                        } finally {
                            if (J$.Fr(3393609))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function keyTypeToAlg(key) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3390737, arguments.callee, this, arguments);
                            arguments = J$.N(3390745, 'arguments', arguments, true, false, false);
                            key = J$.N(3390753, 'key', key, true, false, false);
                            J$.M(3390449, J$.R(3390433, 'assert', assert, false, true), 'object', false)(J$.R(3390441, 'key', key, false, false));
                            if (J$.C(157464, J$.B(448834, '===', J$.G(3390465, J$.R(3390457, 'key', key, false, false), 'type'), J$.T(3390473, 'dsa', 21, false))))
                                return J$.Rt(3390489, J$.T(3390481, 'ssh-dss', 21, false));
                            else if (J$.C(157456, J$.B(448842, '===', J$.G(3390505, J$.R(3390497, 'key', key, false, false), 'type'), J$.T(3390513, 'rsa', 21, false))))
                                return J$.Rt(3390529, J$.T(3390521, 'ssh-rsa', 21, false));
                            else if (J$.C(157448, J$.B(448850, '===', J$.G(3390545, J$.R(3390537, 'key', key, false, false), 'type'), J$.T(3390553, 'ed25519', 21, false))))
                                return J$.Rt(3390569, J$.T(3390561, 'ssh-ed25519', 21, false));
                            else if (J$.C(157440, J$.B(448858, '===', J$.G(3390585, J$.R(3390577, 'key', key, false, false), 'type'), J$.T(3390593, 'curve25519', 21, false))))
                                return J$.Rt(3390609, J$.T(3390601, 'ssh-curve25519', 21, false));
                            else if (J$.C(157432, J$.B(448866, '===', J$.G(3390625, J$.R(3390617, 'key', key, false, false), 'type'), J$.T(3390633, 'ecdsa', 21, false))))
                                return J$.Rt(3390689, J$.B(448874, '+', J$.T(3390641, 'ecdsa-sha2-', 21, false), J$.M(3390681, J$.G(3390673, J$.G(3390665, J$.G(3390657, J$.R(3390649, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)()));
                            else
                                throw J$.F(3390729, J$.I(typeof Error === 'undefined' ? Error = J$.R(3390697, 'Error', undefined, true, true) : Error = J$.R(3390697, 'Error', Error, true, true)), true)(J$.B(448882, '+', J$.T(3390705, 'Unknown key type ', 21, false), J$.G(3390721, J$.R(3390713, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(3393617, J$e);
                        } finally {
                            if (J$.Fr(3393625))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(partial, type, buf, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3392513, arguments.callee, this, arguments);
                            arguments = J$.N(3392521, 'arguments', arguments, true, false, false);
                            partial = J$.N(3392529, 'partial', partial, true, false, false);
                            type = J$.N(3392537, 'type', type, true, false, false);
                            buf = J$.N(3392545, 'buf', buf, true, false, false);
                            options = J$.N(3392553, 'options', options, true, false, false);
                            J$.N(3392561, 'key', key, false, false, false);
                            J$.N(3392569, 'parts', parts, false, false, false);
                            J$.N(3392577, 'sshbuf', sshbuf, false, false, false);
                            J$.N(3392585, 'alg', alg, false, false, false);
                            J$.N(3392593, 'partCount', partCount, false, false, false);
                            J$.N(3392601, 'Constructor', Constructor, false, false, false);
                            J$.N(3392609, 'algInfo', algInfo, false, false, false);
                            J$.N(3392617, 'res', res, false, false, false);
                            J$.N(3392625, 'normalized', normalized, false, false, false);
                            J$.N(3392633, 'i', i, false, false, false);
                            J$.N(3392641, 'p', p, false, false, false);
                            J$.N(3392649, 'nd', nd, false, false, false);
                            if (J$.C(157472, J$.B(448898, '===', J$.U(448890, 'typeof', J$.R(3390761, 'buf', buf, false, false)), J$.T(3390769, 'string', 21, false))))
                                buf = J$.W(3390801, 'buf', J$.M(3390793, J$.R(3390777, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3390785, 'buf', buf, false, false)), buf, false, false);
                            J$.M(3390833, J$.R(3390809, 'assert', assert, false, true), 'buffer', false)(J$.R(3390817, 'buf', buf, false, false), J$.T(3390825, 'buf', 21, false));
                            var key = J$.W(3390849, 'key', J$.T(3390841, {}, 11, false), key, false, false);
                            var parts = J$.W(3390881, 'parts', J$.P(3390873, J$.R(3390857, 'key', key, false, false), 'parts', J$.T(3390865, [], 10, false)), parts, false, false);
                            var sshbuf = J$.W(3390921, 'sshbuf', J$.F(3390913, J$.R(3390889, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3390905, { buffer: J$.R(3390897, 'buf', buf, false, false) }, 11, false)), sshbuf, false, false);
                            var alg = J$.W(3390945, 'alg', J$.M(3390937, J$.R(3390929, 'sshbuf', sshbuf, false, false), 'readString', false)(), alg, false, false);
                            J$.M(3390985, J$.R(3390953, 'assert', assert, false, true), 'ok', false)(J$.U(448906, '!', J$.M(3390969, J$.R(3390961, 'sshbuf', sshbuf, false, false), 'atEnd', false)()), J$.T(3390977, 'key must have at least one part', 21, false));
                            J$.P(3391025, J$.R(3390993, 'key', key, false, false), 'type', J$.F(3391017, J$.R(3391001, 'algToKeyType', algToKeyType, false, true), false)(J$.R(3391009, 'alg', alg, false, false)));
                            var partCount = J$.W(3391089, 'partCount', J$.G(3391081, J$.G(3391073, J$.G(3391065, J$.G(3391041, J$.R(3391033, 'algs', algs, false, true), 'info'), J$.G(3391057, J$.R(3391049, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            if (J$.C(157488, J$.C(157480, J$.R(3391097, 'type', type, false, false)) ? J$.B(448914, '===', J$.R(3391105, 'type', type, false, false), J$.T(3391113, 'private', 21, false)) : J$._()))
                                partCount = J$.W(3391177, 'partCount', J$.G(3391169, J$.G(3391161, J$.G(3391153, J$.G(3391129, J$.R(3391121, 'algs', algs, false, true), 'privInfo'), J$.G(3391145, J$.R(3391137, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(157504, J$.C(157496, J$.U(448922, '!', J$.M(3391193, J$.R(3391185, 'sshbuf', sshbuf, false, false), 'atEnd', false)())) ? J$.B(448930, '<', J$.G(3391209, J$.R(3391201, 'parts', parts, false, false), 'length'), J$.R(3391217, 'partCount', partCount, false, false)) : J$._())) {
                                J$.M(3391249, J$.R(3391225, 'parts', parts, false, false), 'push', false)(J$.M(3391241, J$.R(3391233, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            while (J$.C(157520, J$.C(157512, J$.U(448938, '!', J$.R(3391257, 'partial', partial, false, false))) ? J$.U(448946, '!', J$.M(3391273, J$.R(3391265, 'sshbuf', sshbuf, false, false), 'atEnd', false)()) : J$._())) {
                                J$.M(3391305, J$.R(3391281, 'parts', parts, false, false), 'push', false)(J$.M(3391297, J$.R(3391289, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            J$.M(3391353, J$.R(3391313, 'assert', assert, false, true), 'ok', false)(J$.B(448954, '>=', J$.G(3391329, J$.R(3391321, 'parts', parts, false, false), 'length'), J$.T(3391337, 1, 22, false)), J$.T(3391345, 'key must have at least one part', 21, false));
                            J$.M(3391401, J$.R(3391361, 'assert', assert, false, true), 'ok', false)(J$.C(157528, J$.R(3391369, 'partial', partial, false, false)) ? J$._() : J$.M(3391385, J$.R(3391377, 'sshbuf', sshbuf, false, false), 'atEnd', false)(), J$.T(3391393, 'leftover bytes at end of key', 21, false));
                            var Constructor = J$.W(3391417, 'Constructor', J$.R(3391409, 'Key', Key, false, true), Constructor, false, false);
                            var algInfo = J$.W(3391465, 'algInfo', J$.G(3391457, J$.G(3391433, J$.R(3391425, 'algs', algs, false, true), 'info'), J$.G(3391449, J$.R(3391441, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(157544, J$.C(157536, J$.B(448962, '===', J$.R(3391473, 'type', type, false, false), J$.T(3391481, 'private', 21, false))) ? J$._() : J$.B(448970, '!==', J$.G(3391505, J$.G(3391497, J$.R(3391489, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(3391521, J$.R(3391513, 'parts', parts, false, false), 'length')))) {
                                algInfo = J$.W(3391569, 'algInfo', J$.G(3391561, J$.G(3391537, J$.R(3391529, 'algs', algs, false, true), 'privInfo'), J$.G(3391553, J$.R(3391545, 'key', key, false, false), 'type')), algInfo, false, false);
                                Constructor = J$.W(3391585, 'Constructor', J$.R(3391577, 'PrivateKey', PrivateKey, false, true), Constructor, false, false);
                            }
                            J$.M(3391641, J$.R(3391593, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3391617, J$.G(3391609, J$.R(3391601, 'algInfo', algInfo, false, false), 'parts'), 'length'), J$.G(3391633, J$.R(3391625, 'parts', parts, false, false), 'length'));
                            if (J$.C(157552, J$.B(448978, '===', J$.G(3391657, J$.R(3391649, 'key', key, false, false), 'type'), J$.T(3391665, 'ecdsa', 21, false)))) {
                                var res = J$.W(3391697, 'res', J$.M(3391689, J$.T(3391673, /^ecdsa-sha2-(.+)$/, 14, false), 'exec', false)(J$.R(3391681, 'alg', alg, false, false)), res, false, false);
                                J$.M(3391729, J$.R(3391705, 'assert', assert, false, true), 'ok', false)(J$.B(448986, '!==', J$.R(3391713, 'res', res, false, false), J$.T(3391721, null, 25, false)));
                                J$.M(3391809, J$.R(3391737, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3391761, J$.R(3391745, 'res', res, false, false), J$.T(3391753, 1, 22, false)), J$.M(3391801, J$.G(3391793, J$.G(3391785, J$.R(3391769, 'parts', parts, false, false), J$.T(3391777, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            var normalized = J$.W(3391825, 'normalized', J$.T(3391817, true, 23, false), normalized, false, false);
                            for (var i = J$.W(3391841, 'i', J$.T(3391833, 0, 22, false), i, false, false); J$.C(157608, J$.B(448994, '<', J$.R(3391849, 'i', i, false, false), J$.G(3391873, J$.G(3391865, J$.R(3391857, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(3391889, 'i', J$.B(449010, '+', J$.U(449002, '+', J$.R(3391881, 'i', i, false, false)), 1), i, false, false)) {
                                var p = J$.W(3391921, 'p', J$.G(3391913, J$.R(3391897, 'parts', parts, false, false), J$.R(3391905, 'i', i, false, false)), p, false, false);
                                J$.P(3391969, J$.R(3391929, 'p', p, false, false), 'name', J$.G(3391961, J$.G(3391945, J$.R(3391937, 'algInfo', algInfo, false, false), 'parts'), J$.R(3391953, 'i', i, false, false)));
                                if (J$.C(157568, J$.C(157560, J$.B(449018, '===', J$.G(3391985, J$.R(3391977, 'key', key, false, false), 'type'), J$.T(3391993, 'ed25519', 21, false))) ? J$.B(449026, '===', J$.G(3392009, J$.R(3392001, 'p', p, false, false), 'name'), J$.T(3392017, 'k', 21, false)) : J$._()))
                                    J$.P(3392073, J$.R(3392025, 'p', p, false, false), 'data', J$.M(3392065, J$.G(3392041, J$.R(3392033, 'p', p, false, false), 'data'), 'slice', false)(J$.T(3392049, 0, 22, false), J$.T(3392057, 32, 22, false)));
                                if (J$.C(157600, J$.C(157576, J$.B(449034, '!==', J$.G(3392089, J$.R(3392081, 'p', p, false, false), 'name'), J$.T(3392097, 'curve', 21, false))) ? J$.B(449042, '!==', J$.G(3392113, J$.R(3392105, 'algInfo', algInfo, false, false), 'normalize'), J$.T(3392121, false, 23, false)) : J$._())) {
                                    var nd;
                                    if (J$.C(157584, J$.B(449050, '===', J$.G(3392137, J$.R(3392129, 'key', key, false, false), 'type'), J$.T(3392145, 'ed25519', 21, false)))) {
                                        nd = J$.W(3392193, 'nd', J$.M(3392185, J$.R(3392153, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.G(3392169, J$.R(3392161, 'p', p, false, false), 'data'), J$.T(3392177, 32, 22, false)), nd, false, false);
                                    } else {
                                        nd = J$.W(3392233, 'nd', J$.M(3392225, J$.R(3392201, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3392217, J$.R(3392209, 'p', p, false, false), 'data')), nd, false, false);
                                    }
                                    if (J$.C(157592, J$.B(449058, '!==', J$.M(3392257, J$.R(3392241, 'nd', nd, false, false), 'toString', false)(J$.T(3392249, 'binary', 21, false)), J$.M(3392289, J$.G(3392273, J$.R(3392265, 'p', p, false, false), 'data'), 'toString', false)(J$.T(3392281, 'binary', 21, false))))) {
                                        J$.P(3392313, J$.R(3392297, 'p', p, false, false), 'data', J$.R(3392305, 'nd', nd, false, false));
                                        normalized = J$.W(3392329, 'normalized', J$.T(3392321, false, 23, false), normalized, false, false);
                                    }
                                }
                            }
                            if (J$.C(157616, J$.R(3392337, 'normalized', normalized, false, false)))
                                J$.P(3392369, J$.R(3392345, 'key', key, false, false), '_rfc4253Cache', J$.M(3392361, J$.R(3392353, 'sshbuf', sshbuf, false, false), 'toBuffer', false)());
                            if (J$.C(157632, J$.C(157624, J$.R(3392377, 'partial', partial, false, false)) ? J$.B(449066, '===', J$.F(3392401, J$.R(3392385, '_typeof', _typeof, false, true), false)(J$.R(3392393, 'partial', partial, false, false)), J$.T(3392409, 'object', 21, false)) : J$._())) {
                                J$.P(3392441, J$.R(3392417, 'partial', partial, false, false), 'remainder', J$.M(3392433, J$.R(3392425, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(3392473, J$.R(3392449, 'partial', partial, false, false), 'consumed', J$.G(3392465, J$.R(3392457, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(3392505, J$.F(3392497, J$.R(3392481, 'Constructor', Constructor, false, false), true)(J$.R(3392489, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3393633, J$e);
                        } finally {
                            if (J$.Fr(3393641))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3393329, arguments.callee, this, arguments);
                            arguments = J$.N(3393337, 'arguments', arguments, true, false, false);
                            key = J$.N(3393345, 'key', key, true, false, false);
                            options = J$.N(3393353, 'options', options, true, false, false);
                            J$.N(3393361, 'alg', alg, false, false, false);
                            J$.N(3393369, 'i', i, false, false, false);
                            J$.N(3393377, 'algInfo', algInfo, false, false, false);
                            J$.N(3393385, 'parts', parts, false, false, false);
                            J$.N(3393393, 'buf', buf, false, false, false);
                            J$.N(3393401, 'data', data, false, false, false);
                            J$.M(3392673, J$.R(3392657, 'assert', assert, false, true), 'object', false)(J$.R(3392665, 'key', key, false, false));
                            var alg = J$.W(3392705, 'alg', J$.F(3392697, J$.R(3392681, 'keyTypeToAlg', keyTypeToAlg, false, true), false)(J$.R(3392689, 'key', key, false, false)), alg, false, false);
                            var i;
                            var algInfo = J$.W(3392753, 'algInfo', J$.G(3392745, J$.G(3392721, J$.R(3392713, 'algs', algs, false, true), 'info'), J$.G(3392737, J$.R(3392729, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(157640, J$.M(3392777, J$.R(3392761, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3392769, 'key', key, false, false))))
                                algInfo = J$.W(3392825, 'algInfo', J$.G(3392817, J$.G(3392793, J$.R(3392785, 'algs', algs, false, true), 'privInfo'), J$.G(3392809, J$.R(3392801, 'key', key, false, false), 'type')), algInfo, false, false);
                            var parts = J$.W(3392849, 'parts', J$.G(3392841, J$.R(3392833, 'algInfo', algInfo, false, false), 'parts'), parts, false, false);
                            var buf = J$.W(3392881, 'buf', J$.F(3392873, J$.R(3392857, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3392865, {}, 11, false)), buf, false, false);
                            J$.M(3392905, J$.R(3392889, 'buf', buf, false, false), 'writeString', false)(J$.R(3392897, 'alg', alg, false, false));
                            for (i = J$.W(3392921, 'i', J$.T(3392913, 0, 22, false), i, false, false); J$.C(157680, J$.B(449074, '<', J$.R(3392929, 'i', i, false, false), J$.G(3392945, J$.R(3392937, 'parts', parts, false, false), 'length'))); i = J$.W(3392961, 'i', J$.B(449090, '+', J$.U(449082, '+', J$.R(3392953, 'i', i, false, false)), 1), i, false, false)) {
                                var data = J$.W(3393025, 'data', J$.G(3393017, J$.G(3393009, J$.G(3392977, J$.R(3392969, 'key', key, false, false), 'part'), J$.G(3393001, J$.R(3392985, 'parts', parts, false, false), J$.R(3392993, 'i', i, false, false))), 'data'), data, false, false);
                                if (J$.C(157656, J$.B(449098, '!==', J$.G(3393041, J$.R(3393033, 'algInfo', algInfo, false, false), 'normalize'), J$.T(3393049, false, 23, false)))) {
                                    if (J$.C(157648, J$.B(449106, '===', J$.G(3393065, J$.R(3393057, 'key', key, false, false), 'type'), J$.T(3393073, 'ed25519', 21, false))))
                                        data = J$.W(3393113, 'data', J$.M(3393105, J$.R(3393081, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(3393089, 'data', data, false, false), J$.T(3393097, 32, 22, false)), data, false, false);
                                    else
                                        data = J$.W(3393145, 'data', J$.M(3393137, J$.R(3393121, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3393129, 'data', data, false, false)), data, false, false);
                                }
                                if (J$.C(157672, J$.C(157664, J$.B(449114, '===', J$.G(3393161, J$.R(3393153, 'key', key, false, false), 'type'), J$.T(3393169, 'ed25519', 21, false))) ? J$.B(449122, '===', J$.G(3393193, J$.R(3393177, 'parts', parts, false, false), J$.R(3393185, 'i', i, false, false)), J$.T(3393201, 'k', 21, false)) : J$._()))
                                    data = J$.W(3393273, 'data', J$.M(3393265, J$.R(3393209, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(3393257, [
                                        J$.R(3393217, 'data', data, false, false),
                                        J$.G(3393249, J$.G(3393241, J$.G(3393233, J$.R(3393225, 'key', key, false, false), 'part'), 'A'), 'data')
                                    ], 10, false)), data, false, false);
                                J$.M(3393297, J$.R(3393281, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(3393289, 'data', data, false, false));
                            }
                            return J$.Rt(3393321, J$.M(3393313, J$.R(3393305, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(3393649, J$e);
                        } finally {
                            if (J$.Fr(3393657))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            _typeof = J$.N(3393425, '_typeof', J$.T(3393417, _typeof, 12, false), true, false, false);
            J$.N(3393433, 'assert', assert, false, false, false);
            J$.N(3393441, 'Buffer', Buffer, false, false, false);
            J$.N(3393449, 'algs', algs, false, false, false);
            J$.N(3393457, 'utils', utils, false, false, false);
            J$.N(3393465, 'Key', Key, false, false, false);
            J$.N(3393473, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3393481, 'SSHBuffer', SSHBuffer, false, false, false);
            algToKeyType = J$.N(3393497, 'algToKeyType', J$.T(3393489, algToKeyType, 12, false), true, false, false);
            keyTypeToAlg = J$.N(3393513, 'keyTypeToAlg', J$.T(3393505, keyTypeToAlg, 12, false), true, false, false);
            read = J$.N(3393529, 'read', J$.T(3393521, read, 12, false), true, false, false);
            write = J$.N(3393545, 'write', J$.T(3393537, write, 12, false), true, false, false);
            J$.T(3389137, 'use strict', 21, false);
            J$.F(3389161, J$.I(typeof require === 'undefined' ? require = J$.R(3389145, 'require', undefined, true, true) : require = J$.R(3389145, 'require', require, true, true)), false)(J$.T(3389153, 'core-js/modules/es.symbol', 21, false));
            J$.F(3389185, J$.I(typeof require === 'undefined' ? require = J$.R(3389169, 'require', undefined, true, true) : require = J$.R(3389169, 'require', require, true, true)), false)(J$.T(3389177, 'core-js/modules/es.symbol.description', 21, false));
            J$.F(3389209, J$.I(typeof require === 'undefined' ? require = J$.R(3389193, 'require', undefined, true, true) : require = J$.R(3389193, 'require', require, true, true)), false)(J$.T(3389201, 'core-js/modules/es.symbol.iterator', 21, false));
            J$.F(3389233, J$.I(typeof require === 'undefined' ? require = J$.R(3389217, 'require', undefined, true, true) : require = J$.R(3389217, 'require', require, true, true)), false)(J$.T(3389225, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3389257, J$.I(typeof require === 'undefined' ? require = J$.R(3389241, 'require', undefined, true, true) : require = J$.R(3389241, 'require', require, true, true)), false)(J$.T(3389249, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(3389281, J$.I(typeof require === 'undefined' ? require = J$.R(3389265, 'require', undefined, true, true) : require = J$.R(3389265, 'require', require, true, true)), false)(J$.T(3389273, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3389305, J$.I(typeof require === 'undefined' ? require = J$.R(3389289, 'require', undefined, true, true) : require = J$.R(3389289, 'require', require, true, true)), false)(J$.T(3389297, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3389329, J$.I(typeof require === 'undefined' ? require = J$.R(3389313, 'require', undefined, true, true) : require = J$.R(3389313, 'require', require, true, true)), false)(J$.T(3389321, 'core-js/modules/es.function.bind', 21, false));
            J$.F(3389353, J$.I(typeof require === 'undefined' ? require = J$.R(3389337, 'require', undefined, true, true) : require = J$.R(3389337, 'require', require, true, true)), false)(J$.T(3389345, 'core-js/modules/es.function.name', 21, false));
            J$.F(3389377, J$.I(typeof require === 'undefined' ? require = J$.R(3389361, 'require', undefined, true, true) : require = J$.R(3389361, 'require', require, true, true)), false)(J$.T(3389369, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3389401, J$.I(typeof require === 'undefined' ? require = J$.R(3389385, 'require', undefined, true, true) : require = J$.R(3389385, 'require', require, true, true)), false)(J$.T(3389393, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3389425, J$.I(typeof require === 'undefined' ? require = J$.R(3389409, 'require', undefined, true, true) : require = J$.R(3389409, 'require', require, true, true)), false)(J$.T(3389417, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3389449, J$.I(typeof require === 'undefined' ? require = J$.R(3389433, 'require', undefined, true, true) : require = J$.R(3389433, 'require', require, true, true)), false)(J$.T(3389441, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(3389473, J$.I(typeof require === 'undefined' ? require = J$.R(3389457, 'require', undefined, true, true) : require = J$.R(3389457, 'require', require, true, true)), false)(J$.T(3389465, 'core-js/modules/es.string.match', 21, false));
            J$.F(3389497, J$.I(typeof require === 'undefined' ? require = J$.R(3389481, 'require', undefined, true, true) : require = J$.R(3389481, 'require', require, true, true)), false)(J$.T(3389489, 'core-js/modules/web.dom-collections.iterator', 21, false));
            J$.P(3389945, J$.I(typeof module === 'undefined' ? module = J$.R(3389793, 'module', undefined, true, true) : module = J$.R(3389793, 'module', module, true, true)), 'exports', J$.T(3389937, {
                read: J$.M(3389833, J$.R(3389801, 'read', read, false, true), 'bind', false)(J$.T(3389809, undefined, 24, false), J$.T(3389817, false, 23, false), J$.T(3389825, undefined, 24, false)),
                readType: J$.M(3389865, J$.R(3389841, 'read', read, false, true), 'bind', false)(J$.T(3389849, undefined, 24, false), J$.T(3389857, false, 23, false)),
                write: J$.R(3389873, 'write', write, false, true),
                readPartial: J$.M(3389905, J$.R(3389881, 'read', read, false, true), 'bind', false)(J$.T(3389889, undefined, 24, false), J$.T(3389897, true, 23, false)),
                readInternal: J$.R(3389913, 'read', read, false, true),
                keyTypeToAlg: J$.R(3389921, 'keyTypeToAlg', keyTypeToAlg, false, true),
                algToKeyType: J$.R(3389929, 'algToKeyType', algToKeyType, false, true)
            }, 11, false));
            var assert = J$.W(3389977, 'assert', J$.F(3389969, J$.I(typeof require === 'undefined' ? require = J$.R(3389953, 'require', undefined, true, true) : require = J$.R(3389953, 'require', require, true, true)), false)(J$.T(3389961, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3390017, 'Buffer', J$.G(3390009, J$.F(3390001, J$.I(typeof require === 'undefined' ? require = J$.R(3389985, 'require', undefined, true, true) : require = J$.R(3389985, 'require', require, true, true)), false)(J$.T(3389993, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3390049, 'algs', J$.F(3390041, J$.I(typeof require === 'undefined' ? require = J$.R(3390025, 'require', undefined, true, true) : require = J$.R(3390025, 'require', require, true, true)), false)(J$.T(3390033, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(3390081, 'utils', J$.F(3390073, J$.I(typeof require === 'undefined' ? require = J$.R(3390057, 'require', undefined, true, true) : require = J$.R(3390057, 'require', require, true, true)), false)(J$.T(3390065, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(3390113, 'Key', J$.F(3390105, J$.I(typeof require === 'undefined' ? require = J$.R(3390089, 'require', undefined, true, true) : require = J$.R(3390089, 'require', require, true, true)), false)(J$.T(3390097, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3390145, 'PrivateKey', J$.F(3390137, J$.I(typeof require === 'undefined' ? require = J$.R(3390121, 'require', undefined, true, true) : require = J$.R(3390121, 'require', require, true, true)), false)(J$.T(3390129, '../private-key', 21, false)), PrivateKey, false, true);
            var SSHBuffer = J$.W(3390177, 'SSHBuffer', J$.F(3390169, J$.I(typeof require === 'undefined' ? require = J$.R(3390153, 'require', undefined, true, true) : require = J$.R(3390153, 'require', require, true, true)), false)(J$.T(3390161, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
        } catch (J$e) {
            J$.Ex(3393665, J$e);
        } finally {
            if (J$.Sr(3393673))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

