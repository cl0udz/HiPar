J$.noInstrEval = false;
jalangiLabel19:
    while (true) {
        try {
            J$.Se(3355257, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/openssh-cert.js');
            function verify(cert, key) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3347969, arguments.callee, this, arguments);
                            arguments = J$.N(3347977, 'arguments', arguments, true, false, false);
                            cert = J$.N(3347985, 'cert', cert, true, false, false);
                            key = J$.N(3347993, 'key', key, true, false, false);
                            return J$.Rt(3347961, J$.T(3347953, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3355553, J$e);
                        } finally {
                            if (J$.Fr(3355561))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3348473, arguments.callee, this, arguments);
                            arguments = J$.N(3348481, 'arguments', arguments, true, false, false);
                            buf = J$.N(3348489, 'buf', buf, true, false, false);
                            options = J$.N(3348497, 'options', options, true, false, false);
                            J$.N(3348505, 'parts', parts, false, false, false);
                            J$.N(3348513, 'algo', algo, false, false, false);
                            J$.N(3348521, 'data', data, false, false, false);
                            if (J$.C(155896, J$.M(3348177, J$.R(3348161, 'Buffer', Buffer, false, true), 'isBuffer', false)(J$.R(3348169, 'buf', buf, false, false))))
                                buf = J$.W(3348209, 'buf', J$.M(3348201, J$.R(3348185, 'buf', buf, false, false), 'toString', false)(J$.T(3348193, 'ascii', 21, false)), buf, false, false);
                            var parts = J$.W(3348249, 'parts', J$.M(3348241, J$.M(3348225, J$.R(3348217, 'buf', buf, false, false), 'trim', false)(), 'split', false)(J$.T(3348233, /[ \t\n]+/g, 14, false)), parts, false, false);
                            if (J$.C(155912, J$.C(155904, J$.B(446834, '<', J$.G(3348265, J$.R(3348257, 'parts', parts, false, false), 'length'), J$.T(3348273, 2, 22, false))) ? J$._() : J$.B(446842, '>', J$.G(3348289, J$.R(3348281, 'parts', parts, false, false), 'length'), J$.T(3348297, 3, 22, false))))
                                throw J$.F(3348321, J$.I(typeof Error === 'undefined' ? Error = J$.R(3348305, 'Error', undefined, true, true) : Error = J$.R(3348305, 'Error', Error, true, true)), true)(J$.T(3348313, 'Not a valid SSH certificate line', 21, false));
                            var algo = J$.W(3348353, 'algo', J$.G(3348345, J$.R(3348329, 'parts', parts, false, false), J$.T(3348337, 0, 22, false)), algo, false, false);
                            var data = J$.W(3348385, 'data', J$.G(3348377, J$.R(3348361, 'parts', parts, false, false), J$.T(3348369, 1, 22, false)), data, false, false);
                            data = J$.W(3348425, 'data', J$.M(3348417, J$.R(3348393, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3348401, 'data', data, false, false), J$.T(3348409, 'base64', 21, false)), data, false, false);
                            return J$.Rt(3348465, J$.F(3348457, J$.R(3348433, 'fromBuffer', fromBuffer, false, true), false)(J$.R(3348441, 'data', data, false, false), J$.R(3348449, 'algo', algo, false, false)));
                        } catch (J$e) {
                            J$.Ex(3355585, J$e);
                        } finally {
                            if (J$.Fr(3355593))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fromBuffer(data, algo, partial) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3350953, arguments.callee, this, arguments);
                            arguments = J$.N(3350961, 'arguments', arguments, true, false, false);
                            data = J$.N(3350969, 'data', data, true, false, false);
                            algo = J$.N(3350977, 'algo', algo, true, false, false);
                            partial = J$.N(3350985, 'partial', partial, true, false, false);
                            J$.N(3350993, 'sshbuf', sshbuf, false, false, false);
                            J$.N(3351001, 'innerAlgo', innerAlgo, false, false, false);
                            J$.N(3351009, 'cert', cert, false, false, false);
                            J$.N(3351017, 'key', key, false, false, false);
                            J$.N(3351025, 'parts', parts, false, false, false);
                            J$.N(3351033, 'partCount', partCount, false, false, false);
                            J$.N(3351041, 'algInfo', algInfo, false, false, false);
                            J$.N(3351049, 'res', res, false, false, false);
                            J$.N(3351057, 'i', i, false, false, false);
                            J$.N(3351065, 'p', p, false, false, false);
                            J$.N(3351073, 'type', type, false, false, false);
                            J$.N(3351081, 'principals', principals, false, false, false);
                            J$.N(3351089, 'pbuf', pbuf, false, false, false);
                            J$.N(3351097, 'psshbuf', psshbuf, false, false, false);
                            J$.N(3351105, 'exts', exts, false, false, false);
                            J$.N(3351113, 'extbuf', extbuf, false, false, false);
                            J$.N(3351121, 'ext', ext, false, false, false);
                            J$.N(3351129, 'signingKeyBuf', signingKeyBuf, false, false, false);
                            J$.N(3351137, 'sigBuf', sigBuf, false, false, false);
                            var sshbuf = J$.W(3348561, 'sshbuf', J$.F(3348553, J$.R(3348529, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3348545, { buffer: J$.R(3348537, 'data', data, false, false) }, 11, false)), sshbuf, false, false);
                            var innerAlgo = J$.W(3348585, 'innerAlgo', J$.M(3348577, J$.R(3348569, 'sshbuf', sshbuf, false, false), 'readString', false)(), innerAlgo, false, false);
                            if (J$.C(155928, J$.C(155920, J$.B(446850, '!==', J$.R(3348593, 'algo', algo, false, false), J$.T(3348601, undefined, 24, false))) ? J$.B(446858, '!==', J$.R(3348609, 'innerAlgo', innerAlgo, false, false), J$.R(3348617, 'algo', algo, false, false)) : J$._()))
                                throw J$.F(3348641, J$.I(typeof Error === 'undefined' ? Error = J$.R(3348625, 'Error', undefined, true, true) : Error = J$.R(3348625, 'Error', Error, true, true)), true)(J$.T(3348633, 'SSH certificate algorithm mismatch', 21, false));
                            if (J$.C(155936, J$.B(446866, '===', J$.R(3348649, 'algo', algo, false, false), J$.T(3348657, undefined, 24, false))))
                                algo = J$.W(3348673, 'algo', J$.R(3348665, 'innerAlgo', innerAlgo, false, false), algo, false, false);
                            var cert = J$.W(3348689, 'cert', J$.T(3348681, {}, 11, false), cert, false, false);
                            J$.P(3348713, J$.R(3348697, 'cert', cert, false, false), 'signatures', J$.T(3348705, {}, 11, false));
                            J$.P(3348745, J$.G(3348729, J$.R(3348721, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3348737, {}, 11, false));
                            J$.P(3348793, J$.G(3348769, J$.G(3348761, J$.R(3348753, 'cert', cert, false, false), 'signatures'), 'openssh'), 'nonce', J$.M(3348785, J$.R(3348777, 'sshbuf', sshbuf, false, false), 'readBuffer', false)());
                            var key = J$.W(3348809, 'key', J$.T(3348801, {}, 11, false), key, false, false);
                            var parts = J$.W(3348841, 'parts', J$.P(3348833, J$.R(3348817, 'key', key, false, false), 'parts', J$.T(3348825, [], 10, false)), parts, false, false);
                            J$.P(3348881, J$.R(3348849, 'key', key, false, false), 'type', J$.F(3348873, J$.R(3348857, 'getAlg', getAlg, false, true), false)(J$.R(3348865, 'algo', algo, false, false)));
                            var partCount = J$.W(3348945, 'partCount', J$.G(3348937, J$.G(3348929, J$.G(3348921, J$.G(3348897, J$.R(3348889, 'algs', algs, false, true), 'info'), J$.G(3348913, J$.R(3348905, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(155944, J$.B(446874, '<', J$.G(3348961, J$.R(3348953, 'parts', parts, false, false), 'length'), J$.R(3348969, 'partCount', partCount, false, false)))) {
                                J$.M(3349001, J$.R(3348977, 'parts', parts, false, false), 'push', false)(J$.M(3348993, J$.R(3348985, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            J$.M(3349049, J$.R(3349009, 'assert', assert, false, true), 'ok', false)(J$.B(446882, '>=', J$.G(3349025, J$.R(3349017, 'parts', parts, false, false), 'length'), J$.T(3349033, 1, 22, false)), J$.T(3349041, 'key must have at least one part', 21, false));
                            var algInfo = J$.W(3349097, 'algInfo', J$.G(3349089, J$.G(3349065, J$.R(3349057, 'algs', algs, false, true), 'info'), J$.G(3349081, J$.R(3349073, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(155952, J$.B(446890, '===', J$.G(3349113, J$.R(3349105, 'key', key, false, false), 'type'), J$.T(3349121, 'ecdsa', 21, false)))) {
                                var res = J$.W(3349153, 'res', J$.M(3349145, J$.R(3349129, 'ECDSA_ALGO', ECDSA_ALGO, false, true), 'exec', false)(J$.R(3349137, 'algo', algo, false, false)), res, false, false);
                                J$.M(3349185, J$.R(3349161, 'assert', assert, false, true), 'ok', false)(J$.B(446898, '!==', J$.R(3349169, 'res', res, false, false), J$.T(3349177, null, 25, false)));
                                J$.M(3349265, J$.R(3349193, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3349217, J$.R(3349201, 'res', res, false, false), J$.T(3349209, 1, 22, false)), J$.M(3349257, J$.G(3349249, J$.G(3349241, J$.R(3349225, 'parts', parts, false, false), J$.T(3349233, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            for (var i = J$.W(3349281, 'i', J$.T(3349273, 0, 22, false), i, false, false); J$.C(155976, J$.B(446906, '<', J$.R(3349289, 'i', i, false, false), J$.G(3349313, J$.G(3349305, J$.R(3349297, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(3349329, 'i', J$.B(446922, '+', J$.U(446914, '+', J$.R(3349321, 'i', i, false, false)), 1), i, false, false)) {
                                J$.P(3349393, J$.G(3349353, J$.R(3349337, 'parts', parts, false, false), J$.R(3349345, 'i', i, false, false)), 'name', J$.G(3349385, J$.G(3349369, J$.R(3349361, 'algInfo', algInfo, false, false), 'parts'), J$.R(3349377, 'i', i, false, false)));
                                if (J$.C(155968, J$.C(155960, J$.B(446930, '!==', J$.G(3349425, J$.G(3349417, J$.R(3349401, 'parts', parts, false, false), J$.R(3349409, 'i', i, false, false)), 'name'), J$.T(3349433, 'curve', 21, false))) ? J$.B(446938, '!==', J$.G(3349449, J$.R(3349441, 'algInfo', algInfo, false, false), 'normalize'), J$.T(3349457, false, 23, false)) : J$._())) {
                                    var p = J$.W(3349489, 'p', J$.G(3349481, J$.R(3349465, 'parts', parts, false, false), J$.R(3349473, 'i', i, false, false)), p, false, false);
                                    J$.P(3349537, J$.R(3349497, 'p', p, false, false), 'data', J$.M(3349529, J$.R(3349505, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3349521, J$.R(3349513, 'p', p, false, false), 'data')));
                                }
                            }
                            J$.P(3349577, J$.R(3349545, 'cert', cert, false, false), 'subjectKey', J$.F(3349569, J$.R(3349553, 'Key', Key, false, true), true)(J$.R(3349561, 'key', key, false, false)));
                            J$.P(3349609, J$.R(3349585, 'cert', cert, false, false), 'serial', J$.M(3349601, J$.R(3349593, 'sshbuf', sshbuf, false, false), 'readInt64', false)());
                            var type = J$.W(3349649, 'type', J$.G(3349641, J$.R(3349617, 'TYPES', TYPES, false, true), J$.M(3349633, J$.R(3349625, 'sshbuf', sshbuf, false, false), 'readInt', false)()), type, false, false);
                            J$.M(3349681, J$.R(3349657, 'assert', assert, false, true), 'string', false)(J$.R(3349665, 'type', type, false, false), J$.T(3349673, 'valid cert type', 21, false));
                            J$.P(3349729, J$.G(3349705, J$.G(3349697, J$.R(3349689, 'cert', cert, false, false), 'signatures'), 'openssh'), 'keyId', J$.M(3349721, J$.R(3349713, 'sshbuf', sshbuf, false, false), 'readString', false)());
                            var principals = J$.W(3349745, 'principals', J$.T(3349737, [], 10, false), principals, false, false);
                            var pbuf = J$.W(3349769, 'pbuf', J$.M(3349761, J$.R(3349753, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), pbuf, false, false);
                            var psshbuf = J$.W(3349809, 'psshbuf', J$.F(3349801, J$.R(3349777, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3349793, { buffer: J$.R(3349785, 'pbuf', pbuf, false, false) }, 11, false)), psshbuf, false, false);
                            while (J$.C(155984, J$.U(446946, '!', J$.M(3349825, J$.R(3349817, 'psshbuf', psshbuf, false, false), 'atEnd', false)()))) {
                                J$.M(3349857, J$.R(3349833, 'principals', principals, false, false), 'push', false)(J$.M(3349849, J$.R(3349841, 'psshbuf', psshbuf, false, false), 'readString', false)());
                            }
                            if (J$.C(155992, J$.B(446954, '===', J$.G(3349873, J$.R(3349865, 'principals', principals, false, false), 'length'), J$.T(3349881, 0, 22, false))))
                                principals = J$.W(3349905, 'principals', J$.T(3349897, [J$.T(3349889, '*', 21, false)], 10, false), principals, false, false);
                            J$.P(3350097, J$.R(3349913, 'cert', cert, false, false), 'subjects', J$.M(3350089, J$.R(3349921, 'principals', principals, false, false), 'map', false)(J$.T(3350081, function (pr) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3350057, arguments.callee, this, arguments);
                                            arguments = J$.N(3350065, 'arguments', arguments, true, false, false);
                                            pr = J$.N(3350073, 'pr', pr, true, false, false);
                                            if (J$.C(156008, J$.B(446962, '===', J$.R(3349929, 'type', type, false, false), J$.T(3349937, 'user', 21, false))))
                                                return J$.Rt(3349969, J$.M(3349961, J$.R(3349945, 'Identity', Identity, false, true), 'forUser', false)(J$.R(3349953, 'pr', pr, false, false)));
                                            else if (J$.C(156000, J$.B(446970, '===', J$.R(3349977, 'type', type, false, false), J$.T(3349985, 'host', 21, false))))
                                                return J$.Rt(3350017, J$.M(3350009, J$.R(3349993, 'Identity', Identity, false, true), 'forHost', false)(J$.R(3350001, 'pr', pr, false, false)));
                                            throw J$.F(3350049, J$.I(typeof Error === 'undefined' ? Error = J$.R(3350025, 'Error', undefined, true, true) : Error = J$.R(3350025, 'Error', Error, true, true)), true)(J$.B(446978, '+', J$.T(3350033, 'Unknown identity type ', 21, false), J$.R(3350041, 'type', type, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3355601, J$e);
                                        } finally {
                                            if (J$.Fr(3355609))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                            J$.P(3350145, J$.R(3350105, 'cert', cert, false, false), 'validFrom', J$.F(3350137, J$.R(3350113, 'int64ToDate', int64ToDate, false, true), false)(J$.M(3350129, J$.R(3350121, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            J$.P(3350193, J$.R(3350153, 'cert', cert, false, false), 'validUntil', J$.F(3350185, J$.R(3350161, 'int64ToDate', int64ToDate, false, true), false)(J$.M(3350177, J$.R(3350169, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            var exts = J$.W(3350209, 'exts', J$.T(3350201, [], 10, false), exts, false, false);
                            var extbuf = J$.W(3350257, 'extbuf', J$.F(3350249, J$.R(3350217, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3350241, { buffer: J$.M(3350233, J$.R(3350225, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            var ext;
                            while (J$.C(156016, J$.U(446986, '!', J$.M(3350273, J$.R(3350265, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(3350297, 'ext', J$.T(3350289, { critical: J$.T(3350281, true, 23, false) }, 11, false), ext, false, false);
                                J$.P(3350329, J$.R(3350305, 'ext', ext, false, false), 'name', J$.M(3350321, J$.R(3350313, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(3350361, J$.R(3350337, 'ext', ext, false, false), 'data', J$.M(3350353, J$.R(3350345, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(3350385, J$.R(3350369, 'exts', exts, false, false), 'push', false)(J$.R(3350377, 'ext', ext, false, false));
                            }
                            extbuf = J$.W(3350433, 'extbuf', J$.F(3350425, J$.R(3350393, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3350417, { buffer: J$.M(3350409, J$.R(3350401, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            while (J$.C(156024, J$.U(446994, '!', J$.M(3350449, J$.R(3350441, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(3350473, 'ext', J$.T(3350465, { critical: J$.T(3350457, false, 23, false) }, 11, false), ext, false, false);
                                J$.P(3350505, J$.R(3350481, 'ext', ext, false, false), 'name', J$.M(3350497, J$.R(3350489, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(3350537, J$.R(3350513, 'ext', ext, false, false), 'data', J$.M(3350529, J$.R(3350521, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(3350561, J$.R(3350545, 'exts', exts, false, false), 'push', false)(J$.R(3350553, 'ext', ext, false, false));
                            }
                            J$.P(3350601, J$.G(3350585, J$.G(3350577, J$.R(3350569, 'cert', cert, false, false), 'signatures'), 'openssh'), 'exts', J$.R(3350593, 'exts', exts, false, false));
                            J$.M(3350617, J$.R(3350609, 'sshbuf', sshbuf, false, false), 'readBuffer', false)();
                            var signingKeyBuf = J$.W(3350641, 'signingKeyBuf', J$.M(3350633, J$.R(3350625, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), signingKeyBuf, false, false);
                            J$.P(3350681, J$.R(3350649, 'cert', cert, false, false), 'issuerKey', J$.M(3350673, J$.R(3350657, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(3350665, 'signingKeyBuf', signingKeyBuf, false, false)));
                            J$.P(3350721, J$.R(3350689, 'cert', cert, false, false), 'issuer', J$.M(3350713, J$.R(3350697, 'Identity', Identity, false, true), 'forHost', false)(J$.T(3350705, '**', 21, false)));
                            var sigBuf = J$.W(3350745, 'sigBuf', J$.M(3350737, J$.R(3350729, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), sigBuf, false, false);
                            J$.P(3350833, J$.G(3350769, J$.G(3350761, J$.R(3350753, 'cert', cert, false, false), 'signatures'), 'openssh'), 'signature', J$.M(3350825, J$.R(3350777, 'Signature', Signature, false, true), 'parse', false)(J$.R(3350785, 'sigBuf', sigBuf, false, false), J$.G(3350809, J$.G(3350801, J$.R(3350793, 'cert', cert, false, false), 'issuerKey'), 'type'), J$.T(3350817, 'ssh', 21, false)));
                            if (J$.C(156032, J$.B(447002, '!==', J$.R(3350841, 'partial', partial, false, false), J$.T(3350849, undefined, 24, false)))) {
                                J$.P(3350881, J$.R(3350857, 'partial', partial, false, false), 'remainder', J$.M(3350873, J$.R(3350865, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(3350913, J$.R(3350889, 'partial', partial, false, false), 'consumed', J$.G(3350905, J$.R(3350897, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(3350945, J$.F(3350937, J$.R(3350921, 'Certificate', Certificate, false, true), true)(J$.R(3350929, 'cert', cert, false, false)));
                        } catch (J$e) {
                            J$.Ex(3355617, J$e);
                        } finally {
                            if (J$.Fr(3355625))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function int64ToDate(buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3351321, arguments.callee, this, arguments);
                            arguments = J$.N(3351329, 'arguments', arguments, true, false, false);
                            buf = J$.N(3351337, 'buf', buf, true, false, false);
                            J$.N(3351345, 'i', i, false, false, false);
                            J$.N(3351353, 'd', d, false, false, false);
                            var i = J$.W(3351177, 'i', J$.B(447010, '*', J$.M(3351161, J$.R(3351145, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(3351153, 0, 22, false)), J$.T(3351169, 4294967296, 22, false)), i, false, false);
                            i = J$.W(3351217, 'i', J$.B(447018, '+', J$.R(3351209, 'i', i, false, false), J$.M(3351201, J$.R(3351185, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(3351193, 4, 22, false))), i, false, false);
                            var d = J$.W(3351241, 'd', J$.F(3351233, J$.I(typeof Date === 'undefined' ? Date = J$.R(3351225, 'Date', undefined, true, true) : Date = J$.R(3351225, 'Date', Date, true, true)), true)(), d, false, false);
                            J$.M(3351273, J$.R(3351249, 'd', d, false, false), 'setTime', false)(J$.B(447026, '*', J$.R(3351257, 'i', i, false, false), J$.T(3351265, 1000, 22, false)));
                            J$.P(3351297, J$.R(3351281, 'd', d, false, false), 'sourceInt64', J$.R(3351289, 'buf', buf, false, false));
                            return J$.Rt(3351313, J$.R(3351305, 'd', d, false, false));
                        } catch (J$e) {
                            J$.Ex(3355633, J$e);
                        } finally {
                            if (J$.Fr(3355641))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dateToInt64(date) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3351649, arguments.callee, this, arguments);
                            arguments = J$.N(3351657, 'arguments', arguments, true, false, false);
                            date = J$.N(3351665, 'date', date, true, false, false);
                            J$.N(3351673, 'i', i, false, false, false);
                            J$.N(3351681, 'upper', upper, false, false, false);
                            J$.N(3351689, 'lower', lower, false, false, false);
                            J$.N(3351697, 'buf', buf, false, false, false);
                            if (J$.C(156040, J$.B(447034, '!==', J$.G(3351369, J$.R(3351361, 'date', date, false, false), 'sourceInt64'), J$.T(3351377, undefined, 24, false))))
                                return J$.Rt(3351401, J$.G(3351393, J$.R(3351385, 'date', date, false, false), 'sourceInt64'));
                            var i = J$.W(3351449, 'i', J$.M(3351441, J$.I(typeof Math === 'undefined' ? Math = J$.R(3351409, 'Math', undefined, true, true) : Math = J$.R(3351409, 'Math', Math, true, true)), 'round', false)(J$.B(447042, '/', J$.M(3351425, J$.R(3351417, 'date', date, false, false), 'getTime', false)(), J$.T(3351433, 1000, 22, false))), i, false, false);
                            var upper = J$.W(3351489, 'upper', J$.M(3351481, J$.I(typeof Math === 'undefined' ? Math = J$.R(3351457, 'Math', undefined, true, true) : Math = J$.R(3351457, 'Math', Math, true, true)), 'floor', false)(J$.B(447050, '/', J$.R(3351465, 'i', i, false, false), J$.T(3351473, 4294967296, 22, false))), upper, false, false);
                            var lower = J$.W(3351529, 'lower', J$.M(3351521, J$.I(typeof Math === 'undefined' ? Math = J$.R(3351497, 'Math', undefined, true, true) : Math = J$.R(3351497, 'Math', Math, true, true)), 'floor', false)(J$.B(447058, '%', J$.R(3351505, 'i', i, false, false), J$.T(3351513, 4294967296, 22, false))), lower, false, false);
                            var buf = J$.W(3351561, 'buf', J$.M(3351553, J$.R(3351537, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(3351545, 8, 22, false)), buf, false, false);
                            J$.M(3351593, J$.R(3351569, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(3351577, 'upper', upper, false, false), J$.T(3351585, 0, 22, false));
                            J$.M(3351625, J$.R(3351601, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(3351609, 'lower', lower, false, false), J$.T(3351617, 4, 22, false));
                            return J$.Rt(3351641, J$.R(3351633, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(3355649, J$e);
                        } finally {
                            if (J$.Fr(3355657))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sign(cert, key) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3352065, arguments.callee, this, arguments);
                            arguments = J$.N(3352073, 'arguments', arguments, true, false, false);
                            cert = J$.N(3352081, 'cert', cert, true, false, false);
                            key = J$.N(3352089, 'key', key, true, false, false);
                            J$.N(3352097, 'blob', blob, false, false, false);
                            J$.N(3352105, 'sig', sig, false, false, false);
                            J$.N(3352113, 'hashAlgo', hashAlgo, false, false, false);
                            J$.N(3352121, 'signer', signer, false, false, false);
                            if (J$.C(156048, J$.B(447066, '===', J$.G(3351721, J$.G(3351713, J$.R(3351705, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3351729, undefined, 24, false))))
                                J$.P(3351761, J$.G(3351745, J$.R(3351737, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3351753, {}, 11, false));
                            try {
                                var blob = J$.W(3351801, 'blob', J$.F(3351793, J$.R(3351769, 'toBuffer', toBuffer, false, true), false)(J$.R(3351777, 'cert', cert, false, false), J$.T(3351785, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(3351841, 'e', e, false, false, true);
                                J$.B(447074, 'delete', J$.G(3351817, J$.R(3351809, 'cert', cert, false, false), 'signatures'), 'openssh');
                                return J$.Rt(3351833, J$.T(3351825, false, 23, false));
                            }
                            var sig = J$.W(3351873, 'sig', J$.G(3351865, J$.G(3351857, J$.R(3351849, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            var hashAlgo = J$.W(3351889, 'hashAlgo', J$.T(3351881, undefined, 24, false), hashAlgo, false, false);
                            if (J$.C(156064, J$.C(156056, J$.B(447082, '===', J$.G(3351905, J$.R(3351897, 'key', key, false, false), 'type'), J$.T(3351913, 'rsa', 21, false))) ? J$._() : J$.B(447090, '===', J$.G(3351929, J$.R(3351921, 'key', key, false, false), 'type'), J$.T(3351937, 'dsa', 21, false))))
                                hashAlgo = J$.W(3351953, 'hashAlgo', J$.T(3351945, 'sha1', 21, false), hashAlgo, false, false);
                            var signer = J$.W(3351985, 'signer', J$.M(3351977, J$.R(3351961, 'key', key, false, false), 'createSign', false)(J$.R(3351969, 'hashAlgo', hashAlgo, false, false)), signer, false, false);
                            J$.M(3352009, J$.R(3351993, 'signer', signer, false, false), 'write', false)(J$.R(3352001, 'blob', blob, false, false));
                            J$.P(3352041, J$.R(3352017, 'sig', sig, false, false), 'signature', J$.M(3352033, J$.R(3352025, 'signer', signer, false, false), 'sign', false)());
                            return J$.Rt(3352057, J$.T(3352049, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(3355665, J$e);
                        } finally {
                            if (J$.Fr(3355673))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function signAsync(cert, signer, done) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3352529, arguments.callee, this, arguments);
                            arguments = J$.N(3352537, 'arguments', arguments, true, false, false);
                            cert = J$.N(3352545, 'cert', cert, true, false, false);
                            signer = J$.N(3352553, 'signer', signer, true, false, false);
                            done = J$.N(3352561, 'done', done, true, false, false);
                            J$.N(3352569, 'blob', blob, false, false, false);
                            J$.N(3352577, 'sig', sig, false, false, false);
                            if (J$.C(156072, J$.B(447098, '===', J$.G(3352145, J$.G(3352137, J$.R(3352129, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3352153, undefined, 24, false))))
                                J$.P(3352185, J$.G(3352169, J$.R(3352161, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3352177, {}, 11, false));
                            try {
                                var blob = J$.W(3352225, 'blob', J$.F(3352217, J$.R(3352193, 'toBuffer', toBuffer, false, true), false)(J$.R(3352201, 'cert', cert, false, false), J$.T(3352209, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(3352281, 'e', e, false, false, true);
                                J$.B(447106, 'delete', J$.G(3352241, J$.R(3352233, 'cert', cert, false, false), 'signatures'), 'openssh');
                                J$.F(3352265, J$.R(3352249, 'done', done, false, false), false)(J$.R(3352257, 'e', e, false, false));
                                return J$.Rt(3352273, undefined);
                            }
                            var sig = J$.W(3352313, 'sig', J$.G(3352305, J$.G(3352297, J$.R(3352289, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            J$.F(3352521, J$.R(3352321, 'signer', signer, false, false), false)(J$.R(3352329, 'blob', blob, false, false), J$.T(3352513, function (err, signature) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(3352481, arguments.callee, this, arguments);
                                            arguments = J$.N(3352489, 'arguments', arguments, true, false, false);
                                            err = J$.N(3352497, 'err', err, true, false, false);
                                            signature = J$.N(3352505, 'signature', signature, true, false, false);
                                            if (J$.C(156080, J$.R(3352337, 'err', err, false, false))) {
                                                J$.F(3352361, J$.R(3352345, 'done', done, false, false), false)(J$.R(3352353, 'err', err, false, false));
                                                return J$.Rt(3352369, undefined);
                                            }
                                            try {
                                                J$.M(3352393, J$.R(3352377, 'signature', signature, false, false), 'toBuffer', false)(J$.T(3352385, 'ssh', 21, false));
                                            } catch (e) {
                                                J$.N(3352433, 'e', e, false, false, true);
                                                J$.F(3352417, J$.R(3352401, 'done', done, false, false), false)(J$.R(3352409, 'e', e, false, false));
                                                return J$.Rt(3352425, undefined);
                                            }
                                            J$.P(3352457, J$.R(3352441, 'sig', sig, false, false), 'signature', J$.R(3352449, 'signature', signature, false, false));
                                            J$.F(3352473, J$.R(3352465, 'done', done, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(3355681, J$e);
                                        } finally {
                                            if (J$.Fr(3355689))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3355697, J$e);
                        } finally {
                            if (J$.Fr(3355705))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(cert, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3352793, arguments.callee, this, arguments);
                            arguments = J$.N(3352801, 'arguments', arguments, true, false, false);
                            cert = J$.N(3352809, 'cert', cert, true, false, false);
                            options = J$.N(3352817, 'options', options, true, false, false);
                            J$.N(3352825, 'blob', blob, false, false, false);
                            J$.N(3352833, 'out', out, false, false, false);
                            if (J$.C(156088, J$.B(447114, '===', J$.R(3352585, 'options', options, false, false), J$.T(3352593, undefined, 24, false))))
                                options = J$.W(3352609, 'options', J$.T(3352601, {}, 11, false), options, false, false);
                            var blob = J$.W(3352641, 'blob', J$.F(3352633, J$.R(3352617, 'toBuffer', toBuffer, false, true), false)(J$.R(3352625, 'cert', cert, false, false)), blob, false, false);
                            var out = J$.W(3352713, 'out', J$.B(447130, '+', J$.B(447122, '+', J$.F(3352673, J$.R(3352649, 'getCertType', getCertType, false, true), false)(J$.G(3352665, J$.R(3352657, 'cert', cert, false, false), 'subjectKey')), J$.T(3352681, ' ', 21, false)), J$.M(3352705, J$.R(3352689, 'blob', blob, false, false), 'toString', false)(J$.T(3352697, 'base64', 21, false))), out, false, false);
                            if (J$.C(156096, J$.G(3352729, J$.R(3352721, 'options', options, false, false), 'comment')))
                                out = J$.W(3352769, 'out', J$.B(447146, '+', J$.B(447138, '+', J$.R(3352737, 'out', out, false, false), J$.T(3352745, ' ', 21, false)), J$.G(3352761, J$.R(3352753, 'options', options, false, false), 'comment')), out, false, false);
                            return J$.Rt(3352785, J$.R(3352777, 'out', out, false, false));
                        } catch (J$e) {
                            J$.Ex(3355713, J$e);
                        } finally {
                            if (J$.Fr(3355721))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function toBuffer(cert, noSig) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(3354721, arguments.callee, this, arguments);
                            arguments = J$.N(3354729, 'arguments', arguments, true, false, false);
                            cert = J$.N(3354737, 'cert', cert, true, false, false);
                            noSig = J$.N(3354745, 'noSig', noSig, true, false, false);
                            J$.N(3354753, 'sig', sig, false, false, false);
                            J$.N(3354761, 'buf', buf, false, false, false);
                            J$.N(3354769, 'key', key, false, false, false);
                            J$.N(3354777, 'algInfo', algInfo, false, false, false);
                            J$.N(3354785, 'type', type, false, false, false);
                            J$.N(3354793, 'sub', sub, false, false, false);
                            J$.N(3354801, 'exts', exts, false, false, false);
                            J$.N(3354809, 'extbuf', extbuf, false, false, false);
                            J$.M(3352881, J$.R(3352841, 'assert', assert, false, true), 'object', false)(J$.G(3352865, J$.G(3352857, J$.R(3352849, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3352873, 'signature for openssh format', 21, false));
                            var sig = J$.W(3352913, 'sig', J$.G(3352905, J$.G(3352897, J$.R(3352889, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            if (J$.C(156104, J$.B(447154, '===', J$.G(3352929, J$.R(3352921, 'sig', sig, false, false), 'nonce'), J$.T(3352937, undefined, 24, false))))
                                J$.P(3352977, J$.R(3352945, 'sig', sig, false, false), 'nonce', J$.M(3352969, J$.R(3352953, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(3352961, 16, 22, false)));
                            var buf = J$.W(3353009, 'buf', J$.F(3353001, J$.R(3352985, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3352993, {}, 11, false)), buf, false, false);
                            J$.M(3353057, J$.R(3353017, 'buf', buf, false, false), 'writeString', false)(J$.F(3353049, J$.R(3353025, 'getCertType', getCertType, false, true), false)(J$.G(3353041, J$.R(3353033, 'cert', cert, false, false), 'subjectKey')));
                            J$.M(3353089, J$.R(3353065, 'buf', buf, false, false), 'writeBuffer', false)(J$.G(3353081, J$.R(3353073, 'sig', sig, false, false), 'nonce'));
                            var key = J$.W(3353113, 'key', J$.G(3353105, J$.R(3353097, 'cert', cert, false, false), 'subjectKey'), key, false, false);
                            var algInfo = J$.W(3353161, 'algInfo', J$.G(3353153, J$.G(3353129, J$.R(3353121, 'algs', algs, false, true), 'info'), J$.G(3353145, J$.R(3353137, 'key', key, false, false), 'type')), algInfo, false, false);
                            J$.M(3353265, J$.G(3353177, J$.R(3353169, 'algInfo', algInfo, false, false), 'parts'), 'forEach', false)(J$.T(3353257, function (part) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(3353233, arguments.callee, this, arguments);
                                            arguments = J$.N(3353241, 'arguments', arguments, true, false, false);
                                            part = J$.N(3353249, 'part', part, true, false, false);
                                            J$.M(3353225, J$.R(3353185, 'buf', buf, false, false), 'writePart', false)(J$.G(3353217, J$.G(3353201, J$.R(3353193, 'key', key, false, false), 'part'), J$.R(3353209, 'part', part, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3355729, J$e);
                                        } finally {
                                            if (J$.Fr(3355737))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3353297, J$.R(3353273, 'buf', buf, false, false), 'writeInt64', false)(J$.G(3353289, J$.R(3353281, 'cert', cert, false, false), 'serial'));
                            var type = J$.W(3353345, 'type', J$.G(3353337, J$.G(3353329, J$.G(3353313, J$.R(3353305, 'cert', cert, false, false), 'subjects'), J$.T(3353321, 0, 22, false)), 'type'), type, false, false);
                            J$.M(3353377, J$.R(3353353, 'assert', assert, false, true), 'notStrictEqual', false)(J$.R(3353361, 'type', type, false, false), J$.T(3353369, 'unknown', 21, false));
                            J$.M(3353473, J$.G(3353393, J$.R(3353385, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(3353465, function (id) {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(3353441, arguments.callee, this, arguments);
                                            arguments = J$.N(3353449, 'arguments', arguments, true, false, false);
                                            id = J$.N(3353457, 'id', id, true, false, false);
                                            J$.M(3353433, J$.R(3353401, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3353417, J$.R(3353409, 'id', id, false, false), 'type'), J$.R(3353425, 'type', type, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3355745, J$e);
                                        } finally {
                                            if (J$.Fr(3355753))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            type = J$.W(3353505, 'type', J$.G(3353497, J$.R(3353481, 'TYPES', TYPES, false, true), J$.R(3353489, 'type', type, false, false)), type, false, false);
                            J$.M(3353529, J$.R(3353513, 'buf', buf, false, false), 'writeInt', false)(J$.R(3353521, 'type', type, false, false));
                            if (J$.C(156120, J$.B(447162, '===', J$.G(3353545, J$.R(3353537, 'sig', sig, false, false), 'keyId'), J$.T(3353553, undefined, 24, false)))) {
                                J$.P(3353697, J$.R(3353561, 'sig', sig, false, false), 'keyId', J$.B(447178, '+', J$.B(447170, '+', J$.G(3353601, J$.G(3353593, J$.G(3353577, J$.R(3353569, 'cert', cert, false, false), 'subjects'), J$.T(3353585, 0, 22, false)), 'type'), J$.T(3353609, '_', 21, false)), J$.C(156112, J$.G(3353649, J$.G(3353641, J$.G(3353625, J$.R(3353617, 'cert', cert, false, false), 'subjects'), J$.T(3353633, 0, 22, false)), 'uid')) ? J$._() : J$.G(3353689, J$.G(3353681, J$.G(3353665, J$.R(3353657, 'cert', cert, false, false), 'subjects'), J$.T(3353673, 0, 22, false)), 'hostname')));
                            }
                            J$.M(3353729, J$.R(3353705, 'buf', buf, false, false), 'writeString', false)(J$.G(3353721, J$.R(3353713, 'sig', sig, false, false), 'keyId'));
                            var sub = J$.W(3353761, 'sub', J$.F(3353753, J$.R(3353737, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3353745, {}, 11, false)), sub, false, false);
                            J$.M(3353929, J$.G(3353777, J$.R(3353769, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(3353921, function (id) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(3353897, arguments.callee, this, arguments);
                                            arguments = J$.N(3353905, 'arguments', arguments, true, false, false);
                                            id = J$.N(3353913, 'id', id, true, false, false);
                                            if (J$.C(156136, J$.B(447186, '===', J$.R(3353785, 'type', type, false, false), J$.G(3353801, J$.R(3353793, 'TYPES', TYPES, false, true), 'host'))))
                                                J$.M(3353833, J$.R(3353809, 'sub', sub, false, false), 'writeString', false)(J$.G(3353825, J$.R(3353817, 'id', id, false, false), 'hostname'));
                                            else if (J$.C(156128, J$.B(447194, '===', J$.R(3353841, 'type', type, false, false), J$.G(3353857, J$.R(3353849, 'TYPES', TYPES, false, true), 'user'))))
                                                J$.M(3353889, J$.R(3353865, 'sub', sub, false, false), 'writeString', false)(J$.G(3353881, J$.R(3353873, 'id', id, false, false), 'uid'));
                                        } catch (J$e) {
                                            J$.Ex(3355761, J$e);
                                        } finally {
                                            if (J$.Fr(3355769))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3353961, J$.R(3353937, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3353953, J$.R(3353945, 'sub', sub, false, false), 'toBuffer', false)());
                            J$.M(3354009, J$.R(3353969, 'buf', buf, false, false), 'writeInt64', false)(J$.F(3354001, J$.R(3353977, 'dateToInt64', dateToInt64, false, true), false)(J$.G(3353993, J$.R(3353985, 'cert', cert, false, false), 'validFrom')));
                            J$.M(3354057, J$.R(3354017, 'buf', buf, false, false), 'writeInt64', false)(J$.F(3354049, J$.R(3354025, 'dateToInt64', dateToInt64, false, true), false)(J$.G(3354041, J$.R(3354033, 'cert', cert, false, false), 'validUntil')));
                            var exts = J$.W(3354081, 'exts', J$.G(3354073, J$.R(3354065, 'sig', sig, false, false), 'exts'), exts, false, false);
                            if (J$.C(156144, J$.B(447202, '===', J$.R(3354089, 'exts', exts, false, false), J$.T(3354097, undefined, 24, false))))
                                exts = J$.W(3354113, 'exts', J$.T(3354105, [], 10, false), exts, false, false);
                            var extbuf = J$.W(3354145, 'extbuf', J$.F(3354137, J$.R(3354121, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3354129, {}, 11, false)), extbuf, false, false);
                            J$.M(3354289, J$.R(3354153, 'exts', exts, false, false), 'forEach', false)(J$.T(3354281, function (ext) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(3354257, arguments.callee, this, arguments);
                                            arguments = J$.N(3354265, 'arguments', arguments, true, false, false);
                                            ext = J$.N(3354273, 'ext', ext, true, false, false);
                                            if (J$.C(156152, J$.B(447210, '!==', J$.G(3354169, J$.R(3354161, 'ext', ext, false, false), 'critical'), J$.T(3354177, true, 23, false))))
                                                return J$.Rt(3354185, undefined);
                                            J$.M(3354217, J$.R(3354193, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(3354209, J$.R(3354201, 'ext', ext, false, false), 'name'));
                                            J$.M(3354249, J$.R(3354225, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(3354241, J$.R(3354233, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(3355777, J$e);
                                        } finally {
                                            if (J$.Fr(3355785))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3354321, J$.R(3354297, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3354313, J$.R(3354305, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            extbuf = J$.W(3354353, 'extbuf', J$.F(3354345, J$.R(3354329, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3354337, {}, 11, false)), extbuf, false, false);
                            J$.M(3354497, J$.R(3354361, 'exts', exts, false, false), 'forEach', false)(J$.T(3354489, function (ext) {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(3354465, arguments.callee, this, arguments);
                                            arguments = J$.N(3354473, 'arguments', arguments, true, false, false);
                                            ext = J$.N(3354481, 'ext', ext, true, false, false);
                                            if (J$.C(156160, J$.B(447218, '===', J$.G(3354377, J$.R(3354369, 'ext', ext, false, false), 'critical'), J$.T(3354385, true, 23, false))))
                                                return J$.Rt(3354393, undefined);
                                            J$.M(3354425, J$.R(3354401, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(3354417, J$.R(3354409, 'ext', ext, false, false), 'name'));
                                            J$.M(3354457, J$.R(3354433, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(3354449, J$.R(3354441, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(3355793, J$e);
                                        } finally {
                                            if (J$.Fr(3355801))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3354529, J$.R(3354505, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3354521, J$.R(3354513, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            J$.M(3354569, J$.R(3354537, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3354561, J$.R(3354545, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(3354553, 0, 22, false)));
                            sub = J$.W(3354609, 'sub', J$.M(3354601, J$.R(3354577, 'rfc4253', rfc4253, false, true), 'write', false)(J$.G(3354593, J$.R(3354585, 'cert', cert, false, false), 'issuerKey')), sub, false, false);
                            J$.M(3354633, J$.R(3354617, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(3354625, 'sub', sub, false, false));
                            if (J$.C(156168, J$.U(447226, '!', J$.R(3354641, 'noSig', noSig, false, false))))
                                J$.M(3354689, J$.R(3354649, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3354681, J$.G(3354665, J$.R(3354657, 'sig', sig, false, false), 'signature'), 'toBuffer', false)(J$.T(3354673, 'ssh', 21, false)));
                            return J$.Rt(3354713, J$.M(3354705, J$.R(3354697, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(3355809, J$e);
                        } finally {
                            if (J$.Fr(3355817))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getAlg(certType) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(3354985, arguments.callee, this, arguments);
                            arguments = J$.N(3354993, 'arguments', arguments, true, false, false);
                            certType = J$.N(3355001, 'certType', certType, true, false, false);
                            if (J$.C(156176, J$.B(447234, '===', J$.R(3354817, 'certType', certType, false, false), J$.T(3354825, 'ssh-rsa-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3354841, J$.T(3354833, 'rsa', 21, false));
                            if (J$.C(156184, J$.B(447242, '===', J$.R(3354849, 'certType', certType, false, false), J$.T(3354857, 'ssh-dss-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3354873, J$.T(3354865, 'dsa', 21, false));
                            if (J$.C(156192, J$.M(3354897, J$.R(3354881, 'certType', certType, false, false), 'match', false)(J$.R(3354889, 'ECDSA_ALGO', ECDSA_ALGO, false, true))))
                                return J$.Rt(3354913, J$.T(3354905, 'ecdsa', 21, false));
                            if (J$.C(156200, J$.B(447250, '===', J$.R(3354921, 'certType', certType, false, false), J$.T(3354929, 'ssh-ed25519-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3354945, J$.T(3354937, 'ed25519', 21, false));
                            throw J$.F(3354977, J$.I(typeof Error === 'undefined' ? Error = J$.R(3354953, 'Error', undefined, true, true) : Error = J$.R(3354953, 'Error', Error, true, true)), true)(J$.B(447258, '+', J$.T(3354961, 'Unsupported cert type ', 21, false), J$.R(3354969, 'certType', certType, false, false)));
                        } catch (J$e) {
                            J$.Ex(3355825, J$e);
                        } finally {
                            if (J$.Fr(3355833))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCertType(key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(3355233, arguments.callee, this, arguments);
                            arguments = J$.N(3355241, 'arguments', arguments, true, false, false);
                            key = J$.N(3355249, 'key', key, true, false, false);
                            if (J$.C(156208, J$.B(447266, '===', J$.G(3355017, J$.R(3355009, 'key', key, false, false), 'type'), J$.T(3355025, 'rsa', 21, false))))
                                return J$.Rt(3355041, J$.T(3355033, 'ssh-rsa-cert-v01@openssh.com', 21, false));
                            if (J$.C(156216, J$.B(447274, '===', J$.G(3355057, J$.R(3355049, 'key', key, false, false), 'type'), J$.T(3355065, 'dsa', 21, false))))
                                return J$.Rt(3355081, J$.T(3355073, 'ssh-dss-cert-v01@openssh.com', 21, false));
                            if (J$.C(156224, J$.B(447282, '===', J$.G(3355097, J$.R(3355089, 'key', key, false, false), 'type'), J$.T(3355105, 'ecdsa', 21, false))))
                                return J$.Rt(3355145, J$.B(447298, '+', J$.B(447290, '+', J$.T(3355113, 'ecdsa-sha2-', 21, false), J$.G(3355129, J$.R(3355121, 'key', key, false, false), 'curve')), J$.T(3355137, '-cert-v01@openssh.com', 21, false)));
                            if (J$.C(156232, J$.B(447306, '===', J$.G(3355161, J$.R(3355153, 'key', key, false, false), 'type'), J$.T(3355169, 'ed25519', 21, false))))
                                return J$.Rt(3355185, J$.T(3355177, 'ssh-ed25519-cert-v01@openssh.com', 21, false));
                            throw J$.F(3355225, J$.I(typeof Error === 'undefined' ? Error = J$.R(3355193, 'Error', undefined, true, true) : Error = J$.R(3355193, 'Error', Error, true, true)), true)(J$.B(447314, '+', J$.T(3355201, 'Unsupported key type ', 21, false), J$.G(3355217, J$.R(3355209, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(3355841, J$e);
                        } finally {
                            if (J$.Fr(3355849))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3355265, 'assert', assert, false, false, false);
            J$.N(3355273, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(3355281, 'crypto', crypto, false, false, false);
            J$.N(3355289, 'Buffer', Buffer, false, false, false);
            J$.N(3355297, 'algs', algs, false, false, false);
            J$.N(3355305, 'Key', Key, false, false, false);
            J$.N(3355313, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3355321, 'Identity', Identity, false, false, false);
            J$.N(3355329, 'rfc4253', rfc4253, false, false, false);
            J$.N(3355337, 'Signature', Signature, false, false, false);
            J$.N(3355345, 'utils', utils, false, false, false);
            J$.N(3355353, 'Certificate', Certificate, false, false, false);
            verify = J$.N(3355369, 'verify', J$.T(3355361, verify, 12, false), true, false, false);
            J$.N(3355377, 'TYPES', TYPES, false, false, false);
            J$.N(3355385, 'ECDSA_ALGO', ECDSA_ALGO, false, false, false);
            read = J$.N(3355401, 'read', J$.T(3355393, read, 12, false), true, false, false);
            fromBuffer = J$.N(3355417, 'fromBuffer', J$.T(3355409, fromBuffer, 12, false), true, false, false);
            int64ToDate = J$.N(3355433, 'int64ToDate', J$.T(3355425, int64ToDate, 12, false), true, false, false);
            dateToInt64 = J$.N(3355449, 'dateToInt64', J$.T(3355441, dateToInt64, 12, false), true, false, false);
            sign = J$.N(3355465, 'sign', J$.T(3355457, sign, 12, false), true, false, false);
            signAsync = J$.N(3355481, 'signAsync', J$.T(3355473, signAsync, 12, false), true, false, false);
            write = J$.N(3355497, 'write', J$.T(3355489, write, 12, false), true, false, false);
            toBuffer = J$.N(3355513, 'toBuffer', J$.T(3355505, toBuffer, 12, false), true, false, false);
            getAlg = J$.N(3355529, 'getAlg', J$.T(3355521, getAlg, 12, false), true, false, false);
            getCertType = J$.N(3355545, 'getCertType', J$.T(3355537, getCertType, 12, false), true, false, false);
            J$.T(3347185, 'use strict', 21, false);
            J$.F(3347209, J$.I(typeof require === 'undefined' ? require = J$.R(3347193, 'require', undefined, true, true) : require = J$.R(3347193, 'require', require, true, true)), false)(J$.T(3347201, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3347233, J$.I(typeof require === 'undefined' ? require = J$.R(3347217, 'require', undefined, true, true) : require = J$.R(3347217, 'require', require, true, true)), false)(J$.T(3347225, 'core-js/modules/es.array.map', 21, false));
            J$.F(3347257, J$.I(typeof require === 'undefined' ? require = J$.R(3347241, 'require', undefined, true, true) : require = J$.R(3347241, 'require', require, true, true)), false)(J$.T(3347249, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3347281, J$.I(typeof require === 'undefined' ? require = J$.R(3347265, 'require', undefined, true, true) : require = J$.R(3347265, 'require', require, true, true)), false)(J$.T(3347273, 'core-js/modules/es.function.name', 21, false));
            J$.F(3347305, J$.I(typeof require === 'undefined' ? require = J$.R(3347289, 'require', undefined, true, true) : require = J$.R(3347289, 'require', require, true, true)), false)(J$.T(3347297, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3347329, J$.I(typeof require === 'undefined' ? require = J$.R(3347313, 'require', undefined, true, true) : require = J$.R(3347313, 'require', require, true, true)), false)(J$.T(3347321, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3347353, J$.I(typeof require === 'undefined' ? require = J$.R(3347337, 'require', undefined, true, true) : require = J$.R(3347337, 'require', require, true, true)), false)(J$.T(3347345, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3347377, J$.I(typeof require === 'undefined' ? require = J$.R(3347361, 'require', undefined, true, true) : require = J$.R(3347361, 'require', require, true, true)), false)(J$.T(3347369, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3347401, J$.I(typeof require === 'undefined' ? require = J$.R(3347385, 'require', undefined, true, true) : require = J$.R(3347385, 'require', require, true, true)), false)(J$.T(3347393, 'core-js/modules/es.string.match', 21, false));
            J$.F(3347425, J$.I(typeof require === 'undefined' ? require = J$.R(3347409, 'require', undefined, true, true) : require = J$.R(3347409, 'require', require, true, true)), false)(J$.T(3347417, 'core-js/modules/es.string.split', 21, false));
            J$.F(3347449, J$.I(typeof require === 'undefined' ? require = J$.R(3347433, 'require', undefined, true, true) : require = J$.R(3347433, 'require', require, true, true)), false)(J$.T(3347441, 'core-js/modules/es.string.trim', 21, false));
            J$.F(3347473, J$.I(typeof require === 'undefined' ? require = J$.R(3347457, 'require', undefined, true, true) : require = J$.R(3347457, 'require', require, true, true)), false)(J$.T(3347465, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.P(3347553, J$.I(typeof module === 'undefined' ? module = J$.R(3347481, 'module', undefined, true, true) : module = J$.R(3347481, 'module', module, true, true)), 'exports', J$.T(3347545, {
                read: J$.R(3347489, 'read', read, false, true),
                verify: J$.R(3347497, 'verify', verify, false, true),
                sign: J$.R(3347505, 'sign', sign, false, true),
                signAsync: J$.R(3347513, 'signAsync', signAsync, false, true),
                write: J$.R(3347521, 'write', write, false, true),
                fromBuffer: J$.R(3347529, 'fromBuffer', fromBuffer, false, true),
                toBuffer: J$.R(3347537, 'toBuffer', toBuffer, false, true)
            }, 11, false));
            var assert = J$.W(3347585, 'assert', J$.F(3347577, J$.I(typeof require === 'undefined' ? require = J$.R(3347561, 'require', undefined, true, true) : require = J$.R(3347561, 'require', require, true, true)), false)(J$.T(3347569, 'assert-plus', 21, false)), assert, false, true);
            var SSHBuffer = J$.W(3347617, 'SSHBuffer', J$.F(3347609, J$.I(typeof require === 'undefined' ? require = J$.R(3347593, 'require', undefined, true, true) : require = J$.R(3347593, 'require', require, true, true)), false)(J$.T(3347601, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var crypto = J$.W(3347649, 'crypto', J$.F(3347641, J$.I(typeof require === 'undefined' ? require = J$.R(3347625, 'require', undefined, true, true) : require = J$.R(3347625, 'require', require, true, true)), false)(J$.T(3347633, 'crypto', 21, false)), crypto, false, true);
            var Buffer = J$.W(3347689, 'Buffer', J$.G(3347681, J$.F(3347673, J$.I(typeof require === 'undefined' ? require = J$.R(3347657, 'require', undefined, true, true) : require = J$.R(3347657, 'require', require, true, true)), false)(J$.T(3347665, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3347721, 'algs', J$.F(3347713, J$.I(typeof require === 'undefined' ? require = J$.R(3347697, 'require', undefined, true, true) : require = J$.R(3347697, 'require', require, true, true)), false)(J$.T(3347705, '../algs', 21, false)), algs, false, true);
            var Key = J$.W(3347753, 'Key', J$.F(3347745, J$.I(typeof require === 'undefined' ? require = J$.R(3347729, 'require', undefined, true, true) : require = J$.R(3347729, 'require', require, true, true)), false)(J$.T(3347737, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3347785, 'PrivateKey', J$.F(3347777, J$.I(typeof require === 'undefined' ? require = J$.R(3347761, 'require', undefined, true, true) : require = J$.R(3347761, 'require', require, true, true)), false)(J$.T(3347769, '../private-key', 21, false)), PrivateKey, false, true);
            var Identity = J$.W(3347817, 'Identity', J$.F(3347809, J$.I(typeof require === 'undefined' ? require = J$.R(3347793, 'require', undefined, true, true) : require = J$.R(3347793, 'require', require, true, true)), false)(J$.T(3347801, '../identity', 21, false)), Identity, false, true);
            var rfc4253 = J$.W(3347849, 'rfc4253', J$.F(3347841, J$.I(typeof require === 'undefined' ? require = J$.R(3347825, 'require', undefined, true, true) : require = J$.R(3347825, 'require', require, true, true)), false)(J$.T(3347833, './rfc4253', 21, false)), rfc4253, false, true);
            var Signature = J$.W(3347881, 'Signature', J$.F(3347873, J$.I(typeof require === 'undefined' ? require = J$.R(3347857, 'require', undefined, true, true) : require = J$.R(3347857, 'require', require, true, true)), false)(J$.T(3347865, '../signature', 21, false)), Signature, false, true);
            var utils = J$.W(3347913, 'utils', J$.F(3347905, J$.I(typeof require === 'undefined' ? require = J$.R(3347889, 'require', undefined, true, true) : require = J$.R(3347889, 'require', require, true, true)), false)(J$.T(3347897, '../utils', 21, false)), utils, false, true);
            var Certificate = J$.W(3347945, 'Certificate', J$.F(3347937, J$.I(typeof require === 'undefined' ? require = J$.R(3347921, 'require', undefined, true, true) : require = J$.R(3347921, 'require', require, true, true)), false)(J$.T(3347929, '../certificate', 21, false)), Certificate, false, true);
            var TYPES = J$.W(3348025, 'TYPES', J$.T(3348017, {
                'user': J$.T(3348001, 1, 22, false),
                'host': J$.T(3348009, 2, 22, false)
            }, 11, false), TYPES, false, true);
            J$.M(3348137, J$.M(3348049, J$.I(typeof Object === 'undefined' ? Object = J$.R(3348033, 'Object', undefined, true, true) : Object = J$.R(3348033, 'Object', Object, true, true)), 'keys', false)(J$.R(3348041, 'TYPES', TYPES, false, true)), 'forEach', false)(J$.T(3348129, function (k) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3348105, arguments.callee, this, arguments);
                            arguments = J$.N(3348113, 'arguments', arguments, true, false, false);
                            k = J$.N(3348121, 'k', k, true, false, false);
                            J$.P(3348097, J$.R(3348057, 'TYPES', TYPES, false, true), J$.G(3348081, J$.R(3348065, 'TYPES', TYPES, false, true), J$.R(3348073, 'k', k, false, false)), J$.R(3348089, 'k', k, false, false));
                        } catch (J$e) {
                            J$.Ex(3355569, J$e);
                        } finally {
                            if (J$.Fr(3355577))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var ECDSA_ALGO = J$.W(3348153, 'ECDSA_ALGO', J$.T(3348145, /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/, 14, false), ECDSA_ALGO, false, true);
        } catch (J$e) {
            J$.Ex(3355857, J$e);
        } finally {
            if (J$.Sr(3355865))
                continue jalangiLabel19;
            else
                break jalangiLabel19;
        }
    }
// JALANGI DO NOT INSTRUMENT

