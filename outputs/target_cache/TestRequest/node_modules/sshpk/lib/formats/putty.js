J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(3388945, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/putty.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3387857, arguments.callee, this, arguments);
                            arguments = J$.N(3387865, 'arguments', arguments, true, false, false);
                            buf = J$.N(3387873, 'buf', buf, true, false, false);
                            options = J$.N(3387881, 'options', options, true, false, false);
                            J$.N(3387889, 'lines', lines, false, false, false);
                            J$.N(3387897, 'found', found, false, false, false);
                            J$.N(3387905, 'parts', parts, false, false, false);
                            J$.N(3387913, 'si', si, false, false, false);
                            J$.N(3387921, 'alg', alg, false, false, false);
                            J$.N(3387929, 'comment', comment, false, false, false);
                            J$.N(3387937, 'publicLines', publicLines, false, false, false);
                            J$.N(3387945, 'publicBuf', publicBuf, false, false, false);
                            J$.N(3387953, 'keyType', keyType, false, false, false);
                            J$.N(3387961, 'key', key, false, false, false);
                            var lines = J$.W(3386857, 'lines', J$.M(3386849, J$.M(3386833, J$.R(3386817, 'buf', buf, false, false), 'toString', false)(J$.T(3386825, 'ascii', 21, false)), 'split', false)(J$.T(3386841, /[\r\n]+/, 14, false)), lines, false, false);
                            var found = J$.W(3386873, 'found', J$.T(3386865, false, 23, false), found, false, false);
                            var parts;
                            var si = J$.W(3386889, 'si', J$.T(3386881, 0, 22, false), si, false, false);
                            while (J$.C(157256, J$.B(448434, '<', J$.R(3386897, 'si', si, false, false), J$.G(3386913, J$.R(3386905, 'lines', lines, false, false), 'length')))) {
                                parts = J$.W(3386969, 'parts', J$.F(3386961, J$.R(3386921, 'splitHeader', splitHeader, false, true), false)(J$.G(3386953, J$.R(3386929, 'lines', lines, false, false), J$.B(448458, '-', si = J$.W(3386945, 'si', J$.B(448450, '+', J$.U(448442, '+', J$.R(3386937, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                                if (J$.C(157248, J$.C(157240, J$.R(3386977, 'parts', parts, false, false)) ? J$.B(448466, '===', J$.M(3387009, J$.G(3387001, J$.R(3386985, 'parts', parts, false, false), J$.T(3386993, 0, 22, false)), 'toLowerCase', false)(), J$.T(3387017, 'putty-user-key-file-2', 21, false)) : J$._())) {
                                    found = J$.W(3387033, 'found', J$.T(3387025, true, 23, false), found, false, false);
                                    break;
                                }
                            }
                            if (J$.C(157264, J$.U(448474, '!', J$.R(3387041, 'found', found, false, false)))) {
                                throw J$.F(3387065, J$.I(typeof Error === 'undefined' ? Error = J$.R(3387049, 'Error', undefined, true, true) : Error = J$.R(3387049, 'Error', Error, true, true)), true)(J$.T(3387057, 'No PuTTY format first line found', 21, false));
                            }
                            var alg = J$.W(3387097, 'alg', J$.G(3387089, J$.R(3387073, 'parts', parts, false, false), J$.T(3387081, 1, 22, false)), alg, false, false);
                            parts = J$.W(3387153, 'parts', J$.F(3387145, J$.R(3387105, 'splitHeader', splitHeader, false, true), false)(J$.G(3387137, J$.R(3387113, 'lines', lines, false, false), J$.B(448498, '-', si = J$.W(3387129, 'si', J$.B(448490, '+', J$.U(448482, '+', J$.R(3387121, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(3387209, J$.R(3387161, 'assert', assert, false, true), 'equal', false)(J$.M(3387193, J$.G(3387185, J$.R(3387169, 'parts', parts, false, false), J$.T(3387177, 0, 22, false)), 'toLowerCase', false)(), J$.T(3387201, 'encryption', 21, false));
                            parts = J$.W(3387265, 'parts', J$.F(3387257, J$.R(3387217, 'splitHeader', splitHeader, false, true), false)(J$.G(3387249, J$.R(3387225, 'lines', lines, false, false), J$.B(448522, '-', si = J$.W(3387241, 'si', J$.B(448514, '+', J$.U(448506, '+', J$.R(3387233, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(3387321, J$.R(3387273, 'assert', assert, false, true), 'equal', false)(J$.M(3387305, J$.G(3387297, J$.R(3387281, 'parts', parts, false, false), J$.T(3387289, 0, 22, false)), 'toLowerCase', false)(), J$.T(3387313, 'comment', 21, false));
                            var comment = J$.W(3387353, 'comment', J$.G(3387345, J$.R(3387329, 'parts', parts, false, false), J$.T(3387337, 1, 22, false)), comment, false, false);
                            parts = J$.W(3387409, 'parts', J$.F(3387401, J$.R(3387361, 'splitHeader', splitHeader, false, true), false)(J$.G(3387393, J$.R(3387369, 'lines', lines, false, false), J$.B(448546, '-', si = J$.W(3387385, 'si', J$.B(448538, '+', J$.U(448530, '+', J$.R(3387377, 'si', si, false, false)), 1), si, false, false), 1))), parts, false, false);
                            J$.M(3387465, J$.R(3387417, 'assert', assert, false, true), 'equal', false)(J$.M(3387449, J$.G(3387441, J$.R(3387425, 'parts', parts, false, false), J$.T(3387433, 0, 22, false)), 'toLowerCase', false)(), J$.T(3387457, 'public-lines', 21, false));
                            var publicLines = J$.W(3387521, 'publicLines', J$.F(3387513, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(3387473, 'parseInt', undefined, true, true) : parseInt = J$.R(3387473, 'parseInt', parseInt, true, true)), false)(J$.G(3387497, J$.R(3387481, 'parts', parts, false, false), J$.T(3387489, 1, 22, false)), J$.T(3387505, 10, 22, false)), publicLines, false, false);
                            if (J$.C(157288, J$.C(157280, J$.C(157272, J$.U(448554, '!', J$.F(3387545, J$.I(typeof isFinite === 'undefined' ? isFinite = J$.R(3387529, 'isFinite', undefined, true, true) : isFinite = J$.R(3387529, 'isFinite', isFinite, true, true)), false)(J$.R(3387537, 'publicLines', publicLines, false, false)))) ? J$._() : J$.B(448562, '<', J$.R(3387553, 'publicLines', publicLines, false, false), J$.T(3387561, 0, 22, false))) ? J$._() : J$.B(448570, '>', J$.R(3387569, 'publicLines', publicLines, false, false), J$.G(3387585, J$.R(3387577, 'lines', lines, false, false), 'length')))) {
                                throw J$.F(3387609, J$.I(typeof Error === 'undefined' ? Error = J$.R(3387593, 'Error', undefined, true, true) : Error = J$.R(3387593, 'Error', Error, true, true)), true)(J$.T(3387601, 'Invalid public-lines count', 21, false));
                            }
                            var publicBuf = J$.W(3387697, 'publicBuf', J$.M(3387689, J$.R(3387617, 'Buffer', Buffer, false, true), 'from', false)(J$.M(3387673, J$.M(3387657, J$.R(3387625, 'lines', lines, false, false), 'slice', false)(J$.R(3387633, 'si', si, false, false), J$.B(448578, '+', J$.R(3387641, 'si', si, false, false), J$.R(3387649, 'publicLines', publicLines, false, false))), 'join', false)(J$.T(3387665, '', 21, false)), J$.T(3387681, 'base64', 21, false)), publicBuf, false, false);
                            var keyType = J$.W(3387729, 'keyType', J$.M(3387721, J$.R(3387705, 'rfc4253', rfc4253, false, true), 'algToKeyType', false)(J$.R(3387713, 'alg', alg, false, false)), keyType, false, false);
                            var key = J$.W(3387761, 'key', J$.M(3387753, J$.R(3387737, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(3387745, 'publicBuf', publicBuf, false, false)), key, false, false);
                            if (J$.C(157296, J$.B(448586, '!==', J$.G(3387777, J$.R(3387769, 'key', key, false, false), 'type'), J$.R(3387785, 'keyType', keyType, false, false)))) {
                                throw J$.F(3387809, J$.I(typeof Error === 'undefined' ? Error = J$.R(3387793, 'Error', undefined, true, true) : Error = J$.R(3387793, 'Error', Error, true, true)), true)(J$.T(3387801, 'Outer key algorithm mismatch', 21, false));
                            }
                            J$.P(3387833, J$.R(3387817, 'key', key, false, false), 'comment', J$.R(3387825, 'comment', comment, false, false));
                            return J$.Rt(3387849, J$.R(3387841, 'key', key, false, false));
                        } catch (J$e) {
                            J$.Ex(3389057, J$e);
                        } finally {
                            if (J$.Fr(3389065))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function splitHeader(line) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3388201, arguments.callee, this, arguments);
                            arguments = J$.N(3388209, 'arguments', arguments, true, false, false);
                            line = J$.N(3388217, 'line', line, true, false, false);
                            J$.N(3388225, 'idx', idx, false, false, false);
                            J$.N(3388233, 'header', header, false, false, false);
                            J$.N(3388241, 'rest', rest, false, false, false);
                            var idx = J$.W(3387993, 'idx', J$.M(3387985, J$.R(3387969, 'line', line, false, false), 'indexOf', false)(J$.T(3387977, ':', 21, false)), idx, false, false);
                            if (J$.C(157304, J$.B(448602, '===', J$.R(3388001, 'idx', idx, false, false), J$.U(448594, '-', J$.T(3388009, 1, 22, false)))))
                                return J$.Rt(3388025, J$.T(3388017, null, 25, false));
                            var header = J$.W(3388065, 'header', J$.M(3388057, J$.R(3388033, 'line', line, false, false), 'slice', false)(J$.T(3388041, 0, 22, false), J$.R(3388049, 'idx', idx, false, false)), header, false, false);
                            idx = J$.W(3388081, 'idx', J$.B(448618, '+', J$.U(448610, '+', J$.R(3388073, 'idx', idx, false, false)), 1), idx, false, false);
                            while (J$.C(157312, J$.B(448626, '===', J$.G(3388105, J$.R(3388089, 'line', line, false, false), J$.R(3388097, 'idx', idx, false, false)), J$.T(3388113, ' ', 21, false)))) {
                                idx = J$.W(3388129, 'idx', J$.B(448642, '+', J$.U(448634, '+', J$.R(3388121, 'idx', idx, false, false)), 1), idx, false, false);
                            }
                            var rest = J$.W(3388161, 'rest', J$.M(3388153, J$.R(3388137, 'line', line, false, false), 'slice', false)(J$.R(3388145, 'idx', idx, false, false)), rest, false, false);
                            return J$.Rt(3388193, J$.T(3388185, [
                                J$.R(3388169, 'header', header, false, false),
                                J$.R(3388177, 'rest', rest, false, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(3389073, J$e);
                        } finally {
                            if (J$.Fr(3389081))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3388673, arguments.callee, this, arguments);
                            arguments = J$.N(3388681, 'arguments', arguments, true, false, false);
                            key = J$.N(3388689, 'key', key, true, false, false);
                            options = J$.N(3388697, 'options', options, true, false, false);
                            J$.N(3388705, 'alg', alg, false, false, false);
                            J$.N(3388713, 'buf', buf, false, false, false);
                            J$.N(3388721, 'comment', comment, false, false, false);
                            J$.N(3388729, 'b64', b64, false, false, false);
                            J$.N(3388737, 'lines', lines, false, false, false);
                            J$.M(3388265, J$.R(3388249, 'assert', assert, false, true), 'object', false)(J$.R(3388257, 'key', key, false, false));
                            if (J$.C(157320, J$.U(448650, '!', J$.M(3388289, J$.R(3388273, 'Key', Key, false, true), 'isKey', false)(J$.R(3388281, 'key', key, false, false)))))
                                throw J$.F(3388313, J$.I(typeof Error === 'undefined' ? Error = J$.R(3388297, 'Error', undefined, true, true) : Error = J$.R(3388297, 'Error', Error, true, true)), true)(J$.T(3388305, 'Must be a public key', 21, false));
                            var alg = J$.W(3388345, 'alg', J$.M(3388337, J$.R(3388321, 'rfc4253', rfc4253, false, true), 'keyTypeToAlg', false)(J$.R(3388329, 'key', key, false, false)), alg, false, false);
                            var buf = J$.W(3388377, 'buf', J$.M(3388369, J$.R(3388353, 'rfc4253', rfc4253, false, true), 'write', false)(J$.R(3388361, 'key', key, false, false)), buf, false, false);
                            var comment = J$.W(3388409, 'comment', J$.C(157328, J$.G(3388393, J$.R(3388385, 'key', key, false, false), 'comment')) ? J$._() : J$.T(3388401, '', 21, false), comment, false, false);
                            var b64 = J$.W(3388441, 'b64', J$.M(3388433, J$.R(3388417, 'buf', buf, false, false), 'toString', false)(J$.T(3388425, 'base64', 21, false)), b64, false, false);
                            var lines = J$.W(3388481, 'lines', J$.F(3388473, J$.R(3388449, 'wrap', wrap, false, true), false)(J$.R(3388457, 'b64', b64, false, false), J$.T(3388465, 64, 22, false)), lines, false, false);
                            J$.M(3388521, J$.R(3388489, 'lines', lines, false, false), 'unshift', false)(J$.B(448658, '+', J$.T(3388497, 'Public-Lines: ', 21, false), J$.G(3388513, J$.R(3388505, 'lines', lines, false, false), 'length')));
                            J$.M(3388553, J$.R(3388529, 'lines', lines, false, false), 'unshift', false)(J$.B(448666, '+', J$.T(3388537, 'Comment: ', 21, false), J$.R(3388545, 'comment', comment, false, false)));
                            J$.M(3388577, J$.R(3388561, 'lines', lines, false, false), 'unshift', false)(J$.T(3388569, 'Encryption: none', 21, false));
                            J$.M(3388609, J$.R(3388585, 'lines', lines, false, false), 'unshift', false)(J$.B(448674, '+', J$.T(3388593, 'PuTTY-User-Key-File-2: ', 21, false), J$.R(3388601, 'alg', alg, false, false)));
                            return J$.Rt(3388665, J$.M(3388657, J$.R(3388617, 'Buffer', Buffer, false, true), 'from', false)(J$.B(448682, '+', J$.M(3388641, J$.R(3388625, 'lines', lines, false, false), 'join', false)(J$.T(3388633, '\n', 21, false)), J$.T(3388649, '\n', 21, false))));
                        } catch (J$e) {
                            J$.Ex(3389089, J$e);
                        } finally {
                            if (J$.Fr(3389097))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrap(txt, len) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3388897, arguments.callee, this, arguments);
                            arguments = J$.N(3388905, 'arguments', arguments, true, false, false);
                            txt = J$.N(3388913, 'txt', txt, true, false, false);
                            len = J$.N(3388921, 'len', len, true, false, false);
                            J$.N(3388929, 'lines', lines, false, false, false);
                            J$.N(3388937, 'pos', pos, false, false, false);
                            var lines = J$.W(3388753, 'lines', J$.T(3388745, [], 10, false), lines, false, false);
                            var pos = J$.W(3388769, 'pos', J$.T(3388761, 0, 22, false), pos, false, false);
                            while (J$.C(157336, J$.B(448690, '<', J$.R(3388777, 'pos', pos, false, false), J$.G(3388793, J$.R(3388785, 'txt', txt, false, false), 'length')))) {
                                J$.M(3388849, J$.R(3388801, 'lines', lines, false, false), 'push', false)(J$.M(3388841, J$.R(3388809, 'txt', txt, false, false), 'slice', false)(J$.R(3388817, 'pos', pos, false, false), J$.B(448698, '+', J$.R(3388825, 'pos', pos, false, false), J$.T(3388833, 64, 22, false))));
                                pos = J$.W(3388873, 'pos', J$.B(448706, '+', J$.R(3388865, 'pos', pos, false, false), J$.T(3388857, 64, 22, false)), pos, false, false);
                            }
                            return J$.Rt(3388889, J$.R(3388881, 'lines', lines, false, false));
                        } catch (J$e) {
                            J$.Ex(3389105, J$e);
                        } finally {
                            if (J$.Fr(3389113))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3388953, 'assert', assert, false, false, false);
            J$.N(3388961, 'Buffer', Buffer, false, false, false);
            J$.N(3388969, 'rfc4253', rfc4253, false, false, false);
            J$.N(3388977, 'Key', Key, false, false, false);
            J$.N(3388985, 'errors', errors, false, false, false);
            read = J$.N(3389001, 'read', J$.T(3388993, read, 12, false), true, false, false);
            splitHeader = J$.N(3389017, 'splitHeader', J$.T(3389009, splitHeader, 12, false), true, false, false);
            write = J$.N(3389033, 'write', J$.T(3389025, write, 12, false), true, false, false);
            wrap = J$.N(3389049, 'wrap', J$.T(3389041, wrap, 12, false), true, false, false);
            J$.T(3386385, 'use strict', 21, false);
            J$.F(3386409, J$.I(typeof require === 'undefined' ? require = J$.R(3386393, 'require', undefined, true, true) : require = J$.R(3386393, 'require', require, true, true)), false)(J$.T(3386401, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(3386433, J$.I(typeof require === 'undefined' ? require = J$.R(3386417, 'require', undefined, true, true) : require = J$.R(3386417, 'require', require, true, true)), false)(J$.T(3386425, 'core-js/modules/es.array.join', 21, false));
            J$.F(3386457, J$.I(typeof require === 'undefined' ? require = J$.R(3386441, 'require', undefined, true, true) : require = J$.R(3386441, 'require', require, true, true)), false)(J$.T(3386449, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3386481, J$.I(typeof require === 'undefined' ? require = J$.R(3386465, 'require', undefined, true, true) : require = J$.R(3386465, 'require', require, true, true)), false)(J$.T(3386473, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3386505, J$.I(typeof require === 'undefined' ? require = J$.R(3386489, 'require', undefined, true, true) : require = J$.R(3386489, 'require', require, true, true)), false)(J$.T(3386497, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3386529, J$.I(typeof require === 'undefined' ? require = J$.R(3386513, 'require', undefined, true, true) : require = J$.R(3386513, 'require', require, true, true)), false)(J$.T(3386521, 'core-js/modules/es.parse-int', 21, false));
            J$.F(3386553, J$.I(typeof require === 'undefined' ? require = J$.R(3386537, 'require', undefined, true, true) : require = J$.R(3386537, 'require', require, true, true)), false)(J$.T(3386545, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3386577, J$.I(typeof require === 'undefined' ? require = J$.R(3386561, 'require', undefined, true, true) : require = J$.R(3386561, 'require', require, true, true)), false)(J$.T(3386569, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3386601, J$.I(typeof require === 'undefined' ? require = J$.R(3386585, 'require', undefined, true, true) : require = J$.R(3386585, 'require', require, true, true)), false)(J$.T(3386593, 'core-js/modules/es.string.split', 21, false));
            J$.P(3386641, J$.I(typeof module === 'undefined' ? module = J$.R(3386609, 'module', undefined, true, true) : module = J$.R(3386609, 'module', module, true, true)), 'exports', J$.T(3386633, {
                read: J$.R(3386617, 'read', read, false, true),
                write: J$.R(3386625, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(3386673, 'assert', J$.F(3386665, J$.I(typeof require === 'undefined' ? require = J$.R(3386649, 'require', undefined, true, true) : require = J$.R(3386649, 'require', require, true, true)), false)(J$.T(3386657, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3386713, 'Buffer', J$.G(3386705, J$.F(3386697, J$.I(typeof require === 'undefined' ? require = J$.R(3386681, 'require', undefined, true, true) : require = J$.R(3386681, 'require', require, true, true)), false)(J$.T(3386689, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var rfc4253 = J$.W(3386745, 'rfc4253', J$.F(3386737, J$.I(typeof require === 'undefined' ? require = J$.R(3386721, 'require', undefined, true, true) : require = J$.R(3386721, 'require', require, true, true)), false)(J$.T(3386729, './rfc4253', 21, false)), rfc4253, false, true);
            var Key = J$.W(3386777, 'Key', J$.F(3386769, J$.I(typeof require === 'undefined' ? require = J$.R(3386753, 'require', undefined, true, true) : require = J$.R(3386753, 'require', require, true, true)), false)(J$.T(3386761, '../key', 21, false)), Key, false, true);
            var errors = J$.W(3386809, 'errors', J$.F(3386801, J$.I(typeof require === 'undefined' ? require = J$.R(3386785, 'require', undefined, true, true) : require = J$.R(3386785, 'require', require, true, true)), false)(J$.T(3386793, '../errors', 21, false)), errors, false, true);
        } catch (J$e) {
            J$.Ex(3389121, J$e);
        } finally {
            if (J$.Sr(3389129))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

