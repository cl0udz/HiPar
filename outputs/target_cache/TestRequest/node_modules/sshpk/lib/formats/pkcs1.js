J$.noInstrEval = false;
jalangiLabel20:
    while (true) {
        try {
            J$.Se(3371001, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/pkcs1.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3362849, arguments.callee, this, arguments);
                            arguments = J$.N(3362857, 'arguments', arguments, true, false, false);
                            buf = J$.N(3362865, 'buf', buf, true, false, false);
                            options = J$.N(3362873, 'options', options, true, false, false);
                            return J$.Rt(3362841, J$.M(3362833, J$.R(3362801, 'pem', pem, false, true), 'read', false)(J$.R(3362809, 'buf', buf, false, false), J$.R(3362817, 'options', options, false, false), J$.T(3362825, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3371409, J$e);
                        } finally {
                            if (J$.Fr(3371417))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3362929, arguments.callee, this, arguments);
                            arguments = J$.N(3362937, 'arguments', arguments, true, false, false);
                            key = J$.N(3362945, 'key', key, true, false, false);
                            options = J$.N(3362953, 'options', options, true, false, false);
                            return J$.Rt(3362921, J$.M(3362913, J$.R(3362881, 'pem', pem, false, true), 'write', false)(J$.R(3362889, 'key', key, false, false), J$.R(3362897, 'options', options, false, false), J$.T(3362905, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3371425, J$e);
                        } finally {
                            if (J$.Fr(3371433))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readMPInt(der, nm) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3363105, arguments.callee, this, arguments);
                            arguments = J$.N(3363113, 'arguments', arguments, true, false, false);
                            der = J$.N(3363121, 'der', der, true, false, false);
                            nm = J$.N(3363129, 'nm', nm, true, false, false);
                            J$.M(3363025, J$.R(3362961, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3362977, J$.R(3362969, 'der', der, false, false), 'peek', false)(), J$.G(3363001, J$.G(3362993, J$.R(3362985, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.B(447850, '+', J$.R(3363009, 'nm', nm, false, false), J$.T(3363017, ' is not an Integer', 21, false)));
                            return J$.Rt(3363097, J$.M(3363089, J$.R(3363033, 'utils', utils, false, true), 'mpNormalize', false)(J$.M(3363081, J$.R(3363041, 'der', der, false, false), 'readString', false)(J$.G(3363065, J$.G(3363057, J$.R(3363049, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3363073, true, 23, false))));
                        } catch (J$e) {
                            J$.Ex(3371441, J$e);
                        } finally {
                            if (J$.Fr(3371449))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1(alg, type, der) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3363689, arguments.callee, this, arguments);
                            arguments = J$.N(3363697, 'arguments', arguments, true, false, false);
                            alg = J$.N(3363705, 'alg', alg, true, false, false);
                            type = J$.N(3363713, 'type', type, true, false, false);
                            der = J$.N(3363721, 'der', der, true, false, false);
                            switch (J$.C1(156648, J$.R(3363137, 'alg', alg, false, false))) {
                            case J$.C2(156656, J$.T(3363273, 'RSA', 21, false)):
                                if (J$.C(156600, J$.B(447858, '===', J$.R(3363145, 'type', type, false, false), J$.T(3363153, 'public', 21, false))))
                                    return J$.Rt(3363185, J$.F(3363177, J$.R(3363161, 'readPkcs1RSAPublic', readPkcs1RSAPublic, false, true), false)(J$.R(3363169, 'der', der, false, false)));
                                else if (J$.C(156592, J$.B(447866, '===', J$.R(3363193, 'type', type, false, false), J$.T(3363201, 'private', 21, false))))
                                    return J$.Rt(3363233, J$.F(3363225, J$.R(3363209, 'readPkcs1RSAPrivate', readPkcs1RSAPrivate, false, true), false)(J$.R(3363217, 'der', der, false, false)));
                                throw J$.F(3363265, J$.I(typeof Error === 'undefined' ? Error = J$.R(3363241, 'Error', undefined, true, true) : Error = J$.R(3363241, 'Error', Error, true, true)), true)(J$.B(447874, '+', J$.T(3363249, 'Unknown key type: ', 21, false), J$.R(3363257, 'type', type, false, false)));
                            case J$.C2(156664, J$.T(3363409, 'DSA', 21, false)):
                                if (J$.C(156616, J$.B(447882, '===', J$.R(3363281, 'type', type, false, false), J$.T(3363289, 'public', 21, false))))
                                    return J$.Rt(3363321, J$.F(3363313, J$.R(3363297, 'readPkcs1DSAPublic', readPkcs1DSAPublic, false, true), false)(J$.R(3363305, 'der', der, false, false)));
                                else if (J$.C(156608, J$.B(447890, '===', J$.R(3363329, 'type', type, false, false), J$.T(3363337, 'private', 21, false))))
                                    return J$.Rt(3363369, J$.F(3363361, J$.R(3363345, 'readPkcs1DSAPrivate', readPkcs1DSAPrivate, false, true), false)(J$.R(3363353, 'der', der, false, false)));
                                throw J$.F(3363401, J$.I(typeof Error === 'undefined' ? Error = J$.R(3363377, 'Error', undefined, true, true) : Error = J$.R(3363377, 'Error', Error, true, true)), true)(J$.B(447898, '+', J$.T(3363385, 'Unknown key type: ', 21, false), J$.R(3363393, 'type', type, false, false)));
                            case J$.C2(156672, J$.T(3363417, 'EC', 21, false)):
                            case J$.C2(156680, J$.T(3363553, 'ECDSA', 21, false)):
                                if (J$.C(156632, J$.B(447906, '===', J$.R(3363425, 'type', type, false, false), J$.T(3363433, 'private', 21, false))))
                                    return J$.Rt(3363465, J$.F(3363457, J$.R(3363441, 'readPkcs1ECDSAPrivate', readPkcs1ECDSAPrivate, false, true), false)(J$.R(3363449, 'der', der, false, false)));
                                else if (J$.C(156624, J$.B(447914, '===', J$.R(3363473, 'type', type, false, false), J$.T(3363481, 'public', 21, false))))
                                    return J$.Rt(3363513, J$.F(3363505, J$.R(3363489, 'readPkcs1ECDSAPublic', readPkcs1ECDSAPublic, false, true), false)(J$.R(3363497, 'der', der, false, false)));
                                throw J$.F(3363545, J$.I(typeof Error === 'undefined' ? Error = J$.R(3363521, 'Error', undefined, true, true) : Error = J$.R(3363521, 'Error', Error, true, true)), true)(J$.B(447922, '+', J$.T(3363529, 'Unknown key type: ', 21, false), J$.R(3363537, 'type', type, false, false)));
                            case J$.C2(156688, J$.T(3363561, 'EDDSA', 21, false)):
                            case J$.C2(156696, J$.T(3363649, 'EdDSA', 21, false)):
                                if (J$.C(156640, J$.B(447930, '===', J$.R(3363569, 'type', type, false, false), J$.T(3363577, 'private', 21, false))))
                                    return J$.Rt(3363609, J$.F(3363601, J$.R(3363585, 'readPkcs1EdDSAPrivate', readPkcs1EdDSAPrivate, false, true), false)(J$.R(3363593, 'der', der, false, false)));
                                throw J$.F(3363641, J$.I(typeof Error === 'undefined' ? Error = J$.R(3363617, 'Error', undefined, true, true) : Error = J$.R(3363617, 'Error', Error, true, true)), true)(J$.B(447938, '+', J$.R(3363625, 'type', type, false, false), J$.T(3363633, ' keys not supported with EdDSA', 21, false)));
                            default:
                                throw J$.F(3363681, J$.I(typeof Error === 'undefined' ? Error = J$.R(3363657, 'Error', undefined, true, true) : Error = J$.R(3363657, 'Error', Error, true, true)), true)(J$.B(447946, '+', J$.T(3363665, 'Unknown key algo: ', 21, false), J$.R(3363673, 'alg', alg, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(3371457, J$e);
                        } finally {
                            if (J$.Fr(3371465))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPublic(der) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3363921, arguments.callee, this, arguments);
                            arguments = J$.N(3363929, 'arguments', arguments, true, false, false);
                            der = J$.N(3363937, 'der', der, true, false, false);
                            J$.N(3363945, 'n', n, false, false, false);
                            J$.N(3363953, 'e', e, false, false, false);
                            J$.N(3363961, 'key', key, false, false, false);
                            var n = J$.W(3363761, 'n', J$.F(3363753, J$.R(3363729, 'readMPInt', readMPInt, false, true), false)(J$.R(3363737, 'der', der, false, false), J$.T(3363745, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(3363801, 'e', J$.F(3363793, J$.R(3363769, 'readMPInt', readMPInt, false, true), false)(J$.R(3363777, 'der', der, false, false), J$.T(3363785, 'exponent', 21, false)), e, false, false);
                            var key = J$.W(3363881, 'key', J$.T(3363873, {
                                type: J$.T(3363809, 'rsa', 21, false),
                                parts: J$.T(3363865, [
                                    J$.T(3363833, {
                                        name: J$.T(3363817, 'e', 21, false),
                                        data: J$.R(3363825, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(3363857, {
                                        name: J$.T(3363841, 'n', 21, false),
                                        data: J$.R(3363849, 'n', n, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3363913, J$.F(3363905, J$.R(3363889, 'Key', Key, false, true), true)(J$.R(3363897, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371473, J$e);
                        } finally {
                            if (J$.Fr(3371481))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPrivate(der) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3364633, arguments.callee, this, arguments);
                            arguments = J$.N(3364641, 'arguments', arguments, true, false, false);
                            der = J$.N(3364649, 'der', der, true, false, false);
                            J$.N(3364657, 'version', version, false, false, false);
                            J$.N(3364665, 'n', n, false, false, false);
                            J$.N(3364673, 'e', e, false, false, false);
                            J$.N(3364681, 'd', d, false, false, false);
                            J$.N(3364689, 'p', p, false, false, false);
                            J$.N(3364697, 'q', q, false, false, false);
                            J$.N(3364705, 'dmodp', dmodp, false, false, false);
                            J$.N(3364713, 'dmodq', dmodq, false, false, false);
                            J$.N(3364721, 'iqmp', iqmp, false, false, false);
                            J$.N(3364729, 'key', key, false, false, false);
                            var version = J$.W(3364001, 'version', J$.F(3363993, J$.R(3363969, 'readMPInt', readMPInt, false, true), false)(J$.R(3363977, 'der', der, false, false), J$.T(3363985, 'version', 21, false)), version, false, false);
                            J$.M(3364049, J$.R(3364009, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3364033, J$.R(3364017, 'version', version, false, false), J$.T(3364025, 0, 22, false)), J$.T(3364041, 0, 22, false));
                            var n = J$.W(3364089, 'n', J$.F(3364081, J$.R(3364057, 'readMPInt', readMPInt, false, true), false)(J$.R(3364065, 'der', der, false, false), J$.T(3364073, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(3364129, 'e', J$.F(3364121, J$.R(3364097, 'readMPInt', readMPInt, false, true), false)(J$.R(3364105, 'der', der, false, false), J$.T(3364113, 'public exponent', 21, false)), e, false, false);
                            var d = J$.W(3364169, 'd', J$.F(3364161, J$.R(3364137, 'readMPInt', readMPInt, false, true), false)(J$.R(3364145, 'der', der, false, false), J$.T(3364153, 'private exponent', 21, false)), d, false, false);
                            var p = J$.W(3364209, 'p', J$.F(3364201, J$.R(3364177, 'readMPInt', readMPInt, false, true), false)(J$.R(3364185, 'der', der, false, false), J$.T(3364193, 'prime1', 21, false)), p, false, false);
                            var q = J$.W(3364249, 'q', J$.F(3364241, J$.R(3364217, 'readMPInt', readMPInt, false, true), false)(J$.R(3364225, 'der', der, false, false), J$.T(3364233, 'prime2', 21, false)), q, false, false);
                            var dmodp = J$.W(3364289, 'dmodp', J$.F(3364281, J$.R(3364257, 'readMPInt', readMPInt, false, true), false)(J$.R(3364265, 'der', der, false, false), J$.T(3364273, 'exponent1', 21, false)), dmodp, false, false);
                            var dmodq = J$.W(3364329, 'dmodq', J$.F(3364321, J$.R(3364297, 'readMPInt', readMPInt, false, true), false)(J$.R(3364305, 'der', der, false, false), J$.T(3364313, 'exponent2', 21, false)), dmodq, false, false);
                            var iqmp = J$.W(3364369, 'iqmp', J$.F(3364361, J$.R(3364337, 'readMPInt', readMPInt, false, true), false)(J$.R(3364345, 'der', der, false, false), J$.T(3364353, 'iqmp', 21, false)), iqmp, false, false);
                            var key = J$.W(3364593, 'key', J$.T(3364585, {
                                type: J$.T(3364377, 'rsa', 21, false),
                                parts: J$.T(3364577, [
                                    J$.T(3364401, {
                                        name: J$.T(3364385, 'n', 21, false),
                                        data: J$.R(3364393, 'n', n, false, false)
                                    }, 11, false),
                                    J$.T(3364425, {
                                        name: J$.T(3364409, 'e', 21, false),
                                        data: J$.R(3364417, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(3364449, {
                                        name: J$.T(3364433, 'd', 21, false),
                                        data: J$.R(3364441, 'd', d, false, false)
                                    }, 11, false),
                                    J$.T(3364473, {
                                        name: J$.T(3364457, 'iqmp', 21, false),
                                        data: J$.R(3364465, 'iqmp', iqmp, false, false)
                                    }, 11, false),
                                    J$.T(3364497, {
                                        name: J$.T(3364481, 'p', 21, false),
                                        data: J$.R(3364489, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3364521, {
                                        name: J$.T(3364505, 'q', 21, false),
                                        data: J$.R(3364513, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3364545, {
                                        name: J$.T(3364529, 'dmodp', 21, false),
                                        data: J$.R(3364537, 'dmodp', dmodp, false, false)
                                    }, 11, false),
                                    J$.T(3364569, {
                                        name: J$.T(3364553, 'dmodq', 21, false),
                                        data: J$.R(3364561, 'dmodq', dmodq, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3364625, J$.F(3364617, J$.R(3364601, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3364609, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371489, J$e);
                        } finally {
                            if (J$.Fr(3371497))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPrivate(der) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3365209, arguments.callee, this, arguments);
                            arguments = J$.N(3365217, 'arguments', arguments, true, false, false);
                            der = J$.N(3365225, 'der', der, true, false, false);
                            J$.N(3365233, 'version', version, false, false, false);
                            J$.N(3365241, 'p', p, false, false, false);
                            J$.N(3365249, 'q', q, false, false, false);
                            J$.N(3365257, 'g', g, false, false, false);
                            J$.N(3365265, 'y', y, false, false, false);
                            J$.N(3365273, 'x', x, false, false, false);
                            J$.N(3365281, 'key', key, false, false, false);
                            var version = J$.W(3364769, 'version', J$.F(3364761, J$.R(3364737, 'readMPInt', readMPInt, false, true), false)(J$.R(3364745, 'der', der, false, false), J$.T(3364753, 'version', 21, false)), version, false, false);
                            J$.M(3364817, J$.R(3364777, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3364801, J$.R(3364785, 'version', version, false, false), 'readUInt8', false)(J$.T(3364793, 0, 22, false)), J$.T(3364809, 0, 22, false));
                            var p = J$.W(3364857, 'p', J$.F(3364849, J$.R(3364825, 'readMPInt', readMPInt, false, true), false)(J$.R(3364833, 'der', der, false, false), J$.T(3364841, 'p', 21, false)), p, false, false);
                            var q = J$.W(3364897, 'q', J$.F(3364889, J$.R(3364865, 'readMPInt', readMPInt, false, true), false)(J$.R(3364873, 'der', der, false, false), J$.T(3364881, 'q', 21, false)), q, false, false);
                            var g = J$.W(3364937, 'g', J$.F(3364929, J$.R(3364905, 'readMPInt', readMPInt, false, true), false)(J$.R(3364913, 'der', der, false, false), J$.T(3364921, 'g', 21, false)), g, false, false);
                            var y = J$.W(3364977, 'y', J$.F(3364969, J$.R(3364945, 'readMPInt', readMPInt, false, true), false)(J$.R(3364953, 'der', der, false, false), J$.T(3364961, 'y', 21, false)), y, false, false);
                            var x = J$.W(3365017, 'x', J$.F(3365009, J$.R(3364985, 'readMPInt', readMPInt, false, true), false)(J$.R(3364993, 'der', der, false, false), J$.T(3365001, 'x', 21, false)), x, false, false);
                            var key = J$.W(3365169, 'key', J$.T(3365161, {
                                type: J$.T(3365025, 'dsa', 21, false),
                                parts: J$.T(3365153, [
                                    J$.T(3365049, {
                                        name: J$.T(3365033, 'p', 21, false),
                                        data: J$.R(3365041, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3365073, {
                                        name: J$.T(3365057, 'q', 21, false),
                                        data: J$.R(3365065, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3365097, {
                                        name: J$.T(3365081, 'g', 21, false),
                                        data: J$.R(3365089, 'g', g, false, false)
                                    }, 11, false),
                                    J$.T(3365121, {
                                        name: J$.T(3365105, 'y', 21, false),
                                        data: J$.R(3365113, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(3365145, {
                                        name: J$.T(3365129, 'x', 21, false),
                                        data: J$.R(3365137, 'x', x, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3365201, J$.F(3365193, J$.R(3365177, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3365185, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371505, J$e);
                        } finally {
                            if (J$.Fr(3371513))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1EdDSAPrivate(der) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3365713, arguments.callee, this, arguments);
                            arguments = J$.N(3365721, 'arguments', arguments, true, false, false);
                            der = J$.N(3365729, 'der', der, true, false, false);
                            J$.N(3365737, 'version', version, false, false, false);
                            J$.N(3365745, 'k', k, false, false, false);
                            J$.N(3365753, 'oid', oid, false, false, false);
                            J$.N(3365761, 'A', A, false, false, false);
                            J$.N(3365769, 'key', key, false, false, false);
                            var version = J$.W(3365321, 'version', J$.F(3365313, J$.R(3365289, 'readMPInt', readMPInt, false, true), false)(J$.R(3365297, 'der', der, false, false), J$.T(3365305, 'version', 21, false)), version, false, false);
                            J$.M(3365369, J$.R(3365329, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3365353, J$.R(3365337, 'version', version, false, false), 'readUInt8', false)(J$.T(3365345, 0, 22, false)), J$.T(3365361, 1, 22, false));
                            var k = J$.W(3365425, 'k', J$.M(3365417, J$.R(3365377, 'der', der, false, false), 'readString', false)(J$.G(3365401, J$.G(3365393, J$.R(3365385, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(3365409, true, 23, false)), k, false, false);
                            J$.M(3365449, J$.R(3365433, 'der', der, false, false), 'readSequence', false)(J$.T(3365441, 160, 22, false));
                            var oid = J$.W(3365473, 'oid', J$.M(3365465, J$.R(3365457, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(3365513, J$.R(3365481, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3365489, 'oid', oid, false, false), J$.T(3365497, '1.3.101.112', 21, false), J$.T(3365505, 'the ed25519 curve identifier', 21, false));
                            J$.M(3365537, J$.R(3365521, 'der', der, false, false), 'readSequence', false)(J$.T(3365529, 161, 22, false));
                            var A = J$.W(3365569, 'A', J$.M(3365561, J$.R(3365545, 'utils', utils, false, true), 'readBitString', false)(J$.R(3365553, 'der', der, false, false)), A, false, false);
                            var key = J$.W(3365673, 'key', J$.T(3365665, {
                                type: J$.T(3365577, 'ed25519', 21, false),
                                parts: J$.T(3365657, [
                                    J$.T(3365625, {
                                        name: J$.T(3365585, 'A', 21, false),
                                        data: J$.M(3365617, J$.R(3365593, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(3365601, 'A', A, false, false), J$.T(3365609, 32, 22, false))
                                    }, 11, false),
                                    J$.T(3365649, {
                                        name: J$.T(3365633, 'k', 21, false),
                                        data: J$.R(3365641, 'k', k, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3365705, J$.F(3365697, J$.R(3365681, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3365689, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371521, J$e);
                        } finally {
                            if (J$.Fr(3371529))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPublic(der) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3366097, arguments.callee, this, arguments);
                            arguments = J$.N(3366105, 'arguments', arguments, true, false, false);
                            der = J$.N(3366113, 'der', der, true, false, false);
                            J$.N(3366121, 'y', y, false, false, false);
                            J$.N(3366129, 'p', p, false, false, false);
                            J$.N(3366137, 'q', q, false, false, false);
                            J$.N(3366145, 'g', g, false, false, false);
                            J$.N(3366153, 'key', key, false, false, false);
                            var y = J$.W(3365809, 'y', J$.F(3365801, J$.R(3365777, 'readMPInt', readMPInt, false, true), false)(J$.R(3365785, 'der', der, false, false), J$.T(3365793, 'y', 21, false)), y, false, false);
                            var p = J$.W(3365849, 'p', J$.F(3365841, J$.R(3365817, 'readMPInt', readMPInt, false, true), false)(J$.R(3365825, 'der', der, false, false), J$.T(3365833, 'p', 21, false)), p, false, false);
                            var q = J$.W(3365889, 'q', J$.F(3365881, J$.R(3365857, 'readMPInt', readMPInt, false, true), false)(J$.R(3365865, 'der', der, false, false), J$.T(3365873, 'q', 21, false)), q, false, false);
                            var g = J$.W(3365929, 'g', J$.F(3365921, J$.R(3365897, 'readMPInt', readMPInt, false, true), false)(J$.R(3365905, 'der', der, false, false), J$.T(3365913, 'g', 21, false)), g, false, false);
                            var key = J$.W(3366057, 'key', J$.T(3366049, {
                                type: J$.T(3365937, 'dsa', 21, false),
                                parts: J$.T(3366041, [
                                    J$.T(3365961, {
                                        name: J$.T(3365945, 'y', 21, false),
                                        data: J$.R(3365953, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(3365985, {
                                        name: J$.T(3365969, 'p', 21, false),
                                        data: J$.R(3365977, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3366009, {
                                        name: J$.T(3365993, 'q', 21, false),
                                        data: J$.R(3366001, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3366033, {
                                        name: J$.T(3366017, 'g', 21, false),
                                        data: J$.R(3366025, 'g', g, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3366089, J$.F(3366081, J$.R(3366065, 'Key', Key, false, true), true)(J$.R(3366073, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371537, J$e);
                        } finally {
                            if (J$.Fr(3371545))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPublic(der) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3366721, arguments.callee, this, arguments);
                            arguments = J$.N(3366729, 'arguments', arguments, true, false, false);
                            der = J$.N(3366737, 'der', der, true, false, false);
                            J$.N(3366745, 'oid', oid, false, false, false);
                            J$.N(3366753, 'curveOid', curveOid, false, false, false);
                            J$.N(3366761, 'curve', curve, false, false, false);
                            J$.N(3366769, 'curves', curves, false, false, false);
                            J$.N(3366777, 'j', j, false, false, false);
                            J$.N(3366785, 'c', c, false, false, false);
                            J$.N(3366793, 'cd', cd, false, false, false);
                            J$.N(3366801, 'Q', Q, false, false, false);
                            J$.N(3366809, 'key', key, false, false, false);
                            J$.M(3366169, J$.R(3366161, 'der', der, false, false), 'readSequence', false)();
                            var oid = J$.W(3366193, 'oid', J$.M(3366185, J$.R(3366177, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(3366233, J$.R(3366201, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3366209, 'oid', oid, false, false), J$.T(3366217, '1.2.840.10045.2.1', 21, false), J$.T(3366225, 'must be ecPublicKey', 21, false));
                            var curveOid = J$.W(3366257, 'curveOid', J$.M(3366249, J$.R(3366241, 'der', der, false, false), 'readOID', false)(), curveOid, false, false);
                            var curve;
                            var curves = J$.W(3366297, 'curves', J$.M(3366289, J$.I(typeof Object === 'undefined' ? Object = J$.R(3366265, 'Object', undefined, true, true) : Object = J$.R(3366265, 'Object', Object, true, true)), 'keys', false)(J$.G(3366281, J$.R(3366273, 'algs', algs, false, true), 'curves')), curves, false, false);
                            for (var j = J$.W(3366313, 'j', J$.T(3366305, 0, 22, false), j, false, false); J$.C(156712, J$.B(447954, '<', J$.R(3366321, 'j', j, false, false), J$.G(3366337, J$.R(3366329, 'curves', curves, false, false), 'length'))); j = J$.W(3366353, 'j', J$.B(447970, '+', J$.U(447962, '+', J$.R(3366345, 'j', j, false, false)), 1), j, false, false)) {
                                var c = J$.W(3366385, 'c', J$.G(3366377, J$.R(3366361, 'curves', curves, false, false), J$.R(3366369, 'j', j, false, false)), c, false, false);
                                var cd = J$.W(3366425, 'cd', J$.G(3366417, J$.G(3366401, J$.R(3366393, 'algs', algs, false, true), 'curves'), J$.R(3366409, 'c', c, false, false)), cd, false, false);
                                if (J$.C(156704, J$.B(447978, '===', J$.G(3366441, J$.R(3366433, 'cd', cd, false, false), 'pkcs8oid'), J$.R(3366449, 'curveOid', curveOid, false, false)))) {
                                    curve = J$.W(3366465, 'curve', J$.R(3366457, 'c', c, false, false), curve, false, false);
                                    break;
                                }
                            }
                            J$.M(3366497, J$.R(3366473, 'assert', assert, false, true), 'string', false)(J$.R(3366481, 'curve', curve, false, false), J$.T(3366489, 'a known ECDSA named curve', 21, false));
                            var Q = J$.W(3366553, 'Q', J$.M(3366545, J$.R(3366505, 'der', der, false, false), 'readString', false)(J$.G(3366529, J$.G(3366521, J$.R(3366513, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(3366537, true, 23, false)), Q, false, false);
                            Q = J$.W(3366585, 'Q', J$.M(3366577, J$.R(3366561, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(3366569, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(3366681, 'key', J$.T(3366673, {
                                type: J$.T(3366593, 'ecdsa', 21, false),
                                parts: J$.T(3366665, [
                                    J$.T(3366633, {
                                        name: J$.T(3366601, 'curve', 21, false),
                                        data: J$.M(3366625, J$.R(3366609, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3366617, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(3366657, {
                                        name: J$.T(3366641, 'Q', 21, false),
                                        data: J$.R(3366649, 'Q', Q, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3366713, J$.F(3366705, J$.R(3366689, 'Key', Key, false, true), true)(J$.R(3366697, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371553, J$e);
                        } finally {
                            if (J$.Fr(3371561))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPrivate(der) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3367313, arguments.callee, this, arguments);
                            arguments = J$.N(3367321, 'arguments', arguments, true, false, false);
                            der = J$.N(3367329, 'der', der, true, false, false);
                            J$.N(3367337, 'version', version, false, false, false);
                            J$.N(3367345, 'd', d, false, false, false);
                            J$.N(3367353, 'curve', curve, false, false, false);
                            J$.N(3367361, 'Q', Q, false, false, false);
                            J$.N(3367369, 'key', key, false, false, false);
                            var version = J$.W(3366849, 'version', J$.F(3366841, J$.R(3366817, 'readMPInt', readMPInt, false, true), false)(J$.R(3366825, 'der', der, false, false), J$.T(3366833, 'version', 21, false)), version, false, false);
                            J$.M(3366897, J$.R(3366857, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3366881, J$.R(3366865, 'version', version, false, false), 'readUInt8', false)(J$.T(3366873, 0, 22, false)), J$.T(3366889, 1, 22, false));
                            var d = J$.W(3366953, 'd', J$.M(3366945, J$.R(3366905, 'der', der, false, false), 'readString', false)(J$.G(3366929, J$.G(3366921, J$.R(3366913, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(3366937, true, 23, false)), d, false, false);
                            J$.M(3366977, J$.R(3366961, 'der', der, false, false), 'readSequence', false)(J$.T(3366969, 160, 22, false));
                            var curve = J$.W(3367009, 'curve', J$.F(3367001, J$.R(3366985, 'readECDSACurve', readECDSACurve, false, true), false)(J$.R(3366993, 'der', der, false, false)), curve, false, false);
                            J$.M(3367041, J$.R(3367017, 'assert', assert, false, true), 'string', false)(J$.R(3367025, 'curve', curve, false, false), J$.T(3367033, 'a known elliptic curve', 21, false));
                            J$.M(3367065, J$.R(3367049, 'der', der, false, false), 'readSequence', false)(J$.T(3367057, 161, 22, false));
                            var Q = J$.W(3367121, 'Q', J$.M(3367113, J$.R(3367073, 'der', der, false, false), 'readString', false)(J$.G(3367097, J$.G(3367089, J$.R(3367081, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(3367105, true, 23, false)), Q, false, false);
                            Q = J$.W(3367153, 'Q', J$.M(3367145, J$.R(3367129, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(3367137, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(3367273, 'key', J$.T(3367265, {
                                type: J$.T(3367161, 'ecdsa', 21, false),
                                parts: J$.T(3367257, [
                                    J$.T(3367201, {
                                        name: J$.T(3367169, 'curve', 21, false),
                                        data: J$.M(3367193, J$.R(3367177, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3367185, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(3367225, {
                                        name: J$.T(3367209, 'Q', 21, false),
                                        data: J$.R(3367217, 'Q', Q, false, false)
                                    }, 11, false),
                                    J$.T(3367249, {
                                        name: J$.T(3367233, 'd', 21, false),
                                        data: J$.R(3367241, 'd', d, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3367305, J$.F(3367297, J$.R(3367281, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3367289, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3371569, J$e);
                        } finally {
                            if (J$.Fr(3371577))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1(der, key) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(3367849, arguments.callee, this, arguments);
                            arguments = J$.N(3367857, 'arguments', arguments, true, false, false);
                            der = J$.N(3367865, 'der', der, true, false, false);
                            key = J$.N(3367873, 'key', key, true, false, false);
                            J$.M(3367385, J$.R(3367377, 'der', der, false, false), 'startSequence', false)();
                            switch (J$.C1(156752, J$.G(3367401, J$.R(3367393, 'key', key, false, false), 'type'))) {
                            case J$.C2(156760, J$.T(3367497, 'rsa', 21, false)):
                                if (J$.C(156720, J$.M(3367425, J$.R(3367409, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3367417, 'key', key, false, false))))
                                    J$.F(3367457, J$.R(3367433, 'writePkcs1RSAPrivate', writePkcs1RSAPrivate, false, true), false)(J$.R(3367441, 'der', der, false, false), J$.R(3367449, 'key', key, false, false));
                                else
                                    J$.F(3367489, J$.R(3367465, 'writePkcs1RSAPublic', writePkcs1RSAPublic, false, true), false)(J$.R(3367473, 'der', der, false, false), J$.R(3367481, 'key', key, false, false));
                                break;
                            case J$.C2(156768, J$.T(3367593, 'dsa', 21, false)):
                                if (J$.C(156728, J$.M(3367521, J$.R(3367505, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3367513, 'key', key, false, false))))
                                    J$.F(3367553, J$.R(3367529, 'writePkcs1DSAPrivate', writePkcs1DSAPrivate, false, true), false)(J$.R(3367537, 'der', der, false, false), J$.R(3367545, 'key', key, false, false));
                                else
                                    J$.F(3367585, J$.R(3367561, 'writePkcs1DSAPublic', writePkcs1DSAPublic, false, true), false)(J$.R(3367569, 'der', der, false, false), J$.R(3367577, 'key', key, false, false));
                                break;
                            case J$.C2(156776, J$.T(3367689, 'ecdsa', 21, false)):
                                if (J$.C(156736, J$.M(3367617, J$.R(3367601, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3367609, 'key', key, false, false))))
                                    J$.F(3367649, J$.R(3367625, 'writePkcs1ECDSAPrivate', writePkcs1ECDSAPrivate, false, true), false)(J$.R(3367633, 'der', der, false, false), J$.R(3367641, 'key', key, false, false));
                                else
                                    J$.F(3367681, J$.R(3367657, 'writePkcs1ECDSAPublic', writePkcs1ECDSAPublic, false, true), false)(J$.R(3367665, 'der', der, false, false), J$.R(3367673, 'key', key, false, false));
                                break;
                            case J$.C2(156784, J$.T(3367785, 'ed25519', 21, false)):
                                if (J$.C(156744, J$.M(3367713, J$.R(3367697, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3367705, 'key', key, false, false))))
                                    J$.F(3367745, J$.R(3367721, 'writePkcs1EdDSAPrivate', writePkcs1EdDSAPrivate, false, true), false)(J$.R(3367729, 'der', der, false, false), J$.R(3367737, 'key', key, false, false));
                                else
                                    J$.F(3367777, J$.R(3367753, 'writePkcs1EdDSAPublic', writePkcs1EdDSAPublic, false, true), false)(J$.R(3367761, 'der', der, false, false), J$.R(3367769, 'key', key, false, false));
                                break;
                            default:
                                throw J$.F(3367825, J$.I(typeof Error === 'undefined' ? Error = J$.R(3367793, 'Error', undefined, true, true) : Error = J$.R(3367793, 'Error', Error, true, true)), true)(J$.B(447986, '+', J$.T(3367801, 'Unknown key algo: ', 21, false), J$.G(3367817, J$.R(3367809, 'key', key, false, false), 'type')));
                            }
                            J$.M(3367841, J$.R(3367833, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3371585, J$e);
                        } finally {
                            if (J$.Fr(3371593))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPublic(der, key) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(3368025, arguments.callee, this, arguments);
                            arguments = J$.N(3368033, 'arguments', arguments, true, false, false);
                            der = J$.N(3368041, 'der', der, true, false, false);
                            key = J$.N(3368049, 'key', key, true, false, false);
                            J$.M(3367945, J$.R(3367881, 'der', der, false, false), 'writeBuffer', false)(J$.G(3367913, J$.G(3367905, J$.G(3367897, J$.R(3367889, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(3367937, J$.G(3367929, J$.R(3367921, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368017, J$.R(3367953, 'der', der, false, false), 'writeBuffer', false)(J$.G(3367985, J$.G(3367977, J$.G(3367969, J$.R(3367961, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(3368009, J$.G(3368001, J$.R(3367993, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3371601, J$e);
                        } finally {
                            if (J$.Fr(3371609))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPrivate(der, key) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(3368793, arguments.callee, this, arguments);
                            arguments = J$.N(3368801, 'arguments', arguments, true, false, false);
                            der = J$.N(3368809, 'der', der, true, false, false);
                            key = J$.N(3368817, 'key', key, true, false, false);
                            J$.N(3368825, 'ver', ver, false, false, false);
                            var ver = J$.W(3368089, 'ver', J$.M(3368081, J$.R(3368057, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3368073, [J$.T(3368065, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(3368137, J$.R(3368097, 'der', der, false, false), 'writeBuffer', false)(J$.R(3368105, 'ver', ver, false, false), J$.G(3368129, J$.G(3368121, J$.R(3368113, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368209, J$.R(3368145, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368177, J$.G(3368169, J$.G(3368161, J$.R(3368153, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(3368201, J$.G(3368193, J$.R(3368185, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368281, J$.R(3368217, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368249, J$.G(3368241, J$.G(3368233, J$.R(3368225, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(3368273, J$.G(3368265, J$.R(3368257, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368353, J$.R(3368289, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368321, J$.G(3368313, J$.G(3368305, J$.R(3368297, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(3368345, J$.G(3368337, J$.R(3368329, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368425, J$.R(3368361, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368393, J$.G(3368385, J$.G(3368377, J$.R(3368369, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3368417, J$.G(3368409, J$.R(3368401, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368497, J$.R(3368433, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368465, J$.G(3368457, J$.G(3368449, J$.R(3368441, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3368489, J$.G(3368481, J$.R(3368473, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            if (J$.C(156800, J$.C(156792, J$.U(447994, '!', J$.G(3368521, J$.G(3368513, J$.R(3368505, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(448002, '!', J$.G(3368545, J$.G(3368537, J$.R(3368529, 'key', key, false, false), 'part'), 'dmodq'))))
                                J$.M(3368569, J$.R(3368553, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(3368561, 'key', key, false, false));
                            J$.M(3368641, J$.R(3368577, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368609, J$.G(3368601, J$.G(3368593, J$.R(3368585, 'key', key, false, false), 'part'), 'dmodp'), 'data'), J$.G(3368633, J$.G(3368625, J$.R(3368617, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368713, J$.R(3368649, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368681, J$.G(3368673, J$.G(3368665, J$.R(3368657, 'key', key, false, false), 'part'), 'dmodq'), 'data'), J$.G(3368705, J$.G(3368697, J$.R(3368689, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368785, J$.R(3368721, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368753, J$.G(3368745, J$.G(3368737, J$.R(3368729, 'key', key, false, false), 'part'), 'iqmp'), 'data'), J$.G(3368777, J$.G(3368769, J$.R(3368761, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3371617, J$e);
                        } finally {
                            if (J$.Fr(3371625))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPrivate(der, key) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(3369281, arguments.callee, this, arguments);
                            arguments = J$.N(3369289, 'arguments', arguments, true, false, false);
                            der = J$.N(3369297, 'der', der, true, false, false);
                            key = J$.N(3369305, 'key', key, true, false, false);
                            J$.N(3369313, 'ver', ver, false, false, false);
                            var ver = J$.W(3368865, 'ver', J$.M(3368857, J$.R(3368833, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3368849, [J$.T(3368841, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(3368913, J$.R(3368873, 'der', der, false, false), 'writeBuffer', false)(J$.R(3368881, 'ver', ver, false, false), J$.G(3368905, J$.G(3368897, J$.R(3368889, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3368985, J$.R(3368921, 'der', der, false, false), 'writeBuffer', false)(J$.G(3368953, J$.G(3368945, J$.G(3368937, J$.R(3368929, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3368977, J$.G(3368969, J$.R(3368961, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369057, J$.R(3368993, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369025, J$.G(3369017, J$.G(3369009, J$.R(3369001, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3369049, J$.G(3369041, J$.R(3369033, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369129, J$.R(3369065, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369097, J$.G(3369089, J$.G(3369081, J$.R(3369073, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(3369121, J$.G(3369113, J$.R(3369105, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369201, J$.R(3369137, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369169, J$.G(3369161, J$.G(3369153, J$.R(3369145, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(3369193, J$.G(3369185, J$.R(3369177, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369273, J$.R(3369209, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369241, J$.G(3369233, J$.G(3369225, J$.R(3369217, 'key', key, false, false), 'part'), 'x'), 'data'), J$.G(3369265, J$.G(3369257, J$.R(3369249, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3371633, J$e);
                        } finally {
                            if (J$.Fr(3371641))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPublic(der, key) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(3369609, arguments.callee, this, arguments);
                            arguments = J$.N(3369617, 'arguments', arguments, true, false, false);
                            der = J$.N(3369625, 'der', der, true, false, false);
                            key = J$.N(3369633, 'key', key, true, false, false);
                            J$.M(3369385, J$.R(3369321, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369353, J$.G(3369345, J$.G(3369337, J$.R(3369329, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(3369377, J$.G(3369369, J$.R(3369361, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369457, J$.R(3369393, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369425, J$.G(3369417, J$.G(3369409, J$.R(3369401, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3369449, J$.G(3369441, J$.R(3369433, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369529, J$.R(3369465, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369497, J$.G(3369489, J$.G(3369481, J$.R(3369473, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3369521, J$.G(3369513, J$.R(3369505, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3369601, J$.R(3369537, 'der', der, false, false), 'writeBuffer', false)(J$.G(3369569, J$.G(3369561, J$.G(3369553, J$.R(3369545, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(3369593, J$.G(3369585, J$.R(3369577, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3371649, J$e);
                        } finally {
                            if (J$.Fr(3371657))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPublic(der, key) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(3369961, arguments.callee, this, arguments);
                            arguments = J$.N(3369969, 'arguments', arguments, true, false, false);
                            der = J$.N(3369977, 'der', der, true, false, false);
                            key = J$.N(3369985, 'key', key, true, false, false);
                            J$.N(3369993, 'curve', curve, false, false, false);
                            J$.N(3370001, 'curveOid', curveOid, false, false, false);
                            J$.N(3370009, 'Q', Q, false, false, false);
                            J$.M(3369649, J$.R(3369641, 'der', der, false, false), 'startSequence', false)();
                            J$.M(3369673, J$.R(3369657, 'der', der, false, false), 'writeOID', false)(J$.T(3369665, '1.2.840.10045.2.1', 21, false));
                            var curve = J$.W(3369721, 'curve', J$.M(3369713, J$.G(3369705, J$.G(3369697, J$.G(3369689, J$.R(3369681, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(3369769, 'curveOid', J$.G(3369761, J$.G(3369753, J$.G(3369737, J$.R(3369729, 'algs', algs, false, true), 'curves'), J$.R(3369745, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(3369801, J$.R(3369777, 'assert', assert, false, true), 'string', false)(J$.R(3369785, 'curveOid', curveOid, false, false), J$.T(3369793, 'a known ECDSA named curve', 21, false));
                            J$.M(3369825, J$.R(3369809, 'der', der, false, false), 'writeOID', false)(J$.R(3369817, 'curveOid', curveOid, false, false));
                            J$.M(3369841, J$.R(3369833, 'der', der, false, false), 'endSequence', false)();
                            var Q = J$.W(3369905, 'Q', J$.M(3369897, J$.R(3369849, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(3369881, J$.G(3369873, J$.G(3369865, J$.R(3369857, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(3369889, true, 23, false)), Q, false, false);
                            J$.M(3369953, J$.R(3369913, 'der', der, false, false), 'writeBuffer', false)(J$.R(3369921, 'Q', Q, false, false), J$.G(3369945, J$.G(3369937, J$.R(3369929, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                        } catch (J$e) {
                            J$.Ex(3371665, J$e);
                        } finally {
                            if (J$.Fr(3371673))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPrivate(der, key) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(3370521, arguments.callee, this, arguments);
                            arguments = J$.N(3370529, 'arguments', arguments, true, false, false);
                            der = J$.N(3370537, 'der', der, true, false, false);
                            key = J$.N(3370545, 'key', key, true, false, false);
                            J$.N(3370553, 'ver', ver, false, false, false);
                            J$.N(3370561, 'curve', curve, false, false, false);
                            J$.N(3370569, 'curveOid', curveOid, false, false, false);
                            J$.N(3370577, 'Q', Q, false, false, false);
                            var ver = J$.W(3370049, 'ver', J$.M(3370041, J$.R(3370017, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3370033, [J$.T(3370025, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(3370097, J$.R(3370057, 'der', der, false, false), 'writeBuffer', false)(J$.R(3370065, 'ver', ver, false, false), J$.G(3370089, J$.G(3370081, J$.R(3370073, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3370169, J$.R(3370105, 'der', der, false, false), 'writeBuffer', false)(J$.G(3370137, J$.G(3370129, J$.G(3370121, J$.R(3370113, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(3370161, J$.G(3370153, J$.R(3370145, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(3370193, J$.R(3370177, 'der', der, false, false), 'startSequence', false)(J$.T(3370185, 160, 22, false));
                            var curve = J$.W(3370241, 'curve', J$.M(3370233, J$.G(3370225, J$.G(3370217, J$.G(3370209, J$.R(3370201, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(3370289, 'curveOid', J$.G(3370281, J$.G(3370273, J$.G(3370257, J$.R(3370249, 'algs', algs, false, true), 'curves'), J$.R(3370265, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(3370321, J$.R(3370297, 'assert', assert, false, true), 'string', false)(J$.R(3370305, 'curveOid', curveOid, false, false), J$.T(3370313, 'a known ECDSA named curve', 21, false));
                            J$.M(3370345, J$.R(3370329, 'der', der, false, false), 'writeOID', false)(J$.R(3370337, 'curveOid', curveOid, false, false));
                            J$.M(3370361, J$.R(3370353, 'der', der, false, false), 'endSequence', false)();
                            J$.M(3370385, J$.R(3370369, 'der', der, false, false), 'startSequence', false)(J$.T(3370377, 161, 22, false));
                            var Q = J$.W(3370449, 'Q', J$.M(3370441, J$.R(3370393, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(3370425, J$.G(3370417, J$.G(3370409, J$.R(3370401, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(3370433, true, 23, false)), Q, false, false);
                            J$.M(3370497, J$.R(3370457, 'der', der, false, false), 'writeBuffer', false)(J$.R(3370465, 'Q', Q, false, false), J$.G(3370489, J$.G(3370481, J$.R(3370473, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                            J$.M(3370513, J$.R(3370505, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3371681, J$e);
                        } finally {
                            if (J$.Fr(3371689))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPrivate(der, key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(3370905, arguments.callee, this, arguments);
                            arguments = J$.N(3370913, 'arguments', arguments, true, false, false);
                            der = J$.N(3370921, 'der', der, true, false, false);
                            key = J$.N(3370929, 'key', key, true, false, false);
                            J$.N(3370937, 'ver', ver, false, false, false);
                            var ver = J$.W(3370617, 'ver', J$.M(3370609, J$.R(3370585, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3370601, [J$.T(3370593, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(3370665, J$.R(3370625, 'der', der, false, false), 'writeBuffer', false)(J$.R(3370633, 'ver', ver, false, false), J$.G(3370657, J$.G(3370649, J$.R(3370641, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3370737, J$.R(3370673, 'der', der, false, false), 'writeBuffer', false)(J$.G(3370705, J$.G(3370697, J$.G(3370689, J$.R(3370681, 'key', key, false, false), 'part'), 'k'), 'data'), J$.G(3370729, J$.G(3370721, J$.R(3370713, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(3370761, J$.R(3370745, 'der', der, false, false), 'startSequence', false)(J$.T(3370753, 160, 22, false));
                            J$.M(3370785, J$.R(3370769, 'der', der, false, false), 'writeOID', false)(J$.T(3370777, '1.3.101.112', 21, false));
                            J$.M(3370801, J$.R(3370793, 'der', der, false, false), 'endSequence', false)();
                            J$.M(3370825, J$.R(3370809, 'der', der, false, false), 'startSequence', false)(J$.T(3370817, 161, 22, false));
                            J$.M(3370881, J$.R(3370833, 'utils', utils, false, true), 'writeBitString', false)(J$.R(3370841, 'der', der, false, false), J$.G(3370873, J$.G(3370865, J$.G(3370857, J$.R(3370849, 'key', key, false, false), 'part'), 'A'), 'data'));
                            J$.M(3370897, J$.R(3370889, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3371697, J$e);
                        } finally {
                            if (J$.Fr(3371705))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPublic(der, key) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(3370969, arguments.callee, this, arguments);
                            arguments = J$.N(3370977, 'arguments', arguments, true, false, false);
                            der = J$.N(3370985, 'der', der, true, false, false);
                            key = J$.N(3370993, 'key', key, true, false, false);
                            throw J$.F(3370961, J$.I(typeof Error === 'undefined' ? Error = J$.R(3370945, 'Error', undefined, true, true) : Error = J$.R(3370945, 'Error', Error, true, true)), true)(J$.T(3370953, 'Public keys are not supported for EdDSA PKCS#1', 21, false));
                        } catch (J$e) {
                            J$.Ex(3371713, J$e);
                        } finally {
                            if (J$.Fr(3371721))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3371009, 'assert', assert, false, false, false);
            J$.N(3371017, 'asn1', asn1, false, false, false);
            J$.N(3371025, 'Buffer', Buffer, false, false, false);
            J$.N(3371033, 'algs', algs, false, false, false);
            J$.N(3371041, 'utils', utils, false, false, false);
            J$.N(3371049, 'Key', Key, false, false, false);
            J$.N(3371057, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3371065, 'pem', pem, false, false, false);
            J$.N(3371073, 'pkcs8', pkcs8, false, false, false);
            J$.N(3371081, 'readECDSACurve', readECDSACurve, false, false, false);
            read = J$.N(3371097, 'read', J$.T(3371089, read, 12, false), true, false, false);
            write = J$.N(3371113, 'write', J$.T(3371105, write, 12, false), true, false, false);
            readMPInt = J$.N(3371129, 'readMPInt', J$.T(3371121, readMPInt, 12, false), true, false, false);
            readPkcs1 = J$.N(3371145, 'readPkcs1', J$.T(3371137, readPkcs1, 12, false), true, false, false);
            readPkcs1RSAPublic = J$.N(3371161, 'readPkcs1RSAPublic', J$.T(3371153, readPkcs1RSAPublic, 12, false), true, false, false);
            readPkcs1RSAPrivate = J$.N(3371177, 'readPkcs1RSAPrivate', J$.T(3371169, readPkcs1RSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPrivate = J$.N(3371193, 'readPkcs1DSAPrivate', J$.T(3371185, readPkcs1DSAPrivate, 12, false), true, false, false);
            readPkcs1EdDSAPrivate = J$.N(3371209, 'readPkcs1EdDSAPrivate', J$.T(3371201, readPkcs1EdDSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPublic = J$.N(3371225, 'readPkcs1DSAPublic', J$.T(3371217, readPkcs1DSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPublic = J$.N(3371241, 'readPkcs1ECDSAPublic', J$.T(3371233, readPkcs1ECDSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPrivate = J$.N(3371257, 'readPkcs1ECDSAPrivate', J$.T(3371249, readPkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1 = J$.N(3371273, 'writePkcs1', J$.T(3371265, writePkcs1, 12, false), true, false, false);
            writePkcs1RSAPublic = J$.N(3371289, 'writePkcs1RSAPublic', J$.T(3371281, writePkcs1RSAPublic, 12, false), true, false, false);
            writePkcs1RSAPrivate = J$.N(3371305, 'writePkcs1RSAPrivate', J$.T(3371297, writePkcs1RSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPrivate = J$.N(3371321, 'writePkcs1DSAPrivate', J$.T(3371313, writePkcs1DSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPublic = J$.N(3371337, 'writePkcs1DSAPublic', J$.T(3371329, writePkcs1DSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPublic = J$.N(3371353, 'writePkcs1ECDSAPublic', J$.T(3371345, writePkcs1ECDSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPrivate = J$.N(3371369, 'writePkcs1ECDSAPrivate', J$.T(3371361, writePkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPrivate = J$.N(3371385, 'writePkcs1EdDSAPrivate', J$.T(3371377, writePkcs1EdDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPublic = J$.N(3371401, 'writePkcs1EdDSAPublic', J$.T(3371393, writePkcs1EdDSAPublic, 12, false), true, false, false);
            J$.T(3362321, 'use strict', 21, false);
            J$.F(3362345, J$.I(typeof require === 'undefined' ? require = J$.R(3362329, 'require', undefined, true, true) : require = J$.R(3362329, 'require', require, true, true)), false)(J$.T(3362337, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3362369, J$.I(typeof require === 'undefined' ? require = J$.R(3362353, 'require', undefined, true, true) : require = J$.R(3362353, 'require', require, true, true)), false)(J$.T(3362361, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3362393, J$.I(typeof require === 'undefined' ? require = J$.R(3362377, 'require', undefined, true, true) : require = J$.R(3362377, 'require', require, true, true)), false)(J$.T(3362385, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3362417, J$.I(typeof require === 'undefined' ? require = J$.R(3362401, 'require', undefined, true, true) : require = J$.R(3362401, 'require', require, true, true)), false)(J$.T(3362409, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.P(3362473, J$.I(typeof module === 'undefined' ? module = J$.R(3362425, 'module', undefined, true, true) : module = J$.R(3362425, 'module', module, true, true)), 'exports', J$.T(3362465, {
                read: J$.R(3362433, 'read', read, false, true),
                readPkcs1: J$.R(3362441, 'readPkcs1', readPkcs1, false, true),
                write: J$.R(3362449, 'write', write, false, true),
                writePkcs1: J$.R(3362457, 'writePkcs1', writePkcs1, false, true)
            }, 11, false));
            var assert = J$.W(3362505, 'assert', J$.F(3362497, J$.I(typeof require === 'undefined' ? require = J$.R(3362481, 'require', undefined, true, true) : require = J$.R(3362481, 'require', require, true, true)), false)(J$.T(3362489, 'assert-plus', 21, false)), assert, false, true);
            var asn1 = J$.W(3362537, 'asn1', J$.F(3362529, J$.I(typeof require === 'undefined' ? require = J$.R(3362513, 'require', undefined, true, true) : require = J$.R(3362513, 'require', require, true, true)), false)(J$.T(3362521, 'asn1', 21, false)), asn1, false, true);
            var Buffer = J$.W(3362577, 'Buffer', J$.G(3362569, J$.F(3362561, J$.I(typeof require === 'undefined' ? require = J$.R(3362545, 'require', undefined, true, true) : require = J$.R(3362545, 'require', require, true, true)), false)(J$.T(3362553, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3362609, 'algs', J$.F(3362601, J$.I(typeof require === 'undefined' ? require = J$.R(3362585, 'require', undefined, true, true) : require = J$.R(3362585, 'require', require, true, true)), false)(J$.T(3362593, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(3362641, 'utils', J$.F(3362633, J$.I(typeof require === 'undefined' ? require = J$.R(3362617, 'require', undefined, true, true) : require = J$.R(3362617, 'require', require, true, true)), false)(J$.T(3362625, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(3362673, 'Key', J$.F(3362665, J$.I(typeof require === 'undefined' ? require = J$.R(3362649, 'require', undefined, true, true) : require = J$.R(3362649, 'require', require, true, true)), false)(J$.T(3362657, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3362705, 'PrivateKey', J$.F(3362697, J$.I(typeof require === 'undefined' ? require = J$.R(3362681, 'require', undefined, true, true) : require = J$.R(3362681, 'require', require, true, true)), false)(J$.T(3362689, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(3362737, 'pem', J$.F(3362729, J$.I(typeof require === 'undefined' ? require = J$.R(3362713, 'require', undefined, true, true) : require = J$.R(3362713, 'require', require, true, true)), false)(J$.T(3362721, './pem', 21, false)), pem, false, true);
            var pkcs8 = J$.W(3362769, 'pkcs8', J$.F(3362761, J$.I(typeof require === 'undefined' ? require = J$.R(3362745, 'require', undefined, true, true) : require = J$.R(3362745, 'require', require, true, true)), false)(J$.T(3362753, './pkcs8', 21, false)), pkcs8, false, true);
            var readECDSACurve = J$.W(3362793, 'readECDSACurve', J$.G(3362785, J$.R(3362777, 'pkcs8', pkcs8, false, true), 'readECDSACurve'), readECDSACurve, false, true);
        } catch (J$e) {
            J$.Ex(3371729, J$e);
        } finally {
            if (J$.Sr(3371737))
                continue jalangiLabel20;
            else
                break jalangiLabel20;
        }
    }
// JALANGI DO NOT INSTRUMENT

