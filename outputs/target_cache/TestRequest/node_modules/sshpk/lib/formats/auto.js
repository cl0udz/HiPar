J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(3338777, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/auto.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3336969, arguments.callee, this, arguments);
                            arguments = J$.N(3336977, 'arguments', arguments, true, false, false);
                            buf = J$.N(3336985, 'buf', buf, true, false, false);
                            options = J$.N(3336993, 'options', options, true, false, false);
                            if (J$.C(155328, J$.B(445586, '===', J$.U(445578, 'typeof', J$.R(3336201, 'buf', buf, false, false)), J$.T(3336209, 'string', 21, false)))) {
                                if (J$.C(155256, J$.M(3336241, J$.M(3336225, J$.R(3336217, 'buf', buf, false, false), 'trim', false)(), 'match', false)(J$.T(3336233, /^[-]+[ ]*BEGIN/, 14, false))))
                                    return J$.Rt(3336281, J$.M(3336273, J$.R(3336249, 'pem', pem, false, true), 'read', false)(J$.R(3336257, 'buf', buf, false, false), J$.R(3336265, 'options', options, false, false)));
                                if (J$.C(155264, J$.M(3336305, J$.R(3336289, 'buf', buf, false, false), 'match', false)(J$.T(3336297, /^\s*ssh-[a-z]/, 14, false))))
                                    return J$.Rt(3336345, J$.M(3336337, J$.R(3336313, 'ssh', ssh, false, true), 'read', false)(J$.R(3336321, 'buf', buf, false, false), J$.R(3336329, 'options', options, false, false)));
                                if (J$.C(155272, J$.M(3336369, J$.R(3336353, 'buf', buf, false, false), 'match', false)(J$.T(3336361, /^\s*ecdsa-/, 14, false))))
                                    return J$.Rt(3336409, J$.M(3336401, J$.R(3336377, 'ssh', ssh, false, true), 'read', false)(J$.R(3336385, 'buf', buf, false, false), J$.R(3336393, 'options', options, false, false)));
                                if (J$.C(155280, J$.M(3336433, J$.R(3336417, 'buf', buf, false, false), 'match', false)(J$.T(3336425, /^putty-user-key-file-2:/i, 14, false))))
                                    return J$.Rt(3336473, J$.M(3336465, J$.R(3336441, 'putty', putty, false, true), 'read', false)(J$.R(3336449, 'buf', buf, false, false), J$.R(3336457, 'options', options, false, false)));
                                if (J$.C(155288, J$.F(3336497, J$.R(3336481, 'findDNSSECHeader', findDNSSECHeader, false, true), false)(J$.R(3336489, 'buf', buf, false, false))))
                                    return J$.Rt(3336537, J$.M(3336529, J$.R(3336505, 'dnssec', dnssec, false, true), 'read', false)(J$.R(3336513, 'buf', buf, false, false), J$.R(3336521, 'options', options, false, false)));
                                buf = J$.W(3336577, 'buf', J$.M(3336569, J$.R(3336545, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3336553, 'buf', buf, false, false), J$.T(3336561, 'binary', 21, false)), buf, false, false);
                            } else {
                                J$.M(3336601, J$.R(3336585, 'assert', assert, false, true), 'buffer', false)(J$.R(3336593, 'buf', buf, false, false));
                                if (J$.C(155296, J$.F(3336625, J$.R(3336609, 'findPEMHeader', findPEMHeader, false, true), false)(J$.R(3336617, 'buf', buf, false, false))))
                                    return J$.Rt(3336665, J$.M(3336657, J$.R(3336633, 'pem', pem, false, true), 'read', false)(J$.R(3336641, 'buf', buf, false, false), J$.R(3336649, 'options', options, false, false)));
                                if (J$.C(155304, J$.F(3336689, J$.R(3336673, 'findSSHHeader', findSSHHeader, false, true), false)(J$.R(3336681, 'buf', buf, false, false))))
                                    return J$.Rt(3336729, J$.M(3336721, J$.R(3336697, 'ssh', ssh, false, true), 'read', false)(J$.R(3336705, 'buf', buf, false, false), J$.R(3336713, 'options', options, false, false)));
                                if (J$.C(155312, J$.F(3336753, J$.R(3336737, 'findPuTTYHeader', findPuTTYHeader, false, true), false)(J$.R(3336745, 'buf', buf, false, false))))
                                    return J$.Rt(3336793, J$.M(3336785, J$.R(3336761, 'putty', putty, false, true), 'read', false)(J$.R(3336769, 'buf', buf, false, false), J$.R(3336777, 'options', options, false, false)));
                                if (J$.C(155320, J$.F(3336817, J$.R(3336801, 'findDNSSECHeader', findDNSSECHeader, false, true), false)(J$.R(3336809, 'buf', buf, false, false))))
                                    return J$.Rt(3336857, J$.M(3336849, J$.R(3336825, 'dnssec', dnssec, false, true), 'read', false)(J$.R(3336833, 'buf', buf, false, false), J$.R(3336841, 'options', options, false, false)));
                            }
                            if (J$.C(155336, J$.B(445594, '<', J$.M(3336881, J$.R(3336865, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(3336873, 0, 22, false)), J$.G(3336897, J$.R(3336889, 'buf', buf, false, false), 'length'))))
                                return J$.Rt(3336937, J$.M(3336929, J$.R(3336905, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(3336913, 'buf', buf, false, false), J$.R(3336921, 'options', options, false, false)));
                            throw J$.F(3336961, J$.I(typeof Error === 'undefined' ? Error = J$.R(3336945, 'Error', undefined, true, true) : Error = J$.R(3336945, 'Error', Error, true, true)), true)(J$.T(3336953, 'Failed to auto-detect format of key', 21, false));
                        } catch (J$e) {
                            J$.Ex(3338969, J$e);
                        } finally {
                            if (J$.Fr(3338977))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findPuTTYHeader(buf) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3337289, arguments.callee, this, arguments);
                            arguments = J$.N(3337297, 'arguments', arguments, true, false, false);
                            buf = J$.N(3337305, 'buf', buf, true, false, false);
                            J$.N(3337313, 'offset', offset, false, false, false);
                            var offset = J$.W(3337009, 'offset', J$.T(3337001, 0, 22, false), offset, false, false);
                            while (J$.C(155368, J$.C(155360, J$.B(445602, '<', J$.R(3337017, 'offset', offset, false, false), J$.G(3337033, J$.R(3337025, 'buf', buf, false, false), 'length'))) ? J$.C(155352, J$.C(155344, J$.B(445610, '===', J$.G(3337057, J$.R(3337041, 'buf', buf, false, false), J$.R(3337049, 'offset', offset, false, false)), J$.T(3337065, 32, 22, false))) ? J$._() : J$.B(445618, '===', J$.G(3337089, J$.R(3337073, 'buf', buf, false, false), J$.R(3337081, 'offset', offset, false, false)), J$.T(3337097, 10, 22, false))) ? J$._() : J$.B(445626, '===', J$.G(3337121, J$.R(3337105, 'buf', buf, false, false), J$.R(3337113, 'offset', offset, false, false)), J$.T(3337129, 9, 22, false)) : J$._())) {
                                offset = J$.W(3337145, 'offset', J$.B(445642, '+', J$.U(445634, '+', J$.R(3337137, 'offset', offset, false, false)), 1), offset, false, false);
                            }
                            if (J$.C(155384, J$.C(155376, J$.B(445658, '<=', J$.B(445650, '+', J$.R(3337153, 'offset', offset, false, false), J$.T(3337161, 22, 22, false)), J$.G(3337177, J$.R(3337169, 'buf', buf, false, false), 'length'))) ? J$.B(445674, '===', J$.M(3337241, J$.M(3337233, J$.M(3337217, J$.R(3337185, 'buf', buf, false, false), 'slice', false)(J$.R(3337193, 'offset', offset, false, false), J$.B(445666, '+', J$.R(3337201, 'offset', offset, false, false), J$.T(3337209, 22, 22, false))), 'toString', false)(J$.T(3337225, 'ascii', 21, false)), 'toLowerCase', false)(), J$.T(3337249, 'putty-user-key-file-2:', 21, false)) : J$._()))
                                return J$.Rt(3337265, J$.T(3337257, true, 23, false));
                            return J$.Rt(3337281, J$.T(3337273, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3338985, J$e);
                        } finally {
                            if (J$.Fr(3338993))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findSSHHeader(buf) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3337713, arguments.callee, this, arguments);
                            arguments = J$.N(3337721, 'arguments', arguments, true, false, false);
                            buf = J$.N(3337729, 'buf', buf, true, false, false);
                            J$.N(3337737, 'offset', offset, false, false, false);
                            var offset = J$.W(3337329, 'offset', J$.T(3337321, 0, 22, false), offset, false, false);
                            while (J$.C(155416, J$.C(155408, J$.B(445682, '<', J$.R(3337337, 'offset', offset, false, false), J$.G(3337353, J$.R(3337345, 'buf', buf, false, false), 'length'))) ? J$.C(155400, J$.C(155392, J$.B(445690, '===', J$.G(3337377, J$.R(3337361, 'buf', buf, false, false), J$.R(3337369, 'offset', offset, false, false)), J$.T(3337385, 32, 22, false))) ? J$._() : J$.B(445698, '===', J$.G(3337409, J$.R(3337393, 'buf', buf, false, false), J$.R(3337401, 'offset', offset, false, false)), J$.T(3337417, 10, 22, false))) ? J$._() : J$.B(445706, '===', J$.G(3337441, J$.R(3337425, 'buf', buf, false, false), J$.R(3337433, 'offset', offset, false, false)), J$.T(3337449, 9, 22, false)) : J$._())) {
                                offset = J$.W(3337465, 'offset', J$.B(445722, '+', J$.U(445714, '+', J$.R(3337457, 'offset', offset, false, false)), 1), offset, false, false);
                            }
                            if (J$.C(155432, J$.C(155424, J$.B(445738, '<=', J$.B(445730, '+', J$.R(3337473, 'offset', offset, false, false), J$.T(3337481, 4, 22, false)), J$.G(3337497, J$.R(3337489, 'buf', buf, false, false), 'length'))) ? J$.B(445754, '===', J$.M(3337553, J$.M(3337537, J$.R(3337505, 'buf', buf, false, false), 'slice', false)(J$.R(3337513, 'offset', offset, false, false), J$.B(445746, '+', J$.R(3337521, 'offset', offset, false, false), J$.T(3337529, 4, 22, false))), 'toString', false)(J$.T(3337545, 'ascii', 21, false)), J$.T(3337561, 'ssh-', 21, false)) : J$._()))
                                return J$.Rt(3337577, J$.T(3337569, true, 23, false));
                            if (J$.C(155448, J$.C(155440, J$.B(445770, '<=', J$.B(445762, '+', J$.R(3337585, 'offset', offset, false, false), J$.T(3337593, 6, 22, false)), J$.G(3337609, J$.R(3337601, 'buf', buf, false, false), 'length'))) ? J$.B(445786, '===', J$.M(3337665, J$.M(3337649, J$.R(3337617, 'buf', buf, false, false), 'slice', false)(J$.R(3337625, 'offset', offset, false, false), J$.B(445778, '+', J$.R(3337633, 'offset', offset, false, false), J$.T(3337641, 6, 22, false))), 'toString', false)(J$.T(3337657, 'ascii', 21, false)), J$.T(3337673, 'ecdsa-', 21, false)) : J$._()))
                                return J$.Rt(3337689, J$.T(3337681, true, 23, false));
                            return J$.Rt(3337705, J$.T(3337697, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3339001, J$e);
                        } finally {
                            if (J$.Fr(3339009))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findPEMHeader(buf) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3338185, arguments.callee, this, arguments);
                            arguments = J$.N(3338193, 'arguments', arguments, true, false, false);
                            buf = J$.N(3338201, 'buf', buf, true, false, false);
                            J$.N(3338209, 'offset', offset, false, false, false);
                            var offset = J$.W(3337753, 'offset', J$.T(3337745, 0, 22, false), offset, false, false);
                            while (J$.C(155472, J$.C(155464, J$.B(445794, '<', J$.R(3337761, 'offset', offset, false, false), J$.G(3337777, J$.R(3337769, 'buf', buf, false, false), 'length'))) ? J$.C(155456, J$.B(445802, '===', J$.G(3337801, J$.R(3337785, 'buf', buf, false, false), J$.R(3337793, 'offset', offset, false, false)), J$.T(3337809, 32, 22, false))) ? J$._() : J$.B(445810, '===', J$.G(3337833, J$.R(3337817, 'buf', buf, false, false), J$.R(3337825, 'offset', offset, false, false)), J$.T(3337841, 10, 22, false)) : J$._())) {
                                offset = J$.W(3337857, 'offset', J$.B(445826, '+', J$.U(445818, '+', J$.R(3337849, 'offset', offset, false, false)), 1), offset, false, false);
                            }
                            if (J$.C(155480, J$.B(445834, '!==', J$.G(3337881, J$.R(3337865, 'buf', buf, false, false), J$.R(3337873, 'offset', offset, false, false)), J$.T(3337889, 45, 22, false))))
                                return J$.Rt(3337905, J$.T(3337897, false, 23, false));
                            while (J$.C(155496, J$.C(155488, J$.B(445842, '<', J$.R(3337913, 'offset', offset, false, false), J$.G(3337929, J$.R(3337921, 'buf', buf, false, false), 'length'))) ? J$.B(445850, '===', J$.G(3337953, J$.R(3337937, 'buf', buf, false, false), J$.R(3337945, 'offset', offset, false, false)), J$.T(3337961, 45, 22, false)) : J$._())) {
                                offset = J$.W(3337977, 'offset', J$.B(445866, '+', J$.U(445858, '+', J$.R(3337969, 'offset', offset, false, false)), 1), offset, false, false);
                            }
                            while (J$.C(155512, J$.C(155504, J$.B(445874, '<', J$.R(3337985, 'offset', offset, false, false), J$.G(3338001, J$.R(3337993, 'buf', buf, false, false), 'length'))) ? J$.B(445882, '===', J$.G(3338025, J$.R(3338009, 'buf', buf, false, false), J$.R(3338017, 'offset', offset, false, false)), J$.T(3338033, 32, 22, false)) : J$._())) {
                                offset = J$.W(3338049, 'offset', J$.B(445898, '+', J$.U(445890, '+', J$.R(3338041, 'offset', offset, false, false)), 1), offset, false, false);
                            }
                            if (J$.C(155528, J$.C(155520, J$.B(445914, '>', J$.B(445906, '+', J$.R(3338057, 'offset', offset, false, false), J$.T(3338065, 5, 22, false)), J$.G(3338081, J$.R(3338073, 'buf', buf, false, false), 'length'))) ? J$._() : J$.B(445930, '!==', J$.M(3338137, J$.M(3338121, J$.R(3338089, 'buf', buf, false, false), 'slice', false)(J$.R(3338097, 'offset', offset, false, false), J$.B(445922, '+', J$.R(3338105, 'offset', offset, false, false), J$.T(3338113, 5, 22, false))), 'toString', false)(J$.T(3338129, 'ascii', 21, false)), J$.T(3338145, 'BEGIN', 21, false))))
                                return J$.Rt(3338161, J$.T(3338153, false, 23, false));
                            return J$.Rt(3338177, J$.T(3338169, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(3339017, J$e);
                        } finally {
                            if (J$.Fr(3339025))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function findDNSSECHeader(buf) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3338673, arguments.callee, this, arguments);
                            arguments = J$.N(3338681, 'arguments', arguments, true, false, false);
                            buf = J$.N(3338689, 'buf', buf, true, false, false);
                            J$.N(3338697, 'headerCheck', headerCheck, false, false, false);
                            J$.N(3338705, 'lines', lines, false, false, false);
                            J$.N(3338713, 'line', line, false, false, false);
                            if (J$.C(155536, J$.B(445938, '<=', J$.G(3338225, J$.R(3338217, 'buf', buf, false, false), 'length'), J$.G(3338241, J$.R(3338233, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true), 'length'))))
                                return J$.Rt(3338257, J$.T(3338249, false, 23, false));
                            var headerCheck = J$.W(3338305, 'headerCheck', J$.M(3338297, J$.R(3338265, 'buf', buf, false, false), 'slice', false)(J$.T(3338273, 0, 22, false), J$.G(3338289, J$.R(3338281, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true), 'length')), headerCheck, false, false);
                            if (J$.C(155544, J$.B(445946, '===', J$.M(3338329, J$.R(3338313, 'headerCheck', headerCheck, false, false), 'toString', false)(J$.T(3338321, 'ascii', 21, false)), J$.R(3338337, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, true))))
                                return J$.Rt(3338353, J$.T(3338345, true, 23, false));
                            if (J$.C(155552, J$.B(445962, '!==', J$.U(445954, 'typeof', J$.R(3338361, 'buf', buf, false, false)), J$.T(3338369, 'string', 21, false)))) {
                                buf = J$.W(3338401, 'buf', J$.M(3338393, J$.R(3338377, 'buf', buf, false, false), 'toString', false)(J$.T(3338385, 'ascii', 21, false)), buf, false, false);
                            }
                            var lines = J$.W(3338433, 'lines', J$.M(3338425, J$.R(3338409, 'buf', buf, false, false), 'split', false)(J$.T(3338417, '\n', 21, false)), lines, false, false);
                            var line = J$.W(3338449, 'line', J$.T(3338441, 0, 22, false), line, false, false);
                            while (J$.C(155560, J$.M(3338489, J$.G(3338473, J$.R(3338457, 'lines', lines, false, false), J$.R(3338465, 'line', line, false, false)), 'match', false)(J$.T(3338481, /^\;/, 14, false)))) {
                                J$.B(445986, '-', line = J$.W(3338505, 'line', J$.B(445978, '+', J$.U(445970, '+', J$.R(3338497, 'line', line, false, false)), 1), line, false, false), 1);
                            }
                            if (J$.C(155568, J$.M(3338561, J$.M(3338545, J$.G(3338529, J$.R(3338513, 'lines', lines, false, false), J$.R(3338521, 'line', line, false, false)), 'toString', false)(J$.T(3338537, 'ascii', 21, false)), 'match', false)(J$.T(3338553, /\. IN KEY /, 14, false))))
                                return J$.Rt(3338577, J$.T(3338569, true, 23, false));
                            if (J$.C(155576, J$.M(3338633, J$.M(3338617, J$.G(3338601, J$.R(3338585, 'lines', lines, false, false), J$.R(3338593, 'line', line, false, false)), 'toString', false)(J$.T(3338609, 'ascii', 21, false)), 'match', false)(J$.T(3338625, /\. IN DNSKEY /, 14, false))))
                                return J$.Rt(3338649, J$.T(3338641, true, 23, false));
                            return J$.Rt(3338665, J$.T(3338657, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3339033, J$e);
                        } finally {
                            if (J$.Fr(3339041))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3338745, arguments.callee, this, arguments);
                            arguments = J$.N(3338753, 'arguments', arguments, true, false, false);
                            key = J$.N(3338761, 'key', key, true, false, false);
                            options = J$.N(3338769, 'options', options, true, false, false);
                            throw J$.F(3338737, J$.I(typeof Error === 'undefined' ? Error = J$.R(3338721, 'Error', undefined, true, true) : Error = J$.R(3338721, 'Error', Error, true, true)), true)(J$.T(3338729, '"auto" format cannot be used for writing', 21, false));
                        } catch (J$e) {
                            J$.Ex(3339049, J$e);
                        } finally {
                            if (J$.Fr(3339057))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3338785, 'assert', assert, false, false, false);
            J$.N(3338793, 'Buffer', Buffer, false, false, false);
            J$.N(3338801, 'utils', utils, false, false, false);
            J$.N(3338809, 'Key', Key, false, false, false);
            J$.N(3338817, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3338825, 'pem', pem, false, false, false);
            J$.N(3338833, 'ssh', ssh, false, false, false);
            J$.N(3338841, 'rfc4253', rfc4253, false, false, false);
            J$.N(3338849, 'dnssec', dnssec, false, false, false);
            J$.N(3338857, 'putty', putty, false, false, false);
            J$.N(3338865, 'DNSSEC_PRIVKEY_HEADER_PREFIX', DNSSEC_PRIVKEY_HEADER_PREFIX, false, false, false);
            read = J$.N(3338881, 'read', J$.T(3338873, read, 12, false), true, false, false);
            findPuTTYHeader = J$.N(3338897, 'findPuTTYHeader', J$.T(3338889, findPuTTYHeader, 12, false), true, false, false);
            findSSHHeader = J$.N(3338913, 'findSSHHeader', J$.T(3338905, findSSHHeader, 12, false), true, false, false);
            findPEMHeader = J$.N(3338929, 'findPEMHeader', J$.T(3338921, findPEMHeader, 12, false), true, false, false);
            findDNSSECHeader = J$.N(3338945, 'findDNSSECHeader', J$.T(3338937, findDNSSECHeader, 12, false), true, false, false);
            write = J$.N(3338961, 'write', J$.T(3338953, write, 12, false), true, false, false);
            J$.T(3335617, 'use strict', 21, false);
            J$.F(3335641, J$.I(typeof require === 'undefined' ? require = J$.R(3335625, 'require', undefined, true, true) : require = J$.R(3335625, 'require', require, true, true)), false)(J$.T(3335633, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3335665, J$.I(typeof require === 'undefined' ? require = J$.R(3335649, 'require', undefined, true, true) : require = J$.R(3335649, 'require', require, true, true)), false)(J$.T(3335657, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3335689, J$.I(typeof require === 'undefined' ? require = J$.R(3335673, 'require', undefined, true, true) : require = J$.R(3335673, 'require', require, true, true)), false)(J$.T(3335681, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3335713, J$.I(typeof require === 'undefined' ? require = J$.R(3335697, 'require', undefined, true, true) : require = J$.R(3335697, 'require', require, true, true)), false)(J$.T(3335705, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3335737, J$.I(typeof require === 'undefined' ? require = J$.R(3335721, 'require', undefined, true, true) : require = J$.R(3335721, 'require', require, true, true)), false)(J$.T(3335729, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3335761, J$.I(typeof require === 'undefined' ? require = J$.R(3335745, 'require', undefined, true, true) : require = J$.R(3335745, 'require', require, true, true)), false)(J$.T(3335753, 'core-js/modules/es.string.match', 21, false));
            J$.F(3335785, J$.I(typeof require === 'undefined' ? require = J$.R(3335769, 'require', undefined, true, true) : require = J$.R(3335769, 'require', require, true, true)), false)(J$.T(3335777, 'core-js/modules/es.string.split', 21, false));
            J$.F(3335809, J$.I(typeof require === 'undefined' ? require = J$.R(3335793, 'require', undefined, true, true) : require = J$.R(3335793, 'require', require, true, true)), false)(J$.T(3335801, 'core-js/modules/es.string.trim', 21, false));
            J$.P(3335849, J$.I(typeof module === 'undefined' ? module = J$.R(3335817, 'module', undefined, true, true) : module = J$.R(3335817, 'module', module, true, true)), 'exports', J$.T(3335841, {
                read: J$.R(3335825, 'read', read, false, true),
                write: J$.R(3335833, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(3335881, 'assert', J$.F(3335873, J$.I(typeof require === 'undefined' ? require = J$.R(3335857, 'require', undefined, true, true) : require = J$.R(3335857, 'require', require, true, true)), false)(J$.T(3335865, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3335921, 'Buffer', J$.G(3335913, J$.F(3335905, J$.I(typeof require === 'undefined' ? require = J$.R(3335889, 'require', undefined, true, true) : require = J$.R(3335889, 'require', require, true, true)), false)(J$.T(3335897, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var utils = J$.W(3335953, 'utils', J$.F(3335945, J$.I(typeof require === 'undefined' ? require = J$.R(3335929, 'require', undefined, true, true) : require = J$.R(3335929, 'require', require, true, true)), false)(J$.T(3335937, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(3335985, 'Key', J$.F(3335977, J$.I(typeof require === 'undefined' ? require = J$.R(3335961, 'require', undefined, true, true) : require = J$.R(3335961, 'require', require, true, true)), false)(J$.T(3335969, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3336017, 'PrivateKey', J$.F(3336009, J$.I(typeof require === 'undefined' ? require = J$.R(3335993, 'require', undefined, true, true) : require = J$.R(3335993, 'require', require, true, true)), false)(J$.T(3336001, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(3336049, 'pem', J$.F(3336041, J$.I(typeof require === 'undefined' ? require = J$.R(3336025, 'require', undefined, true, true) : require = J$.R(3336025, 'require', require, true, true)), false)(J$.T(3336033, './pem', 21, false)), pem, false, true);
            var ssh = J$.W(3336081, 'ssh', J$.F(3336073, J$.I(typeof require === 'undefined' ? require = J$.R(3336057, 'require', undefined, true, true) : require = J$.R(3336057, 'require', require, true, true)), false)(J$.T(3336065, './ssh', 21, false)), ssh, false, true);
            var rfc4253 = J$.W(3336113, 'rfc4253', J$.F(3336105, J$.I(typeof require === 'undefined' ? require = J$.R(3336089, 'require', undefined, true, true) : require = J$.R(3336089, 'require', require, true, true)), false)(J$.T(3336097, './rfc4253', 21, false)), rfc4253, false, true);
            var dnssec = J$.W(3336145, 'dnssec', J$.F(3336137, J$.I(typeof require === 'undefined' ? require = J$.R(3336121, 'require', undefined, true, true) : require = J$.R(3336121, 'require', require, true, true)), false)(J$.T(3336129, './dnssec', 21, false)), dnssec, false, true);
            var putty = J$.W(3336177, 'putty', J$.F(3336169, J$.I(typeof require === 'undefined' ? require = J$.R(3336153, 'require', undefined, true, true) : require = J$.R(3336153, 'require', require, true, true)), false)(J$.T(3336161, './putty', 21, false)), putty, false, true);
            var DNSSEC_PRIVKEY_HEADER_PREFIX = J$.W(3336193, 'DNSSEC_PRIVKEY_HEADER_PREFIX', J$.T(3336185, 'Private-key-format: v1', 21, false), DNSSEC_PRIVKEY_HEADER_PREFIX, false, true);
        } catch (J$e) {
            J$.Ex(3339065, J$e);
        } finally {
            if (J$.Sr(3339073))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

