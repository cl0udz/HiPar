J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(3346737, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/formats/dnssec.js');
            function read(buf, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3340513, arguments.callee, this, arguments);
                            arguments = J$.N(3340521, 'arguments', arguments, true, false, false);
                            buf = J$.N(3340529, 'buf', buf, true, false, false);
                            options = J$.N(3340537, 'options', options, true, false, false);
                            J$.N(3340545, 'lines', lines, false, false, false);
                            J$.N(3340553, 'algElems', algElems, false, false, false);
                            J$.N(3340561, 'algoNum', algoNum, false, false, false);
                            J$.N(3340569, 'algoName', algoName, false, false, false);
                            J$.N(3340577, 'line', line, false, false, false);
                            if (J$.C(155584, J$.B(446002, '!==', J$.U(445994, 'typeof', J$.R(3339841, 'buf', buf, false, false)), J$.T(3339849, 'string', 21, false)))) {
                                J$.M(3339881, J$.R(3339857, 'assert', assert, false, true), 'buffer', false)(J$.R(3339865, 'buf', buf, false, false), J$.T(3339873, 'buf', 21, false));
                                buf = J$.W(3339913, 'buf', J$.M(3339905, J$.R(3339889, 'buf', buf, false, false), 'toString', false)(J$.T(3339897, 'ascii', 21, false)), buf, false, false);
                            }
                            var lines = J$.W(3339945, 'lines', J$.M(3339937, J$.R(3339921, 'buf', buf, false, false), 'split', false)(J$.T(3339929, '\n', 21, false)), lines, false, false);
                            if (J$.C(155600, J$.M(3339985, J$.G(3339969, J$.R(3339953, 'lines', lines, false, false), J$.T(3339961, 0, 22, false)), 'match', false)(J$.T(3339977, /^Private-key-format\: v1/, 14, false)))) {
                                var algElems = J$.W(3340033, 'algElems', J$.M(3340025, J$.G(3340009, J$.R(3339993, 'lines', lines, false, false), J$.T(3340001, 1, 22, false)), 'split', false)(J$.T(3340017, ' ', 21, false)), algElems, false, false);
                                var algoNum = J$.W(3340089, 'algoNum', J$.F(3340081, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(3340041, 'parseInt', undefined, true, true) : parseInt = J$.R(3340041, 'parseInt', parseInt, true, true)), false)(J$.G(3340065, J$.R(3340049, 'algElems', algElems, false, false), J$.T(3340057, 1, 22, false)), J$.T(3340073, 10, 22, false)), algoNum, false, false);
                                var algoName = J$.W(3340121, 'algoName', J$.G(3340113, J$.R(3340097, 'algElems', algElems, false, false), J$.T(3340105, 2, 22, false)), algoName, false, false);
                                if (J$.C(155592, J$.U(446010, '!', J$.G(3340145, J$.R(3340129, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3340137, 'algoNum', algoNum, false, false)))))
                                    throw J$.F(3340177, J$.I(typeof Error === 'undefined' ? Error = J$.R(3340153, 'Error', undefined, true, true) : Error = J$.R(3340153, 'Error', Error, true, true)), true)(J$.B(446018, '+', J$.T(3340161, 'Unsupported algorithm: ', 21, false), J$.R(3340169, 'algoName', algoName, false, false)));
                                return J$.Rt(3340233, J$.F(3340225, J$.R(3340185, 'readDNSSECPrivateKey', readDNSSECPrivateKey, false, true), false)(J$.R(3340193, 'algoNum', algoNum, false, false), J$.M(3340217, J$.R(3340201, 'lines', lines, false, false), 'slice', false)(J$.T(3340209, 2, 22, false))));
                            }
                            var line = J$.W(3340249, 'line', J$.T(3340241, 0, 22, false), line, false, false);
                            while (J$.C(155608, J$.M(3340289, J$.G(3340273, J$.R(3340257, 'lines', lines, false, false), J$.R(3340265, 'line', line, false, false)), 'match', false)(J$.T(3340281, /^\;/, 14, false)))) {
                                J$.B(446042, '-', line = J$.W(3340305, 'line', J$.B(446034, '+', J$.U(446026, '+', J$.R(3340297, 'line', line, false, false)), 1), line, false, false), 1);
                            }
                            if (J$.C(155632, J$.C(155624, J$.C(155616, J$.M(3340345, J$.G(3340329, J$.R(3340313, 'lines', lines, false, false), J$.R(3340321, 'line', line, false, false)), 'match', false)(J$.T(3340337, /\. IN KEY /, 14, false))) ? J$._() : J$.M(3340385, J$.G(3340369, J$.R(3340353, 'lines', lines, false, false), J$.R(3340361, 'line', line, false, false)), 'match', false)(J$.T(3340377, /\. IN DNSKEY /, 14, false))) ? J$.B(446058, '===', J$.G(3340425, J$.G(3340417, J$.R(3340393, 'lines', lines, false, false), J$.B(446050, '+', J$.R(3340401, 'line', line, false, false), J$.T(3340409, 1, 22, false))), 'length'), J$.T(3340433, 0, 22, false)) : J$._())) {
                                return J$.Rt(3340481, J$.F(3340473, J$.R(3340441, 'readRFC3110', readRFC3110, false, true), false)(J$.G(3340465, J$.R(3340449, 'lines', lines, false, false), J$.R(3340457, 'line', line, false, false))));
                            }
                            throw J$.F(3340505, J$.I(typeof Error === 'undefined' ? Error = J$.R(3340489, 'Error', undefined, true, true) : Error = J$.R(3340489, 'Error', Error, true, true)), true)(J$.T(3340497, 'Cannot parse dnssec key', 21, false));
                        } catch (J$e) {
                            J$.Ex(3346993, J$e);
                        } finally {
                            if (J$.Fr(3347001))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readRFC3110(keyString) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3341649, arguments.callee, this, arguments);
                            arguments = J$.N(3341657, 'arguments', arguments, true, false, false);
                            keyString = J$.N(3341665, 'keyString', keyString, true, false, false);
                            J$.N(3341673, 'elems', elems, false, false, false);
                            J$.N(3341681, 'algorithm', algorithm, false, false, false);
                            J$.N(3341689, 'base64key', base64key, false, false, false);
                            J$.N(3341697, 'keyBuffer', keyBuffer, false, false, false);
                            J$.N(3341705, 'publicExponentLen', publicExponentLen, false, false, false);
                            J$.N(3341713, 'publicExponent', publicExponent, false, false, false);
                            J$.N(3341721, 'modulus', modulus, false, false, false);
                            J$.N(3341729, 'rsaKey', rsaKey, false, false, false);
                            J$.N(3341737, 'curve', curve, false, false, false);
                            J$.N(3341745, 'size', size, false, false, false);
                            J$.N(3341753, 'ecdsaKey', ecdsaKey, false, false, false);
                            var elems = J$.W(3340609, 'elems', J$.M(3340601, J$.R(3340585, 'keyString', keyString, false, false), 'split', false)(J$.T(3340593, ' ', 21, false)), elems, false, false);
                            var algorithm = J$.W(3340665, 'algorithm', J$.F(3340657, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(3340617, 'parseInt', undefined, true, true) : parseInt = J$.R(3340617, 'parseInt', parseInt, true, true)), false)(J$.G(3340641, J$.R(3340625, 'elems', elems, false, false), J$.T(3340633, 5, 22, false)), J$.T(3340649, 10, 22, false)), algorithm, false, false);
                            if (J$.C(155640, J$.U(446066, '!', J$.G(3340689, J$.R(3340673, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3340681, 'algorithm', algorithm, false, false)))))
                                throw J$.F(3340721, J$.I(typeof Error === 'undefined' ? Error = J$.R(3340697, 'Error', undefined, true, true) : Error = J$.R(3340697, 'Error', Error, true, true)), true)(J$.B(446074, '+', J$.T(3340705, 'Unsupported algorithm: ', 21, false), J$.R(3340713, 'algorithm', algorithm, false, false)));
                            var base64key = J$.W(3340777, 'base64key', J$.M(3340769, J$.M(3340761, J$.R(3340729, 'elems', elems, false, false), 'slice', false)(J$.T(3340737, 6, 22, false), J$.G(3340753, J$.R(3340745, 'elems', elems, false, false), 'length')), 'join', false)(), base64key, false, false);
                            var keyBuffer = J$.W(3340817, 'keyBuffer', J$.M(3340809, J$.R(3340785, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3340793, 'base64key', base64key, false, false), J$.T(3340801, 'base64', 21, false)), keyBuffer, false, false);
                            if (J$.C(155664, J$.M(3340857, J$.G(3340841, J$.R(3340825, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3340833, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(3340849, /^RSA-/, 14, false)))) {
                                var publicExponentLen = J$.W(3340889, 'publicExponentLen', J$.M(3340881, J$.R(3340865, 'keyBuffer', keyBuffer, false, false), 'readUInt8', false)(J$.T(3340873, 0, 22, false)), publicExponentLen, false, false);
                                if (J$.C(155656, J$.C(155648, J$.B(446082, '!=', J$.R(3340897, 'publicExponentLen', publicExponentLen, false, false), J$.T(3340905, 3, 22, false))) ? J$.B(446090, '!=', J$.R(3340913, 'publicExponentLen', publicExponentLen, false, false), J$.T(3340921, 1, 22, false)) : J$._()))
                                    throw J$.F(3340953, J$.I(typeof Error === 'undefined' ? Error = J$.R(3340929, 'Error', undefined, true, true) : Error = J$.R(3340929, 'Error', Error, true, true)), true)(J$.B(446098, '+', J$.T(3340937, 'Cannot parse dnssec key: ', 21, false), J$.T(3340945, 'unsupported exponent length', 21, false)));
                                var publicExponent = J$.W(3341001, 'publicExponent', J$.M(3340993, J$.R(3340961, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.T(3340969, 1, 22, false), J$.B(446106, '+', J$.R(3340977, 'publicExponentLen', publicExponentLen, false, false), J$.T(3340985, 1, 22, false))), publicExponent, false, false);
                                publicExponent = J$.W(3341033, 'publicExponent', J$.M(3341025, J$.R(3341009, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3341017, 'publicExponent', publicExponent, false, false)), publicExponent, false, false);
                                var modulus = J$.W(3341073, 'modulus', J$.M(3341065, J$.R(3341041, 'keyBuffer', keyBuffer, false, false), 'slice', false)(J$.B(446114, '+', J$.T(3341049, 1, 22, false), J$.R(3341057, 'publicExponentLen', publicExponentLen, false, false))), modulus, false, false);
                                modulus = J$.W(3341105, 'modulus', J$.M(3341097, J$.R(3341081, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3341089, 'modulus', modulus, false, false)), modulus, false, false);
                                var rsaKey = J$.W(3341137, 'rsaKey', J$.T(3341129, {
                                    type: J$.T(3341113, 'rsa', 21, false),
                                    parts: J$.T(3341121, [], 10, false)
                                }, 11, false), rsaKey, false, false);
                                J$.M(3341185, J$.G(3341153, J$.R(3341145, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(3341177, {
                                    name: J$.T(3341161, 'e', 21, false),
                                    data: J$.R(3341169, 'publicExponent', publicExponent, false, false)
                                }, 11, false));
                                J$.M(3341233, J$.G(3341201, J$.R(3341193, 'rsaKey', rsaKey, false, false), 'parts'), 'push', false)(J$.T(3341225, {
                                    name: J$.T(3341209, 'n', 21, false),
                                    data: J$.R(3341217, 'modulus', modulus, false, false)
                                }, 11, false));
                                return J$.Rt(3341265, J$.F(3341257, J$.R(3341241, 'Key', Key, false, true), true)(J$.R(3341249, 'rsaKey', rsaKey, false, false)));
                            }
                            if (J$.C(155688, J$.C(155672, J$.B(446122, '===', J$.G(3341289, J$.R(3341273, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3341281, 'algorithm', algorithm, false, false)), J$.T(3341297, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(446130, '===', J$.G(3341321, J$.R(3341305, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3341313, 'algorithm', algorithm, false, false)), J$.T(3341329, 'ECDSA-P256-SHA256', 21, false)))) {
                                var curve = J$.W(3341345, 'curve', J$.T(3341337, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(3341361, 'size', J$.T(3341353, 384, 22, false), size, false, false);
                                if (J$.C(155680, J$.M(3341401, J$.G(3341385, J$.R(3341369, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3341377, 'algorithm', algorithm, false, false)), 'match', false)(J$.T(3341393, /^ECDSA-P256-SHA256/, 14, false)))) {
                                    curve = J$.W(3341417, 'curve', J$.T(3341409, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(3341433, 'size', J$.T(3341425, 256, 22, false), size, false, false);
                                }
                                var ecdsaKey = J$.W(3341561, 'ecdsaKey', J$.T(3341553, {
                                    type: J$.T(3341441, 'ecdsa', 21, false),
                                    curve: J$.R(3341449, 'curve', curve, false, false),
                                    size: J$.R(3341457, 'size', size, false, false),
                                    parts: J$.T(3341545, [
                                        J$.T(3341497, {
                                            name: J$.T(3341465, 'curve', 21, false),
                                            data: J$.M(3341489, J$.R(3341473, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3341481, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(3341537, {
                                            name: J$.T(3341505, 'Q', 21, false),
                                            data: J$.M(3341529, J$.R(3341513, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(3341521, 'keyBuffer', keyBuffer, false, false))
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(3341593, J$.F(3341585, J$.R(3341569, 'Key', Key, false, true), true)(J$.R(3341577, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(3341641, J$.I(typeof Error === 'undefined' ? Error = J$.R(3341601, 'Error', undefined, true, true) : Error = J$.R(3341601, 'Error', Error, true, true)), true)(J$.B(446138, '+', J$.T(3341609, 'Unsupported algorithm: ', 21, false), J$.G(3341633, J$.R(3341617, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3341625, 'algorithm', algorithm, false, false))));
                        } catch (J$e) {
                            J$.Ex(3347009, J$e);
                        } finally {
                            if (J$.Fr(3347017))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function elementToBuf(e) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3341833, arguments.callee, this, arguments);
                            arguments = J$.N(3341841, 'arguments', arguments, true, false, false);
                            e = J$.N(3341849, 'e', e, true, false, false);
                            return J$.Rt(3341825, J$.M(3341817, J$.R(3341761, 'Buffer', Buffer, false, true), 'from', false)(J$.G(3341801, J$.M(3341785, J$.R(3341769, 'e', e, false, false), 'split', false)(J$.T(3341777, ' ', 21, false)), J$.T(3341793, 1, 22, false)), J$.T(3341809, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3347025, J$e);
                        } finally {
                            if (J$.Fr(3347033))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECRSAPrivateKey(elements) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3343201, arguments.callee, this, arguments);
                            arguments = J$.N(3343209, 'arguments', arguments, true, false, false);
                            elements = J$.N(3343217, 'elements', elements, true, false, false);
                            J$.N(3343225, 'rsaParams', rsaParams, false, false, false);
                            J$.N(3343233, 'key', key, false, false, false);
                            var rsaParams = J$.W(3341865, 'rsaParams', J$.T(3341857, {}, 11, false), rsaParams, false, false);
                            J$.M(3342681, J$.R(3341873, 'elements', elements, false, false), 'forEach', false)(J$.T(3342673, function (element) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(3342649, arguments.callee, this, arguments);
                                            arguments = J$.N(3342657, 'arguments', arguments, true, false, false);
                                            element = J$.N(3342665, 'element', element, true, false, false);
                                            if (J$.C(155752, J$.B(446146, '===', J$.G(3341913, J$.M(3341897, J$.R(3341881, 'element', element, false, false), 'split', false)(J$.T(3341889, ' ', 21, false)), J$.T(3341905, 0, 22, false)), J$.T(3341921, 'Modulus:', 21, false))))
                                                J$.P(3341969, J$.R(3341929, 'rsaParams', rsaParams, false, false), J$.T(3341937, 'n', 21, false), J$.F(3341961, J$.R(3341945, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3341953, 'element', element, false, false)));
                                            else if (J$.C(155744, J$.B(446154, '===', J$.G(3342009, J$.M(3341993, J$.R(3341977, 'element', element, false, false), 'split', false)(J$.T(3341985, ' ', 21, false)), J$.T(3342001, 0, 22, false)), J$.T(3342017, 'PublicExponent:', 21, false))))
                                                J$.P(3342065, J$.R(3342025, 'rsaParams', rsaParams, false, false), J$.T(3342033, 'e', 21, false), J$.F(3342057, J$.R(3342041, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342049, 'element', element, false, false)));
                                            else if (J$.C(155736, J$.B(446162, '===', J$.G(3342105, J$.M(3342089, J$.R(3342073, 'element', element, false, false), 'split', false)(J$.T(3342081, ' ', 21, false)), J$.T(3342097, 0, 22, false)), J$.T(3342113, 'PrivateExponent:', 21, false))))
                                                J$.P(3342161, J$.R(3342121, 'rsaParams', rsaParams, false, false), J$.T(3342129, 'd', 21, false), J$.F(3342153, J$.R(3342137, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342145, 'element', element, false, false)));
                                            else if (J$.C(155728, J$.B(446170, '===', J$.G(3342201, J$.M(3342185, J$.R(3342169, 'element', element, false, false), 'split', false)(J$.T(3342177, ' ', 21, false)), J$.T(3342193, 0, 22, false)), J$.T(3342209, 'Prime1:', 21, false))))
                                                J$.P(3342257, J$.R(3342217, 'rsaParams', rsaParams, false, false), J$.T(3342225, 'p', 21, false), J$.F(3342249, J$.R(3342233, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342241, 'element', element, false, false)));
                                            else if (J$.C(155720, J$.B(446178, '===', J$.G(3342297, J$.M(3342281, J$.R(3342265, 'element', element, false, false), 'split', false)(J$.T(3342273, ' ', 21, false)), J$.T(3342289, 0, 22, false)), J$.T(3342305, 'Prime2:', 21, false))))
                                                J$.P(3342353, J$.R(3342313, 'rsaParams', rsaParams, false, false), J$.T(3342321, 'q', 21, false), J$.F(3342345, J$.R(3342329, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342337, 'element', element, false, false)));
                                            else if (J$.C(155712, J$.B(446186, '===', J$.G(3342393, J$.M(3342377, J$.R(3342361, 'element', element, false, false), 'split', false)(J$.T(3342369, ' ', 21, false)), J$.T(3342385, 0, 22, false)), J$.T(3342401, 'Exponent1:', 21, false))))
                                                J$.P(3342449, J$.R(3342409, 'rsaParams', rsaParams, false, false), J$.T(3342417, 'dmodp', 21, false), J$.F(3342441, J$.R(3342425, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342433, 'element', element, false, false)));
                                            else if (J$.C(155704, J$.B(446194, '===', J$.G(3342489, J$.M(3342473, J$.R(3342457, 'element', element, false, false), 'split', false)(J$.T(3342465, ' ', 21, false)), J$.T(3342481, 0, 22, false)), J$.T(3342497, 'Exponent2:', 21, false))))
                                                J$.P(3342545, J$.R(3342505, 'rsaParams', rsaParams, false, false), J$.T(3342513, 'dmodq', 21, false), J$.F(3342537, J$.R(3342521, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342529, 'element', element, false, false)));
                                            else if (J$.C(155696, J$.B(446202, '===', J$.G(3342585, J$.M(3342569, J$.R(3342553, 'element', element, false, false), 'split', false)(J$.T(3342561, ' ', 21, false)), J$.T(3342577, 0, 22, false)), J$.T(3342593, 'Coefficient:', 21, false))))
                                                J$.P(3342641, J$.R(3342601, 'rsaParams', rsaParams, false, false), J$.T(3342609, 'iqmp', 21, false), J$.F(3342633, J$.R(3342617, 'elementToBuf', elementToBuf, false, true), false)(J$.R(3342625, 'element', element, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3347041, J$e);
                                        } finally {
                                            if (J$.Fr(3347049))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            var key = J$.W(3343161, 'key', J$.T(3343153, {
                                type: J$.T(3342689, 'rsa', 21, false),
                                parts: J$.T(3343145, [
                                    J$.T(3342745, {
                                        name: J$.T(3342697, 'e', 21, false),
                                        data: J$.M(3342737, J$.R(3342705, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3342729, J$.R(3342713, 'rsaParams', rsaParams, false, false), J$.T(3342721, 'e', 21, false)))
                                    }, 11, false),
                                    J$.T(3342801, {
                                        name: J$.T(3342753, 'n', 21, false),
                                        data: J$.M(3342793, J$.R(3342761, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3342785, J$.R(3342769, 'rsaParams', rsaParams, false, false), J$.T(3342777, 'n', 21, false)))
                                    }, 11, false),
                                    J$.T(3342857, {
                                        name: J$.T(3342809, 'd', 21, false),
                                        data: J$.M(3342849, J$.R(3342817, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3342841, J$.R(3342825, 'rsaParams', rsaParams, false, false), J$.T(3342833, 'd', 21, false)))
                                    }, 11, false),
                                    J$.T(3342913, {
                                        name: J$.T(3342865, 'p', 21, false),
                                        data: J$.M(3342905, J$.R(3342873, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3342897, J$.R(3342881, 'rsaParams', rsaParams, false, false), J$.T(3342889, 'p', 21, false)))
                                    }, 11, false),
                                    J$.T(3342969, {
                                        name: J$.T(3342921, 'q', 21, false),
                                        data: J$.M(3342961, J$.R(3342929, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3342953, J$.R(3342937, 'rsaParams', rsaParams, false, false), J$.T(3342945, 'q', 21, false)))
                                    }, 11, false),
                                    J$.T(3343025, {
                                        name: J$.T(3342977, 'dmodp', 21, false),
                                        data: J$.M(3343017, J$.R(3342985, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3343009, J$.R(3342993, 'rsaParams', rsaParams, false, false), J$.T(3343001, 'dmodp', 21, false)))
                                    }, 11, false),
                                    J$.T(3343081, {
                                        name: J$.T(3343033, 'dmodq', 21, false),
                                        data: J$.M(3343073, J$.R(3343041, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3343065, J$.R(3343049, 'rsaParams', rsaParams, false, false), J$.T(3343057, 'dmodq', 21, false)))
                                    }, 11, false),
                                    J$.T(3343137, {
                                        name: J$.T(3343089, 'iqmp', 21, false),
                                        data: J$.M(3343129, J$.R(3343097, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3343121, J$.R(3343105, 'rsaParams', rsaParams, false, false), J$.T(3343113, 'iqmp', 21, false)))
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3343193, J$.F(3343185, J$.R(3343169, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3343177, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3347057, J$e);
                        } finally {
                            if (J$.Fr(3347065))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readDNSSECPrivateKey(alg, elements) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3343865, arguments.callee, this, arguments);
                            arguments = J$.N(3343873, 'arguments', arguments, true, false, false);
                            alg = J$.N(3343881, 'alg', alg, true, false, false);
                            elements = J$.N(3343889, 'elements', elements, true, false, false);
                            J$.N(3343897, 'd', d, false, false, false);
                            J$.N(3343905, 'curve', curve, false, false, false);
                            J$.N(3343913, 'size', size, false, false, false);
                            J$.N(3343921, 'publicKey', publicKey, false, false, false);
                            J$.N(3343929, 'Q', Q, false, false, false);
                            J$.N(3343937, 'ecdsaKey', ecdsaKey, false, false, false);
                            if (J$.C(155760, J$.M(3343273, J$.G(3343257, J$.R(3343241, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3343249, 'alg', alg, false, false)), 'match', false)(J$.T(3343265, /^RSA-/, 14, false)))) {
                                return J$.Rt(3343305, J$.F(3343297, J$.R(3343281, 'readDNSSECRSAPrivateKey', readDNSSECRSAPrivateKey, false, true), false)(J$.R(3343289, 'elements', elements, false, false)));
                            }
                            if (J$.C(155784, J$.C(155768, J$.B(446210, '===', J$.G(3343329, J$.R(3343313, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3343321, 'alg', alg, false, false)), J$.T(3343337, 'ECDSA-P384-SHA384', 21, false))) ? J$._() : J$.B(446218, '===', J$.G(3343361, J$.R(3343345, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3343353, 'alg', alg, false, false)), J$.T(3343369, 'ECDSA-P256-SHA256', 21, false)))) {
                                var d = J$.W(3343457, 'd', J$.M(3343449, J$.R(3343377, 'Buffer', Buffer, false, true), 'from', false)(J$.G(3343433, J$.M(3343417, J$.G(3343401, J$.R(3343385, 'elements', elements, false, false), J$.T(3343393, 0, 22, false)), 'split', false)(J$.T(3343409, ' ', 21, false)), J$.T(3343425, 1, 22, false)), J$.T(3343441, 'base64', 21, false)), d, false, false);
                                var curve = J$.W(3343473, 'curve', J$.T(3343465, 'nistp384', 21, false), curve, false, false);
                                var size = J$.W(3343489, 'size', J$.T(3343481, 384, 22, false), size, false, false);
                                if (J$.C(155776, J$.B(446226, '===', J$.G(3343513, J$.R(3343497, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3343505, 'alg', alg, false, false)), J$.T(3343521, 'ECDSA-P256-SHA256', 21, false)))) {
                                    curve = J$.W(3343537, 'curve', J$.T(3343529, 'nistp256', 21, false), curve, false, false);
                                    size = J$.W(3343553, 'size', J$.T(3343545, 256, 22, false), size, false, false);
                                }
                                var publicKey = J$.W(3343593, 'publicKey', J$.M(3343585, J$.R(3343561, 'utils', utils, false, true), 'publicFromPrivateECDSA', false)(J$.R(3343569, 'curve', curve, false, false), J$.R(3343577, 'd', d, false, false)), publicKey, false, false);
                                var Q = J$.W(3343641, 'Q', J$.G(3343633, J$.G(3343625, J$.G(3343609, J$.R(3343601, 'publicKey', publicKey, false, false), 'part'), J$.T(3343617, 'Q', 21, false)), 'data'), Q, false, false);
                                var ecdsaKey = J$.W(3343777, 'ecdsaKey', J$.T(3343769, {
                                    type: J$.T(3343649, 'ecdsa', 21, false),
                                    curve: J$.R(3343657, 'curve', curve, false, false),
                                    size: J$.R(3343665, 'size', size, false, false),
                                    parts: J$.T(3343761, [
                                        J$.T(3343705, {
                                            name: J$.T(3343673, 'curve', 21, false),
                                            data: J$.M(3343697, J$.R(3343681, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3343689, 'curve', curve, false, false))
                                        }, 11, false),
                                        J$.T(3343729, {
                                            name: J$.T(3343713, 'd', 21, false),
                                            data: J$.R(3343721, 'd', d, false, false)
                                        }, 11, false),
                                        J$.T(3343753, {
                                            name: J$.T(3343737, 'Q', 21, false),
                                            data: J$.R(3343745, 'Q', Q, false, false)
                                        }, 11, false)
                                    ], 10, false)
                                }, 11, false), ecdsaKey, false, false);
                                return J$.Rt(3343809, J$.F(3343801, J$.R(3343785, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3343793, 'ecdsaKey', ecdsaKey, false, false)));
                            }
                            throw J$.F(3343857, J$.I(typeof Error === 'undefined' ? Error = J$.R(3343817, 'Error', undefined, true, true) : Error = J$.R(3343817, 'Error', Error, true, true)), true)(J$.B(446234, '+', J$.T(3343825, 'Unsupported algorithm: ', 21, false), J$.G(3343849, J$.R(3343833, 'supportedAlgosById', supportedAlgosById, false, true), J$.R(3343841, 'alg', alg, false, false))));
                        } catch (J$e) {
                            J$.Ex(3347073, J$e);
                        } finally {
                            if (J$.Fr(3347081))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dnssecTimestamp(date) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3344153, arguments.callee, this, arguments);
                            arguments = J$.N(3344161, 'arguments', arguments, true, false, false);
                            date = J$.N(3344169, 'date', date, true, false, false);
                            J$.N(3344177, 'year', year, false, false, false);
                            J$.N(3344185, 'month', month, false, false, false);
                            J$.N(3344193, 'timestampStr', timestampStr, false, false, false);
                            var year = J$.W(3343969, 'year', J$.B(446242, '+', J$.M(3343953, J$.R(3343945, 'date', date, false, false), 'getFullYear', false)(), J$.T(3343961, '', 21, false)), year, false, false);
                            var month = J$.W(3344001, 'month', J$.B(446250, '+', J$.M(3343985, J$.R(3343977, 'date', date, false, false), 'getMonth', false)(), J$.T(3343993, 1, 22, false)), month, false, false);
                            var timestampStr = J$.W(3344041, 'timestampStr', J$.B(446266, '+', J$.B(446258, '+', J$.R(3344009, 'year', year, false, false), J$.R(3344017, 'month', month, false, false)), J$.M(3344033, J$.R(3344025, 'date', date, false, false), 'getUTCDate', false)()), timestampStr, false, false);
                            timestampStr = J$.W(3344097, 'timestampStr', J$.B(446290, '+', J$.R(3344089, 'timestampStr', timestampStr, false, false), J$.B(446282, '+', J$.B(446274, '+', J$.T(3344049, '', 21, false), J$.M(3344065, J$.R(3344057, 'date', date, false, false), 'getUTCHours', false)()), J$.M(3344081, J$.R(3344073, 'date', date, false, false), 'getUTCMinutes', false)())), timestampStr, false, false);
                            timestampStr = J$.W(3344129, 'timestampStr', J$.B(446298, '+', J$.R(3344121, 'timestampStr', timestampStr, false, false), J$.M(3344113, J$.R(3344105, 'date', date, false, false), 'getUTCSeconds', false)()), timestampStr, false, false);
                            return J$.Rt(3344145, J$.R(3344137, 'timestampStr', timestampStr, false, false));
                        } catch (J$e) {
                            J$.Ex(3347089, J$e);
                        } finally {
                            if (J$.Fr(3347097))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function rsaAlgFromOptions(opts) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3344385, arguments.callee, this, arguments);
                            arguments = J$.N(3344393, 'arguments', arguments, true, false, false);
                            opts = J$.N(3344401, 'opts', opts, true, false, false);
                            if (J$.C(155824, J$.C(155800, J$.C(155792, J$.U(446306, '!', J$.R(3344201, 'opts', opts, false, false))) ? J$._() : J$.U(446314, '!', J$.G(3344217, J$.R(3344209, 'opts', opts, false, false), 'hashAlgo'))) ? J$._() : J$.B(446322, '===', J$.G(3344233, J$.R(3344225, 'opts', opts, false, false), 'hashAlgo'), J$.T(3344241, 'sha1', 21, false))))
                                return J$.Rt(3344257, J$.T(3344249, '5 (RSASHA1)', 21, false));
                            else if (J$.C(155816, J$.B(446330, '===', J$.G(3344273, J$.R(3344265, 'opts', opts, false, false), 'hashAlgo'), J$.T(3344281, 'sha256', 21, false))))
                                return J$.Rt(3344297, J$.T(3344289, '8 (RSASHA256)', 21, false));
                            else if (J$.C(155808, J$.B(446338, '===', J$.G(3344313, J$.R(3344305, 'opts', opts, false, false), 'hashAlgo'), J$.T(3344321, 'sha512', 21, false))))
                                return J$.Rt(3344337, J$.T(3344329, '10 (RSASHA512)', 21, false));
                            else
                                throw J$.F(3344377, J$.I(typeof Error === 'undefined' ? Error = J$.R(3344345, 'Error', undefined, true, true) : Error = J$.R(3344345, 'Error', Error, true, true)), true)(J$.B(446346, '+', J$.T(3344353, 'Unknown or unsupported hash: ', 21, false), J$.G(3344369, J$.R(3344361, 'opts', opts, false, false), 'hashAlgo')));
                        } catch (J$e) {
                            J$.Ex(3347105, J$e);
                        } finally {
                            if (J$.Fr(3347113))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeRSA(key, options) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3345769, arguments.callee, this, arguments);
                            arguments = J$.N(3345777, 'arguments', arguments, true, false, false);
                            key = J$.N(3345785, 'key', key, true, false, false);
                            options = J$.N(3345793, 'options', options, true, false, false);
                            J$.N(3345801, 'out', out, false, false, false);
                            J$.N(3345809, 'n', n, false, false, false);
                            J$.N(3345817, 'e', e, false, false, false);
                            J$.N(3345825, 'd', d, false, false, false);
                            J$.N(3345833, 'p', p, false, false, false);
                            J$.N(3345841, 'q', q, false, false, false);
                            J$.N(3345849, 'dmodp', dmodp, false, false, false);
                            J$.N(3345857, 'dmodq', dmodq, false, false, false);
                            J$.N(3345865, 'iqmp', iqmp, false, false, false);
                            J$.N(3345873, 'timestamp', timestamp, false, false, false);
                            if (J$.C(155840, J$.C(155832, J$.U(446354, '!', J$.G(3344425, J$.G(3344417, J$.R(3344409, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(446362, '!', J$.G(3344449, J$.G(3344441, J$.R(3344433, 'key', key, false, false), 'part'), 'dmodq')))) {
                                J$.M(3344473, J$.R(3344457, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(3344465, 'key', key, false, false));
                            }
                            var out = J$.W(3344489, 'out', J$.T(3344481, '', 21, false), out, false, false);
                            out = J$.W(3344513, 'out', J$.B(446370, '+', J$.R(3344505, 'out', out, false, false), J$.T(3344497, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            out = J$.W(3344569, 'out', J$.B(446394, '+', J$.R(3344561, 'out', out, false, false), J$.B(446386, '+', J$.B(446378, '+', J$.T(3344521, 'Algorithm: ', 21, false), J$.F(3344545, J$.R(3344529, 'rsaAlgFromOptions', rsaAlgFromOptions, false, true), false)(J$.R(3344537, 'options', options, false, false))), J$.T(3344553, '\n', 21, false))), out, false, false);
                            var n = J$.W(3344633, 'n', J$.M(3344625, J$.R(3344577, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3344617, J$.G(3344609, J$.G(3344593, J$.R(3344585, 'key', key, false, false), 'part'), J$.T(3344601, 'n', 21, false)), 'data')), n, false, false);
                            out = J$.W(3344689, 'out', J$.B(446418, '+', J$.R(3344681, 'out', out, false, false), J$.B(446410, '+', J$.B(446402, '+', J$.T(3344641, 'Modulus: ', 21, false), J$.M(3344665, J$.R(3344649, 'n', n, false, false), 'toString', false)(J$.T(3344657, 'base64', 21, false))), J$.T(3344673, '\n', 21, false))), out, false, false);
                            var e = J$.W(3344753, 'e', J$.M(3344745, J$.R(3344697, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3344737, J$.G(3344729, J$.G(3344713, J$.R(3344705, 'key', key, false, false), 'part'), J$.T(3344721, 'e', 21, false)), 'data')), e, false, false);
                            out = J$.W(3344809, 'out', J$.B(446442, '+', J$.R(3344801, 'out', out, false, false), J$.B(446434, '+', J$.B(446426, '+', J$.T(3344761, 'PublicExponent: ', 21, false), J$.M(3344785, J$.R(3344769, 'e', e, false, false), 'toString', false)(J$.T(3344777, 'base64', 21, false))), J$.T(3344793, '\n', 21, false))), out, false, false);
                            var d = J$.W(3344873, 'd', J$.M(3344865, J$.R(3344817, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3344857, J$.G(3344849, J$.G(3344833, J$.R(3344825, 'key', key, false, false), 'part'), J$.T(3344841, 'd', 21, false)), 'data')), d, false, false);
                            out = J$.W(3344929, 'out', J$.B(446466, '+', J$.R(3344921, 'out', out, false, false), J$.B(446458, '+', J$.B(446450, '+', J$.T(3344881, 'PrivateExponent: ', 21, false), J$.M(3344905, J$.R(3344889, 'd', d, false, false), 'toString', false)(J$.T(3344897, 'base64', 21, false))), J$.T(3344913, '\n', 21, false))), out, false, false);
                            var p = J$.W(3344993, 'p', J$.M(3344985, J$.R(3344937, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3344977, J$.G(3344969, J$.G(3344953, J$.R(3344945, 'key', key, false, false), 'part'), J$.T(3344961, 'p', 21, false)), 'data')), p, false, false);
                            out = J$.W(3345049, 'out', J$.B(446490, '+', J$.R(3345041, 'out', out, false, false), J$.B(446482, '+', J$.B(446474, '+', J$.T(3345001, 'Prime1: ', 21, false), J$.M(3345025, J$.R(3345009, 'p', p, false, false), 'toString', false)(J$.T(3345017, 'base64', 21, false))), J$.T(3345033, '\n', 21, false))), out, false, false);
                            var q = J$.W(3345113, 'q', J$.M(3345105, J$.R(3345057, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3345097, J$.G(3345089, J$.G(3345073, J$.R(3345065, 'key', key, false, false), 'part'), J$.T(3345081, 'q', 21, false)), 'data')), q, false, false);
                            out = J$.W(3345169, 'out', J$.B(446514, '+', J$.R(3345161, 'out', out, false, false), J$.B(446506, '+', J$.B(446498, '+', J$.T(3345121, 'Prime2: ', 21, false), J$.M(3345145, J$.R(3345129, 'q', q, false, false), 'toString', false)(J$.T(3345137, 'base64', 21, false))), J$.T(3345153, '\n', 21, false))), out, false, false);
                            var dmodp = J$.W(3345233, 'dmodp', J$.M(3345225, J$.R(3345177, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3345217, J$.G(3345209, J$.G(3345193, J$.R(3345185, 'key', key, false, false), 'part'), J$.T(3345201, 'dmodp', 21, false)), 'data')), dmodp, false, false);
                            out = J$.W(3345289, 'out', J$.B(446538, '+', J$.R(3345281, 'out', out, false, false), J$.B(446530, '+', J$.B(446522, '+', J$.T(3345241, 'Exponent1: ', 21, false), J$.M(3345265, J$.R(3345249, 'dmodp', dmodp, false, false), 'toString', false)(J$.T(3345257, 'base64', 21, false))), J$.T(3345273, '\n', 21, false))), out, false, false);
                            var dmodq = J$.W(3345353, 'dmodq', J$.M(3345345, J$.R(3345297, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3345337, J$.G(3345329, J$.G(3345313, J$.R(3345305, 'key', key, false, false), 'part'), J$.T(3345321, 'dmodq', 21, false)), 'data')), dmodq, false, false);
                            out = J$.W(3345409, 'out', J$.B(446562, '+', J$.R(3345401, 'out', out, false, false), J$.B(446554, '+', J$.B(446546, '+', J$.T(3345361, 'Exponent2: ', 21, false), J$.M(3345385, J$.R(3345369, 'dmodq', dmodq, false, false), 'toString', false)(J$.T(3345377, 'base64', 21, false))), J$.T(3345393, '\n', 21, false))), out, false, false);
                            var iqmp = J$.W(3345473, 'iqmp', J$.M(3345465, J$.R(3345417, 'utils', utils, false, true), 'mpDenormalize', false)(J$.G(3345457, J$.G(3345449, J$.G(3345433, J$.R(3345425, 'key', key, false, false), 'part'), J$.T(3345441, 'iqmp', 21, false)), 'data')), iqmp, false, false);
                            out = J$.W(3345529, 'out', J$.B(446586, '+', J$.R(3345521, 'out', out, false, false), J$.B(446578, '+', J$.B(446570, '+', J$.T(3345481, 'Coefficient: ', 21, false), J$.M(3345505, J$.R(3345489, 'iqmp', iqmp, false, false), 'toString', false)(J$.T(3345497, 'base64', 21, false))), J$.T(3345513, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(3345553, 'timestamp', J$.F(3345545, J$.I(typeof Date === 'undefined' ? Date = J$.R(3345537, 'Date', undefined, true, true) : Date = J$.R(3345537, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(3345609, 'out', J$.B(446610, '+', J$.R(3345601, 'out', out, false, false), J$.B(446602, '+', J$.B(446594, '+', J$.T(3345561, 'Created: ', 21, false), J$.F(3345585, J$.R(3345569, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3345577, 'timestamp', timestamp, false, false))), J$.T(3345593, '\n', 21, false))), out, false, false);
                            out = J$.W(3345665, 'out', J$.B(446634, '+', J$.R(3345657, 'out', out, false, false), J$.B(446626, '+', J$.B(446618, '+', J$.T(3345617, 'Publish: ', 21, false), J$.F(3345641, J$.R(3345625, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3345633, 'timestamp', timestamp, false, false))), J$.T(3345649, '\n', 21, false))), out, false, false);
                            out = J$.W(3345721, 'out', J$.B(446658, '+', J$.R(3345713, 'out', out, false, false), J$.B(446650, '+', J$.B(446642, '+', J$.T(3345673, 'Activate: ', 21, false), J$.F(3345697, J$.R(3345681, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3345689, 'timestamp', timestamp, false, false))), J$.T(3345705, '\n', 21, false))), out, false, false);
                            return J$.Rt(3345761, J$.M(3345753, J$.R(3345729, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3345737, 'out', out, false, false), J$.T(3345745, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3347121, J$e);
                        } finally {
                            if (J$.Fr(3347129))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writeECDSA(key, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3346377, arguments.callee, this, arguments);
                            arguments = J$.N(3346385, 'arguments', arguments, true, false, false);
                            key = J$.N(3346393, 'key', key, true, false, false);
                            options = J$.N(3346401, 'options', options, true, false, false);
                            J$.N(3346409, 'out', out, false, false, false);
                            J$.N(3346417, 'base64Key', base64Key, false, false, false);
                            J$.N(3346425, 'timestamp', timestamp, false, false, false);
                            var out = J$.W(3345889, 'out', J$.T(3345881, '', 21, false), out, false, false);
                            out = J$.W(3345913, 'out', J$.B(446666, '+', J$.R(3345905, 'out', out, false, false), J$.T(3345897, 'Private-key-format: v1.3\n', 21, false)), out, false, false);
                            if (J$.C(155856, J$.B(446674, '===', J$.G(3345929, J$.R(3345921, 'key', key, false, false), 'curve'), J$.T(3345937, 'nistp256', 21, false)))) {
                                out = J$.W(3345961, 'out', J$.B(446682, '+', J$.R(3345953, 'out', out, false, false), J$.T(3345945, 'Algorithm: 13 (ECDSAP256SHA256)\n', 21, false)), out, false, false);
                            } else if (J$.C(155848, J$.B(446690, '===', J$.G(3345977, J$.R(3345969, 'key', key, false, false), 'curve'), J$.T(3345985, 'nistp384', 21, false)))) {
                                out = J$.W(3346009, 'out', J$.B(446698, '+', J$.R(3346001, 'out', out, false, false), J$.T(3345993, 'Algorithm: 14 (ECDSAP384SHA384)\n', 21, false)), out, false, false);
                            } else {
                                throw J$.F(3346033, J$.I(typeof Error === 'undefined' ? Error = J$.R(3346017, 'Error', undefined, true, true) : Error = J$.R(3346017, 'Error', Error, true, true)), true)(J$.T(3346025, 'Unsupported curve', 21, false));
                            }
                            var base64Key = J$.W(3346097, 'base64Key', J$.M(3346089, J$.G(3346073, J$.G(3346065, J$.G(3346049, J$.R(3346041, 'key', key, false, false), 'part'), J$.T(3346057, 'd', 21, false)), 'data'), 'toString', false)(J$.T(3346081, 'base64', 21, false)), base64Key, false, false);
                            out = J$.W(3346137, 'out', J$.B(446722, '+', J$.R(3346129, 'out', out, false, false), J$.B(446714, '+', J$.B(446706, '+', J$.T(3346105, 'PrivateKey: ', 21, false), J$.R(3346113, 'base64Key', base64Key, false, false)), J$.T(3346121, '\n', 21, false))), out, false, false);
                            var timestamp = J$.W(3346161, 'timestamp', J$.F(3346153, J$.I(typeof Date === 'undefined' ? Date = J$.R(3346145, 'Date', undefined, true, true) : Date = J$.R(3346145, 'Date', Date, true, true)), true)(), timestamp, false, false);
                            out = J$.W(3346217, 'out', J$.B(446746, '+', J$.R(3346209, 'out', out, false, false), J$.B(446738, '+', J$.B(446730, '+', J$.T(3346169, 'Created: ', 21, false), J$.F(3346193, J$.R(3346177, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3346185, 'timestamp', timestamp, false, false))), J$.T(3346201, '\n', 21, false))), out, false, false);
                            out = J$.W(3346273, 'out', J$.B(446770, '+', J$.R(3346265, 'out', out, false, false), J$.B(446762, '+', J$.B(446754, '+', J$.T(3346225, 'Publish: ', 21, false), J$.F(3346249, J$.R(3346233, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3346241, 'timestamp', timestamp, false, false))), J$.T(3346257, '\n', 21, false))), out, false, false);
                            out = J$.W(3346329, 'out', J$.B(446794, '+', J$.R(3346321, 'out', out, false, false), J$.B(446786, '+', J$.B(446778, '+', J$.T(3346281, 'Activate: ', 21, false), J$.F(3346305, J$.R(3346289, 'dnssecTimestamp', dnssecTimestamp, false, true), false)(J$.R(3346297, 'timestamp', timestamp, false, false))), J$.T(3346313, '\n', 21, false))), out, false, false);
                            return J$.Rt(3346369, J$.M(3346361, J$.R(3346337, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3346345, 'out', out, false, false), J$.T(3346353, 'ascii', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3347137, J$e);
                        } finally {
                            if (J$.Fr(3347145))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(3346705, arguments.callee, this, arguments);
                            arguments = J$.N(3346713, 'arguments', arguments, true, false, false);
                            key = J$.N(3346721, 'key', key, true, false, false);
                            options = J$.N(3346729, 'options', options, true, false, false);
                            if (J$.C(155888, J$.M(3346449, J$.R(3346433, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3346441, 'key', key, false, false)))) {
                                if (J$.C(155872, J$.B(446802, '===', J$.G(3346465, J$.R(3346457, 'key', key, false, false), 'type'), J$.T(3346473, 'rsa', 21, false)))) {
                                    return J$.Rt(3346513, J$.F(3346505, J$.R(3346481, 'writeRSA', writeRSA, false, true), false)(J$.R(3346489, 'key', key, false, false), J$.R(3346497, 'options', options, false, false)));
                                } else if (J$.C(155864, J$.B(446810, '===', J$.G(3346529, J$.R(3346521, 'key', key, false, false), 'type'), J$.T(3346537, 'ecdsa', 21, false)))) {
                                    return J$.Rt(3346577, J$.F(3346569, J$.R(3346545, 'writeECDSA', writeECDSA, false, true), false)(J$.R(3346553, 'key', key, false, false), J$.R(3346561, 'options', options, false, false)));
                                } else {
                                    throw J$.F(3346617, J$.I(typeof Error === 'undefined' ? Error = J$.R(3346585, 'Error', undefined, true, true) : Error = J$.R(3346585, 'Error', Error, true, true)), true)(J$.B(446818, '+', J$.T(3346593, 'Unsupported algorithm: ', 21, false), J$.G(3346609, J$.R(3346601, 'key', key, false, false), 'type')));
                                }
                            } else if (J$.C(155880, J$.M(3346641, J$.R(3346625, 'Key', Key, false, true), 'isKey', false)(J$.R(3346633, 'key', key, false, false)))) {
                                throw J$.F(3346673, J$.I(typeof Error === 'undefined' ? Error = J$.R(3346649, 'Error', undefined, true, true) : Error = J$.R(3346649, 'Error', Error, true, true)), true)(J$.B(446826, '+', J$.T(3346657, 'Format "dnssec" only supports ', 21, false), J$.T(3346665, 'writing private keys', 21, false)));
                            } else {
                                throw J$.F(3346697, J$.I(typeof Error === 'undefined' ? Error = J$.R(3346681, 'Error', undefined, true, true) : Error = J$.R(3346681, 'Error', Error, true, true)), true)(J$.T(3346689, 'key is not a Key or PrivateKey', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3347153, J$e);
                        } finally {
                            if (J$.Fr(3347161))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3346745, 'assert', assert, false, false, false);
            J$.N(3346753, 'Buffer', Buffer, false, false, false);
            J$.N(3346761, 'Key', Key, false, false, false);
            J$.N(3346769, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3346777, 'utils', utils, false, false, false);
            J$.N(3346785, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(3346793, 'Dhe', Dhe, false, false, false);
            J$.N(3346801, 'supportedAlgos', supportedAlgos, false, false, false);
            J$.N(3346809, 'supportedAlgosById', supportedAlgosById, false, false, false);
            read = J$.N(3346825, 'read', J$.T(3346817, read, 12, false), true, false, false);
            readRFC3110 = J$.N(3346841, 'readRFC3110', J$.T(3346833, readRFC3110, 12, false), true, false, false);
            elementToBuf = J$.N(3346857, 'elementToBuf', J$.T(3346849, elementToBuf, 12, false), true, false, false);
            readDNSSECRSAPrivateKey = J$.N(3346873, 'readDNSSECRSAPrivateKey', J$.T(3346865, readDNSSECRSAPrivateKey, 12, false), true, false, false);
            readDNSSECPrivateKey = J$.N(3346889, 'readDNSSECPrivateKey', J$.T(3346881, readDNSSECPrivateKey, 12, false), true, false, false);
            dnssecTimestamp = J$.N(3346905, 'dnssecTimestamp', J$.T(3346897, dnssecTimestamp, 12, false), true, false, false);
            rsaAlgFromOptions = J$.N(3346921, 'rsaAlgFromOptions', J$.T(3346913, rsaAlgFromOptions, 12, false), true, false, false);
            writeRSA = J$.N(3346937, 'writeRSA', J$.T(3346929, writeRSA, 12, false), true, false, false);
            writeECDSA = J$.N(3346953, 'writeECDSA', J$.T(3346945, writeECDSA, 12, false), true, false, false);
            write = J$.N(3346969, 'write', J$.T(3346961, write, 12, false), true, false, false);
            J$.T(3339081, 'use strict', 21, false);
            J$.F(3339105, J$.I(typeof require === 'undefined' ? require = J$.R(3339089, 'require', undefined, true, true) : require = J$.R(3339089, 'require', require, true, true)), false)(J$.T(3339097, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3339129, J$.I(typeof require === 'undefined' ? require = J$.R(3339113, 'require', undefined, true, true) : require = J$.R(3339113, 'require', require, true, true)), false)(J$.T(3339121, 'core-js/modules/es.array.join', 21, false));
            J$.F(3339153, J$.I(typeof require === 'undefined' ? require = J$.R(3339137, 'require', undefined, true, true) : require = J$.R(3339137, 'require', require, true, true)), false)(J$.T(3339145, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3339177, J$.I(typeof require === 'undefined' ? require = J$.R(3339161, 'require', undefined, true, true) : require = J$.R(3339161, 'require', require, true, true)), false)(J$.T(3339169, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3339201, J$.I(typeof require === 'undefined' ? require = J$.R(3339185, 'require', undefined, true, true) : require = J$.R(3339185, 'require', require, true, true)), false)(J$.T(3339193, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3339225, J$.I(typeof require === 'undefined' ? require = J$.R(3339209, 'require', undefined, true, true) : require = J$.R(3339209, 'require', require, true, true)), false)(J$.T(3339217, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3339249, J$.I(typeof require === 'undefined' ? require = J$.R(3339233, 'require', undefined, true, true) : require = J$.R(3339233, 'require', require, true, true)), false)(J$.T(3339241, 'core-js/modules/es.parse-int', 21, false));
            J$.F(3339273, J$.I(typeof require === 'undefined' ? require = J$.R(3339257, 'require', undefined, true, true) : require = J$.R(3339257, 'require', require, true, true)), false)(J$.T(3339265, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3339297, J$.I(typeof require === 'undefined' ? require = J$.R(3339281, 'require', undefined, true, true) : require = J$.R(3339281, 'require', require, true, true)), false)(J$.T(3339289, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3339321, J$.I(typeof require === 'undefined' ? require = J$.R(3339305, 'require', undefined, true, true) : require = J$.R(3339305, 'require', require, true, true)), false)(J$.T(3339313, 'core-js/modules/es.string.match', 21, false));
            J$.F(3339345, J$.I(typeof require === 'undefined' ? require = J$.R(3339329, 'require', undefined, true, true) : require = J$.R(3339329, 'require', require, true, true)), false)(J$.T(3339337, 'core-js/modules/es.string.split', 21, false));
            J$.F(3339369, J$.I(typeof require === 'undefined' ? require = J$.R(3339353, 'require', undefined, true, true) : require = J$.R(3339353, 'require', require, true, true)), false)(J$.T(3339361, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.P(3339409, J$.I(typeof module === 'undefined' ? module = J$.R(3339377, 'module', undefined, true, true) : module = J$.R(3339377, 'module', module, true, true)), 'exports', J$.T(3339401, {
                read: J$.R(3339385, 'read', read, false, true),
                write: J$.R(3339393, 'write', write, false, true)
            }, 11, false));
            var assert = J$.W(3339441, 'assert', J$.F(3339433, J$.I(typeof require === 'undefined' ? require = J$.R(3339417, 'require', undefined, true, true) : require = J$.R(3339417, 'require', require, true, true)), false)(J$.T(3339425, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3339481, 'Buffer', J$.G(3339473, J$.F(3339465, J$.I(typeof require === 'undefined' ? require = J$.R(3339449, 'require', undefined, true, true) : require = J$.R(3339449, 'require', require, true, true)), false)(J$.T(3339457, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var Key = J$.W(3339513, 'Key', J$.F(3339505, J$.I(typeof require === 'undefined' ? require = J$.R(3339489, 'require', undefined, true, true) : require = J$.R(3339489, 'require', require, true, true)), false)(J$.T(3339497, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3339545, 'PrivateKey', J$.F(3339537, J$.I(typeof require === 'undefined' ? require = J$.R(3339521, 'require', undefined, true, true) : require = J$.R(3339521, 'require', require, true, true)), false)(J$.T(3339529, '../private-key', 21, false)), PrivateKey, false, true);
            var utils = J$.W(3339577, 'utils', J$.F(3339569, J$.I(typeof require === 'undefined' ? require = J$.R(3339553, 'require', undefined, true, true) : require = J$.R(3339553, 'require', require, true, true)), false)(J$.T(3339561, '../utils', 21, false)), utils, false, true);
            var SSHBuffer = J$.W(3339609, 'SSHBuffer', J$.F(3339601, J$.I(typeof require === 'undefined' ? require = J$.R(3339585, 'require', undefined, true, true) : require = J$.R(3339585, 'require', require, true, true)), false)(J$.T(3339593, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var Dhe = J$.W(3339641, 'Dhe', J$.F(3339633, J$.I(typeof require === 'undefined' ? require = J$.R(3339617, 'require', undefined, true, true) : require = J$.R(3339617, 'require', require, true, true)), false)(J$.T(3339625, '../dhe', 21, false)), Dhe, false, true);
            var supportedAlgos = J$.W(3339697, 'supportedAlgos', J$.T(3339689, {
                'rsa-sha1': J$.T(3339649, 5, 22, false),
                'rsa-sha256': J$.T(3339657, 8, 22, false),
                'rsa-sha512': J$.T(3339665, 10, 22, false),
                'ecdsa-p256-sha256': J$.T(3339673, 13, 22, false),
                'ecdsa-p384-sha384': J$.T(3339681, 14, 22, false)
            }, 11, false), supportedAlgos, false, true);
            var supportedAlgosById = J$.W(3339713, 'supportedAlgosById', J$.T(3339705, {}, 11, false), supportedAlgosById, false, true);
            J$.M(3339833, J$.M(3339737, J$.I(typeof Object === 'undefined' ? Object = J$.R(3339721, 'Object', undefined, true, true) : Object = J$.R(3339721, 'Object', Object, true, true)), 'keys', false)(J$.R(3339729, 'supportedAlgos', supportedAlgos, false, true)), 'forEach', false)(J$.T(3339825, function (k) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3339801, arguments.callee, this, arguments);
                            arguments = J$.N(3339809, 'arguments', arguments, true, false, false);
                            k = J$.N(3339817, 'k', k, true, false, false);
                            J$.P(3339793, J$.R(3339745, 'supportedAlgosById', supportedAlgosById, false, true), J$.G(3339769, J$.R(3339753, 'supportedAlgos', supportedAlgos, false, true), J$.R(3339761, 'k', k, false, false)), J$.M(3339785, J$.R(3339777, 'k', k, false, false), 'toUpperCase', false)());
                        } catch (J$e) {
                            J$.Ex(3346977, J$e);
                        } finally {
                            if (J$.Fr(3346985))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3347169, J$e);
        } finally {
            if (J$.Sr(3347177))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

