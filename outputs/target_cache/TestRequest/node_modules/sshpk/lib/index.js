J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(3433753, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/index.js');
            J$.N(3433761, 'Key', Key, false, false, false);
            J$.N(3433769, 'Fingerprint', Fingerprint, false, false, false);
            J$.N(3433777, 'Signature', Signature, false, false, false);
            J$.N(3433785, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3433793, 'Certificate', Certificate, false, false, false);
            J$.N(3433801, 'Identity', Identity, false, false, false);
            J$.N(3433809, 'errs', errs, false, false, false);
            J$.T(3433145, 'use strict', 21, false);
            var Key = J$.W(3433177, 'Key', J$.F(3433169, J$.I(typeof require === 'undefined' ? require = J$.R(3433153, 'require', undefined, true, true) : require = J$.R(3433153, 'require', require, true, true)), false)(J$.T(3433161, './key', 21, false)), Key, false, true);
            var Fingerprint = J$.W(3433209, 'Fingerprint', J$.F(3433201, J$.I(typeof require === 'undefined' ? require = J$.R(3433185, 'require', undefined, true, true) : require = J$.R(3433185, 'require', require, true, true)), false)(J$.T(3433193, './fingerprint', 21, false)), Fingerprint, false, true);
            var Signature = J$.W(3433241, 'Signature', J$.F(3433233, J$.I(typeof require === 'undefined' ? require = J$.R(3433217, 'require', undefined, true, true) : require = J$.R(3433217, 'require', require, true, true)), false)(J$.T(3433225, './signature', 21, false)), Signature, false, true);
            var PrivateKey = J$.W(3433273, 'PrivateKey', J$.F(3433265, J$.I(typeof require === 'undefined' ? require = J$.R(3433249, 'require', undefined, true, true) : require = J$.R(3433249, 'require', require, true, true)), false)(J$.T(3433257, './private-key', 21, false)), PrivateKey, false, true);
            var Certificate = J$.W(3433305, 'Certificate', J$.F(3433297, J$.I(typeof require === 'undefined' ? require = J$.R(3433281, 'require', undefined, true, true) : require = J$.R(3433281, 'require', require, true, true)), false)(J$.T(3433289, './certificate', 21, false)), Certificate, false, true);
            var Identity = J$.W(3433337, 'Identity', J$.F(3433329, J$.I(typeof require === 'undefined' ? require = J$.R(3433313, 'require', undefined, true, true) : require = J$.R(3433313, 'require', require, true, true)), false)(J$.T(3433321, './identity', 21, false)), Identity, false, true);
            var errs = J$.W(3433369, 'errs', J$.F(3433361, J$.I(typeof require === 'undefined' ? require = J$.R(3433345, 'require', undefined, true, true) : require = J$.R(3433345, 'require', require, true, true)), false)(J$.T(3433353, './errors', 21, false)), errs, false, true);
            J$.P(3433745, J$.I(typeof module === 'undefined' ? module = J$.R(3433377, 'module', undefined, true, true) : module = J$.R(3433377, 'module', module, true, true)), 'exports', J$.T(3433737, {
                Key: J$.R(3433385, 'Key', Key, false, true),
                parseKey: J$.G(3433401, J$.R(3433393, 'Key', Key, false, true), 'parse'),
                Fingerprint: J$.R(3433409, 'Fingerprint', Fingerprint, false, true),
                parseFingerprint: J$.G(3433425, J$.R(3433417, 'Fingerprint', Fingerprint, false, true), 'parse'),
                Signature: J$.R(3433433, 'Signature', Signature, false, true),
                parseSignature: J$.G(3433449, J$.R(3433441, 'Signature', Signature, false, true), 'parse'),
                PrivateKey: J$.R(3433457, 'PrivateKey', PrivateKey, false, true),
                parsePrivateKey: J$.G(3433473, J$.R(3433465, 'PrivateKey', PrivateKey, false, true), 'parse'),
                generatePrivateKey: J$.G(3433489, J$.R(3433481, 'PrivateKey', PrivateKey, false, true), 'generate'),
                Certificate: J$.R(3433497, 'Certificate', Certificate, false, true),
                parseCertificate: J$.G(3433513, J$.R(3433505, 'Certificate', Certificate, false, true), 'parse'),
                createSelfSignedCertificate: J$.G(3433529, J$.R(3433521, 'Certificate', Certificate, false, true), 'createSelfSigned'),
                createCertificate: J$.G(3433545, J$.R(3433537, 'Certificate', Certificate, false, true), 'create'),
                Identity: J$.R(3433553, 'Identity', Identity, false, true),
                identityFromDN: J$.G(3433569, J$.R(3433561, 'Identity', Identity, false, true), 'parseDN'),
                identityForHost: J$.G(3433585, J$.R(3433577, 'Identity', Identity, false, true), 'forHost'),
                identityForUser: J$.G(3433601, J$.R(3433593, 'Identity', Identity, false, true), 'forUser'),
                identityForEmail: J$.G(3433617, J$.R(3433609, 'Identity', Identity, false, true), 'forEmail'),
                identityFromArray: J$.G(3433633, J$.R(3433625, 'Identity', Identity, false, true), 'fromArray'),
                FingerprintFormatError: J$.G(3433649, J$.R(3433641, 'errs', errs, false, true), 'FingerprintFormatError'),
                InvalidAlgorithmError: J$.G(3433665, J$.R(3433657, 'errs', errs, false, true), 'InvalidAlgorithmError'),
                KeyParseError: J$.G(3433681, J$.R(3433673, 'errs', errs, false, true), 'KeyParseError'),
                SignatureParseError: J$.G(3433697, J$.R(3433689, 'errs', errs, false, true), 'SignatureParseError'),
                KeyEncryptedError: J$.G(3433713, J$.R(3433705, 'errs', errs, false, true), 'KeyEncryptedError'),
                CertificateParseError: J$.G(3433729, J$.R(3433721, 'errs', errs, false, true), 'CertificateParseError')
            }, 11, false));
        } catch (J$e) {
            J$.Ex(3433817, J$e);
        } finally {
            if (J$.Sr(3433825))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

