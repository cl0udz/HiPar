J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(3330377, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/sshpk/lib/errors.js');
            function FingerprintFormatError(fp, format) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3328929, arguments.callee, this, arguments);
                            arguments = J$.N(3328937, 'arguments', arguments, true, false, false);
                            fp = J$.N(3328945, 'fp', fp, true, false, false);
                            format = J$.N(3328953, 'format', format, true, false, false);
                            if (J$.C(154872, J$.G(3328697, J$.I(typeof Error === 'undefined' ? Error = J$.R(3328689, 'Error', undefined, true, true) : Error = J$.R(3328689, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3328729, J$.I(typeof Error === 'undefined' ? Error = J$.R(3328705, 'Error', undefined, true, true) : Error = J$.R(3328705, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3328713, 'this', this, false, false), J$.R(3328721, 'FingerprintFormatError', FingerprintFormatError, false, true));
                            J$.P(3328753, J$.R(3328737, 'this', this, false, false), 'name', J$.T(3328745, 'FingerprintFormatError', 21, false));
                            J$.P(3328777, J$.R(3328761, 'this', this, false, false), 'fingerprint', J$.R(3328769, 'fp', fp, false, false));
                            J$.P(3328801, J$.R(3328785, 'this', this, false, false), 'format', J$.R(3328793, 'format', format, false, false));
                            J$.P(3328825, J$.R(3328809, 'this', this, false, false), 'message', J$.T(3328817, 'Fingerprint format is not supported, or is invalid: ', 21, false));
                            if (J$.C(154880, J$.B(445098, '!==', J$.R(3328833, 'fp', fp, false, false), J$.T(3328841, undefined, 24, false))))
                                J$.A(3328873, J$.R(3328849, 'this', this, false, false), 'message', '+')(J$.B(445106, '+', J$.T(3328857, ' fingerprint = ', 21, false), J$.R(3328865, 'fp', fp, false, false)));
                            if (J$.C(154888, J$.B(445114, '!==', J$.R(3328881, 'format', format, false, false), J$.T(3328889, undefined, 24, false))))
                                J$.A(3328921, J$.R(3328897, 'this', this, false, false), 'message', '+')(J$.B(445122, '+', J$.T(3328905, ' format = ', 21, false), J$.R(3328913, 'format', format, false, false)));
                        } catch (J$e) {
                            J$.Ex(3330497, J$e);
                        } finally {
                            if (J$.Fr(3330505))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function InvalidAlgorithmError(alg) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3329129, arguments.callee, this, arguments);
                            arguments = J$.N(3329137, 'arguments', arguments, true, false, false);
                            alg = J$.N(3329145, 'alg', alg, true, false, false);
                            if (J$.C(154896, J$.G(3329001, J$.I(typeof Error === 'undefined' ? Error = J$.R(3328993, 'Error', undefined, true, true) : Error = J$.R(3328993, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3329033, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329009, 'Error', undefined, true, true) : Error = J$.R(3329009, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3329017, 'this', this, false, false), J$.R(3329025, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true));
                            J$.P(3329057, J$.R(3329041, 'this', this, false, false), 'name', J$.T(3329049, 'InvalidAlgorithmError', 21, false));
                            J$.P(3329081, J$.R(3329065, 'this', this, false, false), 'algorithm', J$.R(3329073, 'alg', alg, false, false));
                            J$.P(3329121, J$.R(3329089, 'this', this, false, false), 'message', J$.B(445138, '+', J$.B(445130, '+', J$.T(3329097, 'Algorithm "', 21, false), J$.R(3329105, 'alg', alg, false, false)), J$.T(3329113, '" is not supported', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3330513, J$e);
                        } finally {
                            if (J$.Fr(3330521))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyParseError(name, format, innerErr) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3329401, arguments.callee, this, arguments);
                            arguments = J$.N(3329409, 'arguments', arguments, true, false, false);
                            name = J$.N(3329417, 'name', name, true, false, false);
                            format = J$.N(3329425, 'format', format, true, false, false);
                            innerErr = J$.N(3329433, 'innerErr', innerErr, true, false, false);
                            if (J$.C(154904, J$.G(3329193, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329185, 'Error', undefined, true, true) : Error = J$.R(3329185, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3329225, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329201, 'Error', undefined, true, true) : Error = J$.R(3329201, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3329209, 'this', this, false, false), J$.R(3329217, 'KeyParseError', KeyParseError, false, true));
                            J$.P(3329249, J$.R(3329233, 'this', this, false, false), 'name', J$.T(3329241, 'KeyParseError', 21, false));
                            J$.P(3329273, J$.R(3329257, 'this', this, false, false), 'format', J$.R(3329265, 'format', format, false, false));
                            J$.P(3329297, J$.R(3329281, 'this', this, false, false), 'keyName', J$.R(3329289, 'name', name, false, false));
                            J$.P(3329321, J$.R(3329305, 'this', this, false, false), 'innerErr', J$.R(3329313, 'innerErr', innerErr, false, false));
                            J$.P(3329393, J$.R(3329329, 'this', this, false, false), 'message', J$.B(445178, '+', J$.B(445170, '+', J$.B(445162, '+', J$.B(445154, '+', J$.B(445146, '+', J$.T(3329337, 'Failed to parse ', 21, false), J$.R(3329345, 'name', name, false, false)), J$.T(3329353, ' as a valid ', 21, false)), J$.R(3329361, 'format', format, false, false)), J$.T(3329369, ' format key: ', 21, false)), J$.G(3329385, J$.R(3329377, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(3330529, J$e);
                        } finally {
                            if (J$.Fr(3330537))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SignatureParseError(type, format, innerErr) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3329689, arguments.callee, this, arguments);
                            arguments = J$.N(3329697, 'arguments', arguments, true, false, false);
                            type = J$.N(3329705, 'type', type, true, false, false);
                            format = J$.N(3329713, 'format', format, true, false, false);
                            innerErr = J$.N(3329721, 'innerErr', innerErr, true, false, false);
                            if (J$.C(154912, J$.G(3329481, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329473, 'Error', undefined, true, true) : Error = J$.R(3329473, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3329513, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329489, 'Error', undefined, true, true) : Error = J$.R(3329489, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3329497, 'this', this, false, false), J$.R(3329505, 'SignatureParseError', SignatureParseError, false, true));
                            J$.P(3329537, J$.R(3329521, 'this', this, false, false), 'name', J$.T(3329529, 'SignatureParseError', 21, false));
                            J$.P(3329561, J$.R(3329545, 'this', this, false, false), 'type', J$.R(3329553, 'type', type, false, false));
                            J$.P(3329585, J$.R(3329569, 'this', this, false, false), 'format', J$.R(3329577, 'format', format, false, false));
                            J$.P(3329609, J$.R(3329593, 'this', this, false, false), 'innerErr', J$.R(3329601, 'innerErr', innerErr, false, false));
                            J$.P(3329681, J$.R(3329617, 'this', this, false, false), 'message', J$.B(445218, '+', J$.B(445210, '+', J$.B(445202, '+', J$.B(445194, '+', J$.B(445186, '+', J$.T(3329625, 'Failed to parse the given data as a ', 21, false), J$.R(3329633, 'type', type, false, false)), J$.T(3329641, ' signature in ', 21, false)), J$.R(3329649, 'format', format, false, false)), J$.T(3329657, ' format: ', 21, false)), J$.G(3329673, J$.R(3329665, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(3330545, J$e);
                        } finally {
                            if (J$.Fr(3330553))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function CertificateParseError(name, format, innerErr) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3329977, arguments.callee, this, arguments);
                            arguments = J$.N(3329985, 'arguments', arguments, true, false, false);
                            name = J$.N(3329993, 'name', name, true, false, false);
                            format = J$.N(3330001, 'format', format, true, false, false);
                            innerErr = J$.N(3330009, 'innerErr', innerErr, true, false, false);
                            if (J$.C(154920, J$.G(3329769, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329761, 'Error', undefined, true, true) : Error = J$.R(3329761, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3329801, J$.I(typeof Error === 'undefined' ? Error = J$.R(3329777, 'Error', undefined, true, true) : Error = J$.R(3329777, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3329785, 'this', this, false, false), J$.R(3329793, 'CertificateParseError', CertificateParseError, false, true));
                            J$.P(3329825, J$.R(3329809, 'this', this, false, false), 'name', J$.T(3329817, 'CertificateParseError', 21, false));
                            J$.P(3329849, J$.R(3329833, 'this', this, false, false), 'format', J$.R(3329841, 'format', format, false, false));
                            J$.P(3329873, J$.R(3329857, 'this', this, false, false), 'certName', J$.R(3329865, 'name', name, false, false));
                            J$.P(3329897, J$.R(3329881, 'this', this, false, false), 'innerErr', J$.R(3329889, 'innerErr', innerErr, false, false));
                            J$.P(3329969, J$.R(3329905, 'this', this, false, false), 'message', J$.B(445258, '+', J$.B(445250, '+', J$.B(445242, '+', J$.B(445234, '+', J$.B(445226, '+', J$.T(3329913, 'Failed to parse ', 21, false), J$.R(3329921, 'name', name, false, false)), J$.T(3329929, ' as a valid ', 21, false)), J$.R(3329937, 'format', format, false, false)), J$.T(3329945, ' format certificate: ', 21, false)), J$.G(3329961, J$.R(3329953, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(3330561, J$e);
                        } finally {
                            if (J$.Fr(3330569))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyEncryptedError(name, format) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3330241, arguments.callee, this, arguments);
                            arguments = J$.N(3330249, 'arguments', arguments, true, false, false);
                            name = J$.N(3330257, 'name', name, true, false, false);
                            format = J$.N(3330265, 'format', format, true, false, false);
                            if (J$.C(154928, J$.G(3330057, J$.I(typeof Error === 'undefined' ? Error = J$.R(3330049, 'Error', undefined, true, true) : Error = J$.R(3330049, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(3330089, J$.I(typeof Error === 'undefined' ? Error = J$.R(3330065, 'Error', undefined, true, true) : Error = J$.R(3330065, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(3330073, 'this', this, false, false), J$.R(3330081, 'KeyEncryptedError', KeyEncryptedError, false, true));
                            J$.P(3330113, J$.R(3330097, 'this', this, false, false), 'name', J$.T(3330105, 'KeyEncryptedError', 21, false));
                            J$.P(3330137, J$.R(3330121, 'this', this, false, false), 'format', J$.R(3330129, 'format', format, false, false));
                            J$.P(3330161, J$.R(3330145, 'this', this, false, false), 'keyName', J$.R(3330153, 'name', name, false, false));
                            J$.P(3330233, J$.R(3330169, 'this', this, false, false), 'message', J$.B(445306, '+', J$.B(445298, '+', J$.B(445290, '+', J$.B(445282, '+', J$.B(445274, '+', J$.B(445266, '+', J$.T(3330177, 'The ', 21, false), J$.R(3330185, 'format', format, false, false)), J$.T(3330193, ' format key ', 21, false)), J$.R(3330201, 'name', name, false, false)), J$.T(3330209, ' is ', 21, false)), J$.T(3330217, 'encrypted (password-protected), and no passphrase was ', 21, false)), J$.T(3330225, 'provided in `options`', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3330577, J$e);
                        } finally {
                            if (J$.Fr(3330585))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3330385, 'assert', assert, false, false, false);
            J$.N(3330393, 'util', util, false, false, false);
            FingerprintFormatError = J$.N(3330409, 'FingerprintFormatError', J$.T(3330401, FingerprintFormatError, 12, false), true, false, false);
            InvalidAlgorithmError = J$.N(3330425, 'InvalidAlgorithmError', J$.T(3330417, InvalidAlgorithmError, 12, false), true, false, false);
            KeyParseError = J$.N(3330441, 'KeyParseError', J$.T(3330433, KeyParseError, 12, false), true, false, false);
            SignatureParseError = J$.N(3330457, 'SignatureParseError', J$.T(3330449, SignatureParseError, 12, false), true, false, false);
            CertificateParseError = J$.N(3330473, 'CertificateParseError', J$.T(3330465, CertificateParseError, 12, false), true, false, false);
            KeyEncryptedError = J$.N(3330489, 'KeyEncryptedError', J$.T(3330481, KeyEncryptedError, 12, false), true, false, false);
            J$.T(3328593, 'use strict', 21, false);
            J$.F(3328617, J$.I(typeof require === 'undefined' ? require = J$.R(3328601, 'require', undefined, true, true) : require = J$.R(3328601, 'require', require, true, true)), false)(J$.T(3328609, 'core-js/modules/es.function.name', 21, false));
            var assert = J$.W(3328649, 'assert', J$.F(3328641, J$.I(typeof require === 'undefined' ? require = J$.R(3328625, 'require', undefined, true, true) : require = J$.R(3328625, 'require', require, true, true)), false)(J$.T(3328633, 'assert-plus', 21, false)), assert, false, true);
            var util = J$.W(3328681, 'util', J$.F(3328673, J$.I(typeof require === 'undefined' ? require = J$.R(3328657, 'require', undefined, true, true) : require = J$.R(3328657, 'require', require, true, true)), false)(J$.T(3328665, 'util', 21, false)), util, false, true);
            J$.M(3328985, J$.R(3328961, 'util', util, false, true), 'inherits', false)(J$.R(3328969, 'FingerprintFormatError', FingerprintFormatError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3328977, 'Error', undefined, true, true) : Error = J$.R(3328977, 'Error', Error, true, true)));
            J$.M(3329177, J$.R(3329153, 'util', util, false, true), 'inherits', false)(J$.R(3329161, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3329169, 'Error', undefined, true, true) : Error = J$.R(3329169, 'Error', Error, true, true)));
            J$.M(3329465, J$.R(3329441, 'util', util, false, true), 'inherits', false)(J$.R(3329449, 'KeyParseError', KeyParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3329457, 'Error', undefined, true, true) : Error = J$.R(3329457, 'Error', Error, true, true)));
            J$.M(3329753, J$.R(3329729, 'util', util, false, true), 'inherits', false)(J$.R(3329737, 'SignatureParseError', SignatureParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3329745, 'Error', undefined, true, true) : Error = J$.R(3329745, 'Error', Error, true, true)));
            J$.M(3330041, J$.R(3330017, 'util', util, false, true), 'inherits', false)(J$.R(3330025, 'CertificateParseError', CertificateParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3330033, 'Error', undefined, true, true) : Error = J$.R(3330033, 'Error', Error, true, true)));
            J$.M(3330297, J$.R(3330273, 'util', util, false, true), 'inherits', false)(J$.R(3330281, 'KeyEncryptedError', KeyEncryptedError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(3330289, 'Error', undefined, true, true) : Error = J$.R(3330289, 'Error', Error, true, true)));
            J$.P(3330369, J$.I(typeof module === 'undefined' ? module = J$.R(3330305, 'module', undefined, true, true) : module = J$.R(3330305, 'module', module, true, true)), 'exports', J$.T(3330361, {
                FingerprintFormatError: J$.R(3330313, 'FingerprintFormatError', FingerprintFormatError, false, true),
                InvalidAlgorithmError: J$.R(3330321, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true),
                KeyParseError: J$.R(3330329, 'KeyParseError', KeyParseError, false, true),
                SignatureParseError: J$.R(3330337, 'SignatureParseError', SignatureParseError, false, true),
                KeyEncryptedError: J$.R(3330345, 'KeyEncryptedError', KeyEncryptedError, false, true),
                CertificateParseError: J$.R(3330353, 'CertificateParseError', CertificateParseError, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(3330593, J$e);
        } finally {
            if (J$.Sr(3330601))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

