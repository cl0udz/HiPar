J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(2910625, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/json-schema/test/tests.js');
            function _typeof(obj) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2908217, arguments.callee, this, arguments);
                            arguments = J$.N(2908225, 'arguments', arguments, true, false, false);
                            obj = J$.N(2908233, 'obj', obj, true, false, false);
                            if (J$.C(140912, J$.C(140872, J$.B(424090, '===', J$.U(424082, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(2907953, 'Symbol', undefined, true, true) : Symbol = J$.R(2907953, 'Symbol', Symbol, true, true))), J$.T(2907961, 'function', 21, false))) ? J$.B(424106, '===', J$.U(424098, 'typeof', J$.G(2907977, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(2907969, 'Symbol', undefined, true, true) : Symbol = J$.R(2907969, 'Symbol', Symbol, true, true)), 'iterator')), J$.T(2907985, 'symbol', 21, false)) : J$._())) {
                                _typeof = J$.W(2908041, '_typeof', J$.T(2908033, function _typeof(obj) {
                                    jalangiLabel0:
                                        while (true) {
                                            try {
                                                J$.Fe(2908009, arguments.callee, this, arguments);
                                                arguments = J$.N(2908017, 'arguments', arguments, true, false, false);
                                                obj = J$.N(2908025, 'obj', obj, true, false, false);
                                                return J$.Rt(2908001, J$.U(424114, 'typeof', J$.R(2907993, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(2910793, J$e);
                                            } finally {
                                                if (J$.Fr(2910801))
                                                    continue jalangiLabel0;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            } else {
                                _typeof = J$.W(2908177, '_typeof', J$.T(2908169, function _typeof(obj) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(2908145, arguments.callee, this, arguments);
                                                arguments = J$.N(2908153, 'arguments', arguments, true, false, false);
                                                obj = J$.N(2908161, 'obj', obj, true, false, false);
                                                return J$.Rt(2908137, J$.C(140904, J$.C(140896, J$.C(140888, J$.C(140880, J$.R(2908049, 'obj', obj, false, false)) ? J$.B(424130, '===', J$.U(424122, 'typeof', J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(2908057, 'Symbol', undefined, true, true) : Symbol = J$.R(2908057, 'Symbol', Symbol, true, true))), J$.T(2908065, 'function', 21, false)) : J$._()) ? J$.B(424138, '===', J$.G(2908081, J$.R(2908073, 'obj', obj, false, false), 'constructor'), J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(2908089, 'Symbol', undefined, true, true) : Symbol = J$.R(2908089, 'Symbol', Symbol, true, true))) : J$._()) ? J$.B(424146, '!==', J$.R(2908097, 'obj', obj, false, false), J$.G(2908113, J$.I(typeof Symbol === 'undefined' ? Symbol = J$.R(2908105, 'Symbol', undefined, true, true) : Symbol = J$.R(2908105, 'Symbol', Symbol, true, true)), 'prototype')) : J$._()) ? J$.T(2908121, 'symbol', 21, false) : J$.U(424154, 'typeof', J$.R(2908129, 'obj', obj, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(2910809, J$e);
                                            } finally {
                                                if (J$.Fr(2910817))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), _typeof, false, true);
                            }
                            return J$.Rt(2908209, J$.F(2908201, J$.R(2908185, '_typeof', _typeof, false, true), false)(J$.R(2908193, 'obj', obj, false, false)));
                        } catch (J$e) {
                            J$.Ex(2910825, J$e);
                        } finally {
                            if (J$.Fr(2910833))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function loadSchema(path) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(2909001, arguments.callee, this, arguments);
                            arguments = J$.N(2909009, 'arguments', arguments, true, false, false);
                            path = J$.N(2909017, 'path', path, true, false, false);
                            J$.N(2909025, 'data', data, false, false, false);
                            J$.N(2909033, 'schema', schema, false, false, false);
                            var data = J$.W(2908945, 'data', J$.M(2908937, J$.R(2908913, 'fs', fs, false, true), 'readFileSync', false)(J$.R(2908921, 'path', path, false, false), J$.T(2908929, 'utf-8', 21, false)), data, false, false);
                            var schema = J$.W(2908977, 'schema', J$.M(2908969, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(2908953, 'JSON', undefined, true, true) : JSON = J$.R(2908953, 'JSON', JSON, true, true)), 'parse', false)(J$.R(2908961, 'data', data, false, false)), schema, false, false);
                            return J$.Rt(2908993, J$.R(2908985, 'schema', schema, false, false));
                        } catch (J$e) {
                            J$.Ex(2910873, J$e);
                        } finally {
                            if (J$.Fr(2910881))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resultIsValid() {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(2909345, arguments.callee, this, arguments);
                            arguments = J$.N(2909353, 'arguments', arguments, true, false, false);
                            return J$.Rt(2909337, J$.T(2909329, function (result) {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(2909297, arguments.callee, this, arguments);
                                            arguments = J$.N(2909305, 'arguments', arguments, true, false, false);
                                            result = J$.N(2909313, 'result', result, true, false, false);
                                            J$.N(2909321, 'i', i, false, false, false);
                                            J$.M(2909057, J$.R(2909041, 'assert', assert, false, true), 'isObject', false)(J$.R(2909049, 'result', result, false, false));
                                            J$.M(2909113, J$.R(2909065, 'assert', assert, false, true), 'equal', false)(J$.F(2909097, J$.R(2909073, '_typeof', _typeof, false, true), false)(J$.G(2909089, J$.R(2909081, 'result', result, false, false), 'valid')), J$.T(2909105, 'boolean', 21, false));
                                            J$.M(2909145, J$.R(2909121, 'assert', assert, false, true), 'isArray', false)(J$.G(2909137, J$.R(2909129, 'result', result, false, false), 'errors'));
                                            for (var i = J$.W(2909161, 'i', J$.T(2909153, 0, 22, false), i, false, false); J$.C(140920, J$.B(424178, '<', J$.R(2909169, 'i', i, false, false), J$.G(2909193, J$.G(2909185, J$.R(2909177, 'result', result, false, false), 'errors'), 'length'))); J$.B(424202, '-', i = J$.W(2909209, 'i', J$.B(424194, '+', J$.U(424186, '+', J$.R(2909201, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                J$.M(2909289, J$.R(2909217, 'assert', assert, false, true), 'notEqual', false)(J$.G(2909249, J$.G(2909233, J$.R(2909225, 'result', result, false, false), 'errors'), J$.R(2909241, 'i', i, false, false)), J$.T(2909257, null, 25, false), J$.B(424218, '+', J$.B(424210, '+', J$.T(2909265, 'errors[', 21, false), J$.R(2909273, 'i', i, false, false)), J$.T(2909281, '] is null', 21, false)));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2910889, J$e);
                                        } finally {
                                            if (J$.Fr(2910897))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(2910905, J$e);
                        } finally {
                            if (J$.Fr(2910913))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertValidates(doc, schema) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(2909745, arguments.callee, this, arguments);
                            arguments = J$.N(2909753, 'arguments', arguments, true, false, false);
                            doc = J$.N(2909761, 'doc', doc, true, false, false);
                            schema = J$.N(2909769, 'schema', schema, true, false, false);
                            J$.N(2909777, 'context', context, false, false, false);
                            var context = J$.W(2909369, 'context', J$.T(2909361, {}, 11, false), context, false, false);
                            J$.P(2909721, J$.R(2909377, 'context', context, false, false), J$.B(424250, '+', J$.B(424242, '+', J$.B(424234, '+', J$.B(424226, '+', J$.T(2909385, ': validate(', 21, false), J$.R(2909393, 'doc', doc, false, false)), J$.T(2909401, ', ', 21, false)), J$.R(2909409, 'schema', schema, false, false)), J$.T(2909417, ')', 21, false)), J$.T(2909713, {
                                topic: J$.F(2909481, J$.R(2909425, 'validate', validate, false, true), false)(J$.G(2909449, J$.R(2909433, 'schemas', schemas, false, true), J$.R(2909441, 'doc', doc, false, false)), J$.G(2909473, J$.R(2909457, 'schemas', schemas, false, true), J$.R(2909465, 'schema', schema, false, false))),
                                'returns valid result': J$.F(2909497, J$.R(2909489, 'resultIsValid', resultIsValid, false, true), false)(),
                                'with valid=true': J$.T(2909569, function withValidTrue(result) {
                                    jalangiLabel8:
                                        while (true) {
                                            try {
                                                J$.Fe(2909545, arguments.callee, this, arguments);
                                                arguments = J$.N(2909553, 'arguments', arguments, true, false, false);
                                                result = J$.N(2909561, 'result', result, true, false, false);
                                                J$.M(2909537, J$.R(2909505, 'assert', assert, false, true), 'equal', false)(J$.G(2909521, J$.R(2909513, 'result', result, false, false), 'valid'), J$.T(2909529, true, 23, false));
                                            } catch (J$e) {
                                                J$.Ex(2910921, J$e);
                                            } finally {
                                                if (J$.Fr(2910929))
                                                    continue jalangiLabel8;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                'and no errors': J$.T(2909705, function andNoErrors(result) {
                                    jalangiLabel9:
                                        while (true) {
                                            try {
                                                J$.Fe(2909681, arguments.callee, this, arguments);
                                                arguments = J$.N(2909689, 'arguments', arguments, true, false, false);
                                                result = J$.N(2909697, 'result', result, true, false, false);
                                                if (J$.C(140928, J$.B(424258, '==', J$.G(2909601, J$.G(2909585, J$.R(2909577, 'result', result, false, false), 'errors'), J$.T(2909593, 0, 22, false)), J$.T(2909609, null, 25, false))))
                                                    J$.M(2909633, J$.R(2909617, 'assert', assert, false, true), 'fail', false)(J$.T(2909625, '(errors contains null)', 21, false));
                                                J$.M(2909673, J$.R(2909641, 'assert', assert, false, true), 'length', false)(J$.G(2909657, J$.R(2909649, 'result', result, false, false), 'errors'), J$.T(2909665, 0, 22, false));
                                            } catch (J$e) {
                                                J$.Ex(2910937, J$e);
                                            } finally {
                                                if (J$.Fr(2910945))
                                                    continue jalangiLabel9;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)
                            }, 11, false));
                            return J$.Rt(2909737, J$.R(2909729, 'context', context, false, false));
                        } catch (J$e) {
                            J$.Ex(2910953, J$e);
                        } finally {
                            if (J$.Fr(2910961))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertSelfValidates(doc) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(2910065, arguments.callee, this, arguments);
                            arguments = J$.N(2910073, 'arguments', arguments, true, false, false);
                            doc = J$.N(2910081, 'doc', doc, true, false, false);
                            J$.N(2910089, 'context', context, false, false, false);
                            var context = J$.W(2909793, 'context', J$.T(2909785, {}, 11, false), context, false, false);
                            J$.P(2910041, J$.R(2909801, 'context', context, false, false), J$.B(424274, '+', J$.B(424266, '+', J$.T(2909809, ': validate(', 21, false), J$.R(2909817, 'doc', doc, false, false)), J$.T(2909825, ')', 21, false)), J$.T(2910033, {
                                topic: J$.F(2909865, J$.R(2909833, 'validate', validate, false, true), false)(J$.G(2909857, J$.R(2909841, 'schemas', schemas, false, true), J$.R(2909849, 'doc', doc, false, false))),
                                'returns valid result': J$.F(2909881, J$.R(2909873, 'resultIsValid', resultIsValid, false, true), false)(),
                                'with valid=true': J$.T(2909953, function withValidTrue(result) {
                                    jalangiLabel11:
                                        while (true) {
                                            try {
                                                J$.Fe(2909929, arguments.callee, this, arguments);
                                                arguments = J$.N(2909937, 'arguments', arguments, true, false, false);
                                                result = J$.N(2909945, 'result', result, true, false, false);
                                                J$.M(2909921, J$.R(2909889, 'assert', assert, false, true), 'equal', false)(J$.G(2909905, J$.R(2909897, 'result', result, false, false), 'valid'), J$.T(2909913, true, 23, false));
                                            } catch (J$e) {
                                                J$.Ex(2910969, J$e);
                                            } finally {
                                                if (J$.Fr(2910977))
                                                    continue jalangiLabel11;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false),
                                'and no errors': J$.T(2910025, function andNoErrors(result) {
                                    jalangiLabel12:
                                        while (true) {
                                            try {
                                                J$.Fe(2910001, arguments.callee, this, arguments);
                                                arguments = J$.N(2910009, 'arguments', arguments, true, false, false);
                                                result = J$.N(2910017, 'result', result, true, false, false);
                                                J$.M(2909993, J$.R(2909961, 'assert', assert, false, true), 'length', false)(J$.G(2909977, J$.R(2909969, 'result', result, false, false), 'errors'), J$.T(2909985, 0, 22, false));
                                            } catch (J$e) {
                                                J$.Ex(2910985, J$e);
                                            } finally {
                                                if (J$.Fr(2910993))
                                                    continue jalangiLabel12;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)
                            }, 11, false));
                            return J$.Rt(2910057, J$.R(2910049, 'context', context, false, false));
                        } catch (J$e) {
                            J$.Ex(2911001, J$e);
                        } finally {
                            if (J$.Fr(2911009))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            _typeof = J$.N(2910641, '_typeof', J$.T(2910633, _typeof, 12, false), true, false, false);
            J$.N(2910649, 'assert', assert, false, false, false);
            J$.N(2910657, 'vows', vows, false, false, false);
            J$.N(2910665, 'path', path, false, false, false);
            J$.N(2910673, 'fs', fs, false, false, false);
            J$.N(2910681, 'validate', validate, false, false, false);
            J$.N(2910689, 'revision', revision, false, false, false);
            J$.N(2910697, 'schemaRoot', schemaRoot, false, false, false);
            J$.N(2910705, 'schemaNames', schemaNames, false, false, false);
            J$.N(2910713, 'schemas', schemas, false, false, false);
            loadSchema = J$.N(2910729, 'loadSchema', J$.T(2910721, loadSchema, 12, false), true, false, false);
            resultIsValid = J$.N(2910745, 'resultIsValid', J$.T(2910737, resultIsValid, 12, false), true, false, false);
            assertValidates = J$.N(2910761, 'assertValidates', J$.T(2910753, assertValidates, 12, false), true, false, false);
            assertSelfValidates = J$.N(2910777, 'assertSelfValidates', J$.T(2910769, assertSelfValidates, 12, false), true, false, false);
            J$.N(2910785, 'suite', suite, false, false, false);
            J$.T(2907729, 'use strict', 21, false);
            J$.F(2907753, J$.I(typeof require === 'undefined' ? require = J$.R(2907737, 'require', undefined, true, true) : require = J$.R(2907737, 'require', require, true, true)), false)(J$.T(2907745, 'core-js/modules/es.symbol', 21, false));
            J$.F(2907777, J$.I(typeof require === 'undefined' ? require = J$.R(2907761, 'require', undefined, true, true) : require = J$.R(2907761, 'require', require, true, true)), false)(J$.T(2907769, 'core-js/modules/es.symbol.description', 21, false));
            J$.F(2907801, J$.I(typeof require === 'undefined' ? require = J$.R(2907785, 'require', undefined, true, true) : require = J$.R(2907785, 'require', require, true, true)), false)(J$.T(2907793, 'core-js/modules/es.symbol.iterator', 21, false));
            J$.F(2907825, J$.I(typeof require === 'undefined' ? require = J$.R(2907809, 'require', undefined, true, true) : require = J$.R(2907809, 'require', require, true, true)), false)(J$.T(2907817, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(2907849, J$.I(typeof require === 'undefined' ? require = J$.R(2907833, 'require', undefined, true, true) : require = J$.R(2907833, 'require', require, true, true)), false)(J$.T(2907841, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(2907873, J$.I(typeof require === 'undefined' ? require = J$.R(2907857, 'require', undefined, true, true) : require = J$.R(2907857, 'require', require, true, true)), false)(J$.T(2907865, 'core-js/modules/es.array.join', 21, false));
            J$.F(2907897, J$.I(typeof require === 'undefined' ? require = J$.R(2907881, 'require', undefined, true, true) : require = J$.R(2907881, 'require', require, true, true)), false)(J$.T(2907889, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(2907921, J$.I(typeof require === 'undefined' ? require = J$.R(2907905, 'require', undefined, true, true) : require = J$.R(2907905, 'require', require, true, true)), false)(J$.T(2907913, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(2907945, J$.I(typeof require === 'undefined' ? require = J$.R(2907929, 'require', undefined, true, true) : require = J$.R(2907929, 'require', require, true, true)), false)(J$.T(2907937, 'core-js/modules/web.dom-collections.iterator', 21, false));
            var assert = J$.W(2908265, 'assert', J$.F(2908257, J$.I(typeof require === 'undefined' ? require = J$.R(2908241, 'require', undefined, true, true) : require = J$.R(2908241, 'require', require, true, true)), false)(J$.T(2908249, 'assert', 21, false)), assert, false, true);
            var vows = J$.W(2908297, 'vows', J$.F(2908289, J$.I(typeof require === 'undefined' ? require = J$.R(2908273, 'require', undefined, true, true) : require = J$.R(2908273, 'require', require, true, true)), false)(J$.T(2908281, 'vows', 21, false)), vows, false, true);
            var path = J$.W(2908329, 'path', J$.F(2908321, J$.I(typeof require === 'undefined' ? require = J$.R(2908305, 'require', undefined, true, true) : require = J$.R(2908305, 'require', require, true, true)), false)(J$.T(2908313, 'path', 21, false)), path, false, true);
            var fs = J$.W(2908361, 'fs', J$.F(2908353, J$.I(typeof require === 'undefined' ? require = J$.R(2908337, 'require', undefined, true, true) : require = J$.R(2908337, 'require', require, true, true)), false)(J$.T(2908345, 'fs', 21, false)), fs, false, true);
            var validate = J$.W(2908401, 'validate', J$.G(2908393, J$.F(2908385, J$.I(typeof require === 'undefined' ? require = J$.R(2908369, 'require', undefined, true, true) : require = J$.R(2908369, 'require', require, true, true)), false)(J$.T(2908377, '../lib/validate', 21, false)), 'validate'), validate, false, true);
            var revision = J$.W(2908417, 'revision', J$.T(2908409, 'draft-03', 21, false), revision, false, true);
            var schemaRoot = J$.W(2908465, 'schemaRoot', J$.M(2908457, J$.R(2908425, 'path', path, false, true), 'join', false)(J$.I(typeof __dirname === 'undefined' ? __dirname = J$.R(2908433, '__dirname', undefined, true, true) : __dirname = J$.R(2908433, '__dirname', __dirname, true, true)), J$.T(2908441, '..', 21, false), J$.R(2908449, 'revision', revision, false, true)), schemaRoot, false, true);
            var schemaNames = J$.W(2908513, 'schemaNames', J$.T(2908505, [
                J$.T(2908473, 'schema', 21, false),
                J$.T(2908481, 'hyper-schema', 21, false),
                J$.T(2908489, 'links', 21, false),
                J$.T(2908497, 'json-ref', 21, false)
            ], 10, false), schemaNames, false, true);
            var schemas = J$.W(2908529, 'schemas', J$.T(2908521, {}, 11, false), schemas, false, true);
            J$.M(2908673, J$.R(2908537, 'schemaNames', schemaNames, false, true), 'forEach', false)(J$.T(2908665, function (name) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(2908633, arguments.callee, this, arguments);
                            arguments = J$.N(2908641, 'arguments', arguments, true, false, false);
                            name = J$.N(2908649, 'name', name, true, false, false);
                            J$.N(2908657, 'file', file, false, false, false);
                            var file = J$.W(2908577, 'file', J$.M(2908569, J$.R(2908545, 'path', path, false, true), 'join', false)(J$.R(2908553, 'schemaRoot', schemaRoot, false, true), J$.R(2908561, 'name', name, false, false)), file, false, false);
                            J$.P(2908625, J$.R(2908585, 'schemas', schemas, false, true), J$.R(2908593, 'name', name, false, false), J$.F(2908617, J$.R(2908601, 'loadSchema', loadSchema, false, true), false)(J$.R(2908609, 'file', file, false, false)));
                        } catch (J$e) {
                            J$.Ex(2910841, J$e);
                        } finally {
                            if (J$.Fr(2910849))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.M(2908905, J$.R(2908681, 'schemaNames', schemaNames, false, true), 'forEach', false)(J$.T(2908897, function (name) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2908849, arguments.callee, this, arguments);
                            arguments = J$.N(2908857, 'arguments', arguments, true, false, false);
                            name = J$.N(2908865, 'name', name, true, false, false);
                            J$.N(2908873, 's', s, false, false, false);
                            J$.N(2908881, 'n', n, false, false, false);
                            J$.N(2908889, 'f', f, false, false, false);
                            var s, n = J$.W(2908737, 'n', J$.B(424162, '+', J$.R(2908689, 'name', name, false, false), J$.T(2908697, '-nsd', 21, false)), n, false, false), f = J$.W(2908745, 'f', J$.M(2908729, J$.R(2908705, 'path', path, false, true), 'join', false)(J$.R(2908713, 'schemaRoot', schemaRoot, false, true), J$.R(2908721, 'name', name, false, false)), f, false, false);
                            J$.P(2908793, J$.R(2908753, 'schemas', schemas, false, true), J$.R(2908761, 'n', n, false, false), J$.F(2908785, J$.R(2908769, 'loadSchema', loadSchema, false, true), false)(J$.R(2908777, 'f', f, false, false)));
                            s = J$.W(2908825, 's', J$.G(2908817, J$.R(2908801, 'schemas', schemas, false, true), J$.R(2908809, 'n', n, false, false)), s, false, false);
                            J$.B(424170, 'delete', J$.R(2908833, 's', s, false, false), J$.T(2908841, '$schema', 21, false));
                        } catch (J$e) {
                            J$.Ex(2910857, J$e);
                        } finally {
                            if (J$.Fr(2910865))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var suite = J$.W(2910617, 'suite', J$.M(2910609, J$.M(2910585, J$.M(2910113, J$.R(2910097, 'vows', vows, false, true), 'describe', false)(J$.T(2910105, 'JSON Schema', 21, false)), 'addBatch', false)(J$.T(2910577, {
                'Core-NSD self-validates': J$.F(2910137, J$.R(2910121, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910129, 'schema-nsd', 21, false)),
                'Core-NSD/Core-NSD': J$.F(2910169, J$.R(2910145, 'assertValidates', assertValidates, false, true), false)(J$.T(2910153, 'schema-nsd', 21, false), J$.T(2910161, 'schema-nsd', 21, false)),
                'Core-NSD/Core': J$.F(2910201, J$.R(2910177, 'assertValidates', assertValidates, false, true), false)(J$.T(2910185, 'schema-nsd', 21, false), J$.T(2910193, 'schema', 21, false)),
                'Core self-validates': J$.F(2910225, J$.R(2910209, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910217, 'schema', 21, false)),
                'Core/Core': J$.F(2910257, J$.R(2910233, 'assertValidates', assertValidates, false, true), false)(J$.T(2910241, 'schema', 21, false), J$.T(2910249, 'schema', 21, false)),
                'Hyper-NSD self-validates': J$.F(2910281, J$.R(2910265, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910273, 'hyper-schema-nsd', 21, false)),
                'Hyper self-validates': J$.F(2910305, J$.R(2910289, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910297, 'hyper-schema', 21, false)),
                'Hyper/Hyper': J$.F(2910337, J$.R(2910313, 'assertValidates', assertValidates, false, true), false)(J$.T(2910321, 'hyper-schema', 21, false), J$.T(2910329, 'hyper-schema', 21, false)),
                'Hyper/Core': J$.F(2910369, J$.R(2910345, 'assertValidates', assertValidates, false, true), false)(J$.T(2910353, 'hyper-schema', 21, false), J$.T(2910361, 'schema', 21, false)),
                'Links-NSD self-validates': J$.F(2910393, J$.R(2910377, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910385, 'links-nsd', 21, false)),
                'Links self-validates': J$.F(2910417, J$.R(2910401, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910409, 'links', 21, false)),
                'Links/Hyper': J$.F(2910449, J$.R(2910425, 'assertValidates', assertValidates, false, true), false)(J$.T(2910433, 'links', 21, false), J$.T(2910441, 'hyper-schema', 21, false)),
                'Links/Core': J$.F(2910481, J$.R(2910457, 'assertValidates', assertValidates, false, true), false)(J$.T(2910465, 'links', 21, false), J$.T(2910473, 'schema', 21, false)),
                'Json-Ref self-validates': J$.F(2910505, J$.R(2910489, 'assertSelfValidates', assertSelfValidates, false, true), false)(J$.T(2910497, 'json-ref', 21, false)),
                'Json-Ref/Hyper': J$.F(2910537, J$.R(2910513, 'assertValidates', assertValidates, false, true), false)(J$.T(2910521, 'json-ref', 21, false), J$.T(2910529, 'hyper-schema', 21, false)),
                'Json-Ref/Core': J$.F(2910569, J$.R(2910545, 'assertValidates', assertValidates, false, true), false)(J$.T(2910553, 'json-ref', 21, false), J$.T(2910561, 'schema', 21, false))
            }, 11, false)), J$.T(2910593, 'export', 21, false), false)(J$.I(typeof module === 'undefined' ? module = J$.R(2910601, 'module', undefined, true, true) : module = J$.R(2910601, 'module', module, true, true))), suite, false, true);
        } catch (J$e) {
            J$.Ex(2911017, J$e);
        } finally {
            if (J$.Sr(2911025))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

