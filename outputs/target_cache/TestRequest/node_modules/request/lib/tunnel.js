J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(3242361, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/request/lib/tunnel.js');
            function constructProxyHost(uriObject) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3240049, arguments.callee, this, arguments);
                            arguments = J$.N(3240057, 'arguments', arguments, true, false, false);
                            uriObject = J$.N(3240065, 'uriObject', uriObject, true, false, false);
                            J$.N(3240073, 'port', port, false, false, false);
                            J$.N(3240081, 'protocol', protocol, false, false, false);
                            J$.N(3240089, 'proxyHost', proxyHost, false, false, false);
                            var port = J$.W(3239873, 'port', J$.G(3239865, J$.R(3239857, 'uriObject', uriObject, false, false), 'port'), port, false, false);
                            var protocol = J$.W(3239897, 'protocol', J$.G(3239889, J$.R(3239881, 'uriObject', uriObject, false, false), 'protocol'), protocol, false, false);
                            var proxyHost = J$.W(3239929, 'proxyHost', J$.B(439858, '+', J$.G(3239913, J$.R(3239905, 'uriObject', uriObject, false, false), 'hostname'), J$.T(3239921, ':', 21, false)), proxyHost, false, false);
                            if (J$.C(150368, J$.R(3239937, 'port', port, false, false))) {
                                proxyHost = J$.W(3239961, 'proxyHost', J$.B(439866, '+', J$.R(3239953, 'proxyHost', proxyHost, false, false), J$.R(3239945, 'port', port, false, false)), proxyHost, false, false);
                            } else if (J$.C(150360, J$.B(439874, '===', J$.R(3239969, 'protocol', protocol, false, false), J$.T(3239977, 'https:', 21, false)))) {
                                proxyHost = J$.W(3240001, 'proxyHost', J$.B(439882, '+', J$.R(3239993, 'proxyHost', proxyHost, false, false), J$.T(3239985, '443', 21, false)), proxyHost, false, false);
                            } else {
                                proxyHost = J$.W(3240025, 'proxyHost', J$.B(439890, '+', J$.R(3240017, 'proxyHost', proxyHost, false, false), J$.T(3240009, '80', 21, false)), proxyHost, false, false);
                            }
                            return J$.Rt(3240041, J$.R(3240033, 'proxyHost', proxyHost, false, false));
                        } catch (J$e) {
                            J$.Ex(3242497, J$e);
                        } finally {
                            if (J$.Fr(3242505))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3240457, arguments.callee, this, arguments);
                            arguments = J$.N(3240465, 'arguments', arguments, true, false, false);
                            headers = J$.N(3240473, 'headers', headers, true, false, false);
                            proxyHeaderWhiteList = J$.N(3240481, 'proxyHeaderWhiteList', proxyHeaderWhiteList, true, false, false);
                            J$.N(3240489, 'whiteList', whiteList, false, false, false);
                            var whiteList = J$.W(3240217, 'whiteList', J$.M(3240209, J$.R(3240097, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false), 'reduce', false)(J$.T(3240193, function (set, header) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3240161, arguments.callee, this, arguments);
                                            arguments = J$.N(3240169, 'arguments', arguments, true, false, false);
                                            set = J$.N(3240177, 'set', set, true, false, false);
                                            header = J$.N(3240185, 'header', header, true, false, false);
                                            J$.P(3240137, J$.R(3240105, 'set', set, false, false), J$.M(3240121, J$.R(3240113, 'header', header, false, false), 'toLowerCase', false)(), J$.T(3240129, true, 23, false));
                                            return J$.Rt(3240153, J$.R(3240145, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3242513, J$e);
                                        } finally {
                                            if (J$.Fr(3242521))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(3240201, {}, 11, false)), whiteList, false, false);
                            return J$.Rt(3240449, J$.M(3240441, J$.M(3240321, J$.M(3240241, J$.I(typeof Object === 'undefined' ? Object = J$.R(3240225, 'Object', undefined, true, true) : Object = J$.R(3240225, 'Object', Object, true, true)), 'keys', false)(J$.R(3240233, 'headers', headers, false, false)), 'filter', false)(J$.T(3240313, function (header) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(3240289, arguments.callee, this, arguments);
                                            arguments = J$.N(3240297, 'arguments', arguments, true, false, false);
                                            header = J$.N(3240305, 'header', header, true, false, false);
                                            return J$.Rt(3240281, J$.G(3240273, J$.R(3240249, 'whiteList', whiteList, false, false), J$.M(3240265, J$.R(3240257, 'header', header, false, false), 'toLowerCase', false)()));
                                        } catch (J$e) {
                                            J$.Ex(3242529, J$e);
                                        } finally {
                                            if (J$.Fr(3242537))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'reduce', false)(J$.T(3240425, function (set, header) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3240393, arguments.callee, this, arguments);
                                            arguments = J$.N(3240401, 'arguments', arguments, true, false, false);
                                            set = J$.N(3240409, 'set', set, true, false, false);
                                            header = J$.N(3240417, 'header', header, true, false, false);
                                            J$.P(3240369, J$.R(3240329, 'set', set, false, false), J$.R(3240337, 'header', header, false, false), J$.G(3240361, J$.R(3240345, 'headers', headers, false, false), J$.R(3240353, 'header', header, false, false)));
                                            return J$.Rt(3240385, J$.R(3240377, 'set', set, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3242545, J$e);
                                        } finally {
                                            if (J$.Fr(3242553))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), J$.T(3240433, {}, 11, false)));
                        } catch (J$e) {
                            J$.Ex(3242561, J$e);
                        } finally {
                            if (J$.Fr(3242569))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelOptions(request, proxyHeaders) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3240777, arguments.callee, this, arguments);
                            arguments = J$.N(3240785, 'arguments', arguments, true, false, false);
                            request = J$.N(3240793, 'request', request, true, false, false);
                            proxyHeaders = J$.N(3240801, 'proxyHeaders', proxyHeaders, true, false, false);
                            J$.N(3240809, 'proxy', proxy, false, false, false);
                            J$.N(3240817, 'tunnelOptions', tunnelOptions, false, false, false);
                            var proxy = J$.W(3240513, 'proxy', J$.G(3240505, J$.R(3240497, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelOptions = J$.W(3240753, 'tunnelOptions', J$.T(3240745, {
                                proxy: J$.T(3240577, {
                                    host: J$.G(3240529, J$.R(3240521, 'proxy', proxy, false, false), 'hostname'),
                                    port: J$.U(439898, '+', J$.G(3240545, J$.R(3240537, 'proxy', proxy, false, false), 'port')),
                                    proxyAuth: J$.G(3240561, J$.R(3240553, 'proxy', proxy, false, false), 'auth'),
                                    headers: J$.R(3240569, 'proxyHeaders', proxyHeaders, false, false)
                                }, 11, false),
                                headers: J$.G(3240593, J$.R(3240585, 'request', request, false, false), 'headers'),
                                ca: J$.G(3240609, J$.R(3240601, 'request', request, false, false), 'ca'),
                                cert: J$.G(3240625, J$.R(3240617, 'request', request, false, false), 'cert'),
                                key: J$.G(3240641, J$.R(3240633, 'request', request, false, false), 'key'),
                                passphrase: J$.G(3240657, J$.R(3240649, 'request', request, false, false), 'passphrase'),
                                pfx: J$.G(3240673, J$.R(3240665, 'request', request, false, false), 'pfx'),
                                ciphers: J$.G(3240689, J$.R(3240681, 'request', request, false, false), 'ciphers'),
                                rejectUnauthorized: J$.G(3240705, J$.R(3240697, 'request', request, false, false), 'rejectUnauthorized'),
                                secureOptions: J$.G(3240721, J$.R(3240713, 'request', request, false, false), 'secureOptions'),
                                secureProtocol: J$.G(3240737, J$.R(3240729, 'request', request, false, false), 'secureProtocol')
                            }, 11, false), tunnelOptions, false, false);
                            return J$.Rt(3240769, J$.R(3240761, 'tunnelOptions', tunnelOptions, false, false));
                        } catch (J$e) {
                            J$.Ex(3242577, J$e);
                        } finally {
                            if (J$.Fr(3242585))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructTunnelFnName(uri, proxy) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3240969, arguments.callee, this, arguments);
                            arguments = J$.N(3240977, 'arguments', arguments, true, false, false);
                            uri = J$.N(3240985, 'uri', uri, true, false, false);
                            proxy = J$.N(3240993, 'proxy', proxy, true, false, false);
                            J$.N(3241001, 'uriProtocol', uriProtocol, false, false, false);
                            J$.N(3241009, 'proxyProtocol', proxyProtocol, false, false, false);
                            var uriProtocol = J$.W(3240865, 'uriProtocol', J$.C(150376, J$.B(439906, '===', J$.G(3240833, J$.R(3240825, 'uri', uri, false, false), 'protocol'), J$.T(3240841, 'https:', 21, false))) ? J$.T(3240849, 'https', 21, false) : J$.T(3240857, 'http', 21, false), uriProtocol, false, false);
                            var proxyProtocol = J$.W(3240913, 'proxyProtocol', J$.C(150384, J$.B(439914, '===', J$.G(3240881, J$.R(3240873, 'proxy', proxy, false, false), 'protocol'), J$.T(3240889, 'https:', 21, false))) ? J$.T(3240897, 'Https', 21, false) : J$.T(3240905, 'Http', 21, false), proxyProtocol, false, false);
                            return J$.Rt(3240961, J$.M(3240953, J$.T(3240937, [
                                J$.R(3240921, 'uriProtocol', uriProtocol, false, false),
                                J$.R(3240929, 'proxyProtocol', proxyProtocol, false, false)
                            ], 10, false), 'join', false)(J$.T(3240945, 'Over', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3242593, J$e);
                        } finally {
                            if (J$.Fr(3242601))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getTunnelFn(request) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3241137, arguments.callee, this, arguments);
                            arguments = J$.N(3241145, 'arguments', arguments, true, false, false);
                            request = J$.N(3241153, 'request', request, true, false, false);
                            J$.N(3241161, 'uri', uri, false, false, false);
                            J$.N(3241169, 'proxy', proxy, false, false, false);
                            J$.N(3241177, 'tunnelFnName', tunnelFnName, false, false, false);
                            var uri = J$.W(3241033, 'uri', J$.G(3241025, J$.R(3241017, 'request', request, false, false), 'uri'), uri, false, false);
                            var proxy = J$.W(3241057, 'proxy', J$.G(3241049, J$.R(3241041, 'request', request, false, false), 'proxy'), proxy, false, false);
                            var tunnelFnName = J$.W(3241097, 'tunnelFnName', J$.F(3241089, J$.R(3241065, 'constructTunnelFnName', constructTunnelFnName, false, true), false)(J$.R(3241073, 'uri', uri, false, false), J$.R(3241081, 'proxy', proxy, false, false)), tunnelFnName, false, false);
                            return J$.Rt(3241129, J$.G(3241121, J$.R(3241105, 'tunnel', tunnel, false, true), J$.R(3241113, 'tunnelFnName', tunnelFnName, false, false)));
                        } catch (J$e) {
                            J$.Ex(3242609, J$e);
                        } finally {
                            if (J$.Fr(3242617))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Tunnel(request) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3241313, arguments.callee, this, arguments);
                            arguments = J$.N(3241321, 'arguments', arguments, true, false, false);
                            request = J$.N(3241329, 'request', request, true, false, false);
                            J$.P(3241201, J$.R(3241185, 'this', this, false, false), 'request', J$.R(3241193, 'request', request, false, false));
                            J$.P(3241225, J$.R(3241209, 'this', this, false, false), 'proxyHeaderWhiteList', J$.R(3241217, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
                            J$.P(3241249, J$.R(3241233, 'this', this, false, false), 'proxyHeaderExclusiveList', J$.T(3241241, [], 10, false));
                            if (J$.C(150392, J$.B(439930, '!==', J$.U(439922, 'typeof', J$.G(3241265, J$.R(3241257, 'request', request, false, false), 'tunnel')), J$.T(3241273, 'undefined', 21, false)))) {
                                J$.P(3241305, J$.R(3241281, 'this', this, false, false), 'tunnelOverride', J$.G(3241297, J$.R(3241289, 'request', request, false, false), 'tunnel'));
                            }
                        } catch (J$e) {
                            J$.Ex(3242625, J$e);
                        } finally {
                            if (J$.Fr(3242633))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3242369, 'url', url, false, false, false);
            J$.N(3242377, 'tunnel', tunnel, false, false, false);
            J$.N(3242385, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, false, false);
            J$.N(3242393, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, false, false);
            constructProxyHost = J$.N(3242409, 'constructProxyHost', J$.T(3242401, constructProxyHost, 12, false), true, false, false);
            constructProxyHeaderWhiteList = J$.N(3242425, 'constructProxyHeaderWhiteList', J$.T(3242417, constructProxyHeaderWhiteList, 12, false), true, false, false);
            constructTunnelOptions = J$.N(3242441, 'constructTunnelOptions', J$.T(3242433, constructTunnelOptions, 12, false), true, false, false);
            constructTunnelFnName = J$.N(3242457, 'constructTunnelFnName', J$.T(3242449, constructTunnelFnName, 12, false), true, false, false);
            getTunnelFn = J$.N(3242473, 'getTunnelFn', J$.T(3242465, getTunnelFn, 12, false), true, false, false);
            Tunnel = J$.N(3242489, 'Tunnel', J$.T(3242481, Tunnel, 12, false), true, false, false);
            J$.T(3239409, 'use strict', 21, false);
            J$.F(3239433, J$.I(typeof require === 'undefined' ? require = J$.R(3239417, 'require', undefined, true, true) : require = J$.R(3239417, 'require', require, true, true)), false)(J$.T(3239425, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3239457, J$.I(typeof require === 'undefined' ? require = J$.R(3239441, 'require', undefined, true, true) : require = J$.R(3239441, 'require', require, true, true)), false)(J$.T(3239449, 'core-js/modules/es.array.filter', 21, false));
            J$.F(3239481, J$.I(typeof require === 'undefined' ? require = J$.R(3239465, 'require', undefined, true, true) : require = J$.R(3239465, 'require', require, true, true)), false)(J$.T(3239473, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3239505, J$.I(typeof require === 'undefined' ? require = J$.R(3239489, 'require', undefined, true, true) : require = J$.R(3239489, 'require', require, true, true)), false)(J$.T(3239497, 'core-js/modules/es.array.join', 21, false));
            J$.F(3239529, J$.I(typeof require === 'undefined' ? require = J$.R(3239513, 'require', undefined, true, true) : require = J$.R(3239513, 'require', require, true, true)), false)(J$.T(3239521, 'core-js/modules/es.array.reduce', 21, false));
            J$.F(3239553, J$.I(typeof require === 'undefined' ? require = J$.R(3239537, 'require', undefined, true, true) : require = J$.R(3239537, 'require', require, true, true)), false)(J$.T(3239545, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3239577, J$.I(typeof require === 'undefined' ? require = J$.R(3239561, 'require', undefined, true, true) : require = J$.R(3239561, 'require', require, true, true)), false)(J$.T(3239569, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var url = J$.W(3239609, 'url', J$.F(3239601, J$.I(typeof require === 'undefined' ? require = J$.R(3239585, 'require', undefined, true, true) : require = J$.R(3239585, 'require', require, true, true)), false)(J$.T(3239593, 'url', 21, false)), url, false, true);
            var tunnel = J$.W(3239641, 'tunnel', J$.F(3239633, J$.I(typeof require === 'undefined' ? require = J$.R(3239617, 'require', undefined, true, true) : require = J$.R(3239617, 'require', require, true, true)), false)(J$.T(3239625, 'tunnel-agent', 21, false)), tunnel, false, true);
            var defaultProxyHeaderWhiteList = J$.W(3239825, 'defaultProxyHeaderWhiteList', J$.T(3239817, [
                J$.T(3239649, 'accept', 21, false),
                J$.T(3239657, 'accept-charset', 21, false),
                J$.T(3239665, 'accept-encoding', 21, false),
                J$.T(3239673, 'accept-language', 21, false),
                J$.T(3239681, 'accept-ranges', 21, false),
                J$.T(3239689, 'cache-control', 21, false),
                J$.T(3239697, 'content-encoding', 21, false),
                J$.T(3239705, 'content-language', 21, false),
                J$.T(3239713, 'content-location', 21, false),
                J$.T(3239721, 'content-md5', 21, false),
                J$.T(3239729, 'content-range', 21, false),
                J$.T(3239737, 'content-type', 21, false),
                J$.T(3239745, 'connection', 21, false),
                J$.T(3239753, 'date', 21, false),
                J$.T(3239761, 'expect', 21, false),
                J$.T(3239769, 'max-forwards', 21, false),
                J$.T(3239777, 'pragma', 21, false),
                J$.T(3239785, 'referer', 21, false),
                J$.T(3239793, 'te', 21, false),
                J$.T(3239801, 'user-agent', 21, false),
                J$.T(3239809, 'via', 21, false)
            ], 10, false), defaultProxyHeaderWhiteList, false, true);
            var defaultProxyHeaderExclusiveList = J$.W(3239849, 'defaultProxyHeaderExclusiveList', J$.T(3239841, [J$.T(3239833, 'proxy-authorization', 21, false)], 10, false), defaultProxyHeaderExclusiveList, false, true);
            J$.P(3241545, J$.G(3241345, J$.R(3241337, 'Tunnel', Tunnel, false, true), 'prototype'), 'isEnabled', J$.T(3241537, function () {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3241505, arguments.callee, this, arguments);
                            arguments = J$.N(3241513, 'arguments', arguments, true, false, false);
                            J$.N(3241521, 'self', self, false, false, false);
                            J$.N(3241529, 'request', request, false, false, false);
                            var self = J$.W(3241361, 'self', J$.R(3241353, 'this', this, false, false), self, false, false);
                            var request = J$.W(3241385, 'request', J$.G(3241377, J$.R(3241369, 'self', self, false, false), 'request'), request, false, false);
                            if (J$.C(150400, J$.B(439946, '!==', J$.U(439938, 'typeof', J$.G(3241401, J$.R(3241393, 'self', self, false, false), 'tunnelOverride')), J$.T(3241409, 'undefined', 21, false)))) {
                                return J$.Rt(3241433, J$.G(3241425, J$.R(3241417, 'self', self, false, false), 'tunnelOverride'));
                            }
                            if (J$.C(150408, J$.B(439954, '===', J$.G(3241457, J$.G(3241449, J$.R(3241441, 'request', request, false, false), 'uri'), 'protocol'), J$.T(3241465, 'https:', 21, false)))) {
                                return J$.Rt(3241481, J$.T(3241473, true, 23, false));
                            }
                            return J$.Rt(3241497, J$.T(3241489, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3242641, J$e);
                        } finally {
                            if (J$.Fr(3242649))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3242281, J$.G(3241561, J$.R(3241553, 'Tunnel', Tunnel, false, true), 'prototype'), 'setup', J$.T(3242273, function (options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3242193, arguments.callee, this, arguments);
                            arguments = J$.N(3242201, 'arguments', arguments, true, false, false);
                            options = J$.N(3242209, 'options', options, true, false, false);
                            J$.N(3242217, 'self', self, false, false, false);
                            J$.N(3242225, 'request', request, false, false, false);
                            J$.N(3242233, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false, false);
                            J$.N(3242241, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false, false);
                            J$.N(3242249, 'proxyHeaders', proxyHeaders, false, false, false);
                            J$.N(3242257, 'tunnelFn', tunnelFn, false, false, false);
                            J$.N(3242265, 'tunnelOptions', tunnelOptions, false, false, false);
                            var self = J$.W(3241577, 'self', J$.R(3241569, 'this', this, false, false), self, false, false);
                            var request = J$.W(3241601, 'request', J$.G(3241593, J$.R(3241585, 'self', self, false, false), 'request'), request, false, false);
                            options = J$.W(3241625, 'options', J$.C(150416, J$.R(3241609, 'options', options, false, false)) ? J$._() : J$.T(3241617, {}, 11, false), options, false, false);
                            if (J$.C(150424, J$.B(439970, '===', J$.U(439962, 'typeof', J$.G(3241641, J$.R(3241633, 'request', request, false, false), 'proxy')), J$.T(3241649, 'string', 21, false)))) {
                                J$.P(3241697, J$.R(3241657, 'request', request, false, false), 'proxy', J$.M(3241689, J$.R(3241665, 'url', url, false, true), 'parse', false)(J$.G(3241681, J$.R(3241673, 'request', request, false, false), 'proxy')));
                            }
                            if (J$.C(150440, J$.C(150432, J$.U(439978, '!', J$.G(3241713, J$.R(3241705, 'request', request, false, false), 'proxy'))) ? J$._() : J$.U(439986, '!', J$.G(3241729, J$.R(3241721, 'request', request, false, false), 'tunnel')))) {
                                return J$.Rt(3241745, J$.T(3241737, false, 23, false));
                            }
                            if (J$.C(150448, J$.G(3241761, J$.R(3241753, 'options', options, false, false), 'proxyHeaderWhiteList'))) {
                                J$.P(3241793, J$.R(3241769, 'self', self, false, false), 'proxyHeaderWhiteList', J$.G(3241785, J$.R(3241777, 'options', options, false, false), 'proxyHeaderWhiteList'));
                            }
                            if (J$.C(150456, J$.G(3241809, J$.R(3241801, 'options', options, false, false), 'proxyHeaderExclusiveList'))) {
                                J$.P(3241841, J$.R(3241817, 'self', self, false, false), 'proxyHeaderExclusiveList', J$.G(3241833, J$.R(3241825, 'options', options, false, false), 'proxyHeaderExclusiveList'));
                            }
                            var proxyHeaderExclusiveList = J$.W(3241881, 'proxyHeaderExclusiveList', J$.M(3241873, J$.G(3241857, J$.R(3241849, 'self', self, false, false), 'proxyHeaderExclusiveList'), 'concat', false)(J$.R(3241865, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true)), proxyHeaderExclusiveList, false, false);
                            var proxyHeaderWhiteList = J$.W(3241921, 'proxyHeaderWhiteList', J$.M(3241913, J$.G(3241897, J$.R(3241889, 'self', self, false, false), 'proxyHeaderWhiteList'), 'concat', false)(J$.R(3241905, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false)), proxyHeaderWhiteList, false, false);
                            var proxyHeaders = J$.W(3241969, 'proxyHeaders', J$.F(3241961, J$.R(3241929, 'constructProxyHeaderWhiteList', constructProxyHeaderWhiteList, false, true), false)(J$.G(3241945, J$.R(3241937, 'request', request, false, false), 'headers'), J$.R(3241953, 'proxyHeaderWhiteList', proxyHeaderWhiteList, false, false)), proxyHeaders, false, false);
                            J$.P(3242017, J$.R(3241977, 'proxyHeaders', proxyHeaders, false, false), 'host', J$.F(3242009, J$.R(3241985, 'constructProxyHost', constructProxyHost, false, true), false)(J$.G(3242001, J$.R(3241993, 'request', request, false, false), 'uri')));
                            J$.M(3242057, J$.R(3242025, 'proxyHeaderExclusiveList', proxyHeaderExclusiveList, false, false), 'forEach', false)(J$.G(3242041, J$.R(3242033, 'request', request, false, false), 'removeHeader'), J$.R(3242049, 'request', request, false, false));
                            var tunnelFn = J$.W(3242089, 'tunnelFn', J$.F(3242081, J$.R(3242065, 'getTunnelFn', getTunnelFn, false, true), false)(J$.R(3242073, 'request', request, false, false)), tunnelFn, false, false);
                            var tunnelOptions = J$.W(3242129, 'tunnelOptions', J$.F(3242121, J$.R(3242097, 'constructTunnelOptions', constructTunnelOptions, false, true), false)(J$.R(3242105, 'request', request, false, false), J$.R(3242113, 'proxyHeaders', proxyHeaders, false, false)), tunnelOptions, false, false);
                            J$.P(3242169, J$.R(3242137, 'request', request, false, false), 'agent', J$.F(3242161, J$.R(3242145, 'tunnelFn', tunnelFn, false, false), false)(J$.R(3242153, 'tunnelOptions', tunnelOptions, false, false)));
                            return J$.Rt(3242185, J$.T(3242177, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(3242657, J$e);
                        } finally {
                            if (J$.Fr(3242665))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3242305, J$.R(3242289, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderWhiteList', J$.R(3242297, 'defaultProxyHeaderWhiteList', defaultProxyHeaderWhiteList, false, true));
            J$.P(3242329, J$.R(3242313, 'Tunnel', Tunnel, false, true), 'defaultProxyHeaderExclusiveList', J$.R(3242321, 'defaultProxyHeaderExclusiveList', defaultProxyHeaderExclusiveList, false, true));
            J$.P(3242353, J$.I(typeof exports === 'undefined' ? exports = J$.R(3242337, 'exports', undefined, true, true) : exports = J$.R(3242337, 'exports', exports, true, true)), 'Tunnel', J$.R(3242345, 'Tunnel', Tunnel, false, true));
        } catch (J$e) {
            J$.Ex(3242673, J$e);
        } finally {
            if (J$.Sr(3242681))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

