J$.noInstrEval = false;
jalangiLabel9:
    while (true) {
        try {
            J$.Se(3230897, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestRequest/node_modules/request/lib/multipart.js');
            function Multipart(request) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3228817, arguments.callee, this, arguments);
                            arguments = J$.N(3228825, 'arguments', arguments, true, false, false);
                            request = J$.N(3228833, 'request', request, true, false, false);
                            J$.P(3228729, J$.R(3228713, 'this', this, false, false), 'request', J$.R(3228721, 'request', request, false, false));
                            J$.P(3228761, J$.R(3228737, 'this', this, false, false), 'boundary', J$.F(3228753, J$.R(3228745, 'uuid', uuid, false, true), false)());
                            J$.P(3228785, J$.R(3228769, 'this', this, false, false), 'chunked', J$.T(3228777, false, 23, false));
                            J$.P(3228809, J$.R(3228793, 'this', this, false, false), 'body', J$.T(3228801, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(3230953, J$e);
                        } finally {
                            if (J$.Fr(3230961))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3230905, 'uuid', uuid, false, false, false);
            J$.N(3230913, 'CombinedStream', CombinedStream, false, false, false);
            J$.N(3230921, 'isstream', isstream, false, false, false);
            J$.N(3230929, 'Buffer', Buffer, false, false, false);
            Multipart = J$.N(3230945, 'Multipart', J$.T(3230937, Multipart, 12, false), true, false, false);
            J$.T(3228353, 'use strict', 21, false);
            J$.F(3228377, J$.I(typeof require === 'undefined' ? require = J$.R(3228361, 'require', undefined, true, true) : require = J$.R(3228361, 'require', require, true, true)), false)(J$.T(3228369, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3228401, J$.I(typeof require === 'undefined' ? require = J$.R(3228385, 'require', undefined, true, true) : require = J$.R(3228385, 'require', require, true, true)), false)(J$.T(3228393, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(3228425, J$.I(typeof require === 'undefined' ? require = J$.R(3228409, 'require', undefined, true, true) : require = J$.R(3228409, 'require', require, true, true)), false)(J$.T(3228417, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3228449, J$.I(typeof require === 'undefined' ? require = J$.R(3228433, 'require', undefined, true, true) : require = J$.R(3228433, 'require', require, true, true)), false)(J$.T(3228441, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3228473, J$.I(typeof require === 'undefined' ? require = J$.R(3228457, 'require', undefined, true, true) : require = J$.R(3228457, 'require', require, true, true)), false)(J$.T(3228465, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3228497, J$.I(typeof require === 'undefined' ? require = J$.R(3228481, 'require', undefined, true, true) : require = J$.R(3228481, 'require', require, true, true)), false)(J$.T(3228489, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3228521, J$.I(typeof require === 'undefined' ? require = J$.R(3228505, 'require', undefined, true, true) : require = J$.R(3228505, 'require', require, true, true)), false)(J$.T(3228513, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3228545, J$.I(typeof require === 'undefined' ? require = J$.R(3228529, 'require', undefined, true, true) : require = J$.R(3228529, 'require', require, true, true)), false)(J$.T(3228537, 'core-js/modules/es.string.replace', 21, false));
            J$.F(3228569, J$.I(typeof require === 'undefined' ? require = J$.R(3228553, 'require', undefined, true, true) : require = J$.R(3228553, 'require', require, true, true)), false)(J$.T(3228561, 'core-js/modules/web.dom-collections.for-each', 21, false));
            var uuid = J$.W(3228601, 'uuid', J$.F(3228593, J$.I(typeof require === 'undefined' ? require = J$.R(3228577, 'require', undefined, true, true) : require = J$.R(3228577, 'require', require, true, true)), false)(J$.T(3228585, 'uuid/v4', 21, false)), uuid, false, true);
            var CombinedStream = J$.W(3228633, 'CombinedStream', J$.F(3228625, J$.I(typeof require === 'undefined' ? require = J$.R(3228609, 'require', undefined, true, true) : require = J$.R(3228609, 'require', require, true, true)), false)(J$.T(3228617, 'combined-stream', 21, false)), CombinedStream, false, true);
            var isstream = J$.W(3228665, 'isstream', J$.F(3228657, J$.I(typeof require === 'undefined' ? require = J$.R(3228641, 'require', undefined, true, true) : require = J$.R(3228641, 'require', require, true, true)), false)(J$.T(3228649, 'isstream', 21, false)), isstream, false, true);
            var Buffer = J$.W(3228705, 'Buffer', J$.G(3228697, J$.F(3228689, J$.I(typeof require === 'undefined' ? require = J$.R(3228673, 'require', undefined, true, true) : require = J$.R(3228673, 'require', require, true, true)), false)(J$.T(3228681, 'safe-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            J$.P(3229353, J$.G(3228849, J$.R(3228841, 'Multipart', Multipart, false, true), 'prototype'), 'isChunked', J$.T(3229345, function (options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3229297, arguments.callee, this, arguments);
                            arguments = J$.N(3229305, 'arguments', arguments, true, false, false);
                            options = J$.N(3229313, 'options', options, true, false, false);
                            J$.N(3229321, 'self', self, false, false, false);
                            J$.N(3229329, 'chunked', chunked, false, false, false);
                            J$.N(3229337, 'parts', parts, false, false, false);
                            var self = J$.W(3228865, 'self', J$.R(3228857, 'this', this, false, false), self, false, false);
                            var chunked = J$.W(3228881, 'chunked', J$.T(3228873, false, 23, false), chunked, false, false);
                            var parts = J$.W(3228913, 'parts', J$.C(149584, J$.G(3228897, J$.R(3228889, 'options', options, false, false), 'data')) ? J$._() : J$.R(3228905, 'options', options, false, false), parts, false, false);
                            if (J$.C(149592, J$.U(439098, '!', J$.G(3228929, J$.R(3228921, 'parts', parts, false, false), 'forEach')))) {
                                J$.M(3228985, J$.G(3228945, J$.R(3228937, 'self', self, false, false), 'request'), 'emit', false)(J$.T(3228953, 'error', 21, false), J$.F(3228977, J$.I(typeof Error === 'undefined' ? Error = J$.R(3228961, 'Error', undefined, true, true) : Error = J$.R(3228961, 'Error', Error, true, true)), true)(J$.T(3228969, 'Argument error, options.multipart.', 21, false)));
                            }
                            if (J$.C(149600, J$.B(439106, '!==', J$.G(3229001, J$.R(3228993, 'options', options, false, false), 'chunked'), J$.T(3229009, undefined, 24, false)))) {
                                chunked = J$.W(3229033, 'chunked', J$.G(3229025, J$.R(3229017, 'options', options, false, false), 'chunked'), chunked, false, false);
                            }
                            if (J$.C(149608, J$.B(439114, '===', J$.M(3229065, J$.G(3229049, J$.R(3229041, 'self', self, false, false), 'request'), 'getHeader', false)(J$.T(3229057, 'transfer-encoding', 21, false)), J$.T(3229073, 'chunked', 21, false)))) {
                                chunked = J$.W(3229089, 'chunked', J$.T(3229081, true, 23, false), chunked, false, false);
                            }
                            if (J$.C(149632, J$.U(439122, '!', J$.R(3229097, 'chunked', chunked, false, false)))) {
                                J$.M(3229273, J$.R(3229105, 'parts', parts, false, false), 'forEach', false)(J$.T(3229265, function (part) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(3229241, arguments.callee, this, arguments);
                                                arguments = J$.N(3229249, 'arguments', arguments, true, false, false);
                                                part = J$.N(3229257, 'part', part, true, false, false);
                                                if (J$.C(149616, J$.B(439138, '===', J$.U(439130, 'typeof', J$.G(3229121, J$.R(3229113, 'part', part, false, false), 'body')), J$.T(3229129, 'undefined', 21, false)))) {
                                                    J$.M(3229185, J$.G(3229145, J$.R(3229137, 'self', self, false, false), 'request'), 'emit', false)(J$.T(3229153, 'error', 21, false), J$.F(3229177, J$.I(typeof Error === 'undefined' ? Error = J$.R(3229161, 'Error', undefined, true, true) : Error = J$.R(3229161, 'Error', Error, true, true)), true)(J$.T(3229169, 'Body attribute missing in multipart.', 21, false)));
                                                }
                                                if (J$.C(149624, J$.F(3229217, J$.R(3229193, 'isstream', isstream, false, true), false)(J$.G(3229209, J$.R(3229201, 'part', part, false, false), 'body')))) {
                                                    chunked = J$.W(3229233, 'chunked', J$.T(3229225, true, 23, false), chunked, false, false);
                                                }
                                            } catch (J$e) {
                                                J$.Ex(3230969, J$e);
                                            } finally {
                                                if (J$.Fr(3230977))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            }
                            return J$.Rt(3229289, J$.R(3229281, 'chunked', chunked, false, false));
                        } catch (J$e) {
                            J$.Ex(3230985, J$e);
                        } finally {
                            if (J$.Fr(3230993))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3229801, J$.G(3229369, J$.R(3229361, 'Multipart', Multipart, false, true), 'prototype'), 'setHeaders', J$.T(3229793, function (chunked) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3229753, arguments.callee, this, arguments);
                            arguments = J$.N(3229761, 'arguments', arguments, true, false, false);
                            chunked = J$.N(3229769, 'chunked', chunked, true, false, false);
                            J$.N(3229777, 'self', self, false, false, false);
                            J$.N(3229785, 'header', header, false, false, false);
                            var self = J$.W(3229385, 'self', J$.R(3229377, 'this', this, false, false), self, false, false);
                            if (J$.C(149648, J$.C(149640, J$.R(3229393, 'chunked', chunked, false, false)) ? J$.U(439146, '!', J$.M(3229425, J$.G(3229409, J$.R(3229401, 'self', self, false, false), 'request'), 'hasHeader', false)(J$.T(3229417, 'transfer-encoding', 21, false))) : J$._())) {
                                J$.M(3229465, J$.G(3229441, J$.R(3229433, 'self', self, false, false), 'request'), 'setHeader', false)(J$.T(3229449, 'transfer-encoding', 21, false), J$.T(3229457, 'chunked', 21, false));
                            }
                            var header = J$.W(3229505, 'header', J$.M(3229497, J$.G(3229481, J$.R(3229473, 'self', self, false, false), 'request'), 'getHeader', false)(J$.T(3229489, 'content-type', 21, false)), header, false, false);
                            if (J$.C(149672, J$.C(149656, J$.U(439154, '!', J$.R(3229513, 'header', header, false, false))) ? J$._() : J$.B(439170, '===', J$.M(3229537, J$.R(3229521, 'header', header, false, false), 'indexOf', false)(J$.T(3229529, 'multipart', 21, false)), J$.U(439162, '-', J$.T(3229545, 1, 22, false))))) {
                                J$.M(3229601, J$.G(3229561, J$.R(3229553, 'self', self, false, false), 'request'), 'setHeader', false)(J$.T(3229569, 'content-type', 21, false), J$.B(439178, '+', J$.T(3229577, 'multipart/related; boundary=', 21, false), J$.G(3229593, J$.R(3229585, 'self', self, false, false), 'boundary')));
                            } else {
                                if (J$.C(149664, J$.B(439194, '!==', J$.M(3229625, J$.R(3229609, 'header', header, false, false), 'indexOf', false)(J$.T(3229617, 'boundary', 21, false)), J$.U(439186, '-', J$.T(3229633, 1, 22, false))))) {
                                    J$.P(3229681, J$.R(3229641, 'self', self, false, false), 'boundary', J$.M(3229673, J$.R(3229649, 'header', header, false, false), 'replace', false)(J$.T(3229657, /.*boundary=([^\s;]+).*/, 14, false), J$.T(3229665, '$1', 21, false)));
                                } else {
                                    J$.M(3229745, J$.G(3229697, J$.R(3229689, 'self', self, false, false), 'request'), 'setHeader', false)(J$.T(3229705, 'content-type', 21, false), J$.B(439210, '+', J$.B(439202, '+', J$.R(3229713, 'header', header, false, false), J$.T(3229721, '; boundary=', 21, false)), J$.G(3229737, J$.R(3229729, 'self', self, false, false), 'boundary')));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(3231001, J$e);
                        } finally {
                            if (J$.Fr(3231009))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3230609, J$.G(3229817, J$.R(3229809, 'Multipart', Multipart, false, true), 'prototype'), 'build', J$.T(3230601, function (parts, chunked) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3230537, arguments.callee, this, arguments);
                            function add(part) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(3230001, arguments.callee, this, arguments);
                                            arguments = J$.N(3230009, 'arguments', arguments, true, false, false);
                                            part = J$.N(3230017, 'part', part, true, false, false);
                                            if (J$.C(149688, J$.B(439226, '===', J$.U(439218, 'typeof', J$.R(3229881, 'part', part, false, false)), J$.T(3229889, 'number', 21, false)))) {
                                                part = J$.W(3229913, 'part', J$.M(3229905, J$.R(3229897, 'part', part, false, false), 'toString', false)(), part, false, false);
                                            }
                                            return J$.Rt(3229993, J$.C(149696, J$.R(3229921, 'chunked', chunked, false, false)) ? J$.M(3229945, J$.R(3229929, 'body', body, false, false), 'append', false)(J$.R(3229937, 'part', part, false, false)) : J$.M(3229985, J$.R(3229953, 'body', body, false, false), 'push', false)(J$.M(3229977, J$.R(3229961, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3229969, 'part', part, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(3231017, J$e);
                                        } finally {
                                            if (J$.Fr(3231025))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(3230545, 'arguments', arguments, true, false, false);
                            parts = J$.N(3230553, 'parts', parts, true, false, false);
                            chunked = J$.N(3230561, 'chunked', chunked, true, false, false);
                            J$.N(3230569, 'self', self, false, false, false);
                            J$.N(3230577, 'body', body, false, false, false);
                            add = J$.N(3230593, 'add', J$.T(3230585, add, 12, false), true, false, false);
                            var self = J$.W(3229833, 'self', J$.R(3229825, 'this', this, false, false), self, false, false);
                            var body = J$.W(3229873, 'body', J$.C(149680, J$.R(3229841, 'chunked', chunked, false, false)) ? J$.F(3229857, J$.R(3229849, 'CombinedStream', CombinedStream, false, true), true)() : J$.T(3229865, [], 10, false), body, false, false);
                            if (J$.C(149704, J$.G(3230041, J$.G(3230033, J$.R(3230025, 'self', self, false, false), 'request'), 'preambleCRLF'))) {
                                J$.F(3230065, J$.R(3230049, 'add', add, false, false), false)(J$.T(3230057, '\r\n', 21, false));
                            }
                            J$.M(3230417, J$.R(3230073, 'parts', parts, false, false), 'forEach', false)(J$.T(3230409, function (part) {
                                jalangiLabel6:
                                    while (true) {
                                        try {
                                            J$.Fe(3230377, arguments.callee, this, arguments);
                                            arguments = J$.N(3230385, 'arguments', arguments, true, false, false);
                                            part = J$.N(3230393, 'part', part, true, false, false);
                                            J$.N(3230401, 'preamble', preamble, false, false, false);
                                            var preamble = J$.W(3230113, 'preamble', J$.B(439242, '+', J$.B(439234, '+', J$.T(3230081, '--', 21, false), J$.G(3230097, J$.R(3230089, 'self', self, false, false), 'boundary')), J$.T(3230105, '\r\n', 21, false)), preamble, false, false);
                                            J$.M(3230265, J$.M(3230137, J$.I(typeof Object === 'undefined' ? Object = J$.R(3230121, 'Object', undefined, true, true) : Object = J$.R(3230121, 'Object', Object, true, true)), 'keys', false)(J$.R(3230129, 'part', part, false, false)), 'forEach', false)(J$.T(3230257, function (key) {
                                                jalangiLabel5:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(3230233, arguments.callee, this, arguments);
                                                            arguments = J$.N(3230241, 'arguments', arguments, true, false, false);
                                                            key = J$.N(3230249, 'key', key, true, false, false);
                                                            if (J$.C(149712, J$.B(439250, '===', J$.R(3230145, 'key', key, false, false), J$.T(3230153, 'body', 21, false)))) {
                                                                return J$.Rt(3230161, undefined);
                                                            }
                                                            preamble = J$.W(3230225, 'preamble', J$.B(439282, '+', J$.R(3230217, 'preamble', preamble, false, false), J$.B(439274, '+', J$.B(439266, '+', J$.B(439258, '+', J$.R(3230169, 'key', key, false, false), J$.T(3230177, ': ', 21, false)), J$.G(3230201, J$.R(3230185, 'part', part, false, false), J$.R(3230193, 'key', key, false, false))), J$.T(3230209, '\r\n', 21, false))), preamble, false, false);
                                                        } catch (J$e) {
                                                            J$.Ex(3231033, J$e);
                                                        } finally {
                                                            if (J$.Fr(3231041))
                                                                continue jalangiLabel5;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            preamble = J$.W(3230289, 'preamble', J$.B(439290, '+', J$.R(3230281, 'preamble', preamble, false, false), J$.T(3230273, '\r\n', 21, false)), preamble, false, false);
                                            J$.F(3230313, J$.R(3230297, 'add', add, false, false), false)(J$.R(3230305, 'preamble', preamble, false, false));
                                            J$.F(3230345, J$.R(3230321, 'add', add, false, false), false)(J$.G(3230337, J$.R(3230329, 'part', part, false, false), 'body'));
                                            J$.F(3230369, J$.R(3230353, 'add', add, false, false), false)(J$.T(3230361, '\r\n', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(3231049, J$e);
                                        } finally {
                                            if (J$.Fr(3231057))
                                                continue jalangiLabel6;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(3230465, J$.R(3230425, 'add', add, false, false), false)(J$.B(439306, '+', J$.B(439298, '+', J$.T(3230433, '--', 21, false), J$.G(3230449, J$.R(3230441, 'self', self, false, false), 'boundary')), J$.T(3230457, '--', 21, false)));
                            if (J$.C(149720, J$.G(3230489, J$.G(3230481, J$.R(3230473, 'self', self, false, false), 'request'), 'postambleCRLF'))) {
                                J$.F(3230513, J$.R(3230497, 'add', add, false, false), false)(J$.T(3230505, '\r\n', 21, false));
                            }
                            return J$.Rt(3230529, J$.R(3230521, 'body', body, false, false));
                        } catch (J$e) {
                            J$.Ex(3231065, J$e);
                        } finally {
                            if (J$.Fr(3231073))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3230865, J$.G(3230625, J$.R(3230617, 'Multipart', Multipart, false, true), 'prototype'), 'onRequest', J$.T(3230857, function (options) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3230809, arguments.callee, this, arguments);
                            arguments = J$.N(3230817, 'arguments', arguments, true, false, false);
                            options = J$.N(3230825, 'options', options, true, false, false);
                            J$.N(3230833, 'self', self, false, false, false);
                            J$.N(3230841, 'chunked', chunked, false, false, false);
                            J$.N(3230849, 'parts', parts, false, false, false);
                            var self = J$.W(3230641, 'self', J$.R(3230633, 'this', this, false, false), self, false, false);
                            var chunked = J$.W(3230673, 'chunked', J$.M(3230665, J$.R(3230649, 'self', self, false, false), 'isChunked', false)(J$.R(3230657, 'options', options, false, false)), chunked, false, false);
                            var parts = J$.W(3230705, 'parts', J$.C(149728, J$.G(3230689, J$.R(3230681, 'options', options, false, false), 'data')) ? J$._() : J$.R(3230697, 'options', options, false, false), parts, false, false);
                            J$.M(3230729, J$.R(3230713, 'self', self, false, false), 'setHeaders', false)(J$.R(3230721, 'chunked', chunked, false, false));
                            J$.P(3230753, J$.R(3230737, 'self', self, false, false), 'chunked', J$.R(3230745, 'chunked', chunked, false, false));
                            J$.P(3230801, J$.R(3230761, 'self', self, false, false), 'body', J$.M(3230793, J$.R(3230769, 'self', self, false, false), 'build', false)(J$.R(3230777, 'parts', parts, false, false), J$.R(3230785, 'chunked', chunked, false, false)));
                        } catch (J$e) {
                            J$.Ex(3231081, J$e);
                        } finally {
                            if (J$.Fr(3231089))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3230889, J$.I(typeof exports === 'undefined' ? exports = J$.R(3230873, 'exports', undefined, true, true) : exports = J$.R(3230873, 'exports', exports, true, true)), 'Multipart', J$.R(3230881, 'Multipart', Multipart, false, true));
        } catch (J$e) {
            J$.Ex(3231097, J$e);
        } finally {
            if (J$.Sr(3231105))
                continue jalangiLabel9;
            else
                break jalangiLabel9;
        }
    }
// JALANGI DO NOT INSTRUMENT

