J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(3858489, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/lodash/_baseReduce.js');
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3858409, arguments.callee, this, arguments);
                            arguments = J$.N(3858417, 'arguments', arguments, true, false, false);
                            collection = J$.N(3858425, 'collection', collection, true, false, false);
                            iteratee = J$.N(3858433, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(3858441, 'accumulator', accumulator, true, false, false);
                            initAccum = J$.N(3858449, 'initAccum', initAccum, true, false, false);
                            eachFunc = J$.N(3858457, 'eachFunc', eachFunc, true, false, false);
                            J$.F(3858385, J$.R(3858233, 'eachFunc', eachFunc, false, false), false)(J$.R(3858241, 'collection', collection, false, false), J$.T(3858377, function (value, index, collection) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3858337, arguments.callee, this, arguments);
                                            arguments = J$.N(3858345, 'arguments', arguments, true, false, false);
                                            value = J$.N(3858353, 'value', value, true, false, false);
                                            index = J$.N(3858361, 'index', index, true, false, false);
                                            collection = J$.N(3858369, 'collection', collection, true, false, false);
                                            accumulator = J$.W(3858329, 'accumulator', J$.C(203336, J$.R(3858249, 'initAccum', initAccum, false, false)) ? (initAccum = J$.W(3858265, 'initAccum', J$.T(3858257, false, 23, false), initAccum, false, false), J$.R(3858273, 'value', value, false, false)) : J$.F(3858321, J$.R(3858281, 'iteratee', iteratee, false, false), false)(J$.R(3858289, 'accumulator', accumulator, false, false), J$.R(3858297, 'value', value, false, false), J$.R(3858305, 'index', index, false, false), J$.R(3858313, 'collection', collection, false, false)), accumulator, false, false);
                                        } catch (J$e) {
                                            J$.Ex(3858513, J$e);
                                        } finally {
                                            if (J$.Fr(3858521))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(3858401, J$.R(3858393, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(3858529, J$e);
                        } finally {
                            if (J$.Fr(3858537))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseReduce = J$.N(3858505, 'baseReduce', J$.T(3858497, baseReduce, 12, false), true, false, false);
            J$.T(3858225, 'use strict', 21, false);
            J$.P(3858481, J$.I(typeof module === 'undefined' ? module = J$.R(3858465, 'module', undefined, true, true) : module = J$.R(3858465, 'module', module, true, true)), 'exports', J$.R(3858473, 'baseReduce', baseReduce, false, true));
        } catch (J$e) {
            J$.Ex(3858545, J$e);
        } finally {
            if (J$.Sr(3858553))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

