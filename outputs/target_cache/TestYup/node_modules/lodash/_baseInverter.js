J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(3837633, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/lodash/_baseInverter.js');
            function baseInverter(object, setter, iteratee, accumulator) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3837561, arguments.callee, this, arguments);
                            arguments = J$.N(3837569, 'arguments', arguments, true, false, false);
                            object = J$.N(3837577, 'object', object, true, false, false);
                            setter = J$.N(3837585, 'setter', setter, true, false, false);
                            iteratee = J$.N(3837593, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(3837601, 'accumulator', accumulator, true, false, false);
                            J$.F(3837537, J$.R(3837409, 'baseForOwn', baseForOwn, false, true), false)(J$.R(3837417, 'object', object, false, false), J$.T(3837529, function (value, key, object) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3837489, arguments.callee, this, arguments);
                                            arguments = J$.N(3837497, 'arguments', arguments, true, false, false);
                                            value = J$.N(3837505, 'value', value, true, false, false);
                                            key = J$.N(3837513, 'key', key, true, false, false);
                                            object = J$.N(3837521, 'object', object, true, false, false);
                                            J$.F(3837481, J$.R(3837425, 'setter', setter, false, false), false)(J$.R(3837433, 'accumulator', accumulator, false, false), J$.F(3837457, J$.R(3837441, 'iteratee', iteratee, false, false), false)(J$.R(3837449, 'value', value, false, false)), J$.R(3837465, 'key', key, false, false), J$.R(3837473, 'object', object, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3837665, J$e);
                                        } finally {
                                            if (J$.Fr(3837673))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(3837553, J$.R(3837545, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(3837681, J$e);
                        } finally {
                            if (J$.Fr(3837689))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3837641, 'baseForOwn', baseForOwn, false, false, false);
            baseInverter = J$.N(3837657, 'baseInverter', J$.T(3837649, baseInverter, 12, false), true, false, false);
            J$.T(3837369, 'use strict', 21, false);
            var baseForOwn = J$.W(3837401, 'baseForOwn', J$.F(3837393, J$.I(typeof require === 'undefined' ? require = J$.R(3837377, 'require', undefined, true, true) : require = J$.R(3837377, 'require', require, true, true)), false)(J$.T(3837385, './_baseForOwn', 21, false)), baseForOwn, false, true);
            J$.P(3837625, J$.I(typeof module === 'undefined' ? module = J$.R(3837609, 'module', undefined, true, true) : module = J$.R(3837609, 'module', module, true, true)), 'exports', J$.R(3837617, 'baseInverter', baseInverter, false, true));
        } catch (J$e) {
            J$.Ex(3837697, J$e);
        } finally {
            if (J$.Sr(3837705))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

