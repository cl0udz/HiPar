J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(4540257, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/lodash/nthArg.js');
            function nthArg(n) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4540209, arguments.callee, this, arguments);
                            arguments = J$.N(4540217, 'arguments', arguments, true, false, false);
                            n = J$.N(4540225, 'n', n, true, false, false);
                            n = J$.W(4540105, 'n', J$.F(4540097, J$.R(4540081, 'toInteger', toInteger, false, true), false)(J$.R(4540089, 'n', n, false, false)), n, false, false);
                            return J$.Rt(4540201, J$.F(4540193, J$.R(4540113, 'baseRest', baseRest, false, true), false)(J$.T(4540185, function (args) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(4540161, arguments.callee, this, arguments);
                                            arguments = J$.N(4540169, 'arguments', arguments, true, false, false);
                                            args = J$.N(4540177, 'args', args, true, false, false);
                                            return J$.Rt(4540153, J$.F(4540145, J$.R(4540121, 'baseNth', baseNth, false, true), false)(J$.R(4540129, 'args', args, false, false), J$.R(4540137, 'n', n, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(4540305, J$e);
                                        } finally {
                                            if (J$.Fr(4540313))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(4540321, J$e);
                        } finally {
                            if (J$.Fr(4540329))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4540265, 'baseNth', baseNth, false, false, false);
            J$.N(4540273, 'baseRest', baseRest, false, false, false);
            J$.N(4540281, 'toInteger', toInteger, false, false, false);
            nthArg = J$.N(4540297, 'nthArg', J$.T(4540289, nthArg, 12, false), true, false, false);
            J$.T(4539977, 'use strict', 21, false);
            var baseNth = J$.W(4540057, 'baseNth', J$.F(4540001, J$.I(typeof require === 'undefined' ? require = J$.R(4539985, 'require', undefined, true, true) : require = J$.R(4539985, 'require', require, true, true)), false)(J$.T(4539993, './_baseNth', 21, false)), baseNth, false, true), baseRest = J$.W(4540065, 'baseRest', J$.F(4540025, J$.I(typeof require === 'undefined' ? require = J$.R(4540009, 'require', undefined, true, true) : require = J$.R(4540009, 'require', require, true, true)), false)(J$.T(4540017, './_baseRest', 21, false)), baseRest, false, true), toInteger = J$.W(4540073, 'toInteger', J$.F(4540049, J$.I(typeof require === 'undefined' ? require = J$.R(4540033, 'require', undefined, true, true) : require = J$.R(4540033, 'require', require, true, true)), false)(J$.T(4540041, './toInteger', 21, false)), toInteger, false, true);
            J$.P(4540249, J$.I(typeof module === 'undefined' ? module = J$.R(4540233, 'module', undefined, true, true) : module = J$.R(4540233, 'module', module, true, true)), 'exports', J$.R(4540241, 'nthArg', nthArg, false, true));
        } catch (J$e) {
            J$.Ex(4540337, J$e);
        } finally {
            if (J$.Sr(4540345))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

