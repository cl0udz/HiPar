J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(4579409, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/lodash/toNumber.js');
            function toNumber(value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4579345, arguments.callee, this, arguments);
                            arguments = J$.N(4579353, 'arguments', arguments, true, false, false);
                            value = J$.N(4579361, 'value', value, true, false, false);
                            J$.N(4579369, 'other', other, false, false, false);
                            J$.N(4579377, 'isBinary', isBinary, false, false, false);
                            if (J$.C(245504, J$.B(476634, '==', J$.U(476626, 'typeof', J$.R(4578865, 'value', value, false, false)), J$.T(4578873, 'number', 21, false)))) {
                                return J$.Rt(4578889, J$.R(4578881, 'value', value, false, false));
                            }
                            if (J$.C(245512, J$.F(4578913, J$.R(4578897, 'isSymbol', isSymbol, false, true), false)(J$.R(4578905, 'value', value, false, false)))) {
                                return J$.Rt(4578929, J$.R(4578921, 'NAN', NAN, false, true));
                            }
                            if (J$.C(245536, J$.F(4578953, J$.R(4578937, 'isObject', isObject, false, true), false)(J$.R(4578945, 'value', value, false, false)))) {
                                var other = J$.W(4579009, 'other', J$.C(245520, J$.B(476650, '==', J$.U(476642, 'typeof', J$.G(4578969, J$.R(4578961, 'value', value, false, false), 'valueOf')), J$.T(4578977, 'function', 21, false))) ? J$.M(4578993, J$.R(4578985, 'value', value, false, false), 'valueOf', false)() : J$.R(4579001, 'value', value, false, false), other, false, false);
                                value = J$.W(4579065, 'value', J$.C(245528, J$.F(4579033, J$.R(4579017, 'isObject', isObject, false, true), false)(J$.R(4579025, 'other', other, false, false))) ? J$.B(476658, '+', J$.R(4579041, 'other', other, false, false), J$.T(4579049, '', 21, false)) : J$.R(4579057, 'other', other, false, false), value, false, false);
                            }
                            if (J$.C(245552, J$.B(476674, '!=', J$.U(476666, 'typeof', J$.R(4579073, 'value', value, false, false)), J$.T(4579081, 'string', 21, false)))) {
                                return J$.Rt(4579121, J$.C(245544, J$.B(476682, '===', J$.R(4579089, 'value', value, false, false), J$.T(4579097, 0, 22, false))) ? J$.R(4579105, 'value', value, false, false) : J$.U(476690, '+', J$.R(4579113, 'value', value, false, false)));
                            }
                            value = J$.W(4579161, 'value', J$.M(4579153, J$.R(4579129, 'value', value, false, false), 'replace', false)(J$.R(4579137, 'reTrim', reTrim, false, true), J$.T(4579145, '', 21, false)), value, false, false);
                            var isBinary = J$.W(4579193, 'isBinary', J$.M(4579185, J$.R(4579169, 'reIsBinary', reIsBinary, false, true), 'test', false)(J$.R(4579177, 'value', value, false, false)), isBinary, false, false);
                            return J$.Rt(4579337, J$.C(245584, J$.C(245560, J$.R(4579201, 'isBinary', isBinary, false, false)) ? J$._() : J$.M(4579225, J$.R(4579209, 'reIsOctal', reIsOctal, false, true), 'test', false)(J$.R(4579217, 'value', value, false, false))) ? J$.F(4579289, J$.R(4579233, 'freeParseInt', freeParseInt, false, true), false)(J$.M(4579257, J$.R(4579241, 'value', value, false, false), 'slice', false)(J$.T(4579249, 2, 22, false)), J$.C(245568, J$.R(4579265, 'isBinary', isBinary, false, false)) ? J$.T(4579273, 2, 22, false) : J$.T(4579281, 8, 22, false)) : J$.C(245576, J$.M(4579313, J$.R(4579297, 'reIsBadHex', reIsBadHex, false, true), 'test', false)(J$.R(4579305, 'value', value, false, false))) ? J$.R(4579321, 'NAN', NAN, false, true) : J$.U(476698, '+', J$.R(4579329, 'value', value, false, false)));
                        } catch (J$e) {
                            J$.Ex(4579497, J$e);
                        } finally {
                            if (J$.Fr(4579505))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4579417, 'isObject', isObject, false, false, false);
            J$.N(4579425, 'isSymbol', isSymbol, false, false, false);
            J$.N(4579433, 'NAN', NAN, false, false, false);
            J$.N(4579441, 'reTrim', reTrim, false, false, false);
            J$.N(4579449, 'reIsBadHex', reIsBadHex, false, false, false);
            J$.N(4579457, 'reIsBinary', reIsBinary, false, false, false);
            J$.N(4579465, 'reIsOctal', reIsOctal, false, false, false);
            J$.N(4579473, 'freeParseInt', freeParseInt, false, false, false);
            toNumber = J$.N(4579489, 'toNumber', J$.T(4579481, toNumber, 12, false), true, false, false);
            J$.T(4578593, 'use strict', 21, false);
            J$.F(4578617, J$.I(typeof require === 'undefined' ? require = J$.R(4578601, 'require', undefined, true, true) : require = J$.R(4578601, 'require', require, true, true)), false)(J$.T(4578609, 'core-js/modules/es.array.slice', 21, false));
            J$.F(4578641, J$.I(typeof require === 'undefined' ? require = J$.R(4578625, 'require', undefined, true, true) : require = J$.R(4578625, 'require', require, true, true)), false)(J$.T(4578633, 'core-js/modules/es.parse-int', 21, false));
            J$.F(4578665, J$.I(typeof require === 'undefined' ? require = J$.R(4578649, 'require', undefined, true, true) : require = J$.R(4578649, 'require', require, true, true)), false)(J$.T(4578657, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(4578689, J$.I(typeof require === 'undefined' ? require = J$.R(4578673, 'require', undefined, true, true) : require = J$.R(4578673, 'require', require, true, true)), false)(J$.T(4578681, 'core-js/modules/es.string.replace', 21, false));
            var isObject = J$.W(4578745, 'isObject', J$.F(4578713, J$.I(typeof require === 'undefined' ? require = J$.R(4578697, 'require', undefined, true, true) : require = J$.R(4578697, 'require', require, true, true)), false)(J$.T(4578705, './isObject', 21, false)), isObject, false, true), isSymbol = J$.W(4578753, 'isSymbol', J$.F(4578737, J$.I(typeof require === 'undefined' ? require = J$.R(4578721, 'require', undefined, true, true) : require = J$.R(4578721, 'require', require, true, true)), false)(J$.T(4578729, './isSymbol', 21, false)), isSymbol, false, true);
            var NAN = J$.W(4578777, 'NAN', J$.B(476618, '/', J$.T(4578761, 0, 22, false), J$.T(4578769, 0, 22, false)), NAN, false, true);
            var reTrim = J$.W(4578793, 'reTrim', J$.T(4578785, /^\s+|\s+$/g, 14, false), reTrim, false, true);
            var reIsBadHex = J$.W(4578809, 'reIsBadHex', J$.T(4578801, /^[-+]0x[0-9a-f]+$/i, 14, false), reIsBadHex, false, true);
            var reIsBinary = J$.W(4578825, 'reIsBinary', J$.T(4578817, /^0b[01]+$/i, 14, false), reIsBinary, false, true);
            var reIsOctal = J$.W(4578841, 'reIsOctal', J$.T(4578833, /^0o[0-7]+$/i, 14, false), reIsOctal, false, true);
            var freeParseInt = J$.W(4578857, 'freeParseInt', J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(4578849, 'parseInt', undefined, true, true) : parseInt = J$.R(4578849, 'parseInt', parseInt, true, true)), freeParseInt, false, true);
            J$.P(4579401, J$.I(typeof module === 'undefined' ? module = J$.R(4579385, 'module', undefined, true, true) : module = J$.R(4579385, 'module', module, true, true)), 'exports', J$.R(4579393, 'toNumber', toNumber, false, true));
        } catch (J$e) {
            J$.Ex(4579513, J$e);
        } finally {
            if (J$.Sr(4579521))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

