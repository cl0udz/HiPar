J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(4557209, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/lodash/rest.js');
            function rest(func, start) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4557153, arguments.callee, this, arguments);
                            arguments = J$.N(4557161, 'arguments', arguments, true, false, false);
                            func = J$.N(4557169, 'func', func, true, false, false);
                            start = J$.N(4557177, 'start', start, true, false, false);
                            if (J$.C(244480, J$.B(475578, '!=', J$.U(475570, 'typeof', J$.R(4557017, 'func', func, false, false)), J$.T(4557025, 'function', 21, false)))) {
                                throw J$.F(4557049, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4557033, 'TypeError', undefined, true, true) : TypeError = J$.R(4557033, 'TypeError', TypeError, true, true)), true)(J$.R(4557041, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, true));
                            }
                            start = J$.W(4557105, 'start', J$.C(244488, J$.B(475586, '===', J$.R(4557057, 'start', start, false, false), J$.T(4557065, undefined, 24, false))) ? J$.R(4557073, 'start', start, false, false) : J$.F(4557097, J$.R(4557081, 'toInteger', toInteger, false, true), false)(J$.R(4557089, 'start', start, false, false)), start, false, false);
                            return J$.Rt(4557145, J$.F(4557137, J$.R(4557113, 'baseRest', baseRest, false, true), false)(J$.R(4557121, 'func', func, false, false), J$.R(4557129, 'start', start, false, false)));
                        } catch (J$e) {
                            J$.Ex(4557257, J$e);
                        } finally {
                            if (J$.Fr(4557265))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4557217, 'baseRest', baseRest, false, false, false);
            J$.N(4557225, 'toInteger', toInteger, false, false, false);
            J$.N(4557233, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, false, false);
            rest = J$.N(4557249, 'rest', J$.T(4557241, rest, 12, false), true, false, false);
            J$.T(4556929, 'use strict', 21, false);
            var baseRest = J$.W(4556985, 'baseRest', J$.F(4556953, J$.I(typeof require === 'undefined' ? require = J$.R(4556937, 'require', undefined, true, true) : require = J$.R(4556937, 'require', require, true, true)), false)(J$.T(4556945, './_baseRest', 21, false)), baseRest, false, true), toInteger = J$.W(4556993, 'toInteger', J$.F(4556977, J$.I(typeof require === 'undefined' ? require = J$.R(4556961, 'require', undefined, true, true) : require = J$.R(4556961, 'require', require, true, true)), false)(J$.T(4556969, './toInteger', 21, false)), toInteger, false, true);
            var FUNC_ERROR_TEXT = J$.W(4557009, 'FUNC_ERROR_TEXT', J$.T(4557001, 'Expected a function', 21, false), FUNC_ERROR_TEXT, false, true);
            J$.P(4557201, J$.I(typeof module === 'undefined' ? module = J$.R(4557185, 'module', undefined, true, true) : module = J$.R(4557185, 'module', module, true, true)), 'exports', J$.R(4557193, 'rest', rest, false, true));
        } catch (J$e) {
            J$.Ex(4557273, J$e);
        } finally {
            if (J$.Sr(4557281))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

