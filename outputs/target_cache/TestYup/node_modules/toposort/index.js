J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(4683977, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestYup/node_modules/toposort/index.js');
            function toposort(nodes, edges) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4682913, arguments.callee, this, arguments);
                            function visit(node, i, predecessors) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(4682849, arguments.callee, this, arguments);
                                            arguments = J$.N(4682857, 'arguments', arguments, true, false, false);
                                            node = J$.N(4682865, 'node', node, true, false, false);
                                            i = J$.N(4682873, 'i', i, true, false, false);
                                            predecessors = J$.N(4682881, 'predecessors', predecessors, true, false, false);
                                            J$.N(4682889, 'nodeRep', nodeRep, false, false, false);
                                            J$.N(4682897, 'outgoing', outgoing, false, false, false);
                                            J$.N(4682905, 'child', child, false, false, false);
                                            if (J$.C(248872, J$.M(4682305, J$.R(4682289, 'predecessors', predecessors, false, false), 'has', false)(J$.R(4682297, 'node', node, false, false)))) {
                                                var nodeRep;
                                                try {
                                                    nodeRep = J$.W(4682345, 'nodeRep', J$.B(479170, '+', J$.T(4682313, ', node was:', 21, false), J$.M(4682337, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(4682321, 'JSON', undefined, true, true) : JSON = J$.R(4682321, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(4682329, 'node', node, false, false))), nodeRep, false, false);
                                                } catch (e) {
                                                    J$.N(4682369, 'e', e, false, false, true);
                                                    nodeRep = J$.W(4682361, 'nodeRep', J$.T(4682353, '', 21, false), nodeRep, false, false);
                                                }
                                                throw J$.F(4682401, J$.I(typeof Error === 'undefined' ? Error = J$.R(4682377, 'Error', undefined, true, true) : Error = J$.R(4682377, 'Error', Error, true, true)), true)(J$.B(479178, '+', J$.T(4682385, 'Cyclic dependency', 21, false), J$.R(4682393, 'nodeRep', nodeRep, false, false)));
                                            }
                                            if (J$.C(248880, J$.U(479186, '!', J$.M(4682425, J$.R(4682409, 'nodesHash', nodesHash, false, false), 'has', false)(J$.R(4682417, 'node', node, false, false))))) {
                                                throw J$.F(4682473, J$.I(typeof Error === 'undefined' ? Error = J$.R(4682433, 'Error', undefined, true, true) : Error = J$.R(4682433, 'Error', Error, true, true)), true)(J$.B(479194, '+', J$.T(4682441, 'Found unknown node. Make sure to provided all involved nodes. Unknown node: ', 21, false), J$.M(4682465, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(4682449, 'JSON', undefined, true, true) : JSON = J$.R(4682449, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(4682457, 'node', node, false, false))));
                                            }
                                            if (J$.C(248888, J$.G(4682497, J$.R(4682481, 'visited', visited, false, false), J$.R(4682489, 'i', i, false, false))))
                                                return J$.Rt(4682505, undefined);
                                            J$.P(4682537, J$.R(4682513, 'visited', visited, false, false), J$.R(4682521, 'i', i, false, false), J$.T(4682529, true, 23, false));
                                            var outgoing = J$.W(4682585, 'outgoing', J$.C(248896, J$.M(4682561, J$.R(4682545, 'outgoingEdges', outgoingEdges, false, false), 'get', false)(J$.R(4682553, 'node', node, false, false))) ? J$._() : J$.F(4682577, J$.I(typeof Set === 'undefined' ? Set = J$.R(4682569, 'Set', undefined, true, true) : Set = J$.R(4682569, 'Set', Set, true, true)), true)(), outgoing, false, false);
                                            outgoing = J$.W(4682617, 'outgoing', J$.M(4682609, J$.I(typeof Array === 'undefined' ? Array = J$.R(4682593, 'Array', undefined, true, true) : Array = J$.R(4682593, 'Array', Array, true, true)), 'from', false)(J$.R(4682601, 'outgoing', outgoing, false, false)), outgoing, false, false);
                                            if (J$.C(248912, i = J$.W(4682641, 'i', J$.G(4682633, J$.R(4682625, 'outgoing', outgoing, false, false), 'length'), i, false, false))) {
                                                J$.M(4682665, J$.R(4682649, 'predecessors', predecessors, false, false), 'add', false)(J$.R(4682657, 'node', node, false, false));
                                                do {
                                                    var child = J$.W(4682705, 'child', J$.G(4682697, J$.R(4682673, 'outgoing', outgoing, false, false), i = J$.W(4682689, 'i', J$.B(479210, '-', J$.U(479202, '+', J$.R(4682681, 'i', i, false, false)), 1), i, false, false)), child, false, false);
                                                    J$.F(4682761, J$.R(4682713, 'visit', visit, false, false), false)(J$.R(4682721, 'child', child, false, false), J$.M(4682745, J$.R(4682729, 'nodesHash', nodesHash, false, false), 'get', false)(J$.R(4682737, 'child', child, false, false)), J$.R(4682753, 'predecessors', predecessors, false, false));
                                                } while (J$.C(248904, J$.R(4682769, 'i', i, false, false)));
                                                J$.M(4682801, J$.R(4682777, 'predecessors', predecessors, false, false), J$.T(4682785, 'delete', 21, false), false)(J$.R(4682793, 'node', node, false, false));
                                            }
                                            J$.P(4682841, J$.R(4682809, 'sorted', sorted, false, false), cursor = J$.W(4682825, 'cursor', J$.B(479226, '-', J$.U(479218, '+', J$.R(4682817, 'cursor', cursor, false, false)), 1), cursor, false, false), J$.R(4682833, 'node', node, false, false));
                                        } catch (J$e) {
                                            J$.Ex(4684081, J$e);
                                        } finally {
                                            if (J$.Fr(4684089))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(4682921, 'arguments', arguments, true, false, false);
                            nodes = J$.N(4682929, 'nodes', nodes, true, false, false);
                            edges = J$.N(4682937, 'edges', edges, true, false, false);
                            J$.N(4682945, 'cursor', cursor, false, false, false);
                            J$.N(4682953, 'sorted', sorted, false, false, false);
                            J$.N(4682961, 'visited', visited, false, false, false);
                            J$.N(4682969, 'i', i, false, false, false);
                            J$.N(4682977, 'outgoingEdges', outgoingEdges, false, false, false);
                            J$.N(4682985, 'nodesHash', nodesHash, false, false, false);
                            visit = J$.N(4683001, 'visit', J$.T(4682993, visit, 12, false), true, false, false);
                            var cursor = J$.W(4681969, 'cursor', J$.G(4681873, J$.R(4681865, 'nodes', nodes, false, false), 'length'), cursor, false, false), sorted = J$.W(4681977, 'sorted', J$.F(4681897, J$.I(typeof Array === 'undefined' ? Array = J$.R(4681881, 'Array', undefined, true, true) : Array = J$.R(4681881, 'Array', Array, true, true)), true)(J$.R(4681889, 'cursor', cursor, false, false)), sorted, false, false), visited = J$.W(4681985, 'visited', J$.T(4681905, {}, 11, false), visited, false, false), i = J$.W(4681993, 'i', J$.R(4681913, 'cursor', cursor, false, false), i, false, false), outgoingEdges = J$.W(4682001, 'outgoingEdges', J$.F(4681937, J$.R(4681921, 'makeOutgoingEdges', makeOutgoingEdges, false, true), false)(J$.R(4681929, 'edges', edges, false, false)), outgoingEdges, false, false), nodesHash = J$.W(4682009, 'nodesHash', J$.F(4681961, J$.R(4681945, 'makeNodesHash', makeNodesHash, false, true), false)(J$.R(4681953, 'nodes', nodes, false, false)), nodesHash, false, false);
                            J$.M(4682161, J$.R(4682017, 'edges', edges, false, false), 'forEach', false)(J$.T(4682153, function (edge) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(4682129, arguments.callee, this, arguments);
                                            arguments = J$.N(4682137, 'arguments', arguments, true, false, false);
                                            edge = J$.N(4682145, 'edge', edge, true, false, false);
                                            if (J$.C(248848, J$.C(248840, J$.U(479122, '!', J$.M(4682057, J$.R(4682025, 'nodesHash', nodesHash, false, false), 'has', false)(J$.G(4682049, J$.R(4682033, 'edge', edge, false, false), J$.T(4682041, 0, 22, false))))) ? J$._() : J$.U(479130, '!', J$.M(4682097, J$.R(4682065, 'nodesHash', nodesHash, false, false), 'has', false)(J$.G(4682089, J$.R(4682073, 'edge', edge, false, false), J$.T(4682081, 1, 22, false)))))) {
                                                throw J$.F(4682121, J$.I(typeof Error === 'undefined' ? Error = J$.R(4682105, 'Error', undefined, true, true) : Error = J$.R(4682105, 'Error', Error, true, true)), true)(J$.T(4682113, 'Unknown node. There is an unknown node in the supplied edges.', 21, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(4684065, J$e);
                                        } finally {
                                            if (J$.Fr(4684073))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            while (J$.C(248864, J$.B(479154, '+', i = J$.W(4682177, 'i', J$.B(479146, '-', J$.U(479138, '+', J$.R(4682169, 'i', i, false, false)), 1), i, false, false), 1))) {
                                if (J$.C(248856, J$.U(479162, '!', J$.G(4682201, J$.R(4682185, 'visited', visited, false, false), J$.R(4682193, 'i', i, false, false)))))
                                    J$.F(4682265, J$.R(4682209, 'visit', visit, false, false), false)(J$.G(4682233, J$.R(4682217, 'nodes', nodes, false, false), J$.R(4682225, 'i', i, false, false)), J$.R(4682241, 'i', i, false, false), J$.F(4682257, J$.I(typeof Set === 'undefined' ? Set = J$.R(4682249, 'Set', undefined, true, true) : Set = J$.R(4682249, 'Set', Set, true, true)), true)());
                            }
                            return J$.Rt(4682281, J$.R(4682273, 'sorted', sorted, false, false));
                        } catch (J$e) {
                            J$.Ex(4684097, J$e);
                        } finally {
                            if (J$.Fr(4684105))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function uniqueNodes(arr) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4683249, arguments.callee, this, arguments);
                            arguments = J$.N(4683257, 'arguments', arguments, true, false, false);
                            arr = J$.N(4683265, 'arr', arr, true, false, false);
                            J$.N(4683273, 'res', res, false, false, false);
                            J$.N(4683281, 'i', i, false, false, false);
                            J$.N(4683289, 'len', len, false, false, false);
                            J$.N(4683297, 'edge', edge, false, false, false);
                            var res = J$.W(4683025, 'res', J$.F(4683017, J$.I(typeof Set === 'undefined' ? Set = J$.R(4683009, 'Set', undefined, true, true) : Set = J$.R(4683009, 'Set', Set, true, true)), true)(), res, false, false);
                            for (var i = J$.W(4683057, 'i', J$.T(4683033, 0, 22, false), i, false, false), len = J$.W(4683065, 'len', J$.G(4683049, J$.R(4683041, 'arr', arr, false, false), 'length'), len, false, false); J$.C(248920, J$.B(479234, '<', J$.R(4683073, 'i', i, false, false), J$.R(4683081, 'len', len, false, false))); J$.B(479258, '-', i = J$.W(4683097, 'i', J$.B(479250, '+', J$.U(479242, '+', J$.R(4683089, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var edge = J$.W(4683129, 'edge', J$.G(4683121, J$.R(4683105, 'arr', arr, false, false), J$.R(4683113, 'i', i, false, false)), edge, false, false);
                                J$.M(4683169, J$.R(4683137, 'res', res, false, false), 'add', false)(J$.G(4683161, J$.R(4683145, 'edge', edge, false, false), J$.T(4683153, 0, 22, false)));
                                J$.M(4683209, J$.R(4683177, 'res', res, false, false), 'add', false)(J$.G(4683201, J$.R(4683185, 'edge', edge, false, false), J$.T(4683193, 1, 22, false)));
                            }
                            return J$.Rt(4683241, J$.M(4683233, J$.I(typeof Array === 'undefined' ? Array = J$.R(4683217, 'Array', undefined, true, true) : Array = J$.R(4683217, 'Array', Array, true, true)), 'from', false)(J$.R(4683225, 'res', res, false, false)));
                        } catch (J$e) {
                            J$.Ex(4684113, J$e);
                        } finally {
                            if (J$.Fr(4684121))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function makeOutgoingEdges(arr) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4683713, arguments.callee, this, arguments);
                            arguments = J$.N(4683721, 'arguments', arguments, true, false, false);
                            arr = J$.N(4683729, 'arr', arr, true, false, false);
                            J$.N(4683737, 'edges', edges, false, false, false);
                            J$.N(4683745, 'i', i, false, false, false);
                            J$.N(4683753, 'len', len, false, false, false);
                            J$.N(4683761, 'edge', edge, false, false, false);
                            var edges = J$.W(4683321, 'edges', J$.F(4683313, J$.I(typeof Map === 'undefined' ? Map = J$.R(4683305, 'Map', undefined, true, true) : Map = J$.R(4683305, 'Map', Map, true, true)), true)(), edges, false, false);
                            for (var i = J$.W(4683353, 'i', J$.T(4683329, 0, 22, false), i, false, false), len = J$.W(4683361, 'len', J$.G(4683345, J$.R(4683337, 'arr', arr, false, false), 'length'), len, false, false); J$.C(248944, J$.B(479266, '<', J$.R(4683369, 'i', i, false, false), J$.R(4683377, 'len', len, false, false))); J$.B(479290, '-', i = J$.W(4683393, 'i', J$.B(479282, '+', J$.U(479274, '+', J$.R(4683385, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var edge = J$.W(4683425, 'edge', J$.G(4683417, J$.R(4683401, 'arr', arr, false, false), J$.R(4683409, 'i', i, false, false)), edge, false, false);
                                if (J$.C(248928, J$.U(479298, '!', J$.M(4683465, J$.R(4683433, 'edges', edges, false, false), 'has', false)(J$.G(4683457, J$.R(4683441, 'edge', edge, false, false), J$.T(4683449, 0, 22, false))))))
                                    J$.M(4683521, J$.R(4683473, 'edges', edges, false, false), 'set', false)(J$.G(4683497, J$.R(4683481, 'edge', edge, false, false), J$.T(4683489, 0, 22, false)), J$.F(4683513, J$.I(typeof Set === 'undefined' ? Set = J$.R(4683505, 'Set', undefined, true, true) : Set = J$.R(4683505, 'Set', Set, true, true)), true)());
                                if (J$.C(248936, J$.U(479306, '!', J$.M(4683561, J$.R(4683529, 'edges', edges, false, false), 'has', false)(J$.G(4683553, J$.R(4683537, 'edge', edge, false, false), J$.T(4683545, 1, 22, false))))))
                                    J$.M(4683617, J$.R(4683569, 'edges', edges, false, false), 'set', false)(J$.G(4683593, J$.R(4683577, 'edge', edge, false, false), J$.T(4683585, 1, 22, false)), J$.F(4683609, J$.I(typeof Set === 'undefined' ? Set = J$.R(4683601, 'Set', undefined, true, true) : Set = J$.R(4683601, 'Set', Set, true, true)), true)());
                                J$.M(4683689, J$.M(4683657, J$.R(4683625, 'edges', edges, false, false), 'get', false)(J$.G(4683649, J$.R(4683633, 'edge', edge, false, false), J$.T(4683641, 0, 22, false))), 'add', false)(J$.G(4683681, J$.R(4683665, 'edge', edge, false, false), J$.T(4683673, 1, 22, false)));
                            }
                            return J$.Rt(4683705, J$.R(4683697, 'edges', edges, false, false));
                        } catch (J$e) {
                            J$.Ex(4684129, J$e);
                        } finally {
                            if (J$.Fr(4684137))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function makeNodesHash(arr) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4683929, arguments.callee, this, arguments);
                            arguments = J$.N(4683937, 'arguments', arguments, true, false, false);
                            arr = J$.N(4683945, 'arr', arr, true, false, false);
                            J$.N(4683953, 'res', res, false, false, false);
                            J$.N(4683961, 'i', i, false, false, false);
                            J$.N(4683969, 'len', len, false, false, false);
                            var res = J$.W(4683785, 'res', J$.F(4683777, J$.I(typeof Map === 'undefined' ? Map = J$.R(4683769, 'Map', undefined, true, true) : Map = J$.R(4683769, 'Map', Map, true, true)), true)(), res, false, false);
                            for (var i = J$.W(4683817, 'i', J$.T(4683793, 0, 22, false), i, false, false), len = J$.W(4683825, 'len', J$.G(4683809, J$.R(4683801, 'arr', arr, false, false), 'length'), len, false, false); J$.C(248952, J$.B(479314, '<', J$.R(4683833, 'i', i, false, false), J$.R(4683841, 'len', len, false, false))); J$.B(479338, '-', i = J$.W(4683857, 'i', J$.B(479330, '+', J$.U(479322, '+', J$.R(4683849, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.M(4683905, J$.R(4683865, 'res', res, false, false), 'set', false)(J$.G(4683889, J$.R(4683873, 'arr', arr, false, false), J$.R(4683881, 'i', i, false, false)), J$.R(4683897, 'i', i, false, false));
                            }
                            return J$.Rt(4683921, J$.R(4683913, 'res', res, false, false));
                        } catch (J$e) {
                            J$.Ex(4684145, J$e);
                        } finally {
                            if (J$.Fr(4684153))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            toposort = J$.N(4683993, 'toposort', J$.T(4683985, toposort, 12, false), true, false, false);
            uniqueNodes = J$.N(4684009, 'uniqueNodes', J$.T(4684001, uniqueNodes, 12, false), true, false, false);
            makeOutgoingEdges = J$.N(4684025, 'makeOutgoingEdges', J$.T(4684017, makeOutgoingEdges, 12, false), true, false, false);
            makeNodesHash = J$.N(4684041, 'makeNodesHash', J$.T(4684033, makeNodesHash, 12, false), true, false, false);
            J$.T(4681505, 'use strict', 21, false);
            J$.F(4681529, J$.I(typeof require === 'undefined' ? require = J$.R(4681513, 'require', undefined, true, true) : require = J$.R(4681513, 'require', require, true, true)), false)(J$.T(4681521, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(4681553, J$.I(typeof require === 'undefined' ? require = J$.R(4681537, 'require', undefined, true, true) : require = J$.R(4681537, 'require', require, true, true)), false)(J$.T(4681545, 'core-js/modules/es.array.from', 21, false));
            J$.F(4681577, J$.I(typeof require === 'undefined' ? require = J$.R(4681561, 'require', undefined, true, true) : require = J$.R(4681561, 'require', require, true, true)), false)(J$.T(4681569, 'core-js/modules/es.array.iterator', 21, false));
            J$.F(4681601, J$.I(typeof require === 'undefined' ? require = J$.R(4681585, 'require', undefined, true, true) : require = J$.R(4681585, 'require', require, true, true)), false)(J$.T(4681593, 'core-js/modules/es.map', 21, false));
            J$.F(4681625, J$.I(typeof require === 'undefined' ? require = J$.R(4681609, 'require', undefined, true, true) : require = J$.R(4681609, 'require', require, true, true)), false)(J$.T(4681617, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(4681649, J$.I(typeof require === 'undefined' ? require = J$.R(4681633, 'require', undefined, true, true) : require = J$.R(4681633, 'require', require, true, true)), false)(J$.T(4681641, 'core-js/modules/es.set', 21, false));
            J$.F(4681673, J$.I(typeof require === 'undefined' ? require = J$.R(4681657, 'require', undefined, true, true) : require = J$.R(4681657, 'require', require, true, true)), false)(J$.T(4681665, 'core-js/modules/es.string.iterator', 21, false));
            J$.F(4681697, J$.I(typeof require === 'undefined' ? require = J$.R(4681681, 'require', undefined, true, true) : require = J$.R(4681681, 'require', require, true, true)), false)(J$.T(4681689, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.F(4681721, J$.I(typeof require === 'undefined' ? require = J$.R(4681705, 'require', undefined, true, true) : require = J$.R(4681705, 'require', require, true, true)), false)(J$.T(4681713, 'core-js/modules/web.dom-collections.iterator', 21, false));
            J$.P(4681825, J$.I(typeof module === 'undefined' ? module = J$.R(4681729, 'module', undefined, true, true) : module = J$.R(4681729, 'module', module, true, true)), 'exports', J$.T(4681817, function (edges) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4681793, arguments.callee, this, arguments);
                            arguments = J$.N(4681801, 'arguments', arguments, true, false, false);
                            edges = J$.N(4681809, 'edges', edges, true, false, false);
                            return J$.Rt(4681785, J$.F(4681777, J$.R(4681737, 'toposort', toposort, false, true), false)(J$.F(4681761, J$.R(4681745, 'uniqueNodes', uniqueNodes, false, true), false)(J$.R(4681753, 'edges', edges, false, false)), J$.R(4681769, 'edges', edges, false, false)));
                        } catch (J$e) {
                            J$.Ex(4684049, J$e);
                        } finally {
                            if (J$.Fr(4684057))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4681857, J$.G(4681841, J$.I(typeof module === 'undefined' ? module = J$.R(4681833, 'module', undefined, true, true) : module = J$.R(4681833, 'module', module, true, true)), 'exports'), 'array', J$.R(4681849, 'toposort', toposort, false, true));
        } catch (J$e) {
            J$.Ex(4684161, J$e);
        } finally {
            if (J$.Sr(4684169))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

