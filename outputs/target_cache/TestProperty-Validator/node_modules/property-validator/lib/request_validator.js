J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(3637049, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/property-validator/lib/request_validator.js');
            function validate(params, validations) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3636441, arguments.callee, this, arguments);
                            arguments = J$.N(3636449, 'arguments', arguments, true, false, false);
                            params = J$.N(3636457, 'params', params, true, false, false);
                            validations = J$.N(3636465, 'validations', validations, true, false, false);
                            J$.N(3636473, 'runValidations', runValidations, false, false, false);
                            J$.N(3636481, 'allValid', allValid, false, false, false);
                            J$.N(3636489, 'errors', errors, false, false, false);
                            J$.N(3636497, 'messages', messages, false, false, false);
                            var runValidations = J$.W(3636065, 'runValidations', J$.M(3636057, J$.R(3635985, 'validations', validations, false, false), 'map', false)(J$.T(3636049, function (validation) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3636025, arguments.callee, this, arguments);
                                            arguments = J$.N(3636033, 'arguments', arguments, true, false, false);
                                            validation = J$.N(3636041, 'validation', validation, true, false, false);
                                            return J$.Rt(3636017, J$.F(3636009, J$.R(3635993, 'validation', validation, false, false), false)(J$.R(3636001, 'params', params, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3637177, J$e);
                                        } finally {
                                            if (J$.Fr(3637185))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), runValidations, false, false);
                            var allValid = J$.W(3636153, 'allValid', J$.F(3636145, J$.R(3636073, 'every', every, false, true), false)(J$.R(3636081, 'runValidations', runValidations, false, false), J$.T(3636137, function (runValidation) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3636113, arguments.callee, this, arguments);
                                            arguments = J$.N(3636121, 'arguments', arguments, true, false, false);
                                            runValidation = J$.N(3636129, 'runValidation', runValidation, true, false, false);
                                            return J$.Rt(3636105, J$.G(3636097, J$.R(3636089, 'runValidation', runValidation, false, false), 'result'));
                                        } catch (J$e) {
                                            J$.Ex(3637193, J$e);
                                        } finally {
                                            if (J$.Fr(3637201))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), allValid, false, false);
                            var errors = J$.W(3636313, 'errors', J$.M(3636305, J$.M(3636225, J$.R(3636161, 'runValidations', runValidations, false, false), 'filter', false)(J$.T(3636217, function (runValidation) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(3636193, arguments.callee, this, arguments);
                                            arguments = J$.N(3636201, 'arguments', arguments, true, false, false);
                                            runValidation = J$.N(3636209, 'runValidation', runValidation, true, false, false);
                                            return J$.Rt(3636185, J$.U(367130, '!', J$.G(3636177, J$.R(3636169, 'runValidation', runValidation, false, false), 'result')));
                                        } catch (J$e) {
                                            J$.Ex(3637209, J$e);
                                        } finally {
                                            if (J$.Fr(3637217))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'map', false)(J$.T(3636297, function (failedValidation) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3636273, arguments.callee, this, arguments);
                                            arguments = J$.N(3636281, 'arguments', arguments, true, false, false);
                                            failedValidation = J$.N(3636289, 'failedValidation', failedValidation, true, false, false);
                                            return J$.Rt(3636265, J$.F(3636257, J$.R(3636233, 'omit', omit, false, true), false)(J$.R(3636241, 'failedValidation', failedValidation, false, false), J$.T(3636249, 'result', 21, false)));
                                        } catch (J$e) {
                                            J$.Ex(3637225, J$e);
                                        } finally {
                                            if (J$.Fr(3637233))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), errors, false, false);
                            var messages = J$.W(3636393, 'messages', J$.M(3636385, J$.R(3636321, 'errors', errors, false, false), 'map', false)(J$.T(3636377, function (error) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(3636353, arguments.callee, this, arguments);
                                            arguments = J$.N(3636361, 'arguments', arguments, true, false, false);
                                            error = J$.N(3636369, 'error', error, true, false, false);
                                            return J$.Rt(3636345, J$.G(3636337, J$.R(3636329, 'error', error, false, false), 'message'));
                                        } catch (J$e) {
                                            J$.Ex(3637241, J$e);
                                        } finally {
                                            if (J$.Fr(3637249))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), messages, false, false);
                            return J$.Rt(3636433, J$.T(3636425, {
                                valid: J$.R(3636401, 'allValid', allValid, false, false),
                                errors: J$.R(3636409, 'errors', errors, false, false),
                                messages: J$.R(3636417, 'messages', messages, false, false)
                            }, 11, false));
                        } catch (J$e) {
                            J$.Ex(3637257, J$e);
                        } finally {
                            if (J$.Fr(3637265))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateParams(request, validations) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3636553, arguments.callee, this, arguments);
                            arguments = J$.N(3636561, 'arguments', arguments, true, false, false);
                            request = J$.N(3636569, 'request', request, true, false, false);
                            validations = J$.N(3636577, 'validations', validations, true, false, false);
                            return J$.Rt(3636545, J$.F(3636537, J$.R(3636505, 'validate', validate, false, true), false)(J$.G(3636521, J$.R(3636513, 'request', request, false, false), 'params'), J$.R(3636529, 'validations', validations, false, false)));
                        } catch (J$e) {
                            J$.Ex(3637273, J$e);
                        } finally {
                            if (J$.Fr(3637281))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateQuery(request, validations) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3636633, arguments.callee, this, arguments);
                            arguments = J$.N(3636641, 'arguments', arguments, true, false, false);
                            request = J$.N(3636649, 'request', request, true, false, false);
                            validations = J$.N(3636657, 'validations', validations, true, false, false);
                            return J$.Rt(3636625, J$.F(3636617, J$.R(3636585, 'validate', validate, false, true), false)(J$.G(3636601, J$.R(3636593, 'request', request, false, false), 'query'), J$.R(3636609, 'validations', validations, false, false)));
                        } catch (J$e) {
                            J$.Ex(3637289, J$e);
                        } finally {
                            if (J$.Fr(3637297))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateBody(request, validations) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3636713, arguments.callee, this, arguments);
                            arguments = J$.N(3636721, 'arguments', arguments, true, false, false);
                            request = J$.N(3636729, 'request', request, true, false, false);
                            validations = J$.N(3636737, 'validations', validations, true, false, false);
                            return J$.Rt(3636705, J$.F(3636697, J$.R(3636665, 'validate', validate, false, true), false)(J$.G(3636681, J$.R(3636673, 'request', request, false, false), 'body'), J$.R(3636689, 'validations', validations, false, false)));
                        } catch (J$e) {
                            J$.Ex(3637305, J$e);
                        } finally {
                            if (J$.Fr(3637313))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateHeaders(request, validations) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3636793, arguments.callee, this, arguments);
                            arguments = J$.N(3636801, 'arguments', arguments, true, false, false);
                            request = J$.N(3636809, 'request', request, true, false, false);
                            validations = J$.N(3636817, 'validations', validations, true, false, false);
                            return J$.Rt(3636785, J$.F(3636777, J$.R(3636745, 'validate', validate, false, true), false)(J$.G(3636761, J$.R(3636753, 'request', request, false, false), 'headers'), J$.R(3636769, 'validations', validations, false, false)));
                        } catch (J$e) {
                            J$.Ex(3637321, J$e);
                        } finally {
                            if (J$.Fr(3637329))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function validateAll(request, validations) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3636937, arguments.callee, this, arguments);
                            arguments = J$.N(3636945, 'arguments', arguments, true, false, false);
                            request = J$.N(3636953, 'request', request, true, false, false);
                            validations = J$.N(3636961, 'validations', validations, true, false, false);
                            J$.N(3636969, 'allParams', allParams, false, false, false);
                            var allParams = J$.W(3636889, 'allParams', J$.F(3636881, J$.R(3636825, 'merge', merge, false, true), false)(J$.G(3636841, J$.R(3636833, 'request', request, false, false), 'query'), J$.G(3636857, J$.R(3636849, 'request', request, false, false), 'params'), J$.G(3636873, J$.R(3636865, 'request', request, false, false), 'body')), allParams, false, false);
                            return J$.Rt(3636929, J$.F(3636921, J$.R(3636897, 'validate', validate, false, true), false)(J$.R(3636905, 'allParams', allParams, false, false), J$.R(3636913, 'validations', validations, false, false)));
                        } catch (J$e) {
                            J$.Ex(3637337, J$e);
                        } finally {
                            if (J$.Fr(3637345))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3637057, 'every', every, false, false, false);
            J$.N(3637065, 'omit', omit, false, false, false);
            J$.N(3637073, 'merge', merge, false, false, false);
            validate = J$.N(3637089, 'validate', J$.T(3637081, validate, 12, false), true, false, false);
            validateParams = J$.N(3637105, 'validateParams', J$.T(3637097, validateParams, 12, false), true, false, false);
            validateQuery = J$.N(3637121, 'validateQuery', J$.T(3637113, validateQuery, 12, false), true, false, false);
            validateBody = J$.N(3637137, 'validateBody', J$.T(3637129, validateBody, 12, false), true, false, false);
            validateHeaders = J$.N(3637153, 'validateHeaders', J$.T(3637145, validateHeaders, 12, false), true, false, false);
            validateAll = J$.N(3637169, 'validateAll', J$.T(3637161, validateAll, 12, false), true, false, false);
            var every = J$.W(3635913, 'every', J$.F(3635905, J$.I(typeof require === 'undefined' ? require = J$.R(3635889, 'require', undefined, true, true) : require = J$.R(3635889, 'require', require, true, true)), false)(J$.T(3635897, 'lodash/every', 21, false)), every, false, true);
            var omit = J$.W(3635945, 'omit', J$.F(3635937, J$.I(typeof require === 'undefined' ? require = J$.R(3635921, 'require', undefined, true, true) : require = J$.R(3635921, 'require', require, true, true)), false)(J$.T(3635929, 'lodash/omit', 21, false)), omit, false, true);
            var merge = J$.W(3635977, 'merge', J$.F(3635969, J$.I(typeof require === 'undefined' ? require = J$.R(3635953, 'require', undefined, true, true) : require = J$.R(3635953, 'require', require, true, true)), false)(J$.T(3635961, 'lodash/merge', 21, false)), merge, false, true);
            J$.P(3637041, J$.I(typeof module === 'undefined' ? module = J$.R(3636977, 'module', undefined, true, true) : module = J$.R(3636977, 'module', module, true, true)), 'exports', J$.T(3637033, {
                validateParams: J$.R(3636985, 'validateParams', validateParams, false, true),
                validateQuery: J$.R(3636993, 'validateQuery', validateQuery, false, true),
                validateBody: J$.R(3637001, 'validateBody', validateBody, false, true),
                validateAll: J$.R(3637009, 'validateAll', validateAll, false, true),
                validateHeaders: J$.R(3637017, 'validateHeaders', validateHeaders, false, true),
                validate: J$.R(3637025, 'validate', validate, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(3637353, J$e);
        } finally {
            if (J$.Sr(3637361))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

