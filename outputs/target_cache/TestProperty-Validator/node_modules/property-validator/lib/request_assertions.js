J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(3635625, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/property-validator/lib/request_assertions.js');
            function ensure(properties, validations, validationStrategy) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3634977, arguments.callee, this, arguments);
                            arguments = J$.N(3634985, 'arguments', arguments, true, false, false);
                            properties = J$.N(3634993, 'properties', properties, true, false, false);
                            validations = J$.N(3635001, 'validations', validations, true, false, false);
                            validationStrategy = J$.N(3635009, 'validationStrategy', validationStrategy, true, false, false);
                            J$.N(3635017, 'validation', validation, false, false, false);
                            var validation = J$.W(3634913, 'validation', J$.F(3634905, J$.R(3634881, 'validationStrategy', validationStrategy, false, false), false)(J$.R(3634889, 'properties', properties, false, false), J$.R(3634897, 'validations', validations, false, false)), validation, false, false);
                            if (J$.C(197080, J$.U(367122, '!', J$.G(3634929, J$.R(3634921, 'validation', validation, false, false), 'valid')))) {
                                throw J$.F(3634953, J$.R(3634937, 'ValidationError', ValidationError, false, true), true)(J$.R(3634945, 'validation', validation, false, false));
                            }
                            return J$.Rt(3634969, J$.R(3634961, 'validation', validation, false, false));
                        } catch (J$e) {
                            J$.Ex(3635761, J$e);
                        } finally {
                            if (J$.Fr(3635769))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assert(properties, validations) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3635081, arguments.callee, this, arguments);
                            arguments = J$.N(3635089, 'arguments', arguments, true, false, false);
                            properties = J$.N(3635097, 'properties', properties, true, false, false);
                            validations = J$.N(3635105, 'validations', validations, true, false, false);
                            return J$.Rt(3635073, J$.F(3635065, J$.R(3635025, 'ensure', ensure, false, true), false)(J$.R(3635033, 'properties', properties, false, false), J$.R(3635041, 'validations', validations, false, false), J$.G(3635057, J$.R(3635049, 'validator', validator, false, true), 'validate')));
                        } catch (J$e) {
                            J$.Ex(3635777, J$e);
                        } finally {
                            if (J$.Fr(3635785))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertHeaders(req, validations) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3635169, arguments.callee, this, arguments);
                            arguments = J$.N(3635177, 'arguments', arguments, true, false, false);
                            req = J$.N(3635185, 'req', req, true, false, false);
                            validations = J$.N(3635193, 'validations', validations, true, false, false);
                            return J$.Rt(3635161, J$.F(3635153, J$.R(3635113, 'ensure', ensure, false, true), false)(J$.R(3635121, 'req', req, false, false), J$.R(3635129, 'validations', validations, false, false), J$.G(3635145, J$.R(3635137, 'validator', validator, false, true), 'validateHeaders')));
                        } catch (J$e) {
                            J$.Ex(3635793, J$e);
                        } finally {
                            if (J$.Fr(3635801))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertParams(req, validations) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3635257, arguments.callee, this, arguments);
                            arguments = J$.N(3635265, 'arguments', arguments, true, false, false);
                            req = J$.N(3635273, 'req', req, true, false, false);
                            validations = J$.N(3635281, 'validations', validations, true, false, false);
                            return J$.Rt(3635249, J$.F(3635241, J$.R(3635201, 'ensure', ensure, false, true), false)(J$.R(3635209, 'req', req, false, false), J$.R(3635217, 'validations', validations, false, false), J$.G(3635233, J$.R(3635225, 'validator', validator, false, true), 'validateParams')));
                        } catch (J$e) {
                            J$.Ex(3635809, J$e);
                        } finally {
                            if (J$.Fr(3635817))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertBody(req, validations) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3635345, arguments.callee, this, arguments);
                            arguments = J$.N(3635353, 'arguments', arguments, true, false, false);
                            req = J$.N(3635361, 'req', req, true, false, false);
                            validations = J$.N(3635369, 'validations', validations, true, false, false);
                            return J$.Rt(3635337, J$.F(3635329, J$.R(3635289, 'ensure', ensure, false, true), false)(J$.R(3635297, 'req', req, false, false), J$.R(3635305, 'validations', validations, false, false), J$.G(3635321, J$.R(3635313, 'validator', validator, false, true), 'validateBody')));
                        } catch (J$e) {
                            J$.Ex(3635825, J$e);
                        } finally {
                            if (J$.Fr(3635833))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertQuery(req, validations) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3635433, arguments.callee, this, arguments);
                            arguments = J$.N(3635441, 'arguments', arguments, true, false, false);
                            req = J$.N(3635449, 'req', req, true, false, false);
                            validations = J$.N(3635457, 'validations', validations, true, false, false);
                            return J$.Rt(3635425, J$.F(3635417, J$.R(3635377, 'ensure', ensure, false, true), false)(J$.R(3635385, 'req', req, false, false), J$.R(3635393, 'validations', validations, false, false), J$.G(3635409, J$.R(3635401, 'validator', validator, false, true), 'validateQuery')));
                        } catch (J$e) {
                            J$.Ex(3635841, J$e);
                        } finally {
                            if (J$.Fr(3635849))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertAll(req, validations) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3635521, arguments.callee, this, arguments);
                            arguments = J$.N(3635529, 'arguments', arguments, true, false, false);
                            req = J$.N(3635537, 'req', req, true, false, false);
                            validations = J$.N(3635545, 'validations', validations, true, false, false);
                            return J$.Rt(3635513, J$.F(3635505, J$.R(3635465, 'ensure', ensure, false, true), false)(J$.R(3635473, 'req', req, false, false), J$.R(3635481, 'validations', validations, false, false), J$.G(3635497, J$.R(3635489, 'validator', validator, false, true), 'validateAll')));
                        } catch (J$e) {
                            J$.Ex(3635857, J$e);
                        } finally {
                            if (J$.Fr(3635865))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3635633, 'validator', validator, false, false, false);
            J$.N(3635641, 'ValidationError', ValidationError, false, false, false);
            ensure = J$.N(3635657, 'ensure', J$.T(3635649, ensure, 12, false), true, false, false);
            assert = J$.N(3635673, 'assert', J$.T(3635665, assert, 12, false), true, false, false);
            assertHeaders = J$.N(3635689, 'assertHeaders', J$.T(3635681, assertHeaders, 12, false), true, false, false);
            assertParams = J$.N(3635705, 'assertParams', J$.T(3635697, assertParams, 12, false), true, false, false);
            assertBody = J$.N(3635721, 'assertBody', J$.T(3635713, assertBody, 12, false), true, false, false);
            assertQuery = J$.N(3635737, 'assertQuery', J$.T(3635729, assertQuery, 12, false), true, false, false);
            assertAll = J$.N(3635753, 'assertAll', J$.T(3635745, assertAll, 12, false), true, false, false);
            var validator = J$.W(3634841, 'validator', J$.F(3634833, J$.I(typeof require === 'undefined' ? require = J$.R(3634817, 'require', undefined, true, true) : require = J$.R(3634817, 'require', require, true, true)), false)(J$.T(3634825, './request_validator', 21, false)), validator, false, true);
            var ValidationError = J$.W(3634873, 'ValidationError', J$.F(3634865, J$.I(typeof require === 'undefined' ? require = J$.R(3634849, 'require', undefined, true, true) : require = J$.R(3634849, 'require', require, true, true)), false)(J$.T(3634857, './validation_error', 21, false)), ValidationError, false, true);
            J$.P(3635617, J$.I(typeof module === 'undefined' ? module = J$.R(3635553, 'module', undefined, true, true) : module = J$.R(3635553, 'module', module, true, true)), 'exports', J$.T(3635609, {
                assert: J$.R(3635561, 'assert', assert, false, true),
                assertHeaders: J$.R(3635569, 'assertHeaders', assertHeaders, false, true),
                assertParams: J$.R(3635577, 'assertParams', assertParams, false, true),
                assertBody: J$.R(3635585, 'assertBody', assertBody, false, true),
                assertQuery: J$.R(3635593, 'assertQuery', assertQuery, false, true),
                assertAll: J$.R(3635601, 'assertAll', assertAll, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(3635873, J$e);
        } finally {
            if (J$.Sr(3635881))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

