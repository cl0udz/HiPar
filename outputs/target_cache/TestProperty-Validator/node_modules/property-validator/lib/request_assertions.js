J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(2705257, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/property-validator/lib/request_assertions.js');
            function ensure(properties, validations, validationStrategy) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2704609, arguments.callee, this, arguments);
                            arguments = J$.N(2704617, 'arguments', arguments, true, false, false);
                            properties = J$.N(2704625, 'properties', properties, true, false, false);
                            validations = J$.N(2704633, 'validations', validations, true, false, false);
                            validationStrategy = J$.N(2704641, 'validationStrategy', validationStrategy, true, false, false);
                            J$.N(2704649, 'validation', validation, false, false, false);
                            var validation = J$.W(2704545, 'validation', J$.F(2704537, J$.R(2704513, 'validationStrategy', validationStrategy, false, false), false)(J$.R(2704521, 'properties', properties, false, false), J$.R(2704529, 'validations', validations, false, false)), validation, false, false);
                            if (J$.C(139960, J$.U(193346, '!', J$.G(2704561, J$.R(2704553, 'validation', validation, false, false), 'valid')))) {
                                throw J$.F(2704585, J$.R(2704569, 'ValidationError', ValidationError, false, true), true)(J$.R(2704577, 'validation', validation, false, false));
                            }
                            return J$.Rt(2704601, J$.R(2704593, 'validation', validation, false, false));
                        } catch (J$e) {
                            J$.Ex(2705393, J$e);
                        } finally {
                            if (J$.Fr(2705401))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assert(properties, validations) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2704713, arguments.callee, this, arguments);
                            arguments = J$.N(2704721, 'arguments', arguments, true, false, false);
                            properties = J$.N(2704729, 'properties', properties, true, false, false);
                            validations = J$.N(2704737, 'validations', validations, true, false, false);
                            return J$.Rt(2704705, J$.F(2704697, J$.R(2704657, 'ensure', ensure, false, true), false)(J$.R(2704665, 'properties', properties, false, false), J$.R(2704673, 'validations', validations, false, false), J$.G(2704689, J$.R(2704681, 'validator', validator, false, true), 'validate')));
                        } catch (J$e) {
                            J$.Ex(2705409, J$e);
                        } finally {
                            if (J$.Fr(2705417))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertHeaders(req, validations) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2704801, arguments.callee, this, arguments);
                            arguments = J$.N(2704809, 'arguments', arguments, true, false, false);
                            req = J$.N(2704817, 'req', req, true, false, false);
                            validations = J$.N(2704825, 'validations', validations, true, false, false);
                            return J$.Rt(2704793, J$.F(2704785, J$.R(2704745, 'ensure', ensure, false, true), false)(J$.R(2704753, 'req', req, false, false), J$.R(2704761, 'validations', validations, false, false), J$.G(2704777, J$.R(2704769, 'validator', validator, false, true), 'validateHeaders')));
                        } catch (J$e) {
                            J$.Ex(2705425, J$e);
                        } finally {
                            if (J$.Fr(2705433))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertParams(req, validations) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(2704889, arguments.callee, this, arguments);
                            arguments = J$.N(2704897, 'arguments', arguments, true, false, false);
                            req = J$.N(2704905, 'req', req, true, false, false);
                            validations = J$.N(2704913, 'validations', validations, true, false, false);
                            return J$.Rt(2704881, J$.F(2704873, J$.R(2704833, 'ensure', ensure, false, true), false)(J$.R(2704841, 'req', req, false, false), J$.R(2704849, 'validations', validations, false, false), J$.G(2704865, J$.R(2704857, 'validator', validator, false, true), 'validateParams')));
                        } catch (J$e) {
                            J$.Ex(2705441, J$e);
                        } finally {
                            if (J$.Fr(2705449))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertBody(req, validations) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2704977, arguments.callee, this, arguments);
                            arguments = J$.N(2704985, 'arguments', arguments, true, false, false);
                            req = J$.N(2704993, 'req', req, true, false, false);
                            validations = J$.N(2705001, 'validations', validations, true, false, false);
                            return J$.Rt(2704969, J$.F(2704961, J$.R(2704921, 'ensure', ensure, false, true), false)(J$.R(2704929, 'req', req, false, false), J$.R(2704937, 'validations', validations, false, false), J$.G(2704953, J$.R(2704945, 'validator', validator, false, true), 'validateBody')));
                        } catch (J$e) {
                            J$.Ex(2705457, J$e);
                        } finally {
                            if (J$.Fr(2705465))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertQuery(req, validations) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(2705065, arguments.callee, this, arguments);
                            arguments = J$.N(2705073, 'arguments', arguments, true, false, false);
                            req = J$.N(2705081, 'req', req, true, false, false);
                            validations = J$.N(2705089, 'validations', validations, true, false, false);
                            return J$.Rt(2705057, J$.F(2705049, J$.R(2705009, 'ensure', ensure, false, true), false)(J$.R(2705017, 'req', req, false, false), J$.R(2705025, 'validations', validations, false, false), J$.G(2705041, J$.R(2705033, 'validator', validator, false, true), 'validateQuery')));
                        } catch (J$e) {
                            J$.Ex(2705473, J$e);
                        } finally {
                            if (J$.Fr(2705481))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertAll(req, validations) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(2705153, arguments.callee, this, arguments);
                            arguments = J$.N(2705161, 'arguments', arguments, true, false, false);
                            req = J$.N(2705169, 'req', req, true, false, false);
                            validations = J$.N(2705177, 'validations', validations, true, false, false);
                            return J$.Rt(2705145, J$.F(2705137, J$.R(2705097, 'ensure', ensure, false, true), false)(J$.R(2705105, 'req', req, false, false), J$.R(2705113, 'validations', validations, false, false), J$.G(2705129, J$.R(2705121, 'validator', validator, false, true), 'validateAll')));
                        } catch (J$e) {
                            J$.Ex(2705489, J$e);
                        } finally {
                            if (J$.Fr(2705497))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2705265, 'validator', validator, false, false, false);
            J$.N(2705273, 'ValidationError', ValidationError, false, false, false);
            ensure = J$.N(2705289, 'ensure', J$.T(2705281, ensure, 12, false), true, false, false);
            assert = J$.N(2705305, 'assert', J$.T(2705297, assert, 12, false), true, false, false);
            assertHeaders = J$.N(2705321, 'assertHeaders', J$.T(2705313, assertHeaders, 12, false), true, false, false);
            assertParams = J$.N(2705337, 'assertParams', J$.T(2705329, assertParams, 12, false), true, false, false);
            assertBody = J$.N(2705353, 'assertBody', J$.T(2705345, assertBody, 12, false), true, false, false);
            assertQuery = J$.N(2705369, 'assertQuery', J$.T(2705361, assertQuery, 12, false), true, false, false);
            assertAll = J$.N(2705385, 'assertAll', J$.T(2705377, assertAll, 12, false), true, false, false);
            var validator = J$.W(2704473, 'validator', J$.F(2704465, J$.I(typeof require === 'undefined' ? require = J$.R(2704449, 'require', undefined, true, true) : require = J$.R(2704449, 'require', require, true, true)), false)(J$.T(2704457, './request_validator', 21, false)), validator, false, true);
            var ValidationError = J$.W(2704505, 'ValidationError', J$.F(2704497, J$.I(typeof require === 'undefined' ? require = J$.R(2704481, 'require', undefined, true, true) : require = J$.R(2704481, 'require', require, true, true)), false)(J$.T(2704489, './validation_error', 21, false)), ValidationError, false, true);
            J$.P(2705249, J$.I(typeof module === 'undefined' ? module = J$.R(2705185, 'module', undefined, true, true) : module = J$.R(2705185, 'module', module, true, true)), 'exports', J$.T(2705241, {
                assert: J$.R(2705193, 'assert', assert, false, true),
                assertHeaders: J$.R(2705201, 'assertHeaders', assertHeaders, false, true),
                assertParams: J$.R(2705209, 'assertParams', assertParams, false, true),
                assertBody: J$.R(2705217, 'assertBody', assertBody, false, true),
                assertQuery: J$.R(2705225, 'assertQuery', assertQuery, false, true),
                assertAll: J$.R(2705233, 'assertAll', assertAll, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(2705505, J$e);
        } finally {
            if (J$.Sr(2705513))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

