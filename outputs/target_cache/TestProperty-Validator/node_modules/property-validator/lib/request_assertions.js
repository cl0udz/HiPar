J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(7346337, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/property-validator/lib/request_assertions.js');
            function ensure(properties, validations, validationStrategy) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7345689, arguments.callee, this, arguments);
                            arguments = J$.N(7345697, 'arguments', arguments, true, false, false);
                            properties = J$.N(7345705, 'properties', properties, true, false, false);
                            validations = J$.N(7345713, 'validations', validations, true, false, false);
                            validationStrategy = J$.N(7345721, 'validationStrategy', validationStrategy, true, false, false);
                            J$.N(7345729, 'validation', validation, false, false, false);
                            var validation = J$.W(7345625, 'validation', J$.F(7345617, J$.R(7345593, 'validationStrategy', validationStrategy, false, false), false)(J$.R(7345601, 'properties', properties, false, false), J$.R(7345609, 'validations', validations, false, false)), validation, false, false);
                            if (J$.C(390480, J$.U(709882, '!', J$.G(7345641, J$.R(7345633, 'validation', validation, false, false), 'valid')))) {
                                throw J$.F(7345665, J$.R(7345649, 'ValidationError', ValidationError, false, true), true)(J$.R(7345657, 'validation', validation, false, false));
                            }
                            return J$.Rt(7345681, J$.R(7345673, 'validation', validation, false, false));
                        } catch (J$e) {
                            J$.Ex(7346473, J$e);
                        } finally {
                            if (J$.Fr(7346481))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assert(properties, validations) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(7345793, arguments.callee, this, arguments);
                            arguments = J$.N(7345801, 'arguments', arguments, true, false, false);
                            properties = J$.N(7345809, 'properties', properties, true, false, false);
                            validations = J$.N(7345817, 'validations', validations, true, false, false);
                            return J$.Rt(7345785, J$.F(7345777, J$.R(7345737, 'ensure', ensure, false, true), false)(J$.R(7345745, 'properties', properties, false, false), J$.R(7345753, 'validations', validations, false, false), J$.G(7345769, J$.R(7345761, 'validator', validator, false, true), 'validate')));
                        } catch (J$e) {
                            J$.Ex(7346489, J$e);
                        } finally {
                            if (J$.Fr(7346497))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertHeaders(req, validations) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(7345881, arguments.callee, this, arguments);
                            arguments = J$.N(7345889, 'arguments', arguments, true, false, false);
                            req = J$.N(7345897, 'req', req, true, false, false);
                            validations = J$.N(7345905, 'validations', validations, true, false, false);
                            return J$.Rt(7345873, J$.F(7345865, J$.R(7345825, 'ensure', ensure, false, true), false)(J$.R(7345833, 'req', req, false, false), J$.R(7345841, 'validations', validations, false, false), J$.G(7345857, J$.R(7345849, 'validator', validator, false, true), 'validateHeaders')));
                        } catch (J$e) {
                            J$.Ex(7346505, J$e);
                        } finally {
                            if (J$.Fr(7346513))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertParams(req, validations) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7345969, arguments.callee, this, arguments);
                            arguments = J$.N(7345977, 'arguments', arguments, true, false, false);
                            req = J$.N(7345985, 'req', req, true, false, false);
                            validations = J$.N(7345993, 'validations', validations, true, false, false);
                            return J$.Rt(7345961, J$.F(7345953, J$.R(7345913, 'ensure', ensure, false, true), false)(J$.R(7345921, 'req', req, false, false), J$.R(7345929, 'validations', validations, false, false), J$.G(7345945, J$.R(7345937, 'validator', validator, false, true), 'validateParams')));
                        } catch (J$e) {
                            J$.Ex(7346521, J$e);
                        } finally {
                            if (J$.Fr(7346529))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertBody(req, validations) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(7346057, arguments.callee, this, arguments);
                            arguments = J$.N(7346065, 'arguments', arguments, true, false, false);
                            req = J$.N(7346073, 'req', req, true, false, false);
                            validations = J$.N(7346081, 'validations', validations, true, false, false);
                            return J$.Rt(7346049, J$.F(7346041, J$.R(7346001, 'ensure', ensure, false, true), false)(J$.R(7346009, 'req', req, false, false), J$.R(7346017, 'validations', validations, false, false), J$.G(7346033, J$.R(7346025, 'validator', validator, false, true), 'validateBody')));
                        } catch (J$e) {
                            J$.Ex(7346537, J$e);
                        } finally {
                            if (J$.Fr(7346545))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertQuery(req, validations) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(7346145, arguments.callee, this, arguments);
                            arguments = J$.N(7346153, 'arguments', arguments, true, false, false);
                            req = J$.N(7346161, 'req', req, true, false, false);
                            validations = J$.N(7346169, 'validations', validations, true, false, false);
                            return J$.Rt(7346137, J$.F(7346129, J$.R(7346089, 'ensure', ensure, false, true), false)(J$.R(7346097, 'req', req, false, false), J$.R(7346105, 'validations', validations, false, false), J$.G(7346121, J$.R(7346113, 'validator', validator, false, true), 'validateQuery')));
                        } catch (J$e) {
                            J$.Ex(7346553, J$e);
                        } finally {
                            if (J$.Fr(7346561))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertAll(req, validations) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(7346233, arguments.callee, this, arguments);
                            arguments = J$.N(7346241, 'arguments', arguments, true, false, false);
                            req = J$.N(7346249, 'req', req, true, false, false);
                            validations = J$.N(7346257, 'validations', validations, true, false, false);
                            return J$.Rt(7346225, J$.F(7346217, J$.R(7346177, 'ensure', ensure, false, true), false)(J$.R(7346185, 'req', req, false, false), J$.R(7346193, 'validations', validations, false, false), J$.G(7346209, J$.R(7346201, 'validator', validator, false, true), 'validateAll')));
                        } catch (J$e) {
                            J$.Ex(7346569, J$e);
                        } finally {
                            if (J$.Fr(7346577))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7346345, 'validator', validator, false, false, false);
            J$.N(7346353, 'ValidationError', ValidationError, false, false, false);
            ensure = J$.N(7346369, 'ensure', J$.T(7346361, ensure, 12, false), true, false, false);
            assert = J$.N(7346385, 'assert', J$.T(7346377, assert, 12, false), true, false, false);
            assertHeaders = J$.N(7346401, 'assertHeaders', J$.T(7346393, assertHeaders, 12, false), true, false, false);
            assertParams = J$.N(7346417, 'assertParams', J$.T(7346409, assertParams, 12, false), true, false, false);
            assertBody = J$.N(7346433, 'assertBody', J$.T(7346425, assertBody, 12, false), true, false, false);
            assertQuery = J$.N(7346449, 'assertQuery', J$.T(7346441, assertQuery, 12, false), true, false, false);
            assertAll = J$.N(7346465, 'assertAll', J$.T(7346457, assertAll, 12, false), true, false, false);
            var validator = J$.W(7345553, 'validator', J$.F(7345545, J$.I(typeof require === 'undefined' ? require = J$.R(7345529, 'require', undefined, true, true) : require = J$.R(7345529, 'require', require, true, true)), false)(J$.T(7345537, './request_validator', 21, false)), validator, false, true);
            var ValidationError = J$.W(7345585, 'ValidationError', J$.F(7345577, J$.I(typeof require === 'undefined' ? require = J$.R(7345561, 'require', undefined, true, true) : require = J$.R(7345561, 'require', require, true, true)), false)(J$.T(7345569, './validation_error', 21, false)), ValidationError, false, true);
            J$.P(7346329, J$.I(typeof module === 'undefined' ? module = J$.R(7346265, 'module', undefined, true, true) : module = J$.R(7346265, 'module', module, true, true)), 'exports', J$.T(7346321, {
                assert: J$.R(7346273, 'assert', assert, false, true),
                assertHeaders: J$.R(7346281, 'assertHeaders', assertHeaders, false, true),
                assertParams: J$.R(7346289, 'assertParams', assertParams, false, true),
                assertBody: J$.R(7346297, 'assertBody', assertBody, false, true),
                assertQuery: J$.R(7346305, 'assertQuery', assertQuery, false, true),
                assertAll: J$.R(7346313, 'assertAll', assertAll, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(7346585, J$e);
        } finally {
            if (J$.Sr(7346593))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

