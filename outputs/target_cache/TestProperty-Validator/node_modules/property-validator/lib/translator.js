J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(3638257, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/property-validator/lib/translator.js');
            function translator(message, params, localization) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3638177, arguments.callee, this, arguments);
                            arguments = J$.N(3638185, 'arguments', arguments, true, false, false);
                            message = J$.N(3638193, 'message', message, true, false, false);
                            params = J$.N(3638201, 'params', params, true, false, false);
                            localization = J$.N(3638209, 'localization', localization, true, false, false);
                            J$.N(3638217, 'fallbackTranslationMessage', fallbackTranslationMessage, false, false, false);
                            J$.N(3638225, 'translatedMessage', translatedMessage, false, false, false);
                            if (J$.C(197088, J$.F(3637841, J$.R(3637825, 'isUndefined', isUndefined, false, true), false)(J$.R(3637833, 'localization', localization, false, false)))) {
                                localization = J$.W(3637857, 'localization', J$.R(3637849, 'fallbackLocals', fallbackLocals, false, true), localization, false, false);
                            }
                            var fallbackTranslationMessage = J$.W(3637905, 'fallbackTranslationMessage', J$.F(3637897, J$.R(3637865, 'get', get, false, true), false)(J$.R(3637873, 'fallbackLocals', fallbackLocals, false, true), J$.R(3637881, 'message', message, false, false), J$.R(3637889, 'message', message, false, false)), fallbackTranslationMessage, false, false);
                            var translatedMessage = J$.W(3637953, 'translatedMessage', J$.F(3637945, J$.R(3637913, 'get', get, false, true), false)(J$.R(3637921, 'localization', localization, false, false), J$.R(3637929, 'message', message, false, false), J$.R(3637937, 'fallbackTranslationMessage', fallbackTranslationMessage, false, false)), translatedMessage, false, false);
                            J$.F(3638153, J$.R(3637961, 'forOwn', forOwn, false, true), false)(J$.R(3637969, 'params', params, false, false), J$.T(3638145, function (value, key) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3638105, arguments.callee, this, arguments);
                                            arguments = J$.N(3638113, 'arguments', arguments, true, false, false);
                                            value = J$.N(3638121, 'value', value, true, false, false);
                                            key = J$.N(3638129, 'key', key, true, false, false);
                                            J$.N(3638137, 'regex', regex, false, false, false);
                                            var regex = J$.W(3638033, 'regex', J$.F(3638025, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(3637977, 'RegExp', undefined, true, true) : RegExp = J$.R(3637977, 'RegExp', RegExp, true, true)), true)(J$.F(3638009, J$.R(3637985, 'escapeRegExp', escapeRegExp, false, true), false)(J$.B(367138, '+', J$.T(3637993, ':', 21, false), J$.R(3638001, 'key', key, false, false))), J$.T(3638017, 'g', 21, false)), regex, false, false);
                                            translatedMessage = J$.W(3638097, 'translatedMessage', J$.F(3638089, J$.R(3638041, 'replace', replace, false, true), false)(J$.R(3638049, 'translatedMessage', translatedMessage, false, false), J$.R(3638057, 'regex', regex, false, false), J$.G(3638081, J$.R(3638065, 'params', params, false, false), J$.R(3638073, 'key', key, false, false))), translatedMessage, false, false);
                                        } catch (J$e) {
                                            J$.Ex(3638329, J$e);
                                        } finally {
                                            if (J$.Fr(3638337))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(3638169, J$.R(3638161, 'translatedMessage', translatedMessage, false, false));
                        } catch (J$e) {
                            J$.Ex(3638345, J$e);
                        } finally {
                            if (J$.Fr(3638353))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3638265, 'get', get, false, false, false);
            J$.N(3638273, 'escapeRegExp', escapeRegExp, false, false, false);
            J$.N(3638281, 'replace', replace, false, false, false);
            J$.N(3638289, 'forOwn', forOwn, false, false, false);
            J$.N(3638297, 'isUndefined', isUndefined, false, false, false);
            J$.N(3638305, 'fallbackLocals', fallbackLocals, false, false, false);
            translator = J$.N(3638321, 'translator', J$.T(3638313, translator, 12, false), true, false, false);
            var get = J$.W(3637657, 'get', J$.F(3637649, J$.I(typeof require === 'undefined' ? require = J$.R(3637633, 'require', undefined, true, true) : require = J$.R(3637633, 'require', require, true, true)), false)(J$.T(3637641, 'lodash/get', 21, false)), get, false, true);
            var escapeRegExp = J$.W(3637689, 'escapeRegExp', J$.F(3637681, J$.I(typeof require === 'undefined' ? require = J$.R(3637665, 'require', undefined, true, true) : require = J$.R(3637665, 'require', require, true, true)), false)(J$.T(3637673, 'lodash/escapeRegExp', 21, false)), escapeRegExp, false, true);
            var replace = J$.W(3637721, 'replace', J$.F(3637713, J$.I(typeof require === 'undefined' ? require = J$.R(3637697, 'require', undefined, true, true) : require = J$.R(3637697, 'require', require, true, true)), false)(J$.T(3637705, 'lodash/replace', 21, false)), replace, false, true);
            var forOwn = J$.W(3637753, 'forOwn', J$.F(3637745, J$.I(typeof require === 'undefined' ? require = J$.R(3637729, 'require', undefined, true, true) : require = J$.R(3637729, 'require', require, true, true)), false)(J$.T(3637737, 'lodash/forOwn', 21, false)), forOwn, false, true);
            var isUndefined = J$.W(3637785, 'isUndefined', J$.F(3637777, J$.I(typeof require === 'undefined' ? require = J$.R(3637761, 'require', undefined, true, true) : require = J$.R(3637761, 'require', require, true, true)), false)(J$.T(3637769, 'lodash/isUndefined', 21, false)), isUndefined, false, true);
            var fallbackLocals = J$.W(3637817, 'fallbackLocals', J$.F(3637809, J$.I(typeof require === 'undefined' ? require = J$.R(3637793, 'require', undefined, true, true) : require = J$.R(3637793, 'require', require, true, true)), false)(J$.T(3637801, './translations/en', 21, false)), fallbackLocals, false, true);
            J$.P(3638249, J$.I(typeof module === 'undefined' ? module = J$.R(3638233, 'module', undefined, true, true) : module = J$.R(3638233, 'module', module, true, true)), 'exports', J$.R(3638241, 'translator', translator, false, true));
        } catch (J$e) {
            J$.Ex(3638361, J$e);
        } finally {
            if (J$.Sr(3638369))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

