J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6591161, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseAssignValue.js');
            function baseAssignValue(object, key, value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6591097, arguments.callee, this, arguments);
                            arguments = J$.N(6591105, 'arguments', arguments, true, false, false);
                            object = J$.N(6591113, 'object', object, true, false, false);
                            key = J$.N(6591121, 'key', key, true, false, false);
                            value = J$.N(6591129, 'value', value, true, false, false);
                            if (J$.C(346456, J$.C(346448, J$.B(660234, '==', J$.R(6590969, 'key', key, false, false), J$.T(6590977, '__proto__', 21, false))) ? J$.R(6590985, 'defineProperty', defineProperty, false, true) : J$._())) {
                                J$.F(6591057, J$.R(6590993, 'defineProperty', defineProperty, false, true), false)(J$.R(6591001, 'object', object, false, false), J$.R(6591009, 'key', key, false, false), J$.T(6591049, {
                                    'configurable': J$.T(6591017, true, 23, false),
                                    'enumerable': J$.T(6591025, true, 23, false),
                                    'value': J$.R(6591033, 'value', value, false, false),
                                    'writable': J$.T(6591041, true, 23, false)
                                }, 11, false));
                            } else {
                                J$.P(6591089, J$.R(6591065, 'object', object, false, false), J$.R(6591073, 'key', key, false, false), J$.R(6591081, 'value', value, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(6591193, J$e);
                        } finally {
                            if (J$.Fr(6591201))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6591169, 'defineProperty', defineProperty, false, false, false);
            baseAssignValue = J$.N(6591185, 'baseAssignValue', J$.T(6591177, baseAssignValue, 12, false), true, false, false);
            var defineProperty = J$.W(6590961, 'defineProperty', J$.F(6590953, J$.I(typeof require === 'undefined' ? require = J$.R(6590937, 'require', undefined, true, true) : require = J$.R(6590937, 'require', require, true, true)), false)(J$.T(6590945, './_defineProperty', 21, false)), defineProperty, false, true);
            J$.P(6591153, J$.I(typeof module === 'undefined' ? module = J$.R(6591137, 'module', undefined, true, true) : module = J$.R(6591137, 'module', module, true, true)), 'exports', J$.R(6591145, 'baseAssignValue', baseAssignValue, false, true));
        } catch (J$e) {
            J$.Ex(6591209, J$e);
        } finally {
            if (J$.Sr(6591217))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

