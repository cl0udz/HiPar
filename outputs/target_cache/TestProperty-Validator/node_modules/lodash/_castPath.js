J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2930505, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_castPath.js');
            function castPath(value, object) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2930449, arguments.callee, this, arguments);
                            arguments = J$.N(2930457, 'arguments', arguments, true, false, false);
                            value = J$.N(2930465, 'value', value, true, false, false);
                            object = J$.N(2930473, 'object', object, true, false, false);
                            if (J$.C(155864, J$.F(2930329, J$.R(2930313, 'isArray', isArray, false, true), false)(J$.R(2930321, 'value', value, false, false)))) {
                                return J$.Rt(2930345, J$.R(2930337, 'value', value, false, false));
                            }
                            return J$.Rt(2930441, J$.C(155872, J$.F(2930377, J$.R(2930353, 'isKey', isKey, false, true), false)(J$.R(2930361, 'value', value, false, false), J$.R(2930369, 'object', object, false, false))) ? J$.T(2930393, [J$.R(2930385, 'value', value, false, false)], 10, false) : J$.F(2930433, J$.R(2930401, 'stringToPath', stringToPath, false, true), false)(J$.F(2930425, J$.R(2930409, 'toString', toString, false, true), false)(J$.R(2930417, 'value', value, false, false))));
                        } catch (J$e) {
                            J$.Ex(2930561, J$e);
                        } finally {
                            if (J$.Fr(2930569))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2930513, 'isArray', isArray, false, false, false);
            J$.N(2930521, 'isKey', isKey, false, false, false);
            J$.N(2930529, 'stringToPath', stringToPath, false, false, false);
            J$.N(2930537, 'toString', toString, false, false, false);
            castPath = J$.N(2930553, 'castPath', J$.T(2930545, castPath, 12, false), true, false, false);
            var isArray = J$.W(2930281, 'isArray', J$.F(2930201, J$.I(typeof require === 'undefined' ? require = J$.R(2930185, 'require', undefined, true, true) : require = J$.R(2930185, 'require', require, true, true)), false)(J$.T(2930193, './isArray', 21, false)), isArray, false, true), isKey = J$.W(2930289, 'isKey', J$.F(2930225, J$.I(typeof require === 'undefined' ? require = J$.R(2930209, 'require', undefined, true, true) : require = J$.R(2930209, 'require', require, true, true)), false)(J$.T(2930217, './_isKey', 21, false)), isKey, false, true), stringToPath = J$.W(2930297, 'stringToPath', J$.F(2930249, J$.I(typeof require === 'undefined' ? require = J$.R(2930233, 'require', undefined, true, true) : require = J$.R(2930233, 'require', require, true, true)), false)(J$.T(2930241, './_stringToPath', 21, false)), stringToPath, false, true), toString = J$.W(2930305, 'toString', J$.F(2930273, J$.I(typeof require === 'undefined' ? require = J$.R(2930257, 'require', undefined, true, true) : require = J$.R(2930257, 'require', require, true, true)), false)(J$.T(2930265, './toString', 21, false)), toString, false, true);
            J$.P(2930497, J$.I(typeof module === 'undefined' ? module = J$.R(2930481, 'module', undefined, true, true) : module = J$.R(2930481, 'module', module, true, true)), 'exports', J$.R(2930489, 'castPath', castPath, false, true));
        } catch (J$e) {
            J$.Ex(2930577, J$e);
        } finally {
            if (J$.Sr(2930585))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

