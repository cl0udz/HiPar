J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6641217, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_castPath.js');
            function castPath(value, object) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6641161, arguments.callee, this, arguments);
                            arguments = J$.N(6641169, 'arguments', arguments, true, false, false);
                            value = J$.N(6641177, 'value', value, true, false, false);
                            object = J$.N(6641185, 'object', object, true, false, false);
                            if (J$.C(349264, J$.F(6641041, J$.R(6641025, 'isArray', isArray, false, true), false)(J$.R(6641033, 'value', value, false, false)))) {
                                return J$.Rt(6641057, J$.R(6641049, 'value', value, false, false));
                            }
                            return J$.Rt(6641153, J$.C(349272, J$.F(6641089, J$.R(6641065, 'isKey', isKey, false, true), false)(J$.R(6641073, 'value', value, false, false), J$.R(6641081, 'object', object, false, false))) ? J$.T(6641105, [J$.R(6641097, 'value', value, false, false)], 10, false) : J$.F(6641145, J$.R(6641113, 'stringToPath', stringToPath, false, true), false)(J$.F(6641137, J$.R(6641121, 'toString', toString, false, true), false)(J$.R(6641129, 'value', value, false, false))));
                        } catch (J$e) {
                            J$.Ex(6641273, J$e);
                        } finally {
                            if (J$.Fr(6641281))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6641225, 'isArray', isArray, false, false, false);
            J$.N(6641233, 'isKey', isKey, false, false, false);
            J$.N(6641241, 'stringToPath', stringToPath, false, false, false);
            J$.N(6641249, 'toString', toString, false, false, false);
            castPath = J$.N(6641265, 'castPath', J$.T(6641257, castPath, 12, false), true, false, false);
            var isArray = J$.W(6640993, 'isArray', J$.F(6640913, J$.I(typeof require === 'undefined' ? require = J$.R(6640897, 'require', undefined, true, true) : require = J$.R(6640897, 'require', require, true, true)), false)(J$.T(6640905, './isArray', 21, false)), isArray, false, true), isKey = J$.W(6641001, 'isKey', J$.F(6640937, J$.I(typeof require === 'undefined' ? require = J$.R(6640921, 'require', undefined, true, true) : require = J$.R(6640921, 'require', require, true, true)), false)(J$.T(6640929, './_isKey', 21, false)), isKey, false, true), stringToPath = J$.W(6641009, 'stringToPath', J$.F(6640961, J$.I(typeof require === 'undefined' ? require = J$.R(6640945, 'require', undefined, true, true) : require = J$.R(6640945, 'require', require, true, true)), false)(J$.T(6640953, './_stringToPath', 21, false)), stringToPath, false, true), toString = J$.W(6641017, 'toString', J$.F(6640985, J$.I(typeof require === 'undefined' ? require = J$.R(6640969, 'require', undefined, true, true) : require = J$.R(6640969, 'require', require, true, true)), false)(J$.T(6640977, './toString', 21, false)), toString, false, true);
            J$.P(6641209, J$.I(typeof module === 'undefined' ? module = J$.R(6641193, 'module', undefined, true, true) : module = J$.R(6641193, 'module', module, true, true)), 'exports', J$.R(6641201, 'castPath', castPath, false, true));
        } catch (J$e) {
            J$.Ex(6641289, J$e);
        } finally {
            if (J$.Sr(6641297))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

