J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2000137, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_castPath.js');
            function castPath(value, object) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2000081, arguments.callee, this, arguments);
                            arguments = J$.N(2000089, 'arguments', arguments, true, false, false);
                            value = J$.N(2000097, 'value', value, true, false, false);
                            object = J$.N(2000105, 'object', object, true, false, false);
                            if (J$.C(98744, J$.F(1999961, J$.R(1999945, 'isArray', isArray, false, true), false)(J$.R(1999953, 'value', value, false, false)))) {
                                return J$.Rt(1999977, J$.R(1999969, 'value', value, false, false));
                            }
                            return J$.Rt(2000073, J$.C(98752, J$.F(2000009, J$.R(1999985, 'isKey', isKey, false, true), false)(J$.R(1999993, 'value', value, false, false), J$.R(2000001, 'object', object, false, false))) ? J$.T(2000025, [J$.R(2000017, 'value', value, false, false)], 10, false) : J$.F(2000065, J$.R(2000033, 'stringToPath', stringToPath, false, true), false)(J$.F(2000057, J$.R(2000041, 'toString', toString, false, true), false)(J$.R(2000049, 'value', value, false, false))));
                        } catch (J$e) {
                            J$.Ex(2000193, J$e);
                        } finally {
                            if (J$.Fr(2000201))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2000145, 'isArray', isArray, false, false, false);
            J$.N(2000153, 'isKey', isKey, false, false, false);
            J$.N(2000161, 'stringToPath', stringToPath, false, false, false);
            J$.N(2000169, 'toString', toString, false, false, false);
            castPath = J$.N(2000185, 'castPath', J$.T(2000177, castPath, 12, false), true, false, false);
            var isArray = J$.W(1999913, 'isArray', J$.F(1999833, J$.I(typeof require === 'undefined' ? require = J$.R(1999817, 'require', undefined, true, true) : require = J$.R(1999817, 'require', require, true, true)), false)(J$.T(1999825, './isArray', 21, false)), isArray, false, true), isKey = J$.W(1999921, 'isKey', J$.F(1999857, J$.I(typeof require === 'undefined' ? require = J$.R(1999841, 'require', undefined, true, true) : require = J$.R(1999841, 'require', require, true, true)), false)(J$.T(1999849, './_isKey', 21, false)), isKey, false, true), stringToPath = J$.W(1999929, 'stringToPath', J$.F(1999881, J$.I(typeof require === 'undefined' ? require = J$.R(1999865, 'require', undefined, true, true) : require = J$.R(1999865, 'require', require, true, true)), false)(J$.T(1999873, './_stringToPath', 21, false)), stringToPath, false, true), toString = J$.W(1999937, 'toString', J$.F(1999905, J$.I(typeof require === 'undefined' ? require = J$.R(1999889, 'require', undefined, true, true) : require = J$.R(1999889, 'require', require, true, true)), false)(J$.T(1999897, './toString', 21, false)), toString, false, true);
            J$.P(2000129, J$.I(typeof module === 'undefined' ? module = J$.R(2000113, 'module', undefined, true, true) : module = J$.R(2000113, 'module', module, true, true)), 'exports', J$.R(2000121, 'castPath', castPath, false, true));
        } catch (J$e) {
            J$.Ex(2000209, J$e);
        } finally {
            if (J$.Sr(2000217))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

