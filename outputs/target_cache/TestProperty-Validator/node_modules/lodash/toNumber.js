J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(3614033, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/toNumber.js');
            function toNumber(value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3613969, arguments.callee, this, arguments);
                            arguments = J$.N(3613977, 'arguments', arguments, true, false, false);
                            value = J$.N(3613985, 'value', value, true, false, false);
                            J$.N(3613993, 'other', other, false, false, false);
                            J$.N(3614001, 'isBinary', isBinary, false, false, false);
                            if (J$.C(196200, J$.B(366466, '==', J$.U(366458, 'typeof', J$.R(3613489, 'value', value, false, false)), J$.T(3613497, 'number', 21, false)))) {
                                return J$.Rt(3613513, J$.R(3613505, 'value', value, false, false));
                            }
                            if (J$.C(196208, J$.F(3613537, J$.R(3613521, 'isSymbol', isSymbol, false, true), false)(J$.R(3613529, 'value', value, false, false)))) {
                                return J$.Rt(3613553, J$.R(3613545, 'NAN', NAN, false, true));
                            }
                            if (J$.C(196232, J$.F(3613577, J$.R(3613561, 'isObject', isObject, false, true), false)(J$.R(3613569, 'value', value, false, false)))) {
                                var other = J$.W(3613633, 'other', J$.C(196216, J$.B(366482, '==', J$.U(366474, 'typeof', J$.G(3613593, J$.R(3613585, 'value', value, false, false), 'valueOf')), J$.T(3613601, 'function', 21, false))) ? J$.M(3613617, J$.R(3613609, 'value', value, false, false), 'valueOf', false)() : J$.R(3613625, 'value', value, false, false), other, false, false);
                                value = J$.W(3613689, 'value', J$.C(196224, J$.F(3613657, J$.R(3613641, 'isObject', isObject, false, true), false)(J$.R(3613649, 'other', other, false, false))) ? J$.B(366490, '+', J$.R(3613665, 'other', other, false, false), J$.T(3613673, '', 21, false)) : J$.R(3613681, 'other', other, false, false), value, false, false);
                            }
                            if (J$.C(196248, J$.B(366506, '!=', J$.U(366498, 'typeof', J$.R(3613697, 'value', value, false, false)), J$.T(3613705, 'string', 21, false)))) {
                                return J$.Rt(3613745, J$.C(196240, J$.B(366514, '===', J$.R(3613713, 'value', value, false, false), J$.T(3613721, 0, 22, false))) ? J$.R(3613729, 'value', value, false, false) : J$.U(366522, '+', J$.R(3613737, 'value', value, false, false)));
                            }
                            value = J$.W(3613785, 'value', J$.M(3613777, J$.R(3613753, 'value', value, false, false), 'replace', false)(J$.R(3613761, 'reTrim', reTrim, false, true), J$.T(3613769, '', 21, false)), value, false, false);
                            var isBinary = J$.W(3613817, 'isBinary', J$.M(3613809, J$.R(3613793, 'reIsBinary', reIsBinary, false, true), 'test', false)(J$.R(3613801, 'value', value, false, false)), isBinary, false, false);
                            return J$.Rt(3613961, J$.C(196280, J$.C(196256, J$.R(3613825, 'isBinary', isBinary, false, false)) ? J$._() : J$.M(3613849, J$.R(3613833, 'reIsOctal', reIsOctal, false, true), 'test', false)(J$.R(3613841, 'value', value, false, false))) ? J$.F(3613913, J$.R(3613857, 'freeParseInt', freeParseInt, false, true), false)(J$.M(3613881, J$.R(3613865, 'value', value, false, false), 'slice', false)(J$.T(3613873, 2, 22, false)), J$.C(196264, J$.R(3613889, 'isBinary', isBinary, false, false)) ? J$.T(3613897, 2, 22, false) : J$.T(3613905, 8, 22, false)) : J$.C(196272, J$.M(3613937, J$.R(3613921, 'reIsBadHex', reIsBadHex, false, true), 'test', false)(J$.R(3613929, 'value', value, false, false))) ? J$.R(3613945, 'NAN', NAN, false, true) : J$.U(366530, '+', J$.R(3613953, 'value', value, false, false)));
                        } catch (J$e) {
                            J$.Ex(3614121, J$e);
                        } finally {
                            if (J$.Fr(3614129))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3614041, 'isObject', isObject, false, false, false);
            J$.N(3614049, 'isSymbol', isSymbol, false, false, false);
            J$.N(3614057, 'NAN', NAN, false, false, false);
            J$.N(3614065, 'reTrim', reTrim, false, false, false);
            J$.N(3614073, 'reIsBadHex', reIsBadHex, false, false, false);
            J$.N(3614081, 'reIsBinary', reIsBinary, false, false, false);
            J$.N(3614089, 'reIsOctal', reIsOctal, false, false, false);
            J$.N(3614097, 'freeParseInt', freeParseInt, false, false, false);
            toNumber = J$.N(3614113, 'toNumber', J$.T(3614105, toNumber, 12, false), true, false, false);
            var isObject = J$.W(3613369, 'isObject', J$.F(3613337, J$.I(typeof require === 'undefined' ? require = J$.R(3613321, 'require', undefined, true, true) : require = J$.R(3613321, 'require', require, true, true)), false)(J$.T(3613329, './isObject', 21, false)), isObject, false, true), isSymbol = J$.W(3613377, 'isSymbol', J$.F(3613361, J$.I(typeof require === 'undefined' ? require = J$.R(3613345, 'require', undefined, true, true) : require = J$.R(3613345, 'require', require, true, true)), false)(J$.T(3613353, './isSymbol', 21, false)), isSymbol, false, true);
            var NAN = J$.W(3613401, 'NAN', J$.B(366450, '/', J$.T(3613385, 0, 22, false), J$.T(3613393, 0, 22, false)), NAN, false, true);
            var reTrim = J$.W(3613417, 'reTrim', J$.T(3613409, /^\s+|\s+$/g, 14, false), reTrim, false, true);
            var reIsBadHex = J$.W(3613433, 'reIsBadHex', J$.T(3613425, /^[-+]0x[0-9a-f]+$/i, 14, false), reIsBadHex, false, true);
            var reIsBinary = J$.W(3613449, 'reIsBinary', J$.T(3613441, /^0b[01]+$/i, 14, false), reIsBinary, false, true);
            var reIsOctal = J$.W(3613465, 'reIsOctal', J$.T(3613457, /^0o[0-7]+$/i, 14, false), reIsOctal, false, true);
            var freeParseInt = J$.W(3613481, 'freeParseInt', J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(3613473, 'parseInt', undefined, true, true) : parseInt = J$.R(3613473, 'parseInt', parseInt, true, true)), freeParseInt, false, true);
            J$.P(3614025, J$.I(typeof module === 'undefined' ? module = J$.R(3614009, 'module', undefined, true, true) : module = J$.R(3614009, 'module', module, true, true)), 'exports', J$.R(3614017, 'toNumber', toNumber, false, true));
        } catch (J$e) {
            J$.Ex(3614137, J$e);
        } finally {
            if (J$.Sr(3614145))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

