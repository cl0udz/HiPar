J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6607521, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseInverter.js');
            function baseInverter(object, setter, iteratee, accumulator) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6607449, arguments.callee, this, arguments);
                            arguments = J$.N(6607457, 'arguments', arguments, true, false, false);
                            object = J$.N(6607465, 'object', object, true, false, false);
                            setter = J$.N(6607473, 'setter', setter, true, false, false);
                            iteratee = J$.N(6607481, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(6607489, 'accumulator', accumulator, true, false, false);
                            J$.F(6607425, J$.R(6607297, 'baseForOwn', baseForOwn, false, true), false)(J$.R(6607305, 'object', object, false, false), J$.T(6607417, function (value, key, object) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6607377, arguments.callee, this, arguments);
                                            arguments = J$.N(6607385, 'arguments', arguments, true, false, false);
                                            value = J$.N(6607393, 'value', value, true, false, false);
                                            key = J$.N(6607401, 'key', key, true, false, false);
                                            object = J$.N(6607409, 'object', object, true, false, false);
                                            J$.F(6607369, J$.R(6607313, 'setter', setter, false, false), false)(J$.R(6607321, 'accumulator', accumulator, false, false), J$.F(6607345, J$.R(6607329, 'iteratee', iteratee, false, false), false)(J$.R(6607337, 'value', value, false, false)), J$.R(6607353, 'key', key, false, false), J$.R(6607361, 'object', object, false, false));
                                        } catch (J$e) {
                                            J$.Ex(6607553, J$e);
                                        } finally {
                                            if (J$.Fr(6607561))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6607441, J$.R(6607433, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(6607569, J$e);
                        } finally {
                            if (J$.Fr(6607577))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6607529, 'baseForOwn', baseForOwn, false, false, false);
            baseInverter = J$.N(6607545, 'baseInverter', J$.T(6607537, baseInverter, 12, false), true, false, false);
            var baseForOwn = J$.W(6607289, 'baseForOwn', J$.F(6607281, J$.I(typeof require === 'undefined' ? require = J$.R(6607265, 'require', undefined, true, true) : require = J$.R(6607265, 'require', require, true, true)), false)(J$.T(6607273, './_baseForOwn', 21, false)), baseForOwn, false, true);
            J$.P(6607513, J$.I(typeof module === 'undefined' ? module = J$.R(6607497, 'module', undefined, true, true) : module = J$.R(6607497, 'module', module, true, true)), 'exports', J$.R(6607505, 'baseInverter', baseInverter, false, true));
        } catch (J$e) {
            J$.Ex(6607585, J$e);
        } finally {
            if (J$.Sr(6607593))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

