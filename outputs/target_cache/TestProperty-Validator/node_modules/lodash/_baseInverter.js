J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2896809, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseInverter.js');
            function baseInverter(object, setter, iteratee, accumulator) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2896737, arguments.callee, this, arguments);
                            arguments = J$.N(2896745, 'arguments', arguments, true, false, false);
                            object = J$.N(2896753, 'object', object, true, false, false);
                            setter = J$.N(2896761, 'setter', setter, true, false, false);
                            iteratee = J$.N(2896769, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(2896777, 'accumulator', accumulator, true, false, false);
                            J$.F(2896713, J$.R(2896585, 'baseForOwn', baseForOwn, false, true), false)(J$.R(2896593, 'object', object, false, false), J$.T(2896705, function (value, key, object) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2896665, arguments.callee, this, arguments);
                                            arguments = J$.N(2896673, 'arguments', arguments, true, false, false);
                                            value = J$.N(2896681, 'value', value, true, false, false);
                                            key = J$.N(2896689, 'key', key, true, false, false);
                                            object = J$.N(2896697, 'object', object, true, false, false);
                                            J$.F(2896657, J$.R(2896601, 'setter', setter, false, false), false)(J$.R(2896609, 'accumulator', accumulator, false, false), J$.F(2896633, J$.R(2896617, 'iteratee', iteratee, false, false), false)(J$.R(2896625, 'value', value, false, false)), J$.R(2896641, 'key', key, false, false), J$.R(2896649, 'object', object, false, false));
                                        } catch (J$e) {
                                            J$.Ex(2896841, J$e);
                                        } finally {
                                            if (J$.Fr(2896849))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(2896729, J$.R(2896721, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(2896857, J$e);
                        } finally {
                            if (J$.Fr(2896865))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2896817, 'baseForOwn', baseForOwn, false, false, false);
            baseInverter = J$.N(2896833, 'baseInverter', J$.T(2896825, baseInverter, 12, false), true, false, false);
            var baseForOwn = J$.W(2896577, 'baseForOwn', J$.F(2896569, J$.I(typeof require === 'undefined' ? require = J$.R(2896553, 'require', undefined, true, true) : require = J$.R(2896553, 'require', require, true, true)), false)(J$.T(2896561, './_baseForOwn', 21, false)), baseForOwn, false, true);
            J$.P(2896801, J$.I(typeof module === 'undefined' ? module = J$.R(2896785, 'module', undefined, true, true) : module = J$.R(2896785, 'module', module, true, true)), 'exports', J$.R(2896793, 'baseInverter', baseInverter, false, true));
        } catch (J$e) {
            J$.Ex(2896873, J$e);
        } finally {
            if (J$.Sr(2896881))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

