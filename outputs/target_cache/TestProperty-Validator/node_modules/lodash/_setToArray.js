J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6706161, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_setToArray.js');
            function setToArray(set) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6706097, arguments.callee, this, arguments);
                            arguments = J$.N(6706105, 'arguments', arguments, true, false, false);
                            set = J$.N(6706113, 'set', set, true, false, false);
                            J$.N(6706121, 'index', index, false, false, false);
                            J$.N(6706129, 'result', result, false, false, false);
                            var index = J$.W(6705977, 'index', J$.U(668058, '-', J$.T(6705937, 1, 22, false)), index, false, false), result = J$.W(6705985, 'result', J$.F(6705969, J$.I(typeof Array === 'undefined' ? Array = J$.R(6705945, 'Array', undefined, true, true) : Array = J$.R(6705945, 'Array', Array, true, true)), false)(J$.G(6705961, J$.R(6705953, 'set', set, false, false), 'size')), result, false, false);
                            J$.M(6706073, J$.R(6705993, 'set', set, false, false), 'forEach', false)(J$.T(6706065, function (value) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6706041, arguments.callee, this, arguments);
                                            arguments = J$.N(6706049, 'arguments', arguments, true, false, false);
                                            value = J$.N(6706057, 'value', value, true, false, false);
                                            J$.P(6706033, J$.R(6706001, 'result', result, false, false), index = J$.W(6706017, 'index', J$.B(668074, '+', J$.U(668066, '+', J$.R(6706009, 'index', index, false, false)), 1), index, false, false), J$.R(6706025, 'value', value, false, false));
                                        } catch (J$e) {
                                            J$.Ex(6706185, J$e);
                                        } finally {
                                            if (J$.Fr(6706193))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6706089, J$.R(6706081, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(6706201, J$e);
                        } finally {
                            if (J$.Fr(6706209))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            setToArray = J$.N(6706177, 'setToArray', J$.T(6706169, setToArray, 12, false), true, false, false);
            J$.P(6706153, J$.I(typeof module === 'undefined' ? module = J$.R(6706137, 'module', undefined, true, true) : module = J$.R(6706137, 'module', module, true, true)), 'exports', J$.R(6706145, 'setToArray', setToArray, false, true));
        } catch (J$e) {
            J$.Ex(6706217, J$e);
        } finally {
            if (J$.Sr(6706225))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

