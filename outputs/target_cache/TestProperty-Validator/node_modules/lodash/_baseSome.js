J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6631313, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseSome.js');
            function baseSome(collection, predicate) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6631249, arguments.callee, this, arguments);
                            arguments = J$.N(6631257, 'arguments', arguments, true, false, false);
                            collection = J$.N(6631265, 'collection', collection, true, false, false);
                            predicate = J$.N(6631273, 'predicate', predicate, true, false, false);
                            J$.N(6631281, 'result', result, false, false, false);
                            var result;
                            J$.F(6631225, J$.R(6631097, 'baseEach', baseEach, false, true), false)(J$.R(6631105, 'collection', collection, false, false), J$.T(6631217, function (value, index, collection) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6631177, arguments.callee, this, arguments);
                                            arguments = J$.N(6631185, 'arguments', arguments, true, false, false);
                                            value = J$.N(6631193, 'value', value, true, false, false);
                                            index = J$.N(6631201, 'index', index, true, false, false);
                                            collection = J$.N(6631209, 'collection', collection, true, false, false);
                                            result = J$.W(6631153, 'result', J$.F(6631145, J$.R(6631113, 'predicate', predicate, false, false), false)(J$.R(6631121, 'value', value, false, false), J$.R(6631129, 'index', index, false, false), J$.R(6631137, 'collection', collection, false, false)), result, false, false);
                                            return J$.Rt(6631169, J$.U(662498, '!', J$.R(6631161, 'result', result, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(6631345, J$e);
                                        } finally {
                                            if (J$.Fr(6631353))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6631241, J$.U(662514, '!', J$.U(662506, '!', J$.R(6631233, 'result', result, false, false))));
                        } catch (J$e) {
                            J$.Ex(6631361, J$e);
                        } finally {
                            if (J$.Fr(6631369))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6631321, 'baseEach', baseEach, false, false, false);
            baseSome = J$.N(6631337, 'baseSome', J$.T(6631329, baseSome, 12, false), true, false, false);
            var baseEach = J$.W(6631089, 'baseEach', J$.F(6631081, J$.I(typeof require === 'undefined' ? require = J$.R(6631065, 'require', undefined, true, true) : require = J$.R(6631065, 'require', require, true, true)), false)(J$.T(6631073, './_baseEach', 21, false)), baseEach, false, true);
            J$.P(6631305, J$.I(typeof module === 'undefined' ? module = J$.R(6631289, 'module', undefined, true, true) : module = J$.R(6631289, 'module', module, true, true)), 'exports', J$.R(6631297, 'baseSome', baseSome, false, true));
        } catch (J$e) {
            J$.Ex(6631377, J$e);
        } finally {
            if (J$.Sr(6631385))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

