J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6923249, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/isString.js');
            function isString(value) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6923201, arguments.callee, this, arguments);
                            arguments = J$.N(6923209, 'arguments', arguments, true, false, false);
                            value = J$.N(6923217, 'value', value, true, false, false);
                            return J$.Rt(6923193, J$.C(361336, J$.B(678690, '==', J$.U(678682, 'typeof', J$.R(6923097, 'value', value, false, false)), J$.T(6923105, 'string', 21, false))) ? J$._() : J$.C(361328, J$.C(361320, J$.U(678698, '!', J$.F(6923129, J$.R(6923113, 'isArray', isArray, false, true), false)(J$.R(6923121, 'value', value, false, false)))) ? J$.F(6923153, J$.R(6923137, 'isObjectLike', isObjectLike, false, true), false)(J$.R(6923145, 'value', value, false, false)) : J$._()) ? J$.B(678706, '==', J$.F(6923177, J$.R(6923161, 'baseGetTag', baseGetTag, false, true), false)(J$.R(6923169, 'value', value, false, false)), J$.R(6923185, 'stringTag', stringTag, false, true)) : J$._());
                        } catch (J$e) {
                            J$.Ex(6923305, J$e);
                        } finally {
                            if (J$.Fr(6923313))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6923257, 'baseGetTag', baseGetTag, false, false, false);
            J$.N(6923265, 'isArray', isArray, false, false, false);
            J$.N(6923273, 'isObjectLike', isObjectLike, false, false, false);
            J$.N(6923281, 'stringTag', stringTag, false, false, false);
            isString = J$.N(6923297, 'isString', J$.T(6923289, isString, 12, false), true, false, false);
            var baseGetTag = J$.W(6923057, 'baseGetTag', J$.F(6923001, J$.I(typeof require === 'undefined' ? require = J$.R(6922985, 'require', undefined, true, true) : require = J$.R(6922985, 'require', require, true, true)), false)(J$.T(6922993, './_baseGetTag', 21, false)), baseGetTag, false, true), isArray = J$.W(6923065, 'isArray', J$.F(6923025, J$.I(typeof require === 'undefined' ? require = J$.R(6923009, 'require', undefined, true, true) : require = J$.R(6923009, 'require', require, true, true)), false)(J$.T(6923017, './isArray', 21, false)), isArray, false, true), isObjectLike = J$.W(6923073, 'isObjectLike', J$.F(6923049, J$.I(typeof require === 'undefined' ? require = J$.R(6923033, 'require', undefined, true, true) : require = J$.R(6923033, 'require', require, true, true)), false)(J$.T(6923041, './isObjectLike', 21, false)), isObjectLike, false, true);
            var stringTag = J$.W(6923089, 'stringTag', J$.T(6923081, '[object String]', 21, false), stringTag, false, true);
            J$.P(6923241, J$.I(typeof module === 'undefined' ? module = J$.R(6923225, 'module', undefined, true, true) : module = J$.R(6923225, 'module', module, true, true)), 'exports', J$.R(6923233, 'isString', isString, false, true));
        } catch (J$e) {
            J$.Ex(6923321, J$e);
        } finally {
            if (J$.Sr(6923329))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

