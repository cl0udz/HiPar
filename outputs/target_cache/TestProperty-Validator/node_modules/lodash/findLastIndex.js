J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6809833, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/findLastIndex.js');
            function findLastIndex(array, predicate, fromIndex) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6809753, arguments.callee, this, arguments);
                            arguments = J$.N(6809761, 'arguments', arguments, true, false, false);
                            array = J$.N(6809769, 'array', array, true, false, false);
                            predicate = J$.N(6809777, 'predicate', predicate, true, false, false);
                            fromIndex = J$.N(6809785, 'fromIndex', fromIndex, true, false, false);
                            J$.N(6809793, 'length', length, false, false, false);
                            J$.N(6809801, 'index', index, false, false, false);
                            var length = J$.W(6809465, 'length', J$.C(359520, J$.B(676922, '==', J$.R(6809425, 'array', array, false, false), J$.T(6809433, null, 25, false))) ? J$.T(6809441, 0, 22, false) : J$.G(6809457, J$.R(6809449, 'array', array, false, false), 'length'), length, false, false);
                            if (J$.C(359528, J$.U(676930, '!', J$.R(6809473, 'length', length, false, false)))) {
                                return J$.Rt(6809489, J$.U(676938, '-', J$.T(6809481, 1, 22, false)));
                            }
                            var index = J$.W(6809513, 'index', J$.B(676946, '-', J$.R(6809497, 'length', length, false, false), J$.T(6809505, 1, 22, false)), index, false, false);
                            if (J$.C(359544, J$.B(676954, '!==', J$.R(6809521, 'fromIndex', fromIndex, false, false), J$.T(6809529, undefined, 24, false)))) {
                                index = J$.W(6809561, 'index', J$.F(6809553, J$.R(6809537, 'toInteger', toInteger, false, true), false)(J$.R(6809545, 'fromIndex', fromIndex, false, false)), index, false, false);
                                index = J$.W(6809665, 'index', J$.C(359536, J$.B(676962, '<', J$.R(6809569, 'fromIndex', fromIndex, false, false), J$.T(6809577, 0, 22, false))) ? J$.F(6809617, J$.R(6809585, 'nativeMax', nativeMax, false, true), false)(J$.B(676970, '+', J$.R(6809593, 'length', length, false, false), J$.R(6809601, 'index', index, false, false)), J$.T(6809609, 0, 22, false)) : J$.F(6809657, J$.R(6809625, 'nativeMin', nativeMin, false, true), false)(J$.R(6809633, 'index', index, false, false), J$.B(676978, '-', J$.R(6809641, 'length', length, false, false), J$.T(6809649, 1, 22, false))), index, false, false);
                            }
                            return J$.Rt(6809745, J$.F(6809737, J$.R(6809673, 'baseFindIndex', baseFindIndex, false, true), false)(J$.R(6809681, 'array', array, false, false), J$.F(6809713, J$.R(6809689, 'baseIteratee', baseIteratee, false, true), false)(J$.R(6809697, 'predicate', predicate, false, false), J$.T(6809705, 3, 22, false)), J$.R(6809721, 'index', index, false, false), J$.T(6809729, true, 23, false)));
                        } catch (J$e) {
                            J$.Ex(6809897, J$e);
                        } finally {
                            if (J$.Fr(6809905))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6809841, 'baseFindIndex', baseFindIndex, false, false, false);
            J$.N(6809849, 'baseIteratee', baseIteratee, false, false, false);
            J$.N(6809857, 'toInteger', toInteger, false, false, false);
            J$.N(6809865, 'nativeMax', nativeMax, false, false, false);
            J$.N(6809873, 'nativeMin', nativeMin, false, false, false);
            findLastIndex = J$.N(6809889, 'findLastIndex', J$.T(6809881, findLastIndex, 12, false), true, false, false);
            var baseFindIndex = J$.W(6809353, 'baseFindIndex', J$.F(6809297, J$.I(typeof require === 'undefined' ? require = J$.R(6809281, 'require', undefined, true, true) : require = J$.R(6809281, 'require', require, true, true)), false)(J$.T(6809289, './_baseFindIndex', 21, false)), baseFindIndex, false, true), baseIteratee = J$.W(6809361, 'baseIteratee', J$.F(6809321, J$.I(typeof require === 'undefined' ? require = J$.R(6809305, 'require', undefined, true, true) : require = J$.R(6809305, 'require', require, true, true)), false)(J$.T(6809313, './_baseIteratee', 21, false)), baseIteratee, false, true), toInteger = J$.W(6809369, 'toInteger', J$.F(6809345, J$.I(typeof require === 'undefined' ? require = J$.R(6809329, 'require', undefined, true, true) : require = J$.R(6809329, 'require', require, true, true)), false)(J$.T(6809337, './toInteger', 21, false)), toInteger, false, true);
            var nativeMax = J$.W(6809409, 'nativeMax', J$.G(6809385, J$.I(typeof Math === 'undefined' ? Math = J$.R(6809377, 'Math', undefined, true, true) : Math = J$.R(6809377, 'Math', Math, true, true)), 'max'), nativeMax, false, true), nativeMin = J$.W(6809417, 'nativeMin', J$.G(6809401, J$.I(typeof Math === 'undefined' ? Math = J$.R(6809393, 'Math', undefined, true, true) : Math = J$.R(6809393, 'Math', Math, true, true)), 'min'), nativeMin, false, true);
            J$.P(6809825, J$.I(typeof module === 'undefined' ? module = J$.R(6809809, 'module', undefined, true, true) : module = J$.R(6809809, 'module', module, true, true)), 'exports', J$.R(6809817, 'findLastIndex', findLastIndex, false, true));
        } catch (J$e) {
            J$.Ex(6809913, J$e);
        } finally {
            if (J$.Sr(6809921))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

