J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6652369, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_createCaseFirst.js');
            function createCaseFirst(methodName) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6652321, arguments.callee, this, arguments);
                            arguments = J$.N(6652329, 'arguments', arguments, true, false, false);
                            methodName = J$.N(6652337, 'methodName', methodName, true, false, false);
                            return J$.Rt(6652313, J$.T(6652305, function (string) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6652257, arguments.callee, this, arguments);
                                            arguments = J$.N(6652265, 'arguments', arguments, true, false, false);
                                            string = J$.N(6652273, 'string', string, true, false, false);
                                            J$.N(6652281, 'strSymbols', strSymbols, false, false, false);
                                            J$.N(6652289, 'chr', chr, false, false, false);
                                            J$.N(6652297, 'trailing', trailing, false, false, false);
                                            string = J$.W(6651993, 'string', J$.F(6651985, J$.R(6651969, 'toString', toString, false, true), false)(J$.R(6651977, 'string', string, false, false)), string, false, false);
                                            var strSymbols = J$.W(6652057, 'strSymbols', J$.C(350096, J$.F(6652017, J$.R(6652001, 'hasUnicode', hasUnicode, false, true), false)(J$.R(6652009, 'string', string, false, false))) ? J$.F(6652041, J$.R(6652025, 'stringToArray', stringToArray, false, true), false)(J$.R(6652033, 'string', string, false, false)) : J$.T(6652049, undefined, 24, false), strSymbols, false, false);
                                            var chr = J$.W(6652121, 'chr', J$.C(350104, J$.R(6652065, 'strSymbols', strSymbols, false, false)) ? J$.G(6652089, J$.R(6652073, 'strSymbols', strSymbols, false, false), J$.T(6652081, 0, 22, false)) : J$.M(6652113, J$.R(6652097, 'string', string, false, false), 'charAt', false)(J$.T(6652105, 0, 22, false)), chr, false, false);
                                            var trailing = J$.W(6652209, 'trailing', J$.C(350112, J$.R(6652129, 'strSymbols', strSymbols, false, false)) ? J$.M(6652177, J$.F(6652161, J$.R(6652137, 'castSlice', castSlice, false, true), false)(J$.R(6652145, 'strSymbols', strSymbols, false, false), J$.T(6652153, 1, 22, false)), 'join', false)(J$.T(6652169, '', 21, false)) : J$.M(6652201, J$.R(6652185, 'string', string, false, false), 'slice', false)(J$.T(6652193, 1, 22, false)), trailing, false, false);
                                            return J$.Rt(6652249, J$.B(664570, '+', J$.M(6652233, J$.R(6652217, 'chr', chr, false, false), J$.R(6652225, 'methodName', methodName, false, false), false)(), J$.R(6652241, 'trailing', trailing, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(6652425, J$e);
                                        } finally {
                                            if (J$.Fr(6652433))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(6652441, J$e);
                        } finally {
                            if (J$.Fr(6652449))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6652377, 'castSlice', castSlice, false, false, false);
            J$.N(6652385, 'hasUnicode', hasUnicode, false, false, false);
            J$.N(6652393, 'stringToArray', stringToArray, false, false, false);
            J$.N(6652401, 'toString', toString, false, false, false);
            createCaseFirst = J$.N(6652417, 'createCaseFirst', J$.T(6652409, createCaseFirst, 12, false), true, false, false);
            var castSlice = J$.W(6651937, 'castSlice', J$.F(6651857, J$.I(typeof require === 'undefined' ? require = J$.R(6651841, 'require', undefined, true, true) : require = J$.R(6651841, 'require', require, true, true)), false)(J$.T(6651849, './_castSlice', 21, false)), castSlice, false, true), hasUnicode = J$.W(6651945, 'hasUnicode', J$.F(6651881, J$.I(typeof require === 'undefined' ? require = J$.R(6651865, 'require', undefined, true, true) : require = J$.R(6651865, 'require', require, true, true)), false)(J$.T(6651873, './_hasUnicode', 21, false)), hasUnicode, false, true), stringToArray = J$.W(6651953, 'stringToArray', J$.F(6651905, J$.I(typeof require === 'undefined' ? require = J$.R(6651889, 'require', undefined, true, true) : require = J$.R(6651889, 'require', require, true, true)), false)(J$.T(6651897, './_stringToArray', 21, false)), stringToArray, false, true), toString = J$.W(6651961, 'toString', J$.F(6651929, J$.I(typeof require === 'undefined' ? require = J$.R(6651913, 'require', undefined, true, true) : require = J$.R(6651913, 'require', require, true, true)), false)(J$.T(6651921, './toString', 21, false)), toString, false, true);
            J$.P(6652361, J$.I(typeof module === 'undefined' ? module = J$.R(6652345, 'module', undefined, true, true) : module = J$.R(6652345, 'module', module, true, true)), 'exports', J$.R(6652353, 'createCaseFirst', createCaseFirst, false, true));
        } catch (J$e) {
            J$.Ex(6652457, J$e);
        } finally {
            if (J$.Sr(6652465))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

