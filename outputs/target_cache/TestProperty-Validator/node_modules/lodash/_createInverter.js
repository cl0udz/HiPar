J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6660089, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_createInverter.js');
            function createInverter(setter, toIteratee) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6660033, arguments.callee, this, arguments);
                            arguments = J$.N(6660041, 'arguments', arguments, true, false, false);
                            setter = J$.N(6660049, 'setter', setter, true, false, false);
                            toIteratee = J$.N(6660057, 'toIteratee', toIteratee, true, false, false);
                            return J$.Rt(6660025, J$.T(6660017, function (object, iteratee) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6659985, arguments.callee, this, arguments);
                                            arguments = J$.N(6659993, 'arguments', arguments, true, false, false);
                                            object = J$.N(6660001, 'object', object, true, false, false);
                                            iteratee = J$.N(6660009, 'iteratee', iteratee, true, false, false);
                                            return J$.Rt(6659977, J$.F(6659969, J$.R(6659913, 'baseInverter', baseInverter, false, true), false)(J$.R(6659921, 'object', object, false, false), J$.R(6659929, 'setter', setter, false, false), J$.F(6659953, J$.R(6659937, 'toIteratee', toIteratee, false, false), false)(J$.R(6659945, 'iteratee', iteratee, false, false)), J$.T(6659961, {}, 11, false)));
                                        } catch (J$e) {
                                            J$.Ex(6660121, J$e);
                                        } finally {
                                            if (J$.Fr(6660129))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(6660137, J$e);
                        } finally {
                            if (J$.Fr(6660145))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6660097, 'baseInverter', baseInverter, false, false, false);
            createInverter = J$.N(6660113, 'createInverter', J$.T(6660105, createInverter, 12, false), true, false, false);
            var baseInverter = J$.W(6659905, 'baseInverter', J$.F(6659897, J$.I(typeof require === 'undefined' ? require = J$.R(6659881, 'require', undefined, true, true) : require = J$.R(6659881, 'require', require, true, true)), false)(J$.T(6659889, './_baseInverter', 21, false)), baseInverter, false, true);
            J$.P(6660081, J$.I(typeof module === 'undefined' ? module = J$.R(6660065, 'module', undefined, true, true) : module = J$.R(6660065, 'module', module, true, true)), 'exports', J$.R(6660073, 'createInverter', createInverter, false, true));
        } catch (J$e) {
            J$.Ex(6660153, J$e);
        } finally {
            if (J$.Sr(6660161))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

