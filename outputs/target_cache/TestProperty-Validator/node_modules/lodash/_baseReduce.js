J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(1986281, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseReduce.js');
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(1986201, arguments.callee, this, arguments);
                            arguments = J$.N(1986209, 'arguments', arguments, true, false, false);
                            collection = J$.N(1986217, 'collection', collection, true, false, false);
                            iteratee = J$.N(1986225, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(1986233, 'accumulator', accumulator, true, false, false);
                            initAccum = J$.N(1986241, 'initAccum', initAccum, true, false, false);
                            eachFunc = J$.N(1986249, 'eachFunc', eachFunc, true, false, false);
                            J$.F(1986177, J$.R(1986025, 'eachFunc', eachFunc, false, false), false)(J$.R(1986033, 'collection', collection, false, false), J$.T(1986169, function (value, index, collection) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(1986129, arguments.callee, this, arguments);
                                            arguments = J$.N(1986137, 'arguments', arguments, true, false, false);
                                            value = J$.N(1986145, 'value', value, true, false, false);
                                            index = J$.N(1986153, 'index', index, true, false, false);
                                            collection = J$.N(1986161, 'collection', collection, true, false, false);
                                            accumulator = J$.W(1986121, 'accumulator', J$.C(97872, J$.R(1986041, 'initAccum', initAccum, false, false)) ? (initAccum = J$.W(1986057, 'initAccum', J$.T(1986049, false, 23, false), initAccum, false, false), J$.R(1986065, 'value', value, false, false)) : J$.F(1986113, J$.R(1986073, 'iteratee', iteratee, false, false), false)(J$.R(1986081, 'accumulator', accumulator, false, false), J$.R(1986089, 'value', value, false, false), J$.R(1986097, 'index', index, false, false), J$.R(1986105, 'collection', collection, false, false)), accumulator, false, false);
                                        } catch (J$e) {
                                            J$.Ex(1986305, J$e);
                                        } finally {
                                            if (J$.Fr(1986313))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(1986193, J$.R(1986185, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(1986321, J$e);
                        } finally {
                            if (J$.Fr(1986329))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseReduce = J$.N(1986297, 'baseReduce', J$.T(1986289, baseReduce, 12, false), true, false, false);
            J$.P(1986273, J$.I(typeof module === 'undefined' ? module = J$.R(1986257, 'module', undefined, true, true) : module = J$.R(1986257, 'module', module, true, true)), 'exports', J$.R(1986265, 'baseReduce', baseReduce, false, true));
        } catch (J$e) {
            J$.Ex(1986337, J$e);
        } finally {
            if (J$.Sr(1986345))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

