J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2916649, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseReduce.js');
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2916569, arguments.callee, this, arguments);
                            arguments = J$.N(2916577, 'arguments', arguments, true, false, false);
                            collection = J$.N(2916585, 'collection', collection, true, false, false);
                            iteratee = J$.N(2916593, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(2916601, 'accumulator', accumulator, true, false, false);
                            initAccum = J$.N(2916609, 'initAccum', initAccum, true, false, false);
                            eachFunc = J$.N(2916617, 'eachFunc', eachFunc, true, false, false);
                            J$.F(2916545, J$.R(2916393, 'eachFunc', eachFunc, false, false), false)(J$.R(2916401, 'collection', collection, false, false), J$.T(2916537, function (value, index, collection) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2916497, arguments.callee, this, arguments);
                                            arguments = J$.N(2916505, 'arguments', arguments, true, false, false);
                                            value = J$.N(2916513, 'value', value, true, false, false);
                                            index = J$.N(2916521, 'index', index, true, false, false);
                                            collection = J$.N(2916529, 'collection', collection, true, false, false);
                                            accumulator = J$.W(2916489, 'accumulator', J$.C(154992, J$.R(2916409, 'initAccum', initAccum, false, false)) ? (initAccum = J$.W(2916425, 'initAccum', J$.T(2916417, false, 23, false), initAccum, false, false), J$.R(2916433, 'value', value, false, false)) : J$.F(2916481, J$.R(2916441, 'iteratee', iteratee, false, false), false)(J$.R(2916449, 'accumulator', accumulator, false, false), J$.R(2916457, 'value', value, false, false), J$.R(2916465, 'index', index, false, false), J$.R(2916473, 'collection', collection, false, false)), accumulator, false, false);
                                        } catch (J$e) {
                                            J$.Ex(2916673, J$e);
                                        } finally {
                                            if (J$.Fr(2916681))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(2916561, J$.R(2916553, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(2916689, J$e);
                        } finally {
                            if (J$.Fr(2916697))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseReduce = J$.N(2916665, 'baseReduce', J$.T(2916657, baseReduce, 12, false), true, false, false);
            J$.P(2916641, J$.I(typeof module === 'undefined' ? module = J$.R(2916625, 'module', undefined, true, true) : module = J$.R(2916625, 'module', module, true, true)), 'exports', J$.R(2916633, 'baseReduce', baseReduce, false, true));
        } catch (J$e) {
            J$.Ex(2916705, J$e);
        } finally {
            if (J$.Sr(2916713))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

