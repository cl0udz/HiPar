J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(6627361, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_baseReduce.js');
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(6627281, arguments.callee, this, arguments);
                            arguments = J$.N(6627289, 'arguments', arguments, true, false, false);
                            collection = J$.N(6627297, 'collection', collection, true, false, false);
                            iteratee = J$.N(6627305, 'iteratee', iteratee, true, false, false);
                            accumulator = J$.N(6627313, 'accumulator', accumulator, true, false, false);
                            initAccum = J$.N(6627321, 'initAccum', initAccum, true, false, false);
                            eachFunc = J$.N(6627329, 'eachFunc', eachFunc, true, false, false);
                            J$.F(6627257, J$.R(6627105, 'eachFunc', eachFunc, false, false), false)(J$.R(6627113, 'collection', collection, false, false), J$.T(6627249, function (value, index, collection) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(6627209, arguments.callee, this, arguments);
                                            arguments = J$.N(6627217, 'arguments', arguments, true, false, false);
                                            value = J$.N(6627225, 'value', value, true, false, false);
                                            index = J$.N(6627233, 'index', index, true, false, false);
                                            collection = J$.N(6627241, 'collection', collection, true, false, false);
                                            accumulator = J$.W(6627201, 'accumulator', J$.C(348392, J$.R(6627121, 'initAccum', initAccum, false, false)) ? (initAccum = J$.W(6627137, 'initAccum', J$.T(6627129, false, 23, false), initAccum, false, false), J$.R(6627145, 'value', value, false, false)) : J$.F(6627193, J$.R(6627153, 'iteratee', iteratee, false, false), false)(J$.R(6627161, 'accumulator', accumulator, false, false), J$.R(6627169, 'value', value, false, false), J$.R(6627177, 'index', index, false, false), J$.R(6627185, 'collection', collection, false, false)), accumulator, false, false);
                                        } catch (J$e) {
                                            J$.Ex(6627385, J$e);
                                        } finally {
                                            if (J$.Fr(6627393))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(6627273, J$.R(6627265, 'accumulator', accumulator, false, false));
                        } catch (J$e) {
                            J$.Ex(6627401, J$e);
                        } finally {
                            if (J$.Fr(6627409))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            baseReduce = J$.N(6627377, 'baseReduce', J$.T(6627369, baseReduce, 12, false), true, false, false);
            J$.P(6627353, J$.I(typeof module === 'undefined' ? module = J$.R(6627337, 'module', undefined, true, true) : module = J$.R(6627337, 'module', module, true, true)), 'exports', J$.R(6627345, 'baseReduce', baseReduce, false, true));
        } catch (J$e) {
            J$.Ex(6627417, J$e);
        } finally {
            if (J$.Sr(6627425))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

