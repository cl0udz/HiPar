J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(7316313, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/take.js');
            function take(array, n, guard) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(7316249, arguments.callee, this, arguments);
                            arguments = J$.N(7316257, 'arguments', arguments, true, false, false);
                            array = J$.N(7316265, 'array', array, true, false, false);
                            n = J$.N(7316273, 'n', n, true, false, false);
                            guard = J$.N(7316281, 'guard', guard, true, false, false);
                            if (J$.C(389144, J$.U(708610, '!', J$.C(389136, J$.R(7316073, 'array', array, false, false)) ? J$.G(7316089, J$.R(7316081, 'array', array, false, false), 'length') : J$._()))) {
                                return J$.Rt(7316105, J$.T(7316097, [], 10, false));
                            }
                            n = J$.W(7316169, 'n', J$.C(389160, J$.C(389152, J$.R(7316113, 'guard', guard, false, false)) ? J$._() : J$.B(708618, '===', J$.R(7316121, 'n', n, false, false), J$.T(7316129, undefined, 24, false))) ? J$.T(7316137, 1, 22, false) : J$.F(7316161, J$.R(7316145, 'toInteger', toInteger, false, true), false)(J$.R(7316153, 'n', n, false, false)), n, false, false);
                            return J$.Rt(7316241, J$.F(7316233, J$.R(7316177, 'baseSlice', baseSlice, false, true), false)(J$.R(7316185, 'array', array, false, false), J$.T(7316193, 0, 22, false), J$.C(389168, J$.B(708626, '<', J$.R(7316201, 'n', n, false, false), J$.T(7316209, 0, 22, false))) ? J$.T(7316217, 0, 22, false) : J$.R(7316225, 'n', n, false, false)));
                        } catch (J$e) {
                            J$.Ex(7316353, J$e);
                        } finally {
                            if (J$.Fr(7316361))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(7316321, 'baseSlice', baseSlice, false, false, false);
            J$.N(7316329, 'toInteger', toInteger, false, false, false);
            take = J$.N(7316345, 'take', J$.T(7316337, take, 12, false), true, false, false);
            var baseSlice = J$.W(7316057, 'baseSlice', J$.F(7316025, J$.I(typeof require === 'undefined' ? require = J$.R(7316009, 'require', undefined, true, true) : require = J$.R(7316009, 'require', require, true, true)), false)(J$.T(7316017, './_baseSlice', 21, false)), baseSlice, false, true), toInteger = J$.W(7316065, 'toInteger', J$.F(7316049, J$.I(typeof require === 'undefined' ? require = J$.R(7316033, 'require', undefined, true, true) : require = J$.R(7316033, 'require', require, true, true)), false)(J$.T(7316041, './toInteger', 21, false)), toInteger, false, true);
            J$.P(7316305, J$.I(typeof module === 'undefined' ? module = J$.R(7316289, 'module', undefined, true, true) : module = J$.R(7316289, 'module', module, true, true)), 'exports', J$.R(7316297, 'take', take, false, true));
        } catch (J$e) {
            J$.Ex(7316369, J$e);
        } finally {
            if (J$.Sr(7316377))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

