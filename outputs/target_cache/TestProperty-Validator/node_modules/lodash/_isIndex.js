J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(2049065, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_isIndex.js');
            function isIndex(value, length) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2049001, arguments.callee, this, arguments);
                            arguments = J$.N(2049009, 'arguments', arguments, true, false, false);
                            value = J$.N(2049017, 'value', value, true, false, false);
                            length = J$.N(2049025, 'length', length, true, false, false);
                            J$.N(2049033, 'type', type, false, false, false);
                            var type = J$.W(2048825, 'type', J$.U(150314, 'typeof', J$.R(2048817, 'value', value, false, false)), type, false, false);
                            length = J$.W(2048865, 'length', J$.C(101936, J$.B(150322, '==', J$.R(2048833, 'length', length, false, false), J$.T(2048841, null, 25, false))) ? J$.R(2048849, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, false, true) : J$.R(2048857, 'length', length, false, false), length, false, false);
                            return J$.Rt(2048993, J$.C(101984, J$.C(101960, J$.U(150338, '!', J$.U(150330, '!', J$.R(2048873, 'length', length, false, false)))) ? J$.C(101952, J$.B(150346, '==', J$.R(2048881, 'type', type, false, false), J$.T(2048889, 'number', 21, false))) ? J$._() : J$.C(101944, J$.B(150354, '!=', J$.R(2048897, 'type', type, false, false), J$.T(2048905, 'symbol', 21, false))) ? J$.M(2048929, J$.R(2048913, 'reIsUint', reIsUint, false, true), 'test', false)(J$.R(2048921, 'value', value, false, false)) : J$._() : J$._()) ? J$.C(101976, J$.C(101968, J$.B(150370, '>', J$.R(2048937, 'value', value, false, false), J$.U(150362, '-', J$.T(2048945, 1, 22, false)))) ? J$.B(150386, '==', J$.B(150378, '%', J$.R(2048953, 'value', value, false, false), J$.T(2048961, 1, 22, false)), J$.T(2048969, 0, 22, false)) : J$._()) ? J$.B(150394, '<', J$.R(2048977, 'value', value, false, false), J$.R(2048985, 'length', length, false, false)) : J$._() : J$._());
                        } catch (J$e) {
                            J$.Ex(2049105, J$e);
                        } finally {
                            if (J$.Fr(2049113))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2049073, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, false, false, false);
            J$.N(2049081, 'reIsUint', reIsUint, false, false, false);
            isIndex = J$.N(2049097, 'isIndex', J$.T(2049089, isIndex, 12, false), true, false, false);
            var MAX_SAFE_INTEGER = J$.W(2048793, 'MAX_SAFE_INTEGER', J$.T(2048785, 9007199254740991, 22, false), MAX_SAFE_INTEGER, false, true);
            var reIsUint = J$.W(2048809, 'reIsUint', J$.T(2048801, /^(?:0|[1-9]\d*)$/, 14, false), reIsUint, false, true);
            J$.P(2049057, J$.I(typeof module === 'undefined' ? module = J$.R(2049041, 'module', undefined, true, true) : module = J$.R(2049041, 'module', module, true, true)), 'exports', J$.R(2049049, 'isIndex', isIndex, false, true));
        } catch (J$e) {
            J$.Ex(2049121, J$e);
        } finally {
            if (J$.Sr(2049129))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

