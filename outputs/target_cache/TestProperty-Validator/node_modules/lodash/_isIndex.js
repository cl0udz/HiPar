J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6690145, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_isIndex.js');
            function isIndex(value, length) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6690081, arguments.callee, this, arguments);
                            arguments = J$.N(6690089, 'arguments', arguments, true, false, false);
                            value = J$.N(6690097, 'value', value, true, false, false);
                            length = J$.N(6690105, 'length', length, true, false, false);
                            J$.N(6690113, 'type', type, false, false, false);
                            var type = J$.W(6689905, 'type', J$.U(666850, 'typeof', J$.R(6689897, 'value', value, false, false)), type, false, false);
                            length = J$.W(6689945, 'length', J$.C(352456, J$.B(666858, '==', J$.R(6689913, 'length', length, false, false), J$.T(6689921, null, 25, false))) ? J$.R(6689929, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, false, true) : J$.R(6689937, 'length', length, false, false), length, false, false);
                            return J$.Rt(6690073, J$.C(352504, J$.C(352480, J$.U(666874, '!', J$.U(666866, '!', J$.R(6689953, 'length', length, false, false)))) ? J$.C(352472, J$.B(666882, '==', J$.R(6689961, 'type', type, false, false), J$.T(6689969, 'number', 21, false))) ? J$._() : J$.C(352464, J$.B(666890, '!=', J$.R(6689977, 'type', type, false, false), J$.T(6689985, 'symbol', 21, false))) ? J$.M(6690009, J$.R(6689993, 'reIsUint', reIsUint, false, true), 'test', false)(J$.R(6690001, 'value', value, false, false)) : J$._() : J$._()) ? J$.C(352496, J$.C(352488, J$.B(666906, '>', J$.R(6690017, 'value', value, false, false), J$.U(666898, '-', J$.T(6690025, 1, 22, false)))) ? J$.B(666922, '==', J$.B(666914, '%', J$.R(6690033, 'value', value, false, false), J$.T(6690041, 1, 22, false)), J$.T(6690049, 0, 22, false)) : J$._()) ? J$.B(666930, '<', J$.R(6690057, 'value', value, false, false), J$.R(6690065, 'length', length, false, false)) : J$._() : J$._());
                        } catch (J$e) {
                            J$.Ex(6690185, J$e);
                        } finally {
                            if (J$.Fr(6690193))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6690153, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, false, false, false);
            J$.N(6690161, 'reIsUint', reIsUint, false, false, false);
            isIndex = J$.N(6690177, 'isIndex', J$.T(6690169, isIndex, 12, false), true, false, false);
            var MAX_SAFE_INTEGER = J$.W(6689873, 'MAX_SAFE_INTEGER', J$.T(6689865, 9007199254740991, 22, false), MAX_SAFE_INTEGER, false, true);
            var reIsUint = J$.W(6689889, 'reIsUint', J$.T(6689881, /^(?:0|[1-9]\d*)$/, 14, false), reIsUint, false, true);
            J$.P(6690137, J$.I(typeof module === 'undefined' ? module = J$.R(6690121, 'module', undefined, true, true) : module = J$.R(6690121, 'module', module, true, true)), 'exports', J$.R(6690129, 'isIndex', isIndex, false, true));
        } catch (J$e) {
            J$.Ex(6690201, J$e);
        } finally {
            if (J$.Sr(6690209))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

