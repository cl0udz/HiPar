J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6668985, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_createWrap.js');
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6668817, arguments.callee, this, arguments);
                            arguments = J$.N(6668825, 'arguments', arguments, true, false, false);
                            func = J$.N(6668833, 'func', func, true, false, false);
                            bitmask = J$.N(6668841, 'bitmask', bitmask, true, false, false);
                            thisArg = J$.N(6668849, 'thisArg', thisArg, true, false, false);
                            partials = J$.N(6668857, 'partials', partials, true, false, false);
                            holders = J$.N(6668865, 'holders', holders, true, false, false);
                            argPos = J$.N(6668873, 'argPos', argPos, true, false, false);
                            ary = J$.N(6668881, 'ary', ary, true, false, false);
                            arity = J$.N(6668889, 'arity', arity, true, false, false);
                            J$.N(6668897, 'isBindKey', isBindKey, false, false, false);
                            J$.N(6668905, 'length', length, false, false, false);
                            J$.N(6668913, 'partialsRight', partialsRight, false, false, false);
                            J$.N(6668921, 'holdersRight', holdersRight, false, false, false);
                            J$.N(6668929, 'data', data, false, false, false);
                            J$.N(6668937, 'newData', newData, false, false, false);
                            J$.N(6668945, 'result', result, false, false, false);
                            J$.N(6668953, 'setter', setter, false, false, false);
                            var isBindKey = J$.W(6667433, 'isBindKey', J$.B(665546, '&', J$.R(6667417, 'bitmask', bitmask, false, false), J$.R(6667425, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, true)), isBindKey, false, false);
                            if (J$.C(350928, J$.C(350920, J$.U(665554, '!', J$.R(6667441, 'isBindKey', isBindKey, false, false))) ? J$.B(665570, '!=', J$.U(665562, 'typeof', J$.R(6667449, 'func', func, false, false)), J$.T(6667457, 'function', 21, false)) : J$._())) {
                                throw J$.F(6667481, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(6667465, 'TypeError', undefined, true, true) : TypeError = J$.R(6667465, 'TypeError', TypeError, true, true)), true)(J$.R(6667473, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, true));
                            }
                            var length = J$.W(6667521, 'length', J$.C(350936, J$.R(6667489, 'partials', partials, false, false)) ? J$.G(6667505, J$.R(6667497, 'partials', partials, false, false), 'length') : J$.T(6667513, 0, 22, false), length, false, false);
                            if (J$.C(350944, J$.U(665578, '!', J$.R(6667529, 'length', length, false, false)))) {
                                bitmask = J$.W(6667561, 'bitmask', J$.B(665602, '&', J$.R(6667553, 'bitmask', bitmask, false, false), J$.U(665594, '~', J$.B(665586, '|', J$.R(6667537, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true), J$.R(6667545, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))), bitmask, false, false);
                                partials = J$.W(6667585, 'partials', holders = J$.W(6667577, 'holders', J$.T(6667569, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            ary = J$.W(6667665, 'ary', J$.C(350952, J$.B(665610, '===', J$.R(6667593, 'ary', ary, false, false), J$.T(6667601, undefined, 24, false))) ? J$.R(6667609, 'ary', ary, false, false) : J$.F(6667657, J$.R(6667617, 'nativeMax', nativeMax, false, true), false)(J$.F(6667641, J$.R(6667625, 'toInteger', toInteger, false, true), false)(J$.R(6667633, 'ary', ary, false, false)), J$.T(6667649, 0, 22, false)), ary, false, false);
                            arity = J$.W(6667721, 'arity', J$.C(350960, J$.B(665618, '===', J$.R(6667673, 'arity', arity, false, false), J$.T(6667681, undefined, 24, false))) ? J$.R(6667689, 'arity', arity, false, false) : J$.F(6667713, J$.R(6667697, 'toInteger', toInteger, false, true), false)(J$.R(6667705, 'arity', arity, false, false)), arity, false, false);
                            length = J$.W(6667769, 'length', J$.B(665626, '-', J$.R(6667761, 'length', length, false, false), J$.C(350968, J$.R(6667729, 'holders', holders, false, false)) ? J$.G(6667745, J$.R(6667737, 'holders', holders, false, false), 'length') : J$.T(6667753, 0, 22, false)), length, false, false);
                            if (J$.C(350976, J$.B(665634, '&', J$.R(6667777, 'bitmask', bitmask, false, false), J$.R(6667785, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, true)))) {
                                var partialsRight = J$.W(6667809, 'partialsRight', J$.R(6667793, 'partials', partials, false, false), partialsRight, false, false), holdersRight = J$.W(6667817, 'holdersRight', J$.R(6667801, 'holders', holders, false, false), holdersRight, false, false);
                                partials = J$.W(6667841, 'partials', holders = J$.W(6667833, 'holders', J$.T(6667825, undefined, 24, false), holders, false, false), partials, false, false);
                            }
                            var data = J$.W(6667889, 'data', J$.C(350984, J$.R(6667849, 'isBindKey', isBindKey, false, false)) ? J$.T(6667857, undefined, 24, false) : J$.F(6667881, J$.R(6667865, 'getData', getData, false, true), false)(J$.R(6667873, 'func', func, false, false)), data, false, false);
                            var newData = J$.W(6667985, 'newData', J$.T(6667977, [
                                J$.R(6667897, 'func', func, false, false),
                                J$.R(6667905, 'bitmask', bitmask, false, false),
                                J$.R(6667913, 'thisArg', thisArg, false, false),
                                J$.R(6667921, 'partials', partials, false, false),
                                J$.R(6667929, 'holders', holders, false, false),
                                J$.R(6667937, 'partialsRight', partialsRight, false, false),
                                J$.R(6667945, 'holdersRight', holdersRight, false, false),
                                J$.R(6667953, 'argPos', argPos, false, false),
                                J$.R(6667961, 'ary', ary, false, false),
                                J$.R(6667969, 'arity', arity, false, false)
                            ], 10, false), newData, false, false);
                            if (J$.C(350992, J$.R(6667993, 'data', data, false, false))) {
                                J$.F(6668025, J$.R(6668001, 'mergeData', mergeData, false, true), false)(J$.R(6668009, 'newData', newData, false, false), J$.R(6668017, 'data', data, false, false));
                            }
                            func = J$.W(6668057, 'func', J$.G(6668049, J$.R(6668033, 'newData', newData, false, false), J$.T(6668041, 0, 22, false)), func, false, false);
                            bitmask = J$.W(6668089, 'bitmask', J$.G(6668081, J$.R(6668065, 'newData', newData, false, false), J$.T(6668073, 1, 22, false)), bitmask, false, false);
                            thisArg = J$.W(6668121, 'thisArg', J$.G(6668113, J$.R(6668097, 'newData', newData, false, false), J$.T(6668105, 2, 22, false)), thisArg, false, false);
                            partials = J$.W(6668153, 'partials', J$.G(6668145, J$.R(6668129, 'newData', newData, false, false), J$.T(6668137, 3, 22, false)), partials, false, false);
                            holders = J$.W(6668185, 'holders', J$.G(6668177, J$.R(6668161, 'newData', newData, false, false), J$.T(6668169, 4, 22, false)), holders, false, false);
                            arity = J$.W(6668337, 'arity', J$.P(6668329, J$.R(6668193, 'newData', newData, false, false), J$.T(6668201, 9, 22, false), J$.C(351008, J$.B(665642, '===', J$.G(6668225, J$.R(6668209, 'newData', newData, false, false), J$.T(6668217, 9, 22, false)), J$.T(6668233, undefined, 24, false))) ? J$.C(351000, J$.R(6668241, 'isBindKey', isBindKey, false, false)) ? J$.T(6668249, 0, 22, false) : J$.G(6668265, J$.R(6668257, 'func', func, false, false), 'length') : J$.F(6668321, J$.R(6668273, 'nativeMax', nativeMax, false, true), false)(J$.B(665650, '-', J$.G(6668297, J$.R(6668281, 'newData', newData, false, false), J$.T(6668289, 9, 22, false)), J$.R(6668305, 'length', length, false, false)), J$.T(6668313, 0, 22, false))), arity, false, false);
                            if (J$.C(351024, J$.C(351016, J$.U(665658, '!', J$.R(6668345, 'arity', arity, false, false))) ? J$.B(665674, '&', J$.R(6668353, 'bitmask', bitmask, false, false), J$.B(665666, '|', J$.R(6668361, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(6668369, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true))) : J$._())) {
                                bitmask = J$.W(6668401, 'bitmask', J$.B(665698, '&', J$.R(6668393, 'bitmask', bitmask, false, false), J$.U(665690, '~', J$.B(665682, '|', J$.R(6668377, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true), J$.R(6668385, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))), bitmask, false, false);
                            }
                            if (J$.C(351080, J$.C(351032, J$.U(665706, '!', J$.R(6668409, 'bitmask', bitmask, false, false))) ? J$._() : J$.B(665714, '==', J$.R(6668417, 'bitmask', bitmask, false, false), J$.R(6668425, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true)))) {
                                var result = J$.W(6668473, 'result', J$.F(6668465, J$.R(6668433, 'createBind', createBind, false, true), false)(J$.R(6668441, 'func', func, false, false), J$.R(6668449, 'bitmask', bitmask, false, false), J$.R(6668457, 'thisArg', thisArg, false, false)), result, false, false);
                            } else if (J$.C(351072, J$.C(351040, J$.B(665722, '==', J$.R(6668481, 'bitmask', bitmask, false, false), J$.R(6668489, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, true))) ? J$._() : J$.B(665730, '==', J$.R(6668497, 'bitmask', bitmask, false, false), J$.R(6668505, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, true)))) {
                                result = J$.W(6668553, 'result', J$.F(6668545, J$.R(6668513, 'createCurry', createCurry, false, true), false)(J$.R(6668521, 'func', func, false, false), J$.R(6668529, 'bitmask', bitmask, false, false), J$.R(6668537, 'arity', arity, false, false)), result, false, false);
                            } else if (J$.C(351064, J$.C(351056, J$.C(351048, J$.B(665738, '==', J$.R(6668561, 'bitmask', bitmask, false, false), J$.R(6668569, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true))) ? J$._() : J$.B(665754, '==', J$.R(6668577, 'bitmask', bitmask, false, false), J$.B(665746, '|', J$.R(6668585, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, true), J$.R(6668593, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, true)))) ? J$.U(665762, '!', J$.G(6668609, J$.R(6668601, 'holders', holders, false, false), 'length')) : J$._())) {
                                result = J$.W(6668665, 'result', J$.F(6668657, J$.R(6668617, 'createPartial', createPartial, false, true), false)(J$.R(6668625, 'func', func, false, false), J$.R(6668633, 'bitmask', bitmask, false, false), J$.R(6668641, 'thisArg', thisArg, false, false), J$.R(6668649, 'partials', partials, false, false)), result, false, false);
                            } else {
                                result = J$.W(6668705, 'result', J$.M(6668697, J$.R(6668673, 'createHybrid', createHybrid, false, true), 'apply', false)(J$.T(6668681, undefined, 24, false), J$.R(6668689, 'newData', newData, false, false)), result, false, false);
                            }
                            var setter = J$.W(6668737, 'setter', J$.C(351088, J$.R(6668713, 'data', data, false, false)) ? J$.R(6668721, 'baseSetData', baseSetData, false, true) : J$.R(6668729, 'setData', setData, false, true), setter, false, false);
                            return J$.Rt(6668809, J$.F(6668801, J$.R(6668745, 'setWrapToString', setWrapToString, false, true), false)(J$.F(6668777, J$.R(6668753, 'setter', setter, false, false), false)(J$.R(6668761, 'result', result, false, false), J$.R(6668769, 'newData', newData, false, false)), J$.R(6668785, 'func', func, false, false), J$.R(6668793, 'bitmask', bitmask, false, false)));
                        } catch (J$e) {
                            J$.Ex(6669153, J$e);
                        } finally {
                            if (J$.Fr(6669161))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6668993, 'baseSetData', baseSetData, false, false, false);
            J$.N(6669001, 'createBind', createBind, false, false, false);
            J$.N(6669009, 'createCurry', createCurry, false, false, false);
            J$.N(6669017, 'createHybrid', createHybrid, false, false, false);
            J$.N(6669025, 'createPartial', createPartial, false, false, false);
            J$.N(6669033, 'getData', getData, false, false, false);
            J$.N(6669041, 'mergeData', mergeData, false, false, false);
            J$.N(6669049, 'setData', setData, false, false, false);
            J$.N(6669057, 'setWrapToString', setWrapToString, false, false, false);
            J$.N(6669065, 'toInteger', toInteger, false, false, false);
            J$.N(6669073, 'FUNC_ERROR_TEXT', FUNC_ERROR_TEXT, false, false, false);
            J$.N(6669081, 'WRAP_BIND_FLAG', WRAP_BIND_FLAG, false, false, false);
            J$.N(6669089, 'WRAP_BIND_KEY_FLAG', WRAP_BIND_KEY_FLAG, false, false, false);
            J$.N(6669097, 'WRAP_CURRY_FLAG', WRAP_CURRY_FLAG, false, false, false);
            J$.N(6669105, 'WRAP_CURRY_RIGHT_FLAG', WRAP_CURRY_RIGHT_FLAG, false, false, false);
            J$.N(6669113, 'WRAP_PARTIAL_FLAG', WRAP_PARTIAL_FLAG, false, false, false);
            J$.N(6669121, 'WRAP_PARTIAL_RIGHT_FLAG', WRAP_PARTIAL_RIGHT_FLAG, false, false, false);
            J$.N(6669129, 'nativeMax', nativeMax, false, false, false);
            createWrap = J$.N(6669145, 'createWrap', J$.T(6669137, createWrap, 12, false), true, false, false);
            var baseSetData = J$.W(6667201, 'baseSetData', J$.F(6666977, J$.I(typeof require === 'undefined' ? require = J$.R(6666961, 'require', undefined, true, true) : require = J$.R(6666961, 'require', require, true, true)), false)(J$.T(6666969, './_baseSetData', 21, false)), baseSetData, false, true), createBind = J$.W(6667209, 'createBind', J$.F(6667001, J$.I(typeof require === 'undefined' ? require = J$.R(6666985, 'require', undefined, true, true) : require = J$.R(6666985, 'require', require, true, true)), false)(J$.T(6666993, './_createBind', 21, false)), createBind, false, true), createCurry = J$.W(6667217, 'createCurry', J$.F(6667025, J$.I(typeof require === 'undefined' ? require = J$.R(6667009, 'require', undefined, true, true) : require = J$.R(6667009, 'require', require, true, true)), false)(J$.T(6667017, './_createCurry', 21, false)), createCurry, false, true), createHybrid = J$.W(6667225, 'createHybrid', J$.F(6667049, J$.I(typeof require === 'undefined' ? require = J$.R(6667033, 'require', undefined, true, true) : require = J$.R(6667033, 'require', require, true, true)), false)(J$.T(6667041, './_createHybrid', 21, false)), createHybrid, false, true), createPartial = J$.W(6667233, 'createPartial', J$.F(6667073, J$.I(typeof require === 'undefined' ? require = J$.R(6667057, 'require', undefined, true, true) : require = J$.R(6667057, 'require', require, true, true)), false)(J$.T(6667065, './_createPartial', 21, false)), createPartial, false, true), getData = J$.W(6667241, 'getData', J$.F(6667097, J$.I(typeof require === 'undefined' ? require = J$.R(6667081, 'require', undefined, true, true) : require = J$.R(6667081, 'require', require, true, true)), false)(J$.T(6667089, './_getData', 21, false)), getData, false, true), mergeData = J$.W(6667249, 'mergeData', J$.F(6667121, J$.I(typeof require === 'undefined' ? require = J$.R(6667105, 'require', undefined, true, true) : require = J$.R(6667105, 'require', require, true, true)), false)(J$.T(6667113, './_mergeData', 21, false)), mergeData, false, true), setData = J$.W(6667257, 'setData', J$.F(6667145, J$.I(typeof require === 'undefined' ? require = J$.R(6667129, 'require', undefined, true, true) : require = J$.R(6667129, 'require', require, true, true)), false)(J$.T(6667137, './_setData', 21, false)), setData, false, true), setWrapToString = J$.W(6667265, 'setWrapToString', J$.F(6667169, J$.I(typeof require === 'undefined' ? require = J$.R(6667153, 'require', undefined, true, true) : require = J$.R(6667153, 'require', require, true, true)), false)(J$.T(6667161, './_setWrapToString', 21, false)), setWrapToString, false, true), toInteger = J$.W(6667273, 'toInteger', J$.F(6667193, J$.I(typeof require === 'undefined' ? require = J$.R(6667177, 'require', undefined, true, true) : require = J$.R(6667177, 'require', require, true, true)), false)(J$.T(6667185, './toInteger', 21, false)), toInteger, false, true);
            var FUNC_ERROR_TEXT = J$.W(6667289, 'FUNC_ERROR_TEXT', J$.T(6667281, 'Expected a function', 21, false), FUNC_ERROR_TEXT, false, true);
            var WRAP_BIND_FLAG = J$.W(6667345, 'WRAP_BIND_FLAG', J$.T(6667297, 1, 22, false), WRAP_BIND_FLAG, false, true), WRAP_BIND_KEY_FLAG = J$.W(6667353, 'WRAP_BIND_KEY_FLAG', J$.T(6667305, 2, 22, false), WRAP_BIND_KEY_FLAG, false, true), WRAP_CURRY_FLAG = J$.W(6667361, 'WRAP_CURRY_FLAG', J$.T(6667313, 8, 22, false), WRAP_CURRY_FLAG, false, true), WRAP_CURRY_RIGHT_FLAG = J$.W(6667369, 'WRAP_CURRY_RIGHT_FLAG', J$.T(6667321, 16, 22, false), WRAP_CURRY_RIGHT_FLAG, false, true), WRAP_PARTIAL_FLAG = J$.W(6667377, 'WRAP_PARTIAL_FLAG', J$.T(6667329, 32, 22, false), WRAP_PARTIAL_FLAG, false, true), WRAP_PARTIAL_RIGHT_FLAG = J$.W(6667385, 'WRAP_PARTIAL_RIGHT_FLAG', J$.T(6667337, 64, 22, false), WRAP_PARTIAL_RIGHT_FLAG, false, true);
            var nativeMax = J$.W(6667409, 'nativeMax', J$.G(6667401, J$.I(typeof Math === 'undefined' ? Math = J$.R(6667393, 'Math', undefined, true, true) : Math = J$.R(6667393, 'Math', Math, true, true)), 'max'), nativeMax, false, true);
            J$.P(6668977, J$.I(typeof module === 'undefined' ? module = J$.R(6668961, 'module', undefined, true, true) : module = J$.R(6668961, 'module', module, true, true)), 'exports', J$.R(6668969, 'createWrap', createWrap, false, true));
        } catch (J$e) {
            J$.Ex(6669169, J$e);
        } finally {
            if (J$.Sr(6669177))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

