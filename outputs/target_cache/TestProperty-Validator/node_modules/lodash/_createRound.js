J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(2024809, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/_createRound.js');
            function createRound(methodName) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2024753, arguments.callee, this, arguments);
                            arguments = J$.N(2024761, 'arguments', arguments, true, false, false);
                            methodName = J$.N(2024769, 'methodName', methodName, true, false, false);
                            J$.N(2024777, 'func', func, false, false, false);
                            var func = J$.W(2024233, 'func', J$.G(2024225, J$.I(typeof Math === 'undefined' ? Math = J$.R(2024209, 'Math', undefined, true, true) : Math = J$.R(2024209, 'Math', Math, true, true)), J$.R(2024217, 'methodName', methodName, false, false)), func, false, false);
                            return J$.Rt(2024745, J$.T(2024737, function (number, precision) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(2024689, arguments.callee, this, arguments);
                                            arguments = J$.N(2024697, 'arguments', arguments, true, false, false);
                                            number = J$.N(2024705, 'number', number, true, false, false);
                                            precision = J$.N(2024713, 'precision', precision, true, false, false);
                                            J$.N(2024721, 'pair', pair, false, false, false);
                                            J$.N(2024729, 'value', value, false, false, false);
                                            number = J$.W(2024265, 'number', J$.F(2024257, J$.R(2024241, 'toNumber', toNumber, false, true), false)(J$.R(2024249, 'number', number, false, false)), number, false, false);
                                            precision = J$.W(2024345, 'precision', J$.C(100344, J$.B(148858, '==', J$.R(2024273, 'precision', precision, false, false), J$.T(2024281, null, 25, false))) ? J$.T(2024289, 0, 22, false) : J$.F(2024337, J$.R(2024297, 'nativeMin', nativeMin, false, true), false)(J$.F(2024321, J$.R(2024305, 'toInteger', toInteger, false, true), false)(J$.R(2024313, 'precision', precision, false, false)), J$.T(2024329, 292, 22, false)), precision, false, false);
                                            if (J$.C(100360, J$.C(100352, J$.R(2024353, 'precision', precision, false, false)) ? J$.F(2024377, J$.R(2024361, 'nativeIsFinite', nativeIsFinite, false, true), false)(J$.R(2024369, 'number', number, false, false)) : J$._())) {
                                                var pair = J$.W(2024513, 'pair', J$.M(2024425, J$.B(148866, '+', J$.F(2024401, J$.R(2024385, 'toString', toString, false, true), false)(J$.R(2024393, 'number', number, false, false)), J$.T(2024409, 'e', 21, false)), 'split', false)(J$.T(2024417, 'e', 21, false)), pair, false, false), value = J$.W(2024521, 'value', J$.F(2024505, J$.R(2024433, 'func', func, false, false), false)(J$.B(148898, '+', J$.B(148874, '+', J$.G(2024457, J$.R(2024441, 'pair', pair, false, false), J$.T(2024449, 0, 22, false)), J$.T(2024465, 'e', 21, false)), J$.B(148890, '+', J$.U(148882, '+', J$.G(2024489, J$.R(2024473, 'pair', pair, false, false), J$.T(2024481, 1, 22, false))), J$.R(2024497, 'precision', precision, false, false)))), value, false, false);
                                                pair = J$.W(2024577, 'pair', J$.M(2024569, J$.B(148906, '+', J$.F(2024545, J$.R(2024529, 'toString', toString, false, true), false)(J$.R(2024537, 'value', value, false, false)), J$.T(2024553, 'e', 21, false)), 'split', false)(J$.T(2024561, 'e', 21, false)), pair, false, false);
                                                return J$.Rt(2024649, J$.U(148946, '+', J$.B(148938, '+', J$.B(148914, '+', J$.G(2024601, J$.R(2024585, 'pair', pair, false, false), J$.T(2024593, 0, 22, false)), J$.T(2024609, 'e', 21, false)), J$.B(148930, '-', J$.U(148922, '+', J$.G(2024633, J$.R(2024617, 'pair', pair, false, false), J$.T(2024625, 1, 22, false))), J$.R(2024641, 'precision', precision, false, false)))));
                                            }
                                            return J$.Rt(2024681, J$.F(2024673, J$.R(2024657, 'func', func, false, false), false)(J$.R(2024665, 'number', number, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(2024881, J$e);
                                        } finally {
                                            if (J$.Fr(2024889))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(2024897, J$e);
                        } finally {
                            if (J$.Fr(2024905))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2024817, 'root', root, false, false, false);
            J$.N(2024825, 'toInteger', toInteger, false, false, false);
            J$.N(2024833, 'toNumber', toNumber, false, false, false);
            J$.N(2024841, 'toString', toString, false, false, false);
            J$.N(2024849, 'nativeIsFinite', nativeIsFinite, false, false, false);
            J$.N(2024857, 'nativeMin', nativeMin, false, false, false);
            createRound = J$.N(2024873, 'createRound', J$.T(2024865, createRound, 12, false), true, false, false);
            var root = J$.W(2024129, 'root', J$.F(2024049, J$.I(typeof require === 'undefined' ? require = J$.R(2024033, 'require', undefined, true, true) : require = J$.R(2024033, 'require', require, true, true)), false)(J$.T(2024041, './_root', 21, false)), root, false, true), toInteger = J$.W(2024137, 'toInteger', J$.F(2024073, J$.I(typeof require === 'undefined' ? require = J$.R(2024057, 'require', undefined, true, true) : require = J$.R(2024057, 'require', require, true, true)), false)(J$.T(2024065, './toInteger', 21, false)), toInteger, false, true), toNumber = J$.W(2024145, 'toNumber', J$.F(2024097, J$.I(typeof require === 'undefined' ? require = J$.R(2024081, 'require', undefined, true, true) : require = J$.R(2024081, 'require', require, true, true)), false)(J$.T(2024089, './toNumber', 21, false)), toNumber, false, true), toString = J$.W(2024153, 'toString', J$.F(2024121, J$.I(typeof require === 'undefined' ? require = J$.R(2024105, 'require', undefined, true, true) : require = J$.R(2024105, 'require', require, true, true)), false)(J$.T(2024113, './toString', 21, false)), toString, false, true);
            var nativeIsFinite = J$.W(2024193, 'nativeIsFinite', J$.G(2024169, J$.R(2024161, 'root', root, false, true), 'isFinite'), nativeIsFinite, false, true), nativeMin = J$.W(2024201, 'nativeMin', J$.G(2024185, J$.I(typeof Math === 'undefined' ? Math = J$.R(2024177, 'Math', undefined, true, true) : Math = J$.R(2024177, 'Math', Math, true, true)), 'min'), nativeMin, false, true);
            J$.P(2024801, J$.I(typeof module === 'undefined' ? module = J$.R(2024785, 'module', undefined, true, true) : module = J$.R(2024785, 'module', module, true, true)), 'exports', J$.R(2024793, 'createRound', createRound, false, true));
        } catch (J$e) {
            J$.Ex(2024913, J$e);
        } finally {
            if (J$.Sr(2024921))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

