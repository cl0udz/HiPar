J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(6806545, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/lodash/escapeRegExp.js');
            function escapeRegExp(string) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(6806497, arguments.callee, this, arguments);
                            arguments = J$.N(6806505, 'arguments', arguments, true, false, false);
                            string = J$.N(6806513, 'string', string, true, false, false);
                            string = J$.W(6806409, 'string', J$.F(6806401, J$.R(6806385, 'toString', toString, false, true), false)(J$.R(6806393, 'string', string, false, false)), string, false, false);
                            return J$.Rt(6806489, J$.C(359408, J$.C(359400, J$.R(6806417, 'string', string, false, false)) ? J$.M(6806441, J$.R(6806425, 'reHasRegExpChar', reHasRegExpChar, false, true), 'test', false)(J$.R(6806433, 'string', string, false, false)) : J$._()) ? J$.M(6806473, J$.R(6806449, 'string', string, false, false), 'replace', false)(J$.R(6806457, 'reRegExpChar', reRegExpChar, false, true), J$.T(6806465, '\\$&', 21, false)) : J$.R(6806481, 'string', string, false, false));
                        } catch (J$e) {
                            J$.Ex(6806593, J$e);
                        } finally {
                            if (J$.Fr(6806601))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(6806553, 'toString', toString, false, false, false);
            J$.N(6806561, 'reRegExpChar', reRegExpChar, false, false, false);
            J$.N(6806569, 'reHasRegExpChar', reHasRegExpChar, false, false, false);
            escapeRegExp = J$.N(6806585, 'escapeRegExp', J$.T(6806577, escapeRegExp, 12, false), true, false, false);
            var toString = J$.W(6806321, 'toString', J$.F(6806313, J$.I(typeof require === 'undefined' ? require = J$.R(6806297, 'require', undefined, true, true) : require = J$.R(6806297, 'require', require, true, true)), false)(J$.T(6806305, './toString', 21, false)), toString, false, true);
            var reRegExpChar = J$.W(6806369, 'reRegExpChar', J$.T(6806329, /[\\^$.*+?()[\]{}|]/g, 14, false), reRegExpChar, false, true), reHasRegExpChar = J$.W(6806377, 'reHasRegExpChar', J$.F(6806361, J$.I(typeof RegExp === 'undefined' ? RegExp = J$.R(6806337, 'RegExp', undefined, true, true) : RegExp = J$.R(6806337, 'RegExp', RegExp, true, true)), false)(J$.G(6806353, J$.R(6806345, 'reRegExpChar', reRegExpChar, false, true), 'source')), reHasRegExpChar, false, true);
            J$.P(6806537, J$.I(typeof module === 'undefined' ? module = J$.R(6806521, 'module', undefined, true, true) : module = J$.R(6806521, 'module', module, true, true)), 'exports', J$.R(6806529, 'escapeRegExp', escapeRegExp, false, true));
        } catch (J$e) {
            J$.Ex(6806609, J$e);
        } finally {
            if (J$.Sr(6806617))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

