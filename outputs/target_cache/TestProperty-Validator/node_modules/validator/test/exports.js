J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(3645849, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/validator/test/exports.js');
            J$.N(3645857, 'assert', assert, false, false, false);
            J$.N(3645865, 'validator', validator, false, false, false);
            var assert = J$.W(3645409, 'assert', J$.F(3645377, J$.I(typeof require === 'undefined' ? require = J$.R(3645361, 'require', undefined, true, true) : require = J$.R(3645361, 'require', require, true, true)), false)(J$.T(3645369, 'assert', 21, false)), assert, false, true), validator = J$.W(3645417, 'validator', J$.F(3645401, J$.I(typeof require === 'undefined' ? require = J$.R(3645385, 'require', undefined, true, true) : require = J$.R(3645385, 'require', require, true, true)), false)(J$.T(3645393, '../validator', 21, false)), validator, false, true);
            J$.F(3645841, J$.I(typeof describe === 'undefined' ? describe = J$.R(3645425, 'describe', undefined, true, true) : describe = J$.R(3645425, 'describe', describe, true, true)), false)(J$.T(3645433, 'Exports', 21, false), J$.T(3645833, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3645817, arguments.callee, this, arguments);
                            arguments = J$.N(3645825, 'arguments', arguments, true, false, false);
                            J$.F(3645561, J$.I(typeof it === 'undefined' ? it = J$.R(3645441, 'it', undefined, true, true) : it = J$.R(3645441, 'it', it, true, true)), false)(J$.T(3645449, 'should export validators', 21, false), J$.T(3645553, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3645537, arguments.callee, this, arguments);
                                            arguments = J$.N(3645545, 'arguments', arguments, true, false, false);
                                            J$.M(3645489, J$.R(3645457, 'assert', assert, false, true), 'equal', false)(J$.U(367250, 'typeof', J$.G(3645473, J$.R(3645465, 'validator', validator, false, true), 'isEmail')), J$.T(3645481, 'function', 21, false));
                                            J$.M(3645529, J$.R(3645497, 'assert', assert, false, true), 'equal', false)(J$.U(367258, 'typeof', J$.G(3645513, J$.R(3645505, 'validator', validator, false, true), 'isAlpha')), J$.T(3645521, 'function', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(3645873, J$e);
                                        } finally {
                                            if (J$.Fr(3645881))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(3645689, J$.I(typeof it === 'undefined' ? it = J$.R(3645569, 'it', undefined, true, true) : it = J$.R(3645569, 'it', it, true, true)), false)(J$.T(3645577, 'should export sanitizers', 21, false), J$.T(3645681, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3645665, arguments.callee, this, arguments);
                                            arguments = J$.N(3645673, 'arguments', arguments, true, false, false);
                                            J$.M(3645617, J$.R(3645585, 'assert', assert, false, true), 'equal', false)(J$.U(367266, 'typeof', J$.G(3645601, J$.R(3645593, 'validator', validator, false, true), 'toBoolean')), J$.T(3645609, 'function', 21, false));
                                            J$.M(3645657, J$.R(3645625, 'assert', assert, false, true), 'equal', false)(J$.U(367274, 'typeof', J$.G(3645641, J$.R(3645633, 'validator', validator, false, true), 'toFloat')), J$.T(3645649, 'function', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(3645889, J$e);
                                        } finally {
                                            if (J$.Fr(3645897))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(3645809, J$.I(typeof it === 'undefined' ? it = J$.R(3645697, 'it', undefined, true, true) : it = J$.R(3645697, 'it', it, true, true)), false)(J$.T(3645705, 'should export the version number', 21, false), J$.T(3645801, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(3645785, arguments.callee, this, arguments);
                                            arguments = J$.N(3645793, 'arguments', arguments, true, false, false);
                                            J$.M(3645777, J$.R(3645713, 'assert', assert, false, true), 'equal', false)(J$.G(3645729, J$.R(3645721, 'validator', validator, false, true), 'version'), J$.G(3645761, J$.F(3645753, J$.I(typeof require === 'undefined' ? require = J$.R(3645737, 'require', undefined, true, true) : require = J$.R(3645737, 'require', require, true, true)), false)(J$.T(3645745, '../package.json', 21, false)), 'version'), J$.T(3645769, 'Version number mismatch in "package.json" vs. "validator.js"', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(3645905, J$e);
                                        } finally {
                                            if (J$.Fr(3645913))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3645921, J$e);
                        } finally {
                            if (J$.Fr(3645929))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3645937, J$e);
        } finally {
            if (J$.Sr(3645945))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

