J$.noInstrEval = false;
jalangiLabel4:
    while (true) {
        try {
            J$.Se(7356561, '/home/james/nodejs/HiPar/outputs/target_cache/TestProperty-Validator/node_modules/validator/test/exports.js');
            J$.N(7356569, 'assert', assert, false, false, false);
            J$.N(7356577, 'validator', validator, false, false, false);
            var assert = J$.W(7356121, 'assert', J$.F(7356089, J$.I(typeof require === 'undefined' ? require = J$.R(7356073, 'require', undefined, true, true) : require = J$.R(7356073, 'require', require, true, true)), false)(J$.T(7356081, 'assert', 21, false)), assert, false, true), validator = J$.W(7356129, 'validator', J$.F(7356113, J$.I(typeof require === 'undefined' ? require = J$.R(7356097, 'require', undefined, true, true) : require = J$.R(7356097, 'require', require, true, true)), false)(J$.T(7356105, '../validator', 21, false)), validator, false, true);
            J$.F(7356553, J$.I(typeof describe === 'undefined' ? describe = J$.R(7356137, 'describe', undefined, true, true) : describe = J$.R(7356137, 'describe', describe, true, true)), false)(J$.T(7356145, 'Exports', 21, false), J$.T(7356545, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(7356529, arguments.callee, this, arguments);
                            arguments = J$.N(7356537, 'arguments', arguments, true, false, false);
                            J$.F(7356273, J$.I(typeof it === 'undefined' ? it = J$.R(7356153, 'it', undefined, true, true) : it = J$.R(7356153, 'it', it, true, true)), false)(J$.T(7356161, 'should export validators', 21, false), J$.T(7356265, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(7356249, arguments.callee, this, arguments);
                                            arguments = J$.N(7356257, 'arguments', arguments, true, false, false);
                                            J$.M(7356201, J$.R(7356169, 'assert', assert, false, true), 'equal', false)(J$.U(710010, 'typeof', J$.G(7356185, J$.R(7356177, 'validator', validator, false, true), 'isEmail')), J$.T(7356193, 'function', 21, false));
                                            J$.M(7356241, J$.R(7356209, 'assert', assert, false, true), 'equal', false)(J$.U(710018, 'typeof', J$.G(7356225, J$.R(7356217, 'validator', validator, false, true), 'isAlpha')), J$.T(7356233, 'function', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(7356585, J$e);
                                        } finally {
                                            if (J$.Fr(7356593))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(7356401, J$.I(typeof it === 'undefined' ? it = J$.R(7356281, 'it', undefined, true, true) : it = J$.R(7356281, 'it', it, true, true)), false)(J$.T(7356289, 'should export sanitizers', 21, false), J$.T(7356393, function () {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(7356377, arguments.callee, this, arguments);
                                            arguments = J$.N(7356385, 'arguments', arguments, true, false, false);
                                            J$.M(7356329, J$.R(7356297, 'assert', assert, false, true), 'equal', false)(J$.U(710026, 'typeof', J$.G(7356313, J$.R(7356305, 'validator', validator, false, true), 'toBoolean')), J$.T(7356321, 'function', 21, false));
                                            J$.M(7356369, J$.R(7356337, 'assert', assert, false, true), 'equal', false)(J$.U(710034, 'typeof', J$.G(7356353, J$.R(7356345, 'validator', validator, false, true), 'toFloat')), J$.T(7356361, 'function', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(7356601, J$e);
                                        } finally {
                                            if (J$.Fr(7356609))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.F(7356521, J$.I(typeof it === 'undefined' ? it = J$.R(7356409, 'it', undefined, true, true) : it = J$.R(7356409, 'it', it, true, true)), false)(J$.T(7356417, 'should export the version number', 21, false), J$.T(7356513, function () {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(7356497, arguments.callee, this, arguments);
                                            arguments = J$.N(7356505, 'arguments', arguments, true, false, false);
                                            J$.M(7356489, J$.R(7356425, 'assert', assert, false, true), 'equal', false)(J$.G(7356441, J$.R(7356433, 'validator', validator, false, true), 'version'), J$.G(7356473, J$.F(7356465, J$.I(typeof require === 'undefined' ? require = J$.R(7356449, 'require', undefined, true, true) : require = J$.R(7356449, 'require', require, true, true)), false)(J$.T(7356457, '../package.json', 21, false)), 'version'), J$.T(7356481, 'Version number mismatch in "package.json" vs. "validator.js"', 21, false));
                                        } catch (J$e) {
                                            J$.Ex(7356617, J$e);
                                        } finally {
                                            if (J$.Fr(7356625))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(7356633, J$e);
                        } finally {
                            if (J$.Fr(7356641))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(7356649, J$e);
        } finally {
            if (J$.Sr(7356657))
                continue jalangiLabel4;
            else
                break jalangiLabel4;
        }
    }
// JALANGI DO NOT INSTRUMENT

