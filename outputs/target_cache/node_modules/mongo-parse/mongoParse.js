J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(15201, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(12969, arguments.callee, this, arguments);
                            arguments = J$.N(12977, 'arguments', arguments, true, false, false);
                            projection = J$.N(12985, 'projection', projection, true, false, false);
                            J$.N(12993, 'k', k, false, false, false);
                            for (var k in J$.H(12953, J$.R(12721, 'projection', projection, false, false))) {
                                J$.N(12961, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(800, J$.U(1178, '!', J$.G(12745, J$.R(12729, 'projection', projection, false, false), J$.R(12737, 'k', k, false, false))))) {
                                            if (J$.C(752, J$.B(1186, '!==', J$.R(12753, 'k', k, false, false), J$.T(12761, '_id', 21, false)))) {
                                                return J$.Rt(12777, J$.T(12769, false, 23, false));
                                            }
                                        } else if (J$.C(792, J$.B(1194, '===', J$.R(12785, 'k', k, false, false), J$.T(12793, '$meta', 21, false)))) {
                                            return J$.Rt(12809, J$.T(12801, true, 23, false));
                                        } else if (J$.C(784, J$.G(12833, J$.R(12817, 'projection', projection, false, false), J$.R(12825, 'k', k, false, false)))) {
                                            if (J$.C(776, J$.C(768, J$.B(1202, 'instanceof', J$.G(12857, J$.R(12841, 'projection', projection, false, false), J$.R(12849, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(12865, 'Object', undefined, true, true) : Object = J$.R(12865, 'Object', Object, true, true)))) ? J$.C(760, J$.B(1210, 'in', J$.T(12873, '$elemMatch', 21, false), J$.G(12897, J$.R(12881, 'projection', projection, false, false), J$.R(12889, 'k', k, false, false)))) ? J$._() : J$.B(1218, 'in', J$.T(12905, '$slice', 21, false), J$.G(12929, J$.R(12913, 'projection', projection, false, false), J$.R(12921, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(12945, J$.T(12937, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15449, J$e);
                        } finally {
                            if (J$.Fr(15457))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(13929, arguments.callee, this, arguments);
                            arguments = J$.N(13937, 'arguments', arguments, true, false, false);
                            query = J$.N(13945, 'query', query, true, false, false);
                            J$.N(13953, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(13961, 'parts', parts, false, false, false);
                            J$.N(13969, 'key', key, false, false, false);
                            J$.N(13977, 'operator', operator, false, false, false);
                            J$.N(13985, 'operands', operands, false, false, false);
                            J$.N(13993, 'innerParts', innerParts, false, false, false);
                            J$.N(14001, 'field', field, false, false, false);
                            J$.N(14009, 'innerOperator', innerOperator, false, false, false);
                            J$.N(14017, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(824, J$.C(808, J$.B(1226, 'instanceof', J$.R(13001, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(13009, 'Function', undefined, true, true) : Function = J$.R(13009, 'Function', Function, true, true)))) ? J$._() : J$.B(1242, '===', J$.U(1234, 'typeof', J$.R(13017, 'query', query, false, false)), J$.T(13025, 'string', 21, false)))) {
                                if (J$.C(816, J$.B(1250, 'instanceof', J$.R(13033, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(13041, 'Function', undefined, true, true) : Function = J$.R(13041, 'Function', Function, true, true))))) {
                                    query = J$.W(13073, 'query', J$.B(1266, '+', J$.B(1258, '+', J$.T(13049, '(', 21, false), J$.R(13057, 'query', query, false, false)), J$.T(13065, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(13113, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1282, '+', J$.B(1274, '+', J$.T(13081, '(function() {var obj=this; return ', 21, false), J$.R(13089, 'query', query, false, false)), J$.T(13097, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 13105, J$.evalInvoked(J$.B(1290, '+', J$.B(1274, '+', J$.T(13081, '(function() {var obj=this; return ', 21, false), J$.R(13089, 'query', query, false, false)), J$.T(13097, '})', 21, false)), 13105)).code), normalizedFunction, false, false);
                                return J$.Rt(13169, J$.T(13161, [J$.F(13153, J$.R(13121, 'Part', Part, false, true), true)(J$.T(13129, undefined, 24, false), J$.T(13137, '$where', 21, false), J$.R(13145, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(13185, 'parts', J$.T(13177, [], 10, false), parts, false, false);
                            for (var key in J$.H(13897, J$.R(13193, 'query', query, false, false))) {
                                J$.N(13905, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(856, J$.B(1298, 'in', J$.R(13201, 'key', key, false, false), J$.R(13209, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(13225, 'operator', J$.R(13217, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(13257, 'operands', J$.G(13249, J$.R(13233, 'query', query, false, false), J$.R(13241, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(13273, 'innerParts', J$.T(13265, [], 10, false), innerParts, false, false);
                                            J$.M(13409, J$.R(13281, 'operands', operands, false, false), 'forEach', false)(J$.T(13401, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(13377, arguments.callee, this, arguments);
                                                            arguments = J$.N(13385, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(13393, 'operand', operand, true, false, false);
                                                            J$.M(13369, J$.R(13289, 'innerParts', innerParts, false, false), 'push', false)(J$.F(13361, J$.R(13297, 'Part', Part, false, true), true)(J$.T(13305, undefined, 24, false), J$.T(13313, '$and', 21, false), J$.T(13329, [J$.R(13321, 'operand', operand, false, false)], 10, false), J$.F(13353, J$.R(13337, 'parseQuery', parseQuery, false, true), false)(J$.R(13345, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(15465, J$e);
                                                        } finally {
                                                            if (J$.Fr(15473))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(13489, J$.R(13417, 'parts', parts, false, false), 'push', false)(J$.F(13481, J$.R(13425, 'Part', Part, false, true), true)(J$.T(13433, undefined, 24, false), J$.R(13441, 'operator', operator, false, false), J$.G(13465, J$.R(13449, 'query', query, false, false), J$.R(13457, 'key', key, false, false)), J$.R(13473, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(848, J$.B(1306, 'in', J$.R(13497, 'key', key, false, false), J$.R(13505, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(13577, J$.R(13513, 'parts', parts, false, false), 'push', false)(J$.F(13569, J$.R(13521, 'Part', Part, false, true), true)(J$.T(13529, undefined, 24, false), J$.R(13537, 'key', key, false, false), J$.G(13561, J$.R(13545, 'query', query, false, false), J$.R(13553, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(13593, 'field', J$.R(13585, 'key', key, false, false), field, false, false);
                                            if (J$.C(840, J$.C(832, J$.F(13633, J$.R(13601, 'isObject', isObject, false, true), false)(J$.G(13625, J$.R(13609, 'query', query, false, false), J$.R(13617, 'key', key, false, false)))) ? J$.F(13673, J$.R(13641, 'fieldOperand', fieldOperand, false, true), false)(J$.G(13665, J$.R(13649, 'query', query, false, false), J$.R(13657, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(13809, J$.G(13697, J$.R(13681, 'query', query, false, false), J$.R(13689, 'key', key, false, false)))) {
                                                    J$.N(13817, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(13745, 'innerOperand', J$.G(13737, J$.G(13721, J$.R(13705, 'query', query, false, false), J$.R(13713, 'key', key, false, false)), J$.R(13729, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(13801, J$.R(13753, 'parts', parts, false, false), 'push', false)(J$.F(13793, J$.R(13761, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(13769, 'field', field, false, false), J$.R(13777, 'innerOperator', innerOperator, false, false), J$.R(13785, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(13889, J$.R(13825, 'parts', parts, false, false), 'push', false)(J$.F(13881, J$.R(13833, 'Part', Part, false, true), true)(J$.R(13841, 'field', field, false, false), J$.T(13849, undefined, 24, false), J$.G(13873, J$.R(13857, 'query', query, false, false), J$.R(13865, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(13921, J$.R(13913, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15481, J$e);
                        } finally {
                            if (J$.Fr(15489))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(14257, arguments.callee, this, arguments);
                            arguments = J$.N(14265, 'arguments', arguments, true, false, false);
                            field = J$.N(14273, 'field', field, true, false, false);
                            operator = J$.N(14281, 'operator', operator, true, false, false);
                            operand = J$.N(14289, 'operand', operand, true, false, false);
                            J$.N(14297, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(14305, 'innerParts', innerParts, false, false, false);
                            J$.N(14313, 'implicitField', implicitField, false, false, false);
                            if (J$.C(872, J$.B(1314, '===', J$.R(14025, 'operator', operator, false, false), J$.T(14033, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(14065, 'elemMatchInfo', J$.F(14057, J$.R(14041, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(14049, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(14089, 'innerParts', J$.G(14081, J$.R(14073, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(14113, 'implicitField', J$.G(14105, J$.R(14097, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(864, J$.B(1322, '===', J$.R(14121, 'operator', operator, false, false), J$.T(14129, '$not', 21, false)))) {
                                var innerParts = J$.W(14169, 'innerParts', J$.F(14161, J$.R(14137, 'parseNot', parseNot, false, true), false)(J$.R(14145, 'field', field, false, false), J$.R(14153, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(14185, 'innerParts', J$.T(14177, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(14249, J$.F(14241, J$.R(14193, 'Part', Part, false, true), true)(J$.R(14201, 'field', field, false, false), J$.R(14209, 'operator', operator, false, false), J$.R(14217, 'operand', operand, false, false), J$.R(14225, 'innerParts', innerParts, false, false), J$.R(14233, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(15497, J$e);
                        } finally {
                            if (J$.Fr(15505))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(14553, arguments.callee, this, arguments);
                            arguments = J$.N(14561, 'arguments', arguments, true, false, false);
                            operand = J$.N(14569, 'operand', operand, true, false, false);
                            J$.N(14577, 'parts', parts, false, false, false);
                            J$.N(14585, 'operator', operator, false, false, false);
                            J$.N(14593, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(880, J$.F(14337, J$.R(14321, 'fieldOperand', fieldOperand, false, true), false)(J$.R(14329, 'operand', operand, false, false)))) {
                                var parts = J$.W(14353, 'parts', J$.T(14345, [], 10, false), parts, false, false);
                                for (var operator in J$.H(14457, J$.R(14361, 'operand', operand, false, false))) {
                                    J$.N(14465, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(14393, 'innerOperand', J$.G(14385, J$.R(14369, 'operand', operand, false, false), J$.R(14377, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(14449, J$.R(14401, 'parts', parts, false, false), 'push', false)(J$.F(14441, J$.R(14409, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(14417, undefined, 24, false), J$.R(14425, 'operator', operator, false, false), J$.R(14433, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(14497, J$.T(14489, {
                                    parts: J$.R(14473, 'parts', parts, false, false),
                                    implicitField: J$.T(14481, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(14545, J$.T(14537, {
                                    parts: J$.F(14521, J$.R(14505, 'parseQuery', parseQuery, false, true), false)(J$.R(14513, 'operand', operand, false, false)),
                                    implicitField: J$.T(14529, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(15513, J$e);
                        } finally {
                            if (J$.Fr(15521))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(14745, arguments.callee, this, arguments);
                            arguments = J$.N(14753, 'arguments', arguments, true, false, false);
                            field = J$.N(14761, 'field', field, true, false, false);
                            operand = J$.N(14769, 'operand', operand, true, false, false);
                            J$.N(14777, 'parts', parts, false, false, false);
                            J$.N(14785, 'operator', operator, false, false, false);
                            J$.N(14793, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(14609, 'parts', J$.T(14601, [], 10, false), parts, false, false);
                            for (var operator in J$.H(14713, J$.R(14617, 'operand', operand, false, false))) {
                                J$.N(14721, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(14649, 'subOperand', J$.G(14641, J$.R(14625, 'operand', operand, false, false), J$.R(14633, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(14705, J$.R(14657, 'parts', parts, false, false), 'push', false)(J$.F(14697, J$.R(14665, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(14673, 'field', field, false, false), J$.R(14681, 'operator', operator, false, false), J$.R(14689, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(14737, J$.R(14729, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15529, J$e);
                        } finally {
                            if (J$.Fr(15537))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(14881, arguments.callee, this, arguments);
                            arguments = J$.N(14889, 'arguments', arguments, true, false, false);
                            obj = J$.N(14897, 'obj', obj, true, false, false);
                            J$.N(14905, 'key', key, false, false, false);
                            for (var key in J$.H(14865, J$.R(14801, 'obj', obj, false, false))) {
                                J$.N(14873, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(14857, J$.C(888, J$.B(1330, '===', J$.G(14825, J$.R(14809, 'key', key, false, false), J$.T(14817, 0, 22, false)), J$.T(14833, '$', 21, false))) ? J$.U(1346, '!', J$.B(1338, 'in', J$.R(14841, 'key', key, false, false), J$.R(14849, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15545, J$e);
                        } finally {
                            if (J$.Fr(15553))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(14953, arguments.callee, this, arguments);
                            arguments = J$.N(14961, 'arguments', arguments, true, false, false);
                            value = J$.N(14969, 'value', value, true, false, false);
                            return J$.Rt(14945, J$.C(896, J$.B(1354, 'instanceof', J$.R(14913, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(14921, 'Object', undefined, true, true) : Object = J$.R(14921, 'Object', Object, true, true)))) ? J$.U(1370, '!', J$.B(1362, 'instanceof', J$.R(14929, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(14937, 'Array', undefined, true, true) : Array = J$.R(14937, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(15561, J$e);
                        } finally {
                            if (J$.Fr(15569))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(15209, 'mapValues', mapValues, false, false, false);
            J$.N(15217, 'matches', matches, false, false, false);
            J$.N(15225, 'Parse', Parse, false, false, false);
            J$.N(15233, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(15241, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(15257, 'isInclusive', J$.T(15249, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(15273, 'parseQuery', J$.T(15265, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(15289, 'parseFieldOperator', J$.T(15281, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(15305, 'parseElemMatch', J$.T(15297, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(15321, 'parseNot', J$.T(15313, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(15337, 'fieldOperand', J$.T(15329, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(15353, 'isObject', J$.T(15345, isObject, 12, false), true, false, false);
            J$.N(15361, 'Part', Part, false, false, false);
            var mapValues = J$.W(12097, 'mapValues', J$.F(12089, J$.I(typeof require === 'undefined' ? require = J$.R(12073, 'require', undefined, true, true) : require = J$.R(12073, 'require', require, true, true)), false)(J$.T(12081, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(12129, 'matches', J$.F(12121, J$.I(typeof require === 'undefined' ? require = J$.R(12105, 'require', undefined, true, true) : require = J$.R(12105, 'require', require, true, true)), false)(J$.T(12113, './matches', 21, false)), matches, false, true);
            J$.P(12169, J$.I(typeof exports === 'undefined' ? exports = J$.R(12137, 'exports', undefined, true, true) : exports = J$.R(12137, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(12161, J$.I(typeof require === 'undefined' ? require = J$.R(12145, 'require', undefined, true, true) : require = J$.R(12145, 'require', require, true, true)), false)(J$.T(12153, './DotNotationPointers', 21, false)));
            var Parse = J$.W(12249, 'Parse', J$.T(12241, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(12217, arguments.callee, this, arguments);
                            arguments = J$.N(12225, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(12233, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(12209, J$.R(12177, 'this', this, false, false), 'parts', J$.F(12201, J$.R(12185, 'parseQuery', parseQuery, false, true), false)(J$.R(12193, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15369, J$e);
                        } finally {
                            if (J$.Fr(15377))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(12273, J$.R(12257, 'Parse', Parse, false, true), 'prototype', J$.T(12265, {}, 11, false));
            J$.P(12377, J$.G(12289, J$.R(12281, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(12369, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(12345, arguments.callee, this, arguments);
                            arguments = J$.N(12353, 'arguments', arguments, true, false, false);
                            callback = J$.N(12361, 'callback', callback, true, false, false);
                            return J$.Rt(12337, J$.F(12329, J$.R(12297, 'mapValues', mapValues, false, true), false)(J$.G(12313, J$.R(12305, 'this', this, false, false), 'parts'), J$.R(12321, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(15385, J$e);
                        } finally {
                            if (J$.Fr(15393))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12481, J$.G(12393, J$.R(12385, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(12473, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(12449, arguments.callee, this, arguments);
                            arguments = J$.N(12457, 'arguments', arguments, true, false, false);
                            document = J$.N(12465, 'document', document, true, false, false);
                            return J$.Rt(12441, J$.F(12433, J$.R(12401, 'matches', matches, false, true), false)(J$.G(12417, J$.R(12409, 'this', this, false, false), 'parts'), J$.R(12425, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(15401, J$e);
                        } finally {
                            if (J$.Fr(15409))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12561, J$.I(typeof exports === 'undefined' ? exports = J$.R(12489, 'exports', undefined, true, true) : exports = J$.R(12489, 'exports', exports, true, true)), 'parse', J$.T(12553, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(12529, arguments.callee, this, arguments);
                            arguments = J$.N(12537, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(12545, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(12521, J$.F(12513, J$.R(12497, 'Parse', Parse, false, true), true)(J$.R(12505, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15417, J$e);
                        } finally {
                            if (J$.Fr(15425))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12641, J$.I(typeof exports === 'undefined' ? exports = J$.R(12569, 'exports', undefined, true, true) : exports = J$.R(12569, 'exports', exports, true, true)), 'inclusive', J$.T(12633, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(12609, arguments.callee, this, arguments);
                            arguments = J$.N(12617, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(12625, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(12601, J$.F(12593, J$.R(12577, 'isInclusive', isInclusive, false, true), false)(J$.R(12585, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(15433, J$e);
                        } finally {
                            if (J$.Fr(15441))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(12681, 'complexFieldIndependantOperators', J$.T(12673, {
                $and: J$.T(12649, 1, 22, false),
                $or: J$.T(12657, 1, 22, false),
                $nor: J$.T(12665, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(12713, 'simpleFieldIndependantOperators', J$.T(12705, {
                $text: J$.T(12689, 1, 22, false),
                $comment: J$.T(12697, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(15193, 'Part', J$.T(15185, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(15129, arguments.callee, this, arguments);
                            arguments = J$.N(15137, 'arguments', arguments, true, false, false);
                            field = J$.N(15145, 'field', field, true, false, false);
                            operator = J$.N(15153, 'operator', operator, true, false, false);
                            operand = J$.N(15161, 'operand', operand, true, false, false);
                            parts = J$.N(15169, 'parts', parts, true, false, false);
                            implicitField = J$.N(15177, 'implicitField', implicitField, true, false, false);
                            if (J$.C(904, J$.B(1378, '===', J$.R(14977, 'parts', parts, false, false), J$.T(14985, undefined, 24, false))))
                                parts = J$.W(15001, 'parts', J$.T(14993, [], 10, false), parts, false, false);
                            J$.P(15025, J$.R(15009, 'this', this, false, false), 'field', J$.R(15017, 'field', field, false, false));
                            J$.P(15049, J$.R(15033, 'this', this, false, false), 'operator', J$.R(15041, 'operator', operator, false, false));
                            J$.P(15073, J$.R(15057, 'this', this, false, false), 'operand', J$.R(15065, 'operand', operand, false, false));
                            J$.P(15097, J$.R(15081, 'this', this, false, false), 'parts', J$.R(15089, 'parts', parts, false, false));
                            J$.P(15121, J$.R(15105, 'this', this, false, false), 'implicitField', J$.R(15113, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(15577, J$e);
                        } finally {
                            if (J$.Fr(15585))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(15593, J$e);
        } finally {
            if (J$.Sr(15601))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

