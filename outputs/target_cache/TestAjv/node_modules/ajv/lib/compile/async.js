J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(5202241, '/home/james/nodejs/HiPar/outputs/target_cache/TestAjv/node_modules/ajv/lib/compile/async.js');
            function compileAsync(schema, meta, callback) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(5202153, arguments.callee, this, arguments);
                            function loadMetaSchemaOf(sch) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(5201233, arguments.callee, this, arguments);
                                            arguments = J$.N(5201241, 'arguments', arguments, true, false, false);
                                            sch = J$.N(5201249, 'sch', sch, true, false, false);
                                            J$.N(5201257, '$schema', $schema, false, false, false);
                                            var $schema = J$.W(5201121, '$schema', J$.G(5201113, J$.R(5201105, 'sch', sch, false, false), '$schema'), $schema, false, false);
                                            return J$.Rt(5201225, J$.C(281128, J$.C(281120, J$.R(5201129, '$schema', $schema, false, false)) ? J$.U(531354, '!', J$.M(5201153, J$.R(5201137, 'self', self, false, false), 'getSchema', false)(J$.R(5201145, '$schema', $schema, false, false))) : J$._()) ? J$.M(5201201, J$.R(5201161, 'compileAsync', compileAsync, false, true), 'call', false)(J$.R(5201169, 'self', self, false, false), J$.T(5201185, { $ref: J$.R(5201177, '$schema', $schema, false, false) }, 11, false), J$.T(5201193, true, 23, false)) : J$.M(5201217, J$.I(typeof Promise === 'undefined' ? Promise = J$.R(5201209, 'Promise', undefined, true, true) : Promise = J$.R(5201209, 'Promise', Promise, true, true)), 'resolve', false)());
                                        } catch (J$e) {
                                            J$.Ex(5202305, J$e);
                                        } finally {
                                            if (J$.Fr(5202313))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function _compileAsync(schemaObj) {
                                jalangiLabel9:
                                    while (true) {
                                        try {
                                            J$.Fe(5202113, arguments.callee, this, arguments);
                                            function loadMissingSchema(e) {
                                                jalangiLabel8:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(5202041, arguments.callee, this, arguments);
                                                            function removePromise() {
                                                                jalangiLabel6:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(5201929, arguments.callee, this, arguments);
                                                                            arguments = J$.N(5201937, 'arguments', arguments, true, false, false);
                                                                            J$.B(531426, 'delete', J$.G(5201913, J$.R(5201905, 'self', self, false, false), '_loadingSchemas'), J$.R(5201921, 'ref', ref, false, false));
                                                                        } catch (J$e) {
                                                                            J$.Ex(5202369, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(5202377))
                                                                                continue jalangiLabel6;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }
                                                            function added(ref) {
                                                                jalangiLabel7:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(5202017, arguments.callee, this, arguments);
                                                                            arguments = J$.N(5202025, 'arguments', arguments, true, false, false);
                                                                            ref = J$.N(5202033, 'ref', ref, true, false, false);
                                                                            return J$.Rt(5202009, J$.C(281176, J$.G(5201969, J$.G(5201953, J$.R(5201945, 'self', self, false, false), '_refs'), J$.R(5201961, 'ref', ref, false, false))) ? J$._() : J$.G(5202001, J$.G(5201985, J$.R(5201977, 'self', self, false, false), '_schemas'), J$.R(5201993, 'ref', ref, false, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(5202385, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(5202393))
                                                                                continue jalangiLabel7;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }
                                                            arguments = J$.N(5202049, 'arguments', arguments, true, false, false);
                                                            e = J$.N(5202057, 'e', e, true, false, false);
                                                            J$.N(5202065, 'ref', ref, false, false, false);
                                                            J$.N(5202073, 'schemaPromise', schemaPromise, false, false, false);
                                                            removePromise = J$.N(5202089, 'removePromise', J$.T(5202081, removePromise, 12, false), true, false, false);
                                                            added = J$.N(5202105, 'added', J$.T(5202097, added, 12, false), true, false, false);
                                                            var ref = J$.W(5201377, 'ref', J$.G(5201369, J$.R(5201361, 'e', e, false, false), 'missingSchema'), ref, false, false);
                                                            if (J$.C(281144, J$.F(5201401, J$.R(5201385, 'added', added, false, false), false)(J$.R(5201393, 'ref', ref, false, false))))
                                                                throw J$.F(5201465, J$.I(typeof Error === 'undefined' ? Error = J$.R(5201409, 'Error', undefined, true, true) : Error = J$.R(5201409, 'Error', Error, true, true)), true)(J$.B(531394, '+', J$.B(531386, '+', J$.B(531378, '+', J$.B(531370, '+', J$.T(5201417, 'Schema ', 21, false), J$.R(5201425, 'ref', ref, false, false)), J$.T(5201433, ' is loaded but ', 21, false)), J$.G(5201449, J$.R(5201441, 'e', e, false, false), 'missingRef')), J$.T(5201457, ' cannot be resolved', 21, false)));
                                                            var schemaPromise = J$.W(5201505, 'schemaPromise', J$.G(5201497, J$.G(5201481, J$.R(5201473, 'self', self, false, false), '_loadingSchemas'), J$.R(5201489, 'ref', ref, false, false)), schemaPromise, false, false);
                                                            if (J$.C(281152, J$.U(531402, '!', J$.R(5201513, 'schemaPromise', schemaPromise, false, false)))) {
                                                                schemaPromise = J$.W(5201585, 'schemaPromise', J$.P(5201577, J$.G(5201529, J$.R(5201521, 'self', self, false, false), '_loadingSchemas'), J$.R(5201537, 'ref', ref, false, false), J$.M(5201569, J$.G(5201553, J$.R(5201545, 'self', self, false, false), '_opts'), 'loadSchema', false)(J$.R(5201561, 'ref', ref, false, false))), schemaPromise, false, false);
                                                                J$.M(5201617, J$.R(5201593, 'schemaPromise', schemaPromise, false, false), 'then', false)(J$.R(5201601, 'removePromise', removePromise, false, false), J$.R(5201609, 'removePromise', removePromise, false, false));
                                                            }
                                                            return J$.Rt(5201897, J$.M(5201889, J$.M(5201825, J$.R(5201625, 'schemaPromise', schemaPromise, false, false), 'then', false)(J$.T(5201817, function (sch) {
                                                                jalangiLabel4:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(5201793, arguments.callee, this, arguments);
                                                                            arguments = J$.N(5201801, 'arguments', arguments, true, false, false);
                                                                            sch = J$.N(5201809, 'sch', sch, true, false, false);
                                                                            if (J$.C(281168, J$.U(531410, '!', J$.F(5201649, J$.R(5201633, 'added', added, false, false), false)(J$.R(5201641, 'ref', ref, false, false))))) {
                                                                                return J$.Rt(5201785, J$.M(5201777, J$.F(5201673, J$.R(5201657, 'loadMetaSchemaOf', loadMetaSchemaOf, false, false), false)(J$.R(5201665, 'sch', sch, false, false)), 'then', false)(J$.T(5201769, function () {
                                                                                    jalangiLabel3:
                                                                                        while (true) {
                                                                                            try {
                                                                                                J$.Fe(5201753, arguments.callee, this, arguments);
                                                                                                arguments = J$.N(5201761, 'arguments', arguments, true, false, false);
                                                                                                if (J$.C(281160, J$.U(531418, '!', J$.F(5201697, J$.R(5201681, 'added', added, false, false), false)(J$.R(5201689, 'ref', ref, false, false)))))
                                                                                                    J$.M(5201745, J$.R(5201705, 'self', self, false, false), 'addSchema', false)(J$.R(5201713, 'sch', sch, false, false), J$.R(5201721, 'ref', ref, false, false), J$.T(5201729, undefined, 24, false), J$.R(5201737, 'meta', meta, false, false));
                                                                                            } catch (J$e) {
                                                                                                J$.Ex(5202321, J$e);
                                                                                            } finally {
                                                                                                if (J$.Fr(5202329))
                                                                                                    continue jalangiLabel3;
                                                                                                else
                                                                                                    return J$.Ra();
                                                                                            }
                                                                                        }
                                                                                }, 12, false)));
                                                                            }
                                                                        } catch (J$e) {
                                                                            J$.Ex(5202337, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(5202345))
                                                                                continue jalangiLabel4;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false)), 'then', false)(J$.T(5201881, function () {
                                                                jalangiLabel5:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(5201865, arguments.callee, this, arguments);
                                                                            arguments = J$.N(5201873, 'arguments', arguments, true, false, false);
                                                                            return J$.Rt(5201857, J$.F(5201849, J$.R(5201833, '_compileAsync', _compileAsync, false, false), false)(J$.R(5201841, 'schemaObj', schemaObj, false, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(5202353, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(5202361))
                                                                                continue jalangiLabel5;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false)));
                                                        } catch (J$e) {
                                                            J$.Ex(5202401, J$e);
                                                        } finally {
                                                            if (J$.Fr(5202409))
                                                                continue jalangiLabel8;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }
                                            arguments = J$.N(5202121, 'arguments', arguments, true, false, false);
                                            schemaObj = J$.N(5202129, 'schemaObj', schemaObj, true, false, false);
                                            loadMissingSchema = J$.N(5202145, 'loadMissingSchema', J$.T(5202137, loadMissingSchema, 12, false), true, false, false);
                                            try {
                                                return J$.Rt(5201289, J$.M(5201281, J$.R(5201265, 'self', self, false, false), '_compile', false)(J$.R(5201273, 'schemaObj', schemaObj, false, false)));
                                            } catch (e) {
                                                J$.N(5201353, 'e', e, false, false, true);
                                                if (J$.C(281136, J$.B(531362, 'instanceof', J$.R(5201297, 'e', e, false, false), J$.R(5201305, 'MissingRefError', MissingRefError, false, true))))
                                                    return J$.Rt(5201337, J$.F(5201329, J$.R(5201313, 'loadMissingSchema', loadMissingSchema, false, false), false)(J$.R(5201321, 'e', e, false, false)));
                                                throw J$.R(5201345, 'e', e, false, false);
                                            }
                                        } catch (J$e) {
                                            J$.Ex(5202417, J$e);
                                        } finally {
                                            if (J$.Fr(5202425))
                                                continue jalangiLabel9;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(5202161, 'arguments', arguments, true, false, false);
                            schema = J$.N(5202169, 'schema', schema, true, false, false);
                            meta = J$.N(5202177, 'meta', meta, true, false, false);
                            callback = J$.N(5202185, 'callback', callback, true, false, false);
                            J$.N(5202193, 'self', self, false, false, false);
                            J$.N(5202201, 'p', p, false, false, false);
                            loadMetaSchemaOf = J$.N(5202217, 'loadMetaSchemaOf', J$.T(5202209, loadMetaSchemaOf, 12, false), true, false, false);
                            _compileAsync = J$.N(5202233, '_compileAsync', J$.T(5202225, _compileAsync, 12, false), true, false, false);
                            var self = J$.W(5200713, 'self', J$.R(5200705, 'this', this, false, false), self, false, false);
                            if (J$.C(281088, J$.B(531330, '!=', J$.U(531322, 'typeof', J$.G(5200737, J$.G(5200729, J$.R(5200721, 'this', this, false, false), '_opts'), 'loadSchema')), J$.T(5200745, 'function', 21, false))))
                                throw J$.F(5200769, J$.I(typeof Error === 'undefined' ? Error = J$.R(5200753, 'Error', undefined, true, true) : Error = J$.R(5200753, 'Error', Error, true, true)), true)(J$.T(5200761, 'options.loadSchema should be a function', 21, false));
                            if (J$.C(281096, J$.B(531346, '==', J$.U(531338, 'typeof', J$.R(5200777, 'meta', meta, false, false)), J$.T(5200785, 'function', 21, false)))) {
                                callback = J$.W(5200801, 'callback', J$.R(5200793, 'meta', meta, false, false), callback, false, false);
                                meta = J$.W(5200817, 'meta', J$.T(5200809, undefined, 24, false), meta, false, false);
                            }
                            var p = J$.W(5200985, 'p', J$.M(5200977, J$.F(5200841, J$.R(5200825, 'loadMetaSchemaOf', loadMetaSchemaOf, false, false), false)(J$.R(5200833, 'schema', schema, false, false)), 'then', false)(J$.T(5200969, function () {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(5200945, arguments.callee, this, arguments);
                                            arguments = J$.N(5200953, 'arguments', arguments, true, false, false);
                                            J$.N(5200961, 'schemaObj', schemaObj, false, false, false);
                                            var schemaObj = J$.W(5200889, 'schemaObj', J$.M(5200881, J$.R(5200849, 'self', self, false, false), '_addSchema', false)(J$.R(5200857, 'schema', schema, false, false), J$.T(5200865, undefined, 24, false), J$.R(5200873, 'meta', meta, false, false)), schemaObj, false, false);
                                            return J$.Rt(5200937, J$.C(281104, J$.G(5200905, J$.R(5200897, 'schemaObj', schemaObj, false, false), 'validate')) ? J$._() : J$.F(5200929, J$.R(5200913, '_compileAsync', _compileAsync, false, false), false)(J$.R(5200921, 'schemaObj', schemaObj, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(5202273, J$e);
                                        } finally {
                                            if (J$.Fr(5202281))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), p, false, false);
                            if (J$.C(281112, J$.R(5200993, 'callback', callback, false, false))) {
                                J$.M(5201081, J$.R(5201001, 'p', p, false, false), 'then', false)(J$.T(5201065, function (v) {
                                    jalangiLabel1:
                                        while (true) {
                                            try {
                                                J$.Fe(5201041, arguments.callee, this, arguments);
                                                arguments = J$.N(5201049, 'arguments', arguments, true, false, false);
                                                v = J$.N(5201057, 'v', v, true, false, false);
                                                J$.F(5201033, J$.R(5201009, 'callback', callback, false, false), false)(J$.T(5201017, null, 25, false), J$.R(5201025, 'v', v, false, false));
                                            } catch (J$e) {
                                                J$.Ex(5202289, J$e);
                                            } finally {
                                                if (J$.Fr(5202297))
                                                    continue jalangiLabel1;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), J$.R(5201073, 'callback', callback, false, false));
                            }
                            return J$.Rt(5201097, J$.R(5201089, 'p', p, false, false));
                        } catch (J$e) {
                            J$.Ex(5202433, J$e);
                        } finally {
                            if (J$.Fr(5202441))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(5202249, 'MissingRefError', MissingRefError, false, false, false);
            compileAsync = J$.N(5202265, 'compileAsync', J$.T(5202257, compileAsync, 12, false), true, false, false);
            J$.T(5200585, 'use strict', 21, false);
            J$.F(5200609, J$.I(typeof require === 'undefined' ? require = J$.R(5200593, 'require', undefined, true, true) : require = J$.R(5200593, 'require', require, true, true)), false)(J$.T(5200601, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(5200633, J$.I(typeof require === 'undefined' ? require = J$.R(5200617, 'require', undefined, true, true) : require = J$.R(5200617, 'require', require, true, true)), false)(J$.T(5200625, 'core-js/modules/es.promise', 21, false));
            var MissingRefError = J$.W(5200673, 'MissingRefError', J$.G(5200665, J$.F(5200657, J$.I(typeof require === 'undefined' ? require = J$.R(5200641, 'require', undefined, true, true) : require = J$.R(5200641, 'require', require, true, true)), false)(J$.T(5200649, './error_classes', 21, false)), 'MissingRef'), MissingRefError, false, true);
            J$.P(5200697, J$.I(typeof module === 'undefined' ? module = J$.R(5200681, 'module', undefined, true, true) : module = J$.R(5200681, 'module', module, true, true)), 'exports', J$.R(5200689, 'compileAsync', compileAsync, false, true));
        } catch (J$e) {
            J$.Ex(5202449, J$e);
        } finally {
            if (J$.Sr(5202457))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

