J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(1449313, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestAjv/node_modules/ajv/lib/definition_schema.js');
            J$.N(1449321, 'metaSchema', metaSchema, false, false, false);
            J$.T(1448889, 'use strict', 21, false);
            var metaSchema = J$.W(1448921, 'metaSchema', J$.F(1448913, J$.I(typeof require === 'undefined' ? require = J$.R(1448897, 'require', undefined, true, true) : require = J$.R(1448897, 'require', require, true, true)), false)(J$.T(1448905, './refs/json-schema-draft-07.json', 21, false)), metaSchema, false, true);
            J$.P(1449305, J$.I(typeof module === 'undefined' ? module = J$.R(1448929, 'module', undefined, true, true) : module = J$.R(1448929, 'module', module, true, true)), 'exports', J$.T(1449297, {
                $id: J$.T(1448937, 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js', 21, false),
                definitions: J$.T(1448969, { simpleTypes: J$.G(1448961, J$.G(1448953, J$.R(1448945, 'metaSchema', metaSchema, false, true), 'definitions'), 'simpleTypes') }, 11, false),
                type: J$.T(1448977, 'object', 21, false),
                dependencies: J$.T(1449065, {
                    schema: J$.T(1448993, [J$.T(1448985, 'validate', 21, false)], 10, false),
                    $data: J$.T(1449009, [J$.T(1449001, 'validate', 21, false)], 10, false),
                    statements: J$.T(1449025, [J$.T(1449017, 'inline', 21, false)], 10, false),
                    valid: J$.T(1449057, { not: J$.T(1449049, { required: J$.T(1449041, [J$.T(1449033, 'macro', 21, false)], 10, false) }, 11, false) }, 11, false)
                }, 11, false),
                properties: J$.T(1449289, {
                    type: J$.G(1449089, J$.G(1449081, J$.R(1449073, 'metaSchema', metaSchema, false, true), 'properties'), 'type'),
                    schema: J$.T(1449105, { type: J$.T(1449097, 'boolean', 21, false) }, 11, false),
                    statements: J$.T(1449121, { type: J$.T(1449113, 'boolean', 21, false) }, 11, false),
                    dependencies: J$.T(1449153, {
                        type: J$.T(1449129, 'array', 21, false),
                        items: J$.T(1449145, { type: J$.T(1449137, 'string', 21, false) }, 11, false)
                    }, 11, false),
                    metaSchema: J$.T(1449169, { type: J$.T(1449161, 'object', 21, false) }, 11, false),
                    modifying: J$.T(1449185, { type: J$.T(1449177, 'boolean', 21, false) }, 11, false),
                    valid: J$.T(1449201, { type: J$.T(1449193, 'boolean', 21, false) }, 11, false),
                    $data: J$.T(1449217, { type: J$.T(1449209, 'boolean', 21, false) }, 11, false),
                    async: J$.T(1449233, { type: J$.T(1449225, 'boolean', 21, false) }, 11, false),
                    errors: J$.T(1449281, {
                        anyOf: J$.T(1449273, [
                            J$.T(1449249, { type: J$.T(1449241, 'boolean', 21, false) }, 11, false),
                            J$.T(1449265, { 'const': J$.T(1449257, 'full', 21, false) }, 11, false)
                        ], 10, false)
                    }, 11, false)
                }, 11, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(1449329, J$e);
        } finally {
            if (J$.Sr(1449337))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

