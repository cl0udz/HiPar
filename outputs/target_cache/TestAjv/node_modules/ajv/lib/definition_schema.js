J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(5232609, '/home/james/nodejs/HiPar/outputs/target_cache/TestAjv/node_modules/ajv/lib/definition_schema.js');
            J$.N(5232617, 'metaSchema', metaSchema, false, false, false);
            J$.T(5232185, 'use strict', 21, false);
            var metaSchema = J$.W(5232217, 'metaSchema', J$.F(5232209, J$.I(typeof require === 'undefined' ? require = J$.R(5232193, 'require', undefined, true, true) : require = J$.R(5232193, 'require', require, true, true)), false)(J$.T(5232201, './refs/json-schema-draft-07.json', 21, false)), metaSchema, false, true);
            J$.P(5232601, J$.I(typeof module === 'undefined' ? module = J$.R(5232225, 'module', undefined, true, true) : module = J$.R(5232225, 'module', module, true, true)), 'exports', J$.T(5232593, {
                $id: J$.T(5232233, 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js', 21, false),
                definitions: J$.T(5232265, { simpleTypes: J$.G(5232257, J$.G(5232249, J$.R(5232241, 'metaSchema', metaSchema, false, true), 'definitions'), 'simpleTypes') }, 11, false),
                type: J$.T(5232273, 'object', 21, false),
                dependencies: J$.T(5232361, {
                    schema: J$.T(5232289, [J$.T(5232281, 'validate', 21, false)], 10, false),
                    $data: J$.T(5232305, [J$.T(5232297, 'validate', 21, false)], 10, false),
                    statements: J$.T(5232321, [J$.T(5232313, 'inline', 21, false)], 10, false),
                    valid: J$.T(5232353, { not: J$.T(5232345, { required: J$.T(5232337, [J$.T(5232329, 'macro', 21, false)], 10, false) }, 11, false) }, 11, false)
                }, 11, false),
                properties: J$.T(5232585, {
                    type: J$.G(5232385, J$.G(5232377, J$.R(5232369, 'metaSchema', metaSchema, false, true), 'properties'), 'type'),
                    schema: J$.T(5232401, { type: J$.T(5232393, 'boolean', 21, false) }, 11, false),
                    statements: J$.T(5232417, { type: J$.T(5232409, 'boolean', 21, false) }, 11, false),
                    dependencies: J$.T(5232449, {
                        type: J$.T(5232425, 'array', 21, false),
                        items: J$.T(5232441, { type: J$.T(5232433, 'string', 21, false) }, 11, false)
                    }, 11, false),
                    metaSchema: J$.T(5232465, { type: J$.T(5232457, 'object', 21, false) }, 11, false),
                    modifying: J$.T(5232481, { type: J$.T(5232473, 'boolean', 21, false) }, 11, false),
                    valid: J$.T(5232497, { type: J$.T(5232489, 'boolean', 21, false) }, 11, false),
                    $data: J$.T(5232513, { type: J$.T(5232505, 'boolean', 21, false) }, 11, false),
                    async: J$.T(5232529, { type: J$.T(5232521, 'boolean', 21, false) }, 11, false),
                    errors: J$.T(5232577, {
                        anyOf: J$.T(5232569, [
                            J$.T(5232545, { type: J$.T(5232537, 'boolean', 21, false) }, 11, false),
                            J$.T(5232561, { 'const': J$.T(5232553, 'full', 21, false) }, 11, false)
                        ], 10, false)
                    }, 11, false)
                }, 11, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(5232625, J$e);
        } finally {
            if (J$.Sr(5232633))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

