J$.noInstrEval = false;
jalangiLabel1:
    while (true) {
        try {
            J$.Se(61177, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/encodeurl/index.js');
            function encodeUrl(url) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(61153, arguments.callee, this, arguments);
                            arguments = J$.N(61161, 'arguments', arguments, true, false, false);
                            url = J$.N(61169, 'url', url, true, false, false);
                            return J$.Rt(61145, J$.M(61137, J$.M(61113, J$.F(61089, J$.I(typeof String === 'undefined' ? String = J$.R(61073, 'String', undefined, true, true) : String = J$.R(61073, 'String', String, true, true)), false)(J$.R(61081, 'url', url, false, false)), 'replace', false)(J$.R(61097, 'UNMATCHED_SURROGATE_PAIR_REGEXP', UNMATCHED_SURROGATE_PAIR_REGEXP, false, true), J$.R(61105, 'UNMATCHED_SURROGATE_PAIR_REPLACE', UNMATCHED_SURROGATE_PAIR_REPLACE, false, true)), 'replace', false)(J$.R(61121, 'ENCODE_CHARS_REGEXP', ENCODE_CHARS_REGEXP, false, true), J$.I(typeof encodeURI === 'undefined' ? encodeURI = J$.R(61129, 'encodeURI', undefined, true, true) : encodeURI = J$.R(61129, 'encodeURI', encodeURI, true, true))));
                        } catch (J$e) {
                            J$.Ex(61225, J$e);
                        } finally {
                            if (J$.Fr(61233))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(61185, 'ENCODE_CHARS_REGEXP', ENCODE_CHARS_REGEXP, false, false, false);
            J$.N(61193, 'UNMATCHED_SURROGATE_PAIR_REGEXP', UNMATCHED_SURROGATE_PAIR_REGEXP, false, false, false);
            J$.N(61201, 'UNMATCHED_SURROGATE_PAIR_REPLACE', UNMATCHED_SURROGATE_PAIR_REPLACE, false, false, false);
            encodeUrl = J$.N(61217, 'encodeUrl', J$.T(61209, encodeUrl, 12, false), true, false, false);
            J$.T(60945, 'use strict', 21, false);
            J$.F(60969, J$.I(typeof require === 'undefined' ? require = J$.R(60953, 'require', undefined, true, true) : require = J$.R(60953, 'require', require, true, true)), false)(J$.T(60961, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(60993, J$.I(typeof require === 'undefined' ? require = J$.R(60977, 'require', undefined, true, true) : require = J$.R(60977, 'require', require, true, true)), false)(J$.T(60985, 'core-js/modules/es.string.replace', 21, false));
            J$.P(61017, J$.I(typeof module === 'undefined' ? module = J$.R(61001, 'module', undefined, true, true) : module = J$.R(61001, 'module', module, true, true)), 'exports', J$.R(61009, 'encodeUrl', encodeUrl, false, true));
            var ENCODE_CHARS_REGEXP = J$.W(61033, 'ENCODE_CHARS_REGEXP', J$.T(61025, /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g, 14, false), ENCODE_CHARS_REGEXP, false, true);
            var UNMATCHED_SURROGATE_PAIR_REGEXP = J$.W(61049, 'UNMATCHED_SURROGATE_PAIR_REGEXP', J$.T(61041, /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g, 14, false), UNMATCHED_SURROGATE_PAIR_REGEXP, false, true);
            var UNMATCHED_SURROGATE_PAIR_REPLACE = J$.W(61065, 'UNMATCHED_SURROGATE_PAIR_REPLACE', J$.T(61057, '$1\uFFFD$2', 21, false), UNMATCHED_SURROGATE_PAIR_REPLACE, false, true);
        } catch (J$e) {
            J$.Ex(61241, J$e);
        } finally {
            if (J$.Sr(61249))
                continue jalangiLabel1;
            else
                break jalangiLabel1;
        }
    }
// JALANGI DO NOT INSTRUMENT

