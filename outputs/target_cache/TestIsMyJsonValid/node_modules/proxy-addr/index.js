J$.noInstrEval = false;
jalangiLabel12:
    while (true) {
        try {
            J$.Se(4248657, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/proxy-addr/index.js');
            function alladdrs(req, trust) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4245521, arguments.callee, this, arguments);
                            arguments = J$.N(4245529, 'arguments', arguments, true, false, false);
                            req = J$.N(4245537, 'req', req, true, false, false);
                            trust = J$.N(4245545, 'trust', trust, true, false, false);
                            J$.N(4245553, 'addrs', addrs, false, false, false);
                            J$.N(4245561, 'i', i, false, false, false);
                            var addrs = J$.W(4245281, 'addrs', J$.F(4245273, J$.R(4245257, 'forwarded', forwarded, false, true), false)(J$.R(4245265, 'req', req, false, false)), addrs, false, false);
                            if (J$.C(225232, J$.U(412978, '!', J$.R(4245289, 'trust', trust, false, false)))) {
                                return J$.Rt(4245305, J$.R(4245297, 'addrs', addrs, false, false));
                            }
                            if (J$.C(225240, J$.B(412994, '!==', J$.U(412986, 'typeof', J$.R(4245313, 'trust', trust, false, false)), J$.T(4245321, 'function', 21, false)))) {
                                trust = J$.W(4245353, 'trust', J$.F(4245345, J$.R(4245329, 'compile', compile, false, true), false)(J$.R(4245337, 'trust', trust, false, false)), trust, false, false);
                            }
                            for (var i = J$.W(4245369, 'i', J$.T(4245361, 0, 22, false), i, false, false); J$.C(225256, J$.B(413010, '<', J$.R(4245377, 'i', i, false, false), J$.B(413002, '-', J$.G(4245393, J$.R(4245385, 'addrs', addrs, false, false), 'length'), J$.T(4245401, 1, 22, false)))); J$.B(413034, '-', i = J$.W(4245417, 'i', J$.B(413026, '+', J$.U(413018, '+', J$.R(4245409, 'i', i, false, false)), 1), i, false, false), 1)) {
                                if (J$.C(225248, J$.F(4245465, J$.R(4245425, 'trust', trust, false, false), false)(J$.G(4245449, J$.R(4245433, 'addrs', addrs, false, false), J$.R(4245441, 'i', i, false, false)), J$.R(4245457, 'i', i, false, false))))
                                    continue;
                                J$.P(4245497, J$.R(4245473, 'addrs', addrs, false, false), 'length', J$.B(413042, '+', J$.R(4245481, 'i', i, false, false), J$.T(4245489, 1, 22, false)));
                            }
                            return J$.Rt(4245513, J$.R(4245505, 'addrs', addrs, false, false));
                        } catch (J$e) {
                            J$.Ex(4248873, J$e);
                        } finally {
                            if (J$.Fr(4248881))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compile(val) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4246017, arguments.callee, this, arguments);
                            arguments = J$.N(4246025, 'arguments', arguments, true, false, false);
                            val = J$.N(4246033, 'val', val, true, false, false);
                            J$.N(4246041, 'trust', trust, false, false, false);
                            J$.N(4246049, 'i', i, false, false, false);
                            if (J$.C(225264, J$.U(413050, '!', J$.R(4245569, 'val', val, false, false)))) {
                                throw J$.F(4245593, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4245577, 'TypeError', undefined, true, true) : TypeError = J$.R(4245577, 'TypeError', TypeError, true, true)), true)(J$.T(4245585, 'argument is required', 21, false));
                            }
                            var trust;
                            if (J$.C(225280, J$.B(413066, '===', J$.U(413058, 'typeof', J$.R(4245601, 'val', val, false, false)), J$.T(4245609, 'string', 21, false)))) {
                                trust = J$.W(4245633, 'trust', J$.T(4245625, [J$.R(4245617, 'val', val, false, false)], 10, false), trust, false, false);
                            } else if (J$.C(225272, J$.M(4245657, J$.I(typeof Array === 'undefined' ? Array = J$.R(4245641, 'Array', undefined, true, true) : Array = J$.R(4245641, 'Array', Array, true, true)), 'isArray', false)(J$.R(4245649, 'val', val, false, false)))) {
                                trust = J$.W(4245681, 'trust', J$.M(4245673, J$.R(4245665, 'val', val, false, false), 'slice', false)(), trust, false, false);
                            } else {
                                throw J$.F(4245705, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4245689, 'TypeError', undefined, true, true) : TypeError = J$.R(4245689, 'TypeError', TypeError, true, true)), true)(J$.T(4245697, 'unsupported trust argument', 21, false));
                            }
                            for (var i = J$.W(4245721, 'i', J$.T(4245713, 0, 22, false), i, false, false); J$.C(225296, J$.B(413074, '<', J$.R(4245729, 'i', i, false, false), J$.G(4245745, J$.R(4245737, 'trust', trust, false, false), 'length'))); J$.B(413098, '-', i = J$.W(4245761, 'i', J$.B(413090, '+', J$.U(413082, '+', J$.R(4245753, 'i', i, false, false)), 1), i, false, false), 1)) {
                                val = J$.W(4245793, 'val', J$.G(4245785, J$.R(4245769, 'trust', trust, false, false), J$.R(4245777, 'i', i, false, false)), val, false, false);
                                if (J$.C(225288, J$.U(413106, '!', J$.M(4245817, J$.R(4245801, 'IP_RANGES', IP_RANGES, false, true), 'hasOwnProperty', false)(J$.R(4245809, 'val', val, false, false))))) {
                                    continue;
                                }
                                val = J$.W(4245849, 'val', J$.G(4245841, J$.R(4245825, 'IP_RANGES', IP_RANGES, false, true), J$.R(4245833, 'val', val, false, false)), val, false, false);
                                J$.M(4245921, J$.G(4245865, J$.R(4245857, 'trust', trust, false, false), 'splice'), 'apply', false)(J$.R(4245873, 'trust', trust, false, false), J$.M(4245913, J$.T(4245897, [
                                    J$.R(4245881, 'i', i, false, false),
                                    J$.T(4245889, 1, 22, false)
                                ], 10, false), 'concat', false)(J$.R(4245905, 'val', val, false, false)));
                                i = J$.W(4245961, 'i', J$.B(413122, '+', J$.R(4245953, 'i', i, false, false), J$.B(413114, '-', J$.G(4245937, J$.R(4245929, 'val', val, false, false), 'length'), J$.T(4245945, 1, 22, false))), i, false, false);
                            }
                            return J$.Rt(4246009, J$.F(4246001, J$.R(4245969, 'compileTrust', compileTrust, false, true), false)(J$.F(4245993, J$.R(4245977, 'compileRangeSubnets', compileRangeSubnets, false, true), false)(J$.R(4245985, 'trust', trust, false, false))));
                        } catch (J$e) {
                            J$.Ex(4248889, J$e);
                        } finally {
                            if (J$.Fr(4248897))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileRangeSubnets(arr) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4246233, arguments.callee, this, arguments);
                            arguments = J$.N(4246241, 'arguments', arguments, true, false, false);
                            arr = J$.N(4246249, 'arr', arr, true, false, false);
                            J$.N(4246257, 'rangeSubnets', rangeSubnets, false, false, false);
                            J$.N(4246265, 'i', i, false, false, false);
                            var rangeSubnets = J$.W(4246089, 'rangeSubnets', J$.F(4246081, J$.I(typeof Array === 'undefined' ? Array = J$.R(4246057, 'Array', undefined, true, true) : Array = J$.R(4246057, 'Array', Array, true, true)), true)(J$.G(4246073, J$.R(4246065, 'arr', arr, false, false), 'length')), rangeSubnets, false, false);
                            for (var i = J$.W(4246105, 'i', J$.T(4246097, 0, 22, false), i, false, false); J$.C(225304, J$.B(413130, '<', J$.R(4246113, 'i', i, false, false), J$.G(4246129, J$.R(4246121, 'arr', arr, false, false), 'length'))); J$.B(413154, '-', i = J$.W(4246145, 'i', J$.B(413146, '+', J$.U(413138, '+', J$.R(4246137, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(4246209, J$.R(4246153, 'rangeSubnets', rangeSubnets, false, false), J$.R(4246161, 'i', i, false, false), J$.F(4246201, J$.R(4246169, 'parseipNotation', parseipNotation, false, true), false)(J$.G(4246193, J$.R(4246177, 'arr', arr, false, false), J$.R(4246185, 'i', i, false, false))));
                            }
                            return J$.Rt(4246225, J$.R(4246217, 'rangeSubnets', rangeSubnets, false, false));
                        } catch (J$e) {
                            J$.Ex(4248905, J$e);
                        } finally {
                            if (J$.Fr(4248913))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileTrust(rangeSubnets) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4246409, arguments.callee, this, arguments);
                            arguments = J$.N(4246417, 'arguments', arguments, true, false, false);
                            rangeSubnets = J$.N(4246425, 'rangeSubnets', rangeSubnets, true, false, false);
                            J$.N(4246433, 'len', len, false, false, false);
                            var len = J$.W(4246289, 'len', J$.G(4246281, J$.R(4246273, 'rangeSubnets', rangeSubnets, false, false), 'length'), len, false, false);
                            return J$.Rt(4246401, J$.C(225320, J$.B(413162, '===', J$.R(4246297, 'len', len, false, false), J$.T(4246305, 0, 22, false))) ? J$.R(4246313, 'trustNone', trustNone, false, true) : J$.C(225312, J$.B(413170, '===', J$.R(4246321, 'len', len, false, false), J$.T(4246329, 1, 22, false))) ? J$.F(4246369, J$.R(4246337, 'trustSingle', trustSingle, false, true), false)(J$.G(4246361, J$.R(4246345, 'rangeSubnets', rangeSubnets, false, false), J$.T(4246353, 0, 22, false))) : J$.F(4246393, J$.R(4246377, 'trustMulti', trustMulti, false, true), false)(J$.R(4246385, 'rangeSubnets', rangeSubnets, false, false)));
                        } catch (J$e) {
                            J$.Ex(4248921, J$e);
                        } finally {
                            if (J$.Fr(4248929))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseipNotation(note) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4247121, arguments.callee, this, arguments);
                            arguments = J$.N(4247129, 'arguments', arguments, true, false, false);
                            note = J$.N(4247137, 'note', note, true, false, false);
                            J$.N(4247145, 'pos', pos, false, false, false);
                            J$.N(4247153, 'str', str, false, false, false);
                            J$.N(4247161, 'ip', ip, false, false, false);
                            J$.N(4247169, 'max', max, false, false, false);
                            J$.N(4247177, 'range', range, false, false, false);
                            var pos = J$.W(4246465, 'pos', J$.M(4246457, J$.R(4246441, 'note', note, false, false), 'lastIndexOf', false)(J$.T(4246449, '/', 21, false)), pos, false, false);
                            var str = J$.W(4246529, 'str', J$.C(225328, J$.B(413186, '!==', J$.R(4246473, 'pos', pos, false, false), J$.U(413178, '-', J$.T(4246481, 1, 22, false)))) ? J$.M(4246513, J$.R(4246489, 'note', note, false, false), 'substring', false)(J$.T(4246497, 0, 22, false), J$.R(4246505, 'pos', pos, false, false)) : J$.R(4246521, 'note', note, false, false), str, false, false);
                            if (J$.C(225336, J$.U(413194, '!', J$.F(4246553, J$.R(4246537, 'isip', isip, false, true), false)(J$.R(4246545, 'str', str, false, false))))) {
                                throw J$.F(4246585, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4246561, 'TypeError', undefined, true, true) : TypeError = J$.R(4246561, 'TypeError', TypeError, true, true)), true)(J$.B(413202, '+', J$.T(4246569, 'invalid IP address: ', 21, false), J$.R(4246577, 'str', str, false, false)));
                            }
                            var ip = J$.W(4246617, 'ip', J$.F(4246609, J$.R(4246593, 'parseip', parseip, false, true), false)(J$.R(4246601, 'str', str, false, false)), ip, false, false);
                            if (J$.C(225360, J$.C(225352, J$.C(225344, J$.B(413218, '===', J$.R(4246625, 'pos', pos, false, false), J$.U(413210, '-', J$.T(4246633, 1, 22, false)))) ? J$.B(413226, '===', J$.M(4246649, J$.R(4246641, 'ip', ip, false, false), 'kind', false)(), J$.T(4246657, 'ipv6', 21, false)) : J$._()) ? J$.M(4246673, J$.R(4246665, 'ip', ip, false, false), 'isIPv4MappedAddress', false)() : J$._())) {
                                ip = J$.W(4246697, 'ip', J$.M(4246689, J$.R(4246681, 'ip', ip, false, false), 'toIPv4Address', false)(), ip, false, false);
                            }
                            var max = J$.W(4246745, 'max', J$.C(225368, J$.B(413234, '===', J$.M(4246713, J$.R(4246705, 'ip', ip, false, false), 'kind', false)(), J$.T(4246721, 'ipv6', 21, false))) ? J$.T(4246729, 128, 22, false) : J$.T(4246737, 32, 22, false), max, false, false);
                            var range = J$.W(4246825, 'range', J$.C(225376, J$.B(413250, '!==', J$.R(4246753, 'pos', pos, false, false), J$.U(413242, '-', J$.T(4246761, 1, 22, false)))) ? J$.M(4246809, J$.R(4246769, 'note', note, false, false), 'substring', false)(J$.B(413258, '+', J$.R(4246777, 'pos', pos, false, false), J$.T(4246785, 1, 22, false)), J$.G(4246801, J$.R(4246793, 'note', note, false, false), 'length')) : J$.T(4246817, null, 25, false), range, false, false);
                            if (J$.C(225408, J$.B(413266, '===', J$.R(4246833, 'range', range, false, false), J$.T(4246841, null, 25, false)))) {
                                range = J$.W(4246857, 'range', J$.R(4246849, 'max', max, false, false), range, false, false);
                            } else if (J$.C(225400, J$.M(4246881, J$.R(4246865, 'DIGIT_REGEXP', DIGIT_REGEXP, false, true), 'test', false)(J$.R(4246873, 'range', range, false, false)))) {
                                range = J$.W(4246921, 'range', J$.F(4246913, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(4246889, 'parseInt', undefined, true, true) : parseInt = J$.R(4246889, 'parseInt', parseInt, true, true)), false)(J$.R(4246897, 'range', range, false, false), J$.T(4246905, 10, 22, false)), range, false, false);
                            } else if (J$.C(225392, J$.C(225384, J$.B(413274, '===', J$.M(4246937, J$.R(4246929, 'ip', ip, false, false), 'kind', false)(), J$.T(4246945, 'ipv4', 21, false))) ? J$.F(4246969, J$.R(4246953, 'isip', isip, false, true), false)(J$.R(4246961, 'range', range, false, false)) : J$._())) {
                                range = J$.W(4247001, 'range', J$.F(4246993, J$.R(4246977, 'parseNetmask', parseNetmask, false, true), false)(J$.R(4246985, 'range', range, false, false)), range, false, false);
                            } else {
                                range = J$.W(4247017, 'range', J$.T(4247009, null, 25, false), range, false, false);
                            }
                            if (J$.C(225424, J$.C(225416, J$.B(413282, '<=', J$.R(4247025, 'range', range, false, false), J$.T(4247033, 0, 22, false))) ? J$._() : J$.B(413290, '>', J$.R(4247041, 'range', range, false, false), J$.R(4247049, 'max', max, false, false)))) {
                                throw J$.F(4247081, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4247057, 'TypeError', undefined, true, true) : TypeError = J$.R(4247057, 'TypeError', TypeError, true, true)), true)(J$.B(413298, '+', J$.T(4247065, 'invalid range on address: ', 21, false), J$.R(4247073, 'note', note, false, false)));
                            }
                            return J$.Rt(4247113, J$.T(4247105, [
                                J$.R(4247089, 'ip', ip, false, false),
                                J$.R(4247097, 'range', range, false, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(4248937, J$e);
                        } finally {
                            if (J$.Fr(4248945))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNetmask(netmask) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4247289, arguments.callee, this, arguments);
                            arguments = J$.N(4247297, 'arguments', arguments, true, false, false);
                            netmask = J$.N(4247305, 'netmask', netmask, true, false, false);
                            J$.N(4247313, 'ip', ip, false, false, false);
                            J$.N(4247321, 'kind', kind, false, false, false);
                            var ip = J$.W(4247209, 'ip', J$.F(4247201, J$.R(4247185, 'parseip', parseip, false, true), false)(J$.R(4247193, 'netmask', netmask, false, false)), ip, false, false);
                            var kind = J$.W(4247233, 'kind', J$.M(4247225, J$.R(4247217, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                            return J$.Rt(4247281, J$.C(225432, J$.B(413306, '===', J$.R(4247241, 'kind', kind, false, false), J$.T(4247249, 'ipv4', 21, false))) ? J$.M(4247265, J$.R(4247257, 'ip', ip, false, false), 'prefixLengthFromSubnetMask', false)() : J$.T(4247273, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(4248953, J$e);
                        } finally {
                            if (J$.Fr(4248961))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function proxyaddr(req, trust) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4247497, arguments.callee, this, arguments);
                            arguments = J$.N(4247505, 'arguments', arguments, true, false, false);
                            req = J$.N(4247513, 'req', req, true, false, false);
                            trust = J$.N(4247521, 'trust', trust, true, false, false);
                            J$.N(4247529, 'addrs', addrs, false, false, false);
                            J$.N(4247537, 'addr', addr, false, false, false);
                            if (J$.C(225440, J$.U(413314, '!', J$.R(4247329, 'req', req, false, false)))) {
                                throw J$.F(4247353, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4247337, 'TypeError', undefined, true, true) : TypeError = J$.R(4247337, 'TypeError', TypeError, true, true)), true)(J$.T(4247345, 'req argument is required', 21, false));
                            }
                            if (J$.C(225448, J$.U(413322, '!', J$.R(4247361, 'trust', trust, false, false)))) {
                                throw J$.F(4247385, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4247369, 'TypeError', undefined, true, true) : TypeError = J$.R(4247369, 'TypeError', TypeError, true, true)), true)(J$.T(4247377, 'trust argument is required', 21, false));
                            }
                            var addrs = J$.W(4247425, 'addrs', J$.F(4247417, J$.R(4247393, 'alladdrs', alladdrs, false, true), false)(J$.R(4247401, 'req', req, false, false), J$.R(4247409, 'trust', trust, false, false)), addrs, false, false);
                            var addr = J$.W(4247473, 'addr', J$.G(4247465, J$.R(4247433, 'addrs', addrs, false, false), J$.B(413330, '-', J$.G(4247449, J$.R(4247441, 'addrs', addrs, false, false), 'length'), J$.T(4247457, 1, 22, false))), addr, false, false);
                            return J$.Rt(4247489, J$.R(4247481, 'addr', addr, false, false));
                        } catch (J$e) {
                            J$.Ex(4248969, J$e);
                        } finally {
                            if (J$.Fr(4248977))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustNone() {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(4247561, arguments.callee, this, arguments);
                            arguments = J$.N(4247569, 'arguments', arguments, true, false, false);
                            return J$.Rt(4247553, J$.T(4247545, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(4248985, J$e);
                        } finally {
                            if (J$.Fr(4248993))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustMulti(subnets) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(4248169, arguments.callee, this, arguments);
                            arguments = J$.N(4248177, 'arguments', arguments, true, false, false);
                            subnets = J$.N(4248185, 'subnets', subnets, true, false, false);
                            return J$.Rt(4248161, J$.T(4248153, function trust(addr) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(4248057, arguments.callee, this, arguments);
                                            arguments = J$.N(4248065, 'arguments', arguments, true, false, false);
                                            addr = J$.N(4248073, 'addr', addr, true, false, false);
                                            J$.N(4248081, 'ip', ip, false, false, false);
                                            J$.N(4248089, 'ipconv', ipconv, false, false, false);
                                            J$.N(4248097, 'kind', kind, false, false, false);
                                            J$.N(4248105, 'i', i, false, false, false);
                                            J$.N(4248113, 'subnet', subnet, false, false, false);
                                            J$.N(4248121, 'subnetip', subnetip, false, false, false);
                                            J$.N(4248129, 'subnetkind', subnetkind, false, false, false);
                                            J$.N(4248137, 'subnetrange', subnetrange, false, false, false);
                                            J$.N(4248145, 'trusted', trusted, false, false, false);
                                            if (J$.C(225456, J$.U(413338, '!', J$.F(4247593, J$.R(4247577, 'isip', isip, false, true), false)(J$.R(4247585, 'addr', addr, false, false)))))
                                                return J$.Rt(4247609, J$.T(4247601, false, 23, false));
                                            var ip = J$.W(4247641, 'ip', J$.F(4247633, J$.R(4247617, 'parseip', parseip, false, true), false)(J$.R(4247625, 'addr', addr, false, false)), ip, false, false);
                                            var ipconv;
                                            var kind = J$.W(4247665, 'kind', J$.M(4247657, J$.R(4247649, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                                            for (var i = J$.W(4247681, 'i', J$.T(4247673, 0, 22, false), i, false, false); J$.C(225512, J$.B(413346, '<', J$.R(4247689, 'i', i, false, false), J$.G(4247705, J$.R(4247697, 'subnets', subnets, false, false), 'length'))); J$.B(413370, '-', i = J$.W(4247721, 'i', J$.B(413362, '+', J$.U(413354, '+', J$.R(4247713, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                var subnet = J$.W(4247753, 'subnet', J$.G(4247745, J$.R(4247729, 'subnets', subnets, false, false), J$.R(4247737, 'i', i, false, false)), subnet, false, false);
                                                var subnetip = J$.W(4247785, 'subnetip', J$.G(4247777, J$.R(4247761, 'subnet', subnet, false, false), J$.T(4247769, 0, 22, false)), subnetip, false, false);
                                                var subnetkind = J$.W(4247809, 'subnetkind', J$.M(4247801, J$.R(4247793, 'subnetip', subnetip, false, false), 'kind', false)(), subnetkind, false, false);
                                                var subnetrange = J$.W(4247841, 'subnetrange', J$.G(4247833, J$.R(4247817, 'subnet', subnet, false, false), J$.T(4247825, 1, 22, false)), subnetrange, false, false);
                                                var trusted = J$.W(4247857, 'trusted', J$.R(4247849, 'ip', ip, false, false), trusted, false, false);
                                                if (J$.C(225496, J$.B(413378, '!==', J$.R(4247865, 'kind', kind, false, false), J$.R(4247873, 'subnetkind', subnetkind, false, false)))) {
                                                    if (J$.C(225472, J$.C(225464, J$.B(413386, '===', J$.R(4247881, 'subnetkind', subnetkind, false, false), J$.T(4247889, 'ipv4', 21, false))) ? J$.U(413394, '!', J$.M(4247905, J$.R(4247897, 'ip', ip, false, false), 'isIPv4MappedAddress', false)()) : J$._())) {
                                                        continue;
                                                    }
                                                    if (J$.C(225488, J$.U(413402, '!', J$.R(4247913, 'ipconv', ipconv, false, false)))) {
                                                        ipconv = J$.W(4247969, 'ipconv', J$.C(225480, J$.B(413410, '===', J$.R(4247921, 'subnetkind', subnetkind, false, false), J$.T(4247929, 'ipv4', 21, false))) ? J$.M(4247945, J$.R(4247937, 'ip', ip, false, false), 'toIPv4Address', false)() : J$.M(4247961, J$.R(4247953, 'ip', ip, false, false), 'toIPv4MappedAddress', false)(), ipconv, false, false);
                                                    }
                                                    trusted = J$.W(4247985, 'trusted', J$.R(4247977, 'ipconv', ipconv, false, false), trusted, false, false);
                                                }
                                                if (J$.C(225504, J$.M(4248017, J$.R(4247993, 'trusted', trusted, false, false), 'match', false)(J$.R(4248001, 'subnetip', subnetip, false, false), J$.R(4248009, 'subnetrange', subnetrange, false, false)))) {
                                                    return J$.Rt(4248033, J$.T(4248025, true, 23, false));
                                                }
                                            }
                                            return J$.Rt(4248049, J$.T(4248041, false, 23, false));
                                        } catch (J$e) {
                                            J$.Ex(4249001, J$e);
                                        } finally {
                                            if (J$.Fr(4249009))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4249017, J$e);
                        } finally {
                            if (J$.Fr(4249025))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function trustSingle(subnet) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(4248601, arguments.callee, this, arguments);
                            arguments = J$.N(4248609, 'arguments', arguments, true, false, false);
                            subnet = J$.N(4248617, 'subnet', subnet, true, false, false);
                            J$.N(4248625, 'subnetip', subnetip, false, false, false);
                            J$.N(4248633, 'subnetkind', subnetkind, false, false, false);
                            J$.N(4248641, 'subnetisipv4', subnetisipv4, false, false, false);
                            J$.N(4248649, 'subnetrange', subnetrange, false, false, false);
                            var subnetip = J$.W(4248217, 'subnetip', J$.G(4248209, J$.R(4248193, 'subnet', subnet, false, false), J$.T(4248201, 0, 22, false)), subnetip, false, false);
                            var subnetkind = J$.W(4248241, 'subnetkind', J$.M(4248233, J$.R(4248225, 'subnetip', subnetip, false, false), 'kind', false)(), subnetkind, false, false);
                            var subnetisipv4 = J$.W(4248265, 'subnetisipv4', J$.B(413418, '===', J$.R(4248249, 'subnetkind', subnetkind, false, false), J$.T(4248257, 'ipv4', 21, false)), subnetisipv4, false, false);
                            var subnetrange = J$.W(4248297, 'subnetrange', J$.G(4248289, J$.R(4248273, 'subnet', subnet, false, false), J$.T(4248281, 1, 22, false)), subnetrange, false, false);
                            return J$.Rt(4248593, J$.T(4248585, function trust(addr) {
                                jalangiLabel10:
                                    while (true) {
                                        try {
                                            J$.Fe(4248545, arguments.callee, this, arguments);
                                            arguments = J$.N(4248553, 'arguments', arguments, true, false, false);
                                            addr = J$.N(4248561, 'addr', addr, true, false, false);
                                            J$.N(4248569, 'ip', ip, false, false, false);
                                            J$.N(4248577, 'kind', kind, false, false, false);
                                            if (J$.C(225520, J$.U(413426, '!', J$.F(4248321, J$.R(4248305, 'isip', isip, false, true), false)(J$.R(4248313, 'addr', addr, false, false)))))
                                                return J$.Rt(4248337, J$.T(4248329, false, 23, false));
                                            var ip = J$.W(4248369, 'ip', J$.F(4248361, J$.R(4248345, 'parseip', parseip, false, true), false)(J$.R(4248353, 'addr', addr, false, false)), ip, false, false);
                                            var kind = J$.W(4248393, 'kind', J$.M(4248385, J$.R(4248377, 'ip', ip, false, false), 'kind', false)(), kind, false, false);
                                            if (J$.C(225552, J$.B(413434, '!==', J$.R(4248401, 'kind', kind, false, false), J$.R(4248409, 'subnetkind', subnetkind, false, false)))) {
                                                if (J$.C(225536, J$.C(225528, J$.R(4248417, 'subnetisipv4', subnetisipv4, false, false)) ? J$.U(413442, '!', J$.M(4248433, J$.R(4248425, 'ip', ip, false, false), 'isIPv4MappedAddress', false)()) : J$._())) {
                                                    return J$.Rt(4248449, J$.T(4248441, false, 23, false));
                                                }
                                                ip = J$.W(4248497, 'ip', J$.C(225544, J$.R(4248457, 'subnetisipv4', subnetisipv4, false, false)) ? J$.M(4248473, J$.R(4248465, 'ip', ip, false, false), 'toIPv4Address', false)() : J$.M(4248489, J$.R(4248481, 'ip', ip, false, false), 'toIPv4MappedAddress', false)(), ip, false, false);
                                            }
                                            return J$.Rt(4248537, J$.M(4248529, J$.R(4248505, 'ip', ip, false, false), 'match', false)(J$.R(4248513, 'subnetip', subnetip, false, false), J$.R(4248521, 'subnetrange', subnetrange, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(4249033, J$e);
                                        } finally {
                                            if (J$.Fr(4249041))
                                                continue jalangiLabel10;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(4249049, J$e);
                        } finally {
                            if (J$.Fr(4249057))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4248665, 'forwarded', forwarded, false, false, false);
            J$.N(4248673, 'ipaddr', ipaddr, false, false, false);
            J$.N(4248681, 'DIGIT_REGEXP', DIGIT_REGEXP, false, false, false);
            J$.N(4248689, 'isip', isip, false, false, false);
            J$.N(4248697, 'parseip', parseip, false, false, false);
            J$.N(4248705, 'IP_RANGES', IP_RANGES, false, false, false);
            alladdrs = J$.N(4248721, 'alladdrs', J$.T(4248713, alladdrs, 12, false), true, false, false);
            compile = J$.N(4248737, 'compile', J$.T(4248729, compile, 12, false), true, false, false);
            compileRangeSubnets = J$.N(4248753, 'compileRangeSubnets', J$.T(4248745, compileRangeSubnets, 12, false), true, false, false);
            compileTrust = J$.N(4248769, 'compileTrust', J$.T(4248761, compileTrust, 12, false), true, false, false);
            parseipNotation = J$.N(4248785, 'parseipNotation', J$.T(4248777, parseipNotation, 12, false), true, false, false);
            parseNetmask = J$.N(4248801, 'parseNetmask', J$.T(4248793, parseNetmask, 12, false), true, false, false);
            proxyaddr = J$.N(4248817, 'proxyaddr', J$.T(4248809, proxyaddr, 12, false), true, false, false);
            trustNone = J$.N(4248833, 'trustNone', J$.T(4248825, trustNone, 12, false), true, false, false);
            trustMulti = J$.N(4248849, 'trustMulti', J$.T(4248841, trustMulti, 12, false), true, false, false);
            trustSingle = J$.N(4248865, 'trustSingle', J$.T(4248857, trustSingle, 12, false), true, false, false);
            J$.T(4244737, 'use strict', 21, false);
            J$.F(4244761, J$.I(typeof require === 'undefined' ? require = J$.R(4244745, 'require', undefined, true, true) : require = J$.R(4244745, 'require', require, true, true)), false)(J$.T(4244753, 'core-js/modules/es.array.concat', 21, false));
            J$.F(4244785, J$.I(typeof require === 'undefined' ? require = J$.R(4244769, 'require', undefined, true, true) : require = J$.R(4244769, 'require', require, true, true)), false)(J$.T(4244777, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(4244809, J$.I(typeof require === 'undefined' ? require = J$.R(4244793, 'require', undefined, true, true) : require = J$.R(4244793, 'require', require, true, true)), false)(J$.T(4244801, 'core-js/modules/es.array.last-index-of', 21, false));
            J$.F(4244833, J$.I(typeof require === 'undefined' ? require = J$.R(4244817, 'require', undefined, true, true) : require = J$.R(4244817, 'require', require, true, true)), false)(J$.T(4244825, 'core-js/modules/es.array.slice', 21, false));
            J$.F(4244857, J$.I(typeof require === 'undefined' ? require = J$.R(4244841, 'require', undefined, true, true) : require = J$.R(4244841, 'require', require, true, true)), false)(J$.T(4244849, 'core-js/modules/es.array.splice', 21, false));
            J$.F(4244881, J$.I(typeof require === 'undefined' ? require = J$.R(4244865, 'require', undefined, true, true) : require = J$.R(4244865, 'require', require, true, true)), false)(J$.T(4244873, 'core-js/modules/es.parse-int', 21, false));
            J$.F(4244905, J$.I(typeof require === 'undefined' ? require = J$.R(4244889, 'require', undefined, true, true) : require = J$.R(4244889, 'require', require, true, true)), false)(J$.T(4244897, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(4244929, J$.I(typeof require === 'undefined' ? require = J$.R(4244913, 'require', undefined, true, true) : require = J$.R(4244913, 'require', require, true, true)), false)(J$.T(4244921, 'core-js/modules/es.string.match', 21, false));
            J$.P(4244953, J$.I(typeof module === 'undefined' ? module = J$.R(4244937, 'module', undefined, true, true) : module = J$.R(4244937, 'module', module, true, true)), 'exports', J$.R(4244945, 'proxyaddr', proxyaddr, false, true));
            J$.P(4244985, J$.G(4244969, J$.I(typeof module === 'undefined' ? module = J$.R(4244961, 'module', undefined, true, true) : module = J$.R(4244961, 'module', module, true, true)), 'exports'), 'all', J$.R(4244977, 'alladdrs', alladdrs, false, true));
            J$.P(4245017, J$.G(4245001, J$.I(typeof module === 'undefined' ? module = J$.R(4244993, 'module', undefined, true, true) : module = J$.R(4244993, 'module', module, true, true)), 'exports'), 'compile', J$.R(4245009, 'compile', compile, false, true));
            var forwarded = J$.W(4245049, 'forwarded', J$.F(4245041, J$.I(typeof require === 'undefined' ? require = J$.R(4245025, 'require', undefined, true, true) : require = J$.R(4245025, 'require', require, true, true)), false)(J$.T(4245033, 'forwarded', 21, false)), forwarded, false, true);
            var ipaddr = J$.W(4245081, 'ipaddr', J$.F(4245073, J$.I(typeof require === 'undefined' ? require = J$.R(4245057, 'require', undefined, true, true) : require = J$.R(4245057, 'require', require, true, true)), false)(J$.T(4245065, 'ipaddr.js', 21, false)), ipaddr, false, true);
            var DIGIT_REGEXP = J$.W(4245097, 'DIGIT_REGEXP', J$.T(4245089, /^[0-9]+$/, 14, false), DIGIT_REGEXP, false, true);
            var isip = J$.W(4245121, 'isip', J$.G(4245113, J$.R(4245105, 'ipaddr', ipaddr, false, true), 'isValid'), isip, false, true);
            var parseip = J$.W(4245145, 'parseip', J$.G(4245137, J$.R(4245129, 'ipaddr', ipaddr, false, true), 'parse'), parseip, false, true);
            var IP_RANGES = J$.W(4245249, 'IP_RANGES', J$.T(4245241, {
                linklocal: J$.T(4245169, [
                    J$.T(4245153, '169.254.0.0/16', 21, false),
                    J$.T(4245161, 'fe80::/10', 21, false)
                ], 10, false),
                loopback: J$.T(4245193, [
                    J$.T(4245177, '127.0.0.1/8', 21, false),
                    J$.T(4245185, '::1/128', 21, false)
                ], 10, false),
                uniquelocal: J$.T(4245233, [
                    J$.T(4245201, '10.0.0.0/8', 21, false),
                    J$.T(4245209, '172.16.0.0/12', 21, false),
                    J$.T(4245217, '192.168.0.0/16', 21, false),
                    J$.T(4245225, 'fc00::/7', 21, false)
                ], 10, false)
            }, 11, false), IP_RANGES, false, true);
        } catch (J$e) {
            J$.Ex(4249065, J$e);
        } finally {
            if (J$.Sr(4249073))
                continue jalangiLabel12;
            else
                break jalangiLabel12;
        }
    }
// JALANGI DO NOT INSTRUMENT

