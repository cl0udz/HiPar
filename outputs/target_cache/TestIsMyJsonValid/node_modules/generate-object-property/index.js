J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(130537, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/generate-object-property/index.js');
            J$.N(130545, 'isProperty', isProperty, false, false, false);
            J$.N(130553, 'gen', gen, false, false, false);
            J$.T(130185, 'use strict', 21, false);
            var isProperty = J$.W(130217, 'isProperty', J$.F(130209, J$.I(typeof require === 'undefined' ? require = J$.R(130193, 'require', undefined, true, true) : require = J$.R(130193, 'require', require, true, true)), false)(J$.T(130201, 'is-property', 21, false)), isProperty, false, true);
            var gen = J$.W(130369, 'gen', J$.T(130361, function gen(obj, prop) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(130329, arguments.callee, this, arguments);
                            arguments = J$.N(130337, 'arguments', arguments, true, false, false);
                            obj = J$.N(130345, 'obj', obj, true, false, false);
                            prop = J$.N(130353, 'prop', prop, true, false, false);
                            return J$.Rt(130321, J$.C(8136, J$.F(130241, J$.R(130225, 'isProperty', isProperty, false, true), false)(J$.R(130233, 'prop', prop, false, false))) ? J$.B(10834, '+', J$.B(10826, '+', J$.R(130249, 'obj', obj, false, false), J$.T(130257, '.', 21, false)), J$.R(130265, 'prop', prop, false, false)) : J$.B(10858, '+', J$.B(10850, '+', J$.B(10842, '+', J$.R(130273, 'obj', obj, false, false), J$.T(130281, '[', 21, false)), J$.M(130305, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(130289, 'JSON', undefined, true, true) : JSON = J$.R(130289, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(130297, 'prop', prop, false, false))), J$.T(130313, ']', 21, false)));
                        } catch (J$e) {
                            J$.Ex(130561, J$e);
                        } finally {
                            if (J$.Fr(130569))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), gen, false, true);
            J$.P(130393, J$.R(130377, 'gen', gen, false, true), 'valid', J$.R(130385, 'isProperty', isProperty, false, true));
            J$.P(130505, J$.R(130401, 'gen', gen, false, true), 'property', J$.T(130497, function (prop) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(130473, arguments.callee, this, arguments);
                            arguments = J$.N(130481, 'arguments', arguments, true, false, false);
                            prop = J$.N(130489, 'prop', prop, true, false, false);
                            return J$.Rt(130465, J$.C(8144, J$.F(130425, J$.R(130409, 'isProperty', isProperty, false, true), false)(J$.R(130417, 'prop', prop, false, false))) ? J$.R(130433, 'prop', prop, false, false) : J$.M(130457, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(130441, 'JSON', undefined, true, true) : JSON = J$.R(130441, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(130449, 'prop', prop, false, false)));
                        } catch (J$e) {
                            J$.Ex(130577, J$e);
                        } finally {
                            if (J$.Fr(130585))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(130529, J$.I(typeof module === 'undefined' ? module = J$.R(130513, 'module', undefined, true, true) : module = J$.R(130513, 'module', module, true, true)), 'exports', J$.R(130521, 'gen', gen, false, true));
        } catch (J$e) {
            J$.Ex(130593, J$e);
        } finally {
            if (J$.Sr(130601))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

