J$.noInstrEval = false;
jalangiLabel9:
    while (true) {
        try {
            J$.Se(3968625, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/json.js');
            function json(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3967593, arguments.callee, this, arguments);
                            function parse(body) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3966889, arguments.callee, this, arguments);
                                            arguments = J$.N(3966897, 'arguments', arguments, true, false, false);
                                            body = J$.N(3966905, 'body', body, true, false, false);
                                            J$.N(3966913, 'first', first, false, false, false);
                                            if (J$.C(208960, J$.B(386642, '===', J$.G(3966593, J$.R(3966585, 'body', body, false, false), 'length'), J$.T(3966601, 0, 22, false)))) {
                                                return J$.Rt(3966617, J$.T(3966609, {}, 11, false));
                                            }
                                            if (J$.C(208984, J$.R(3966625, 'strict', strict, false, false))) {
                                                var first = J$.W(3966657, 'first', J$.F(3966649, J$.R(3966633, 'firstchar', firstchar, false, true), false)(J$.R(3966641, 'body', body, false, false)), first, false, false);
                                                if (J$.C(208976, J$.C(208968, J$.B(386650, '!==', J$.R(3966665, 'first', first, false, false), J$.T(3966673, '{', 21, false))) ? J$.B(386658, '!==', J$.R(3966681, 'first', first, false, false), J$.T(3966689, '[', 21, false)) : J$._())) {
                                                    J$.F(3966713, J$.R(3966697, 'debug', debug, false, true), false)(J$.T(3966705, 'strict violation', 21, false));
                                                    throw J$.F(3966745, J$.R(3966721, 'createStrictSyntaxError', createStrictSyntaxError, false, true), false)(J$.R(3966729, 'body', body, false, false), J$.R(3966737, 'first', first, false, false));
                                                }
                                            }
                                            try {
                                                J$.F(3966769, J$.R(3966753, 'debug', debug, false, true), false)(J$.T(3966761, 'parse json', 21, false));
                                                return J$.Rt(3966809, J$.M(3966801, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(3966777, 'JSON', undefined, true, true) : JSON = J$.R(3966777, 'JSON', JSON, true, true)), 'parse', false)(J$.R(3966785, 'body', body, false, false), J$.R(3966793, 'reviver', reviver, false, false)));
                                            } catch (e) {
                                                J$.N(3966881, 'e', e, false, false, true);
                                                throw J$.F(3966873, J$.R(3966817, 'normalizeJsonSyntaxError', normalizeJsonSyntaxError, false, true), false)(J$.R(3966825, 'e', e, false, false), J$.T(3966865, {
                                                    message: J$.G(3966841, J$.R(3966833, 'e', e, false, false), 'message'),
                                                    stack: J$.G(3966857, J$.R(3966849, 'e', e, false, false), 'stack')
                                                }, 11, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(3968785, J$e);
                                        } finally {
                                            if (J$.Fr(3968793))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(3967601, 'arguments', arguments, true, false, false);
                            options = J$.N(3967609, 'options', options, true, false, false);
                            J$.N(3967617, 'opts', opts, false, false, false);
                            J$.N(3967625, 'limit', limit, false, false, false);
                            J$.N(3967633, 'inflate', inflate, false, false, false);
                            J$.N(3967641, 'reviver', reviver, false, false, false);
                            J$.N(3967649, 'strict', strict, false, false, false);
                            J$.N(3967657, 'type', type, false, false, false);
                            J$.N(3967665, 'verify', verify, false, false, false);
                            J$.N(3967673, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(3967689, 'parse', J$.T(3967681, parse, 12, false), true, false, false);
                            var opts = J$.W(3966225, 'opts', J$.C(208896, J$.R(3966209, 'options', options, false, false)) ? J$._() : J$.T(3966217, {}, 11, false), opts, false, false);
                            var limit = J$.W(3966313, 'limit', J$.C(208912, J$.B(386578, '!==', J$.U(386570, 'typeof', J$.G(3966241, J$.R(3966233, 'opts', opts, false, false), 'limit')), J$.T(3966249, 'number', 21, false))) ? J$.M(3966289, J$.R(3966257, 'bytes', bytes, false, true), 'parse', false)(J$.C(208904, J$.G(3966273, J$.R(3966265, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(3966281, '100kb', 21, false)) : J$.G(3966305, J$.R(3966297, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var inflate = J$.W(3966345, 'inflate', J$.B(386586, '!==', J$.G(3966329, J$.R(3966321, 'opts', opts, false, false), 'inflate'), J$.T(3966337, false, 23, false)), inflate, false, false);
                            var reviver = J$.W(3966369, 'reviver', J$.G(3966361, J$.R(3966353, 'opts', opts, false, false), 'reviver'), reviver, false, false);
                            var strict = J$.W(3966401, 'strict', J$.B(386594, '!==', J$.G(3966385, J$.R(3966377, 'opts', opts, false, false), 'strict'), J$.T(3966393, false, 23, false)), strict, false, false);
                            var type = J$.W(3966433, 'type', J$.C(208920, J$.G(3966417, J$.R(3966409, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(3966425, 'application/json', 21, false), type, false, false);
                            var verify = J$.W(3966465, 'verify', J$.C(208928, J$.G(3966449, J$.R(3966441, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(3966457, false, 23, false), verify, false, false);
                            if (J$.C(208944, J$.C(208936, J$.B(386602, '!==', J$.R(3966473, 'verify', verify, false, false), J$.T(3966481, false, 23, false))) ? J$.B(386618, '!==', J$.U(386610, 'typeof', J$.R(3966489, 'verify', verify, false, false)), J$.T(3966497, 'function', 21, false)) : J$._())) {
                                throw J$.F(3966521, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(3966505, 'TypeError', undefined, true, true) : TypeError = J$.R(3966505, 'TypeError', TypeError, true, true)), true)(J$.T(3966513, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(3966577, 'shouldParse', J$.C(208952, J$.B(386634, '!==', J$.U(386626, 'typeof', J$.R(3966529, 'type', type, false, false)), J$.T(3966537, 'function', 21, false))) ? J$.F(3966561, J$.R(3966545, 'typeChecker', typeChecker, false, true), false)(J$.R(3966553, 'type', type, false, false)) : J$.R(3966569, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(3967585, J$.T(3967577, function jsonParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3967529, arguments.callee, this, arguments);
                                            arguments = J$.N(3967537, 'arguments', arguments, true, false, false);
                                            req = J$.N(3967545, 'req', req, true, false, false);
                                            res = J$.N(3967553, 'res', res, true, false, false);
                                            next = J$.N(3967561, 'next', next, true, false, false);
                                            J$.N(3967569, 'charset', charset, false, false, false);
                                            if (J$.C(208992, J$.G(3966929, J$.R(3966921, 'req', req, false, false), '_body'))) {
                                                J$.F(3966953, J$.R(3966937, 'debug', debug, false, true), false)(J$.T(3966945, 'body already parsed', 21, false));
                                                J$.F(3966969, J$.R(3966961, 'next', next, false, false), false)();
                                                return J$.Rt(3966977, undefined);
                                            }
                                            J$.P(3967017, J$.R(3966985, 'req', req, false, false), 'body', J$.C(209000, J$.G(3967001, J$.R(3966993, 'req', req, false, false), 'body')) ? J$._() : J$.T(3967009, {}, 11, false));
                                            if (J$.C(209008, J$.U(386666, '!', J$.M(3967041, J$.R(3967025, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(3967033, 'req', req, false, false))))) {
                                                J$.F(3967065, J$.R(3967049, 'debug', debug, false, true), false)(J$.T(3967057, 'skip empty body', 21, false));
                                                J$.F(3967081, J$.R(3967073, 'next', next, false, false), false)();
                                                return J$.Rt(3967089, undefined);
                                            }
                                            J$.F(3967145, J$.R(3967097, 'debug', debug, false, true), false)(J$.T(3967105, 'content-type %j', 21, false), J$.G(3967137, J$.G(3967121, J$.R(3967113, 'req', req, false, false), 'headers'), J$.T(3967129, 'content-type', 21, false)));
                                            if (J$.C(209016, J$.U(386674, '!', J$.F(3967169, J$.R(3967153, 'shouldParse', shouldParse, false, false), false)(J$.R(3967161, 'req', req, false, false))))) {
                                                J$.F(3967193, J$.R(3967177, 'debug', debug, false, true), false)(J$.T(3967185, 'skip parsing', 21, false));
                                                J$.F(3967209, J$.R(3967201, 'next', next, false, false), false)();
                                                return J$.Rt(3967217, undefined);
                                            }
                                            var charset = J$.W(3967257, 'charset', J$.C(209024, J$.F(3967241, J$.R(3967225, 'getCharset', getCharset, false, true), false)(J$.R(3967233, 'req', req, false, false))) ? J$._() : J$.T(3967249, 'utf-8', 21, false), charset, false, false);
                                            if (J$.C(209032, J$.B(386682, '!==', J$.M(3967289, J$.R(3967265, 'charset', charset, false, false), 'substr', false)(J$.T(3967273, 0, 22, false), J$.T(3967281, 4, 22, false)), J$.T(3967297, 'utf-', 21, false)))) {
                                                J$.F(3967321, J$.R(3967305, 'debug', debug, false, true), false)(J$.T(3967313, 'invalid charset', 21, false));
                                                J$.F(3967417, J$.R(3967329, 'next', next, false, false), false)(J$.F(3967409, J$.R(3967337, 'createError', createError, false, true), false)(J$.T(3967345, 415, 22, false), J$.B(386698, '+', J$.B(386690, '+', J$.T(3967353, 'unsupported charset "', 21, false), J$.M(3967369, J$.R(3967361, 'charset', charset, false, false), 'toUpperCase', false)()), J$.T(3967377, '"', 21, false)), J$.T(3967401, {
                                                    charset: J$.R(3967385, 'charset', charset, false, false),
                                                    type: J$.T(3967393, 'charset.unsupported', 21, false)
                                                }, 11, false)));
                                                return J$.Rt(3967425, undefined);
                                            }
                                            J$.F(3967521, J$.R(3967433, 'read', read, false, true), false)(J$.R(3967441, 'req', req, false, false), J$.R(3967449, 'res', res, false, false), J$.R(3967457, 'next', next, false, false), J$.R(3967465, 'parse', parse, false, false), J$.R(3967473, 'debug', debug, false, true), J$.T(3967513, {
                                                encoding: J$.R(3967481, 'charset', charset, false, false),
                                                inflate: J$.R(3967489, 'inflate', inflate, false, false),
                                                limit: J$.R(3967497, 'limit', limit, false, false),
                                                verify: J$.R(3967505, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(3968801, J$e);
                                        } finally {
                                            if (J$.Fr(3968809))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3968817, J$e);
                        } finally {
                            if (J$.Fr(3968825))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createStrictSyntaxError(str, _char) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3967929, arguments.callee, this, arguments);
                            arguments = J$.N(3967937, 'arguments', arguments, true, false, false);
                            str = J$.N(3967945, 'str', str, true, false, false);
                            _char = J$.N(3967953, '_char', _char, true, false, false);
                            J$.N(3967961, 'index', index, false, false, false);
                            J$.N(3967969, 'partial', partial, false, false, false);
                            var index = J$.W(3967721, 'index', J$.M(3967713, J$.R(3967697, 'str', str, false, false), 'indexOf', false)(J$.R(3967705, '_char', _char, false, false)), index, false, false);
                            var partial = J$.W(3967769, 'partial', J$.B(386706, '+', J$.M(3967753, J$.R(3967729, 'str', str, false, false), 'substring', false)(J$.T(3967737, 0, 22, false), J$.R(3967745, 'index', index, false, false)), J$.T(3967761, '#', 21, false)), partial, false, false);
                            try {
                                J$.M(3967793, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(3967777, 'JSON', undefined, true, true) : JSON = J$.R(3967777, 'JSON', JSON, true, true)), 'parse', false)(J$.R(3967785, 'partial', partial, false, false));
                                throw J$.F(3967817, J$.I(typeof SyntaxError === 'undefined' ? SyntaxError = J$.R(3967801, 'SyntaxError', undefined, true, true) : SyntaxError = J$.R(3967801, 'SyntaxError', SyntaxError, true, true)), true)(J$.T(3967809, 'strict violation', 21, false));
                            } catch (e) {
                                J$.N(3967921, 'e', e, false, false, true);
                                return J$.Rt(3967913, J$.F(3967905, J$.R(3967825, 'normalizeJsonSyntaxError', normalizeJsonSyntaxError, false, true), false)(J$.R(3967833, 'e', e, false, false), J$.T(3967897, {
                                    message: J$.M(3967873, J$.G(3967849, J$.R(3967841, 'e', e, false, false), 'message'), 'replace', false)(J$.T(3967857, '#', 21, false), J$.R(3967865, '_char', _char, false, false)),
                                    stack: J$.G(3967889, J$.R(3967881, 'e', e, false, false), 'stack')
                                }, 11, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(3968833, J$e);
                        } finally {
                            if (J$.Fr(3968841))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function firstchar(str) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3968025, arguments.callee, this, arguments);
                            arguments = J$.N(3968033, 'arguments', arguments, true, false, false);
                            str = J$.N(3968041, 'str', str, true, false, false);
                            return J$.Rt(3968017, J$.G(3968009, J$.M(3967993, J$.R(3967977, 'FIRST_CHAR_REGEXP', FIRST_CHAR_REGEXP, false, true), 'exec', false)(J$.R(3967985, 'str', str, false, false)), J$.T(3968001, 1, 22, false)));
                        } catch (J$e) {
                            J$.Ex(3968849, J$e);
                        } finally {
                            if (J$.Fr(3968857))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharset(req) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3968137, arguments.callee, this, arguments);
                            arguments = J$.N(3968145, 'arguments', arguments, true, false, false);
                            req = J$.N(3968153, 'req', req, true, false, false);
                            try {
                                return J$.Rt(3968105, J$.M(3968097, J$.C(209040, J$.G(3968081, J$.G(3968073, J$.M(3968065, J$.R(3968049, 'contentType', contentType, false, true), 'parse', false)(J$.R(3968057, 'req', req, false, false)), 'parameters'), 'charset')) ? J$._() : J$.T(3968089, '', 21, false), 'toLowerCase', false)());
                            } catch (e) {
                                J$.N(3968129, 'e', e, false, false, true);
                                return J$.Rt(3968121, J$.T(3968113, undefined, 24, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3968865, J$e);
                        } finally {
                            if (J$.Fr(3968873))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function normalizeJsonSyntaxError(error, obj) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3968449, arguments.callee, this, arguments);
                            arguments = J$.N(3968457, 'arguments', arguments, true, false, false);
                            error = J$.N(3968465, 'error', error, true, false, false);
                            obj = J$.N(3968473, 'obj', obj, true, false, false);
                            J$.N(3968481, 'keys', keys, false, false, false);
                            J$.N(3968489, 'i', i, false, false, false);
                            J$.N(3968497, 'key', key, false, false, false);
                            var keys = J$.W(3968185, 'keys', J$.M(3968177, J$.I(typeof Object === 'undefined' ? Object = J$.R(3968161, 'Object', undefined, true, true) : Object = J$.R(3968161, 'Object', Object, true, true)), 'getOwnPropertyNames', false)(J$.R(3968169, 'error', error, false, false)), keys, false, false);
                            for (var i = J$.W(3968201, 'i', J$.T(3968193, 0, 22, false), i, false, false); J$.C(209064, J$.B(386714, '<', J$.R(3968209, 'i', i, false, false), J$.G(3968225, J$.R(3968217, 'keys', keys, false, false), 'length'))); J$.B(386738, '-', i = J$.W(3968241, 'i', J$.B(386730, '+', J$.U(386722, '+', J$.R(3968233, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var key = J$.W(3968273, 'key', J$.G(3968265, J$.R(3968249, 'keys', keys, false, false), J$.R(3968257, 'i', i, false, false)), key, false, false);
                                if (J$.C(209056, J$.C(209048, J$.B(386746, '!==', J$.R(3968281, 'key', key, false, false), J$.T(3968289, 'stack', 21, false))) ? J$.B(386754, '!==', J$.R(3968297, 'key', key, false, false), J$.T(3968305, 'message', 21, false)) : J$._())) {
                                    J$.B(386762, 'delete', J$.R(3968313, 'error', error, false, false), J$.R(3968321, 'key', key, false, false));
                                }
                            }
                            J$.P(3968393, J$.R(3968329, 'error', error, false, false), 'stack', J$.M(3968385, J$.G(3968345, J$.R(3968337, 'obj', obj, false, false), 'stack'), 'replace', false)(J$.G(3968361, J$.R(3968353, 'error', error, false, false), 'message'), J$.G(3968377, J$.R(3968369, 'obj', obj, false, false), 'message')));
                            J$.P(3968425, J$.R(3968401, 'error', error, false, false), 'message', J$.G(3968417, J$.R(3968409, 'obj', obj, false, false), 'message'));
                            return J$.Rt(3968441, J$.R(3968433, 'error', error, false, false));
                        } catch (J$e) {
                            J$.Ex(3968881, J$e);
                        } finally {
                            if (J$.Fr(3968889))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3968601, arguments.callee, this, arguments);
                            arguments = J$.N(3968609, 'arguments', arguments, true, false, false);
                            type = J$.N(3968617, 'type', type, true, false, false);
                            return J$.Rt(3968593, J$.T(3968585, function checkType(req) {
                                jalangiLabel7:
                                    while (true) {
                                        try {
                                            J$.Fe(3968561, arguments.callee, this, arguments);
                                            arguments = J$.N(3968569, 'arguments', arguments, true, false, false);
                                            req = J$.N(3968577, 'req', req, true, false, false);
                                            return J$.Rt(3968553, J$.F(3968545, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(3968505, 'Boolean', undefined, true, true) : Boolean = J$.R(3968505, 'Boolean', Boolean, true, true)), false)(J$.F(3968537, J$.R(3968513, 'typeis', typeis, false, true), false)(J$.R(3968521, 'req', req, false, false), J$.R(3968529, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(3968897, J$e);
                                        } finally {
                                            if (J$.Fr(3968905))
                                                continue jalangiLabel7;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3968913, J$e);
                        } finally {
                            if (J$.Fr(3968921))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3968633, 'bytes', bytes, false, false, false);
            J$.N(3968641, 'contentType', contentType, false, false, false);
            J$.N(3968649, 'createError', createError, false, false, false);
            J$.N(3968657, 'debug', debug, false, false, false);
            J$.N(3968665, 'read', read, false, false, false);
            J$.N(3968673, 'typeis', typeis, false, false, false);
            J$.N(3968681, 'FIRST_CHAR_REGEXP', FIRST_CHAR_REGEXP, false, false, false);
            json = J$.N(3968697, 'json', J$.T(3968689, json, 12, false), true, false, false);
            createStrictSyntaxError = J$.N(3968713, 'createStrictSyntaxError', J$.T(3968705, createStrictSyntaxError, 12, false), true, false, false);
            firstchar = J$.N(3968729, 'firstchar', J$.T(3968721, firstchar, 12, false), true, false, false);
            getCharset = J$.N(3968745, 'getCharset', J$.T(3968737, getCharset, 12, false), true, false, false);
            normalizeJsonSyntaxError = J$.N(3968761, 'normalizeJsonSyntaxError', J$.T(3968753, normalizeJsonSyntaxError, 12, false), true, false, false);
            typeChecker = J$.N(3968777, 'typeChecker', J$.T(3968769, typeChecker, 12, false), true, false, false);
            J$.T(3965857, 'use strict', 21, false);
            J$.F(3965881, J$.I(typeof require === 'undefined' ? require = J$.R(3965865, 'require', undefined, true, true) : require = J$.R(3965865, 'require', require, true, true)), false)(J$.T(3965873, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(3965905, J$.I(typeof require === 'undefined' ? require = J$.R(3965889, 'require', undefined, true, true) : require = J$.R(3965889, 'require', require, true, true)), false)(J$.T(3965897, 'core-js/modules/es.object.get-own-property-names', 21, false));
            J$.F(3965929, J$.I(typeof require === 'undefined' ? require = J$.R(3965913, 'require', undefined, true, true) : require = J$.R(3965913, 'require', require, true, true)), false)(J$.T(3965921, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3965953, J$.I(typeof require === 'undefined' ? require = J$.R(3965937, 'require', undefined, true, true) : require = J$.R(3965937, 'require', require, true, true)), false)(J$.T(3965945, 'core-js/modules/es.string.replace', 21, false));
            var bytes = J$.W(3965985, 'bytes', J$.F(3965977, J$.I(typeof require === 'undefined' ? require = J$.R(3965961, 'require', undefined, true, true) : require = J$.R(3965961, 'require', require, true, true)), false)(J$.T(3965969, 'bytes', 21, false)), bytes, false, true);
            var contentType = J$.W(3966017, 'contentType', J$.F(3966009, J$.I(typeof require === 'undefined' ? require = J$.R(3965993, 'require', undefined, true, true) : require = J$.R(3965993, 'require', require, true, true)), false)(J$.T(3966001, 'content-type', 21, false)), contentType, false, true);
            var createError = J$.W(3966049, 'createError', J$.F(3966041, J$.I(typeof require === 'undefined' ? require = J$.R(3966025, 'require', undefined, true, true) : require = J$.R(3966025, 'require', require, true, true)), false)(J$.T(3966033, 'http-errors', 21, false)), createError, false, true);
            var debug = J$.W(3966097, 'debug', J$.F(3966089, J$.F(3966073, J$.I(typeof require === 'undefined' ? require = J$.R(3966057, 'require', undefined, true, true) : require = J$.R(3966057, 'require', require, true, true)), false)(J$.T(3966065, 'debug', 21, false)), false)(J$.T(3966081, 'body-parser:json', 21, false)), debug, false, true);
            var read = J$.W(3966129, 'read', J$.F(3966121, J$.I(typeof require === 'undefined' ? require = J$.R(3966105, 'require', undefined, true, true) : require = J$.R(3966105, 'require', require, true, true)), false)(J$.T(3966113, '../read', 21, false)), read, false, true);
            var typeis = J$.W(3966161, 'typeis', J$.F(3966153, J$.I(typeof require === 'undefined' ? require = J$.R(3966137, 'require', undefined, true, true) : require = J$.R(3966137, 'require', require, true, true)), false)(J$.T(3966145, 'type-is', 21, false)), typeis, false, true);
            J$.P(3966185, J$.I(typeof module === 'undefined' ? module = J$.R(3966169, 'module', undefined, true, true) : module = J$.R(3966169, 'module', module, true, true)), 'exports', J$.R(3966177, 'json', json, false, true));
            var FIRST_CHAR_REGEXP = J$.W(3966201, 'FIRST_CHAR_REGEXP', J$.T(3966193, /^[\x20\x09\x0a\x0d]*(.)/, 14, false), FIRST_CHAR_REGEXP, false, true);
        } catch (J$e) {
            J$.Ex(3968929, J$e);
        } finally {
            if (J$.Sr(3968937))
                continue jalangiLabel9;
            else
                break jalangiLabel9;
        }
    }
// JALANGI DO NOT INSTRUMENT

