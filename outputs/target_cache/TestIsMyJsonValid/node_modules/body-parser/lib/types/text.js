J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(56113, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/text.js');
            function text(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(55785, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(55257, arguments.callee, this, arguments);
                                            arguments = J$.N(55265, 'arguments', arguments, true, false, false);
                                            buf = J$.N(55273, 'buf', buf, true, false, false);
                                            return J$.Rt(55249, J$.R(55241, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(56209, J$e);
                                        } finally {
                                            if (J$.Fr(56217))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(55793, 'arguments', arguments, true, false, false);
                            options = J$.N(55801, 'options', options, true, false, false);
                            J$.N(55809, 'opts', opts, false, false, false);
                            J$.N(55817, 'defaultCharset', defaultCharset, false, false, false);
                            J$.N(55825, 'inflate', inflate, false, false, false);
                            J$.N(55833, 'limit', limit, false, false, false);
                            J$.N(55841, 'type', type, false, false, false);
                            J$.N(55849, 'verify', verify, false, false, false);
                            J$.N(55857, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(55873, 'parse', J$.T(55865, parse, 12, false), true, false, false);
                            var opts = J$.W(54905, 'opts', J$.C(3040, J$.R(54889, 'options', options, false, false)) ? J$._() : J$.T(54897, {}, 11, false), opts, false, false);
                            var defaultCharset = J$.W(54937, 'defaultCharset', J$.C(3048, J$.G(54921, J$.R(54913, 'opts', opts, false, false), 'defaultCharset')) ? J$._() : J$.T(54929, 'utf-8', 21, false), defaultCharset, false, false);
                            var inflate = J$.W(54969, 'inflate', J$.B(3922, '!==', J$.G(54953, J$.R(54945, 'opts', opts, false, false), 'inflate'), J$.T(54961, false, 23, false)), inflate, false, false);
                            var limit = J$.W(55057, 'limit', J$.C(3064, J$.B(3938, '!==', J$.U(3930, 'typeof', J$.G(54985, J$.R(54977, 'opts', opts, false, false), 'limit')), J$.T(54993, 'number', 21, false))) ? J$.M(55033, J$.R(55001, 'bytes', bytes, false, true), 'parse', false)(J$.C(3056, J$.G(55017, J$.R(55009, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(55025, '100kb', 21, false)) : J$.G(55049, J$.R(55041, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(55089, 'type', J$.C(3072, J$.G(55073, J$.R(55065, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(55081, 'text/plain', 21, false), type, false, false);
                            var verify = J$.W(55121, 'verify', J$.C(3080, J$.G(55105, J$.R(55097, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(55113, false, 23, false), verify, false, false);
                            if (J$.C(3096, J$.C(3088, J$.B(3946, '!==', J$.R(55129, 'verify', verify, false, false), J$.T(55137, false, 23, false))) ? J$.B(3962, '!==', J$.U(3954, 'typeof', J$.R(55145, 'verify', verify, false, false)), J$.T(55153, 'function', 21, false)) : J$._())) {
                                throw J$.F(55177, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(55161, 'TypeError', undefined, true, true) : TypeError = J$.R(55161, 'TypeError', TypeError, true, true)), true)(J$.T(55169, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(55233, 'shouldParse', J$.C(3104, J$.B(3978, '!==', J$.U(3970, 'typeof', J$.R(55185, 'type', type, false, false)), J$.T(55193, 'function', 21, false))) ? J$.F(55217, J$.R(55201, 'typeChecker', typeChecker, false, true), false)(J$.R(55209, 'type', type, false, false)) : J$.R(55225, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(55777, J$.T(55769, function textParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(55721, arguments.callee, this, arguments);
                                            arguments = J$.N(55729, 'arguments', arguments, true, false, false);
                                            req = J$.N(55737, 'req', req, true, false, false);
                                            res = J$.N(55745, 'res', res, true, false, false);
                                            next = J$.N(55753, 'next', next, true, false, false);
                                            J$.N(55761, 'charset', charset, false, false, false);
                                            if (J$.C(3112, J$.G(55289, J$.R(55281, 'req', req, false, false), '_body'))) {
                                                J$.F(55313, J$.R(55297, 'debug', debug, false, true), false)(J$.T(55305, 'body already parsed', 21, false));
                                                J$.F(55329, J$.R(55321, 'next', next, false, false), false)();
                                                return J$.Rt(55337, undefined);
                                            }
                                            J$.P(55377, J$.R(55345, 'req', req, false, false), 'body', J$.C(3120, J$.G(55361, J$.R(55353, 'req', req, false, false), 'body')) ? J$._() : J$.T(55369, {}, 11, false));
                                            if (J$.C(3128, J$.U(3986, '!', J$.M(55401, J$.R(55385, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(55393, 'req', req, false, false))))) {
                                                J$.F(55425, J$.R(55409, 'debug', debug, false, true), false)(J$.T(55417, 'skip empty body', 21, false));
                                                J$.F(55441, J$.R(55433, 'next', next, false, false), false)();
                                                return J$.Rt(55449, undefined);
                                            }
                                            J$.F(55505, J$.R(55457, 'debug', debug, false, true), false)(J$.T(55465, 'content-type %j', 21, false), J$.G(55497, J$.G(55481, J$.R(55473, 'req', req, false, false), 'headers'), J$.T(55489, 'content-type', 21, false)));
                                            if (J$.C(3136, J$.U(3994, '!', J$.F(55529, J$.R(55513, 'shouldParse', shouldParse, false, false), false)(J$.R(55521, 'req', req, false, false))))) {
                                                J$.F(55553, J$.R(55537, 'debug', debug, false, true), false)(J$.T(55545, 'skip parsing', 21, false));
                                                J$.F(55569, J$.R(55561, 'next', next, false, false), false)();
                                                return J$.Rt(55577, undefined);
                                            }
                                            var charset = J$.W(55617, 'charset', J$.C(3144, J$.F(55601, J$.R(55585, 'getCharset', getCharset, false, true), false)(J$.R(55593, 'req', req, false, false))) ? J$._() : J$.R(55609, 'defaultCharset', defaultCharset, false, false), charset, false, false);
                                            J$.F(55713, J$.R(55625, 'read', read, false, true), false)(J$.R(55633, 'req', req, false, false), J$.R(55641, 'res', res, false, false), J$.R(55649, 'next', next, false, false), J$.R(55657, 'parse', parse, false, false), J$.R(55665, 'debug', debug, false, true), J$.T(55705, {
                                                encoding: J$.R(55673, 'charset', charset, false, false),
                                                inflate: J$.R(55681, 'inflate', inflate, false, false),
                                                limit: J$.R(55689, 'limit', limit, false, false),
                                                verify: J$.R(55697, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(56225, J$e);
                                        } finally {
                                            if (J$.Fr(56233))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(56241, J$e);
                        } finally {
                            if (J$.Fr(56249))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharset(req) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(55969, arguments.callee, this, arguments);
                            arguments = J$.N(55977, 'arguments', arguments, true, false, false);
                            req = J$.N(55985, 'req', req, true, false, false);
                            try {
                                return J$.Rt(55937, J$.M(55929, J$.C(3152, J$.G(55913, J$.G(55905, J$.M(55897, J$.R(55881, 'contentType', contentType, false, true), 'parse', false)(J$.R(55889, 'req', req, false, false)), 'parameters'), 'charset')) ? J$._() : J$.T(55921, '', 21, false), 'toLowerCase', false)());
                            } catch (e) {
                                J$.N(55961, 'e', e, false, false, true);
                                return J$.Rt(55953, J$.T(55945, undefined, 24, false));
                            }
                        } catch (J$e) {
                            J$.Ex(56257, J$e);
                        } finally {
                            if (J$.Fr(56265))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(56089, arguments.callee, this, arguments);
                            arguments = J$.N(56097, 'arguments', arguments, true, false, false);
                            type = J$.N(56105, 'type', type, true, false, false);
                            return J$.Rt(56081, J$.T(56073, function checkType(req) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(56049, arguments.callee, this, arguments);
                                            arguments = J$.N(56057, 'arguments', arguments, true, false, false);
                                            req = J$.N(56065, 'req', req, true, false, false);
                                            return J$.Rt(56041, J$.F(56033, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(55993, 'Boolean', undefined, true, true) : Boolean = J$.R(55993, 'Boolean', Boolean, true, true)), false)(J$.F(56025, J$.R(56001, 'typeis', typeis, false, true), false)(J$.R(56009, 'req', req, false, false), J$.R(56017, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(56273, J$e);
                                        } finally {
                                            if (J$.Fr(56281))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(56289, J$e);
                        } finally {
                            if (J$.Fr(56297))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(56121, 'bytes', bytes, false, false, false);
            J$.N(56129, 'contentType', contentType, false, false, false);
            J$.N(56137, 'debug', debug, false, false, false);
            J$.N(56145, 'read', read, false, false, false);
            J$.N(56153, 'typeis', typeis, false, false, false);
            text = J$.N(56169, 'text', J$.T(56161, text, 12, false), true, false, false);
            getCharset = J$.N(56185, 'getCharset', J$.T(56177, getCharset, 12, false), true, false, false);
            typeChecker = J$.N(56201, 'typeChecker', J$.T(56193, typeChecker, 12, false), true, false, false);
            J$.T(54681, 'use strict', 21, false);
            var bytes = J$.W(54713, 'bytes', J$.F(54705, J$.I(typeof require === 'undefined' ? require = J$.R(54689, 'require', undefined, true, true) : require = J$.R(54689, 'require', require, true, true)), false)(J$.T(54697, 'bytes', 21, false)), bytes, false, true);
            var contentType = J$.W(54745, 'contentType', J$.F(54737, J$.I(typeof require === 'undefined' ? require = J$.R(54721, 'require', undefined, true, true) : require = J$.R(54721, 'require', require, true, true)), false)(J$.T(54729, 'content-type', 21, false)), contentType, false, true);
            var debug = J$.W(54793, 'debug', J$.F(54785, J$.F(54769, J$.I(typeof require === 'undefined' ? require = J$.R(54753, 'require', undefined, true, true) : require = J$.R(54753, 'require', require, true, true)), false)(J$.T(54761, 'debug', 21, false)), false)(J$.T(54777, 'body-parser:text', 21, false)), debug, false, true);
            var read = J$.W(54825, 'read', J$.F(54817, J$.I(typeof require === 'undefined' ? require = J$.R(54801, 'require', undefined, true, true) : require = J$.R(54801, 'require', require, true, true)), false)(J$.T(54809, '../read', 21, false)), read, false, true);
            var typeis = J$.W(54857, 'typeis', J$.F(54849, J$.I(typeof require === 'undefined' ? require = J$.R(54833, 'require', undefined, true, true) : require = J$.R(54833, 'require', require, true, true)), false)(J$.T(54841, 'type-is', 21, false)), typeis, false, true);
            J$.P(54881, J$.I(typeof module === 'undefined' ? module = J$.R(54865, 'module', undefined, true, true) : module = J$.R(54865, 'module', module, true, true)), 'exports', J$.R(54873, 'text', text, false, true));
        } catch (J$e) {
            J$.Ex(56305, J$e);
        } finally {
            if (J$.Sr(56313))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

