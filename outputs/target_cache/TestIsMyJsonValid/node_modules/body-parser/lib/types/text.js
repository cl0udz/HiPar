J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(3971745, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/text.js');
            function text(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3971417, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3970889, arguments.callee, this, arguments);
                                            arguments = J$.N(3970897, 'arguments', arguments, true, false, false);
                                            buf = J$.N(3970905, 'buf', buf, true, false, false);
                                            return J$.Rt(3970881, J$.R(3970873, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3971841, J$e);
                                        } finally {
                                            if (J$.Fr(3971849))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(3971425, 'arguments', arguments, true, false, false);
                            options = J$.N(3971433, 'options', options, true, false, false);
                            J$.N(3971441, 'opts', opts, false, false, false);
                            J$.N(3971449, 'defaultCharset', defaultCharset, false, false, false);
                            J$.N(3971457, 'inflate', inflate, false, false, false);
                            J$.N(3971465, 'limit', limit, false, false, false);
                            J$.N(3971473, 'type', type, false, false, false);
                            J$.N(3971481, 'verify', verify, false, false, false);
                            J$.N(3971489, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(3971505, 'parse', J$.T(3971497, parse, 12, false), true, false, false);
                            var opts = J$.W(3970537, 'opts', J$.C(209168, J$.R(3970521, 'options', options, false, false)) ? J$._() : J$.T(3970529, {}, 11, false), opts, false, false);
                            var defaultCharset = J$.W(3970569, 'defaultCharset', J$.C(209176, J$.G(3970553, J$.R(3970545, 'opts', opts, false, false), 'defaultCharset')) ? J$._() : J$.T(3970561, 'utf-8', 21, false), defaultCharset, false, false);
                            var inflate = J$.W(3970601, 'inflate', J$.B(386850, '!==', J$.G(3970585, J$.R(3970577, 'opts', opts, false, false), 'inflate'), J$.T(3970593, false, 23, false)), inflate, false, false);
                            var limit = J$.W(3970689, 'limit', J$.C(209192, J$.B(386866, '!==', J$.U(386858, 'typeof', J$.G(3970617, J$.R(3970609, 'opts', opts, false, false), 'limit')), J$.T(3970625, 'number', 21, false))) ? J$.M(3970665, J$.R(3970633, 'bytes', bytes, false, true), 'parse', false)(J$.C(209184, J$.G(3970649, J$.R(3970641, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(3970657, '100kb', 21, false)) : J$.G(3970681, J$.R(3970673, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(3970721, 'type', J$.C(209200, J$.G(3970705, J$.R(3970697, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(3970713, 'text/plain', 21, false), type, false, false);
                            var verify = J$.W(3970753, 'verify', J$.C(209208, J$.G(3970737, J$.R(3970729, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(3970745, false, 23, false), verify, false, false);
                            if (J$.C(209224, J$.C(209216, J$.B(386874, '!==', J$.R(3970761, 'verify', verify, false, false), J$.T(3970769, false, 23, false))) ? J$.B(386890, '!==', J$.U(386882, 'typeof', J$.R(3970777, 'verify', verify, false, false)), J$.T(3970785, 'function', 21, false)) : J$._())) {
                                throw J$.F(3970809, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(3970793, 'TypeError', undefined, true, true) : TypeError = J$.R(3970793, 'TypeError', TypeError, true, true)), true)(J$.T(3970801, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(3970865, 'shouldParse', J$.C(209232, J$.B(386906, '!==', J$.U(386898, 'typeof', J$.R(3970817, 'type', type, false, false)), J$.T(3970825, 'function', 21, false))) ? J$.F(3970849, J$.R(3970833, 'typeChecker', typeChecker, false, true), false)(J$.R(3970841, 'type', type, false, false)) : J$.R(3970857, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(3971409, J$.T(3971401, function textParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3971353, arguments.callee, this, arguments);
                                            arguments = J$.N(3971361, 'arguments', arguments, true, false, false);
                                            req = J$.N(3971369, 'req', req, true, false, false);
                                            res = J$.N(3971377, 'res', res, true, false, false);
                                            next = J$.N(3971385, 'next', next, true, false, false);
                                            J$.N(3971393, 'charset', charset, false, false, false);
                                            if (J$.C(209240, J$.G(3970921, J$.R(3970913, 'req', req, false, false), '_body'))) {
                                                J$.F(3970945, J$.R(3970929, 'debug', debug, false, true), false)(J$.T(3970937, 'body already parsed', 21, false));
                                                J$.F(3970961, J$.R(3970953, 'next', next, false, false), false)();
                                                return J$.Rt(3970969, undefined);
                                            }
                                            J$.P(3971009, J$.R(3970977, 'req', req, false, false), 'body', J$.C(209248, J$.G(3970993, J$.R(3970985, 'req', req, false, false), 'body')) ? J$._() : J$.T(3971001, {}, 11, false));
                                            if (J$.C(209256, J$.U(386914, '!', J$.M(3971033, J$.R(3971017, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(3971025, 'req', req, false, false))))) {
                                                J$.F(3971057, J$.R(3971041, 'debug', debug, false, true), false)(J$.T(3971049, 'skip empty body', 21, false));
                                                J$.F(3971073, J$.R(3971065, 'next', next, false, false), false)();
                                                return J$.Rt(3971081, undefined);
                                            }
                                            J$.F(3971137, J$.R(3971089, 'debug', debug, false, true), false)(J$.T(3971097, 'content-type %j', 21, false), J$.G(3971129, J$.G(3971113, J$.R(3971105, 'req', req, false, false), 'headers'), J$.T(3971121, 'content-type', 21, false)));
                                            if (J$.C(209264, J$.U(386922, '!', J$.F(3971161, J$.R(3971145, 'shouldParse', shouldParse, false, false), false)(J$.R(3971153, 'req', req, false, false))))) {
                                                J$.F(3971185, J$.R(3971169, 'debug', debug, false, true), false)(J$.T(3971177, 'skip parsing', 21, false));
                                                J$.F(3971201, J$.R(3971193, 'next', next, false, false), false)();
                                                return J$.Rt(3971209, undefined);
                                            }
                                            var charset = J$.W(3971249, 'charset', J$.C(209272, J$.F(3971233, J$.R(3971217, 'getCharset', getCharset, false, true), false)(J$.R(3971225, 'req', req, false, false))) ? J$._() : J$.R(3971241, 'defaultCharset', defaultCharset, false, false), charset, false, false);
                                            J$.F(3971345, J$.R(3971257, 'read', read, false, true), false)(J$.R(3971265, 'req', req, false, false), J$.R(3971273, 'res', res, false, false), J$.R(3971281, 'next', next, false, false), J$.R(3971289, 'parse', parse, false, false), J$.R(3971297, 'debug', debug, false, true), J$.T(3971337, {
                                                encoding: J$.R(3971305, 'charset', charset, false, false),
                                                inflate: J$.R(3971313, 'inflate', inflate, false, false),
                                                limit: J$.R(3971321, 'limit', limit, false, false),
                                                verify: J$.R(3971329, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(3971857, J$e);
                                        } finally {
                                            if (J$.Fr(3971865))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3971873, J$e);
                        } finally {
                            if (J$.Fr(3971881))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharset(req) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3971601, arguments.callee, this, arguments);
                            arguments = J$.N(3971609, 'arguments', arguments, true, false, false);
                            req = J$.N(3971617, 'req', req, true, false, false);
                            try {
                                return J$.Rt(3971569, J$.M(3971561, J$.C(209280, J$.G(3971545, J$.G(3971537, J$.M(3971529, J$.R(3971513, 'contentType', contentType, false, true), 'parse', false)(J$.R(3971521, 'req', req, false, false)), 'parameters'), 'charset')) ? J$._() : J$.T(3971553, '', 21, false), 'toLowerCase', false)());
                            } catch (e) {
                                J$.N(3971593, 'e', e, false, false, true);
                                return J$.Rt(3971585, J$.T(3971577, undefined, 24, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3971889, J$e);
                        } finally {
                            if (J$.Fr(3971897))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3971721, arguments.callee, this, arguments);
                            arguments = J$.N(3971729, 'arguments', arguments, true, false, false);
                            type = J$.N(3971737, 'type', type, true, false, false);
                            return J$.Rt(3971713, J$.T(3971705, function checkType(req) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(3971681, arguments.callee, this, arguments);
                                            arguments = J$.N(3971689, 'arguments', arguments, true, false, false);
                                            req = J$.N(3971697, 'req', req, true, false, false);
                                            return J$.Rt(3971673, J$.F(3971665, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(3971625, 'Boolean', undefined, true, true) : Boolean = J$.R(3971625, 'Boolean', Boolean, true, true)), false)(J$.F(3971657, J$.R(3971633, 'typeis', typeis, false, true), false)(J$.R(3971641, 'req', req, false, false), J$.R(3971649, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(3971905, J$e);
                                        } finally {
                                            if (J$.Fr(3971913))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3971921, J$e);
                        } finally {
                            if (J$.Fr(3971929))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3971753, 'bytes', bytes, false, false, false);
            J$.N(3971761, 'contentType', contentType, false, false, false);
            J$.N(3971769, 'debug', debug, false, false, false);
            J$.N(3971777, 'read', read, false, false, false);
            J$.N(3971785, 'typeis', typeis, false, false, false);
            text = J$.N(3971801, 'text', J$.T(3971793, text, 12, false), true, false, false);
            getCharset = J$.N(3971817, 'getCharset', J$.T(3971809, getCharset, 12, false), true, false, false);
            typeChecker = J$.N(3971833, 'typeChecker', J$.T(3971825, typeChecker, 12, false), true, false, false);
            J$.T(3970313, 'use strict', 21, false);
            var bytes = J$.W(3970345, 'bytes', J$.F(3970337, J$.I(typeof require === 'undefined' ? require = J$.R(3970321, 'require', undefined, true, true) : require = J$.R(3970321, 'require', require, true, true)), false)(J$.T(3970329, 'bytes', 21, false)), bytes, false, true);
            var contentType = J$.W(3970377, 'contentType', J$.F(3970369, J$.I(typeof require === 'undefined' ? require = J$.R(3970353, 'require', undefined, true, true) : require = J$.R(3970353, 'require', require, true, true)), false)(J$.T(3970361, 'content-type', 21, false)), contentType, false, true);
            var debug = J$.W(3970425, 'debug', J$.F(3970417, J$.F(3970401, J$.I(typeof require === 'undefined' ? require = J$.R(3970385, 'require', undefined, true, true) : require = J$.R(3970385, 'require', require, true, true)), false)(J$.T(3970393, 'debug', 21, false)), false)(J$.T(3970409, 'body-parser:text', 21, false)), debug, false, true);
            var read = J$.W(3970457, 'read', J$.F(3970449, J$.I(typeof require === 'undefined' ? require = J$.R(3970433, 'require', undefined, true, true) : require = J$.R(3970433, 'require', require, true, true)), false)(J$.T(3970441, '../read', 21, false)), read, false, true);
            var typeis = J$.W(3970489, 'typeis', J$.F(3970481, J$.I(typeof require === 'undefined' ? require = J$.R(3970465, 'require', undefined, true, true) : require = J$.R(3970465, 'require', require, true, true)), false)(J$.T(3970473, 'type-is', 21, false)), typeis, false, true);
            J$.P(3970513, J$.I(typeof module === 'undefined' ? module = J$.R(3970497, 'module', undefined, true, true) : module = J$.R(3970497, 'module', module, true, true)), 'exports', J$.R(3970505, 'text', text, false, true));
        } catch (J$e) {
            J$.Ex(3971937, J$e);
        } finally {
            if (J$.Sr(3971945))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

