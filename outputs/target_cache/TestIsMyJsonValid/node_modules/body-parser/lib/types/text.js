J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(13241, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/text.js');
            function text(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(12913, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(12385, arguments.callee, this, arguments);
                                            arguments = J$.N(12393, 'arguments', arguments, true, false, false);
                                            buf = J$.N(12401, 'buf', buf, true, false, false);
                                            return J$.Rt(12377, J$.R(12369, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(13337, J$e);
                                        } finally {
                                            if (J$.Fr(13345))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(12921, 'arguments', arguments, true, false, false);
                            options = J$.N(12929, 'options', options, true, false, false);
                            J$.N(12937, 'opts', opts, false, false, false);
                            J$.N(12945, 'defaultCharset', defaultCharset, false, false, false);
                            J$.N(12953, 'inflate', inflate, false, false, false);
                            J$.N(12961, 'limit', limit, false, false, false);
                            J$.N(12969, 'type', type, false, false, false);
                            J$.N(12977, 'verify', verify, false, false, false);
                            J$.N(12985, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(13001, 'parse', J$.T(12993, parse, 12, false), true, false, false);
                            var opts = J$.W(12033, 'opts', J$.C(768, J$.R(12017, 'options', options, false, false)) ? J$._() : J$.T(12025, {}, 11, false), opts, false, false);
                            var defaultCharset = J$.W(12065, 'defaultCharset', J$.C(776, J$.G(12049, J$.R(12041, 'opts', opts, false, false), 'defaultCharset')) ? J$._() : J$.T(12057, 'utf-8', 21, false), defaultCharset, false, false);
                            var inflate = J$.W(12097, 'inflate', J$.B(802, '!==', J$.G(12081, J$.R(12073, 'opts', opts, false, false), 'inflate'), J$.T(12089, false, 23, false)), inflate, false, false);
                            var limit = J$.W(12185, 'limit', J$.C(792, J$.B(818, '!==', J$.U(810, 'typeof', J$.G(12113, J$.R(12105, 'opts', opts, false, false), 'limit')), J$.T(12121, 'number', 21, false))) ? J$.M(12161, J$.R(12129, 'bytes', bytes, false, true), 'parse', false)(J$.C(784, J$.G(12145, J$.R(12137, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(12153, '100kb', 21, false)) : J$.G(12177, J$.R(12169, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(12217, 'type', J$.C(800, J$.G(12201, J$.R(12193, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(12209, 'text/plain', 21, false), type, false, false);
                            var verify = J$.W(12249, 'verify', J$.C(808, J$.G(12233, J$.R(12225, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(12241, false, 23, false), verify, false, false);
                            if (J$.C(824, J$.C(816, J$.B(826, '!==', J$.R(12257, 'verify', verify, false, false), J$.T(12265, false, 23, false))) ? J$.B(842, '!==', J$.U(834, 'typeof', J$.R(12273, 'verify', verify, false, false)), J$.T(12281, 'function', 21, false)) : J$._())) {
                                throw J$.F(12305, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(12289, 'TypeError', undefined, true, true) : TypeError = J$.R(12289, 'TypeError', TypeError, true, true)), true)(J$.T(12297, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(12361, 'shouldParse', J$.C(832, J$.B(858, '!==', J$.U(850, 'typeof', J$.R(12313, 'type', type, false, false)), J$.T(12321, 'function', 21, false))) ? J$.F(12345, J$.R(12329, 'typeChecker', typeChecker, false, true), false)(J$.R(12337, 'type', type, false, false)) : J$.R(12353, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(12905, J$.T(12897, function textParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(12849, arguments.callee, this, arguments);
                                            arguments = J$.N(12857, 'arguments', arguments, true, false, false);
                                            req = J$.N(12865, 'req', req, true, false, false);
                                            res = J$.N(12873, 'res', res, true, false, false);
                                            next = J$.N(12881, 'next', next, true, false, false);
                                            J$.N(12889, 'charset', charset, false, false, false);
                                            if (J$.C(840, J$.G(12417, J$.R(12409, 'req', req, false, false), '_body'))) {
                                                J$.F(12441, J$.R(12425, 'debug', debug, false, true), false)(J$.T(12433, 'body already parsed', 21, false));
                                                J$.F(12457, J$.R(12449, 'next', next, false, false), false)();
                                                return J$.Rt(12465, undefined);
                                            }
                                            J$.P(12505, J$.R(12473, 'req', req, false, false), 'body', J$.C(848, J$.G(12489, J$.R(12481, 'req', req, false, false), 'body')) ? J$._() : J$.T(12497, {}, 11, false));
                                            if (J$.C(856, J$.U(866, '!', J$.M(12529, J$.R(12513, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(12521, 'req', req, false, false))))) {
                                                J$.F(12553, J$.R(12537, 'debug', debug, false, true), false)(J$.T(12545, 'skip empty body', 21, false));
                                                J$.F(12569, J$.R(12561, 'next', next, false, false), false)();
                                                return J$.Rt(12577, undefined);
                                            }
                                            J$.F(12633, J$.R(12585, 'debug', debug, false, true), false)(J$.T(12593, 'content-type %j', 21, false), J$.G(12625, J$.G(12609, J$.R(12601, 'req', req, false, false), 'headers'), J$.T(12617, 'content-type', 21, false)));
                                            if (J$.C(864, J$.U(874, '!', J$.F(12657, J$.R(12641, 'shouldParse', shouldParse, false, false), false)(J$.R(12649, 'req', req, false, false))))) {
                                                J$.F(12681, J$.R(12665, 'debug', debug, false, true), false)(J$.T(12673, 'skip parsing', 21, false));
                                                J$.F(12697, J$.R(12689, 'next', next, false, false), false)();
                                                return J$.Rt(12705, undefined);
                                            }
                                            var charset = J$.W(12745, 'charset', J$.C(872, J$.F(12729, J$.R(12713, 'getCharset', getCharset, false, true), false)(J$.R(12721, 'req', req, false, false))) ? J$._() : J$.R(12737, 'defaultCharset', defaultCharset, false, false), charset, false, false);
                                            J$.F(12841, J$.R(12753, 'read', read, false, true), false)(J$.R(12761, 'req', req, false, false), J$.R(12769, 'res', res, false, false), J$.R(12777, 'next', next, false, false), J$.R(12785, 'parse', parse, false, false), J$.R(12793, 'debug', debug, false, true), J$.T(12833, {
                                                encoding: J$.R(12801, 'charset', charset, false, false),
                                                inflate: J$.R(12809, 'inflate', inflate, false, false),
                                                limit: J$.R(12817, 'limit', limit, false, false),
                                                verify: J$.R(12825, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(13353, J$e);
                                        } finally {
                                            if (J$.Fr(13361))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(13369, J$e);
                        } finally {
                            if (J$.Fr(13377))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharset(req) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(13097, arguments.callee, this, arguments);
                            arguments = J$.N(13105, 'arguments', arguments, true, false, false);
                            req = J$.N(13113, 'req', req, true, false, false);
                            try {
                                return J$.Rt(13065, J$.M(13057, J$.C(880, J$.G(13041, J$.G(13033, J$.M(13025, J$.R(13009, 'contentType', contentType, false, true), 'parse', false)(J$.R(13017, 'req', req, false, false)), 'parameters'), 'charset')) ? J$._() : J$.T(13049, '', 21, false), 'toLowerCase', false)());
                            } catch (e) {
                                J$.N(13089, 'e', e, false, false, true);
                                return J$.Rt(13081, J$.T(13073, undefined, 24, false));
                            }
                        } catch (J$e) {
                            J$.Ex(13385, J$e);
                        } finally {
                            if (J$.Fr(13393))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(13217, arguments.callee, this, arguments);
                            arguments = J$.N(13225, 'arguments', arguments, true, false, false);
                            type = J$.N(13233, 'type', type, true, false, false);
                            return J$.Rt(13209, J$.T(13201, function checkType(req) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(13177, arguments.callee, this, arguments);
                                            arguments = J$.N(13185, 'arguments', arguments, true, false, false);
                                            req = J$.N(13193, 'req', req, true, false, false);
                                            return J$.Rt(13169, J$.F(13161, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(13121, 'Boolean', undefined, true, true) : Boolean = J$.R(13121, 'Boolean', Boolean, true, true)), false)(J$.F(13153, J$.R(13129, 'typeis', typeis, false, true), false)(J$.R(13137, 'req', req, false, false), J$.R(13145, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(13401, J$e);
                                        } finally {
                                            if (J$.Fr(13409))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(13417, J$e);
                        } finally {
                            if (J$.Fr(13425))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(13249, 'bytes', bytes, false, false, false);
            J$.N(13257, 'contentType', contentType, false, false, false);
            J$.N(13265, 'debug', debug, false, false, false);
            J$.N(13273, 'read', read, false, false, false);
            J$.N(13281, 'typeis', typeis, false, false, false);
            text = J$.N(13297, 'text', J$.T(13289, text, 12, false), true, false, false);
            getCharset = J$.N(13313, 'getCharset', J$.T(13305, getCharset, 12, false), true, false, false);
            typeChecker = J$.N(13329, 'typeChecker', J$.T(13321, typeChecker, 12, false), true, false, false);
            J$.T(11809, 'use strict', 21, false);
            var bytes = J$.W(11841, 'bytes', J$.F(11833, J$.I(typeof require === 'undefined' ? require = J$.R(11817, 'require', undefined, true, true) : require = J$.R(11817, 'require', require, true, true)), false)(J$.T(11825, 'bytes', 21, false)), bytes, false, true);
            var contentType = J$.W(11873, 'contentType', J$.F(11865, J$.I(typeof require === 'undefined' ? require = J$.R(11849, 'require', undefined, true, true) : require = J$.R(11849, 'require', require, true, true)), false)(J$.T(11857, 'content-type', 21, false)), contentType, false, true);
            var debug = J$.W(11921, 'debug', J$.F(11913, J$.F(11897, J$.I(typeof require === 'undefined' ? require = J$.R(11881, 'require', undefined, true, true) : require = J$.R(11881, 'require', require, true, true)), false)(J$.T(11889, 'debug', 21, false)), false)(J$.T(11905, 'body-parser:text', 21, false)), debug, false, true);
            var read = J$.W(11953, 'read', J$.F(11945, J$.I(typeof require === 'undefined' ? require = J$.R(11929, 'require', undefined, true, true) : require = J$.R(11929, 'require', require, true, true)), false)(J$.T(11937, '../read', 21, false)), read, false, true);
            var typeis = J$.W(11985, 'typeis', J$.F(11977, J$.I(typeof require === 'undefined' ? require = J$.R(11961, 'require', undefined, true, true) : require = J$.R(11961, 'require', require, true, true)), false)(J$.T(11969, 'type-is', 21, false)), typeis, false, true);
            J$.P(12009, J$.I(typeof module === 'undefined' ? module = J$.R(11993, 'module', undefined, true, true) : module = J$.R(11993, 'module', module, true, true)), 'exports', J$.R(12001, 'text', text, false, true));
        } catch (J$e) {
            J$.Ex(13433, J$e);
        } finally {
            if (J$.Sr(13441))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

