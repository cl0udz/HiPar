J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(3970145, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/raw.js');
            function raw(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3969937, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(3969457, arguments.callee, this, arguments);
                                            arguments = J$.N(3969465, 'arguments', arguments, true, false, false);
                                            buf = J$.N(3969473, 'buf', buf, true, false, false);
                                            return J$.Rt(3969449, J$.R(3969441, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3970217, J$e);
                                        } finally {
                                            if (J$.Fr(3970225))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(3969945, 'arguments', arguments, true, false, false);
                            options = J$.N(3969953, 'options', options, true, false, false);
                            J$.N(3969961, 'opts', opts, false, false, false);
                            J$.N(3969969, 'inflate', inflate, false, false, false);
                            J$.N(3969977, 'limit', limit, false, false, false);
                            J$.N(3969985, 'type', type, false, false, false);
                            J$.N(3969993, 'verify', verify, false, false, false);
                            J$.N(3970001, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(3970017, 'parse', J$.T(3970009, parse, 12, false), true, false, false);
                            var opts = J$.W(3969137, 'opts', J$.C(209072, J$.R(3969121, 'options', options, false, false)) ? J$._() : J$.T(3969129, {}, 11, false), opts, false, false);
                            var inflate = J$.W(3969169, 'inflate', J$.B(386770, '!==', J$.G(3969153, J$.R(3969145, 'opts', opts, false, false), 'inflate'), J$.T(3969161, false, 23, false)), inflate, false, false);
                            var limit = J$.W(3969257, 'limit', J$.C(209088, J$.B(386786, '!==', J$.U(386778, 'typeof', J$.G(3969185, J$.R(3969177, 'opts', opts, false, false), 'limit')), J$.T(3969193, 'number', 21, false))) ? J$.M(3969233, J$.R(3969201, 'bytes', bytes, false, true), 'parse', false)(J$.C(209080, J$.G(3969217, J$.R(3969209, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(3969225, '100kb', 21, false)) : J$.G(3969249, J$.R(3969241, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(3969289, 'type', J$.C(209096, J$.G(3969273, J$.R(3969265, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(3969281, 'application/octet-stream', 21, false), type, false, false);
                            var verify = J$.W(3969321, 'verify', J$.C(209104, J$.G(3969305, J$.R(3969297, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(3969313, false, 23, false), verify, false, false);
                            if (J$.C(209120, J$.C(209112, J$.B(386794, '!==', J$.R(3969329, 'verify', verify, false, false), J$.T(3969337, false, 23, false))) ? J$.B(386810, '!==', J$.U(386802, 'typeof', J$.R(3969345, 'verify', verify, false, false)), J$.T(3969353, 'function', 21, false)) : J$._())) {
                                throw J$.F(3969377, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(3969361, 'TypeError', undefined, true, true) : TypeError = J$.R(3969361, 'TypeError', TypeError, true, true)), true)(J$.T(3969369, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(3969433, 'shouldParse', J$.C(209128, J$.B(386826, '!==', J$.U(386818, 'typeof', J$.R(3969385, 'type', type, false, false)), J$.T(3969393, 'function', 21, false))) ? J$.F(3969417, J$.R(3969401, 'typeChecker', typeChecker, false, true), false)(J$.R(3969409, 'type', type, false, false)) : J$.R(3969425, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(3969929, J$.T(3969921, function rawParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(3969881, arguments.callee, this, arguments);
                                            arguments = J$.N(3969889, 'arguments', arguments, true, false, false);
                                            req = J$.N(3969897, 'req', req, true, false, false);
                                            res = J$.N(3969905, 'res', res, true, false, false);
                                            next = J$.N(3969913, 'next', next, true, false, false);
                                            if (J$.C(209136, J$.G(3969489, J$.R(3969481, 'req', req, false, false), '_body'))) {
                                                J$.F(3969513, J$.R(3969497, 'debug', debug, false, true), false)(J$.T(3969505, 'body already parsed', 21, false));
                                                J$.F(3969529, J$.R(3969521, 'next', next, false, false), false)();
                                                return J$.Rt(3969537, undefined);
                                            }
                                            J$.P(3969577, J$.R(3969545, 'req', req, false, false), 'body', J$.C(209144, J$.G(3969561, J$.R(3969553, 'req', req, false, false), 'body')) ? J$._() : J$.T(3969569, {}, 11, false));
                                            if (J$.C(209152, J$.U(386834, '!', J$.M(3969601, J$.R(3969585, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(3969593, 'req', req, false, false))))) {
                                                J$.F(3969625, J$.R(3969609, 'debug', debug, false, true), false)(J$.T(3969617, 'skip empty body', 21, false));
                                                J$.F(3969641, J$.R(3969633, 'next', next, false, false), false)();
                                                return J$.Rt(3969649, undefined);
                                            }
                                            J$.F(3969705, J$.R(3969657, 'debug', debug, false, true), false)(J$.T(3969665, 'content-type %j', 21, false), J$.G(3969697, J$.G(3969681, J$.R(3969673, 'req', req, false, false), 'headers'), J$.T(3969689, 'content-type', 21, false)));
                                            if (J$.C(209160, J$.U(386842, '!', J$.F(3969729, J$.R(3969713, 'shouldParse', shouldParse, false, false), false)(J$.R(3969721, 'req', req, false, false))))) {
                                                J$.F(3969753, J$.R(3969737, 'debug', debug, false, true), false)(J$.T(3969745, 'skip parsing', 21, false));
                                                J$.F(3969769, J$.R(3969761, 'next', next, false, false), false)();
                                                return J$.Rt(3969777, undefined);
                                            }
                                            J$.F(3969873, J$.R(3969785, 'read', read, false, true), false)(J$.R(3969793, 'req', req, false, false), J$.R(3969801, 'res', res, false, false), J$.R(3969809, 'next', next, false, false), J$.R(3969817, 'parse', parse, false, false), J$.R(3969825, 'debug', debug, false, true), J$.T(3969865, {
                                                encoding: J$.T(3969833, null, 25, false),
                                                inflate: J$.R(3969841, 'inflate', inflate, false, false),
                                                limit: J$.R(3969849, 'limit', limit, false, false),
                                                verify: J$.R(3969857, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(3970233, J$e);
                                        } finally {
                                            if (J$.Fr(3970241))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3970249, J$e);
                        } finally {
                            if (J$.Fr(3970257))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3970121, arguments.callee, this, arguments);
                            arguments = J$.N(3970129, 'arguments', arguments, true, false, false);
                            type = J$.N(3970137, 'type', type, true, false, false);
                            return J$.Rt(3970113, J$.T(3970105, function checkType(req) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3970081, arguments.callee, this, arguments);
                                            arguments = J$.N(3970089, 'arguments', arguments, true, false, false);
                                            req = J$.N(3970097, 'req', req, true, false, false);
                                            return J$.Rt(3970073, J$.F(3970065, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(3970025, 'Boolean', undefined, true, true) : Boolean = J$.R(3970025, 'Boolean', Boolean, true, true)), false)(J$.F(3970057, J$.R(3970033, 'typeis', typeis, false, true), false)(J$.R(3970041, 'req', req, false, false), J$.R(3970049, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(3970265, J$e);
                                        } finally {
                                            if (J$.Fr(3970273))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3970281, J$e);
                        } finally {
                            if (J$.Fr(3970289))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3970153, 'bytes', bytes, false, false, false);
            J$.N(3970161, 'debug', debug, false, false, false);
            J$.N(3970169, 'read', read, false, false, false);
            J$.N(3970177, 'typeis', typeis, false, false, false);
            raw = J$.N(3970193, 'raw', J$.T(3970185, raw, 12, false), true, false, false);
            typeChecker = J$.N(3970209, 'typeChecker', J$.T(3970201, typeChecker, 12, false), true, false, false);
            J$.T(3968945, 'use strict', 21, false);
            var bytes = J$.W(3968977, 'bytes', J$.F(3968969, J$.I(typeof require === 'undefined' ? require = J$.R(3968953, 'require', undefined, true, true) : require = J$.R(3968953, 'require', require, true, true)), false)(J$.T(3968961, 'bytes', 21, false)), bytes, false, true);
            var debug = J$.W(3969025, 'debug', J$.F(3969017, J$.F(3969001, J$.I(typeof require === 'undefined' ? require = J$.R(3968985, 'require', undefined, true, true) : require = J$.R(3968985, 'require', require, true, true)), false)(J$.T(3968993, 'debug', 21, false)), false)(J$.T(3969009, 'body-parser:raw', 21, false)), debug, false, true);
            var read = J$.W(3969057, 'read', J$.F(3969049, J$.I(typeof require === 'undefined' ? require = J$.R(3969033, 'require', undefined, true, true) : require = J$.R(3969033, 'require', require, true, true)), false)(J$.T(3969041, '../read', 21, false)), read, false, true);
            var typeis = J$.W(3969089, 'typeis', J$.F(3969081, J$.I(typeof require === 'undefined' ? require = J$.R(3969065, 'require', undefined, true, true) : require = J$.R(3969065, 'require', require, true, true)), false)(J$.T(3969073, 'type-is', 21, false)), typeis, false, true);
            J$.P(3969113, J$.I(typeof module === 'undefined' ? module = J$.R(3969097, 'module', undefined, true, true) : module = J$.R(3969097, 'module', module, true, true)), 'exports', J$.R(3969105, 'raw', raw, false, true));
        } catch (J$e) {
            J$.Ex(3970297, J$e);
        } finally {
            if (J$.Sr(3970305))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

