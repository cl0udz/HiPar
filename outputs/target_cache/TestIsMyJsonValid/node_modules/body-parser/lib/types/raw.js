J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(11641, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/raw.js');
            function raw(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(11433, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(10953, arguments.callee, this, arguments);
                                            arguments = J$.N(10961, 'arguments', arguments, true, false, false);
                                            buf = J$.N(10969, 'buf', buf, true, false, false);
                                            return J$.Rt(10945, J$.R(10937, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(11713, J$e);
                                        } finally {
                                            if (J$.Fr(11721))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(11441, 'arguments', arguments, true, false, false);
                            options = J$.N(11449, 'options', options, true, false, false);
                            J$.N(11457, 'opts', opts, false, false, false);
                            J$.N(11465, 'inflate', inflate, false, false, false);
                            J$.N(11473, 'limit', limit, false, false, false);
                            J$.N(11481, 'type', type, false, false, false);
                            J$.N(11489, 'verify', verify, false, false, false);
                            J$.N(11497, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(11513, 'parse', J$.T(11505, parse, 12, false), true, false, false);
                            var opts = J$.W(10633, 'opts', J$.C(672, J$.R(10617, 'options', options, false, false)) ? J$._() : J$.T(10625, {}, 11, false), opts, false, false);
                            var inflate = J$.W(10665, 'inflate', J$.B(722, '!==', J$.G(10649, J$.R(10641, 'opts', opts, false, false), 'inflate'), J$.T(10657, false, 23, false)), inflate, false, false);
                            var limit = J$.W(10753, 'limit', J$.C(688, J$.B(738, '!==', J$.U(730, 'typeof', J$.G(10681, J$.R(10673, 'opts', opts, false, false), 'limit')), J$.T(10689, 'number', 21, false))) ? J$.M(10729, J$.R(10697, 'bytes', bytes, false, true), 'parse', false)(J$.C(680, J$.G(10713, J$.R(10705, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(10721, '100kb', 21, false)) : J$.G(10745, J$.R(10737, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(10785, 'type', J$.C(696, J$.G(10769, J$.R(10761, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(10777, 'application/octet-stream', 21, false), type, false, false);
                            var verify = J$.W(10817, 'verify', J$.C(704, J$.G(10801, J$.R(10793, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(10809, false, 23, false), verify, false, false);
                            if (J$.C(720, J$.C(712, J$.B(746, '!==', J$.R(10825, 'verify', verify, false, false), J$.T(10833, false, 23, false))) ? J$.B(762, '!==', J$.U(754, 'typeof', J$.R(10841, 'verify', verify, false, false)), J$.T(10849, 'function', 21, false)) : J$._())) {
                                throw J$.F(10873, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(10857, 'TypeError', undefined, true, true) : TypeError = J$.R(10857, 'TypeError', TypeError, true, true)), true)(J$.T(10865, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(10929, 'shouldParse', J$.C(728, J$.B(778, '!==', J$.U(770, 'typeof', J$.R(10881, 'type', type, false, false)), J$.T(10889, 'function', 21, false))) ? J$.F(10913, J$.R(10897, 'typeChecker', typeChecker, false, true), false)(J$.R(10905, 'type', type, false, false)) : J$.R(10921, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(11425, J$.T(11417, function rawParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(11377, arguments.callee, this, arguments);
                                            arguments = J$.N(11385, 'arguments', arguments, true, false, false);
                                            req = J$.N(11393, 'req', req, true, false, false);
                                            res = J$.N(11401, 'res', res, true, false, false);
                                            next = J$.N(11409, 'next', next, true, false, false);
                                            if (J$.C(736, J$.G(10985, J$.R(10977, 'req', req, false, false), '_body'))) {
                                                J$.F(11009, J$.R(10993, 'debug', debug, false, true), false)(J$.T(11001, 'body already parsed', 21, false));
                                                J$.F(11025, J$.R(11017, 'next', next, false, false), false)();
                                                return J$.Rt(11033, undefined);
                                            }
                                            J$.P(11073, J$.R(11041, 'req', req, false, false), 'body', J$.C(744, J$.G(11057, J$.R(11049, 'req', req, false, false), 'body')) ? J$._() : J$.T(11065, {}, 11, false));
                                            if (J$.C(752, J$.U(786, '!', J$.M(11097, J$.R(11081, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(11089, 'req', req, false, false))))) {
                                                J$.F(11121, J$.R(11105, 'debug', debug, false, true), false)(J$.T(11113, 'skip empty body', 21, false));
                                                J$.F(11137, J$.R(11129, 'next', next, false, false), false)();
                                                return J$.Rt(11145, undefined);
                                            }
                                            J$.F(11201, J$.R(11153, 'debug', debug, false, true), false)(J$.T(11161, 'content-type %j', 21, false), J$.G(11193, J$.G(11177, J$.R(11169, 'req', req, false, false), 'headers'), J$.T(11185, 'content-type', 21, false)));
                                            if (J$.C(760, J$.U(794, '!', J$.F(11225, J$.R(11209, 'shouldParse', shouldParse, false, false), false)(J$.R(11217, 'req', req, false, false))))) {
                                                J$.F(11249, J$.R(11233, 'debug', debug, false, true), false)(J$.T(11241, 'skip parsing', 21, false));
                                                J$.F(11265, J$.R(11257, 'next', next, false, false), false)();
                                                return J$.Rt(11273, undefined);
                                            }
                                            J$.F(11369, J$.R(11281, 'read', read, false, true), false)(J$.R(11289, 'req', req, false, false), J$.R(11297, 'res', res, false, false), J$.R(11305, 'next', next, false, false), J$.R(11313, 'parse', parse, false, false), J$.R(11321, 'debug', debug, false, true), J$.T(11361, {
                                                encoding: J$.T(11329, null, 25, false),
                                                inflate: J$.R(11337, 'inflate', inflate, false, false),
                                                limit: J$.R(11345, 'limit', limit, false, false),
                                                verify: J$.R(11353, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(11729, J$e);
                                        } finally {
                                            if (J$.Fr(11737))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(11745, J$e);
                        } finally {
                            if (J$.Fr(11753))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(11617, arguments.callee, this, arguments);
                            arguments = J$.N(11625, 'arguments', arguments, true, false, false);
                            type = J$.N(11633, 'type', type, true, false, false);
                            return J$.Rt(11609, J$.T(11601, function checkType(req) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(11577, arguments.callee, this, arguments);
                                            arguments = J$.N(11585, 'arguments', arguments, true, false, false);
                                            req = J$.N(11593, 'req', req, true, false, false);
                                            return J$.Rt(11569, J$.F(11561, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(11521, 'Boolean', undefined, true, true) : Boolean = J$.R(11521, 'Boolean', Boolean, true, true)), false)(J$.F(11553, J$.R(11529, 'typeis', typeis, false, true), false)(J$.R(11537, 'req', req, false, false), J$.R(11545, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(11761, J$e);
                                        } finally {
                                            if (J$.Fr(11769))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(11777, J$e);
                        } finally {
                            if (J$.Fr(11785))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(11649, 'bytes', bytes, false, false, false);
            J$.N(11657, 'debug', debug, false, false, false);
            J$.N(11665, 'read', read, false, false, false);
            J$.N(11673, 'typeis', typeis, false, false, false);
            raw = J$.N(11689, 'raw', J$.T(11681, raw, 12, false), true, false, false);
            typeChecker = J$.N(11705, 'typeChecker', J$.T(11697, typeChecker, 12, false), true, false, false);
            J$.T(10441, 'use strict', 21, false);
            var bytes = J$.W(10473, 'bytes', J$.F(10465, J$.I(typeof require === 'undefined' ? require = J$.R(10449, 'require', undefined, true, true) : require = J$.R(10449, 'require', require, true, true)), false)(J$.T(10457, 'bytes', 21, false)), bytes, false, true);
            var debug = J$.W(10521, 'debug', J$.F(10513, J$.F(10497, J$.I(typeof require === 'undefined' ? require = J$.R(10481, 'require', undefined, true, true) : require = J$.R(10481, 'require', require, true, true)), false)(J$.T(10489, 'debug', 21, false)), false)(J$.T(10505, 'body-parser:raw', 21, false)), debug, false, true);
            var read = J$.W(10553, 'read', J$.F(10545, J$.I(typeof require === 'undefined' ? require = J$.R(10529, 'require', undefined, true, true) : require = J$.R(10529, 'require', require, true, true)), false)(J$.T(10537, '../read', 21, false)), read, false, true);
            var typeis = J$.W(10585, 'typeis', J$.F(10577, J$.I(typeof require === 'undefined' ? require = J$.R(10561, 'require', undefined, true, true) : require = J$.R(10561, 'require', require, true, true)), false)(J$.T(10569, 'type-is', 21, false)), typeis, false, true);
            J$.P(10609, J$.I(typeof module === 'undefined' ? module = J$.R(10593, 'module', undefined, true, true) : module = J$.R(10593, 'module', module, true, true)), 'exports', J$.R(10601, 'raw', raw, false, true));
        } catch (J$e) {
            J$.Ex(11793, J$e);
        } finally {
            if (J$.Sr(11801))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

