J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(54513, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/body-parser/lib/types/raw.js');
            function raw(options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(54305, arguments.callee, this, arguments);
                            function parse(buf) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(53825, arguments.callee, this, arguments);
                                            arguments = J$.N(53833, 'arguments', arguments, true, false, false);
                                            buf = J$.N(53841, 'buf', buf, true, false, false);
                                            return J$.Rt(53817, J$.R(53809, 'buf', buf, false, false));
                                        } catch (J$e) {
                                            J$.Ex(54585, J$e);
                                        } finally {
                                            if (J$.Fr(54593))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(54313, 'arguments', arguments, true, false, false);
                            options = J$.N(54321, 'options', options, true, false, false);
                            J$.N(54329, 'opts', opts, false, false, false);
                            J$.N(54337, 'inflate', inflate, false, false, false);
                            J$.N(54345, 'limit', limit, false, false, false);
                            J$.N(54353, 'type', type, false, false, false);
                            J$.N(54361, 'verify', verify, false, false, false);
                            J$.N(54369, 'shouldParse', shouldParse, false, false, false);
                            parse = J$.N(54385, 'parse', J$.T(54377, parse, 12, false), true, false, false);
                            var opts = J$.W(53505, 'opts', J$.C(2944, J$.R(53489, 'options', options, false, false)) ? J$._() : J$.T(53497, {}, 11, false), opts, false, false);
                            var inflate = J$.W(53537, 'inflate', J$.B(3842, '!==', J$.G(53521, J$.R(53513, 'opts', opts, false, false), 'inflate'), J$.T(53529, false, 23, false)), inflate, false, false);
                            var limit = J$.W(53625, 'limit', J$.C(2960, J$.B(3858, '!==', J$.U(3850, 'typeof', J$.G(53553, J$.R(53545, 'opts', opts, false, false), 'limit')), J$.T(53561, 'number', 21, false))) ? J$.M(53601, J$.R(53569, 'bytes', bytes, false, true), 'parse', false)(J$.C(2952, J$.G(53585, J$.R(53577, 'opts', opts, false, false), 'limit')) ? J$._() : J$.T(53593, '100kb', 21, false)) : J$.G(53617, J$.R(53609, 'opts', opts, false, false), 'limit'), limit, false, false);
                            var type = J$.W(53657, 'type', J$.C(2968, J$.G(53641, J$.R(53633, 'opts', opts, false, false), 'type')) ? J$._() : J$.T(53649, 'application/octet-stream', 21, false), type, false, false);
                            var verify = J$.W(53689, 'verify', J$.C(2976, J$.G(53673, J$.R(53665, 'opts', opts, false, false), 'verify')) ? J$._() : J$.T(53681, false, 23, false), verify, false, false);
                            if (J$.C(2992, J$.C(2984, J$.B(3866, '!==', J$.R(53697, 'verify', verify, false, false), J$.T(53705, false, 23, false))) ? J$.B(3882, '!==', J$.U(3874, 'typeof', J$.R(53713, 'verify', verify, false, false)), J$.T(53721, 'function', 21, false)) : J$._())) {
                                throw J$.F(53745, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(53729, 'TypeError', undefined, true, true) : TypeError = J$.R(53729, 'TypeError', TypeError, true, true)), true)(J$.T(53737, 'option verify must be function', 21, false));
                            }
                            var shouldParse = J$.W(53801, 'shouldParse', J$.C(3000, J$.B(3898, '!==', J$.U(3890, 'typeof', J$.R(53753, 'type', type, false, false)), J$.T(53761, 'function', 21, false))) ? J$.F(53785, J$.R(53769, 'typeChecker', typeChecker, false, true), false)(J$.R(53777, 'type', type, false, false)) : J$.R(53793, 'type', type, false, false), shouldParse, false, false);
                            return J$.Rt(54297, J$.T(54289, function rawParser(req, res, next) {
                                jalangiLabel1:
                                    while (true) {
                                        try {
                                            J$.Fe(54249, arguments.callee, this, arguments);
                                            arguments = J$.N(54257, 'arguments', arguments, true, false, false);
                                            req = J$.N(54265, 'req', req, true, false, false);
                                            res = J$.N(54273, 'res', res, true, false, false);
                                            next = J$.N(54281, 'next', next, true, false, false);
                                            if (J$.C(3008, J$.G(53857, J$.R(53849, 'req', req, false, false), '_body'))) {
                                                J$.F(53881, J$.R(53865, 'debug', debug, false, true), false)(J$.T(53873, 'body already parsed', 21, false));
                                                J$.F(53897, J$.R(53889, 'next', next, false, false), false)();
                                                return J$.Rt(53905, undefined);
                                            }
                                            J$.P(53945, J$.R(53913, 'req', req, false, false), 'body', J$.C(3016, J$.G(53929, J$.R(53921, 'req', req, false, false), 'body')) ? J$._() : J$.T(53937, {}, 11, false));
                                            if (J$.C(3024, J$.U(3906, '!', J$.M(53969, J$.R(53953, 'typeis', typeis, false, true), 'hasBody', false)(J$.R(53961, 'req', req, false, false))))) {
                                                J$.F(53993, J$.R(53977, 'debug', debug, false, true), false)(J$.T(53985, 'skip empty body', 21, false));
                                                J$.F(54009, J$.R(54001, 'next', next, false, false), false)();
                                                return J$.Rt(54017, undefined);
                                            }
                                            J$.F(54073, J$.R(54025, 'debug', debug, false, true), false)(J$.T(54033, 'content-type %j', 21, false), J$.G(54065, J$.G(54049, J$.R(54041, 'req', req, false, false), 'headers'), J$.T(54057, 'content-type', 21, false)));
                                            if (J$.C(3032, J$.U(3914, '!', J$.F(54097, J$.R(54081, 'shouldParse', shouldParse, false, false), false)(J$.R(54089, 'req', req, false, false))))) {
                                                J$.F(54121, J$.R(54105, 'debug', debug, false, true), false)(J$.T(54113, 'skip parsing', 21, false));
                                                J$.F(54137, J$.R(54129, 'next', next, false, false), false)();
                                                return J$.Rt(54145, undefined);
                                            }
                                            J$.F(54241, J$.R(54153, 'read', read, false, true), false)(J$.R(54161, 'req', req, false, false), J$.R(54169, 'res', res, false, false), J$.R(54177, 'next', next, false, false), J$.R(54185, 'parse', parse, false, false), J$.R(54193, 'debug', debug, false, true), J$.T(54233, {
                                                encoding: J$.T(54201, null, 25, false),
                                                inflate: J$.R(54209, 'inflate', inflate, false, false),
                                                limit: J$.R(54217, 'limit', limit, false, false),
                                                verify: J$.R(54225, 'verify', verify, false, false)
                                            }, 11, false));
                                        } catch (J$e) {
                                            J$.Ex(54601, J$e);
                                        } finally {
                                            if (J$.Fr(54609))
                                                continue jalangiLabel1;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(54617, J$e);
                        } finally {
                            if (J$.Fr(54625))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeChecker(type) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(54489, arguments.callee, this, arguments);
                            arguments = J$.N(54497, 'arguments', arguments, true, false, false);
                            type = J$.N(54505, 'type', type, true, false, false);
                            return J$.Rt(54481, J$.T(54473, function checkType(req) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(54449, arguments.callee, this, arguments);
                                            arguments = J$.N(54457, 'arguments', arguments, true, false, false);
                                            req = J$.N(54465, 'req', req, true, false, false);
                                            return J$.Rt(54441, J$.F(54433, J$.I(typeof Boolean === 'undefined' ? Boolean = J$.R(54393, 'Boolean', undefined, true, true) : Boolean = J$.R(54393, 'Boolean', Boolean, true, true)), false)(J$.F(54425, J$.R(54401, 'typeis', typeis, false, true), false)(J$.R(54409, 'req', req, false, false), J$.R(54417, 'type', type, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(54633, J$e);
                                        } finally {
                                            if (J$.Fr(54641))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(54649, J$e);
                        } finally {
                            if (J$.Fr(54657))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(54521, 'bytes', bytes, false, false, false);
            J$.N(54529, 'debug', debug, false, false, false);
            J$.N(54537, 'read', read, false, false, false);
            J$.N(54545, 'typeis', typeis, false, false, false);
            raw = J$.N(54561, 'raw', J$.T(54553, raw, 12, false), true, false, false);
            typeChecker = J$.N(54577, 'typeChecker', J$.T(54569, typeChecker, 12, false), true, false, false);
            J$.T(53313, 'use strict', 21, false);
            var bytes = J$.W(53345, 'bytes', J$.F(53337, J$.I(typeof require === 'undefined' ? require = J$.R(53321, 'require', undefined, true, true) : require = J$.R(53321, 'require', require, true, true)), false)(J$.T(53329, 'bytes', 21, false)), bytes, false, true);
            var debug = J$.W(53393, 'debug', J$.F(53385, J$.F(53369, J$.I(typeof require === 'undefined' ? require = J$.R(53353, 'require', undefined, true, true) : require = J$.R(53353, 'require', require, true, true)), false)(J$.T(53361, 'debug', 21, false)), false)(J$.T(53377, 'body-parser:raw', 21, false)), debug, false, true);
            var read = J$.W(53425, 'read', J$.F(53417, J$.I(typeof require === 'undefined' ? require = J$.R(53401, 'require', undefined, true, true) : require = J$.R(53401, 'require', require, true, true)), false)(J$.T(53409, '../read', 21, false)), read, false, true);
            var typeis = J$.W(53457, 'typeis', J$.F(53449, J$.I(typeof require === 'undefined' ? require = J$.R(53433, 'require', undefined, true, true) : require = J$.R(53433, 'require', require, true, true)), false)(J$.T(53441, 'type-is', 21, false)), typeis, false, true);
            J$.P(53481, J$.I(typeof module === 'undefined' ? module = J$.R(53465, 'module', undefined, true, true) : module = J$.R(53465, 'module', module, true, true)), 'exports', J$.R(53473, 'raw', raw, false, true));
        } catch (J$e) {
            J$.Ex(54665, J$e);
        } finally {
            if (J$.Sr(54673))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

