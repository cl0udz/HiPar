J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(447153, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/xtend/test.js');
            J$.N(447161, 'test', test, false, false, false);
            J$.N(447169, 'extend', extend, false, false, false);
            J$.N(447177, 'mutableExtend', mutableExtend, false, false, false);
            J$.T(444545, 'use strict', 21, false);
            J$.F(444569, J$.I(typeof require === 'undefined' ? require = J$.R(444553, 'require', undefined, true, true) : require = J$.R(444553, 'require', require, true, true)), false)(J$.T(444561, 'core-js/modules/es.object.create', 21, false));
            var test = J$.W(444601, 'test', J$.F(444593, J$.I(typeof require === 'undefined' ? require = J$.R(444577, 'require', undefined, true, true) : require = J$.R(444577, 'require', require, true, true)), false)(J$.T(444585, 'tape', 21, false)), test, false, true);
            var extend = J$.W(444633, 'extend', J$.F(444625, J$.I(typeof require === 'undefined' ? require = J$.R(444609, 'require', undefined, true, true) : require = J$.R(444609, 'require', require, true, true)), false)(J$.T(444617, './', 21, false)), extend, false, true);
            var mutableExtend = J$.W(444665, 'mutableExtend', J$.F(444657, J$.I(typeof require === 'undefined' ? require = J$.R(444641, 'require', undefined, true, true) : require = J$.R(444641, 'require', require, true, true)), false)(J$.T(444649, './mutable', 21, false)), mutableExtend, false, true);
            J$.F(444873, J$.R(444673, 'test', test, false, true), false)(J$.T(444681, 'merge', 21, false), J$.T(444865, function (assert) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(444825, arguments.callee, this, arguments);
                            arguments = J$.N(444833, 'arguments', arguments, true, false, false);
                            assert = J$.N(444841, 'assert', assert, true, false, false);
                            J$.N(444849, 'a', a, false, false, false);
                            J$.N(444857, 'b', b, false, false, false);
                            var a = J$.W(444705, 'a', J$.T(444697, { a: J$.T(444689, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(444729, 'b', J$.T(444721, { b: J$.T(444713, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(444801, J$.R(444737, 'assert', assert, false, false), 'deepEqual', false)(J$.F(444769, J$.R(444745, 'extend', extend, false, true), false)(J$.R(444753, 'a', a, false, false), J$.R(444761, 'b', b, false, false)), J$.T(444793, {
                                a: J$.T(444777, 'foo', 21, false),
                                b: J$.T(444785, 'bar', 21, false)
                            }, 11, false));
                            J$.M(444817, J$.R(444809, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447185, J$e);
                        } finally {
                            if (J$.Fr(447193))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(445073, J$.R(444881, 'test', test, false, true), false)(J$.T(444889, 'replace', 21, false), J$.T(445065, function (assert) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(445025, arguments.callee, this, arguments);
                            arguments = J$.N(445033, 'arguments', arguments, true, false, false);
                            assert = J$.N(445041, 'assert', assert, true, false, false);
                            J$.N(445049, 'a', a, false, false, false);
                            J$.N(445057, 'b', b, false, false, false);
                            var a = J$.W(444913, 'a', J$.T(444905, { a: J$.T(444897, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(444937, 'b', J$.T(444929, { a: J$.T(444921, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(445001, J$.R(444945, 'assert', assert, false, false), 'deepEqual', false)(J$.F(444977, J$.R(444953, 'extend', extend, false, true), false)(J$.R(444961, 'a', a, false, false), J$.R(444969, 'b', b, false, false)), J$.T(444993, { a: J$.T(444985, 'bar', 21, false) }, 11, false));
                            J$.M(445017, J$.R(445009, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447201, J$e);
                        } finally {
                            if (J$.Fr(447209))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(445353, J$.R(445081, 'test', test, false, true), false)(J$.T(445089, 'undefined', 21, false), J$.T(445345, function (assert) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(445305, arguments.callee, this, arguments);
                            arguments = J$.N(445313, 'arguments', arguments, true, false, false);
                            assert = J$.N(445321, 'assert', assert, true, false, false);
                            J$.N(445329, 'a', a, false, false, false);
                            J$.N(445337, 'b', b, false, false, false);
                            var a = J$.W(445113, 'a', J$.T(445105, { a: J$.T(445097, undefined, 24, false) }, 11, false), a, false, false);
                            var b = J$.W(445137, 'b', J$.T(445129, { b: J$.T(445121, 'foo', 21, false) }, 11, false), b, false, false);
                            J$.M(445209, J$.R(445145, 'assert', assert, false, false), 'deepEqual', false)(J$.F(445177, J$.R(445153, 'extend', extend, false, true), false)(J$.R(445161, 'a', a, false, false), J$.R(445169, 'b', b, false, false)), J$.T(445201, {
                                a: J$.T(445185, undefined, 24, false),
                                b: J$.T(445193, 'foo', 21, false)
                            }, 11, false));
                            J$.M(445281, J$.R(445217, 'assert', assert, false, false), 'deepEqual', false)(J$.F(445249, J$.R(445225, 'extend', extend, false, true), false)(J$.R(445233, 'b', b, false, false), J$.R(445241, 'a', a, false, false)), J$.T(445273, {
                                a: J$.T(445257, undefined, 24, false),
                                b: J$.T(445265, 'foo', 21, false)
                            }, 11, false));
                            J$.M(445297, J$.R(445289, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447217, J$e);
                        } finally {
                            if (J$.Fr(447225))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(445617, J$.R(445361, 'test', test, false, true), false)(J$.T(445369, 'handle 0', 21, false), J$.T(445609, function (assert) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(445569, arguments.callee, this, arguments);
                            arguments = J$.N(445577, 'arguments', arguments, true, false, false);
                            assert = J$.N(445585, 'assert', assert, true, false, false);
                            J$.N(445593, 'a', a, false, false, false);
                            J$.N(445601, 'b', b, false, false, false);
                            var a = J$.W(445393, 'a', J$.T(445385, { a: J$.T(445377, 'default', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(445417, 'b', J$.T(445409, { a: J$.T(445401, 0, 22, false) }, 11, false), b, false, false);
                            J$.M(445481, J$.R(445425, 'assert', assert, false, false), 'deepEqual', false)(J$.F(445457, J$.R(445433, 'extend', extend, false, true), false)(J$.R(445441, 'a', a, false, false), J$.R(445449, 'b', b, false, false)), J$.T(445473, { a: J$.T(445465, 0, 22, false) }, 11, false));
                            J$.M(445545, J$.R(445489, 'assert', assert, false, false), 'deepEqual', false)(J$.F(445521, J$.R(445497, 'extend', extend, false, true), false)(J$.R(445505, 'b', b, false, false), J$.R(445513, 'a', a, false, false)), J$.T(445537, { a: J$.T(445529, 'default', 21, false) }, 11, false));
                            J$.M(445561, J$.R(445553, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447233, J$e);
                        } finally {
                            if (J$.Fr(447241))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(445793, J$.R(445625, 'test', test, false, true), false)(J$.T(445633, 'is immutable', 21, false), J$.T(445785, function (assert) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(445753, arguments.callee, this, arguments);
                            arguments = J$.N(445761, 'arguments', arguments, true, false, false);
                            assert = J$.N(445769, 'assert', assert, true, false, false);
                            J$.N(445777, 'record', record, false, false, false);
                            var record = J$.W(445649, 'record', J$.T(445641, {}, 11, false), record, false, false);
                            J$.F(445689, J$.R(445657, 'extend', extend, false, true), false)(J$.R(445665, 'record', record, false, false), J$.T(445681, { foo: J$.T(445673, 'bar', 21, false) }, 11, false));
                            J$.M(445729, J$.R(445697, 'assert', assert, false, false), 'equal', false)(J$.G(445713, J$.R(445705, 'record', record, false, false), 'foo'), J$.T(445721, undefined, 24, false));
                            J$.M(445745, J$.R(445737, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447249, J$e);
                        } finally {
                            if (J$.Fr(447257))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(446017, J$.R(445801, 'test', test, false, true), false)(J$.T(445809, 'null as argument', 21, false), J$.T(446009, function (assert) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(445961, arguments.callee, this, arguments);
                            arguments = J$.N(445969, 'arguments', arguments, true, false, false);
                            assert = J$.N(445977, 'assert', assert, true, false, false);
                            J$.N(445985, 'a', a, false, false, false);
                            J$.N(445993, 'b', b, false, false, false);
                            J$.N(446001, 'c', c, false, false, false);
                            var a = J$.W(445833, 'a', J$.T(445825, { foo: J$.T(445817, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(445849, 'b', J$.T(445841, null, 25, false), b, false, false);
                            var c = J$.W(445865, 'c', void J$.T(445857, 0, 22, false), c, false, false);
                            J$.M(445937, J$.R(445873, 'assert', assert, false, false), 'deepEqual', false)(J$.F(445913, J$.R(445881, 'extend', extend, false, true), false)(J$.R(445889, 'b', b, false, false), J$.R(445897, 'a', a, false, false), J$.R(445905, 'c', c, false, false)), J$.T(445929, { foo: J$.T(445921, 'bar', 21, false) }, 11, false));
                            J$.M(445953, J$.R(445945, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447265, J$e);
                        } finally {
                            if (J$.Fr(447273))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(446201, J$.R(446025, 'test', test, false, true), false)(J$.T(446033, 'mutable', 21, false), J$.T(446193, function (assert) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(446161, arguments.callee, this, arguments);
                            arguments = J$.N(446169, 'arguments', arguments, true, false, false);
                            assert = J$.N(446177, 'assert', assert, true, false, false);
                            J$.N(446185, 'a', a, false, false, false);
                            var a = J$.W(446057, 'a', J$.T(446049, { foo: J$.T(446041, 'bar', 21, false) }, 11, false), a, false, false);
                            J$.F(446097, J$.R(446065, 'mutableExtend', mutableExtend, false, true), false)(J$.R(446073, 'a', a, false, false), J$.T(446089, { bar: J$.T(446081, 'baz', 21, false) }, 11, false));
                            J$.M(446137, J$.R(446105, 'assert', assert, false, false), 'equal', false)(J$.G(446121, J$.R(446113, 'a', a, false, false), 'bar'), J$.T(446129, 'baz', 21, false));
                            J$.M(446153, J$.R(446145, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447281, J$e);
                        } finally {
                            if (J$.Fr(447289))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(446441, J$.R(446209, 'test', test, false, true), false)(J$.T(446217, 'null prototype', 21, false), J$.T(446433, function (assert) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(446393, arguments.callee, this, arguments);
                            arguments = J$.N(446401, 'arguments', arguments, true, false, false);
                            assert = J$.N(446409, 'assert', assert, true, false, false);
                            J$.N(446417, 'a', a, false, false, false);
                            J$.N(446425, 'b', b, false, false, false);
                            var a = J$.W(446241, 'a', J$.T(446233, { a: J$.T(446225, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(446273, 'b', J$.M(446265, J$.I(typeof Object === 'undefined' ? Object = J$.R(446249, 'Object', undefined, true, true) : Object = J$.R(446249, 'Object', Object, true, true)), 'create', false)(J$.T(446257, null, 25, false)), b, false, false);
                            J$.P(446297, J$.R(446281, 'b', b, false, false), 'b', J$.T(446289, 'bar', 21, false));
                            J$.M(446369, J$.R(446305, 'assert', assert, false, false), 'deepEqual', false)(J$.F(446337, J$.R(446313, 'extend', extend, false, true), false)(J$.R(446321, 'a', a, false, false), J$.R(446329, 'b', b, false, false)), J$.T(446361, {
                                a: J$.T(446345, 'foo', 21, false),
                                b: J$.T(446353, 'bar', 21, false)
                            }, 11, false));
                            J$.M(446385, J$.R(446377, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447297, J$e);
                        } finally {
                            if (J$.Fr(447305))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(446681, J$.R(446449, 'test', test, false, true), false)(J$.T(446457, 'null prototype mutable', 21, false), J$.T(446673, function (assert) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(446633, arguments.callee, this, arguments);
                            arguments = J$.N(446641, 'arguments', arguments, true, false, false);
                            assert = J$.N(446649, 'assert', assert, true, false, false);
                            J$.N(446657, 'a', a, false, false, false);
                            J$.N(446665, 'b', b, false, false, false);
                            var a = J$.W(446481, 'a', J$.T(446473, { foo: J$.T(446465, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(446513, 'b', J$.M(446505, J$.I(typeof Object === 'undefined' ? Object = J$.R(446489, 'Object', undefined, true, true) : Object = J$.R(446489, 'Object', Object, true, true)), 'create', false)(J$.T(446497, null, 25, false)), b, false, false);
                            J$.P(446537, J$.R(446521, 'b', b, false, false), 'bar', J$.T(446529, 'baz', 21, false));
                            J$.F(446569, J$.R(446545, 'mutableExtend', mutableExtend, false, true), false)(J$.R(446553, 'a', a, false, false), J$.R(446561, 'b', b, false, false));
                            J$.M(446609, J$.R(446577, 'assert', assert, false, false), 'equal', false)(J$.G(446593, J$.R(446585, 'a', a, false, false), 'bar'), J$.T(446601, 'baz', 21, false));
                            J$.M(446625, J$.R(446617, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447313, J$e);
                        } finally {
                            if (J$.Fr(447321))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(446913, J$.R(446689, 'test', test, false, true), false)(J$.T(446697, 'prototype pollution', 21, false), J$.T(446905, function (assert) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(446865, arguments.callee, this, arguments);
                            arguments = J$.N(446873, 'arguments', arguments, true, false, false);
                            assert = J$.N(446881, 'assert', assert, true, false, false);
                            J$.N(446889, 'a', a, false, false, false);
                            J$.N(446897, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(446713, 'a', J$.T(446705, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(446729, 'maliciousPayload', J$.T(446721, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(446769, J$.R(446737, 'assert', assert, false, false), 'strictEqual', false)(J$.G(446753, J$.R(446745, 'a', a, false, false), 'oops'), J$.T(446761, undefined, 24, false));
                            J$.F(446801, J$.R(446777, 'extend', extend, false, true), false)(J$.T(446785, {}, 11, false), J$.R(446793, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(446841, J$.R(446809, 'assert', assert, false, false), 'strictEqual', false)(J$.G(446825, J$.R(446817, 'a', a, false, false), 'oops'), J$.T(446833, undefined, 24, false));
                            J$.M(446857, J$.R(446849, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447329, J$e);
                        } finally {
                            if (J$.Fr(447337))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(447145, J$.R(446921, 'test', test, false, true), false)(J$.T(446929, 'prototype pollution mutable', 21, false), J$.T(447137, function (assert) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(447097, arguments.callee, this, arguments);
                            arguments = J$.N(447105, 'arguments', arguments, true, false, false);
                            assert = J$.N(447113, 'assert', assert, true, false, false);
                            J$.N(447121, 'a', a, false, false, false);
                            J$.N(447129, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(446945, 'a', J$.T(446937, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(446961, 'maliciousPayload', J$.T(446953, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(447001, J$.R(446969, 'assert', assert, false, false), 'strictEqual', false)(J$.G(446985, J$.R(446977, 'a', a, false, false), 'oops'), J$.T(446993, undefined, 24, false));
                            J$.F(447033, J$.R(447009, 'mutableExtend', mutableExtend, false, true), false)(J$.T(447017, {}, 11, false), J$.R(447025, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(447073, J$.R(447041, 'assert', assert, false, false), 'strictEqual', false)(J$.G(447057, J$.R(447049, 'a', a, false, false), 'oops'), J$.T(447065, undefined, 24, false));
                            J$.M(447089, J$.R(447081, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(447345, J$e);
                        } finally {
                            if (J$.Fr(447353))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(447361, J$e);
        } finally {
            if (J$.Sr(447369))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

