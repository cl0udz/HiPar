J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(490025, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/xtend/test.js');
            J$.N(490033, 'test', test, false, false, false);
            J$.N(490041, 'extend', extend, false, false, false);
            J$.N(490049, 'mutableExtend', mutableExtend, false, false, false);
            J$.T(487417, 'use strict', 21, false);
            J$.F(487441, J$.I(typeof require === 'undefined' ? require = J$.R(487425, 'require', undefined, true, true) : require = J$.R(487425, 'require', require, true, true)), false)(J$.T(487433, 'core-js/modules/es.object.create', 21, false));
            var test = J$.W(487473, 'test', J$.F(487465, J$.I(typeof require === 'undefined' ? require = J$.R(487449, 'require', undefined, true, true) : require = J$.R(487449, 'require', require, true, true)), false)(J$.T(487457, 'tape', 21, false)), test, false, true);
            var extend = J$.W(487505, 'extend', J$.F(487497, J$.I(typeof require === 'undefined' ? require = J$.R(487481, 'require', undefined, true, true) : require = J$.R(487481, 'require', require, true, true)), false)(J$.T(487489, './', 21, false)), extend, false, true);
            var mutableExtend = J$.W(487537, 'mutableExtend', J$.F(487529, J$.I(typeof require === 'undefined' ? require = J$.R(487513, 'require', undefined, true, true) : require = J$.R(487513, 'require', require, true, true)), false)(J$.T(487521, './mutable', 21, false)), mutableExtend, false, true);
            J$.F(487745, J$.R(487545, 'test', test, false, true), false)(J$.T(487553, 'merge', 21, false), J$.T(487737, function (assert) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(487697, arguments.callee, this, arguments);
                            arguments = J$.N(487705, 'arguments', arguments, true, false, false);
                            assert = J$.N(487713, 'assert', assert, true, false, false);
                            J$.N(487721, 'a', a, false, false, false);
                            J$.N(487729, 'b', b, false, false, false);
                            var a = J$.W(487577, 'a', J$.T(487569, { a: J$.T(487561, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(487601, 'b', J$.T(487593, { b: J$.T(487585, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(487673, J$.R(487609, 'assert', assert, false, false), 'deepEqual', false)(J$.F(487641, J$.R(487617, 'extend', extend, false, true), false)(J$.R(487625, 'a', a, false, false), J$.R(487633, 'b', b, false, false)), J$.T(487665, {
                                a: J$.T(487649, 'foo', 21, false),
                                b: J$.T(487657, 'bar', 21, false)
                            }, 11, false));
                            J$.M(487689, J$.R(487681, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490057, J$e);
                        } finally {
                            if (J$.Fr(490065))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(487945, J$.R(487753, 'test', test, false, true), false)(J$.T(487761, 'replace', 21, false), J$.T(487937, function (assert) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(487897, arguments.callee, this, arguments);
                            arguments = J$.N(487905, 'arguments', arguments, true, false, false);
                            assert = J$.N(487913, 'assert', assert, true, false, false);
                            J$.N(487921, 'a', a, false, false, false);
                            J$.N(487929, 'b', b, false, false, false);
                            var a = J$.W(487785, 'a', J$.T(487777, { a: J$.T(487769, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(487809, 'b', J$.T(487801, { a: J$.T(487793, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(487873, J$.R(487817, 'assert', assert, false, false), 'deepEqual', false)(J$.F(487849, J$.R(487825, 'extend', extend, false, true), false)(J$.R(487833, 'a', a, false, false), J$.R(487841, 'b', b, false, false)), J$.T(487865, { a: J$.T(487857, 'bar', 21, false) }, 11, false));
                            J$.M(487889, J$.R(487881, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490073, J$e);
                        } finally {
                            if (J$.Fr(490081))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(488225, J$.R(487953, 'test', test, false, true), false)(J$.T(487961, 'undefined', 21, false), J$.T(488217, function (assert) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(488177, arguments.callee, this, arguments);
                            arguments = J$.N(488185, 'arguments', arguments, true, false, false);
                            assert = J$.N(488193, 'assert', assert, true, false, false);
                            J$.N(488201, 'a', a, false, false, false);
                            J$.N(488209, 'b', b, false, false, false);
                            var a = J$.W(487985, 'a', J$.T(487977, { a: J$.T(487969, undefined, 24, false) }, 11, false), a, false, false);
                            var b = J$.W(488009, 'b', J$.T(488001, { b: J$.T(487993, 'foo', 21, false) }, 11, false), b, false, false);
                            J$.M(488081, J$.R(488017, 'assert', assert, false, false), 'deepEqual', false)(J$.F(488049, J$.R(488025, 'extend', extend, false, true), false)(J$.R(488033, 'a', a, false, false), J$.R(488041, 'b', b, false, false)), J$.T(488073, {
                                a: J$.T(488057, undefined, 24, false),
                                b: J$.T(488065, 'foo', 21, false)
                            }, 11, false));
                            J$.M(488153, J$.R(488089, 'assert', assert, false, false), 'deepEqual', false)(J$.F(488121, J$.R(488097, 'extend', extend, false, true), false)(J$.R(488105, 'b', b, false, false), J$.R(488113, 'a', a, false, false)), J$.T(488145, {
                                a: J$.T(488129, undefined, 24, false),
                                b: J$.T(488137, 'foo', 21, false)
                            }, 11, false));
                            J$.M(488169, J$.R(488161, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490089, J$e);
                        } finally {
                            if (J$.Fr(490097))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(488489, J$.R(488233, 'test', test, false, true), false)(J$.T(488241, 'handle 0', 21, false), J$.T(488481, function (assert) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(488441, arguments.callee, this, arguments);
                            arguments = J$.N(488449, 'arguments', arguments, true, false, false);
                            assert = J$.N(488457, 'assert', assert, true, false, false);
                            J$.N(488465, 'a', a, false, false, false);
                            J$.N(488473, 'b', b, false, false, false);
                            var a = J$.W(488265, 'a', J$.T(488257, { a: J$.T(488249, 'default', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(488289, 'b', J$.T(488281, { a: J$.T(488273, 0, 22, false) }, 11, false), b, false, false);
                            J$.M(488353, J$.R(488297, 'assert', assert, false, false), 'deepEqual', false)(J$.F(488329, J$.R(488305, 'extend', extend, false, true), false)(J$.R(488313, 'a', a, false, false), J$.R(488321, 'b', b, false, false)), J$.T(488345, { a: J$.T(488337, 0, 22, false) }, 11, false));
                            J$.M(488417, J$.R(488361, 'assert', assert, false, false), 'deepEqual', false)(J$.F(488393, J$.R(488369, 'extend', extend, false, true), false)(J$.R(488377, 'b', b, false, false), J$.R(488385, 'a', a, false, false)), J$.T(488409, { a: J$.T(488401, 'default', 21, false) }, 11, false));
                            J$.M(488433, J$.R(488425, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490105, J$e);
                        } finally {
                            if (J$.Fr(490113))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(488665, J$.R(488497, 'test', test, false, true), false)(J$.T(488505, 'is immutable', 21, false), J$.T(488657, function (assert) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(488625, arguments.callee, this, arguments);
                            arguments = J$.N(488633, 'arguments', arguments, true, false, false);
                            assert = J$.N(488641, 'assert', assert, true, false, false);
                            J$.N(488649, 'record', record, false, false, false);
                            var record = J$.W(488521, 'record', J$.T(488513, {}, 11, false), record, false, false);
                            J$.F(488561, J$.R(488529, 'extend', extend, false, true), false)(J$.R(488537, 'record', record, false, false), J$.T(488553, { foo: J$.T(488545, 'bar', 21, false) }, 11, false));
                            J$.M(488601, J$.R(488569, 'assert', assert, false, false), 'equal', false)(J$.G(488585, J$.R(488577, 'record', record, false, false), 'foo'), J$.T(488593, undefined, 24, false));
                            J$.M(488617, J$.R(488609, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490121, J$e);
                        } finally {
                            if (J$.Fr(490129))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(488889, J$.R(488673, 'test', test, false, true), false)(J$.T(488681, 'null as argument', 21, false), J$.T(488881, function (assert) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(488833, arguments.callee, this, arguments);
                            arguments = J$.N(488841, 'arguments', arguments, true, false, false);
                            assert = J$.N(488849, 'assert', assert, true, false, false);
                            J$.N(488857, 'a', a, false, false, false);
                            J$.N(488865, 'b', b, false, false, false);
                            J$.N(488873, 'c', c, false, false, false);
                            var a = J$.W(488705, 'a', J$.T(488697, { foo: J$.T(488689, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(488721, 'b', J$.T(488713, null, 25, false), b, false, false);
                            var c = J$.W(488737, 'c', void J$.T(488729, 0, 22, false), c, false, false);
                            J$.M(488809, J$.R(488745, 'assert', assert, false, false), 'deepEqual', false)(J$.F(488785, J$.R(488753, 'extend', extend, false, true), false)(J$.R(488761, 'b', b, false, false), J$.R(488769, 'a', a, false, false), J$.R(488777, 'c', c, false, false)), J$.T(488801, { foo: J$.T(488793, 'bar', 21, false) }, 11, false));
                            J$.M(488825, J$.R(488817, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490137, J$e);
                        } finally {
                            if (J$.Fr(490145))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(489073, J$.R(488897, 'test', test, false, true), false)(J$.T(488905, 'mutable', 21, false), J$.T(489065, function (assert) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(489033, arguments.callee, this, arguments);
                            arguments = J$.N(489041, 'arguments', arguments, true, false, false);
                            assert = J$.N(489049, 'assert', assert, true, false, false);
                            J$.N(489057, 'a', a, false, false, false);
                            var a = J$.W(488929, 'a', J$.T(488921, { foo: J$.T(488913, 'bar', 21, false) }, 11, false), a, false, false);
                            J$.F(488969, J$.R(488937, 'mutableExtend', mutableExtend, false, true), false)(J$.R(488945, 'a', a, false, false), J$.T(488961, { bar: J$.T(488953, 'baz', 21, false) }, 11, false));
                            J$.M(489009, J$.R(488977, 'assert', assert, false, false), 'equal', false)(J$.G(488993, J$.R(488985, 'a', a, false, false), 'bar'), J$.T(489001, 'baz', 21, false));
                            J$.M(489025, J$.R(489017, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490153, J$e);
                        } finally {
                            if (J$.Fr(490161))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(489313, J$.R(489081, 'test', test, false, true), false)(J$.T(489089, 'null prototype', 21, false), J$.T(489305, function (assert) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(489265, arguments.callee, this, arguments);
                            arguments = J$.N(489273, 'arguments', arguments, true, false, false);
                            assert = J$.N(489281, 'assert', assert, true, false, false);
                            J$.N(489289, 'a', a, false, false, false);
                            J$.N(489297, 'b', b, false, false, false);
                            var a = J$.W(489113, 'a', J$.T(489105, { a: J$.T(489097, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(489145, 'b', J$.M(489137, J$.I(typeof Object === 'undefined' ? Object = J$.R(489121, 'Object', undefined, true, true) : Object = J$.R(489121, 'Object', Object, true, true)), 'create', false)(J$.T(489129, null, 25, false)), b, false, false);
                            J$.P(489169, J$.R(489153, 'b', b, false, false), 'b', J$.T(489161, 'bar', 21, false));
                            J$.M(489241, J$.R(489177, 'assert', assert, false, false), 'deepEqual', false)(J$.F(489209, J$.R(489185, 'extend', extend, false, true), false)(J$.R(489193, 'a', a, false, false), J$.R(489201, 'b', b, false, false)), J$.T(489233, {
                                a: J$.T(489217, 'foo', 21, false),
                                b: J$.T(489225, 'bar', 21, false)
                            }, 11, false));
                            J$.M(489257, J$.R(489249, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490169, J$e);
                        } finally {
                            if (J$.Fr(490177))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(489553, J$.R(489321, 'test', test, false, true), false)(J$.T(489329, 'null prototype mutable', 21, false), J$.T(489545, function (assert) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(489505, arguments.callee, this, arguments);
                            arguments = J$.N(489513, 'arguments', arguments, true, false, false);
                            assert = J$.N(489521, 'assert', assert, true, false, false);
                            J$.N(489529, 'a', a, false, false, false);
                            J$.N(489537, 'b', b, false, false, false);
                            var a = J$.W(489353, 'a', J$.T(489345, { foo: J$.T(489337, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(489385, 'b', J$.M(489377, J$.I(typeof Object === 'undefined' ? Object = J$.R(489361, 'Object', undefined, true, true) : Object = J$.R(489361, 'Object', Object, true, true)), 'create', false)(J$.T(489369, null, 25, false)), b, false, false);
                            J$.P(489409, J$.R(489393, 'b', b, false, false), 'bar', J$.T(489401, 'baz', 21, false));
                            J$.F(489441, J$.R(489417, 'mutableExtend', mutableExtend, false, true), false)(J$.R(489425, 'a', a, false, false), J$.R(489433, 'b', b, false, false));
                            J$.M(489481, J$.R(489449, 'assert', assert, false, false), 'equal', false)(J$.G(489465, J$.R(489457, 'a', a, false, false), 'bar'), J$.T(489473, 'baz', 21, false));
                            J$.M(489497, J$.R(489489, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490185, J$e);
                        } finally {
                            if (J$.Fr(490193))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(489785, J$.R(489561, 'test', test, false, true), false)(J$.T(489569, 'prototype pollution', 21, false), J$.T(489777, function (assert) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(489737, arguments.callee, this, arguments);
                            arguments = J$.N(489745, 'arguments', arguments, true, false, false);
                            assert = J$.N(489753, 'assert', assert, true, false, false);
                            J$.N(489761, 'a', a, false, false, false);
                            J$.N(489769, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(489585, 'a', J$.T(489577, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(489601, 'maliciousPayload', J$.T(489593, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(489641, J$.R(489609, 'assert', assert, false, false), 'strictEqual', false)(J$.G(489625, J$.R(489617, 'a', a, false, false), 'oops'), J$.T(489633, undefined, 24, false));
                            J$.F(489673, J$.R(489649, 'extend', extend, false, true), false)(J$.T(489657, {}, 11, false), J$.R(489665, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(489713, J$.R(489681, 'assert', assert, false, false), 'strictEqual', false)(J$.G(489697, J$.R(489689, 'a', a, false, false), 'oops'), J$.T(489705, undefined, 24, false));
                            J$.M(489729, J$.R(489721, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490201, J$e);
                        } finally {
                            if (J$.Fr(490209))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(490017, J$.R(489793, 'test', test, false, true), false)(J$.T(489801, 'prototype pollution mutable', 21, false), J$.T(490009, function (assert) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(489969, arguments.callee, this, arguments);
                            arguments = J$.N(489977, 'arguments', arguments, true, false, false);
                            assert = J$.N(489985, 'assert', assert, true, false, false);
                            J$.N(489993, 'a', a, false, false, false);
                            J$.N(490001, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(489817, 'a', J$.T(489809, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(489833, 'maliciousPayload', J$.T(489825, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(489873, J$.R(489841, 'assert', assert, false, false), 'strictEqual', false)(J$.G(489857, J$.R(489849, 'a', a, false, false), 'oops'), J$.T(489865, undefined, 24, false));
                            J$.F(489905, J$.R(489881, 'mutableExtend', mutableExtend, false, true), false)(J$.T(489889, {}, 11, false), J$.R(489897, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(489945, J$.R(489913, 'assert', assert, false, false), 'strictEqual', false)(J$.G(489929, J$.R(489921, 'a', a, false, false), 'oops'), J$.T(489937, undefined, 24, false));
                            J$.M(489961, J$.R(489953, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(490217, J$e);
                        } finally {
                            if (J$.Fr(490225))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(490233, J$e);
        } finally {
            if (J$.Sr(490241))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

