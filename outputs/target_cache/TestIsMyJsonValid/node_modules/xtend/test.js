J$.noInstrEval = false;
jalangiLabel11:
    while (true) {
        try {
            J$.Se(4405657, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/xtend/test.js');
            J$.N(4405665, 'test', test, false, false, false);
            J$.N(4405673, 'extend', extend, false, false, false);
            J$.N(4405681, 'mutableExtend', mutableExtend, false, false, false);
            J$.T(4403049, 'use strict', 21, false);
            J$.F(4403073, J$.I(typeof require === 'undefined' ? require = J$.R(4403057, 'require', undefined, true, true) : require = J$.R(4403057, 'require', require, true, true)), false)(J$.T(4403065, 'core-js/modules/es.object.create', 21, false));
            var test = J$.W(4403105, 'test', J$.F(4403097, J$.I(typeof require === 'undefined' ? require = J$.R(4403081, 'require', undefined, true, true) : require = J$.R(4403081, 'require', require, true, true)), false)(J$.T(4403089, 'tape', 21, false)), test, false, true);
            var extend = J$.W(4403137, 'extend', J$.F(4403129, J$.I(typeof require === 'undefined' ? require = J$.R(4403113, 'require', undefined, true, true) : require = J$.R(4403113, 'require', require, true, true)), false)(J$.T(4403121, './', 21, false)), extend, false, true);
            var mutableExtend = J$.W(4403169, 'mutableExtend', J$.F(4403161, J$.I(typeof require === 'undefined' ? require = J$.R(4403145, 'require', undefined, true, true) : require = J$.R(4403145, 'require', require, true, true)), false)(J$.T(4403153, './mutable', 21, false)), mutableExtend, false, true);
            J$.F(4403377, J$.R(4403177, 'test', test, false, true), false)(J$.T(4403185, 'merge', 21, false), J$.T(4403369, function (assert) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4403329, arguments.callee, this, arguments);
                            arguments = J$.N(4403337, 'arguments', arguments, true, false, false);
                            assert = J$.N(4403345, 'assert', assert, true, false, false);
                            J$.N(4403353, 'a', a, false, false, false);
                            J$.N(4403361, 'b', b, false, false, false);
                            var a = J$.W(4403209, 'a', J$.T(4403201, { a: J$.T(4403193, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4403233, 'b', J$.T(4403225, { b: J$.T(4403217, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(4403305, J$.R(4403241, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4403273, J$.R(4403249, 'extend', extend, false, true), false)(J$.R(4403257, 'a', a, false, false), J$.R(4403265, 'b', b, false, false)), J$.T(4403297, {
                                a: J$.T(4403281, 'foo', 21, false),
                                b: J$.T(4403289, 'bar', 21, false)
                            }, 11, false));
                            J$.M(4403321, J$.R(4403313, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405689, J$e);
                        } finally {
                            if (J$.Fr(4405697))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4403577, J$.R(4403385, 'test', test, false, true), false)(J$.T(4403393, 'replace', 21, false), J$.T(4403569, function (assert) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4403529, arguments.callee, this, arguments);
                            arguments = J$.N(4403537, 'arguments', arguments, true, false, false);
                            assert = J$.N(4403545, 'assert', assert, true, false, false);
                            J$.N(4403553, 'a', a, false, false, false);
                            J$.N(4403561, 'b', b, false, false, false);
                            var a = J$.W(4403417, 'a', J$.T(4403409, { a: J$.T(4403401, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4403441, 'b', J$.T(4403433, { a: J$.T(4403425, 'bar', 21, false) }, 11, false), b, false, false);
                            J$.M(4403505, J$.R(4403449, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4403481, J$.R(4403457, 'extend', extend, false, true), false)(J$.R(4403465, 'a', a, false, false), J$.R(4403473, 'b', b, false, false)), J$.T(4403497, { a: J$.T(4403489, 'bar', 21, false) }, 11, false));
                            J$.M(4403521, J$.R(4403513, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405705, J$e);
                        } finally {
                            if (J$.Fr(4405713))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4403857, J$.R(4403585, 'test', test, false, true), false)(J$.T(4403593, 'undefined', 21, false), J$.T(4403849, function (assert) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4403809, arguments.callee, this, arguments);
                            arguments = J$.N(4403817, 'arguments', arguments, true, false, false);
                            assert = J$.N(4403825, 'assert', assert, true, false, false);
                            J$.N(4403833, 'a', a, false, false, false);
                            J$.N(4403841, 'b', b, false, false, false);
                            var a = J$.W(4403617, 'a', J$.T(4403609, { a: J$.T(4403601, undefined, 24, false) }, 11, false), a, false, false);
                            var b = J$.W(4403641, 'b', J$.T(4403633, { b: J$.T(4403625, 'foo', 21, false) }, 11, false), b, false, false);
                            J$.M(4403713, J$.R(4403649, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4403681, J$.R(4403657, 'extend', extend, false, true), false)(J$.R(4403665, 'a', a, false, false), J$.R(4403673, 'b', b, false, false)), J$.T(4403705, {
                                a: J$.T(4403689, undefined, 24, false),
                                b: J$.T(4403697, 'foo', 21, false)
                            }, 11, false));
                            J$.M(4403785, J$.R(4403721, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4403753, J$.R(4403729, 'extend', extend, false, true), false)(J$.R(4403737, 'b', b, false, false), J$.R(4403745, 'a', a, false, false)), J$.T(4403777, {
                                a: J$.T(4403761, undefined, 24, false),
                                b: J$.T(4403769, 'foo', 21, false)
                            }, 11, false));
                            J$.M(4403801, J$.R(4403793, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405721, J$e);
                        } finally {
                            if (J$.Fr(4405729))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4404121, J$.R(4403865, 'test', test, false, true), false)(J$.T(4403873, 'handle 0', 21, false), J$.T(4404113, function (assert) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4404073, arguments.callee, this, arguments);
                            arguments = J$.N(4404081, 'arguments', arguments, true, false, false);
                            assert = J$.N(4404089, 'assert', assert, true, false, false);
                            J$.N(4404097, 'a', a, false, false, false);
                            J$.N(4404105, 'b', b, false, false, false);
                            var a = J$.W(4403897, 'a', J$.T(4403889, { a: J$.T(4403881, 'default', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4403921, 'b', J$.T(4403913, { a: J$.T(4403905, 0, 22, false) }, 11, false), b, false, false);
                            J$.M(4403985, J$.R(4403929, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4403961, J$.R(4403937, 'extend', extend, false, true), false)(J$.R(4403945, 'a', a, false, false), J$.R(4403953, 'b', b, false, false)), J$.T(4403977, { a: J$.T(4403969, 0, 22, false) }, 11, false));
                            J$.M(4404049, J$.R(4403993, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4404025, J$.R(4404001, 'extend', extend, false, true), false)(J$.R(4404009, 'b', b, false, false), J$.R(4404017, 'a', a, false, false)), J$.T(4404041, { a: J$.T(4404033, 'default', 21, false) }, 11, false));
                            J$.M(4404065, J$.R(4404057, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405737, J$e);
                        } finally {
                            if (J$.Fr(4405745))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4404297, J$.R(4404129, 'test', test, false, true), false)(J$.T(4404137, 'is immutable', 21, false), J$.T(4404289, function (assert) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4404257, arguments.callee, this, arguments);
                            arguments = J$.N(4404265, 'arguments', arguments, true, false, false);
                            assert = J$.N(4404273, 'assert', assert, true, false, false);
                            J$.N(4404281, 'record', record, false, false, false);
                            var record = J$.W(4404153, 'record', J$.T(4404145, {}, 11, false), record, false, false);
                            J$.F(4404193, J$.R(4404161, 'extend', extend, false, true), false)(J$.R(4404169, 'record', record, false, false), J$.T(4404185, { foo: J$.T(4404177, 'bar', 21, false) }, 11, false));
                            J$.M(4404233, J$.R(4404201, 'assert', assert, false, false), 'equal', false)(J$.G(4404217, J$.R(4404209, 'record', record, false, false), 'foo'), J$.T(4404225, undefined, 24, false));
                            J$.M(4404249, J$.R(4404241, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405753, J$e);
                        } finally {
                            if (J$.Fr(4405761))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4404521, J$.R(4404305, 'test', test, false, true), false)(J$.T(4404313, 'null as argument', 21, false), J$.T(4404513, function (assert) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4404465, arguments.callee, this, arguments);
                            arguments = J$.N(4404473, 'arguments', arguments, true, false, false);
                            assert = J$.N(4404481, 'assert', assert, true, false, false);
                            J$.N(4404489, 'a', a, false, false, false);
                            J$.N(4404497, 'b', b, false, false, false);
                            J$.N(4404505, 'c', c, false, false, false);
                            var a = J$.W(4404337, 'a', J$.T(4404329, { foo: J$.T(4404321, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4404353, 'b', J$.T(4404345, null, 25, false), b, false, false);
                            var c = J$.W(4404369, 'c', void J$.T(4404361, 0, 22, false), c, false, false);
                            J$.M(4404441, J$.R(4404377, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4404417, J$.R(4404385, 'extend', extend, false, true), false)(J$.R(4404393, 'b', b, false, false), J$.R(4404401, 'a', a, false, false), J$.R(4404409, 'c', c, false, false)), J$.T(4404433, { foo: J$.T(4404425, 'bar', 21, false) }, 11, false));
                            J$.M(4404457, J$.R(4404449, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405769, J$e);
                        } finally {
                            if (J$.Fr(4405777))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4404705, J$.R(4404529, 'test', test, false, true), false)(J$.T(4404537, 'mutable', 21, false), J$.T(4404697, function (assert) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4404665, arguments.callee, this, arguments);
                            arguments = J$.N(4404673, 'arguments', arguments, true, false, false);
                            assert = J$.N(4404681, 'assert', assert, true, false, false);
                            J$.N(4404689, 'a', a, false, false, false);
                            var a = J$.W(4404561, 'a', J$.T(4404553, { foo: J$.T(4404545, 'bar', 21, false) }, 11, false), a, false, false);
                            J$.F(4404601, J$.R(4404569, 'mutableExtend', mutableExtend, false, true), false)(J$.R(4404577, 'a', a, false, false), J$.T(4404593, { bar: J$.T(4404585, 'baz', 21, false) }, 11, false));
                            J$.M(4404641, J$.R(4404609, 'assert', assert, false, false), 'equal', false)(J$.G(4404625, J$.R(4404617, 'a', a, false, false), 'bar'), J$.T(4404633, 'baz', 21, false));
                            J$.M(4404657, J$.R(4404649, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405785, J$e);
                        } finally {
                            if (J$.Fr(4405793))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4404945, J$.R(4404713, 'test', test, false, true), false)(J$.T(4404721, 'null prototype', 21, false), J$.T(4404937, function (assert) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(4404897, arguments.callee, this, arguments);
                            arguments = J$.N(4404905, 'arguments', arguments, true, false, false);
                            assert = J$.N(4404913, 'assert', assert, true, false, false);
                            J$.N(4404921, 'a', a, false, false, false);
                            J$.N(4404929, 'b', b, false, false, false);
                            var a = J$.W(4404745, 'a', J$.T(4404737, { a: J$.T(4404729, 'foo', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4404777, 'b', J$.M(4404769, J$.I(typeof Object === 'undefined' ? Object = J$.R(4404753, 'Object', undefined, true, true) : Object = J$.R(4404753, 'Object', Object, true, true)), 'create', false)(J$.T(4404761, null, 25, false)), b, false, false);
                            J$.P(4404801, J$.R(4404785, 'b', b, false, false), 'b', J$.T(4404793, 'bar', 21, false));
                            J$.M(4404873, J$.R(4404809, 'assert', assert, false, false), 'deepEqual', false)(J$.F(4404841, J$.R(4404817, 'extend', extend, false, true), false)(J$.R(4404825, 'a', a, false, false), J$.R(4404833, 'b', b, false, false)), J$.T(4404865, {
                                a: J$.T(4404849, 'foo', 21, false),
                                b: J$.T(4404857, 'bar', 21, false)
                            }, 11, false));
                            J$.M(4404889, J$.R(4404881, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405801, J$e);
                        } finally {
                            if (J$.Fr(4405809))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4405185, J$.R(4404953, 'test', test, false, true), false)(J$.T(4404961, 'null prototype mutable', 21, false), J$.T(4405177, function (assert) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(4405137, arguments.callee, this, arguments);
                            arguments = J$.N(4405145, 'arguments', arguments, true, false, false);
                            assert = J$.N(4405153, 'assert', assert, true, false, false);
                            J$.N(4405161, 'a', a, false, false, false);
                            J$.N(4405169, 'b', b, false, false, false);
                            var a = J$.W(4404985, 'a', J$.T(4404977, { foo: J$.T(4404969, 'bar', 21, false) }, 11, false), a, false, false);
                            var b = J$.W(4405017, 'b', J$.M(4405009, J$.I(typeof Object === 'undefined' ? Object = J$.R(4404993, 'Object', undefined, true, true) : Object = J$.R(4404993, 'Object', Object, true, true)), 'create', false)(J$.T(4405001, null, 25, false)), b, false, false);
                            J$.P(4405041, J$.R(4405025, 'b', b, false, false), 'bar', J$.T(4405033, 'baz', 21, false));
                            J$.F(4405073, J$.R(4405049, 'mutableExtend', mutableExtend, false, true), false)(J$.R(4405057, 'a', a, false, false), J$.R(4405065, 'b', b, false, false));
                            J$.M(4405113, J$.R(4405081, 'assert', assert, false, false), 'equal', false)(J$.G(4405097, J$.R(4405089, 'a', a, false, false), 'bar'), J$.T(4405105, 'baz', 21, false));
                            J$.M(4405129, J$.R(4405121, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405817, J$e);
                        } finally {
                            if (J$.Fr(4405825))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4405417, J$.R(4405193, 'test', test, false, true), false)(J$.T(4405201, 'prototype pollution', 21, false), J$.T(4405409, function (assert) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(4405369, arguments.callee, this, arguments);
                            arguments = J$.N(4405377, 'arguments', arguments, true, false, false);
                            assert = J$.N(4405385, 'assert', assert, true, false, false);
                            J$.N(4405393, 'a', a, false, false, false);
                            J$.N(4405401, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(4405217, 'a', J$.T(4405209, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(4405233, 'maliciousPayload', J$.T(4405225, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(4405273, J$.R(4405241, 'assert', assert, false, false), 'strictEqual', false)(J$.G(4405257, J$.R(4405249, 'a', a, false, false), 'oops'), J$.T(4405265, undefined, 24, false));
                            J$.F(4405305, J$.R(4405281, 'extend', extend, false, true), false)(J$.T(4405289, {}, 11, false), J$.R(4405297, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(4405345, J$.R(4405313, 'assert', assert, false, false), 'strictEqual', false)(J$.G(4405329, J$.R(4405321, 'a', a, false, false), 'oops'), J$.T(4405337, undefined, 24, false));
                            J$.M(4405361, J$.R(4405353, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405833, J$e);
                        } finally {
                            if (J$.Fr(4405841))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.F(4405649, J$.R(4405425, 'test', test, false, true), false)(J$.T(4405433, 'prototype pollution mutable', 21, false), J$.T(4405641, function (assert) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(4405601, arguments.callee, this, arguments);
                            arguments = J$.N(4405609, 'arguments', arguments, true, false, false);
                            assert = J$.N(4405617, 'assert', assert, true, false, false);
                            J$.N(4405625, 'a', a, false, false, false);
                            J$.N(4405633, 'maliciousPayload', maliciousPayload, false, false, false);
                            var a = J$.W(4405449, 'a', J$.T(4405441, {}, 11, false), a, false, false);
                            var maliciousPayload = J$.W(4405465, 'maliciousPayload', J$.T(4405457, '{"__proto__":{"oops":"It works!"}}', 21, false), maliciousPayload, false, false);
                            J$.M(4405505, J$.R(4405473, 'assert', assert, false, false), 'strictEqual', false)(J$.G(4405489, J$.R(4405481, 'a', a, false, false), 'oops'), J$.T(4405497, undefined, 24, false));
                            J$.F(4405537, J$.R(4405513, 'mutableExtend', mutableExtend, false, true), false)(J$.T(4405521, {}, 11, false), J$.R(4405529, 'maliciousPayload', maliciousPayload, false, false));
                            J$.M(4405577, J$.R(4405545, 'assert', assert, false, false), 'strictEqual', false)(J$.G(4405561, J$.R(4405553, 'a', a, false, false), 'oops'), J$.T(4405569, undefined, 24, false));
                            J$.M(4405593, J$.R(4405585, 'assert', assert, false, false), 'end', false)();
                        } catch (J$e) {
                            J$.Ex(4405849, J$e);
                        } finally {
                            if (J$.Fr(4405857))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4405865, J$e);
        } finally {
            if (J$.Sr(4405873))
                continue jalangiLabel11;
            else
                break jalangiLabel11;
        }
    }
// JALANGI DO NOT INSTRUMENT

