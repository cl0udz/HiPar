J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(4226505, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/negotiator/lib/charset.js');
            function parseAcceptCharset(accept) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4224649, arguments.callee, this, arguments);
                            arguments = J$.N(4224657, 'arguments', arguments, true, false, false);
                            accept = J$.N(4224665, 'accept', accept, true, false, false);
                            J$.N(4224673, 'accepts', accepts, false, false, false);
                            J$.N(4224681, 'i', i, false, false, false);
                            J$.N(4224689, 'j', j, false, false, false);
                            J$.N(4224697, 'charset', charset, false, false, false);
                            var accepts = J$.W(4224417, 'accepts', J$.M(4224409, J$.R(4224393, 'accept', accept, false, false), 'split', false)(J$.T(4224401, ',', 21, false)), accepts, false, false);
                            for (var i = J$.W(4224441, 'i', J$.T(4224425, 0, 22, false), i, false, false), j = J$.W(4224449, 'j', J$.T(4224433, 0, 22, false), j, false, false); J$.C(223816, J$.B(410626, '<', J$.R(4224457, 'i', i, false, false), J$.G(4224473, J$.R(4224465, 'accepts', accepts, false, false), 'length'))); J$.B(410650, '-', i = J$.W(4224489, 'i', J$.B(410642, '+', J$.U(410634, '+', J$.R(4224481, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var charset = J$.W(4224553, 'charset', J$.F(4224545, J$.R(4224497, 'parseCharset', parseCharset, false, true), false)(J$.M(4224529, J$.G(4224521, J$.R(4224505, 'accepts', accepts, false, false), J$.R(4224513, 'i', i, false, false)), 'trim', false)(), J$.R(4224537, 'i', i, false, false)), charset, false, false);
                                if (J$.C(223808, J$.R(4224561, 'charset', charset, false, false))) {
                                    J$.P(4224601, J$.R(4224569, 'accepts', accepts, false, false), J$.B(410674, '-', j = J$.W(4224585, 'j', J$.B(410666, '+', J$.U(410658, '+', J$.R(4224577, 'j', j, false, false)), 1), j, false, false), 1), J$.R(4224593, 'charset', charset, false, false));
                                }
                            }
                            J$.P(4224625, J$.R(4224609, 'accepts', accepts, false, false), 'length', J$.R(4224617, 'j', j, false, false));
                            return J$.Rt(4224641, J$.R(4224633, 'accepts', accepts, false, false));
                        } catch (J$e) {
                            J$.Ex(4226649, J$e);
                        } finally {
                            if (J$.Fr(4226657))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseCharset(str, i) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4225113, arguments.callee, this, arguments);
                            arguments = J$.N(4225121, 'arguments', arguments, true, false, false);
                            str = J$.N(4225129, 'str', str, true, false, false);
                            i = J$.N(4225137, 'i', i, true, false, false);
                            J$.N(4225145, 'match', match, false, false, false);
                            J$.N(4225153, 'charset', charset, false, false, false);
                            J$.N(4225161, 'q', q, false, false, false);
                            J$.N(4225169, 'params', params, false, false, false);
                            J$.N(4225177, 'j', j, false, false, false);
                            J$.N(4225185, 'p', p, false, false, false);
                            var match = J$.W(4224729, 'match', J$.M(4224721, J$.R(4224705, 'simpleCharsetRegExp', simpleCharsetRegExp, false, true), 'exec', false)(J$.R(4224713, 'str', str, false, false)), match, false, false);
                            if (J$.C(223824, J$.U(410682, '!', J$.R(4224737, 'match', match, false, false))))
                                return J$.Rt(4224753, J$.T(4224745, null, 25, false));
                            var charset = J$.W(4224785, 'charset', J$.G(4224777, J$.R(4224761, 'match', match, false, false), J$.T(4224769, 1, 22, false)), charset, false, false);
                            var q = J$.W(4224801, 'q', J$.T(4224793, 1, 22, false), q, false, false);
                            if (J$.C(223848, J$.G(4224825, J$.R(4224809, 'match', match, false, false), J$.T(4224817, 2, 22, false)))) {
                                var params = J$.W(4224873, 'params', J$.M(4224865, J$.G(4224849, J$.R(4224833, 'match', match, false, false), J$.T(4224841, 2, 22, false)), 'split', false)(J$.T(4224857, ';', 21, false)), params, false, false);
                                for (var j = J$.W(4224889, 'j', J$.T(4224881, 0, 22, false), j, false, false); J$.C(223840, J$.B(410690, '<', J$.R(4224897, 'j', j, false, false), J$.G(4224913, J$.R(4224905, 'params', params, false, false), 'length'))); J$.B(410714, '-', j = J$.W(4224929, 'j', J$.B(410706, '+', J$.U(410698, '+', J$.R(4224921, 'j', j, false, false)), 1), j, false, false), 1)) {
                                    var p = J$.W(4224985, 'p', J$.M(4224977, J$.M(4224961, J$.G(4224953, J$.R(4224937, 'params', params, false, false), J$.R(4224945, 'j', j, false, false)), 'trim', false)(), 'split', false)(J$.T(4224969, '=', 21, false)), p, false, false);
                                    if (J$.C(223832, J$.B(410722, '===', J$.G(4225009, J$.R(4224993, 'p', p, false, false), J$.T(4225001, 0, 22, false)), J$.T(4225017, 'q', 21, false)))) {
                                        q = J$.W(4225065, 'q', J$.F(4225057, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(4225025, 'parseFloat', undefined, true, true) : parseFloat = J$.R(4225025, 'parseFloat', parseFloat, true, true)), false)(J$.G(4225049, J$.R(4225033, 'p', p, false, false), J$.T(4225041, 1, 22, false))), q, false, false);
                                        break;
                                    }
                                }
                            }
                            return J$.Rt(4225105, J$.T(4225097, {
                                charset: J$.R(4225073, 'charset', charset, false, false),
                                q: J$.R(4225081, 'q', q, false, false),
                                i: J$.R(4225089, 'i', i, false, false)
                            }, 11, false));
                        } catch (J$e) {
                            J$.Ex(4226665, J$e);
                        } finally {
                            if (J$.Fr(4226673))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCharsetPriority(charset, accepted, index) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4225497, arguments.callee, this, arguments);
                            arguments = J$.N(4225505, 'arguments', arguments, true, false, false);
                            charset = J$.N(4225513, 'charset', charset, true, false, false);
                            accepted = J$.N(4225521, 'accepted', accepted, true, false, false);
                            index = J$.N(4225529, 'index', index, true, false, false);
                            J$.N(4225537, 'priority', priority, false, false, false);
                            J$.N(4225545, 'i', i, false, false, false);
                            J$.N(4225553, 'spec', spec, false, false, false);
                            var priority = J$.W(4225225, 'priority', J$.T(4225217, {
                                o: J$.U(410730, '-', J$.T(4225193, 1, 22, false)),
                                q: J$.T(4225201, 0, 22, false),
                                s: J$.T(4225209, 0, 22, false)
                            }, 11, false), priority, false, false);
                            for (var i = J$.W(4225241, 'i', J$.T(4225233, 0, 22, false), i, false, false); J$.C(223888, J$.B(410738, '<', J$.R(4225249, 'i', i, false, false), J$.G(4225265, J$.R(4225257, 'accepted', accepted, false, false), 'length'))); J$.B(410762, '-', i = J$.W(4225281, 'i', J$.B(410754, '+', J$.U(410746, '+', J$.R(4225273, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var spec = J$.W(4225345, 'spec', J$.F(4225337, J$.R(4225289, 'specify', specify, false, true), false)(J$.R(4225297, 'charset', charset, false, false), J$.G(4225321, J$.R(4225305, 'accepted', accepted, false, false), J$.R(4225313, 'i', i, false, false)), J$.R(4225329, 'index', index, false, false)), spec, false, false);
                                if (J$.C(223880, J$.C(223872, J$.R(4225353, 'spec', spec, false, false)) ? J$.B(410794, '<', J$.C(223864, J$.C(223856, J$.B(410770, '-', J$.G(4225369, J$.R(4225361, 'priority', priority, false, false), 's'), J$.G(4225385, J$.R(4225377, 'spec', spec, false, false), 's'))) ? J$._() : J$.B(410778, '-', J$.G(4225401, J$.R(4225393, 'priority', priority, false, false), 'q'), J$.G(4225417, J$.R(4225409, 'spec', spec, false, false), 'q'))) ? J$._() : J$.B(410786, '-', J$.G(4225433, J$.R(4225425, 'priority', priority, false, false), 'o'), J$.G(4225449, J$.R(4225441, 'spec', spec, false, false), 'o')), J$.T(4225457, 0, 22, false)) : J$._())) {
                                    priority = J$.W(4225473, 'priority', J$.R(4225465, 'spec', spec, false, false), priority, false, false);
                                }
                            }
                            return J$.Rt(4225489, J$.R(4225481, 'priority', priority, false, false));
                        } catch (J$e) {
                            J$.Ex(4226681, J$e);
                        } finally {
                            if (J$.Fr(4226689))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function specify(charset, spec, index) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4225745, arguments.callee, this, arguments);
                            arguments = J$.N(4225753, 'arguments', arguments, true, false, false);
                            charset = J$.N(4225761, 'charset', charset, true, false, false);
                            spec = J$.N(4225769, 'spec', spec, true, false, false);
                            index = J$.N(4225777, 'index', index, true, false, false);
                            J$.N(4225785, 's', s, false, false, false);
                            var s = J$.W(4225569, 's', J$.T(4225561, 0, 22, false), s, false, false);
                            if (J$.C(223904, J$.B(410802, '===', J$.M(4225593, J$.G(4225585, J$.R(4225577, 'spec', spec, false, false), 'charset'), 'toLowerCase', false)(), J$.M(4225609, J$.R(4225601, 'charset', charset, false, false), 'toLowerCase', false)()))) {
                                s = J$.W(4225633, 's', J$.B(410810, '|', J$.R(4225625, 's', s, false, false), J$.T(4225617, 1, 22, false)), s, false, false);
                            } else if (J$.C(223896, J$.B(410818, '!==', J$.G(4225649, J$.R(4225641, 'spec', spec, false, false), 'charset'), J$.T(4225657, '*', 21, false)))) {
                                return J$.Rt(4225673, J$.T(4225665, null, 25, false));
                            }
                            return J$.Rt(4225737, J$.T(4225729, {
                                i: J$.R(4225681, 'index', index, false, false),
                                o: J$.G(4225697, J$.R(4225689, 'spec', spec, false, false), 'i'),
                                q: J$.G(4225713, J$.R(4225705, 'spec', spec, false, false), 'q'),
                                s: J$.R(4225721, 's', s, false, false)
                            }, 11, false));
                        } catch (J$e) {
                            J$.Ex(4226697, J$e);
                        } finally {
                            if (J$.Fr(4226705))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function preferredCharsets(accept, provided) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4226177, arguments.callee, this, arguments);
                            arguments = J$.N(4226185, 'arguments', arguments, true, false, false);
                            accept = J$.N(4226193, 'accept', accept, true, false, false);
                            provided = J$.N(4226201, 'provided', provided, true, false, false);
                            J$.N(4226209, 'accepts', accepts, false, false, false);
                            J$.N(4226217, 'priorities', priorities, false, false, false);
                            var accepts = J$.W(4225849, 'accepts', J$.F(4225841, J$.R(4225793, 'parseAcceptCharset', parseAcceptCharset, false, true), false)(J$.C(223920, J$.B(410826, '===', J$.R(4225801, 'accept', accept, false, false), J$.T(4225809, undefined, 24, false))) ? J$.T(4225817, '*', 21, false) : J$.C(223912, J$.R(4225825, 'accept', accept, false, false)) ? J$._() : J$.T(4225833, '', 21, false)), accepts, false, false);
                            if (J$.C(223928, J$.U(410834, '!', J$.R(4225857, 'provided', provided, false, false)))) {
                                return J$.Rt(4225921, J$.M(4225913, J$.M(4225897, J$.M(4225881, J$.R(4225865, 'accepts', accepts, false, false), 'filter', false)(J$.R(4225873, 'isQuality', isQuality, false, true)), 'sort', false)(J$.R(4225889, 'compareSpecs', compareSpecs, false, true)), 'map', false)(J$.R(4225905, 'getFullCharset', getFullCharset, false, true)));
                            }
                            var priorities = J$.W(4226033, 'priorities', J$.M(4226025, J$.R(4225929, 'provided', provided, false, false), 'map', false)(J$.T(4226017, function getPriority(type, index) {
                                jalangiLabel4:
                                    while (true) {
                                        try {
                                            J$.Fe(4225985, arguments.callee, this, arguments);
                                            arguments = J$.N(4225993, 'arguments', arguments, true, false, false);
                                            type = J$.N(4226001, 'type', type, true, false, false);
                                            index = J$.N(4226009, 'index', index, true, false, false);
                                            return J$.Rt(4225977, J$.F(4225969, J$.R(4225937, 'getCharsetPriority', getCharsetPriority, false, true), false)(J$.R(4225945, 'type', type, false, false), J$.R(4225953, 'accepts', accepts, false, false), J$.R(4225961, 'index', index, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(4226713, J$e);
                                        } finally {
                                            if (J$.Fr(4226721))
                                                continue jalangiLabel4;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), priorities, false, false);
                            return J$.Rt(4226169, J$.M(4226161, J$.M(4226073, J$.M(4226057, J$.R(4226041, 'priorities', priorities, false, false), 'filter', false)(J$.R(4226049, 'isQuality', isQuality, false, true)), 'sort', false)(J$.R(4226065, 'compareSpecs', compareSpecs, false, true)), 'map', false)(J$.T(4226153, function getCharset(priority) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(4226129, arguments.callee, this, arguments);
                                            arguments = J$.N(4226137, 'arguments', arguments, true, false, false);
                                            priority = J$.N(4226145, 'priority', priority, true, false, false);
                                            return J$.Rt(4226121, J$.G(4226113, J$.R(4226081, 'provided', provided, false, false), J$.M(4226105, J$.R(4226089, 'priorities', priorities, false, false), 'indexOf', false)(J$.R(4226097, 'priority', priority, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(4226729, J$e);
                                        } finally {
                                            if (J$.Fr(4226737))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                        } catch (J$e) {
                            J$.Ex(4226745, J$e);
                        } finally {
                            if (J$.Fr(4226753))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compareSpecs(a, b) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(4226369, arguments.callee, this, arguments);
                            arguments = J$.N(4226377, 'arguments', arguments, true, false, false);
                            a = J$.N(4226385, 'a', a, true, false, false);
                            b = J$.N(4226393, 'b', b, true, false, false);
                            return J$.Rt(4226361, J$.C(223960, J$.C(223952, J$.C(223944, J$.C(223936, J$.B(410842, '-', J$.G(4226233, J$.R(4226225, 'b', b, false, false), 'q'), J$.G(4226249, J$.R(4226241, 'a', a, false, false), 'q'))) ? J$._() : J$.B(410850, '-', J$.G(4226265, J$.R(4226257, 'b', b, false, false), 's'), J$.G(4226281, J$.R(4226273, 'a', a, false, false), 's'))) ? J$._() : J$.B(410858, '-', J$.G(4226297, J$.R(4226289, 'a', a, false, false), 'o'), J$.G(4226313, J$.R(4226305, 'b', b, false, false), 'o'))) ? J$._() : J$.B(410866, '-', J$.G(4226329, J$.R(4226321, 'a', a, false, false), 'i'), J$.G(4226345, J$.R(4226337, 'b', b, false, false), 'i'))) ? J$._() : J$.T(4226353, 0, 22, false));
                        } catch (J$e) {
                            J$.Ex(4226761, J$e);
                        } finally {
                            if (J$.Fr(4226769))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getFullCharset(spec) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(4226425, arguments.callee, this, arguments);
                            arguments = J$.N(4226433, 'arguments', arguments, true, false, false);
                            spec = J$.N(4226441, 'spec', spec, true, false, false);
                            return J$.Rt(4226417, J$.G(4226409, J$.R(4226401, 'spec', spec, false, false), 'charset'));
                        } catch (J$e) {
                            J$.Ex(4226777, J$e);
                        } finally {
                            if (J$.Fr(4226785))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isQuality(spec) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(4226481, arguments.callee, this, arguments);
                            arguments = J$.N(4226489, 'arguments', arguments, true, false, false);
                            spec = J$.N(4226497, 'spec', spec, true, false, false);
                            return J$.Rt(4226473, J$.B(410874, '>', J$.G(4226457, J$.R(4226449, 'spec', spec, false, false), 'q'), J$.T(4226465, 0, 22, false)));
                        } catch (J$e) {
                            J$.Ex(4226793, J$e);
                        } finally {
                            if (J$.Fr(4226801))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4226513, 'simpleCharsetRegExp', simpleCharsetRegExp, false, false, false);
            parseAcceptCharset = J$.N(4226529, 'parseAcceptCharset', J$.T(4226521, parseAcceptCharset, 12, false), true, false, false);
            parseCharset = J$.N(4226545, 'parseCharset', J$.T(4226537, parseCharset, 12, false), true, false, false);
            getCharsetPriority = J$.N(4226561, 'getCharsetPriority', J$.T(4226553, getCharsetPriority, 12, false), true, false, false);
            specify = J$.N(4226577, 'specify', J$.T(4226569, specify, 12, false), true, false, false);
            preferredCharsets = J$.N(4226593, 'preferredCharsets', J$.T(4226585, preferredCharsets, 12, false), true, false, false);
            compareSpecs = J$.N(4226609, 'compareSpecs', J$.T(4226601, compareSpecs, 12, false), true, false, false);
            getFullCharset = J$.N(4226625, 'getFullCharset', J$.T(4226617, getFullCharset, 12, false), true, false, false);
            isQuality = J$.N(4226641, 'isQuality', J$.T(4226633, isQuality, 12, false), true, false, false);
            J$.T(4224121, 'use strict', 21, false);
            J$.F(4224145, J$.I(typeof require === 'undefined' ? require = J$.R(4224129, 'require', undefined, true, true) : require = J$.R(4224129, 'require', require, true, true)), false)(J$.T(4224137, 'core-js/modules/es.array.filter', 21, false));
            J$.F(4224169, J$.I(typeof require === 'undefined' ? require = J$.R(4224153, 'require', undefined, true, true) : require = J$.R(4224153, 'require', require, true, true)), false)(J$.T(4224161, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(4224193, J$.I(typeof require === 'undefined' ? require = J$.R(4224177, 'require', undefined, true, true) : require = J$.R(4224177, 'require', require, true, true)), false)(J$.T(4224185, 'core-js/modules/es.array.map', 21, false));
            J$.F(4224217, J$.I(typeof require === 'undefined' ? require = J$.R(4224201, 'require', undefined, true, true) : require = J$.R(4224201, 'require', require, true, true)), false)(J$.T(4224209, 'core-js/modules/es.array.sort', 21, false));
            J$.F(4224241, J$.I(typeof require === 'undefined' ? require = J$.R(4224225, 'require', undefined, true, true) : require = J$.R(4224225, 'require', require, true, true)), false)(J$.T(4224233, 'core-js/modules/es.parse-float', 21, false));
            J$.F(4224265, J$.I(typeof require === 'undefined' ? require = J$.R(4224249, 'require', undefined, true, true) : require = J$.R(4224249, 'require', require, true, true)), false)(J$.T(4224257, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(4224289, J$.I(typeof require === 'undefined' ? require = J$.R(4224273, 'require', undefined, true, true) : require = J$.R(4224273, 'require', require, true, true)), false)(J$.T(4224281, 'core-js/modules/es.string.split', 21, false));
            J$.F(4224313, J$.I(typeof require === 'undefined' ? require = J$.R(4224297, 'require', undefined, true, true) : require = J$.R(4224297, 'require', require, true, true)), false)(J$.T(4224305, 'core-js/modules/es.string.trim', 21, false));
            J$.P(4224337, J$.I(typeof module === 'undefined' ? module = J$.R(4224321, 'module', undefined, true, true) : module = J$.R(4224321, 'module', module, true, true)), 'exports', J$.R(4224329, 'preferredCharsets', preferredCharsets, false, true));
            J$.P(4224369, J$.G(4224353, J$.I(typeof module === 'undefined' ? module = J$.R(4224345, 'module', undefined, true, true) : module = J$.R(4224345, 'module', module, true, true)), 'exports'), 'preferredCharsets', J$.R(4224361, 'preferredCharsets', preferredCharsets, false, true));
            var simpleCharsetRegExp = J$.W(4224385, 'simpleCharsetRegExp', J$.T(4224377, /^\s*([^\s;]+)\s*(?:;(.*))?$/, 14, false), simpleCharsetRegExp, false, true);
        } catch (J$e) {
            J$.Ex(4226809, J$e);
        } finally {
            if (J$.Sr(4226817))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

