J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(4115449, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/iconv-lite/encodings/sbcs-codec.js');
            function SBCSCodec(codecOptions, iconv) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4114385, arguments.callee, this, arguments);
                            arguments = J$.N(4114393, 'arguments', arguments, true, false, false);
                            codecOptions = J$.N(4114401, 'codecOptions', codecOptions, true, false, false);
                            iconv = J$.N(4114409, 'iconv', iconv, true, false, false);
                            J$.N(4114417, 'asciiString', asciiString, false, false, false);
                            J$.N(4114425, 'i', i, false, false, false);
                            J$.N(4114433, 'encodeBuf', encodeBuf, false, false, false);
                            if (J$.C(217912, J$.U(401002, '!', J$.R(4113785, 'codecOptions', codecOptions, false, false))))
                                throw J$.F(4113809, J$.I(typeof Error === 'undefined' ? Error = J$.R(4113793, 'Error', undefined, true, true) : Error = J$.R(4113793, 'Error', Error, true, true)), true)(J$.T(4113801, 'SBCS codec is called without the data.', 21, false));
                            if (J$.C(217936, J$.C(217928, J$.U(401010, '!', J$.G(4113825, J$.R(4113817, 'codecOptions', codecOptions, false, false), 'chars'))) ? J$._() : J$.C(217920, J$.B(401018, '!==', J$.G(4113849, J$.G(4113841, J$.R(4113833, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4113857, 128, 22, false))) ? J$.B(401026, '!==', J$.G(4113881, J$.G(4113873, J$.R(4113865, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4113889, 256, 22, false)) : J$._()))
                                throw J$.F(4113937, J$.I(typeof Error === 'undefined' ? Error = J$.R(4113897, 'Error', undefined, true, true) : Error = J$.R(4113897, 'Error', Error, true, true)), true)(J$.B(401042, '+', J$.B(401034, '+', J$.T(4113905, 'Encoding \'', 21, false), J$.G(4113921, J$.R(4113913, 'codecOptions', codecOptions, false, false), 'type')), J$.T(4113929, '\' has incorrect \'chars\' (must be of len 128 or 256)', 21, false)));
                            if (J$.C(217952, J$.B(401050, '===', J$.G(4113961, J$.G(4113953, J$.R(4113945, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(4113969, 128, 22, false)))) {
                                var asciiString = J$.W(4113985, 'asciiString', J$.T(4113977, '', 21, false), asciiString, false, false);
                                for (var i = J$.W(4114001, 'i', J$.T(4113993, 0, 22, false), i, false, false); J$.C(217944, J$.B(401058, '<', J$.R(4114009, 'i', i, false, false), J$.T(4114017, 128, 22, false))); J$.B(401082, '-', i = J$.W(4114033, 'i', J$.B(401074, '+', J$.U(401066, '+', J$.R(4114025, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    asciiString = J$.W(4114073, 'asciiString', J$.B(401090, '+', J$.R(4114065, 'asciiString', asciiString, false, false), J$.M(4114057, J$.I(typeof String === 'undefined' ? String = J$.R(4114041, 'String', undefined, true, true) : String = J$.R(4114041, 'String', String, true, true)), 'fromCharCode', false)(J$.R(4114049, 'i', i, false, false))), asciiString, false, false);
                                }
                                J$.P(4114113, J$.R(4114081, 'codecOptions', codecOptions, false, false), 'chars', J$.B(401098, '+', J$.R(4114089, 'asciiString', asciiString, false, false), J$.G(4114105, J$.R(4114097, 'codecOptions', codecOptions, false, false), 'chars')));
                            }
                            J$.P(4114169, J$.R(4114121, 'this', this, false, false), 'decodeBuf', J$.M(4114161, J$.R(4114129, 'Buffer', Buffer, false, true), 'from', false)(J$.G(4114145, J$.R(4114137, 'codecOptions', codecOptions, false, false), 'chars'), J$.T(4114153, 'ucs2', 21, false)));
                            var encodeBuf = J$.W(4114233, 'encodeBuf', J$.M(4114225, J$.R(4114177, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(4114185, 65536, 22, false), J$.M(4114217, J$.G(4114201, J$.R(4114193, 'iconv', iconv, false, false), 'defaultCharSingleByte'), 'charCodeAt', false)(J$.T(4114209, 0, 22, false))), encodeBuf, false, false);
                            for (var i = J$.W(4114249, 'i', J$.T(4114241, 0, 22, false), i, false, false); J$.C(217960, J$.B(401106, '<', J$.R(4114257, 'i', i, false, false), J$.G(4114281, J$.G(4114273, J$.R(4114265, 'codecOptions', codecOptions, false, false), 'chars'), 'length'))); J$.B(401130, '-', i = J$.W(4114297, 'i', J$.B(401122, '+', J$.U(401114, '+', J$.R(4114289, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(4114353, J$.R(4114305, 'encodeBuf', encodeBuf, false, false), J$.M(4114337, J$.G(4114321, J$.R(4114313, 'codecOptions', codecOptions, false, false), 'chars'), 'charCodeAt', false)(J$.R(4114329, 'i', i, false, false)), J$.R(4114345, 'i', i, false, false));
                            }
                            J$.P(4114377, J$.R(4114361, 'this', this, false, false), 'encodeBuf', J$.R(4114369, 'encodeBuf', encodeBuf, false, false));
                        } catch (J$e) {
                            J$.Ex(4115513, J$e);
                        } finally {
                            if (J$.Fr(4115521))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSEncoder(options, codec) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4114537, arguments.callee, this, arguments);
                            arguments = J$.N(4114545, 'arguments', arguments, true, false, false);
                            options = J$.N(4114553, 'options', options, true, false, false);
                            codec = J$.N(4114561, 'codec', codec, true, false, false);
                            J$.P(4114529, J$.R(4114505, 'this', this, false, false), 'encodeBuf', J$.G(4114521, J$.R(4114513, 'codec', codec, false, false), 'encodeBuf'));
                        } catch (J$e) {
                            J$.Ex(4115529, J$e);
                        } finally {
                            if (J$.Fr(4115537))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSDecoder(options, codec) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4114905, arguments.callee, this, arguments);
                            arguments = J$.N(4114913, 'arguments', arguments, true, false, false);
                            options = J$.N(4114921, 'options', options, true, false, false);
                            codec = J$.N(4114929, 'codec', codec, true, false, false);
                            J$.P(4114897, J$.R(4114873, 'this', this, false, false), 'decodeBuf', J$.G(4114889, J$.R(4114881, 'codec', codec, false, false), 'decodeBuf'));
                        } catch (J$e) {
                            J$.Ex(4115577, J$e);
                        } finally {
                            if (J$.Fr(4115585))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4115457, 'Buffer', Buffer, false, false, false);
            SBCSCodec = J$.N(4115473, 'SBCSCodec', J$.T(4115465, SBCSCodec, 12, false), true, false, false);
            SBCSEncoder = J$.N(4115489, 'SBCSEncoder', J$.T(4115481, SBCSEncoder, 12, false), true, false, false);
            SBCSDecoder = J$.N(4115505, 'SBCSDecoder', J$.T(4115497, SBCSDecoder, 12, false), true, false, false);
            J$.T(4113641, 'use strict', 21, false);
            J$.F(4113665, J$.I(typeof require === 'undefined' ? require = J$.R(4113649, 'require', undefined, true, true) : require = J$.R(4113649, 'require', require, true, true)), false)(J$.T(4113657, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(4113689, J$.I(typeof require === 'undefined' ? require = J$.R(4113673, 'require', undefined, true, true) : require = J$.R(4113673, 'require', require, true, true)), false)(J$.T(4113681, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(4113713, J$.I(typeof require === 'undefined' ? require = J$.R(4113697, 'require', undefined, true, true) : require = J$.R(4113697, 'require', require, true, true)), false)(J$.T(4113705, 'core-js/modules/es.regexp.to-string', 21, false));
            var Buffer = J$.W(4113753, 'Buffer', J$.G(4113745, J$.F(4113737, J$.I(typeof require === 'undefined' ? require = J$.R(4113721, 'require', undefined, true, true) : require = J$.R(4113721, 'require', require, true, true)), false)(J$.T(4113729, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            J$.P(4113777, J$.I(typeof exports === 'undefined' ? exports = J$.R(4113761, 'exports', undefined, true, true) : exports = J$.R(4113761, 'exports', exports, true, true)), '_sbcs', J$.R(4113769, 'SBCSCodec', SBCSCodec, false, true));
            J$.P(4114465, J$.G(4114449, J$.R(4114441, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'encoder', J$.R(4114457, 'SBCSEncoder', SBCSEncoder, false, true));
            J$.P(4114497, J$.G(4114481, J$.R(4114473, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'decoder', J$.R(4114489, 'SBCSDecoder', SBCSDecoder, false, true));
            J$.P(4114817, J$.G(4114577, J$.R(4114569, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'write', J$.T(4114809, function (str) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4114769, arguments.callee, this, arguments);
                            arguments = J$.N(4114777, 'arguments', arguments, true, false, false);
                            str = J$.N(4114785, 'str', str, true, false, false);
                            J$.N(4114793, 'buf', buf, false, false, false);
                            J$.N(4114801, 'i', i, false, false, false);
                            var buf = J$.W(4114617, 'buf', J$.M(4114609, J$.R(4114585, 'Buffer', Buffer, false, true), 'alloc', false)(J$.G(4114601, J$.R(4114593, 'str', str, false, false), 'length')), buf, false, false);
                            for (var i = J$.W(4114633, 'i', J$.T(4114625, 0, 22, false), i, false, false); J$.C(217968, J$.B(401138, '<', J$.R(4114641, 'i', i, false, false), J$.G(4114657, J$.R(4114649, 'str', str, false, false), 'length'))); J$.B(401162, '-', i = J$.W(4114673, 'i', J$.B(401154, '+', J$.U(401146, '+', J$.R(4114665, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(4114745, J$.R(4114681, 'buf', buf, false, false), J$.R(4114689, 'i', i, false, false), J$.G(4114737, J$.G(4114705, J$.R(4114697, 'this', this, false, false), 'encodeBuf'), J$.M(4114729, J$.R(4114713, 'str', str, false, false), 'charCodeAt', false)(J$.R(4114721, 'i', i, false, false))));
                            }
                            return J$.Rt(4114761, J$.R(4114753, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(4115545, J$e);
                        } finally {
                            if (J$.Fr(4115553))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4114865, J$.G(4114833, J$.R(4114825, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'end', J$.T(4114857, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4114841, arguments.callee, this, arguments);
                            arguments = J$.N(4114849, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(4115561, J$e);
                        } finally {
                            if (J$.Fr(4115569))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4115393, J$.G(4114945, J$.R(4114937, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'write', J$.T(4115385, function (buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4115321, arguments.callee, this, arguments);
                            arguments = J$.N(4115329, 'arguments', arguments, true, false, false);
                            buf = J$.N(4115337, 'buf', buf, true, false, false);
                            J$.N(4115345, 'decodeBuf', decodeBuf, false, false, false);
                            J$.N(4115353, 'newBuf', newBuf, false, false, false);
                            J$.N(4115361, 'idx1', idx1, false, false, false);
                            J$.N(4115369, 'idx2', idx2, false, false, false);
                            J$.N(4115377, 'i', i, false, false, false);
                            var decodeBuf = J$.W(4114969, 'decodeBuf', J$.G(4114961, J$.R(4114953, 'this', this, false, false), 'decodeBuf'), decodeBuf, false, false);
                            var newBuf = J$.W(4115017, 'newBuf', J$.M(4115009, J$.R(4114977, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(401170, '*', J$.G(4114993, J$.R(4114985, 'buf', buf, false, false), 'length'), J$.T(4115001, 2, 22, false))), newBuf, false, false);
                            var idx1 = J$.W(4115041, 'idx1', J$.T(4115025, 0, 22, false), idx1, false, false), idx2 = J$.W(4115049, 'idx2', J$.T(4115033, 0, 22, false), idx2, false, false);
                            for (var i = J$.W(4115065, 'i', J$.T(4115057, 0, 22, false), i, false, false); J$.C(217976, J$.B(401178, '<', J$.R(4115073, 'i', i, false, false), J$.G(4115089, J$.R(4115081, 'buf', buf, false, false), 'length'))); J$.B(401202, '-', i = J$.W(4115105, 'i', J$.B(401194, '+', J$.U(401186, '+', J$.R(4115097, 'i', i, false, false)), 1), i, false, false), 1)) {
                                idx1 = J$.W(4115145, 'idx1', J$.B(401210, '*', J$.G(4115129, J$.R(4115113, 'buf', buf, false, false), J$.R(4115121, 'i', i, false, false)), J$.T(4115137, 2, 22, false)), idx1, false, false);
                                idx2 = J$.W(4115169, 'idx2', J$.B(401218, '*', J$.R(4115153, 'i', i, false, false), J$.T(4115161, 2, 22, false)), idx2, false, false);
                                J$.P(4115217, J$.R(4115177, 'newBuf', newBuf, false, false), J$.R(4115185, 'idx2', idx2, false, false), J$.G(4115209, J$.R(4115193, 'decodeBuf', decodeBuf, false, false), J$.R(4115201, 'idx1', idx1, false, false)));
                                J$.P(4115281, J$.R(4115225, 'newBuf', newBuf, false, false), J$.B(401226, '+', J$.R(4115233, 'idx2', idx2, false, false), J$.T(4115241, 1, 22, false)), J$.G(4115273, J$.R(4115249, 'decodeBuf', decodeBuf, false, false), J$.B(401234, '+', J$.R(4115257, 'idx1', idx1, false, false), J$.T(4115265, 1, 22, false))));
                            }
                            return J$.Rt(4115313, J$.M(4115305, J$.R(4115289, 'newBuf', newBuf, false, false), 'toString', false)(J$.T(4115297, 'ucs2', 21, false)));
                        } catch (J$e) {
                            J$.Ex(4115593, J$e);
                        } finally {
                            if (J$.Fr(4115601))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4115441, J$.G(4115409, J$.R(4115401, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'end', J$.T(4115433, function () {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(4115417, arguments.callee, this, arguments);
                            arguments = J$.N(4115425, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(4115609, J$e);
                        } finally {
                            if (J$.Fr(4115617))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4115625, J$e);
        } finally {
            if (J$.Sr(4115633))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

