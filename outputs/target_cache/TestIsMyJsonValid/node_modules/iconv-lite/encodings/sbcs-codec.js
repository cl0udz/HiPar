J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(156945, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/iconv-lite/encodings/sbcs-codec.js');
            function SBCSCodec(codecOptions, iconv) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(155881, arguments.callee, this, arguments);
                            arguments = J$.N(155889, 'arguments', arguments, true, false, false);
                            codecOptions = J$.N(155897, 'codecOptions', codecOptions, true, false, false);
                            iconv = J$.N(155905, 'iconv', iconv, true, false, false);
                            J$.N(155913, 'asciiString', asciiString, false, false, false);
                            J$.N(155921, 'i', i, false, false, false);
                            J$.N(155929, 'encodeBuf', encodeBuf, false, false, false);
                            if (J$.C(9512, J$.U(14954, '!', J$.R(155281, 'codecOptions', codecOptions, false, false))))
                                throw J$.F(155305, J$.I(typeof Error === 'undefined' ? Error = J$.R(155289, 'Error', undefined, true, true) : Error = J$.R(155289, 'Error', Error, true, true)), true)(J$.T(155297, 'SBCS codec is called without the data.', 21, false));
                            if (J$.C(9536, J$.C(9528, J$.U(14962, '!', J$.G(155321, J$.R(155313, 'codecOptions', codecOptions, false, false), 'chars'))) ? J$._() : J$.C(9520, J$.B(14970, '!==', J$.G(155345, J$.G(155337, J$.R(155329, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(155353, 128, 22, false))) ? J$.B(14978, '!==', J$.G(155377, J$.G(155369, J$.R(155361, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(155385, 256, 22, false)) : J$._()))
                                throw J$.F(155433, J$.I(typeof Error === 'undefined' ? Error = J$.R(155393, 'Error', undefined, true, true) : Error = J$.R(155393, 'Error', Error, true, true)), true)(J$.B(14994, '+', J$.B(14986, '+', J$.T(155401, 'Encoding \'', 21, false), J$.G(155417, J$.R(155409, 'codecOptions', codecOptions, false, false), 'type')), J$.T(155425, '\' has incorrect \'chars\' (must be of len 128 or 256)', 21, false)));
                            if (J$.C(9552, J$.B(15002, '===', J$.G(155457, J$.G(155449, J$.R(155441, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(155465, 128, 22, false)))) {
                                var asciiString = J$.W(155481, 'asciiString', J$.T(155473, '', 21, false), asciiString, false, false);
                                for (var i = J$.W(155497, 'i', J$.T(155489, 0, 22, false), i, false, false); J$.C(9544, J$.B(15010, '<', J$.R(155505, 'i', i, false, false), J$.T(155513, 128, 22, false))); J$.B(15034, '-', i = J$.W(155529, 'i', J$.B(15026, '+', J$.U(15018, '+', J$.R(155521, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    asciiString = J$.W(155569, 'asciiString', J$.B(15042, '+', J$.R(155561, 'asciiString', asciiString, false, false), J$.M(155553, J$.I(typeof String === 'undefined' ? String = J$.R(155537, 'String', undefined, true, true) : String = J$.R(155537, 'String', String, true, true)), 'fromCharCode', false)(J$.R(155545, 'i', i, false, false))), asciiString, false, false);
                                }
                                J$.P(155609, J$.R(155577, 'codecOptions', codecOptions, false, false), 'chars', J$.B(15050, '+', J$.R(155585, 'asciiString', asciiString, false, false), J$.G(155601, J$.R(155593, 'codecOptions', codecOptions, false, false), 'chars')));
                            }
                            J$.P(155665, J$.R(155617, 'this', this, false, false), 'decodeBuf', J$.M(155657, J$.R(155625, 'Buffer', Buffer, false, true), 'from', false)(J$.G(155641, J$.R(155633, 'codecOptions', codecOptions, false, false), 'chars'), J$.T(155649, 'ucs2', 21, false)));
                            var encodeBuf = J$.W(155729, 'encodeBuf', J$.M(155721, J$.R(155673, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(155681, 65536, 22, false), J$.M(155713, J$.G(155697, J$.R(155689, 'iconv', iconv, false, false), 'defaultCharSingleByte'), 'charCodeAt', false)(J$.T(155705, 0, 22, false))), encodeBuf, false, false);
                            for (var i = J$.W(155745, 'i', J$.T(155737, 0, 22, false), i, false, false); J$.C(9560, J$.B(15058, '<', J$.R(155753, 'i', i, false, false), J$.G(155777, J$.G(155769, J$.R(155761, 'codecOptions', codecOptions, false, false), 'chars'), 'length'))); J$.B(15082, '-', i = J$.W(155793, 'i', J$.B(15074, '+', J$.U(15066, '+', J$.R(155785, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(155849, J$.R(155801, 'encodeBuf', encodeBuf, false, false), J$.M(155833, J$.G(155817, J$.R(155809, 'codecOptions', codecOptions, false, false), 'chars'), 'charCodeAt', false)(J$.R(155825, 'i', i, false, false)), J$.R(155841, 'i', i, false, false));
                            }
                            J$.P(155873, J$.R(155857, 'this', this, false, false), 'encodeBuf', J$.R(155865, 'encodeBuf', encodeBuf, false, false));
                        } catch (J$e) {
                            J$.Ex(157009, J$e);
                        } finally {
                            if (J$.Fr(157017))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSEncoder(options, codec) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(156033, arguments.callee, this, arguments);
                            arguments = J$.N(156041, 'arguments', arguments, true, false, false);
                            options = J$.N(156049, 'options', options, true, false, false);
                            codec = J$.N(156057, 'codec', codec, true, false, false);
                            J$.P(156025, J$.R(156001, 'this', this, false, false), 'encodeBuf', J$.G(156017, J$.R(156009, 'codec', codec, false, false), 'encodeBuf'));
                        } catch (J$e) {
                            J$.Ex(157025, J$e);
                        } finally {
                            if (J$.Fr(157033))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSDecoder(options, codec) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(156401, arguments.callee, this, arguments);
                            arguments = J$.N(156409, 'arguments', arguments, true, false, false);
                            options = J$.N(156417, 'options', options, true, false, false);
                            codec = J$.N(156425, 'codec', codec, true, false, false);
                            J$.P(156393, J$.R(156369, 'this', this, false, false), 'decodeBuf', J$.G(156385, J$.R(156377, 'codec', codec, false, false), 'decodeBuf'));
                        } catch (J$e) {
                            J$.Ex(157073, J$e);
                        } finally {
                            if (J$.Fr(157081))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(156953, 'Buffer', Buffer, false, false, false);
            SBCSCodec = J$.N(156969, 'SBCSCodec', J$.T(156961, SBCSCodec, 12, false), true, false, false);
            SBCSEncoder = J$.N(156985, 'SBCSEncoder', J$.T(156977, SBCSEncoder, 12, false), true, false, false);
            SBCSDecoder = J$.N(157001, 'SBCSDecoder', J$.T(156993, SBCSDecoder, 12, false), true, false, false);
            J$.T(155137, 'use strict', 21, false);
            J$.F(155161, J$.I(typeof require === 'undefined' ? require = J$.R(155145, 'require', undefined, true, true) : require = J$.R(155145, 'require', require, true, true)), false)(J$.T(155153, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(155185, J$.I(typeof require === 'undefined' ? require = J$.R(155169, 'require', undefined, true, true) : require = J$.R(155169, 'require', require, true, true)), false)(J$.T(155177, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(155209, J$.I(typeof require === 'undefined' ? require = J$.R(155193, 'require', undefined, true, true) : require = J$.R(155193, 'require', require, true, true)), false)(J$.T(155201, 'core-js/modules/es.regexp.to-string', 21, false));
            var Buffer = J$.W(155249, 'Buffer', J$.G(155241, J$.F(155233, J$.I(typeof require === 'undefined' ? require = J$.R(155217, 'require', undefined, true, true) : require = J$.R(155217, 'require', require, true, true)), false)(J$.T(155225, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            J$.P(155273, J$.I(typeof exports === 'undefined' ? exports = J$.R(155257, 'exports', undefined, true, true) : exports = J$.R(155257, 'exports', exports, true, true)), '_sbcs', J$.R(155265, 'SBCSCodec', SBCSCodec, false, true));
            J$.P(155961, J$.G(155945, J$.R(155937, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'encoder', J$.R(155953, 'SBCSEncoder', SBCSEncoder, false, true));
            J$.P(155993, J$.G(155977, J$.R(155969, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'decoder', J$.R(155985, 'SBCSDecoder', SBCSDecoder, false, true));
            J$.P(156313, J$.G(156073, J$.R(156065, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'write', J$.T(156305, function (str) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(156265, arguments.callee, this, arguments);
                            arguments = J$.N(156273, 'arguments', arguments, true, false, false);
                            str = J$.N(156281, 'str', str, true, false, false);
                            J$.N(156289, 'buf', buf, false, false, false);
                            J$.N(156297, 'i', i, false, false, false);
                            var buf = J$.W(156113, 'buf', J$.M(156105, J$.R(156081, 'Buffer', Buffer, false, true), 'alloc', false)(J$.G(156097, J$.R(156089, 'str', str, false, false), 'length')), buf, false, false);
                            for (var i = J$.W(156129, 'i', J$.T(156121, 0, 22, false), i, false, false); J$.C(9568, J$.B(15090, '<', J$.R(156137, 'i', i, false, false), J$.G(156153, J$.R(156145, 'str', str, false, false), 'length'))); J$.B(15114, '-', i = J$.W(156169, 'i', J$.B(15106, '+', J$.U(15098, '+', J$.R(156161, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(156241, J$.R(156177, 'buf', buf, false, false), J$.R(156185, 'i', i, false, false), J$.G(156233, J$.G(156201, J$.R(156193, 'this', this, false, false), 'encodeBuf'), J$.M(156225, J$.R(156209, 'str', str, false, false), 'charCodeAt', false)(J$.R(156217, 'i', i, false, false))));
                            }
                            return J$.Rt(156257, J$.R(156249, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(157041, J$e);
                        } finally {
                            if (J$.Fr(157049))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(156361, J$.G(156329, J$.R(156321, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'end', J$.T(156353, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(156337, arguments.callee, this, arguments);
                            arguments = J$.N(156345, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(157057, J$e);
                        } finally {
                            if (J$.Fr(157065))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(156889, J$.G(156441, J$.R(156433, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'write', J$.T(156881, function (buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(156817, arguments.callee, this, arguments);
                            arguments = J$.N(156825, 'arguments', arguments, true, false, false);
                            buf = J$.N(156833, 'buf', buf, true, false, false);
                            J$.N(156841, 'decodeBuf', decodeBuf, false, false, false);
                            J$.N(156849, 'newBuf', newBuf, false, false, false);
                            J$.N(156857, 'idx1', idx1, false, false, false);
                            J$.N(156865, 'idx2', idx2, false, false, false);
                            J$.N(156873, 'i', i, false, false, false);
                            var decodeBuf = J$.W(156465, 'decodeBuf', J$.G(156457, J$.R(156449, 'this', this, false, false), 'decodeBuf'), decodeBuf, false, false);
                            var newBuf = J$.W(156513, 'newBuf', J$.M(156505, J$.R(156473, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(15122, '*', J$.G(156489, J$.R(156481, 'buf', buf, false, false), 'length'), J$.T(156497, 2, 22, false))), newBuf, false, false);
                            var idx1 = J$.W(156537, 'idx1', J$.T(156521, 0, 22, false), idx1, false, false), idx2 = J$.W(156545, 'idx2', J$.T(156529, 0, 22, false), idx2, false, false);
                            for (var i = J$.W(156561, 'i', J$.T(156553, 0, 22, false), i, false, false); J$.C(9576, J$.B(15130, '<', J$.R(156569, 'i', i, false, false), J$.G(156585, J$.R(156577, 'buf', buf, false, false), 'length'))); J$.B(15154, '-', i = J$.W(156601, 'i', J$.B(15146, '+', J$.U(15138, '+', J$.R(156593, 'i', i, false, false)), 1), i, false, false), 1)) {
                                idx1 = J$.W(156641, 'idx1', J$.B(15162, '*', J$.G(156625, J$.R(156609, 'buf', buf, false, false), J$.R(156617, 'i', i, false, false)), J$.T(156633, 2, 22, false)), idx1, false, false);
                                idx2 = J$.W(156665, 'idx2', J$.B(15170, '*', J$.R(156649, 'i', i, false, false), J$.T(156657, 2, 22, false)), idx2, false, false);
                                J$.P(156713, J$.R(156673, 'newBuf', newBuf, false, false), J$.R(156681, 'idx2', idx2, false, false), J$.G(156705, J$.R(156689, 'decodeBuf', decodeBuf, false, false), J$.R(156697, 'idx1', idx1, false, false)));
                                J$.P(156777, J$.R(156721, 'newBuf', newBuf, false, false), J$.B(15178, '+', J$.R(156729, 'idx2', idx2, false, false), J$.T(156737, 1, 22, false)), J$.G(156769, J$.R(156745, 'decodeBuf', decodeBuf, false, false), J$.B(15186, '+', J$.R(156753, 'idx1', idx1, false, false), J$.T(156761, 1, 22, false))));
                            }
                            return J$.Rt(156809, J$.M(156801, J$.R(156785, 'newBuf', newBuf, false, false), 'toString', false)(J$.T(156793, 'ucs2', 21, false)));
                        } catch (J$e) {
                            J$.Ex(157089, J$e);
                        } finally {
                            if (J$.Fr(157097))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(156937, J$.G(156905, J$.R(156897, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'end', J$.T(156929, function () {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(156913, arguments.callee, this, arguments);
                            arguments = J$.N(156921, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(157105, J$e);
                        } finally {
                            if (J$.Fr(157113))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(157121, J$e);
        } finally {
            if (J$.Sr(157129))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

