J$.noInstrEval = false;
jalangiLabel7:
    while (true) {
        try {
            J$.Se(199817, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/iconv-lite/encodings/sbcs-codec.js');
            function SBCSCodec(codecOptions, iconv) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(198753, arguments.callee, this, arguments);
                            arguments = J$.N(198761, 'arguments', arguments, true, false, false);
                            codecOptions = J$.N(198769, 'codecOptions', codecOptions, true, false, false);
                            iconv = J$.N(198777, 'iconv', iconv, true, false, false);
                            J$.N(198785, 'asciiString', asciiString, false, false, false);
                            J$.N(198793, 'i', i, false, false, false);
                            J$.N(198801, 'encodeBuf', encodeBuf, false, false, false);
                            if (J$.C(11784, J$.U(18074, '!', J$.R(198153, 'codecOptions', codecOptions, false, false))))
                                throw J$.F(198177, J$.I(typeof Error === 'undefined' ? Error = J$.R(198161, 'Error', undefined, true, true) : Error = J$.R(198161, 'Error', Error, true, true)), true)(J$.T(198169, 'SBCS codec is called without the data.', 21, false));
                            if (J$.C(11808, J$.C(11800, J$.U(18082, '!', J$.G(198193, J$.R(198185, 'codecOptions', codecOptions, false, false), 'chars'))) ? J$._() : J$.C(11792, J$.B(18090, '!==', J$.G(198217, J$.G(198209, J$.R(198201, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(198225, 128, 22, false))) ? J$.B(18098, '!==', J$.G(198249, J$.G(198241, J$.R(198233, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(198257, 256, 22, false)) : J$._()))
                                throw J$.F(198305, J$.I(typeof Error === 'undefined' ? Error = J$.R(198265, 'Error', undefined, true, true) : Error = J$.R(198265, 'Error', Error, true, true)), true)(J$.B(18114, '+', J$.B(18106, '+', J$.T(198273, 'Encoding \'', 21, false), J$.G(198289, J$.R(198281, 'codecOptions', codecOptions, false, false), 'type')), J$.T(198297, '\' has incorrect \'chars\' (must be of len 128 or 256)', 21, false)));
                            if (J$.C(11824, J$.B(18122, '===', J$.G(198329, J$.G(198321, J$.R(198313, 'codecOptions', codecOptions, false, false), 'chars'), 'length'), J$.T(198337, 128, 22, false)))) {
                                var asciiString = J$.W(198353, 'asciiString', J$.T(198345, '', 21, false), asciiString, false, false);
                                for (var i = J$.W(198369, 'i', J$.T(198361, 0, 22, false), i, false, false); J$.C(11816, J$.B(18130, '<', J$.R(198377, 'i', i, false, false), J$.T(198385, 128, 22, false))); J$.B(18154, '-', i = J$.W(198401, 'i', J$.B(18146, '+', J$.U(18138, '+', J$.R(198393, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    asciiString = J$.W(198441, 'asciiString', J$.B(18162, '+', J$.R(198433, 'asciiString', asciiString, false, false), J$.M(198425, J$.I(typeof String === 'undefined' ? String = J$.R(198409, 'String', undefined, true, true) : String = J$.R(198409, 'String', String, true, true)), 'fromCharCode', false)(J$.R(198417, 'i', i, false, false))), asciiString, false, false);
                                }
                                J$.P(198481, J$.R(198449, 'codecOptions', codecOptions, false, false), 'chars', J$.B(18170, '+', J$.R(198457, 'asciiString', asciiString, false, false), J$.G(198473, J$.R(198465, 'codecOptions', codecOptions, false, false), 'chars')));
                            }
                            J$.P(198537, J$.R(198489, 'this', this, false, false), 'decodeBuf', J$.M(198529, J$.R(198497, 'Buffer', Buffer, false, true), 'from', false)(J$.G(198513, J$.R(198505, 'codecOptions', codecOptions, false, false), 'chars'), J$.T(198521, 'ucs2', 21, false)));
                            var encodeBuf = J$.W(198601, 'encodeBuf', J$.M(198593, J$.R(198545, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(198553, 65536, 22, false), J$.M(198585, J$.G(198569, J$.R(198561, 'iconv', iconv, false, false), 'defaultCharSingleByte'), 'charCodeAt', false)(J$.T(198577, 0, 22, false))), encodeBuf, false, false);
                            for (var i = J$.W(198617, 'i', J$.T(198609, 0, 22, false), i, false, false); J$.C(11832, J$.B(18178, '<', J$.R(198625, 'i', i, false, false), J$.G(198649, J$.G(198641, J$.R(198633, 'codecOptions', codecOptions, false, false), 'chars'), 'length'))); J$.B(18202, '-', i = J$.W(198665, 'i', J$.B(18194, '+', J$.U(18186, '+', J$.R(198657, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(198721, J$.R(198673, 'encodeBuf', encodeBuf, false, false), J$.M(198705, J$.G(198689, J$.R(198681, 'codecOptions', codecOptions, false, false), 'chars'), 'charCodeAt', false)(J$.R(198697, 'i', i, false, false)), J$.R(198713, 'i', i, false, false));
                            }
                            J$.P(198745, J$.R(198729, 'this', this, false, false), 'encodeBuf', J$.R(198737, 'encodeBuf', encodeBuf, false, false));
                        } catch (J$e) {
                            J$.Ex(199881, J$e);
                        } finally {
                            if (J$.Fr(199889))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSEncoder(options, codec) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(198905, arguments.callee, this, arguments);
                            arguments = J$.N(198913, 'arguments', arguments, true, false, false);
                            options = J$.N(198921, 'options', options, true, false, false);
                            codec = J$.N(198929, 'codec', codec, true, false, false);
                            J$.P(198897, J$.R(198873, 'this', this, false, false), 'encodeBuf', J$.G(198889, J$.R(198881, 'codec', codec, false, false), 'encodeBuf'));
                        } catch (J$e) {
                            J$.Ex(199897, J$e);
                        } finally {
                            if (J$.Fr(199905))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SBCSDecoder(options, codec) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(199273, arguments.callee, this, arguments);
                            arguments = J$.N(199281, 'arguments', arguments, true, false, false);
                            options = J$.N(199289, 'options', options, true, false, false);
                            codec = J$.N(199297, 'codec', codec, true, false, false);
                            J$.P(199265, J$.R(199241, 'this', this, false, false), 'decodeBuf', J$.G(199257, J$.R(199249, 'codec', codec, false, false), 'decodeBuf'));
                        } catch (J$e) {
                            J$.Ex(199945, J$e);
                        } finally {
                            if (J$.Fr(199953))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(199825, 'Buffer', Buffer, false, false, false);
            SBCSCodec = J$.N(199841, 'SBCSCodec', J$.T(199833, SBCSCodec, 12, false), true, false, false);
            SBCSEncoder = J$.N(199857, 'SBCSEncoder', J$.T(199849, SBCSEncoder, 12, false), true, false, false);
            SBCSDecoder = J$.N(199873, 'SBCSDecoder', J$.T(199865, SBCSDecoder, 12, false), true, false, false);
            J$.T(198009, 'use strict', 21, false);
            J$.F(198033, J$.I(typeof require === 'undefined' ? require = J$.R(198017, 'require', undefined, true, true) : require = J$.R(198017, 'require', require, true, true)), false)(J$.T(198025, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(198057, J$.I(typeof require === 'undefined' ? require = J$.R(198041, 'require', undefined, true, true) : require = J$.R(198041, 'require', require, true, true)), false)(J$.T(198049, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(198081, J$.I(typeof require === 'undefined' ? require = J$.R(198065, 'require', undefined, true, true) : require = J$.R(198065, 'require', require, true, true)), false)(J$.T(198073, 'core-js/modules/es.regexp.to-string', 21, false));
            var Buffer = J$.W(198121, 'Buffer', J$.G(198113, J$.F(198105, J$.I(typeof require === 'undefined' ? require = J$.R(198089, 'require', undefined, true, true) : require = J$.R(198089, 'require', require, true, true)), false)(J$.T(198097, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            J$.P(198145, J$.I(typeof exports === 'undefined' ? exports = J$.R(198129, 'exports', undefined, true, true) : exports = J$.R(198129, 'exports', exports, true, true)), '_sbcs', J$.R(198137, 'SBCSCodec', SBCSCodec, false, true));
            J$.P(198833, J$.G(198817, J$.R(198809, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'encoder', J$.R(198825, 'SBCSEncoder', SBCSEncoder, false, true));
            J$.P(198865, J$.G(198849, J$.R(198841, 'SBCSCodec', SBCSCodec, false, true), 'prototype'), 'decoder', J$.R(198857, 'SBCSDecoder', SBCSDecoder, false, true));
            J$.P(199185, J$.G(198945, J$.R(198937, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'write', J$.T(199177, function (str) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(199137, arguments.callee, this, arguments);
                            arguments = J$.N(199145, 'arguments', arguments, true, false, false);
                            str = J$.N(199153, 'str', str, true, false, false);
                            J$.N(199161, 'buf', buf, false, false, false);
                            J$.N(199169, 'i', i, false, false, false);
                            var buf = J$.W(198985, 'buf', J$.M(198977, J$.R(198953, 'Buffer', Buffer, false, true), 'alloc', false)(J$.G(198969, J$.R(198961, 'str', str, false, false), 'length')), buf, false, false);
                            for (var i = J$.W(199001, 'i', J$.T(198993, 0, 22, false), i, false, false); J$.C(11840, J$.B(18210, '<', J$.R(199009, 'i', i, false, false), J$.G(199025, J$.R(199017, 'str', str, false, false), 'length'))); J$.B(18234, '-', i = J$.W(199041, 'i', J$.B(18226, '+', J$.U(18218, '+', J$.R(199033, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(199113, J$.R(199049, 'buf', buf, false, false), J$.R(199057, 'i', i, false, false), J$.G(199105, J$.G(199073, J$.R(199065, 'this', this, false, false), 'encodeBuf'), J$.M(199097, J$.R(199081, 'str', str, false, false), 'charCodeAt', false)(J$.R(199089, 'i', i, false, false))));
                            }
                            return J$.Rt(199129, J$.R(199121, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(199913, J$e);
                        } finally {
                            if (J$.Fr(199921))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(199233, J$.G(199201, J$.R(199193, 'SBCSEncoder', SBCSEncoder, false, true), 'prototype'), 'end', J$.T(199225, function () {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(199209, arguments.callee, this, arguments);
                            arguments = J$.N(199217, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(199929, J$e);
                        } finally {
                            if (J$.Fr(199937))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(199761, J$.G(199313, J$.R(199305, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'write', J$.T(199753, function (buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(199689, arguments.callee, this, arguments);
                            arguments = J$.N(199697, 'arguments', arguments, true, false, false);
                            buf = J$.N(199705, 'buf', buf, true, false, false);
                            J$.N(199713, 'decodeBuf', decodeBuf, false, false, false);
                            J$.N(199721, 'newBuf', newBuf, false, false, false);
                            J$.N(199729, 'idx1', idx1, false, false, false);
                            J$.N(199737, 'idx2', idx2, false, false, false);
                            J$.N(199745, 'i', i, false, false, false);
                            var decodeBuf = J$.W(199337, 'decodeBuf', J$.G(199329, J$.R(199321, 'this', this, false, false), 'decodeBuf'), decodeBuf, false, false);
                            var newBuf = J$.W(199385, 'newBuf', J$.M(199377, J$.R(199345, 'Buffer', Buffer, false, true), 'alloc', false)(J$.B(18242, '*', J$.G(199361, J$.R(199353, 'buf', buf, false, false), 'length'), J$.T(199369, 2, 22, false))), newBuf, false, false);
                            var idx1 = J$.W(199409, 'idx1', J$.T(199393, 0, 22, false), idx1, false, false), idx2 = J$.W(199417, 'idx2', J$.T(199401, 0, 22, false), idx2, false, false);
                            for (var i = J$.W(199433, 'i', J$.T(199425, 0, 22, false), i, false, false); J$.C(11848, J$.B(18250, '<', J$.R(199441, 'i', i, false, false), J$.G(199457, J$.R(199449, 'buf', buf, false, false), 'length'))); J$.B(18274, '-', i = J$.W(199473, 'i', J$.B(18266, '+', J$.U(18258, '+', J$.R(199465, 'i', i, false, false)), 1), i, false, false), 1)) {
                                idx1 = J$.W(199513, 'idx1', J$.B(18282, '*', J$.G(199497, J$.R(199481, 'buf', buf, false, false), J$.R(199489, 'i', i, false, false)), J$.T(199505, 2, 22, false)), idx1, false, false);
                                idx2 = J$.W(199537, 'idx2', J$.B(18290, '*', J$.R(199521, 'i', i, false, false), J$.T(199529, 2, 22, false)), idx2, false, false);
                                J$.P(199585, J$.R(199545, 'newBuf', newBuf, false, false), J$.R(199553, 'idx2', idx2, false, false), J$.G(199577, J$.R(199561, 'decodeBuf', decodeBuf, false, false), J$.R(199569, 'idx1', idx1, false, false)));
                                J$.P(199649, J$.R(199593, 'newBuf', newBuf, false, false), J$.B(18298, '+', J$.R(199601, 'idx2', idx2, false, false), J$.T(199609, 1, 22, false)), J$.G(199641, J$.R(199617, 'decodeBuf', decodeBuf, false, false), J$.B(18306, '+', J$.R(199625, 'idx1', idx1, false, false), J$.T(199633, 1, 22, false))));
                            }
                            return J$.Rt(199681, J$.M(199673, J$.R(199657, 'newBuf', newBuf, false, false), 'toString', false)(J$.T(199665, 'ucs2', 21, false)));
                        } catch (J$e) {
                            J$.Ex(199961, J$e);
                        } finally {
                            if (J$.Fr(199969))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(199809, J$.G(199777, J$.R(199769, 'SBCSDecoder', SBCSDecoder, false, true), 'prototype'), 'end', J$.T(199801, function () {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(199785, arguments.callee, this, arguments);
                            arguments = J$.N(199793, 'arguments', arguments, true, false, false);
                        } catch (J$e) {
                            J$.Ex(199977, J$e);
                        } finally {
                            if (J$.Fr(199985))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(199993, J$e);
        } finally {
            if (J$.Sr(200001))
                continue jalangiLabel7;
            else
                break jalangiLabel7;
        }
    }
// JALANGI DO NOT INSTRUMENT

