J$.noInstrEval = false;
jalangiLabel9:
    while (true) {
        try {
            J$.Se(4109065, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/iconv-lite/encodings/dbcs-data.js');
            J$.T(4107833, 'use strict', 21, false);
            J$.F(4107857, J$.I(typeof require === 'undefined' ? require = J$.R(4107841, 'require', undefined, true, true) : require = J$.R(4107841, 'require', require, true, true)), false)(J$.T(4107849, 'core-js/modules/es.array.concat', 21, false));
            J$.P(4109057, J$.I(typeof module === 'undefined' ? module = J$.R(4107865, 'module', undefined, true, true) : module = J$.R(4107865, 'module', module, true, true)), 'exports', J$.T(4109049, {
                'shiftjis': J$.T(4107993, {
                    type: J$.T(4107873, '_dbcs', 21, false),
                    table: J$.T(4107929, function table() {
                        jalangiLabel0:
                            while (true) {
                                try {
                                    J$.Fe(4107913, arguments.callee, this, arguments);
                                    arguments = J$.N(4107921, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4107905, J$.F(4107897, J$.I(typeof require === 'undefined' ? require = J$.R(4107881, 'require', undefined, true, true) : require = J$.R(4107881, 'require', require, true, true)), false)(J$.T(4107889, './tables/shiftjis.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109073, J$e);
                                } finally {
                                    if (J$.Fr(4109081))
                                        continue jalangiLabel0;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false),
                    encodeAdd: J$.T(4107953, {
                        '\xA5': J$.T(4107937, 92, 22, false),
                        '\u203E': J$.T(4107945, 126, 22, false)
                    }, 11, false),
                    encodeSkipVals: J$.T(4107985, [J$.T(4107977, {
                            from: J$.T(4107961, 60736, 22, false),
                            to: J$.T(4107969, 63808, 22, false)
                        }, 11, false)], 10, false)
                }, 11, false),
                'csshiftjis': J$.T(4108001, 'shiftjis', 21, false),
                'mskanji': J$.T(4108009, 'shiftjis', 21, false),
                'sjis': J$.T(4108017, 'shiftjis', 21, false),
                'windows31j': J$.T(4108025, 'shiftjis', 21, false),
                'ms31j': J$.T(4108033, 'shiftjis', 21, false),
                'xsjis': J$.T(4108041, 'shiftjis', 21, false),
                'windows932': J$.T(4108049, 'shiftjis', 21, false),
                'ms932': J$.T(4108057, 'shiftjis', 21, false),
                '932': J$.T(4108065, 'shiftjis', 21, false),
                'cp932': J$.T(4108073, 'shiftjis', 21, false),
                'eucjp': J$.T(4108169, {
                    type: J$.T(4108081, '_dbcs', 21, false),
                    table: J$.T(4108137, function table() {
                        jalangiLabel1:
                            while (true) {
                                try {
                                    J$.Fe(4108121, arguments.callee, this, arguments);
                                    arguments = J$.N(4108129, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108113, J$.F(4108105, J$.I(typeof require === 'undefined' ? require = J$.R(4108089, 'require', undefined, true, true) : require = J$.R(4108089, 'require', require, true, true)), false)(J$.T(4108097, './tables/eucjp.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109089, J$e);
                                } finally {
                                    if (J$.Fr(4109097))
                                        continue jalangiLabel1;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false),
                    encodeAdd: J$.T(4108161, {
                        '\xA5': J$.T(4108145, 92, 22, false),
                        '\u203E': J$.T(4108153, 126, 22, false)
                    }, 11, false)
                }, 11, false),
                'gb2312': J$.T(4108177, 'cp936', 21, false),
                'gb231280': J$.T(4108185, 'cp936', 21, false),
                'gb23121980': J$.T(4108193, 'cp936', 21, false),
                'csgb2312': J$.T(4108201, 'cp936', 21, false),
                'csiso58gb231280': J$.T(4108209, 'cp936', 21, false),
                'euccn': J$.T(4108217, 'cp936', 21, false),
                'windows936': J$.T(4108225, 'cp936', 21, false),
                'ms936': J$.T(4108233, 'cp936', 21, false),
                '936': J$.T(4108241, 'cp936', 21, false),
                'cp936': J$.T(4108313, {
                    type: J$.T(4108249, '_dbcs', 21, false),
                    table: J$.T(4108305, function table() {
                        jalangiLabel2:
                            while (true) {
                                try {
                                    J$.Fe(4108289, arguments.callee, this, arguments);
                                    arguments = J$.N(4108297, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108281, J$.F(4108273, J$.I(typeof require === 'undefined' ? require = J$.R(4108257, 'require', undefined, true, true) : require = J$.R(4108257, 'require', require, true, true)), false)(J$.T(4108265, './tables/cp936.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109105, J$e);
                                } finally {
                                    if (J$.Fr(4109113))
                                        continue jalangiLabel2;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                'gbk': J$.T(4108417, {
                    type: J$.T(4108321, '_dbcs', 21, false),
                    table: J$.T(4108409, function table() {
                        jalangiLabel3:
                            while (true) {
                                try {
                                    J$.Fe(4108393, arguments.callee, this, arguments);
                                    arguments = J$.N(4108401, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108385, J$.M(4108377, J$.F(4108345, J$.I(typeof require === 'undefined' ? require = J$.R(4108329, 'require', undefined, true, true) : require = J$.R(4108329, 'require', require, true, true)), false)(J$.T(4108337, './tables/cp936.json', 21, false)), 'concat', false)(J$.F(4108369, J$.I(typeof require === 'undefined' ? require = J$.R(4108353, 'require', undefined, true, true) : require = J$.R(4108353, 'require', require, true, true)), false)(J$.T(4108361, './tables/gbk-added.json', 21, false))));
                                } catch (J$e) {
                                    J$.Ex(4109121, J$e);
                                } finally {
                                    if (J$.Fr(4109129))
                                        continue jalangiLabel3;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                'xgbk': J$.T(4108425, 'gbk', 21, false),
                'isoir58': J$.T(4108433, 'gbk', 21, false),
                'gb18030': J$.T(4108625, {
                    type: J$.T(4108441, '_dbcs', 21, false),
                    table: J$.T(4108529, function table() {
                        jalangiLabel4:
                            while (true) {
                                try {
                                    J$.Fe(4108513, arguments.callee, this, arguments);
                                    arguments = J$.N(4108521, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108505, J$.M(4108497, J$.F(4108465, J$.I(typeof require === 'undefined' ? require = J$.R(4108449, 'require', undefined, true, true) : require = J$.R(4108449, 'require', require, true, true)), false)(J$.T(4108457, './tables/cp936.json', 21, false)), 'concat', false)(J$.F(4108489, J$.I(typeof require === 'undefined' ? require = J$.R(4108473, 'require', undefined, true, true) : require = J$.R(4108473, 'require', require, true, true)), false)(J$.T(4108481, './tables/gbk-added.json', 21, false))));
                                } catch (J$e) {
                                    J$.Ex(4109137, J$e);
                                } finally {
                                    if (J$.Fr(4109145))
                                        continue jalangiLabel4;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false),
                    gb18030: J$.T(4108585, function gb18030() {
                        jalangiLabel5:
                            while (true) {
                                try {
                                    J$.Fe(4108569, arguments.callee, this, arguments);
                                    arguments = J$.N(4108577, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108561, J$.F(4108553, J$.I(typeof require === 'undefined' ? require = J$.R(4108537, 'require', undefined, true, true) : require = J$.R(4108537, 'require', require, true, true)), false)(J$.T(4108545, './tables/gb18030-ranges.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109153, J$e);
                                } finally {
                                    if (J$.Fr(4109161))
                                        continue jalangiLabel5;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false),
                    encodeSkipVals: J$.T(4108601, [J$.T(4108593, 128, 22, false)], 10, false),
                    encodeAdd: J$.T(4108617, { '\u20AC': J$.T(4108609, 41699, 22, false) }, 11, false)
                }, 11, false),
                'chinese': J$.T(4108633, 'gb18030', 21, false),
                'windows949': J$.T(4108641, 'cp949', 21, false),
                'ms949': J$.T(4108649, 'cp949', 21, false),
                '949': J$.T(4108657, 'cp949', 21, false),
                'cp949': J$.T(4108729, {
                    type: J$.T(4108665, '_dbcs', 21, false),
                    table: J$.T(4108721, function table() {
                        jalangiLabel6:
                            while (true) {
                                try {
                                    J$.Fe(4108705, arguments.callee, this, arguments);
                                    arguments = J$.N(4108713, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108697, J$.F(4108689, J$.I(typeof require === 'undefined' ? require = J$.R(4108673, 'require', undefined, true, true) : require = J$.R(4108673, 'require', require, true, true)), false)(J$.T(4108681, './tables/cp949.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109169, J$e);
                                } finally {
                                    if (J$.Fr(4109177))
                                        continue jalangiLabel6;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                'cseuckr': J$.T(4108737, 'cp949', 21, false),
                'csksc56011987': J$.T(4108745, 'cp949', 21, false),
                'euckr': J$.T(4108753, 'cp949', 21, false),
                'isoir149': J$.T(4108761, 'cp949', 21, false),
                'korean': J$.T(4108769, 'cp949', 21, false),
                'ksc56011987': J$.T(4108777, 'cp949', 21, false),
                'ksc56011989': J$.T(4108785, 'cp949', 21, false),
                'ksc5601': J$.T(4108793, 'cp949', 21, false),
                'windows950': J$.T(4108801, 'cp950', 21, false),
                'ms950': J$.T(4108809, 'cp950', 21, false),
                '950': J$.T(4108817, 'cp950', 21, false),
                'cp950': J$.T(4108889, {
                    type: J$.T(4108825, '_dbcs', 21, false),
                    table: J$.T(4108881, function table() {
                        jalangiLabel7:
                            while (true) {
                                try {
                                    J$.Fe(4108865, arguments.callee, this, arguments);
                                    arguments = J$.N(4108873, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108857, J$.F(4108849, J$.I(typeof require === 'undefined' ? require = J$.R(4108833, 'require', undefined, true, true) : require = J$.R(4108833, 'require', require, true, true)), false)(J$.T(4108841, './tables/cp950.json', 21, false)));
                                } catch (J$e) {
                                    J$.Ex(4109185, J$e);
                                } finally {
                                    if (J$.Fr(4109193))
                                        continue jalangiLabel7;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false)
                }, 11, false),
                'big5': J$.T(4108897, 'big5hkscs', 21, false),
                'big5hkscs': J$.T(4109017, {
                    type: J$.T(4108905, '_dbcs', 21, false),
                    table: J$.T(4108993, function table() {
                        jalangiLabel8:
                            while (true) {
                                try {
                                    J$.Fe(4108977, arguments.callee, this, arguments);
                                    arguments = J$.N(4108985, 'arguments', arguments, true, false, false);
                                    return J$.Rt(4108969, J$.M(4108961, J$.F(4108929, J$.I(typeof require === 'undefined' ? require = J$.R(4108913, 'require', undefined, true, true) : require = J$.R(4108913, 'require', require, true, true)), false)(J$.T(4108921, './tables/cp950.json', 21, false)), 'concat', false)(J$.F(4108953, J$.I(typeof require === 'undefined' ? require = J$.R(4108937, 'require', undefined, true, true) : require = J$.R(4108937, 'require', require, true, true)), false)(J$.T(4108945, './tables/big5-added.json', 21, false))));
                                } catch (J$e) {
                                    J$.Ex(4109201, J$e);
                                } finally {
                                    if (J$.Fr(4109209))
                                        continue jalangiLabel8;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false),
                    encodeSkipVals: J$.T(4109009, [J$.T(4109001, 41676, 22, false)], 10, false)
                }, 11, false),
                'cnbig5': J$.T(4109025, 'big5hkscs', 21, false),
                'csbig5': J$.T(4109033, 'big5hkscs', 21, false),
                'xxbig5': J$.T(4109041, 'big5hkscs', 21, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(4109217, J$e);
        } finally {
            if (J$.Sr(4109225))
                continue jalangiLabel9;
            else
                break jalangiLabel9;
        }
    }
// JALANGI DO NOT INSTRUMENT

