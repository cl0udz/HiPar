J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(429529, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/safe-buffer/index.js');
            function copyProps(src, dst) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(428561, arguments.callee, this, arguments);
                            arguments = J$.N(428569, 'arguments', arguments, true, false, false);
                            src = J$.N(428577, 'src', src, true, false, false);
                            dst = J$.N(428585, 'dst', dst, true, false, false);
                            J$.N(428593, 'key', key, false, false, false);
                            for (var key in J$.H(428545, J$.R(428489, 'src', src, false, false))) {
                                J$.N(428553, 'key', key, false, true, false);
                                {
                                    {
                                        J$.P(428537, J$.R(428497, 'dst', dst, false, false), J$.R(428505, 'key', key, false, false), J$.G(428529, J$.R(428513, 'src', src, false, false), J$.R(428521, 'key', key, false, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(429585, J$e);
                        } finally {
                            if (J$.Fr(429593))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SafeBuffer(arg, encodingOrOffset, length) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(428793, arguments.callee, this, arguments);
                            arguments = J$.N(428801, 'arguments', arguments, true, false, false);
                            arg = J$.N(428809, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(428817, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(428825, 'length', length, true, false, false);
                            return J$.Rt(428785, J$.F(428777, J$.R(428745, 'Buffer', Buffer, false, true), false)(J$.R(428753, 'arg', arg, false, false), J$.R(428761, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(428769, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(429601, J$e);
                        } finally {
                            if (J$.Fr(429609))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(429537, 'buffer', buffer, false, false, false);
            J$.N(429545, 'Buffer', Buffer, false, false, false);
            copyProps = J$.N(429561, 'copyProps', J$.T(429553, copyProps, 12, false), true, false, false);
            SafeBuffer = J$.N(429577, 'SafeBuffer', J$.T(429569, SafeBuffer, 12, false), true, false, false);
            J$.T(428401, 'use strict', 21, false);
            J$.F(428425, J$.I(typeof require === 'undefined' ? require = J$.R(428409, 'require', undefined, true, true) : require = J$.R(428409, 'require', require, true, true)), false)(J$.T(428417, 'core-js/modules/es.array.fill', 21, false));
            var buffer = J$.W(428457, 'buffer', J$.F(428449, J$.I(typeof require === 'undefined' ? require = J$.R(428433, 'require', undefined, true, true) : require = J$.R(428433, 'require', require, true, true)), false)(J$.T(428441, 'buffer', 21, false)), buffer, false, true);
            var Buffer = J$.W(428481, 'Buffer', J$.G(428473, J$.R(428465, 'buffer', buffer, false, true), 'Buffer'), Buffer, false, true);
            if (J$.C(23824, J$.C(23816, J$.C(23808, J$.C(23800, J$.G(428609, J$.R(428601, 'Buffer', Buffer, false, true), 'from')) ? J$.G(428625, J$.R(428617, 'Buffer', Buffer, false, true), 'alloc') : J$._()) ? J$.G(428641, J$.R(428633, 'Buffer', Buffer, false, true), 'allocUnsafe') : J$._()) ? J$.G(428657, J$.R(428649, 'Buffer', Buffer, false, true), 'allocUnsafeSlow') : J$._())) {
                J$.P(428681, J$.I(typeof module === 'undefined' ? module = J$.R(428665, 'module', undefined, true, true) : module = J$.R(428665, 'module', module, true, true)), 'exports', J$.R(428673, 'buffer', buffer, false, true));
            } else {
                J$.F(428713, J$.R(428689, 'copyProps', copyProps, false, true), false)(J$.R(428697, 'buffer', buffer, false, true), J$.I(typeof exports === 'undefined' ? exports = J$.R(428705, 'exports', undefined, true, true) : exports = J$.R(428705, 'exports', exports, true, true)));
                J$.P(428737, J$.I(typeof exports === 'undefined' ? exports = J$.R(428721, 'exports', undefined, true, true) : exports = J$.R(428721, 'exports', exports, true, true)), 'Buffer', J$.R(428729, 'SafeBuffer', SafeBuffer, false, true));
            }
            J$.F(428857, J$.R(428833, 'copyProps', copyProps, false, true), false)(J$.R(428841, 'Buffer', Buffer, false, true), J$.R(428849, 'SafeBuffer', SafeBuffer, false, true));
            J$.P(429009, J$.R(428865, 'SafeBuffer', SafeBuffer, false, true), 'from', J$.T(429001, function (arg, encodingOrOffset, length) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(428961, arguments.callee, this, arguments);
                            arguments = J$.N(428969, 'arguments', arguments, true, false, false);
                            arg = J$.N(428977, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(428985, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(428993, 'length', length, true, false, false);
                            if (J$.C(23832, J$.B(37114, '===', J$.U(37106, 'typeof', J$.R(428873, 'arg', arg, false, false)), J$.T(428881, 'number', 21, false)))) {
                                throw J$.F(428905, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(428889, 'TypeError', undefined, true, true) : TypeError = J$.R(428889, 'TypeError', TypeError, true, true)), true)(J$.T(428897, 'Argument must not be a number', 21, false));
                            }
                            return J$.Rt(428953, J$.F(428945, J$.R(428913, 'Buffer', Buffer, false, true), false)(J$.R(428921, 'arg', arg, false, false), J$.R(428929, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(428937, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(429617, J$e);
                        } finally {
                            if (J$.Fr(429625))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(429281, J$.R(429017, 'SafeBuffer', SafeBuffer, false, true), 'alloc', J$.T(429273, function (size, fill, encoding) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(429225, arguments.callee, this, arguments);
                            arguments = J$.N(429233, 'arguments', arguments, true, false, false);
                            size = J$.N(429241, 'size', size, true, false, false);
                            fill = J$.N(429249, 'fill', fill, true, false, false);
                            encoding = J$.N(429257, 'encoding', encoding, true, false, false);
                            J$.N(429265, 'buf', buf, false, false, false);
                            if (J$.C(23840, J$.B(37130, '!==', J$.U(37122, 'typeof', J$.R(429025, 'size', size, false, false)), J$.T(429033, 'number', 21, false)))) {
                                throw J$.F(429057, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(429041, 'TypeError', undefined, true, true) : TypeError = J$.R(429041, 'TypeError', TypeError, true, true)), true)(J$.T(429049, 'Argument must be a number', 21, false));
                            }
                            var buf = J$.W(429089, 'buf', J$.F(429081, J$.R(429065, 'Buffer', Buffer, false, true), false)(J$.R(429073, 'size', size, false, false)), buf, false, false);
                            if (J$.C(23856, J$.B(37138, '!==', J$.R(429097, 'fill', fill, false, false), J$.T(429105, undefined, 24, false)))) {
                                if (J$.C(23848, J$.B(37154, '===', J$.U(37146, 'typeof', J$.R(429113, 'encoding', encoding, false, false)), J$.T(429121, 'string', 21, false)))) {
                                    J$.M(429153, J$.R(429129, 'buf', buf, false, false), 'fill', false)(J$.R(429137, 'fill', fill, false, false), J$.R(429145, 'encoding', encoding, false, false));
                                } else {
                                    J$.M(429177, J$.R(429161, 'buf', buf, false, false), 'fill', false)(J$.R(429169, 'fill', fill, false, false));
                                }
                            } else {
                                J$.M(429201, J$.R(429185, 'buf', buf, false, false), 'fill', false)(J$.T(429193, 0, 22, false));
                            }
                            return J$.Rt(429217, J$.R(429209, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(429633, J$e);
                        } finally {
                            if (J$.Fr(429641))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(429401, J$.R(429289, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafe', J$.T(429393, function (size) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(429369, arguments.callee, this, arguments);
                            arguments = J$.N(429377, 'arguments', arguments, true, false, false);
                            size = J$.N(429385, 'size', size, true, false, false);
                            if (J$.C(23864, J$.B(37170, '!==', J$.U(37162, 'typeof', J$.R(429297, 'size', size, false, false)), J$.T(429305, 'number', 21, false)))) {
                                throw J$.F(429329, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(429313, 'TypeError', undefined, true, true) : TypeError = J$.R(429313, 'TypeError', TypeError, true, true)), true)(J$.T(429321, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(429361, J$.F(429353, J$.R(429337, 'Buffer', Buffer, false, true), false)(J$.R(429345, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(429649, J$e);
                        } finally {
                            if (J$.Fr(429657))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(429521, J$.R(429409, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafeSlow', J$.T(429513, function (size) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(429489, arguments.callee, this, arguments);
                            arguments = J$.N(429497, 'arguments', arguments, true, false, false);
                            size = J$.N(429505, 'size', size, true, false, false);
                            if (J$.C(23872, J$.B(37186, '!==', J$.U(37178, 'typeof', J$.R(429417, 'size', size, false, false)), J$.T(429425, 'number', 21, false)))) {
                                throw J$.F(429449, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(429433, 'TypeError', undefined, true, true) : TypeError = J$.R(429433, 'TypeError', TypeError, true, true)), true)(J$.T(429441, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(429481, J$.M(429473, J$.R(429457, 'buffer', buffer, false, true), 'SlowBuffer', false)(J$.R(429465, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(429665, J$e);
                        } finally {
                            if (J$.Fr(429673))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(429681, J$e);
        } finally {
            if (J$.Sr(429689))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

