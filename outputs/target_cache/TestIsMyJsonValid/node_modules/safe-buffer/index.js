J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(4345161, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/safe-buffer/index.js');
            function copyProps(src, dst) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(4344193, arguments.callee, this, arguments);
                            arguments = J$.N(4344201, 'arguments', arguments, true, false, false);
                            src = J$.N(4344209, 'src', src, true, false, false);
                            dst = J$.N(4344217, 'dst', dst, true, false, false);
                            J$.N(4344225, 'key', key, false, false, false);
                            for (var key in J$.H(4344177, J$.R(4344121, 'src', src, false, false))) {
                                J$.N(4344185, 'key', key, false, true, false);
                                {
                                    {
                                        J$.P(4344169, J$.R(4344129, 'dst', dst, false, false), J$.R(4344137, 'key', key, false, false), J$.G(4344161, J$.R(4344145, 'src', src, false, false), J$.R(4344153, 'key', key, false, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(4345217, J$e);
                        } finally {
                            if (J$.Fr(4345225))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SafeBuffer(arg, encodingOrOffset, length) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4344425, arguments.callee, this, arguments);
                            arguments = J$.N(4344433, 'arguments', arguments, true, false, false);
                            arg = J$.N(4344441, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(4344449, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(4344457, 'length', length, true, false, false);
                            return J$.Rt(4344417, J$.F(4344409, J$.R(4344377, 'Buffer', Buffer, false, true), false)(J$.R(4344385, 'arg', arg, false, false), J$.R(4344393, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(4344401, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(4345233, J$e);
                        } finally {
                            if (J$.Fr(4345241))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4345169, 'buffer', buffer, false, false, false);
            J$.N(4345177, 'Buffer', Buffer, false, false, false);
            copyProps = J$.N(4345193, 'copyProps', J$.T(4345185, copyProps, 12, false), true, false, false);
            SafeBuffer = J$.N(4345209, 'SafeBuffer', J$.T(4345201, SafeBuffer, 12, false), true, false, false);
            J$.T(4344033, 'use strict', 21, false);
            J$.F(4344057, J$.I(typeof require === 'undefined' ? require = J$.R(4344041, 'require', undefined, true, true) : require = J$.R(4344041, 'require', require, true, true)), false)(J$.T(4344049, 'core-js/modules/es.array.fill', 21, false));
            var buffer = J$.W(4344089, 'buffer', J$.F(4344081, J$.I(typeof require === 'undefined' ? require = J$.R(4344065, 'require', undefined, true, true) : require = J$.R(4344065, 'require', require, true, true)), false)(J$.T(4344073, 'buffer', 21, false)), buffer, false, true);
            var Buffer = J$.W(4344113, 'Buffer', J$.G(4344105, J$.R(4344097, 'buffer', buffer, false, true), 'Buffer'), Buffer, false, true);
            if (J$.C(229952, J$.C(229944, J$.C(229936, J$.C(229928, J$.G(4344241, J$.R(4344233, 'Buffer', Buffer, false, true), 'from')) ? J$.G(4344257, J$.R(4344249, 'Buffer', Buffer, false, true), 'alloc') : J$._()) ? J$.G(4344273, J$.R(4344265, 'Buffer', Buffer, false, true), 'allocUnsafe') : J$._()) ? J$.G(4344289, J$.R(4344281, 'Buffer', Buffer, false, true), 'allocUnsafeSlow') : J$._())) {
                J$.P(4344313, J$.I(typeof module === 'undefined' ? module = J$.R(4344297, 'module', undefined, true, true) : module = J$.R(4344297, 'module', module, true, true)), 'exports', J$.R(4344305, 'buffer', buffer, false, true));
            } else {
                J$.F(4344345, J$.R(4344321, 'copyProps', copyProps, false, true), false)(J$.R(4344329, 'buffer', buffer, false, true), J$.I(typeof exports === 'undefined' ? exports = J$.R(4344337, 'exports', undefined, true, true) : exports = J$.R(4344337, 'exports', exports, true, true)));
                J$.P(4344369, J$.I(typeof exports === 'undefined' ? exports = J$.R(4344353, 'exports', undefined, true, true) : exports = J$.R(4344353, 'exports', exports, true, true)), 'Buffer', J$.R(4344361, 'SafeBuffer', SafeBuffer, false, true));
            }
            J$.F(4344489, J$.R(4344465, 'copyProps', copyProps, false, true), false)(J$.R(4344473, 'Buffer', Buffer, false, true), J$.R(4344481, 'SafeBuffer', SafeBuffer, false, true));
            J$.P(4344641, J$.R(4344497, 'SafeBuffer', SafeBuffer, false, true), 'from', J$.T(4344633, function (arg, encodingOrOffset, length) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4344593, arguments.callee, this, arguments);
                            arguments = J$.N(4344601, 'arguments', arguments, true, false, false);
                            arg = J$.N(4344609, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(4344617, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(4344625, 'length', length, true, false, false);
                            if (J$.C(229960, J$.B(420042, '===', J$.U(420034, 'typeof', J$.R(4344505, 'arg', arg, false, false)), J$.T(4344513, 'number', 21, false)))) {
                                throw J$.F(4344537, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4344521, 'TypeError', undefined, true, true) : TypeError = J$.R(4344521, 'TypeError', TypeError, true, true)), true)(J$.T(4344529, 'Argument must not be a number', 21, false));
                            }
                            return J$.Rt(4344585, J$.F(4344577, J$.R(4344545, 'Buffer', Buffer, false, true), false)(J$.R(4344553, 'arg', arg, false, false), J$.R(4344561, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(4344569, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(4345249, J$e);
                        } finally {
                            if (J$.Fr(4345257))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4344913, J$.R(4344649, 'SafeBuffer', SafeBuffer, false, true), 'alloc', J$.T(4344905, function (size, fill, encoding) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(4344857, arguments.callee, this, arguments);
                            arguments = J$.N(4344865, 'arguments', arguments, true, false, false);
                            size = J$.N(4344873, 'size', size, true, false, false);
                            fill = J$.N(4344881, 'fill', fill, true, false, false);
                            encoding = J$.N(4344889, 'encoding', encoding, true, false, false);
                            J$.N(4344897, 'buf', buf, false, false, false);
                            if (J$.C(229968, J$.B(420058, '!==', J$.U(420050, 'typeof', J$.R(4344657, 'size', size, false, false)), J$.T(4344665, 'number', 21, false)))) {
                                throw J$.F(4344689, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4344673, 'TypeError', undefined, true, true) : TypeError = J$.R(4344673, 'TypeError', TypeError, true, true)), true)(J$.T(4344681, 'Argument must be a number', 21, false));
                            }
                            var buf = J$.W(4344721, 'buf', J$.F(4344713, J$.R(4344697, 'Buffer', Buffer, false, true), false)(J$.R(4344705, 'size', size, false, false)), buf, false, false);
                            if (J$.C(229984, J$.B(420066, '!==', J$.R(4344729, 'fill', fill, false, false), J$.T(4344737, undefined, 24, false)))) {
                                if (J$.C(229976, J$.B(420082, '===', J$.U(420074, 'typeof', J$.R(4344745, 'encoding', encoding, false, false)), J$.T(4344753, 'string', 21, false)))) {
                                    J$.M(4344785, J$.R(4344761, 'buf', buf, false, false), 'fill', false)(J$.R(4344769, 'fill', fill, false, false), J$.R(4344777, 'encoding', encoding, false, false));
                                } else {
                                    J$.M(4344809, J$.R(4344793, 'buf', buf, false, false), 'fill', false)(J$.R(4344801, 'fill', fill, false, false));
                                }
                            } else {
                                J$.M(4344833, J$.R(4344817, 'buf', buf, false, false), 'fill', false)(J$.T(4344825, 0, 22, false));
                            }
                            return J$.Rt(4344849, J$.R(4344841, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(4345265, J$e);
                        } finally {
                            if (J$.Fr(4345273))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4345033, J$.R(4344921, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafe', J$.T(4345025, function (size) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(4345001, arguments.callee, this, arguments);
                            arguments = J$.N(4345009, 'arguments', arguments, true, false, false);
                            size = J$.N(4345017, 'size', size, true, false, false);
                            if (J$.C(229992, J$.B(420098, '!==', J$.U(420090, 'typeof', J$.R(4344929, 'size', size, false, false)), J$.T(4344937, 'number', 21, false)))) {
                                throw J$.F(4344961, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4344945, 'TypeError', undefined, true, true) : TypeError = J$.R(4344945, 'TypeError', TypeError, true, true)), true)(J$.T(4344953, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(4344993, J$.F(4344985, J$.R(4344969, 'Buffer', Buffer, false, true), false)(J$.R(4344977, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(4345281, J$e);
                        } finally {
                            if (J$.Fr(4345289))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(4345153, J$.R(4345041, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafeSlow', J$.T(4345145, function (size) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(4345121, arguments.callee, this, arguments);
                            arguments = J$.N(4345129, 'arguments', arguments, true, false, false);
                            size = J$.N(4345137, 'size', size, true, false, false);
                            if (J$.C(230000, J$.B(420114, '!==', J$.U(420106, 'typeof', J$.R(4345049, 'size', size, false, false)), J$.T(4345057, 'number', 21, false)))) {
                                throw J$.F(4345081, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(4345065, 'TypeError', undefined, true, true) : TypeError = J$.R(4345065, 'TypeError', TypeError, true, true)), true)(J$.T(4345073, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(4345113, J$.M(4345105, J$.R(4345089, 'buffer', buffer, false, true), 'SlowBuffer', false)(J$.R(4345097, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(4345297, J$e);
                        } finally {
                            if (J$.Fr(4345305))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(4345313, J$e);
        } finally {
            if (J$.Sr(4345321))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

