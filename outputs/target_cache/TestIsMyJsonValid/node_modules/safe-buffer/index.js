J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(386657, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/safe-buffer/index.js');
            function copyProps(src, dst) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(385689, arguments.callee, this, arguments);
                            arguments = J$.N(385697, 'arguments', arguments, true, false, false);
                            src = J$.N(385705, 'src', src, true, false, false);
                            dst = J$.N(385713, 'dst', dst, true, false, false);
                            J$.N(385721, 'key', key, false, false, false);
                            for (var key in J$.H(385673, J$.R(385617, 'src', src, false, false))) {
                                J$.N(385681, 'key', key, false, true, false);
                                {
                                    {
                                        J$.P(385665, J$.R(385625, 'dst', dst, false, false), J$.R(385633, 'key', key, false, false), J$.G(385657, J$.R(385641, 'src', src, false, false), J$.R(385649, 'key', key, false, false)));
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(386713, J$e);
                        } finally {
                            if (J$.Fr(386721))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SafeBuffer(arg, encodingOrOffset, length) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(385921, arguments.callee, this, arguments);
                            arguments = J$.N(385929, 'arguments', arguments, true, false, false);
                            arg = J$.N(385937, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(385945, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(385953, 'length', length, true, false, false);
                            return J$.Rt(385913, J$.F(385905, J$.R(385873, 'Buffer', Buffer, false, true), false)(J$.R(385881, 'arg', arg, false, false), J$.R(385889, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(385897, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(386729, J$e);
                        } finally {
                            if (J$.Fr(386737))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(386665, 'buffer', buffer, false, false, false);
            J$.N(386673, 'Buffer', Buffer, false, false, false);
            copyProps = J$.N(386689, 'copyProps', J$.T(386681, copyProps, 12, false), true, false, false);
            SafeBuffer = J$.N(386705, 'SafeBuffer', J$.T(386697, SafeBuffer, 12, false), true, false, false);
            J$.T(385529, 'use strict', 21, false);
            J$.F(385553, J$.I(typeof require === 'undefined' ? require = J$.R(385537, 'require', undefined, true, true) : require = J$.R(385537, 'require', require, true, true)), false)(J$.T(385545, 'core-js/modules/es.array.fill', 21, false));
            var buffer = J$.W(385585, 'buffer', J$.F(385577, J$.I(typeof require === 'undefined' ? require = J$.R(385561, 'require', undefined, true, true) : require = J$.R(385561, 'require', require, true, true)), false)(J$.T(385569, 'buffer', 21, false)), buffer, false, true);
            var Buffer = J$.W(385609, 'Buffer', J$.G(385601, J$.R(385593, 'buffer', buffer, false, true), 'Buffer'), Buffer, false, true);
            if (J$.C(21552, J$.C(21544, J$.C(21536, J$.C(21528, J$.G(385737, J$.R(385729, 'Buffer', Buffer, false, true), 'from')) ? J$.G(385753, J$.R(385745, 'Buffer', Buffer, false, true), 'alloc') : J$._()) ? J$.G(385769, J$.R(385761, 'Buffer', Buffer, false, true), 'allocUnsafe') : J$._()) ? J$.G(385785, J$.R(385777, 'Buffer', Buffer, false, true), 'allocUnsafeSlow') : J$._())) {
                J$.P(385809, J$.I(typeof module === 'undefined' ? module = J$.R(385793, 'module', undefined, true, true) : module = J$.R(385793, 'module', module, true, true)), 'exports', J$.R(385801, 'buffer', buffer, false, true));
            } else {
                J$.F(385841, J$.R(385817, 'copyProps', copyProps, false, true), false)(J$.R(385825, 'buffer', buffer, false, true), J$.I(typeof exports === 'undefined' ? exports = J$.R(385833, 'exports', undefined, true, true) : exports = J$.R(385833, 'exports', exports, true, true)));
                J$.P(385865, J$.I(typeof exports === 'undefined' ? exports = J$.R(385849, 'exports', undefined, true, true) : exports = J$.R(385849, 'exports', exports, true, true)), 'Buffer', J$.R(385857, 'SafeBuffer', SafeBuffer, false, true));
            }
            J$.F(385985, J$.R(385961, 'copyProps', copyProps, false, true), false)(J$.R(385969, 'Buffer', Buffer, false, true), J$.R(385977, 'SafeBuffer', SafeBuffer, false, true));
            J$.P(386137, J$.R(385993, 'SafeBuffer', SafeBuffer, false, true), 'from', J$.T(386129, function (arg, encodingOrOffset, length) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(386089, arguments.callee, this, arguments);
                            arguments = J$.N(386097, 'arguments', arguments, true, false, false);
                            arg = J$.N(386105, 'arg', arg, true, false, false);
                            encodingOrOffset = J$.N(386113, 'encodingOrOffset', encodingOrOffset, true, false, false);
                            length = J$.N(386121, 'length', length, true, false, false);
                            if (J$.C(21560, J$.B(33994, '===', J$.U(33986, 'typeof', J$.R(386001, 'arg', arg, false, false)), J$.T(386009, 'number', 21, false)))) {
                                throw J$.F(386033, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(386017, 'TypeError', undefined, true, true) : TypeError = J$.R(386017, 'TypeError', TypeError, true, true)), true)(J$.T(386025, 'Argument must not be a number', 21, false));
                            }
                            return J$.Rt(386081, J$.F(386073, J$.R(386041, 'Buffer', Buffer, false, true), false)(J$.R(386049, 'arg', arg, false, false), J$.R(386057, 'encodingOrOffset', encodingOrOffset, false, false), J$.R(386065, 'length', length, false, false)));
                        } catch (J$e) {
                            J$.Ex(386745, J$e);
                        } finally {
                            if (J$.Fr(386753))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(386409, J$.R(386145, 'SafeBuffer', SafeBuffer, false, true), 'alloc', J$.T(386401, function (size, fill, encoding) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(386353, arguments.callee, this, arguments);
                            arguments = J$.N(386361, 'arguments', arguments, true, false, false);
                            size = J$.N(386369, 'size', size, true, false, false);
                            fill = J$.N(386377, 'fill', fill, true, false, false);
                            encoding = J$.N(386385, 'encoding', encoding, true, false, false);
                            J$.N(386393, 'buf', buf, false, false, false);
                            if (J$.C(21568, J$.B(34010, '!==', J$.U(34002, 'typeof', J$.R(386153, 'size', size, false, false)), J$.T(386161, 'number', 21, false)))) {
                                throw J$.F(386185, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(386169, 'TypeError', undefined, true, true) : TypeError = J$.R(386169, 'TypeError', TypeError, true, true)), true)(J$.T(386177, 'Argument must be a number', 21, false));
                            }
                            var buf = J$.W(386217, 'buf', J$.F(386209, J$.R(386193, 'Buffer', Buffer, false, true), false)(J$.R(386201, 'size', size, false, false)), buf, false, false);
                            if (J$.C(21584, J$.B(34018, '!==', J$.R(386225, 'fill', fill, false, false), J$.T(386233, undefined, 24, false)))) {
                                if (J$.C(21576, J$.B(34034, '===', J$.U(34026, 'typeof', J$.R(386241, 'encoding', encoding, false, false)), J$.T(386249, 'string', 21, false)))) {
                                    J$.M(386281, J$.R(386257, 'buf', buf, false, false), 'fill', false)(J$.R(386265, 'fill', fill, false, false), J$.R(386273, 'encoding', encoding, false, false));
                                } else {
                                    J$.M(386305, J$.R(386289, 'buf', buf, false, false), 'fill', false)(J$.R(386297, 'fill', fill, false, false));
                                }
                            } else {
                                J$.M(386329, J$.R(386313, 'buf', buf, false, false), 'fill', false)(J$.T(386321, 0, 22, false));
                            }
                            return J$.Rt(386345, J$.R(386337, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(386761, J$e);
                        } finally {
                            if (J$.Fr(386769))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(386529, J$.R(386417, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafe', J$.T(386521, function (size) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(386497, arguments.callee, this, arguments);
                            arguments = J$.N(386505, 'arguments', arguments, true, false, false);
                            size = J$.N(386513, 'size', size, true, false, false);
                            if (J$.C(21592, J$.B(34050, '!==', J$.U(34042, 'typeof', J$.R(386425, 'size', size, false, false)), J$.T(386433, 'number', 21, false)))) {
                                throw J$.F(386457, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(386441, 'TypeError', undefined, true, true) : TypeError = J$.R(386441, 'TypeError', TypeError, true, true)), true)(J$.T(386449, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(386489, J$.F(386481, J$.R(386465, 'Buffer', Buffer, false, true), false)(J$.R(386473, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(386777, J$e);
                        } finally {
                            if (J$.Fr(386785))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(386649, J$.R(386537, 'SafeBuffer', SafeBuffer, false, true), 'allocUnsafeSlow', J$.T(386641, function (size) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(386617, arguments.callee, this, arguments);
                            arguments = J$.N(386625, 'arguments', arguments, true, false, false);
                            size = J$.N(386633, 'size', size, true, false, false);
                            if (J$.C(21600, J$.B(34066, '!==', J$.U(34058, 'typeof', J$.R(386545, 'size', size, false, false)), J$.T(386553, 'number', 21, false)))) {
                                throw J$.F(386577, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(386561, 'TypeError', undefined, true, true) : TypeError = J$.R(386561, 'TypeError', TypeError, true, true)), true)(J$.T(386569, 'Argument must be a number', 21, false));
                            }
                            return J$.Rt(386609, J$.M(386601, J$.R(386585, 'buffer', buffer, false, true), 'SlowBuffer', false)(J$.R(386593, 'size', size, false, false)));
                        } catch (J$e) {
                            J$.Ex(386793, J$e);
                        } finally {
                            if (J$.Fr(386801))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(386809, J$e);
        } finally {
            if (J$.Sr(386817))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

