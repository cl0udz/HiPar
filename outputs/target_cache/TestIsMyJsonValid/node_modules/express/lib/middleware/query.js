J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(74737, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/express/lib/middleware/query.js');
            J$.N(74745, 'merge', merge, false, false, false);
            J$.N(74753, 'parseUrl', parseUrl, false, false, false);
            J$.N(74761, 'qs', qs, false, false, false);
            J$.T(74209, 'use strict', 21, false);
            var merge = J$.W(74241, 'merge', J$.F(74233, J$.I(typeof require === 'undefined' ? require = J$.R(74217, 'require', undefined, true, true) : require = J$.R(74217, 'require', require, true, true)), false)(J$.T(74225, 'utils-merge', 21, false)), merge, false, true);
            var parseUrl = J$.W(74273, 'parseUrl', J$.F(74265, J$.I(typeof require === 'undefined' ? require = J$.R(74249, 'require', undefined, true, true) : require = J$.R(74249, 'require', require, true, true)), false)(J$.T(74257, 'parseurl', 21, false)), parseUrl, false, true);
            var qs = J$.W(74305, 'qs', J$.F(74297, J$.I(typeof require === 'undefined' ? require = J$.R(74281, 'require', undefined, true, true) : require = J$.R(74281, 'require', require, true, true)), false)(J$.T(74289, 'qs', 21, false)), qs, false, true);
            J$.P(74729, J$.I(typeof module === 'undefined' ? module = J$.R(74313, 'module', undefined, true, true) : module = J$.R(74313, 'module', module, true, true)), 'exports', J$.T(74721, function query(options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(74681, arguments.callee, this, arguments);
                            arguments = J$.N(74689, 'arguments', arguments, true, false, false);
                            options = J$.N(74697, 'options', options, true, false, false);
                            J$.N(74705, 'opts', opts, false, false, false);
                            J$.N(74713, 'queryparse', queryparse, false, false, false);
                            var opts = J$.W(74353, 'opts', J$.F(74345, J$.R(74321, 'merge', merge, false, true), false)(J$.T(74329, {}, 11, false), J$.R(74337, 'options', options, false, false)), opts, false, false);
                            var queryparse = J$.W(74377, 'queryparse', J$.G(74369, J$.R(74361, 'qs', qs, false, true), 'parse'), queryparse, false, false);
                            if (J$.C(4728, J$.B(6402, '===', J$.U(6394, 'typeof', J$.R(74385, 'options', options, false, false)), J$.T(74393, 'function', 21, false)))) {
                                queryparse = J$.W(74409, 'queryparse', J$.R(74401, 'options', options, false, false), queryparse, false, false);
                                opts = J$.W(74425, 'opts', J$.T(74417, undefined, 24, false), opts, false, false);
                            }
                            if (J$.C(4744, J$.C(4736, J$.B(6410, '!==', J$.R(74433, 'opts', opts, false, false), J$.T(74441, undefined, 24, false))) ? J$.B(6418, '===', J$.G(74457, J$.R(74449, 'opts', opts, false, false), 'allowPrototypes'), J$.T(74465, undefined, 24, false)) : J$._())) {
                                J$.P(74489, J$.R(74473, 'opts', opts, false, false), 'allowPrototypes', J$.T(74481, true, 23, false));
                            }
                            return J$.Rt(74673, J$.T(74665, function query(req, res, next) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(74617, arguments.callee, this, arguments);
                                            arguments = J$.N(74625, 'arguments', arguments, true, false, false);
                                            req = J$.N(74633, 'req', req, true, false, false);
                                            res = J$.N(74641, 'res', res, true, false, false);
                                            next = J$.N(74649, 'next', next, true, false, false);
                                            J$.N(74657, 'val', val, false, false, false);
                                            if (J$.C(4752, J$.U(6426, '!', J$.G(74505, J$.R(74497, 'req', req, false, false), 'query')))) {
                                                var val = J$.W(74545, 'val', J$.G(74537, J$.F(74529, J$.R(74513, 'parseUrl', parseUrl, false, true), false)(J$.R(74521, 'req', req, false, false)), 'query'), val, false, false);
                                                J$.P(74593, J$.R(74553, 'req', req, false, false), 'query', J$.F(74585, J$.R(74561, 'queryparse', queryparse, false, false), false)(J$.R(74569, 'val', val, false, false), J$.R(74577, 'opts', opts, false, false)));
                                            }
                                            J$.F(74609, J$.R(74601, 'next', next, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(74769, J$e);
                                        } finally {
                                            if (J$.Fr(74777))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(74785, J$e);
                        } finally {
                            if (J$.Fr(74793))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(74801, J$e);
        } finally {
            if (J$.Sr(74809))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

