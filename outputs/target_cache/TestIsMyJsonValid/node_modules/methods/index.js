J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(4210561, '/home/james/nodejs/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/methods/index.js');
            function getCurrentNodeMethods() {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(4210305, arguments.callee, this, arguments);
                            arguments = J$.N(4210313, 'arguments', arguments, true, false, false);
                            return J$.Rt(4210297, J$.C(222936, J$.G(4210209, J$.R(4210201, 'http', http, false, true), 'METHODS')) ? J$.M(4210289, J$.G(4210225, J$.R(4210217, 'http', http, false, true), 'METHODS'), 'map', false)(J$.T(4210281, function lowerCaseMethod(method) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(4210257, arguments.callee, this, arguments);
                                            arguments = J$.N(4210265, 'arguments', arguments, true, false, false);
                                            method = J$.N(4210273, 'method', method, true, false, false);
                                            return J$.Rt(4210249, J$.M(4210241, J$.R(4210233, 'method', method, false, false), 'toLowerCase', false)());
                                        } catch (J$e) {
                                            J$.Ex(4210609, J$e);
                                        } finally {
                                            if (J$.Fr(4210617))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)) : J$._());
                        } catch (J$e) {
                            J$.Ex(4210625, J$e);
                        } finally {
                            if (J$.Fr(4210633))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getBasicNodeMethods() {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(4210545, arguments.callee, this, arguments);
                            arguments = J$.N(4210553, 'arguments', arguments, true, false, false);
                            return J$.Rt(4210537, J$.T(4210529, [
                                J$.T(4210321, 'get', 21, false),
                                J$.T(4210329, 'post', 21, false),
                                J$.T(4210337, 'put', 21, false),
                                J$.T(4210345, 'head', 21, false),
                                J$.T(4210353, 'delete', 21, false),
                                J$.T(4210361, 'options', 21, false),
                                J$.T(4210369, 'trace', 21, false),
                                J$.T(4210377, 'copy', 21, false),
                                J$.T(4210385, 'lock', 21, false),
                                J$.T(4210393, 'mkcol', 21, false),
                                J$.T(4210401, 'move', 21, false),
                                J$.T(4210409, 'purge', 21, false),
                                J$.T(4210417, 'propfind', 21, false),
                                J$.T(4210425, 'proppatch', 21, false),
                                J$.T(4210433, 'unlock', 21, false),
                                J$.T(4210441, 'report', 21, false),
                                J$.T(4210449, 'mkactivity', 21, false),
                                J$.T(4210457, 'checkout', 21, false),
                                J$.T(4210465, 'merge', 21, false),
                                J$.T(4210473, 'm-search', 21, false),
                                J$.T(4210481, 'notify', 21, false),
                                J$.T(4210489, 'subscribe', 21, false),
                                J$.T(4210497, 'unsubscribe', 21, false),
                                J$.T(4210505, 'patch', 21, false),
                                J$.T(4210513, 'search', 21, false),
                                J$.T(4210521, 'connect', 21, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(4210641, J$e);
                        } finally {
                            if (J$.Fr(4210649))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4210569, 'http', http, false, false, false);
            getCurrentNodeMethods = J$.N(4210585, 'getCurrentNodeMethods', J$.T(4210577, getCurrentNodeMethods, 12, false), true, false, false);
            getBasicNodeMethods = J$.N(4210601, 'getBasicNodeMethods', J$.T(4210593, getBasicNodeMethods, 12, false), true, false, false);
            J$.T(4210089, 'use strict', 21, false);
            J$.F(4210113, J$.I(typeof require === 'undefined' ? require = J$.R(4210097, 'require', undefined, true, true) : require = J$.R(4210097, 'require', require, true, true)), false)(J$.T(4210105, 'core-js/modules/es.array.map', 21, false));
            var http = J$.W(4210145, 'http', J$.F(4210137, J$.I(typeof require === 'undefined' ? require = J$.R(4210121, 'require', undefined, true, true) : require = J$.R(4210121, 'require', require, true, true)), false)(J$.T(4210129, 'http', 21, false)), http, false, true);
            J$.P(4210193, J$.I(typeof module === 'undefined' ? module = J$.R(4210153, 'module', undefined, true, true) : module = J$.R(4210153, 'module', module, true, true)), 'exports', J$.C(222928, J$.F(4210169, J$.R(4210161, 'getCurrentNodeMethods', getCurrentNodeMethods, false, true), false)()) ? J$._() : J$.F(4210185, J$.R(4210177, 'getBasicNodeMethods', getBasicNodeMethods, false, true), false)());
        } catch (J$e) {
            J$.Ex(4210657, J$e);
        } finally {
            if (J$.Sr(4210665))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

