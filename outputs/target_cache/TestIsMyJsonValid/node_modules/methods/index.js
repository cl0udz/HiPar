J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(294929, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/methods/index.js');
            function getCurrentNodeMethods() {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(294673, arguments.callee, this, arguments);
                            arguments = J$.N(294681, 'arguments', arguments, true, false, false);
                            return J$.Rt(294665, J$.C(16808, J$.G(294577, J$.R(294569, 'http', http, false, true), 'METHODS')) ? J$.M(294657, J$.G(294593, J$.R(294585, 'http', http, false, true), 'METHODS'), 'map', false)(J$.T(294649, function lowerCaseMethod(method) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(294625, arguments.callee, this, arguments);
                                            arguments = J$.N(294633, 'arguments', arguments, true, false, false);
                                            method = J$.N(294641, 'method', method, true, false, false);
                                            return J$.Rt(294617, J$.M(294609, J$.R(294601, 'method', method, false, false), 'toLowerCase', false)());
                                        } catch (J$e) {
                                            J$.Ex(294977, J$e);
                                        } finally {
                                            if (J$.Fr(294985))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)) : J$._());
                        } catch (J$e) {
                            J$.Ex(294993, J$e);
                        } finally {
                            if (J$.Fr(295001))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getBasicNodeMethods() {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(294913, arguments.callee, this, arguments);
                            arguments = J$.N(294921, 'arguments', arguments, true, false, false);
                            return J$.Rt(294905, J$.T(294897, [
                                J$.T(294689, 'get', 21, false),
                                J$.T(294697, 'post', 21, false),
                                J$.T(294705, 'put', 21, false),
                                J$.T(294713, 'head', 21, false),
                                J$.T(294721, 'delete', 21, false),
                                J$.T(294729, 'options', 21, false),
                                J$.T(294737, 'trace', 21, false),
                                J$.T(294745, 'copy', 21, false),
                                J$.T(294753, 'lock', 21, false),
                                J$.T(294761, 'mkcol', 21, false),
                                J$.T(294769, 'move', 21, false),
                                J$.T(294777, 'purge', 21, false),
                                J$.T(294785, 'propfind', 21, false),
                                J$.T(294793, 'proppatch', 21, false),
                                J$.T(294801, 'unlock', 21, false),
                                J$.T(294809, 'report', 21, false),
                                J$.T(294817, 'mkactivity', 21, false),
                                J$.T(294825, 'checkout', 21, false),
                                J$.T(294833, 'merge', 21, false),
                                J$.T(294841, 'm-search', 21, false),
                                J$.T(294849, 'notify', 21, false),
                                J$.T(294857, 'subscribe', 21, false),
                                J$.T(294865, 'unsubscribe', 21, false),
                                J$.T(294873, 'patch', 21, false),
                                J$.T(294881, 'search', 21, false),
                                J$.T(294889, 'connect', 21, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(295009, J$e);
                        } finally {
                            if (J$.Fr(295017))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(294937, 'http', http, false, false, false);
            getCurrentNodeMethods = J$.N(294953, 'getCurrentNodeMethods', J$.T(294945, getCurrentNodeMethods, 12, false), true, false, false);
            getBasicNodeMethods = J$.N(294969, 'getBasicNodeMethods', J$.T(294961, getBasicNodeMethods, 12, false), true, false, false);
            J$.T(294457, 'use strict', 21, false);
            J$.F(294481, J$.I(typeof require === 'undefined' ? require = J$.R(294465, 'require', undefined, true, true) : require = J$.R(294465, 'require', require, true, true)), false)(J$.T(294473, 'core-js/modules/es.array.map', 21, false));
            var http = J$.W(294513, 'http', J$.F(294505, J$.I(typeof require === 'undefined' ? require = J$.R(294489, 'require', undefined, true, true) : require = J$.R(294489, 'require', require, true, true)), false)(J$.T(294497, 'http', 21, false)), http, false, true);
            J$.P(294561, J$.I(typeof module === 'undefined' ? module = J$.R(294521, 'module', undefined, true, true) : module = J$.R(294521, 'module', module, true, true)), 'exports', J$.C(16800, J$.F(294537, J$.R(294529, 'getCurrentNodeMethods', getCurrentNodeMethods, false, true), false)()) ? J$._() : J$.F(294553, J$.R(294545, 'getBasicNodeMethods', getBasicNodeMethods, false, true), false)());
        } catch (J$e) {
            J$.Ex(295025, J$e);
        } finally {
            if (J$.Sr(295033))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

