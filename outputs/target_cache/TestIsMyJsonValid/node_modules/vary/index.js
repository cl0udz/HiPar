J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(486505, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/vary/index.js');
            function append(header, field) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(485681, arguments.callee, this, arguments);
                            arguments = J$.N(485689, 'arguments', arguments, true, false, false);
                            header = J$.N(485697, 'header', header, true, false, false);
                            field = J$.N(485705, 'field', field, true, false, false);
                            J$.N(485713, 'fields', fields, false, false, false);
                            J$.N(485721, 'j', j, false, false, false);
                            J$.N(485729, 'val', val, false, false, false);
                            J$.N(485737, 'vals', vals, false, false, false);
                            J$.N(485745, 'i', i, false, false, false);
                            J$.N(485753, 'fld', fld, false, false, false);
                            if (J$.C(26688, J$.B(41330, '!==', J$.U(41322, 'typeof', J$.R(484993, 'header', header, false, false)), J$.T(485001, 'string', 21, false)))) {
                                throw J$.F(485025, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(485009, 'TypeError', undefined, true, true) : TypeError = J$.R(485009, 'TypeError', TypeError, true, true)), true)(J$.T(485017, 'header argument is required', 21, false));
                            }
                            if (J$.C(26696, J$.U(41338, '!', J$.R(485033, 'field', field, false, false)))) {
                                throw J$.F(485057, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(485041, 'TypeError', undefined, true, true) : TypeError = J$.R(485041, 'TypeError', TypeError, true, true)), true)(J$.T(485049, 'field argument is required', 21, false));
                            }
                            var fields = J$.W(485137, 'fields', J$.C(26704, J$.U(41346, '!', J$.M(485081, J$.I(typeof Array === 'undefined' ? Array = J$.R(485065, 'Array', undefined, true, true) : Array = J$.R(485065, 'Array', Array, true, true)), 'isArray', false)(J$.R(485073, 'field', field, false, false)))) ? J$.F(485121, J$.R(485089, 'parse', parse, false, true), false)(J$.F(485113, J$.I(typeof String === 'undefined' ? String = J$.R(485097, 'String', undefined, true, true) : String = J$.R(485097, 'String', String, true, true)), false)(J$.R(485105, 'field', field, false, false))) : J$.R(485129, 'field', field, false, false), fields, false, false);
                            for (var j = J$.W(485153, 'j', J$.T(485145, 0, 22, false), j, false, false); J$.C(26720, J$.B(41354, '<', J$.R(485161, 'j', j, false, false), J$.G(485177, J$.R(485169, 'fields', fields, false, false), 'length'))); J$.B(41378, '-', j = J$.W(485193, 'j', J$.B(41370, '+', J$.U(41362, '+', J$.R(485185, 'j', j, false, false)), 1), j, false, false), 1)) {
                                if (J$.C(26712, J$.U(41386, '!', J$.M(485233, J$.R(485201, 'FIELD_NAME_REGEXP', FIELD_NAME_REGEXP, false, true), 'test', false)(J$.G(485225, J$.R(485209, 'fields', fields, false, false), J$.R(485217, 'j', j, false, false)))))) {
                                    throw J$.F(485257, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(485241, 'TypeError', undefined, true, true) : TypeError = J$.R(485241, 'TypeError', TypeError, true, true)), true)(J$.T(485249, 'field argument contains an invalid header name', 21, false));
                                }
                            }
                            if (J$.C(26728, J$.B(41394, '===', J$.R(485265, 'header', header, false, false), J$.T(485273, '*', 21, false)))) {
                                return J$.Rt(485289, J$.R(485281, 'header', header, false, false));
                            }
                            var val = J$.W(485305, 'val', J$.R(485297, 'header', header, false, false), val, false, false);
                            var vals = J$.W(485345, 'vals', J$.F(485337, J$.R(485313, 'parse', parse, false, true), false)(J$.M(485329, J$.R(485321, 'header', header, false, false), 'toLowerCase', false)()), vals, false, false);
                            if (J$.C(26744, J$.C(26736, J$.B(41410, '!==', J$.M(485369, J$.R(485353, 'fields', fields, false, false), 'indexOf', false)(J$.T(485361, '*', 21, false)), J$.U(41402, '-', J$.T(485377, 1, 22, false)))) ? J$._() : J$.B(41426, '!==', J$.M(485401, J$.R(485385, 'vals', vals, false, false), 'indexOf', false)(J$.T(485393, '*', 21, false)), J$.U(41418, '-', J$.T(485409, 1, 22, false))))) {
                                return J$.Rt(485425, J$.T(485417, '*', 21, false));
                            }
                            for (var i = J$.W(485441, 'i', J$.T(485433, 0, 22, false), i, false, false); J$.C(26768, J$.B(41434, '<', J$.R(485449, 'i', i, false, false), J$.G(485465, J$.R(485457, 'fields', fields, false, false), 'length'))); J$.B(41458, '-', i = J$.W(485481, 'i', J$.B(41450, '+', J$.U(41442, '+', J$.R(485473, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var fld = J$.W(485521, 'fld', J$.M(485513, J$.G(485505, J$.R(485489, 'fields', fields, false, false), J$.R(485497, 'i', i, false, false)), 'toLowerCase', false)(), fld, false, false);
                                if (J$.C(26760, J$.B(41474, '===', J$.M(485545, J$.R(485529, 'vals', vals, false, false), 'indexOf', false)(J$.R(485537, 'fld', fld, false, false)), J$.U(41466, '-', J$.T(485553, 1, 22, false))))) {
                                    J$.M(485577, J$.R(485561, 'vals', vals, false, false), 'push', false)(J$.R(485569, 'fld', fld, false, false));
                                    val = J$.W(485657, 'val', J$.C(26752, J$.R(485585, 'val', val, false, false)) ? J$.B(41490, '+', J$.B(41482, '+', J$.R(485593, 'val', val, false, false), J$.T(485601, ', ', 21, false)), J$.G(485625, J$.R(485609, 'fields', fields, false, false), J$.R(485617, 'i', i, false, false))) : J$.G(485649, J$.R(485633, 'fields', fields, false, false), J$.R(485641, 'i', i, false, false)), val, false, false);
                                }
                            }
                            return J$.Rt(485673, J$.R(485665, 'val', val, false, false));
                        } catch (J$e) {
                            J$.Ex(486569, J$e);
                        } finally {
                            if (J$.Fr(486577))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parse(header) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(486137, arguments.callee, this, arguments);
                            arguments = J$.N(486145, 'arguments', arguments, true, false, false);
                            header = J$.N(486153, 'header', header, true, false, false);
                            J$.N(486161, 'end', end, false, false, false);
                            J$.N(486169, 'list', list, false, false, false);
                            J$.N(486177, 'start', start, false, false, false);
                            J$.N(486185, 'i', i, false, false, false);
                            J$.N(486193, 'len', len, false, false, false);
                            var end = J$.W(485769, 'end', J$.T(485761, 0, 22, false), end, false, false);
                            var list = J$.W(485785, 'list', J$.T(485777, [], 10, false), list, false, false);
                            var start = J$.W(485801, 'start', J$.T(485793, 0, 22, false), start, false, false);
                            for (var i = J$.W(485833, 'i', J$.T(485809, 0, 22, false), i, false, false), len = J$.W(485841, 'len', J$.G(485825, J$.R(485817, 'header', header, false, false), 'length'), len, false, false); J$.C(26808, J$.B(41498, '<', J$.R(485849, 'i', i, false, false), J$.R(485857, 'len', len, false, false))); J$.B(41522, '-', i = J$.W(485873, 'i', J$.B(41514, '+', J$.U(41506, '+', J$.R(485865, 'i', i, false, false)), 1), i, false, false), 1)) {
                                switch (J$.C1(26784, J$.M(485897, J$.R(485881, 'header', header, false, false), 'charCodeAt', false)(J$.R(485889, 'i', i, false, false)))) {
                                case J$.C2(26792, J$.T(485953, 32, 22, false)):
                                    if (J$.C(26776, J$.B(41530, '===', J$.R(485905, 'start', start, false, false), J$.R(485913, 'end', end, false, false)))) {
                                        start = J$.W(485945, 'start', end = J$.W(485937, 'end', J$.B(41538, '+', J$.R(485921, 'i', i, false, false), J$.T(485929, 1, 22, false)), end, false, false), start, false, false);
                                    }
                                    break;
                                case J$.C2(26800, J$.T(486041, 44, 22, false)):
                                    J$.M(486001, J$.R(485961, 'list', list, false, false), 'push', false)(J$.M(485993, J$.R(485969, 'header', header, false, false), 'substring', false)(J$.R(485977, 'start', start, false, false), J$.R(485985, 'end', end, false, false)));
                                    start = J$.W(486033, 'start', end = J$.W(486025, 'end', J$.B(41546, '+', J$.R(486009, 'i', i, false, false), J$.T(486017, 1, 22, false)), end, false, false), start, false, false);
                                    break;
                                default:
                                    end = J$.W(486065, 'end', J$.B(41554, '+', J$.R(486049, 'i', i, false, false), J$.T(486057, 1, 22, false)), end, false, false);
                                    break;
                                }
                            }
                            J$.M(486113, J$.R(486073, 'list', list, false, false), 'push', false)(J$.M(486105, J$.R(486081, 'header', header, false, false), 'substring', false)(J$.R(486089, 'start', start, false, false), J$.R(486097, 'end', end, false, false)));
                            return J$.Rt(486129, J$.R(486121, 'list', list, false, false));
                        } catch (J$e) {
                            J$.Ex(486585, J$e);
                        } finally {
                            if (J$.Fr(486593))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function vary(res, field) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(486457, arguments.callee, this, arguments);
                            arguments = J$.N(486465, 'arguments', arguments, true, false, false);
                            res = J$.N(486473, 'res', res, true, false, false);
                            field = J$.N(486481, 'field', field, true, false, false);
                            J$.N(486489, 'val', val, false, false, false);
                            J$.N(486497, 'header', header, false, false, false);
                            if (J$.C(26832, J$.C(26824, J$.C(26816, J$.U(41562, '!', J$.R(486201, 'res', res, false, false))) ? J$._() : J$.U(41570, '!', J$.G(486217, J$.R(486209, 'res', res, false, false), 'getHeader'))) ? J$._() : J$.U(41578, '!', J$.G(486233, J$.R(486225, 'res', res, false, false), 'setHeader')))) {
                                throw J$.F(486257, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(486241, 'TypeError', undefined, true, true) : TypeError = J$.R(486241, 'TypeError', TypeError, true, true)), true)(J$.T(486249, 'res argument is required', 21, false));
                            }
                            var val = J$.W(486297, 'val', J$.C(26840, J$.M(486281, J$.R(486265, 'res', res, false, false), 'getHeader', false)(J$.T(486273, 'Vary', 21, false))) ? J$._() : J$.T(486289, '', 21, false), val, false, false);
                            var header = J$.W(486377, 'header', J$.C(26848, J$.M(486321, J$.I(typeof Array === 'undefined' ? Array = J$.R(486305, 'Array', undefined, true, true) : Array = J$.R(486305, 'Array', Array, true, true)), 'isArray', false)(J$.R(486313, 'val', val, false, false))) ? J$.M(486345, J$.R(486329, 'val', val, false, false), 'join', false)(J$.T(486337, ', ', 21, false)) : J$.F(486369, J$.I(typeof String === 'undefined' ? String = J$.R(486353, 'String', undefined, true, true) : String = J$.R(486353, 'String', String, true, true)), false)(J$.R(486361, 'val', val, false, false)), header, false, false);
                            if (J$.C(26856, val = J$.W(486417, 'val', J$.F(486409, J$.R(486385, 'append', append, false, true), false)(J$.R(486393, 'header', header, false, false), J$.R(486401, 'field', field, false, false)), val, false, false))) {
                                J$.M(486449, J$.R(486425, 'res', res, false, false), 'setHeader', false)(J$.T(486433, 'Vary', 21, false), J$.R(486441, 'val', val, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(486601, J$e);
                        } finally {
                            if (J$.Fr(486609))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(486513, 'FIELD_NAME_REGEXP', FIELD_NAME_REGEXP, false, false, false);
            append = J$.N(486529, 'append', J$.T(486521, append, 12, false), true, false, false);
            parse = J$.N(486545, 'parse', J$.T(486537, parse, 12, false), true, false, false);
            vary = J$.N(486561, 'vary', J$.T(486553, vary, 12, false), true, false, false);
            J$.T(484841, 'use strict', 21, false);
            J$.F(484865, J$.I(typeof require === 'undefined' ? require = J$.R(484849, 'require', undefined, true, true) : require = J$.R(484849, 'require', require, true, true)), false)(J$.T(484857, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(484889, J$.I(typeof require === 'undefined' ? require = J$.R(484873, 'require', undefined, true, true) : require = J$.R(484873, 'require', require, true, true)), false)(J$.T(484881, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(484913, J$.I(typeof require === 'undefined' ? require = J$.R(484897, 'require', undefined, true, true) : require = J$.R(484897, 'require', require, true, true)), false)(J$.T(484905, 'core-js/modules/es.array.join', 21, false));
            J$.P(484937, J$.I(typeof module === 'undefined' ? module = J$.R(484921, 'module', undefined, true, true) : module = J$.R(484921, 'module', module, true, true)), 'exports', J$.R(484929, 'vary', vary, false, true));
            J$.P(484969, J$.G(484953, J$.I(typeof module === 'undefined' ? module = J$.R(484945, 'module', undefined, true, true) : module = J$.R(484945, 'module', module, true, true)), 'exports'), 'append', J$.R(484961, 'append', append, false, true));
            var FIELD_NAME_REGEXP = J$.W(484985, 'FIELD_NAME_REGEXP', J$.T(484977, /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/, 14, false), FIELD_NAME_REGEXP, false, true);
        } catch (J$e) {
            J$.Ex(486617, J$e);
        } finally {
            if (J$.Sr(486625))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

