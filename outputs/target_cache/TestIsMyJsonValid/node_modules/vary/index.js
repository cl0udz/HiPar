J$.noInstrEval = false;
jalangiLabel3:
    while (true) {
        try {
            J$.Se(443633, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/vary/index.js');
            function append(header, field) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(442809, arguments.callee, this, arguments);
                            arguments = J$.N(442817, 'arguments', arguments, true, false, false);
                            header = J$.N(442825, 'header', header, true, false, false);
                            field = J$.N(442833, 'field', field, true, false, false);
                            J$.N(442841, 'fields', fields, false, false, false);
                            J$.N(442849, 'j', j, false, false, false);
                            J$.N(442857, 'val', val, false, false, false);
                            J$.N(442865, 'vals', vals, false, false, false);
                            J$.N(442873, 'i', i, false, false, false);
                            J$.N(442881, 'fld', fld, false, false, false);
                            if (J$.C(24416, J$.B(38210, '!==', J$.U(38202, 'typeof', J$.R(442121, 'header', header, false, false)), J$.T(442129, 'string', 21, false)))) {
                                throw J$.F(442153, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(442137, 'TypeError', undefined, true, true) : TypeError = J$.R(442137, 'TypeError', TypeError, true, true)), true)(J$.T(442145, 'header argument is required', 21, false));
                            }
                            if (J$.C(24424, J$.U(38218, '!', J$.R(442161, 'field', field, false, false)))) {
                                throw J$.F(442185, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(442169, 'TypeError', undefined, true, true) : TypeError = J$.R(442169, 'TypeError', TypeError, true, true)), true)(J$.T(442177, 'field argument is required', 21, false));
                            }
                            var fields = J$.W(442265, 'fields', J$.C(24432, J$.U(38226, '!', J$.M(442209, J$.I(typeof Array === 'undefined' ? Array = J$.R(442193, 'Array', undefined, true, true) : Array = J$.R(442193, 'Array', Array, true, true)), 'isArray', false)(J$.R(442201, 'field', field, false, false)))) ? J$.F(442249, J$.R(442217, 'parse', parse, false, true), false)(J$.F(442241, J$.I(typeof String === 'undefined' ? String = J$.R(442225, 'String', undefined, true, true) : String = J$.R(442225, 'String', String, true, true)), false)(J$.R(442233, 'field', field, false, false))) : J$.R(442257, 'field', field, false, false), fields, false, false);
                            for (var j = J$.W(442281, 'j', J$.T(442273, 0, 22, false), j, false, false); J$.C(24448, J$.B(38234, '<', J$.R(442289, 'j', j, false, false), J$.G(442305, J$.R(442297, 'fields', fields, false, false), 'length'))); J$.B(38258, '-', j = J$.W(442321, 'j', J$.B(38250, '+', J$.U(38242, '+', J$.R(442313, 'j', j, false, false)), 1), j, false, false), 1)) {
                                if (J$.C(24440, J$.U(38266, '!', J$.M(442361, J$.R(442329, 'FIELD_NAME_REGEXP', FIELD_NAME_REGEXP, false, true), 'test', false)(J$.G(442353, J$.R(442337, 'fields', fields, false, false), J$.R(442345, 'j', j, false, false)))))) {
                                    throw J$.F(442385, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(442369, 'TypeError', undefined, true, true) : TypeError = J$.R(442369, 'TypeError', TypeError, true, true)), true)(J$.T(442377, 'field argument contains an invalid header name', 21, false));
                                }
                            }
                            if (J$.C(24456, J$.B(38274, '===', J$.R(442393, 'header', header, false, false), J$.T(442401, '*', 21, false)))) {
                                return J$.Rt(442417, J$.R(442409, 'header', header, false, false));
                            }
                            var val = J$.W(442433, 'val', J$.R(442425, 'header', header, false, false), val, false, false);
                            var vals = J$.W(442473, 'vals', J$.F(442465, J$.R(442441, 'parse', parse, false, true), false)(J$.M(442457, J$.R(442449, 'header', header, false, false), 'toLowerCase', false)()), vals, false, false);
                            if (J$.C(24472, J$.C(24464, J$.B(38290, '!==', J$.M(442497, J$.R(442481, 'fields', fields, false, false), 'indexOf', false)(J$.T(442489, '*', 21, false)), J$.U(38282, '-', J$.T(442505, 1, 22, false)))) ? J$._() : J$.B(38306, '!==', J$.M(442529, J$.R(442513, 'vals', vals, false, false), 'indexOf', false)(J$.T(442521, '*', 21, false)), J$.U(38298, '-', J$.T(442537, 1, 22, false))))) {
                                return J$.Rt(442553, J$.T(442545, '*', 21, false));
                            }
                            for (var i = J$.W(442569, 'i', J$.T(442561, 0, 22, false), i, false, false); J$.C(24496, J$.B(38314, '<', J$.R(442577, 'i', i, false, false), J$.G(442593, J$.R(442585, 'fields', fields, false, false), 'length'))); J$.B(38338, '-', i = J$.W(442609, 'i', J$.B(38330, '+', J$.U(38322, '+', J$.R(442601, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var fld = J$.W(442649, 'fld', J$.M(442641, J$.G(442633, J$.R(442617, 'fields', fields, false, false), J$.R(442625, 'i', i, false, false)), 'toLowerCase', false)(), fld, false, false);
                                if (J$.C(24488, J$.B(38354, '===', J$.M(442673, J$.R(442657, 'vals', vals, false, false), 'indexOf', false)(J$.R(442665, 'fld', fld, false, false)), J$.U(38346, '-', J$.T(442681, 1, 22, false))))) {
                                    J$.M(442705, J$.R(442689, 'vals', vals, false, false), 'push', false)(J$.R(442697, 'fld', fld, false, false));
                                    val = J$.W(442785, 'val', J$.C(24480, J$.R(442713, 'val', val, false, false)) ? J$.B(38370, '+', J$.B(38362, '+', J$.R(442721, 'val', val, false, false), J$.T(442729, ', ', 21, false)), J$.G(442753, J$.R(442737, 'fields', fields, false, false), J$.R(442745, 'i', i, false, false))) : J$.G(442777, J$.R(442761, 'fields', fields, false, false), J$.R(442769, 'i', i, false, false)), val, false, false);
                                }
                            }
                            return J$.Rt(442801, J$.R(442793, 'val', val, false, false));
                        } catch (J$e) {
                            J$.Ex(443697, J$e);
                        } finally {
                            if (J$.Fr(443705))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parse(header) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(443265, arguments.callee, this, arguments);
                            arguments = J$.N(443273, 'arguments', arguments, true, false, false);
                            header = J$.N(443281, 'header', header, true, false, false);
                            J$.N(443289, 'end', end, false, false, false);
                            J$.N(443297, 'list', list, false, false, false);
                            J$.N(443305, 'start', start, false, false, false);
                            J$.N(443313, 'i', i, false, false, false);
                            J$.N(443321, 'len', len, false, false, false);
                            var end = J$.W(442897, 'end', J$.T(442889, 0, 22, false), end, false, false);
                            var list = J$.W(442913, 'list', J$.T(442905, [], 10, false), list, false, false);
                            var start = J$.W(442929, 'start', J$.T(442921, 0, 22, false), start, false, false);
                            for (var i = J$.W(442961, 'i', J$.T(442937, 0, 22, false), i, false, false), len = J$.W(442969, 'len', J$.G(442953, J$.R(442945, 'header', header, false, false), 'length'), len, false, false); J$.C(24536, J$.B(38378, '<', J$.R(442977, 'i', i, false, false), J$.R(442985, 'len', len, false, false))); J$.B(38402, '-', i = J$.W(443001, 'i', J$.B(38394, '+', J$.U(38386, '+', J$.R(442993, 'i', i, false, false)), 1), i, false, false), 1)) {
                                switch (J$.C1(24512, J$.M(443025, J$.R(443009, 'header', header, false, false), 'charCodeAt', false)(J$.R(443017, 'i', i, false, false)))) {
                                case J$.C2(24520, J$.T(443081, 32, 22, false)):
                                    if (J$.C(24504, J$.B(38410, '===', J$.R(443033, 'start', start, false, false), J$.R(443041, 'end', end, false, false)))) {
                                        start = J$.W(443073, 'start', end = J$.W(443065, 'end', J$.B(38418, '+', J$.R(443049, 'i', i, false, false), J$.T(443057, 1, 22, false)), end, false, false), start, false, false);
                                    }
                                    break;
                                case J$.C2(24528, J$.T(443169, 44, 22, false)):
                                    J$.M(443129, J$.R(443089, 'list', list, false, false), 'push', false)(J$.M(443121, J$.R(443097, 'header', header, false, false), 'substring', false)(J$.R(443105, 'start', start, false, false), J$.R(443113, 'end', end, false, false)));
                                    start = J$.W(443161, 'start', end = J$.W(443153, 'end', J$.B(38426, '+', J$.R(443137, 'i', i, false, false), J$.T(443145, 1, 22, false)), end, false, false), start, false, false);
                                    break;
                                default:
                                    end = J$.W(443193, 'end', J$.B(38434, '+', J$.R(443177, 'i', i, false, false), J$.T(443185, 1, 22, false)), end, false, false);
                                    break;
                                }
                            }
                            J$.M(443241, J$.R(443201, 'list', list, false, false), 'push', false)(J$.M(443233, J$.R(443209, 'header', header, false, false), 'substring', false)(J$.R(443217, 'start', start, false, false), J$.R(443225, 'end', end, false, false)));
                            return J$.Rt(443257, J$.R(443249, 'list', list, false, false));
                        } catch (J$e) {
                            J$.Ex(443713, J$e);
                        } finally {
                            if (J$.Fr(443721))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function vary(res, field) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(443585, arguments.callee, this, arguments);
                            arguments = J$.N(443593, 'arguments', arguments, true, false, false);
                            res = J$.N(443601, 'res', res, true, false, false);
                            field = J$.N(443609, 'field', field, true, false, false);
                            J$.N(443617, 'val', val, false, false, false);
                            J$.N(443625, 'header', header, false, false, false);
                            if (J$.C(24560, J$.C(24552, J$.C(24544, J$.U(38442, '!', J$.R(443329, 'res', res, false, false))) ? J$._() : J$.U(38450, '!', J$.G(443345, J$.R(443337, 'res', res, false, false), 'getHeader'))) ? J$._() : J$.U(38458, '!', J$.G(443361, J$.R(443353, 'res', res, false, false), 'setHeader')))) {
                                throw J$.F(443385, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(443369, 'TypeError', undefined, true, true) : TypeError = J$.R(443369, 'TypeError', TypeError, true, true)), true)(J$.T(443377, 'res argument is required', 21, false));
                            }
                            var val = J$.W(443425, 'val', J$.C(24568, J$.M(443409, J$.R(443393, 'res', res, false, false), 'getHeader', false)(J$.T(443401, 'Vary', 21, false))) ? J$._() : J$.T(443417, '', 21, false), val, false, false);
                            var header = J$.W(443505, 'header', J$.C(24576, J$.M(443449, J$.I(typeof Array === 'undefined' ? Array = J$.R(443433, 'Array', undefined, true, true) : Array = J$.R(443433, 'Array', Array, true, true)), 'isArray', false)(J$.R(443441, 'val', val, false, false))) ? J$.M(443473, J$.R(443457, 'val', val, false, false), 'join', false)(J$.T(443465, ', ', 21, false)) : J$.F(443497, J$.I(typeof String === 'undefined' ? String = J$.R(443481, 'String', undefined, true, true) : String = J$.R(443481, 'String', String, true, true)), false)(J$.R(443489, 'val', val, false, false)), header, false, false);
                            if (J$.C(24584, val = J$.W(443545, 'val', J$.F(443537, J$.R(443513, 'append', append, false, true), false)(J$.R(443521, 'header', header, false, false), J$.R(443529, 'field', field, false, false)), val, false, false))) {
                                J$.M(443577, J$.R(443553, 'res', res, false, false), 'setHeader', false)(J$.T(443561, 'Vary', 21, false), J$.R(443569, 'val', val, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(443729, J$e);
                        } finally {
                            if (J$.Fr(443737))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(443641, 'FIELD_NAME_REGEXP', FIELD_NAME_REGEXP, false, false, false);
            append = J$.N(443657, 'append', J$.T(443649, append, 12, false), true, false, false);
            parse = J$.N(443673, 'parse', J$.T(443665, parse, 12, false), true, false, false);
            vary = J$.N(443689, 'vary', J$.T(443681, vary, 12, false), true, false, false);
            J$.T(441969, 'use strict', 21, false);
            J$.F(441993, J$.I(typeof require === 'undefined' ? require = J$.R(441977, 'require', undefined, true, true) : require = J$.R(441977, 'require', require, true, true)), false)(J$.T(441985, 'core-js/modules/es.array.index-of', 21, false));
            J$.F(442017, J$.I(typeof require === 'undefined' ? require = J$.R(442001, 'require', undefined, true, true) : require = J$.R(442001, 'require', require, true, true)), false)(J$.T(442009, 'core-js/modules/es.array.is-array', 21, false));
            J$.F(442041, J$.I(typeof require === 'undefined' ? require = J$.R(442025, 'require', undefined, true, true) : require = J$.R(442025, 'require', require, true, true)), false)(J$.T(442033, 'core-js/modules/es.array.join', 21, false));
            J$.P(442065, J$.I(typeof module === 'undefined' ? module = J$.R(442049, 'module', undefined, true, true) : module = J$.R(442049, 'module', module, true, true)), 'exports', J$.R(442057, 'vary', vary, false, true));
            J$.P(442097, J$.G(442081, J$.I(typeof module === 'undefined' ? module = J$.R(442073, 'module', undefined, true, true) : module = J$.R(442073, 'module', module, true, true)), 'exports'), 'append', J$.R(442089, 'append', append, false, true));
            var FIELD_NAME_REGEXP = J$.W(442113, 'FIELD_NAME_REGEXP', J$.T(442105, /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/, 14, false), FIELD_NAME_REGEXP, false, true);
        } catch (J$e) {
            J$.Ex(443745, J$e);
        } finally {
            if (J$.Sr(443753))
                continue jalangiLabel3;
            else
                break jalangiLabel3;
        }
    }
// JALANGI DO NOT INSTRUMENT

