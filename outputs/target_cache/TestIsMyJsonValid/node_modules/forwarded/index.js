J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(165409, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestIsMyJsonValid/node_modules/forwarded/index.js');
            function forwarded(req) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(164913, arguments.callee, this, arguments);
                            arguments = J$.N(164921, 'arguments', arguments, true, false, false);
                            req = J$.N(164929, 'req', req, true, false, false);
                            J$.N(164937, 'proxyAddrs', proxyAddrs, false, false, false);
                            J$.N(164945, 'socketAddr', socketAddr, false, false, false);
                            J$.N(164953, 'addrs', addrs, false, false, false);
                            if (J$.C(9984, J$.U(13266, '!', J$.R(164729, 'req', req, false, false)))) {
                                throw J$.F(164753, J$.I(typeof TypeError === 'undefined' ? TypeError = J$.R(164737, 'TypeError', undefined, true, true) : TypeError = J$.R(164737, 'TypeError', TypeError, true, true)), true)(J$.T(164745, 'argument req is required', 21, false));
                            }
                            var proxyAddrs = J$.W(164817, 'proxyAddrs', J$.F(164809, J$.R(164761, 'parse', parse, false, true), false)(J$.C(9992, J$.G(164793, J$.G(164777, J$.R(164769, 'req', req, false, false), 'headers'), J$.T(164785, 'x-forwarded-for', 21, false))) ? J$._() : J$.T(164801, '', 21, false)), proxyAddrs, false, false);
                            var socketAddr = J$.W(164849, 'socketAddr', J$.G(164841, J$.G(164833, J$.R(164825, 'req', req, false, false), 'connection'), 'remoteAddress'), socketAddr, false, false);
                            var addrs = J$.W(164889, 'addrs', J$.M(164881, J$.T(164865, [J$.R(164857, 'socketAddr', socketAddr, false, false)], 10, false), 'concat', false)(J$.R(164873, 'proxyAddrs', proxyAddrs, false, false)), addrs, false, false);
                            return J$.Rt(164905, J$.R(164897, 'addrs', addrs, false, false));
                        } catch (J$e) {
                            J$.Ex(165449, J$e);
                        } finally {
                            if (J$.Fr(165457))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parse(header) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(165353, arguments.callee, this, arguments);
                            arguments = J$.N(165361, 'arguments', arguments, true, false, false);
                            header = J$.N(165369, 'header', header, true, false, false);
                            J$.N(165377, 'end', end, false, false, false);
                            J$.N(165385, 'list', list, false, false, false);
                            J$.N(165393, 'start', start, false, false, false);
                            J$.N(165401, 'i', i, false, false, false);
                            var end = J$.W(164977, 'end', J$.G(164969, J$.R(164961, 'header', header, false, false), 'length'), end, false, false);
                            var list = J$.W(164993, 'list', J$.T(164985, [], 10, false), list, false, false);
                            var start = J$.W(165017, 'start', J$.G(165009, J$.R(165001, 'header', header, false, false), 'length'), start, false, false);
                            for (var i = J$.W(165049, 'i', J$.B(13274, '-', J$.G(165033, J$.R(165025, 'header', header, false, false), 'length'), J$.T(165041, 1, 22, false)), i, false, false); J$.C(10040, J$.B(13282, '>=', J$.R(165057, 'i', i, false, false), J$.T(165065, 0, 22, false))); J$.B(13306, '+', i = J$.W(165081, 'i', J$.B(13298, '-', J$.U(13290, '+', J$.R(165073, 'i', i, false, false)), 1), i, false, false), 1)) {
                                switch (J$.C1(10016, J$.M(165105, J$.R(165089, 'header', header, false, false), 'charCodeAt', false)(J$.R(165097, 'i', i, false, false)))) {
                                case J$.C2(10024, J$.T(165153, 32, 22, false)):
                                    if (J$.C(10000, J$.B(13314, '===', J$.R(165113, 'start', start, false, false), J$.R(165121, 'end', end, false, false)))) {
                                        start = J$.W(165145, 'start', end = J$.W(165137, 'end', J$.R(165129, 'i', i, false, false), end, false, false), start, false, false);
                                    }
                                    break;
                                case J$.C2(10032, J$.T(165249, 44, 22, false)):
                                    if (J$.C(10008, J$.B(13322, '!==', J$.R(165161, 'start', start, false, false), J$.R(165169, 'end', end, false, false)))) {
                                        J$.M(165217, J$.R(165177, 'list', list, false, false), 'push', false)(J$.M(165209, J$.R(165185, 'header', header, false, false), 'substring', false)(J$.R(165193, 'start', start, false, false), J$.R(165201, 'end', end, false, false)));
                                    }
                                    start = J$.W(165241, 'start', end = J$.W(165233, 'end', J$.R(165225, 'i', i, false, false), end, false, false), start, false, false);
                                    break;
                                default:
                                    start = J$.W(165265, 'start', J$.R(165257, 'i', i, false, false), start, false, false);
                                    break;
                                }
                            }
                            if (J$.C(10048, J$.B(13330, '!==', J$.R(165273, 'start', start, false, false), J$.R(165281, 'end', end, false, false)))) {
                                J$.M(165329, J$.R(165289, 'list', list, false, false), 'push', false)(J$.M(165321, J$.R(165297, 'header', header, false, false), 'substring', false)(J$.R(165305, 'start', start, false, false), J$.R(165313, 'end', end, false, false)));
                            }
                            return J$.Rt(165345, J$.R(165337, 'list', list, false, false));
                        } catch (J$e) {
                            J$.Ex(165465, J$e);
                        } finally {
                            if (J$.Fr(165473))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            forwarded = J$.N(165425, 'forwarded', J$.T(165417, forwarded, 12, false), true, false, false);
            parse = J$.N(165441, 'parse', J$.T(165433, parse, 12, false), true, false, false);
            J$.T(164673, 'use strict', 21, false);
            J$.F(164697, J$.I(typeof require === 'undefined' ? require = J$.R(164681, 'require', undefined, true, true) : require = J$.R(164681, 'require', require, true, true)), false)(J$.T(164689, 'core-js/modules/es.array.concat', 21, false));
            J$.P(164721, J$.I(typeof module === 'undefined' ? module = J$.R(164705, 'module', undefined, true, true) : module = J$.R(164705, 'module', module, true, true)), 'exports', J$.R(164713, 'forwarded', forwarded, false, true));
        } catch (J$e) {
            J$.Ex(165481, J$e);
        } finally {
            if (J$.Sr(165489))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

