"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.flags");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chalk = require("chalk"),
    TAG_ARGUMENTS = "[object Arguments]",
    TAG_ARRAY = "[object Array]",
    TAG_ARRAY_BUFFER = "[object ArrayBuffer]",
    TAG_ASYNC_FUNCTION = "[object AsyncFunction]",
    TAG_BIGINT = "[object BigInt]",
    TAG_BOOL = "[object Boolean]",
    TAG_DATE = "[object Date]",
    TAG_ERROR = "[object Error]",
    TAG_FUNCTION = "[object Function]",
    TAG_GENERATOR = "[object Generator]",
    TAG_GENERATOR_FUNCTION = "[object GeneratorFunction]",
    TAG_GLOBAL = "[object global]",
    TAG_MAP = "[object Map]",
    TAG_NULL = "[object Null]",
    TAG_NUMBER = "[object Number]",
    TAG_OBJECT = "[object Object]",
    TAG_PROMISE = "[object Promise]",
    TAG_REGEXP = "[object RegExp]",
    TAG_SET = "[object Set]",
    TAG_SHARED_ARRAY_BUFFER = "[object SharedArrayBuffer]",
    TAG_STRING = "[object String]",
    TAG_SYMBOL = "[object Symbol]",
    TAG_VOID = "[object Undefined]",
    TAG_WEAK_MAP = "[object WeakMap]",
    TAG_WEAK_SET = "[object WeakSet]",
    TAG_WINDOW = "[object Window]",
    OPTIONS_DEFAULT = {
  arrayMaxElements: 99,
  assignSymbol: "â†’",
  clear: !1,
  colorize: !0,
  console: !0,
  depth: 20,
  exit: !1,
  indent: "Ë‘Ë‘",
  indentPad: 1,
  mapMaxEntries: 99,
  objectMaxProps: 99,
  quotesEnd: '"',
  quotesStart: '"',
  setMaxValues: 99,
  stringMaxLength: 360
},
    THEME_DARK = {
  argument: [253, 151, 31],
  boolean: [174, 129, 255],
  comment: [117, 113, 94],
  keyword: [249, 38, 114],
  name: [230, 219, 116],
  number: [174, 129, 255],
  plain: [255, 255, 255],
  property: [102, 217, 239],
  string: [166, 226, 46]
},
    THEME_LIGHT = {
  argument: [245, 135, 31],
  boolean: [66, 113, 174],
  comment: [117, 113, 94],
  keyword: [200, 40, 41],
  name: [201, 159, 0],
  number: [101, 67, 133],
  plain: [0, 0, 0],
  property: [32, 123, 129],
  string: [113, 140, 0]
};

function clearCli() {
  if ("clear" in console) try {
    console.clear();
  } catch (t) {} else try {
    process.stdout.write("[2J[0;0H");
  } catch (t) {}
}

function processExit() {
  try {
    process.exit(0);
  } catch (t) {}
}

function isNumericKey(t) {
  return Number.isInteger(Number.parseInt(t));
}

function prototypeTag(t) {
  return Object.prototype.toString.call(t);
}

function clearString(t) {
  return t.length < 12 ? t : (" " + t).slice(1);
}

function deCycle(t) {
  var i = [],
      e = [];
  return function deReCycle(s, n) {
    var r, a, o;

    if (!("object" != typeof s || null === s || s instanceof Boolean || s instanceof Date || s instanceof Number || s instanceof RegExp || s instanceof String)) {
      for (r = 0; r < i.length; r += 1) {
        if (i[r] === s) return {
          "&circularReference": e[r]
        };
      }

      if (i.push(s), e.push(n), prototypeTag(s) === TAG_ARRAY) for (o = [], r = 0; r < s.length; r += 1) {
        o[r] = deReCycle(s[r], `${n}[" + index + "]`);
      } else for (a in o = Object.create(t), s) {
        Object.prototype.hasOwnProperty.call(s, a) && (o[a] = deReCycle(s[a], `${n}[${JSON.stringify(a)}]`));
      }
      return o;
    }

    return s;
  }(t, "&");
}

function closureNameExtract(t) {
  if (t.name) return t.name;
  var i = /^function\s+([\w]+)\s*\(/.exec(t.toString());
  return i ? i[1] : "";
}

function objSize(t) {
  return Object.keys(t).length;
}

function getClass(t) {
  return t.constructor.name;
}

function getType(t) {
  var i = prototypeTag(t).toLowerCase().split("[object ").pop().split("]").shift();
  return ["global", "window"].includes(i) ? "object" : i.includes("error") ? "error" : i;
}

class Theme {
  constructor() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
    var i = arguments.length > 1 ? arguments[1] : undefined;
    var e;

    switch (this.cli = new chalk.Instance({
      level: Math.min(t, chalk.supportsColor.level)
    }), !0) {
      case "dark" === i:
        e = THEME_DARK;
        break;

      case "light" === i:
        e = THEME_LIGHT;
        break;

      case prototypeTag(i) === TAG_OBJECT:
        e = _objectSpread({}, THEME_DARK, {}, i);
        break;

      default:
        e = THEME_DARK;
    }

    this.argument = this.compose(...e.argument), this.boolean = this.compose(...e.boolean), this.comment = this.compose(...e.comment), this.keyword = this.compose(...e.keyword), this.name = this.compose(...e.name), this.number = this.compose(...e.number), this.plain = this.compose(...e.plain), this.property = this.compose(...e.property), this.string = this.compose(...e.string);
  }

  static toRGB(t) {
    return t = Number.parseInt(t.toString(), 10), Number.isInteger(t) ? Math.min(255, Math.max(0, t)) : 255;
  }

  compose() {
    var _this = this;

    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 255;
    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 255;
    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 255;
    return t = Theme.toRGB(t), i = Theme.toRGB(i), e = Theme.toRGB(e), function (s) {
      return _this.cli.rgb(t, i, e)(s.toString());
    };
  }

}

class Consono {
  constructor() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var i = arguments.length > 1 ? arguments[1] : undefined;
    this.setOptions(t), this.setTheme(i);
  }

  setTheme(t) {
    this.cli = new Theme(this.colorize ? 3 : 0, t);
  }

  setOptions() {
    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    t = t || {};

    var i = _objectSpread({}, OPTIONS_DEFAULT, {}, t);

    this.arrayMaxElements = i.arrayMaxElements, this.arrow = i.assignSymbol, this.clear = i.clear, this.colorize = i.colorize, this.console = i.console, this.currentDepth = 0, this.depth = i.depth, this.exit = i.exit, this.indentType = i.indent, this.indent = this.indentType.repeat(i.indentPad), this.mapMaxEntries = i.mapMaxEntries, this.objectMaxProps = i.objectMaxProps, this.quotesEnd = i.quotesEnd, this.quotesStart = i.quotesStart, this.setMaxValues = i.setMaxValues, this.stringMaxLength = i.stringMaxLength;
  }

  toPrintable(t) {
    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    var n = "",
        r = "",
        a = "",
        o = Number.MAX_SAFE_INTEGER;
    var l = getType(t);

    switch (l) {
      case "array":
        {
          var _e = t.length;
          r = _e > this.arrayMaxElements ? `${this.cli.keyword("array")}${s.length ? ` ${this.cli.keyword(s)}` : ""} ${this.cli.plain("(")}${this.cli.argument("elements")}${this.cli.plain("=")}${this.cli.number(_e)}${this.cli.plain(",")} ${this.cli.argument("shown")}=${this.cli.number(this.arrayMaxElements)}${this.cli.plain(")")} ${this.cli.plain("[")}\n` : `${this.cli.keyword("array")}${s.length ? ` ${this.cli.keyword(s)}` : ""} ${this.cli.plain("(")}${this.cli.argument("elements")}${this.cli.plain("=")}${this.cli.number(_e)}${this.cli.plain(")")} ${this.cli.plain("[")}\n`, a = `${i}${this.cli.plain("]")}`, o = this.arrayMaxElements;
          break;
        }

      case "object":
        {
          var _s = t;

          if (t = deCycle(t), !0 === e) {
            var _e2 = objSize(t);

            var _n = "";
            _n = _e2 > this.objectMaxProps ? `${this.cli.plain("(")}${this.cli.argument("props")}${this.cli.plain("=")}${this.cli.number(_e2)}${this.cli.plain(",")} ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.objectMaxProps)}${this.cli.plain(")")}` : `${this.cli.plain("(")}${this.cli.argument("props")}${this.cli.plain("=")}${this.cli.number(_e2)}${this.cli.plain(")")}`, r = `${this.cli.keyword("object")} ${this.cli.keyword(getClass(_s))} ${_n} ${this.cli.plain("{")}\n`, a = `${i}${this.cli.plain("}")}`;
          } else r = `${this.cli.plain("(")}\n`, a = `${i}${this.cli.plain(")")}`;

          o = this.objectMaxProps;
          break;
        }

      case "arguments":
        {
          var _e3 = t.length;
          r = _e3 > this.arrayMaxElements ? `${this.cli.keyword("arguments")} ${this.cli.plain("(")}${this.cli.argument("arity")}${this.cli.plain("=")}${this.cli.number(_e3)}, ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.arrayMaxElements)}${this.cli.plain(")")} ${this.cli.plain("[")}\n` : `${this.cli.keyword("arguments")} ${this.cli.plain("(")}${this.cli.argument("arity")}${this.cli.plain("=")}${this.cli.number(_e3)}${this.cli.plain(")")} ${this.cli.plain("[")}\n`, a = `${i}${this.cli.plain("]")}`, o = this.arrayMaxElements;
          break;
        }

      case "set":
        {
          var _e4 = t.size;
          r = _e4 > this.setMaxValues ? `${this.cli.keyword("set")} ${this.cli.plain("(")}${this.cli.argument("size")}${this.cli.plain("=")}${this.cli.number(_e4)}${this.cli.plain(",")} ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.setMaxValues)}${this.cli.plain(")")} ${this.cli.plain("{")}\n` : `${this.cli.keyword("set")} ${this.cli.plain("(")}${this.cli.argument("size")}${this.cli.plain("=")}${this.cli.number(_e4)}${this.cli.plain(")")} ${this.cli.plain("{")}\n`, a = `${i}}`, o = this.setMaxValues;
          break;
        }

      case "map":
        {
          var _e5 = t.size;
          r = _e5 > this.mapMaxEntries ? `${this.cli.keyword("map")} ${this.cli.plain("(")}${this.cli.argument("size")}${this.cli.plain("=")}${this.cli.number(_e5)}${this.cli.plain(",")} ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.mapMaxEntries)}${this.cli.plain(")")} ${this.cli.plain("{")}\n` : `${this.cli.keyword("map")} ${this.cli.plain("(")}${this.cli.argument("size")}${this.cli.plain("=")}${this.cli.number(_e5)}${this.cli.plain(")")} ${this.cli.plain("{")}\n`, a = `${i}${this.cli.plain("}")}`, o = this.mapMaxEntries;
          break;
        }

      default:
        return this.formatValue(i, t);
    }

    var c = 0;

    switch (l) {
      case "set":
        {
          var _e6 = Array.from(t);

          for (var _t in _e6) {
            var _s2 = _e6[_t],
                _r = this.formatValue(i, _s2);

            if (n += this.formatAssign("set", i, _t, _r), c += 1, c >= o) break;
          }

          break;
        }

      case "map":
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = t.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _e7 = _step.value;

            var _e8 = _slicedToArray(_e7, 2),
                _t2 = _e8[0],
                _s3 = _e8[1],
                _r2 = this.formatValue(i, {
              key: _t2,
              value: _s3
            }, !1);

            if (n += this.formatAssign("map", i, _t2, _r2), c += 1, c >= o) break;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        break;

      default:
        {
          var _e9 = Object.keys(t).sort(function (t, i) {
            return t.localeCompare(i);
          }).reduce(function (t, i) {
            return (t[i] = void 0) || t;
          }, {});

          for (var _s4 in _e9) {
            if (!Object.prototype.hasOwnProperty.call(t, _s4)) continue;

            var _e10 = t[_s4],
                _r3 = getType(_e10),
                _a = this.formatValue(i, _e10);

            if (n += this.formatAssign(_r3, i, _s4, _a), c += 1, c >= o) break;
          }

          break;
        }
    }

    return `${r}${n}${a}`;
  }

  formatValue(t, i) {
    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
    var s = "",
        n = getType(i),
        r = "";
    var a = prototypeTag(i);

    switch (a) {
      case TAG_VOID:
        var _this$formatUndefined = this.formatUndefined();

        var _this$formatUndefined2 = _slicedToArray(_this$formatUndefined, 2);

        n = _this$formatUndefined2[0];
        s = _this$formatUndefined2[1];
        break;

      case TAG_NULL:
        var _this$formatNull = this.formatNull();

        var _this$formatNull2 = _slicedToArray(_this$formatNull, 2);

        n = _this$formatNull2[0];
        s = _this$formatNull2[1];
        break;

      case TAG_GLOBAL:
      case TAG_WINDOW:
        var _this$formatGlobal = this.formatGlobal(a, i, t);

        var _this$formatGlobal2 = _slicedToArray(_this$formatGlobal, 2);

        n = _this$formatGlobal2[0];
        s = _this$formatGlobal2[1];
        break;

      case TAG_BIGINT:
        var _this$formatBigInt = this.formatBigInt(i);

        var _this$formatBigInt2 = _slicedToArray(_this$formatBigInt, 2);

        n = _this$formatBigInt2[0];
        s = _this$formatBigInt2[1];
        break;

      case TAG_NUMBER:
        var _this$formatNumber = this.formatNumber(i);

        var _this$formatNumber2 = _slicedToArray(_this$formatNumber, 2);

        n = _this$formatNumber2[0];
        s = _this$formatNumber2[1];
        break;

      case TAG_BOOL:
        var _this$formatBoolean = this.formatBoolean(i);

        var _this$formatBoolean2 = _slicedToArray(_this$formatBoolean, 2);

        n = _this$formatBoolean2[0];
        s = _this$formatBoolean2[1];
        break;

      case TAG_STRING:
        var _this$formatString = this.formatString(i);

        var _this$formatString2 = _slicedToArray(_this$formatString, 2);

        n = _this$formatString2[0];
        s = _this$formatString2[1];
        break;

      case TAG_REGEXP:
        var _this$formatRegexp = this.formatRegexp(i);

        var _this$formatRegexp2 = _slicedToArray(_this$formatRegexp, 2);

        n = _this$formatRegexp2[0];
        s = _this$formatRegexp2[1];
        break;

      case TAG_FUNCTION:
      case TAG_ASYNC_FUNCTION:
      case TAG_GENERATOR_FUNCTION:
        var _this$formatFunction = this.formatFunction(a, i);

        var _this$formatFunction2 = _slicedToArray(_this$formatFunction, 2);

        n = _this$formatFunction2[0];
        s = _this$formatFunction2[1];
        break;

      case TAG_DATE:
        var _this$formatDate = this.formatDate(i);

        var _this$formatDate2 = _slicedToArray(_this$formatDate, 2);

        n = _this$formatDate2[0];
        s = _this$formatDate2[1];
        break;

      case TAG_ARGUMENTS:
        var _this$formatArguments = this.formatArguments(i);

        var _this$formatArguments2 = _slicedToArray(_this$formatArguments, 2);

        n = _this$formatArguments2[0];
        s = _this$formatArguments2[1];
        break;

      case TAG_SYMBOL:
        var _this$formatSymbol = this.formatSymbol(i);

        var _this$formatSymbol2 = _slicedToArray(_this$formatSymbol, 2);

        n = _this$formatSymbol2[0];
        s = _this$formatSymbol2[1];
        break;

      case TAG_PROMISE:
        var _this$formatPromise = this.formatPromise();

        var _this$formatPromise2 = _slicedToArray(_this$formatPromise, 2);

        n = _this$formatPromise2[0];
        s = _this$formatPromise2[1];
        break;

      case TAG_GENERATOR:
        var _this$formatGenerator = this.formatGenerator();

        var _this$formatGenerator2 = _slicedToArray(_this$formatGenerator, 2);

        n = _this$formatGenerator2[0];
        s = _this$formatGenerator2[1];
        break;

      case TAG_ERROR:
        var _this$formatError = this.formatError(i);

        var _this$formatError2 = _slicedToArray(_this$formatError, 2);

        n = _this$formatError2[0];
        s = _this$formatError2[1];
        break;

      case TAG_WEAK_SET:
      case TAG_WEAK_MAP:
        var _this$formatWeak = this.formatWeak(a);

        var _this$formatWeak2 = _slicedToArray(_this$formatWeak, 2);

        n = _this$formatWeak2[0];
        s = _this$formatWeak2[1];
        break;

      case TAG_SET:
        var _this$formatSet = this.formatSet(i);

        var _this$formatSet2 = _slicedToArray(_this$formatSet, 2);

        n = _this$formatSet2[0];
        s = _this$formatSet2[1];
        break;

      case TAG_MAP:
        var _this$formatMap = this.formatMap(i);

        var _this$formatMap2 = _slicedToArray(_this$formatMap, 2);

        n = _this$formatMap2[0];
        s = _this$formatMap2[1];
        break;

      case TAG_ARRAY_BUFFER:
      case TAG_SHARED_ARRAY_BUFFER:
        var _this$formatBuffer = this.formatBuffer(a, i);

        var _this$formatBuffer2 = _slicedToArray(_this$formatBuffer, 2);

        n = _this$formatBuffer2[0];
        s = _this$formatBuffer2[1];
        break;

      default:
        if (a.includes("Array")) n = "array", r = getClass(i).toLowerCase(), i = Array.from(i);else if (a.includes("Iterator]")) {
          var _s5 = a.split(" ")[1];
          if ("Set" === _s5) return this.toPrintable(new Set(Array.from(i).map(function (t) {
            return t[1];
          })), t, e);
          if ("Map" === _s5) return this.toPrintable(new Map(Array.from(i)), t, e);
          if ("String" === _s5) return this.toPrintable(Array.from(i).map(function (t) {
            return t[1];
          }).join(""), t, e);
          if ("Array" === _s5) return this.toPrintable(Array.from(i).map(function (t) {
            return t[1];
          }), t, e);
        }
    }

    switch (n) {
      case "array":
      case "object":
        if (n = "", this.currentDepth === this.depth) {
          var _t3 = objSize(i);

          var _e11 = "";
          _e11 = _t3 > this.objectMaxProps ? `${this.cli.plain("(")}${this.cli.argument("props")}${this.cli.plain("=")}${this.cli.number(_t3)}${this.cli.plain(",")} ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.objectMaxProps)}${this.cli.plain(")")}` : `${this.cli.plain("(")}${this.cli.argument("props")}${this.cli.plain("=")}${this.cli.number(_t3)}${this.cli.plain(")")}`, s = `${this.cli.keyword("object")} ${this.cli.keyword(getClass(i))} ${_e11}`;
        } else {
          this.currentDepth += 1;

          var _a2 = "array" === n ? `${this.cli.comment(t)}` : `${t}${this.cli.comment(this.indent)}`;

          s = this.toPrintable(i, _a2, e, r), this.currentDepth -= 1;
        }

        break;

      default:
        n.length || (n = a.split("[object ").pop().split("]").shift().toLowerCase(), s = i.toString());
    }

    return `${this.cli.keyword(n)}${n.length ? this.cli.plain(" â€¢ ") : ""}${s}`;
  }

  formatArguments(t) {
    return ["arguments", this.toPrintable(t)];
  }

  formatBigInt(t) {
    return ["number bigint", this.cli.number(t)];
  }

  formatBoolean(t) {
    return ["boolean", this.cli.boolean(t)];
  }

  formatBuffer(t, i) {
    return [TAG_ARRAY_BUFFER ? "array buffer" : "array buffer shared", `${this.cli.plain("(")}${this.cli.argument("bytes")}${this.cli.plain("=")}${this.cli.number(i.byteLength)}${this.cli.plain(")")}`];
  }

  formatDate(t) {
    return ["date", this.cli.name(t.toISOString() + " â€¢ " + t.toString())];
  }

  formatError(t) {
    return [`error ${getClass(t)}`, this.cli.string(t.message)];
  }

  formatFunction(t, i) {
    var e = "function";

    switch (t) {
      case TAG_ASYNC_FUNCTION:
        e = `${e} async`;
        break;

      case TAG_GENERATOR_FUNCTION:
        e = `${e} generator`;
    }

    var s = closureNameExtract(i);
    e = s.length ? `${e} ${this.cli.name(s)}` : `${e} anonymous`;
    var n = `${i}`.replace(/\n+/g, "").split(")").shift() + ") {â€¦}";
    return [e, this.cli.argument(n)];
  }

  formatGenerator() {
    return ["generator", this.cli.argument("Generator {â€¦}")];
  }

  formatGlobal(t, i, e) {
    return [`global ${t === TAG_WINDOW ? "window" : "this"}`, this.toPrintable(_objectSpread({}, i), `${e}${this.cli.comment(this.indent)}`)];
  }

  formatMap(t) {
    return ["map", this.toPrintable(t)];
  }

  formatNull() {
    return ["empty", this.cli.string("null")];
  }

  formatNumber(t) {
    var i = "";
    return Number.isFinite(t) ? i = Number.isInteger(t) ? "number integer" : "number float" : (i = "number", Number.isNaN(t) ? i += " nan" : t === Number.POSITIVE_INFINITY ? i += " positive infinity" : i += " negative infinity"), [i, this.cli.number(t)];
  }

  formatPromise() {
    return ["promise", this.cli.argument("Promise {â€¦}")];
  }

  formatRegexp(t) {
    return [`regexp ${t.flags}`, this.cli.name(t)];
  }

  formatSet(t) {
    return ["set", this.toPrintable(t)];
  }

  formatString(t) {
    var i = [...t],
        e = i.length,
        s = t.length;
    var n = "";
    this.stringMaxLength > 0 && (n = s !== e ? i.slice(0, this.stringMaxLength).join("") : t.slice(0, this.stringMaxLength));
    var r = "";
    return r = s === e ? `${this.cli.string(this.quotesStart)}${this.cli.string(n || t)}${this.cli.string(this.quotesEnd)} ${this.cli.plain("(")}${this.cli.argument("length")}${this.cli.plain("=")}${this.cli.number(s)}` : `${this.cli.string(this.quotesStart)}${this.cli.string(n || t)}${this.cli.string(this.quotesEnd)} ${this.cli.plain("(")}${this.cli.argument("length")}${this.cli.plain("=")}${this.cli.number(s)}${this.cli.plain(",")} ${this.cli.argument("symbols")}${this.cli.plain("=")}${this.cli.number(e)}`, r = e > this.stringMaxLength ? `${r}${this.cli.plain(",")} ${this.cli.argument("shown")}${this.cli.plain("=")}${this.cli.number(this.stringMaxLength)}${this.cli.plain(")")}` : `${r}${this.cli.plain(")")}`, clearString(n), ["string", r];
  }

  formatSymbol(t) {
    return ["symbol", t.toString()];
  }

  formatUndefined() {
    return ["empty", this.cli.string("undefined")];
  }

  formatWeak(t) {
    return t === TAG_WEAK_MAP ? ["map weak", ""] : ["set weak", ""];
  }

  formatAssign(t, i, e, s) {
    var n;
    return "map" === t ? `${i}${this.cli.comment(this.indent)}${s}${this.cli.plain(",")}\n` : "set" === t ? `${i}${this.cli.comment(this.indent)}${this.cli.plain(this.arrow)} ${s}${this.cli.plain(",")}\n` : (n = isNumericKey(e) || "array" === t && "string" != typeof e ? `${this.cli.plain("[")}${this.cli.property(e)}${this.cli.plain("]")}` : `${this.cli.plain(this.quotesStart)}${this.cli.property(e)}${this.cli.plain(this.quotesEnd)}`, `${i}${this.cli.comment(this.indent)}${n} ${this.cli.plain(this.arrow)} ${s}${this.cli.plain(",")}\n`);
  }

  log(t) {
    if (!this.console) return this.toPrintable(t);
    this.clear && clearCli(), console.log(this.toPrintable(t)), this.exit && processExit();
  }

}

function consono(t) {
  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
  var e = arguments.length > 2 ? arguments[2] : undefined;
  var s = {
    console: !0
  };
  "boolean" == typeof i ? s.console = i : i && "object" == typeof i && Object.assign(s, i);
  var n = new Consono(i, e);
  if (!s.console) return n.toPrintable(t);
  s.clear && clearCli(), console.log(n.toPrintable(t)), s.exit && processExit();
}

Consono.factory = function factory() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
  var i = arguments.length > 1 ? arguments[1] : undefined;
  var e = {
    console: !0
  };
  "boolean" == typeof t ? e.console = t : t && "object" == typeof t && Object.assign(e, t);
  var s = new Consono(t, i);
  return function consono(t) {
    if (!e.console) return s.toPrintable(t);
    e.clear && clearCli(), console.log(s.toPrintable(t)), e.exit && processExit();
  };
}, module.exports = {
  default: consono,
  consono: consono,
  Consono: Consono,
  options: OPTIONS_DEFAULT
};