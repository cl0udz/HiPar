J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(374401, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestConsono/node_modules/color-convert/route.js');
            function buildGraph() {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(372793, arguments.callee, this, arguments);
                            arguments = J$.N(372801, 'arguments', arguments, true, false, false);
                            J$.N(372809, 'graph', graph, false, false, false);
                            J$.N(372817, 'models', models, false, false, false);
                            J$.N(372825, 'len', len, false, false, false);
                            J$.N(372833, 'i', i, false, false, false);
                            var graph = J$.W(372601, 'graph', J$.T(372593, {}, 11, false), graph, false, false);
                            var models = J$.W(372633, 'models', J$.M(372625, J$.I(typeof Object === 'undefined' ? Object = J$.R(372609, 'Object', undefined, true, true) : Object = J$.R(372609, 'Object', Object, true, true)), 'keys', false)(J$.R(372617, 'conversions', conversions, false, true)), models, false, false);
                            for (var len = J$.W(372665, 'len', J$.G(372649, J$.R(372641, 'models', models, false, false), 'length'), len, false, false), i = J$.W(372673, 'i', J$.T(372657, 0, 22, false), i, false, false); J$.C(13320, J$.B(35218, '<', J$.R(372681, 'i', i, false, false), J$.R(372689, 'len', len, false, false))); J$.B(35242, '-', i = J$.W(372705, 'i', J$.B(35234, '+', J$.U(35226, '+', J$.R(372697, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(372769, J$.R(372713, 'graph', graph, false, false), J$.G(372737, J$.R(372721, 'models', models, false, false), J$.R(372729, 'i', i, false, false)), J$.T(372761, {
                                    distance: J$.U(35250, '-', J$.T(372745, 1, 22, false)),
                                    parent: J$.T(372753, null, 25, false)
                                }, 11, false));
                            }
                            return J$.Rt(372785, J$.R(372777, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(374481, J$e);
                        } finally {
                            if (J$.Fr(374489))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function deriveBFS(fromModel) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(373297, arguments.callee, this, arguments);
                            arguments = J$.N(373305, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(373313, 'fromModel', fromModel, true, false, false);
                            J$.N(373321, 'graph', graph, false, false, false);
                            J$.N(373329, 'queue', queue, false, false, false);
                            J$.N(373337, 'current', current, false, false, false);
                            J$.N(373345, 'adjacents', adjacents, false, false, false);
                            J$.N(373353, 'len', len, false, false, false);
                            J$.N(373361, 'i', i, false, false, false);
                            J$.N(373369, 'adjacent', adjacent, false, false, false);
                            J$.N(373377, 'node', node, false, false, false);
                            var graph = J$.W(372857, 'graph', J$.F(372849, J$.R(372841, 'buildGraph', buildGraph, false, true), false)(), graph, false, false);
                            var queue = J$.W(372881, 'queue', J$.T(372873, [J$.R(372865, 'fromModel', fromModel, false, false)], 10, false), queue, false, false);
                            J$.P(372921, J$.G(372905, J$.R(372889, 'graph', graph, false, false), J$.R(372897, 'fromModel', fromModel, false, false)), 'distance', J$.T(372913, 0, 22, false));
                            while (J$.C(13344, J$.G(372937, J$.R(372929, 'queue', queue, false, false), 'length'))) {
                                var current = J$.W(372961, 'current', J$.M(372953, J$.R(372945, 'queue', queue, false, false), 'pop', false)(), current, false, false);
                                var adjacents = J$.W(373009, 'adjacents', J$.M(373001, J$.I(typeof Object === 'undefined' ? Object = J$.R(372969, 'Object', undefined, true, true) : Object = J$.R(372969, 'Object', Object, true, true)), 'keys', false)(J$.G(372993, J$.R(372977, 'conversions', conversions, false, true), J$.R(372985, 'current', current, false, false))), adjacents, false, false);
                                for (var len = J$.W(373041, 'len', J$.G(373025, J$.R(373017, 'adjacents', adjacents, false, false), 'length'), len, false, false), i = J$.W(373049, 'i', J$.T(373033, 0, 22, false), i, false, false); J$.C(13336, J$.B(35258, '<', J$.R(373057, 'i', i, false, false), J$.R(373065, 'len', len, false, false))); J$.B(35282, '-', i = J$.W(373081, 'i', J$.B(35274, '+', J$.U(35266, '+', J$.R(373073, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    var adjacent = J$.W(373113, 'adjacent', J$.G(373105, J$.R(373089, 'adjacents', adjacents, false, false), J$.R(373097, 'i', i, false, false)), adjacent, false, false);
                                    var node = J$.W(373145, 'node', J$.G(373137, J$.R(373121, 'graph', graph, false, false), J$.R(373129, 'adjacent', adjacent, false, false)), node, false, false);
                                    if (J$.C(13328, J$.B(35298, '===', J$.G(373161, J$.R(373153, 'node', node, false, false), 'distance'), J$.U(35290, '-', J$.T(373169, 1, 22, false))))) {
                                        J$.P(373225, J$.R(373177, 'node', node, false, false), 'distance', J$.B(35306, '+', J$.G(373209, J$.G(373201, J$.R(373185, 'graph', graph, false, false), J$.R(373193, 'current', current, false, false)), 'distance'), J$.T(373217, 1, 22, false)));
                                        J$.P(373249, J$.R(373233, 'node', node, false, false), 'parent', J$.R(373241, 'current', current, false, false));
                                        J$.M(373273, J$.R(373257, 'queue', queue, false, false), 'unshift', false)(J$.R(373265, 'adjacent', adjacent, false, false));
                                    }
                                }
                            }
                            return J$.Rt(373289, J$.R(373281, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(374497, J$e);
                        } finally {
                            if (J$.Fr(374505))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function link(from, to) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(373473, arguments.callee, this, arguments);
                            arguments = J$.N(373481, 'arguments', arguments, true, false, false);
                            from = J$.N(373489, 'from', from, true, false, false);
                            to = J$.N(373497, 'to', to, true, false, false);
                            return J$.Rt(373465, J$.T(373457, function (args) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(373433, arguments.callee, this, arguments);
                                            arguments = J$.N(373441, 'arguments', arguments, true, false, false);
                                            args = J$.N(373449, 'args', args, true, false, false);
                                            return J$.Rt(373425, J$.F(373417, J$.R(373385, 'to', to, false, false), false)(J$.F(373409, J$.R(373393, 'from', from, false, false), false)(J$.R(373401, 'args', args, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(374513, J$e);
                                        } finally {
                                            if (J$.Fr(374521))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(374529, J$e);
                        } finally {
                            if (J$.Fr(374537))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrapConversion(toModel, graph) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(373929, arguments.callee, this, arguments);
                            arguments = J$.N(373937, 'arguments', arguments, true, false, false);
                            toModel = J$.N(373945, 'toModel', toModel, true, false, false);
                            graph = J$.N(373953, 'graph', graph, true, false, false);
                            J$.N(373961, 'path', path, false, false, false);
                            J$.N(373969, 'fn', fn, false, false, false);
                            J$.N(373977, 'cur', cur, false, false, false);
                            var path = J$.W(373553, 'path', J$.T(373545, [
                                J$.G(373529, J$.G(373521, J$.R(373505, 'graph', graph, false, false), J$.R(373513, 'toModel', toModel, false, false)), 'parent'),
                                J$.R(373537, 'toModel', toModel, false, false)
                            ], 10, false), path, false, false);
                            var fn = J$.W(373625, 'fn', J$.G(373617, J$.G(373601, J$.R(373561, 'conversions', conversions, false, true), J$.G(373593, J$.G(373585, J$.R(373569, 'graph', graph, false, false), J$.R(373577, 'toModel', toModel, false, false)), 'parent')), J$.R(373609, 'toModel', toModel, false, false)), fn, false, false);
                            var cur = J$.W(373665, 'cur', J$.G(373657, J$.G(373649, J$.R(373633, 'graph', graph, false, false), J$.R(373641, 'toModel', toModel, false, false)), 'parent'), cur, false, false);
                            while (J$.C(13352, J$.G(373697, J$.G(373689, J$.R(373673, 'graph', graph, false, false), J$.R(373681, 'cur', cur, false, false)), 'parent'))) {
                                J$.M(373745, J$.R(373705, 'path', path, false, false), 'unshift', false)(J$.G(373737, J$.G(373729, J$.R(373713, 'graph', graph, false, false), J$.R(373721, 'cur', cur, false, false)), 'parent'));
                                fn = J$.W(373841, 'fn', J$.F(373833, J$.R(373753, 'link', link, false, true), false)(J$.G(373817, J$.G(373801, J$.R(373761, 'conversions', conversions, false, true), J$.G(373793, J$.G(373785, J$.R(373769, 'graph', graph, false, false), J$.R(373777, 'cur', cur, false, false)), 'parent')), J$.R(373809, 'cur', cur, false, false)), J$.R(373825, 'fn', fn, false, false)), fn, false, false);
                                cur = J$.W(373881, 'cur', J$.G(373873, J$.G(373865, J$.R(373849, 'graph', graph, false, false), J$.R(373857, 'cur', cur, false, false)), 'parent'), cur, false, false);
                            }
                            J$.P(373905, J$.R(373889, 'fn', fn, false, false), 'conversion', J$.R(373897, 'path', path, false, false));
                            return J$.Rt(373921, J$.R(373913, 'fn', fn, false, false));
                        } catch (J$e) {
                            J$.Ex(374545, J$e);
                        } finally {
                            if (J$.Fr(374553))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(374409, 'conversions', conversions, false, false, false);
            buildGraph = J$.N(374425, 'buildGraph', J$.T(374417, buildGraph, 12, false), true, false, false);
            deriveBFS = J$.N(374441, 'deriveBFS', J$.T(374433, deriveBFS, 12, false), true, false, false);
            link = J$.N(374457, 'link', J$.T(374449, link, 12, false), true, false, false);
            wrapConversion = J$.N(374473, 'wrapConversion', J$.T(374465, wrapConversion, 12, false), true, false, false);
            J$.T(372529, 'use strict', 21, false);
            J$.F(372553, J$.I(typeof require === 'undefined' ? require = J$.R(372537, 'require', undefined, true, true) : require = J$.R(372537, 'require', require, true, true)), false)(J$.T(372545, 'core-js/modules/es.object.keys', 21, false));
            var conversions = J$.W(372585, 'conversions', J$.F(372577, J$.I(typeof require === 'undefined' ? require = J$.R(372561, 'require', undefined, true, true) : require = J$.R(372561, 'require', require, true, true)), false)(J$.T(372569, './conversions', 21, false)), conversions, false, true);
            J$.P(374393, J$.I(typeof module === 'undefined' ? module = J$.R(373985, 'module', undefined, true, true) : module = J$.R(373985, 'module', module, true, true)), 'exports', J$.T(374385, function (fromModel) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(374305, arguments.callee, this, arguments);
                            arguments = J$.N(374313, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(374321, 'fromModel', fromModel, true, false, false);
                            J$.N(374329, 'graph', graph, false, false, false);
                            J$.N(374337, 'conversion', conversion, false, false, false);
                            J$.N(374345, 'models', models, false, false, false);
                            J$.N(374353, 'len', len, false, false, false);
                            J$.N(374361, 'i', i, false, false, false);
                            J$.N(374369, 'toModel', toModel, false, false, false);
                            J$.N(374377, 'node', node, false, false, false);
                            var graph = J$.W(374017, 'graph', J$.F(374009, J$.R(373993, 'deriveBFS', deriveBFS, false, true), false)(J$.R(374001, 'fromModel', fromModel, false, false)), graph, false, false);
                            var conversion = J$.W(374033, 'conversion', J$.T(374025, {}, 11, false), conversion, false, false);
                            var models = J$.W(374065, 'models', J$.M(374057, J$.I(typeof Object === 'undefined' ? Object = J$.R(374041, 'Object', undefined, true, true) : Object = J$.R(374041, 'Object', Object, true, true)), 'keys', false)(J$.R(374049, 'graph', graph, false, false)), models, false, false);
                            for (var len = J$.W(374097, 'len', J$.G(374081, J$.R(374073, 'models', models, false, false), 'length'), len, false, false), i = J$.W(374105, 'i', J$.T(374089, 0, 22, false), i, false, false); J$.C(13368, J$.B(35314, '<', J$.R(374113, 'i', i, false, false), J$.R(374121, 'len', len, false, false))); J$.B(35338, '-', i = J$.W(374137, 'i', J$.B(35330, '+', J$.U(35322, '+', J$.R(374129, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var toModel = J$.W(374169, 'toModel', J$.G(374161, J$.R(374145, 'models', models, false, false), J$.R(374153, 'i', i, false, false)), toModel, false, false);
                                var node = J$.W(374201, 'node', J$.G(374193, J$.R(374177, 'graph', graph, false, false), J$.R(374185, 'toModel', toModel, false, false)), node, false, false);
                                if (J$.C(13360, J$.B(35346, '===', J$.G(374217, J$.R(374209, 'node', node, false, false), 'parent'), J$.T(374225, null, 25, false)))) {
                                    continue;
                                }
                                J$.P(374281, J$.R(374233, 'conversion', conversion, false, false), J$.R(374241, 'toModel', toModel, false, false), J$.F(374273, J$.R(374249, 'wrapConversion', wrapConversion, false, true), false)(J$.R(374257, 'toModel', toModel, false, false), J$.R(374265, 'graph', graph, false, false)));
                            }
                            return J$.Rt(374297, J$.R(374289, 'conversion', conversion, false, false));
                        } catch (J$e) {
                            J$.Ex(374561, J$e);
                        } finally {
                            if (J$.Fr(374569))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(374577, J$e);
        } finally {
            if (J$.Sr(374585))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

