J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(276777, '/mnt/data/fxiao/HiPar/outputs/target_cache/TestConsono/node_modules/color-convert/route.js');
            function buildGraph() {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(275169, arguments.callee, this, arguments);
                            arguments = J$.N(275177, 'arguments', arguments, true, false, false);
                            J$.N(275185, 'graph', graph, false, false, false);
                            J$.N(275193, 'models', models, false, false, false);
                            J$.N(275201, 'len', len, false, false, false);
                            J$.N(275209, 'i', i, false, false, false);
                            var graph = J$.W(274977, 'graph', J$.T(274969, {}, 11, false), graph, false, false);
                            var models = J$.W(275009, 'models', J$.M(275001, J$.I(typeof Object === 'undefined' ? Object = J$.R(274985, 'Object', undefined, true, true) : Object = J$.R(274985, 'Object', Object, true, true)), 'keys', false)(J$.R(274993, 'conversions', conversions, false, true)), models, false, false);
                            for (var len = J$.W(275041, 'len', J$.G(275025, J$.R(275017, 'models', models, false, false), 'length'), len, false, false), i = J$.W(275049, 'i', J$.T(275033, 0, 22, false), i, false, false); J$.C(9752, J$.B(26090, '<', J$.R(275057, 'i', i, false, false), J$.R(275065, 'len', len, false, false))); J$.B(26114, '-', i = J$.W(275081, 'i', J$.B(26106, '+', J$.U(26098, '+', J$.R(275073, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.P(275145, J$.R(275089, 'graph', graph, false, false), J$.G(275113, J$.R(275097, 'models', models, false, false), J$.R(275105, 'i', i, false, false)), J$.T(275137, {
                                    distance: J$.U(26122, '-', J$.T(275121, 1, 22, false)),
                                    parent: J$.T(275129, null, 25, false)
                                }, 11, false));
                            }
                            return J$.Rt(275161, J$.R(275153, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(276857, J$e);
                        } finally {
                            if (J$.Fr(276865))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function deriveBFS(fromModel) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(275673, arguments.callee, this, arguments);
                            arguments = J$.N(275681, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(275689, 'fromModel', fromModel, true, false, false);
                            J$.N(275697, 'graph', graph, false, false, false);
                            J$.N(275705, 'queue', queue, false, false, false);
                            J$.N(275713, 'current', current, false, false, false);
                            J$.N(275721, 'adjacents', adjacents, false, false, false);
                            J$.N(275729, 'len', len, false, false, false);
                            J$.N(275737, 'i', i, false, false, false);
                            J$.N(275745, 'adjacent', adjacent, false, false, false);
                            J$.N(275753, 'node', node, false, false, false);
                            var graph = J$.W(275233, 'graph', J$.F(275225, J$.R(275217, 'buildGraph', buildGraph, false, true), false)(), graph, false, false);
                            var queue = J$.W(275257, 'queue', J$.T(275249, [J$.R(275241, 'fromModel', fromModel, false, false)], 10, false), queue, false, false);
                            J$.P(275297, J$.G(275281, J$.R(275265, 'graph', graph, false, false), J$.R(275273, 'fromModel', fromModel, false, false)), 'distance', J$.T(275289, 0, 22, false));
                            while (J$.C(9776, J$.G(275313, J$.R(275305, 'queue', queue, false, false), 'length'))) {
                                var current = J$.W(275337, 'current', J$.M(275329, J$.R(275321, 'queue', queue, false, false), 'pop', false)(), current, false, false);
                                var adjacents = J$.W(275385, 'adjacents', J$.M(275377, J$.I(typeof Object === 'undefined' ? Object = J$.R(275345, 'Object', undefined, true, true) : Object = J$.R(275345, 'Object', Object, true, true)), 'keys', false)(J$.G(275369, J$.R(275353, 'conversions', conversions, false, true), J$.R(275361, 'current', current, false, false))), adjacents, false, false);
                                for (var len = J$.W(275417, 'len', J$.G(275401, J$.R(275393, 'adjacents', adjacents, false, false), 'length'), len, false, false), i = J$.W(275425, 'i', J$.T(275409, 0, 22, false), i, false, false); J$.C(9768, J$.B(26130, '<', J$.R(275433, 'i', i, false, false), J$.R(275441, 'len', len, false, false))); J$.B(26154, '-', i = J$.W(275457, 'i', J$.B(26146, '+', J$.U(26138, '+', J$.R(275449, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    var adjacent = J$.W(275489, 'adjacent', J$.G(275481, J$.R(275465, 'adjacents', adjacents, false, false), J$.R(275473, 'i', i, false, false)), adjacent, false, false);
                                    var node = J$.W(275521, 'node', J$.G(275513, J$.R(275497, 'graph', graph, false, false), J$.R(275505, 'adjacent', adjacent, false, false)), node, false, false);
                                    if (J$.C(9760, J$.B(26170, '===', J$.G(275537, J$.R(275529, 'node', node, false, false), 'distance'), J$.U(26162, '-', J$.T(275545, 1, 22, false))))) {
                                        J$.P(275601, J$.R(275553, 'node', node, false, false), 'distance', J$.B(26178, '+', J$.G(275585, J$.G(275577, J$.R(275561, 'graph', graph, false, false), J$.R(275569, 'current', current, false, false)), 'distance'), J$.T(275593, 1, 22, false)));
                                        J$.P(275625, J$.R(275609, 'node', node, false, false), 'parent', J$.R(275617, 'current', current, false, false));
                                        J$.M(275649, J$.R(275633, 'queue', queue, false, false), 'unshift', false)(J$.R(275641, 'adjacent', adjacent, false, false));
                                    }
                                }
                            }
                            return J$.Rt(275665, J$.R(275657, 'graph', graph, false, false));
                        } catch (J$e) {
                            J$.Ex(276873, J$e);
                        } finally {
                            if (J$.Fr(276881))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function link(from, to) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(275849, arguments.callee, this, arguments);
                            arguments = J$.N(275857, 'arguments', arguments, true, false, false);
                            from = J$.N(275865, 'from', from, true, false, false);
                            to = J$.N(275873, 'to', to, true, false, false);
                            return J$.Rt(275841, J$.T(275833, function (args) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(275809, arguments.callee, this, arguments);
                                            arguments = J$.N(275817, 'arguments', arguments, true, false, false);
                                            args = J$.N(275825, 'args', args, true, false, false);
                                            return J$.Rt(275801, J$.F(275793, J$.R(275761, 'to', to, false, false), false)(J$.F(275785, J$.R(275769, 'from', from, false, false), false)(J$.R(275777, 'args', args, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(276889, J$e);
                                        } finally {
                                            if (J$.Fr(276897))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(276905, J$e);
                        } finally {
                            if (J$.Fr(276913))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function wrapConversion(toModel, graph) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(276305, arguments.callee, this, arguments);
                            arguments = J$.N(276313, 'arguments', arguments, true, false, false);
                            toModel = J$.N(276321, 'toModel', toModel, true, false, false);
                            graph = J$.N(276329, 'graph', graph, true, false, false);
                            J$.N(276337, 'path', path, false, false, false);
                            J$.N(276345, 'fn', fn, false, false, false);
                            J$.N(276353, 'cur', cur, false, false, false);
                            var path = J$.W(275929, 'path', J$.T(275921, [
                                J$.G(275905, J$.G(275897, J$.R(275881, 'graph', graph, false, false), J$.R(275889, 'toModel', toModel, false, false)), 'parent'),
                                J$.R(275913, 'toModel', toModel, false, false)
                            ], 10, false), path, false, false);
                            var fn = J$.W(276001, 'fn', J$.G(275993, J$.G(275977, J$.R(275937, 'conversions', conversions, false, true), J$.G(275969, J$.G(275961, J$.R(275945, 'graph', graph, false, false), J$.R(275953, 'toModel', toModel, false, false)), 'parent')), J$.R(275985, 'toModel', toModel, false, false)), fn, false, false);
                            var cur = J$.W(276041, 'cur', J$.G(276033, J$.G(276025, J$.R(276009, 'graph', graph, false, false), J$.R(276017, 'toModel', toModel, false, false)), 'parent'), cur, false, false);
                            while (J$.C(9784, J$.G(276073, J$.G(276065, J$.R(276049, 'graph', graph, false, false), J$.R(276057, 'cur', cur, false, false)), 'parent'))) {
                                J$.M(276121, J$.R(276081, 'path', path, false, false), 'unshift', false)(J$.G(276113, J$.G(276105, J$.R(276089, 'graph', graph, false, false), J$.R(276097, 'cur', cur, false, false)), 'parent'));
                                fn = J$.W(276217, 'fn', J$.F(276209, J$.R(276129, 'link', link, false, true), false)(J$.G(276193, J$.G(276177, J$.R(276137, 'conversions', conversions, false, true), J$.G(276169, J$.G(276161, J$.R(276145, 'graph', graph, false, false), J$.R(276153, 'cur', cur, false, false)), 'parent')), J$.R(276185, 'cur', cur, false, false)), J$.R(276201, 'fn', fn, false, false)), fn, false, false);
                                cur = J$.W(276257, 'cur', J$.G(276249, J$.G(276241, J$.R(276225, 'graph', graph, false, false), J$.R(276233, 'cur', cur, false, false)), 'parent'), cur, false, false);
                            }
                            J$.P(276281, J$.R(276265, 'fn', fn, false, false), 'conversion', J$.R(276273, 'path', path, false, false));
                            return J$.Rt(276297, J$.R(276289, 'fn', fn, false, false));
                        } catch (J$e) {
                            J$.Ex(276921, J$e);
                        } finally {
                            if (J$.Fr(276929))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(276785, 'conversions', conversions, false, false, false);
            buildGraph = J$.N(276801, 'buildGraph', J$.T(276793, buildGraph, 12, false), true, false, false);
            deriveBFS = J$.N(276817, 'deriveBFS', J$.T(276809, deriveBFS, 12, false), true, false, false);
            link = J$.N(276833, 'link', J$.T(276825, link, 12, false), true, false, false);
            wrapConversion = J$.N(276849, 'wrapConversion', J$.T(276841, wrapConversion, 12, false), true, false, false);
            J$.T(274929, 'use strict', 21, false);
            var conversions = J$.W(274961, 'conversions', J$.F(274953, J$.I(typeof require === 'undefined' ? require = J$.R(274937, 'require', undefined, true, true) : require = J$.R(274937, 'require', require, true, true)), false)(J$.T(274945, './conversions', 21, false)), conversions, false, true);
            J$.P(276769, J$.I(typeof module === 'undefined' ? module = J$.R(276361, 'module', undefined, true, true) : module = J$.R(276361, 'module', module, true, true)), 'exports', J$.T(276761, function (fromModel) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(276681, arguments.callee, this, arguments);
                            arguments = J$.N(276689, 'arguments', arguments, true, false, false);
                            fromModel = J$.N(276697, 'fromModel', fromModel, true, false, false);
                            J$.N(276705, 'graph', graph, false, false, false);
                            J$.N(276713, 'conversion', conversion, false, false, false);
                            J$.N(276721, 'models', models, false, false, false);
                            J$.N(276729, 'len', len, false, false, false);
                            J$.N(276737, 'i', i, false, false, false);
                            J$.N(276745, 'toModel', toModel, false, false, false);
                            J$.N(276753, 'node', node, false, false, false);
                            var graph = J$.W(276393, 'graph', J$.F(276385, J$.R(276369, 'deriveBFS', deriveBFS, false, true), false)(J$.R(276377, 'fromModel', fromModel, false, false)), graph, false, false);
                            var conversion = J$.W(276409, 'conversion', J$.T(276401, {}, 11, false), conversion, false, false);
                            var models = J$.W(276441, 'models', J$.M(276433, J$.I(typeof Object === 'undefined' ? Object = J$.R(276417, 'Object', undefined, true, true) : Object = J$.R(276417, 'Object', Object, true, true)), 'keys', false)(J$.R(276425, 'graph', graph, false, false)), models, false, false);
                            for (var len = J$.W(276473, 'len', J$.G(276457, J$.R(276449, 'models', models, false, false), 'length'), len, false, false), i = J$.W(276481, 'i', J$.T(276465, 0, 22, false), i, false, false); J$.C(9800, J$.B(26186, '<', J$.R(276489, 'i', i, false, false), J$.R(276497, 'len', len, false, false))); J$.B(26210, '-', i = J$.W(276513, 'i', J$.B(26202, '+', J$.U(26194, '+', J$.R(276505, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var toModel = J$.W(276545, 'toModel', J$.G(276537, J$.R(276521, 'models', models, false, false), J$.R(276529, 'i', i, false, false)), toModel, false, false);
                                var node = J$.W(276577, 'node', J$.G(276569, J$.R(276553, 'graph', graph, false, false), J$.R(276561, 'toModel', toModel, false, false)), node, false, false);
                                if (J$.C(9792, J$.B(26218, '===', J$.G(276593, J$.R(276585, 'node', node, false, false), 'parent'), J$.T(276601, null, 25, false)))) {
                                    continue;
                                }
                                J$.P(276657, J$.R(276609, 'conversion', conversion, false, false), J$.R(276617, 'toModel', toModel, false, false), J$.F(276649, J$.R(276625, 'wrapConversion', wrapConversion, false, true), false)(J$.R(276633, 'toModel', toModel, false, false), J$.R(276641, 'graph', graph, false, false)));
                            }
                            return J$.Rt(276673, J$.R(276665, 'conversion', conversion, false, false));
                        } catch (J$e) {
                            J$.Ex(276937, J$e);
                        } finally {
                            if (J$.Fr(276945))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(276953, J$e);
        } finally {
            if (J$.Sr(276961))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

