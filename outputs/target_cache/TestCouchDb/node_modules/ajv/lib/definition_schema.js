J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(1917609, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/ajv/lib/definition_schema.js');
            J$.N(1917617, 'metaSchema', metaSchema, false, false, false);
            J$.T(1917185, 'use strict', 21, false);
            var metaSchema = J$.W(1917217, 'metaSchema', J$.F(1917209, J$.I(typeof require === 'undefined' ? require = J$.R(1917193, 'require', undefined, true, true) : require = J$.R(1917193, 'require', require, true, true)), false)(J$.T(1917201, './refs/json-schema-draft-07.json', 21, false)), metaSchema, false, true);
            J$.P(1917601, J$.I(typeof module === 'undefined' ? module = J$.R(1917225, 'module', undefined, true, true) : module = J$.R(1917225, 'module', module, true, true)), 'exports', J$.T(1917593, {
                $id: J$.T(1917233, 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js', 21, false),
                definitions: J$.T(1917265, { simpleTypes: J$.G(1917257, J$.G(1917249, J$.R(1917241, 'metaSchema', metaSchema, false, true), 'definitions'), 'simpleTypes') }, 11, false),
                type: J$.T(1917273, 'object', 21, false),
                dependencies: J$.T(1917361, {
                    schema: J$.T(1917289, [J$.T(1917281, 'validate', 21, false)], 10, false),
                    $data: J$.T(1917305, [J$.T(1917297, 'validate', 21, false)], 10, false),
                    statements: J$.T(1917321, [J$.T(1917313, 'inline', 21, false)], 10, false),
                    valid: J$.T(1917353, { not: J$.T(1917345, { required: J$.T(1917337, [J$.T(1917329, 'macro', 21, false)], 10, false) }, 11, false) }, 11, false)
                }, 11, false),
                properties: J$.T(1917585, {
                    type: J$.G(1917385, J$.G(1917377, J$.R(1917369, 'metaSchema', metaSchema, false, true), 'properties'), 'type'),
                    schema: J$.T(1917401, { type: J$.T(1917393, 'boolean', 21, false) }, 11, false),
                    statements: J$.T(1917417, { type: J$.T(1917409, 'boolean', 21, false) }, 11, false),
                    dependencies: J$.T(1917449, {
                        type: J$.T(1917425, 'array', 21, false),
                        items: J$.T(1917441, { type: J$.T(1917433, 'string', 21, false) }, 11, false)
                    }, 11, false),
                    metaSchema: J$.T(1917465, { type: J$.T(1917457, 'object', 21, false) }, 11, false),
                    modifying: J$.T(1917481, { type: J$.T(1917473, 'boolean', 21, false) }, 11, false),
                    valid: J$.T(1917497, { type: J$.T(1917489, 'boolean', 21, false) }, 11, false),
                    $data: J$.T(1917513, { type: J$.T(1917505, 'boolean', 21, false) }, 11, false),
                    async: J$.T(1917529, { type: J$.T(1917521, 'boolean', 21, false) }, 11, false),
                    errors: J$.T(1917577, {
                        anyOf: J$.T(1917569, [
                            J$.T(1917545, { type: J$.T(1917537, 'boolean', 21, false) }, 11, false),
                            J$.T(1917561, { 'const': J$.T(1917553, 'full', 21, false) }, 11, false)
                        ], 10, false)
                    }, 11, false)
                }, 11, false)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(1917625, J$e);
        } finally {
            if (J$.Sr(1917633))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

