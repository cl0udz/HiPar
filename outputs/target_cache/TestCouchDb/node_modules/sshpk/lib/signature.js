J$.noInstrEval = false;
jalangiLabel10:
    while (true) {
        try {
            J$.Se(3128465, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/sshpk/lib/signature.js');
            function Signature(opts) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3122417, arguments.callee, this, arguments);
                            arguments = J$.N(3122425, 'arguments', arguments, true, false, false);
                            opts = J$.N(3122433, 'opts', opts, true, false, false);
                            J$.N(3122441, 'partLookup', partLookup, false, false, false);
                            J$.N(3122449, 'i', i, false, false, false);
                            J$.N(3122457, 'part', part, false, false, false);
                            J$.M(3122017, J$.R(3121993, 'assert', assert, false, true), 'object', false)(J$.R(3122001, 'opts', opts, false, false), J$.T(3122009, 'options', 21, false));
                            J$.M(3122057, J$.R(3122025, 'assert', assert, false, true), 'arrayOfObject', false)(J$.G(3122041, J$.R(3122033, 'opts', opts, false, false), 'parts'), J$.T(3122049, 'options.parts', 21, false));
                            J$.M(3122097, J$.R(3122065, 'assert', assert, false, true), 'string', false)(J$.G(3122081, J$.R(3122073, 'opts', opts, false, false), 'type'), J$.T(3122089, 'options.type', 21, false));
                            var partLookup = J$.W(3122113, 'partLookup', J$.T(3122105, {}, 11, false), partLookup, false, false);
                            for (var i = J$.W(3122129, 'i', J$.T(3122121, 0, 22, false), i, false, false); J$.C(175744, J$.B(323402, '<', J$.R(3122137, 'i', i, false, false), J$.G(3122161, J$.G(3122153, J$.R(3122145, 'opts', opts, false, false), 'parts'), 'length'))); i = J$.W(3122177, 'i', J$.B(323418, '+', J$.U(323410, '+', J$.R(3122169, 'i', i, false, false)), 1), i, false, false)) {
                                var part = J$.W(3122217, 'part', J$.G(3122209, J$.G(3122193, J$.R(3122185, 'opts', opts, false, false), 'parts'), J$.R(3122201, 'i', i, false, false)), part, false, false);
                                J$.P(3122257, J$.R(3122225, 'partLookup', partLookup, false, false), J$.G(3122241, J$.R(3122233, 'part', part, false, false), 'name'), J$.R(3122249, 'part', part, false, false));
                            }
                            J$.P(3122289, J$.R(3122265, 'this', this, false, false), 'type', J$.G(3122281, J$.R(3122273, 'opts', opts, false, false), 'type'));
                            J$.P(3122321, J$.R(3122297, 'this', this, false, false), 'hashAlgorithm', J$.G(3122313, J$.R(3122305, 'opts', opts, false, false), 'hashAlgo'));
                            J$.P(3122353, J$.R(3122329, 'this', this, false, false), 'curve', J$.G(3122345, J$.R(3122337, 'opts', opts, false, false), 'curve'));
                            J$.P(3122385, J$.R(3122361, 'this', this, false, false), 'parts', J$.G(3122377, J$.R(3122369, 'opts', opts, false, false), 'parts'));
                            J$.P(3122409, J$.R(3122393, 'this', this, false, false), 'part', J$.R(3122401, 'partLookup', partLookup, false, false));
                        } catch (J$e) {
                            J$.Ex(3128633, J$e);
                        } finally {
                            if (J$.Fr(3128641))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseOneNum(data, type, format, opts) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3126273, arguments.callee, this, arguments);
                            arguments = J$.N(3126281, 'arguments', arguments, true, false, false);
                            data = J$.N(3126289, 'data', data, true, false, false);
                            type = J$.N(3126297, 'type', type, true, false, false);
                            format = J$.N(3126305, 'format', format, true, false, false);
                            opts = J$.N(3126313, 'opts', opts, true, false, false);
                            J$.N(3126321, 'buf', buf, false, false, false);
                            J$.N(3126329, 'head', head, false, false, false);
                            J$.N(3126337, 'msg', msg, false, false, false);
                            J$.N(3126345, 'sig', sig, false, false, false);
                            if (J$.C(176104, J$.B(323682, '===', J$.R(3125545, 'format', format, false, false), J$.T(3125553, 'ssh', 21, false)))) {
                                try {
                                    var buf = J$.W(3125593, 'buf', J$.F(3125585, J$.R(3125561, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3125577, { buffer: J$.R(3125569, 'data', data, false, false) }, 11, false)), buf, false, false);
                                    var head = J$.W(3125617, 'head', J$.M(3125609, J$.R(3125601, 'buf', buf, false, false), 'readString', false)(), head, false, false);
                                } catch (e) {
                                    J$.N(3125625, 'e', e, false, false, true);
                                }
                                if (J$.C(176096, J$.B(323690, '!==', J$.R(3125633, 'buf', buf, false, false), J$.T(3125641, undefined, 24, false)))) {
                                    var msg = J$.W(3125697, 'msg', J$.B(323730, '+', J$.B(323722, '+', J$.B(323714, '+', J$.B(323706, '+', J$.B(323698, '+', J$.T(3125649, 'SSH signature does not match expected ', 21, false), J$.T(3125657, 'type (expected ', 21, false)), J$.R(3125665, 'type', type, false, false)), J$.T(3125673, ', got ', 21, false)), J$.R(3125681, 'head', head, false, false)), J$.T(3125689, ')', 21, false)), msg, false, false);
                                    switch (J$.C1(176056, J$.R(3125705, 'head', head, false, false))) {
                                    case J$.C2(176064, J$.T(3125777, 'ssh-rsa', 21, false)):
                                        J$.M(3125745, J$.R(3125713, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3125721, 'type', type, false, false), J$.T(3125729, 'rsa', 21, false), J$.R(3125737, 'msg', msg, false, false));
                                        J$.P(3125769, J$.R(3125753, 'opts', opts, false, false), 'hashAlgo', J$.T(3125761, 'sha1', 21, false));
                                        break;
                                    case J$.C2(176072, J$.T(3125849, 'rsa-sha2-256', 21, false)):
                                        J$.M(3125817, J$.R(3125785, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3125793, 'type', type, false, false), J$.T(3125801, 'rsa', 21, false), J$.R(3125809, 'msg', msg, false, false));
                                        J$.P(3125841, J$.R(3125825, 'opts', opts, false, false), 'hashAlgo', J$.T(3125833, 'sha256', 21, false));
                                        break;
                                    case J$.C2(176080, J$.T(3125921, 'rsa-sha2-512', 21, false)):
                                        J$.M(3125889, J$.R(3125857, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3125865, 'type', type, false, false), J$.T(3125873, 'rsa', 21, false), J$.R(3125881, 'msg', msg, false, false));
                                        J$.P(3125913, J$.R(3125897, 'opts', opts, false, false), 'hashAlgo', J$.T(3125905, 'sha512', 21, false));
                                        break;
                                    case J$.C2(176088, J$.T(3125993, 'ssh-ed25519', 21, false)):
                                        J$.M(3125961, J$.R(3125929, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3125937, 'type', type, false, false), J$.T(3125945, 'ed25519', 21, false), J$.R(3125953, 'msg', msg, false, false));
                                        J$.P(3125985, J$.R(3125969, 'opts', opts, false, false), 'hashAlgo', J$.T(3125977, 'sha512', 21, false));
                                        break;
                                    default:
                                        throw J$.F(3126033, J$.I(typeof Error === 'undefined' ? Error = J$.R(3126001, 'Error', undefined, true, true) : Error = J$.R(3126001, 'Error', Error, true, true)), true)(J$.B(323746, '+', J$.B(323738, '+', J$.T(3126009, 'Unknown SSH signature ', 21, false), J$.T(3126017, 'type: ', 21, false)), J$.R(3126025, 'head', head, false, false)));
                                    }
                                    var sig = J$.W(3126057, 'sig', J$.M(3126049, J$.R(3126041, 'buf', buf, false, false), 'readPart', false)(), sig, false, false);
                                    J$.M(3126097, J$.R(3126065, 'assert', assert, false, true), 'ok', false)(J$.M(3126081, J$.R(3126073, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3126089, 'extra trailing bytes', 21, false));
                                    J$.P(3126121, J$.R(3126105, 'sig', sig, false, false), 'name', J$.T(3126113, 'sig', 21, false));
                                    J$.M(3126153, J$.G(3126137, J$.R(3126129, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3126145, 'sig', sig, false, false));
                                    return J$.Rt(3126185, J$.F(3126177, J$.R(3126161, 'Signature', Signature, false, true), true)(J$.R(3126169, 'opts', opts, false, false)));
                                }
                            }
                            J$.M(3126233, J$.G(3126201, J$.R(3126193, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3126225, {
                                name: J$.T(3126209, 'sig', 21, false),
                                data: J$.R(3126217, 'data', data, false, false)
                            }, 11, false));
                            return J$.Rt(3126265, J$.F(3126257, J$.R(3126241, 'Signature', Signature, false, true), true)(J$.R(3126249, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3128697, J$e);
                        } finally {
                            if (J$.Fr(3128705))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSAasn1(data, type, format, opts) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3126673, arguments.callee, this, arguments);
                            arguments = J$.N(3126681, 'arguments', arguments, true, false, false);
                            data = J$.N(3126689, 'data', data, true, false, false);
                            type = J$.N(3126697, 'type', type, true, false, false);
                            format = J$.N(3126705, 'format', format, true, false, false);
                            opts = J$.N(3126713, 'opts', opts, true, false, false);
                            J$.N(3126721, 'der', der, false, false, false);
                            J$.N(3126729, 'r', r, false, false, false);
                            J$.N(3126737, 's', s, false, false, false);
                            var der = J$.W(3126377, 'der', J$.M(3126369, J$.R(3126353, 'asn1', asn1, false, true), 'BerReader', true)(J$.R(3126361, 'data', data, false, false)), der, false, false);
                            J$.M(3126393, J$.R(3126385, 'der', der, false, false), 'readSequence', false)();
                            var r = J$.W(3126449, 'r', J$.M(3126441, J$.R(3126401, 'der', der, false, false), 'readString', false)(J$.G(3126425, J$.G(3126417, J$.R(3126409, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3126433, true, 23, false)), r, false, false);
                            var s = J$.W(3126505, 's', J$.M(3126497, J$.R(3126457, 'der', der, false, false), 'readString', false)(J$.G(3126481, J$.G(3126473, J$.R(3126465, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3126489, true, 23, false)), s, false, false);
                            J$.M(3126569, J$.G(3126521, J$.R(3126513, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3126561, {
                                name: J$.T(3126529, 'r', 21, false),
                                data: J$.M(3126553, J$.R(3126537, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3126545, 'r', r, false, false))
                            }, 11, false));
                            J$.M(3126633, J$.G(3126585, J$.R(3126577, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3126625, {
                                name: J$.T(3126593, 's', 21, false),
                                data: J$.M(3126617, J$.R(3126601, 'utils', utils, false, true), 'mpNormalize', false)(J$.R(3126609, 's', s, false, false))
                            }, 11, false));
                            return J$.Rt(3126665, J$.F(3126657, J$.R(3126641, 'Signature', Signature, false, true), true)(J$.R(3126649, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3128713, J$e);
                        } finally {
                            if (J$.Fr(3128721))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseDSA(data, type, format, opts) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3127169, arguments.callee, this, arguments);
                            arguments = J$.N(3127177, 'arguments', arguments, true, false, false);
                            data = J$.N(3127185, 'data', data, true, false, false);
                            type = J$.N(3127193, 'type', type, true, false, false);
                            format = J$.N(3127201, 'format', format, true, false, false);
                            opts = J$.N(3127209, 'opts', opts, true, false, false);
                            J$.N(3127217, 'buf', buf, false, false, false);
                            J$.N(3127225, 'd', d, false, false, false);
                            if (J$.C(176120, J$.B(323754, '!=', J$.G(3126753, J$.R(3126745, 'data', data, false, false), 'length'), J$.T(3126761, 40, 22, false)))) {
                                var buf = J$.W(3126801, 'buf', J$.F(3126793, J$.R(3126769, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3126785, { buffer: J$.R(3126777, 'data', data, false, false) }, 11, false)), buf, false, false);
                                var d = J$.W(3126825, 'd', J$.M(3126817, J$.R(3126809, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                if (J$.C(176112, J$.B(323762, '===', J$.M(3126849, J$.R(3126833, 'd', d, false, false), 'toString', false)(J$.T(3126841, 'ascii', 21, false)), J$.T(3126857, 'ssh-dss', 21, false))))
                                    d = J$.W(3126881, 'd', J$.M(3126873, J$.R(3126865, 'buf', buf, false, false), 'readBuffer', false)(), d, false, false);
                                J$.M(3126921, J$.R(3126889, 'assert', assert, false, true), 'ok', false)(J$.M(3126905, J$.R(3126897, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3126913, 'extra trailing bytes', 21, false));
                                J$.M(3126969, J$.R(3126929, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3126945, J$.R(3126937, 'd', d, false, false), 'length'), J$.T(3126953, 40, 22, false), J$.T(3126961, 'invalid inner length', 21, false));
                                data = J$.W(3126985, 'data', J$.R(3126977, 'd', d, false, false), data, false, false);
                            }
                            J$.M(3127057, J$.G(3127001, J$.R(3126993, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3127049, {
                                name: J$.T(3127009, 'r', 21, false),
                                data: J$.M(3127041, J$.R(3127017, 'data', data, false, false), 'slice', false)(J$.T(3127025, 0, 22, false), J$.T(3127033, 20, 22, false))
                            }, 11, false));
                            J$.M(3127129, J$.G(3127073, J$.R(3127065, 'opts', opts, false, false), 'parts'), 'push', false)(J$.T(3127121, {
                                name: J$.T(3127081, 's', 21, false),
                                data: J$.M(3127113, J$.R(3127089, 'data', data, false, false), 'slice', false)(J$.T(3127097, 20, 22, false), J$.T(3127105, 40, 22, false))
                            }, 11, false));
                            return J$.Rt(3127161, J$.F(3127153, J$.R(3127137, 'Signature', Signature, false, true), true)(J$.R(3127145, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3128729, J$e);
                        } finally {
                            if (J$.Fr(3128737))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseECDSA(data, type, format, opts) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3128049, arguments.callee, this, arguments);
                            arguments = J$.N(3128057, 'arguments', arguments, true, false, false);
                            data = J$.N(3128065, 'data', data, true, false, false);
                            type = J$.N(3128073, 'type', type, true, false, false);
                            format = J$.N(3128081, 'format', format, true, false, false);
                            opts = J$.N(3128089, 'opts', opts, true, false, false);
                            J$.N(3128097, 'buf', buf, false, false, false);
                            J$.N(3128105, 'r', r, false, false, false);
                            J$.N(3128113, 's', s, false, false, false);
                            J$.N(3128121, 'inner', inner, false, false, false);
                            J$.N(3128129, 'stype', stype, false, false, false);
                            J$.N(3128137, 'parts', parts, false, false, false);
                            var buf = J$.W(3127265, 'buf', J$.F(3127257, J$.R(3127233, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3127249, { buffer: J$.R(3127241, 'data', data, false, false) }, 11, false)), buf, false, false);
                            var r, s;
                            var inner = J$.W(3127289, 'inner', J$.M(3127281, J$.R(3127273, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                            var stype = J$.W(3127321, 'stype', J$.M(3127313, J$.R(3127297, 'inner', inner, false, false), 'toString', false)(J$.T(3127305, 'ascii', 21, false)), stype, false, false);
                            if (J$.C(176160, J$.B(323770, '===', J$.M(3127353, J$.R(3127329, 'stype', stype, false, false), 'slice', false)(J$.T(3127337, 0, 22, false), J$.T(3127345, 6, 22, false)), J$.T(3127361, 'ecdsa-', 21, false)))) {
                                var parts = J$.W(3127393, 'parts', J$.M(3127385, J$.R(3127369, 'stype', stype, false, false), 'split', false)(J$.T(3127377, '-', 21, false)), parts, false, false);
                                J$.M(3127441, J$.R(3127401, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3127425, J$.R(3127409, 'parts', parts, false, false), J$.T(3127417, 0, 22, false)), J$.T(3127433, 'ecdsa', 21, false));
                                J$.M(3127489, J$.R(3127449, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3127473, J$.R(3127457, 'parts', parts, false, false), J$.T(3127465, 1, 22, false)), J$.T(3127481, 'sha2', 21, false));
                                J$.P(3127529, J$.R(3127497, 'opts', opts, false, false), 'curve', J$.G(3127521, J$.R(3127505, 'parts', parts, false, false), J$.T(3127513, 2, 22, false)));
                                switch (J$.C1(176128, J$.G(3127545, J$.R(3127537, 'opts', opts, false, false), 'curve'))) {
                                case J$.C2(176136, J$.T(3127577, 'nistp256', 21, false)):
                                    J$.P(3127569, J$.R(3127553, 'opts', opts, false, false), 'hashAlgo', J$.T(3127561, 'sha256', 21, false));
                                    break;
                                case J$.C2(176144, J$.T(3127609, 'nistp384', 21, false)):
                                    J$.P(3127601, J$.R(3127585, 'opts', opts, false, false), 'hashAlgo', J$.T(3127593, 'sha384', 21, false));
                                    break;
                                case J$.C2(176152, J$.T(3127641, 'nistp521', 21, false)):
                                    J$.P(3127633, J$.R(3127617, 'opts', opts, false, false), 'hashAlgo', J$.T(3127625, 'sha512', 21, false));
                                    break;
                                default:
                                    throw J$.F(3127681, J$.I(typeof Error === 'undefined' ? Error = J$.R(3127649, 'Error', undefined, true, true) : Error = J$.R(3127649, 'Error', Error, true, true)), true)(J$.B(323778, '+', J$.T(3127657, 'Unsupported ECDSA curve: ', 21, false), J$.G(3127673, J$.R(3127665, 'opts', opts, false, false), 'curve')));
                                }
                                inner = J$.W(3127705, 'inner', J$.M(3127697, J$.R(3127689, 'buf', buf, false, false), 'readBuffer', false)(), inner, false, false);
                                J$.M(3127745, J$.R(3127713, 'assert', assert, false, true), 'ok', false)(J$.M(3127729, J$.R(3127721, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3127737, 'extra trailing bytes on outer', 21, false));
                                buf = J$.W(3127785, 'buf', J$.F(3127777, J$.R(3127753, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3127769, { buffer: J$.R(3127761, 'inner', inner, false, false) }, 11, false)), buf, false, false);
                                r = J$.W(3127809, 'r', J$.M(3127801, J$.R(3127793, 'buf', buf, false, false), 'readPart', false)(), r, false, false);
                            } else {
                                r = J$.W(3127833, 'r', J$.T(3127825, { data: J$.R(3127817, 'inner', inner, false, false) }, 11, false), r, false, false);
                            }
                            s = J$.W(3127857, 's', J$.M(3127849, J$.R(3127841, 'buf', buf, false, false), 'readPart', false)(), s, false, false);
                            J$.M(3127897, J$.R(3127865, 'assert', assert, false, true), 'ok', false)(J$.M(3127881, J$.R(3127873, 'buf', buf, false, false), 'atEnd', false)(), J$.T(3127889, 'extra trailing bytes', 21, false));
                            J$.P(3127921, J$.R(3127905, 'r', r, false, false), 'name', J$.T(3127913, 'r', 21, false));
                            J$.P(3127945, J$.R(3127929, 's', s, false, false), 'name', J$.T(3127937, 's', 21, false));
                            J$.M(3127977, J$.G(3127961, J$.R(3127953, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3127969, 'r', r, false, false));
                            J$.M(3128009, J$.G(3127993, J$.R(3127985, 'opts', opts, false, false), 'parts'), 'push', false)(J$.R(3128001, 's', s, false, false));
                            return J$.Rt(3128041, J$.F(3128033, J$.R(3128017, 'Signature', Signature, false, true), true)(J$.R(3128025, 'opts', opts, false, false)));
                        } catch (J$e) {
                            J$.Ex(3128745, J$e);
                        } finally {
                            if (J$.Fr(3128753))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3128473, 'assert', assert, false, false, false);
            J$.N(3128481, 'Buffer', Buffer, false, false, false);
            J$.N(3128489, 'algs', algs, false, false, false);
            J$.N(3128497, 'crypto', crypto, false, false, false);
            J$.N(3128505, 'errs', errs, false, false, false);
            J$.N(3128513, 'utils', utils, false, false, false);
            J$.N(3128521, 'asn1', asn1, false, false, false);
            J$.N(3128529, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(3128537, 'InvalidAlgorithmError', InvalidAlgorithmError, false, false, false);
            J$.N(3128545, 'SignatureParseError', SignatureParseError, false, false, false);
            Signature = J$.N(3128561, 'Signature', J$.T(3128553, Signature, 12, false), true, false, false);
            parseOneNum = J$.N(3128577, 'parseOneNum', J$.T(3128569, parseOneNum, 12, false), true, false, false);
            parseDSAasn1 = J$.N(3128593, 'parseDSAasn1', J$.T(3128585, parseDSAasn1, 12, false), true, false, false);
            parseDSA = J$.N(3128609, 'parseDSA', J$.T(3128601, parseDSA, 12, false), true, false, false);
            parseECDSA = J$.N(3128625, 'parseECDSA', J$.T(3128617, parseECDSA, 12, false), true, false, false);
            J$.T(3120881, 'use strict', 21, false);
            J$.F(3120905, J$.I(typeof require === 'undefined' ? require = J$.R(3120889, 'require', undefined, true, true) : require = J$.R(3120889, 'require', require, true, true)), false)(J$.T(3120897, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3120929, J$.I(typeof require === 'undefined' ? require = J$.R(3120913, 'require', undefined, true, true) : require = J$.R(3120913, 'require', require, true, true)), false)(J$.T(3120921, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3120953, J$.I(typeof require === 'undefined' ? require = J$.R(3120937, 'require', undefined, true, true) : require = J$.R(3120937, 'require', require, true, true)), false)(J$.T(3120945, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3120977, J$.I(typeof require === 'undefined' ? require = J$.R(3120961, 'require', undefined, true, true) : require = J$.R(3120961, 'require', require, true, true)), false)(J$.T(3120969, 'core-js/modules/es.function.name', 21, false));
            J$.F(3121001, J$.I(typeof require === 'undefined' ? require = J$.R(3120985, 'require', undefined, true, true) : require = J$.R(3120985, 'require', require, true, true)), false)(J$.T(3120993, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3121025, J$.I(typeof require === 'undefined' ? require = J$.R(3121009, 'require', undefined, true, true) : require = J$.R(3121009, 'require', require, true, true)), false)(J$.T(3121017, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3121049, J$.I(typeof require === 'undefined' ? require = J$.R(3121033, 'require', undefined, true, true) : require = J$.R(3121033, 'require', require, true, true)), false)(J$.T(3121041, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3121073, J$.I(typeof require === 'undefined' ? require = J$.R(3121057, 'require', undefined, true, true) : require = J$.R(3121057, 'require', require, true, true)), false)(J$.T(3121065, 'core-js/modules/es.string.split', 21, false));
            J$.F(3121097, J$.I(typeof require === 'undefined' ? require = J$.R(3121081, 'require', undefined, true, true) : require = J$.R(3121081, 'require', require, true, true)), false)(J$.T(3121089, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3121121, J$.I(typeof require === 'undefined' ? require = J$.R(3121105, 'require', undefined, true, true) : require = J$.R(3121105, 'require', require, true, true)), false)(J$.T(3121113, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3121145, J$.I(typeof require === 'undefined' ? require = J$.R(3121129, 'require', undefined, true, true) : require = J$.R(3121129, 'require', require, true, true)), false)(J$.T(3121137, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3121169, J$.I(typeof require === 'undefined' ? require = J$.R(3121153, 'require', undefined, true, true) : require = J$.R(3121153, 'require', require, true, true)), false)(J$.T(3121161, 'core-js/modules/es.function.name', 21, false));
            J$.F(3121193, J$.I(typeof require === 'undefined' ? require = J$.R(3121177, 'require', undefined, true, true) : require = J$.R(3121177, 'require', require, true, true)), false)(J$.T(3121185, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3121217, J$.I(typeof require === 'undefined' ? require = J$.R(3121201, 'require', undefined, true, true) : require = J$.R(3121201, 'require', require, true, true)), false)(J$.T(3121209, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3121241, J$.I(typeof require === 'undefined' ? require = J$.R(3121225, 'require', undefined, true, true) : require = J$.R(3121225, 'require', require, true, true)), false)(J$.T(3121233, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3121265, J$.I(typeof require === 'undefined' ? require = J$.R(3121249, 'require', undefined, true, true) : require = J$.R(3121249, 'require', require, true, true)), false)(J$.T(3121257, 'core-js/modules/es.string.split', 21, false));
            J$.F(3121289, J$.I(typeof require === 'undefined' ? require = J$.R(3121273, 'require', undefined, true, true) : require = J$.R(3121273, 'require', require, true, true)), false)(J$.T(3121281, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3121313, J$.I(typeof require === 'undefined' ? require = J$.R(3121297, 'require', undefined, true, true) : require = J$.R(3121297, 'require', require, true, true)), false)(J$.T(3121305, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3121337, J$.I(typeof require === 'undefined' ? require = J$.R(3121321, 'require', undefined, true, true) : require = J$.R(3121321, 'require', require, true, true)), false)(J$.T(3121329, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3121361, J$.I(typeof require === 'undefined' ? require = J$.R(3121345, 'require', undefined, true, true) : require = J$.R(3121345, 'require', require, true, true)), false)(J$.T(3121353, 'core-js/modules/es.function.name', 21, false));
            J$.F(3121385, J$.I(typeof require === 'undefined' ? require = J$.R(3121369, 'require', undefined, true, true) : require = J$.R(3121369, 'require', require, true, true)), false)(J$.T(3121377, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3121409, J$.I(typeof require === 'undefined' ? require = J$.R(3121393, 'require', undefined, true, true) : require = J$.R(3121393, 'require', require, true, true)), false)(J$.T(3121401, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3121433, J$.I(typeof require === 'undefined' ? require = J$.R(3121417, 'require', undefined, true, true) : require = J$.R(3121417, 'require', require, true, true)), false)(J$.T(3121425, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3121457, J$.I(typeof require === 'undefined' ? require = J$.R(3121441, 'require', undefined, true, true) : require = J$.R(3121441, 'require', require, true, true)), false)(J$.T(3121449, 'core-js/modules/es.string.split', 21, false));
            J$.F(3121481, J$.I(typeof require === 'undefined' ? require = J$.R(3121465, 'require', undefined, true, true) : require = J$.R(3121465, 'require', require, true, true)), false)(J$.T(3121473, 'core-js/modules/es.array.concat', 21, false));
            J$.F(3121505, J$.I(typeof require === 'undefined' ? require = J$.R(3121489, 'require', undefined, true, true) : require = J$.R(3121489, 'require', require, true, true)), false)(J$.T(3121497, 'core-js/modules/es.array.slice', 21, false));
            J$.F(3121529, J$.I(typeof require === 'undefined' ? require = J$.R(3121513, 'require', undefined, true, true) : require = J$.R(3121513, 'require', require, true, true)), false)(J$.T(3121521, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3121553, J$.I(typeof require === 'undefined' ? require = J$.R(3121537, 'require', undefined, true, true) : require = J$.R(3121537, 'require', require, true, true)), false)(J$.T(3121545, 'core-js/modules/es.function.name', 21, false));
            J$.F(3121577, J$.I(typeof require === 'undefined' ? require = J$.R(3121561, 'require', undefined, true, true) : require = J$.R(3121561, 'require', require, true, true)), false)(J$.T(3121569, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3121601, J$.I(typeof require === 'undefined' ? require = J$.R(3121585, 'require', undefined, true, true) : require = J$.R(3121585, 'require', require, true, true)), false)(J$.T(3121593, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3121625, J$.I(typeof require === 'undefined' ? require = J$.R(3121609, 'require', undefined, true, true) : require = J$.R(3121609, 'require', require, true, true)), false)(J$.T(3121617, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3121649, J$.I(typeof require === 'undefined' ? require = J$.R(3121633, 'require', undefined, true, true) : require = J$.R(3121633, 'require', require, true, true)), false)(J$.T(3121641, 'core-js/modules/es.string.split', 21, false));
            J$.P(3121673, J$.I(typeof module === 'undefined' ? module = J$.R(3121657, 'module', undefined, true, true) : module = J$.R(3121657, 'module', module, true, true)), 'exports', J$.R(3121665, 'Signature', Signature, false, true));
            var assert = J$.W(3121705, 'assert', J$.F(3121697, J$.I(typeof require === 'undefined' ? require = J$.R(3121681, 'require', undefined, true, true) : require = J$.R(3121681, 'require', require, true, true)), false)(J$.T(3121689, 'assert-plus', 21, false)), assert, false, true);
            var Buffer = J$.W(3121745, 'Buffer', J$.G(3121737, J$.F(3121729, J$.I(typeof require === 'undefined' ? require = J$.R(3121713, 'require', undefined, true, true) : require = J$.R(3121713, 'require', require, true, true)), false)(J$.T(3121721, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3121777, 'algs', J$.F(3121769, J$.I(typeof require === 'undefined' ? require = J$.R(3121753, 'require', undefined, true, true) : require = J$.R(3121753, 'require', require, true, true)), false)(J$.T(3121761, './algs', 21, false)), algs, false, true);
            var crypto = J$.W(3121809, 'crypto', J$.F(3121801, J$.I(typeof require === 'undefined' ? require = J$.R(3121785, 'require', undefined, true, true) : require = J$.R(3121785, 'require', require, true, true)), false)(J$.T(3121793, 'crypto', 21, false)), crypto, false, true);
            var errs = J$.W(3121841, 'errs', J$.F(3121833, J$.I(typeof require === 'undefined' ? require = J$.R(3121817, 'require', undefined, true, true) : require = J$.R(3121817, 'require', require, true, true)), false)(J$.T(3121825, './errors', 21, false)), errs, false, true);
            var utils = J$.W(3121873, 'utils', J$.F(3121865, J$.I(typeof require === 'undefined' ? require = J$.R(3121849, 'require', undefined, true, true) : require = J$.R(3121849, 'require', require, true, true)), false)(J$.T(3121857, './utils', 21, false)), utils, false, true);
            var asn1 = J$.W(3121905, 'asn1', J$.F(3121897, J$.I(typeof require === 'undefined' ? require = J$.R(3121881, 'require', undefined, true, true) : require = J$.R(3121881, 'require', require, true, true)), false)(J$.T(3121889, 'asn1', 21, false)), asn1, false, true);
            var SSHBuffer = J$.W(3121937, 'SSHBuffer', J$.F(3121929, J$.I(typeof require === 'undefined' ? require = J$.R(3121913, 'require', undefined, true, true) : require = J$.R(3121913, 'require', require, true, true)), false)(J$.T(3121921, './ssh-buffer', 21, false)), SSHBuffer, false, true);
            var InvalidAlgorithmError = J$.W(3121961, 'InvalidAlgorithmError', J$.G(3121953, J$.R(3121945, 'errs', errs, false, true), 'InvalidAlgorithmError'), InvalidAlgorithmError, false, true);
            var SignatureParseError = J$.W(3121985, 'SignatureParseError', J$.G(3121977, J$.R(3121969, 'errs', errs, false, true), 'SignatureParseError'), SignatureParseError, false, true);
            J$.P(3124593, J$.G(3122473, J$.R(3122465, 'Signature', Signature, false, true), 'prototype'), 'toBuffer', J$.T(3124585, function (format) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3124497, arguments.callee, this, arguments);
                            arguments = J$.N(3124505, 'arguments', arguments, true, false, false);
                            format = J$.N(3124513, 'format', format, true, false, false);
                            J$.N(3124521, 'buf', buf, false, false, false);
                            J$.N(3124529, 'stype', stype, false, false, false);
                            J$.N(3124537, 'r', r, false, false, false);
                            J$.N(3124545, 's', s, false, false, false);
                            J$.N(3124553, 'der', der, false, false, false);
                            J$.N(3124561, 'inner', inner, false, false, false);
                            J$.N(3124569, 'curve', curve, false, false, false);
                            J$.N(3124577, 'sz', sz, false, false, false);
                            if (J$.C(175752, J$.B(323426, '===', J$.R(3122481, 'format', format, false, false), J$.T(3122489, undefined, 24, false))))
                                format = J$.W(3122505, 'format', J$.T(3122497, 'asn1', 21, false), format, false, false);
                            J$.M(3122537, J$.R(3122513, 'assert', assert, false, true), 'string', false)(J$.R(3122521, 'format', format, false, false), J$.T(3122529, 'format', 21, false));
                            var buf;
                            var stype = J$.W(3122569, 'stype', J$.B(323434, '+', J$.T(3122545, 'ssh-', 21, false), J$.G(3122561, J$.R(3122553, 'this', this, false, false), 'type')), stype, false, false);
                            switch (J$.C1(175944, J$.G(3122585, J$.R(3122577, 'this', this, false, false), 'type'))) {
                            case J$.C2(175952, J$.T(3122905, 'rsa', 21, false)):
                                switch (J$.C1(175760, J$.G(3122601, J$.R(3122593, 'this', this, false, false), 'hashAlgorithm'))) {
                                case J$.C2(175768, J$.T(3122625, 'sha256', 21, false)):
                                    stype = J$.W(3122617, 'stype', J$.T(3122609, 'rsa-sha2-256', 21, false), stype, false, false);
                                    break;
                                case J$.C2(175776, J$.T(3122649, 'sha512', 21, false)):
                                    stype = J$.W(3122641, 'stype', J$.T(3122633, 'rsa-sha2-512', 21, false), stype, false, false);
                                    break;
                                case J$.C2(175784, J$.T(3122657, 'sha1', 21, false)):
                                case J$.C2(175792, J$.T(3122665, undefined, 24, false)):
                                    break;
                                default:
                                    throw J$.F(3122721, J$.I(typeof Error === 'undefined' ? Error = J$.R(3122673, 'Error', undefined, true, true) : Error = J$.R(3122673, 'Error', Error, true, true)), true)(J$.B(323458, '+', J$.B(323450, '+', J$.B(323442, '+', J$.T(3122681, 'SSH signature ', 21, false), J$.T(3122689, 'format does not support hash ', 21, false)), J$.T(3122697, 'algorithm ', 21, false)), J$.G(3122713, J$.R(3122705, 'this', this, false, false), 'hashAlgorithm')));
                                }
                                if (J$.C(175800, J$.B(323466, '===', J$.R(3122729, 'format', format, false, false), J$.T(3122737, 'ssh', 21, false)))) {
                                    buf = J$.W(3122769, 'buf', J$.F(3122761, J$.R(3122745, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3122753, {}, 11, false)), buf, false, false);
                                    J$.M(3122793, J$.R(3122777, 'buf', buf, false, false), 'writeString', false)(J$.R(3122785, 'stype', stype, false, false));
                                    J$.M(3122833, J$.R(3122801, 'buf', buf, false, false), 'writePart', false)(J$.G(3122825, J$.G(3122817, J$.R(3122809, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(3122857, J$.M(3122849, J$.R(3122841, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(3122897, J$.G(3122889, J$.G(3122881, J$.G(3122873, J$.R(3122865, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(175960, J$.T(3123089, 'ed25519', 21, false)):
                                if (J$.C(175808, J$.B(323474, '===', J$.R(3122913, 'format', format, false, false), J$.T(3122921, 'ssh', 21, false)))) {
                                    buf = J$.W(3122953, 'buf', J$.F(3122945, J$.R(3122929, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3122937, {}, 11, false)), buf, false, false);
                                    J$.M(3122977, J$.R(3122961, 'buf', buf, false, false), 'writeString', false)(J$.R(3122969, 'stype', stype, false, false));
                                    J$.M(3123017, J$.R(3122985, 'buf', buf, false, false), 'writePart', false)(J$.G(3123009, J$.G(3123001, J$.R(3122993, 'this', this, false, false), 'part'), 'sig'));
                                    return J$.Rt(3123041, J$.M(3123033, J$.R(3123025, 'buf', buf, false, false), 'toBuffer', false)());
                                } else {
                                    return J$.Rt(3123081, J$.G(3123073, J$.G(3123065, J$.G(3123057, J$.R(3123049, 'this', this, false, false), 'part'), 'sig'), 'data'));
                                }
                                break;
                            case J$.C2(175968, J$.T(3123097, 'dsa', 21, false)):
                            case J$.C2(175976, J$.T(3124465, 'ecdsa', 21, false)):
                                var r, s;
                                if (J$.C(175936, J$.B(323482, '===', J$.R(3123105, 'format', format, false, false), J$.T(3123113, 'asn1', 21, false)))) {
                                    var der = J$.W(3123137, 'der', J$.M(3123129, J$.R(3123121, 'asn1', asn1, false, true), 'BerWriter', true)(), der, false, false);
                                    J$.M(3123153, J$.R(3123145, 'der', der, false, false), 'startSequence', false)();
                                    r = J$.W(3123209, 'r', J$.M(3123201, J$.R(3123161, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3123193, J$.G(3123185, J$.G(3123177, J$.R(3123169, 'this', this, false, false), 'part'), 'r'), 'data')), r, false, false);
                                    s = J$.W(3123265, 's', J$.M(3123257, J$.R(3123217, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3123249, J$.G(3123241, J$.G(3123233, J$.R(3123225, 'this', this, false, false), 'part'), 's'), 'data')), s, false, false);
                                    J$.M(3123313, J$.R(3123273, 'der', der, false, false), 'writeBuffer', false)(J$.R(3123281, 'r', r, false, false), J$.G(3123305, J$.G(3123297, J$.R(3123289, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(3123361, J$.R(3123321, 'der', der, false, false), 'writeBuffer', false)(J$.R(3123329, 's', s, false, false), J$.G(3123353, J$.G(3123345, J$.R(3123337, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                                    J$.M(3123377, J$.R(3123369, 'der', der, false, false), 'endSequence', false)();
                                    return J$.Rt(3123401, J$.G(3123393, J$.R(3123385, 'der', der, false, false), 'buffer'));
                                } else if (J$.C(175928, J$.C(175816, J$.B(323490, '===', J$.R(3123409, 'format', format, false, false), J$.T(3123417, 'ssh', 21, false))) ? J$.B(323498, '===', J$.G(3123433, J$.R(3123425, 'this', this, false, false), 'type'), J$.T(3123441, 'dsa', 21, false)) : J$._())) {
                                    buf = J$.W(3123473, 'buf', J$.F(3123465, J$.R(3123449, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3123457, {}, 11, false)), buf, false, false);
                                    J$.M(3123497, J$.R(3123481, 'buf', buf, false, false), 'writeString', false)(J$.T(3123489, 'ssh-dss', 21, false));
                                    r = J$.W(3123537, 'r', J$.G(3123529, J$.G(3123521, J$.G(3123513, J$.R(3123505, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    if (J$.C(175832, J$.C(175824, J$.B(323506, '>', J$.G(3123553, J$.R(3123545, 'r', r, false, false), 'length'), J$.T(3123561, 20, 22, false))) ? J$.B(323514, '===', J$.G(3123585, J$.R(3123569, 'r', r, false, false), J$.T(3123577, 0, 22, false)), J$.T(3123593, 0, 22, false)) : J$._()))
                                        r = J$.W(3123625, 'r', J$.M(3123617, J$.R(3123601, 'r', r, false, false), 'slice', false)(J$.T(3123609, 1, 22, false)), r, false, false);
                                    s = J$.W(3123665, 's', J$.G(3123657, J$.G(3123649, J$.G(3123641, J$.R(3123633, 'this', this, false, false), 'part'), 's'), 'data'), s, false, false);
                                    if (J$.C(175848, J$.C(175840, J$.B(323522, '>', J$.G(3123681, J$.R(3123673, 's', s, false, false), 'length'), J$.T(3123689, 20, 22, false))) ? J$.B(323530, '===', J$.G(3123713, J$.R(3123697, 's', s, false, false), J$.T(3123705, 0, 22, false)), J$.T(3123721, 0, 22, false)) : J$._()))
                                        s = J$.W(3123753, 's', J$.M(3123745, J$.R(3123729, 's', s, false, false), 'slice', false)(J$.T(3123737, 1, 22, false)), s, false, false);
                                    if (J$.C(175872, J$.C(175864, J$.C(175856, J$.G(3123769, J$.R(3123761, 'this', this, false, false), 'hashAlgorithm')) ? J$.B(323538, '!==', J$.G(3123785, J$.R(3123777, 'this', this, false, false), 'hashAlgorithm'), J$.T(3123793, 'sha1', 21, false)) : J$._()) ? J$._() : J$.B(323554, '!==', J$.B(323546, '+', J$.G(3123809, J$.R(3123801, 'r', r, false, false), 'length'), J$.G(3123825, J$.R(3123817, 's', s, false, false), 'length')), J$.T(3123833, 40, 22, false)))) {
                                        throw J$.F(3123865, J$.I(typeof Error === 'undefined' ? Error = J$.R(3123841, 'Error', undefined, true, true) : Error = J$.R(3123841, 'Error', Error, true, true)), true)(J$.B(323562, '+', J$.T(3123849, 'OpenSSH only supports ', 21, false), J$.T(3123857, 'DSA signatures with SHA1 hash', 21, false)));
                                    }
                                    J$.M(3123921, J$.R(3123873, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3123913, J$.R(3123881, 'Buffer', Buffer, false, true), 'concat', false)(J$.T(3123905, [
                                        J$.R(3123889, 'r', r, false, false),
                                        J$.R(3123897, 's', s, false, false)
                                    ], 10, false)));
                                    return J$.Rt(3123945, J$.M(3123937, J$.R(3123929, 'buf', buf, false, false), 'toBuffer', false)());
                                } else if (J$.C(175920, J$.C(175880, J$.B(323570, '===', J$.R(3123953, 'format', format, false, false), J$.T(3123961, 'ssh', 21, false))) ? J$.B(323578, '===', J$.G(3123977, J$.R(3123969, 'this', this, false, false), 'type'), J$.T(3123985, 'ecdsa', 21, false)) : J$._())) {
                                    var inner = J$.W(3124017, 'inner', J$.F(3124009, J$.R(3123993, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3124001, {}, 11, false)), inner, false, false);
                                    r = J$.W(3124057, 'r', J$.G(3124049, J$.G(3124041, J$.G(3124033, J$.R(3124025, 'this', this, false, false), 'part'), 'r'), 'data'), r, false, false);
                                    J$.M(3124081, J$.R(3124065, 'inner', inner, false, false), 'writeBuffer', false)(J$.R(3124073, 'r', r, false, false));
                                    J$.M(3124121, J$.R(3124089, 'inner', inner, false, false), 'writePart', false)(J$.G(3124113, J$.G(3124105, J$.R(3124097, 'this', this, false, false), 'part'), 's'));
                                    buf = J$.W(3124153, 'buf', J$.F(3124145, J$.R(3124129, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3124137, {}, 11, false)), buf, false, false);
                                    var curve;
                                    if (J$.C(175888, J$.B(323586, '===', J$.G(3124177, J$.R(3124161, 'r', r, false, false), J$.T(3124169, 0, 22, false)), J$.T(3124185, 0, 22, false))))
                                        r = J$.W(3124217, 'r', J$.M(3124209, J$.R(3124193, 'r', r, false, false), 'slice', false)(J$.T(3124201, 1, 22, false)), r, false, false);
                                    var sz = J$.W(3124249, 'sz', J$.B(323594, '*', J$.G(3124233, J$.R(3124225, 'r', r, false, false), 'length'), J$.T(3124241, 8, 22, false)), sz, false, false);
                                    if (J$.C(175912, J$.B(323602, '===', J$.R(3124257, 'sz', sz, false, false), J$.T(3124265, 256, 22, false))))
                                        curve = J$.W(3124281, 'curve', J$.T(3124273, 'nistp256', 21, false), curve, false, false);
                                    else if (J$.C(175904, J$.B(323610, '===', J$.R(3124289, 'sz', sz, false, false), J$.T(3124297, 384, 22, false))))
                                        curve = J$.W(3124313, 'curve', J$.T(3124305, 'nistp384', 21, false), curve, false, false);
                                    else if (J$.C(175896, J$.B(323618, '===', J$.R(3124321, 'sz', sz, false, false), J$.T(3124329, 528, 22, false))))
                                        curve = J$.W(3124345, 'curve', J$.T(3124337, 'nistp521', 21, false), curve, false, false);
                                    J$.M(3124377, J$.R(3124353, 'buf', buf, false, false), 'writeString', false)(J$.B(323626, '+', J$.T(3124361, 'ecdsa-sha2-', 21, false), J$.R(3124369, 'curve', curve, false, false)));
                                    J$.M(3124409, J$.R(3124385, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3124401, J$.R(3124393, 'inner', inner, false, false), 'toBuffer', false)());
                                    return J$.Rt(3124433, J$.M(3124425, J$.R(3124417, 'buf', buf, false, false), 'toBuffer', false)());
                                }
                                throw J$.F(3124457, J$.I(typeof Error === 'undefined' ? Error = J$.R(3124441, 'Error', undefined, true, true) : Error = J$.R(3124441, 'Error', Error, true, true)), true)(J$.T(3124449, 'Invalid signature format', 21, false));
                            default:
                                throw J$.F(3124489, J$.I(typeof Error === 'undefined' ? Error = J$.R(3124473, 'Error', undefined, true, true) : Error = J$.R(3124473, 'Error', Error, true, true)), true)(J$.T(3124481, 'Invalid signature data', 21, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3128649, J$e);
                        } finally {
                            if (J$.Fr(3128657))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3124729, J$.G(3124609, J$.R(3124601, 'Signature', Signature, false, true), 'prototype'), 'toString', J$.T(3124721, function (format) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3124697, arguments.callee, this, arguments);
                            arguments = J$.N(3124705, 'arguments', arguments, true, false, false);
                            format = J$.N(3124713, 'format', format, true, false, false);
                            J$.M(3124641, J$.R(3124617, 'assert', assert, false, true), 'optionalString', false)(J$.R(3124625, 'format', format, false, false), J$.T(3124633, 'format', 21, false));
                            return J$.Rt(3124689, J$.M(3124681, J$.M(3124665, J$.R(3124649, 'this', this, false, false), 'toBuffer', false)(J$.R(3124657, 'format', format, false, false)), 'toString', false)(J$.T(3124673, 'base64', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3128665, J$e);
                        } finally {
                            if (J$.Fr(3128673))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3125537, J$.R(3124737, 'Signature', Signature, false, true), 'parse', J$.T(3125529, function (data, type, format) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3125481, arguments.callee, this, arguments);
                            arguments = J$.N(3125489, 'arguments', arguments, true, false, false);
                            data = J$.N(3125497, 'data', data, true, false, false);
                            type = J$.N(3125505, 'type', type, true, false, false);
                            format = J$.N(3125513, 'format', format, true, false, false);
                            J$.N(3125521, 'opts', opts, false, false, false);
                            if (J$.C(175984, J$.B(323642, '===', J$.U(323634, 'typeof', J$.R(3124745, 'data', data, false, false)), J$.T(3124753, 'string', 21, false))))
                                data = J$.W(3124793, 'data', J$.M(3124785, J$.R(3124761, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3124769, 'data', data, false, false), J$.T(3124777, 'base64', 21, false)), data, false, false);
                            J$.M(3124825, J$.R(3124801, 'assert', assert, false, true), 'buffer', false)(J$.R(3124809, 'data', data, false, false), J$.T(3124817, 'data', 21, false));
                            J$.M(3124857, J$.R(3124833, 'assert', assert, false, true), 'string', false)(J$.R(3124841, 'format', format, false, false), J$.T(3124849, 'format', 21, false));
                            J$.M(3124889, J$.R(3124865, 'assert', assert, false, true), 'string', false)(J$.R(3124873, 'type', type, false, false), J$.T(3124881, 'type', 21, false));
                            var opts = J$.W(3124905, 'opts', J$.T(3124897, {}, 11, false), opts, false, false);
                            J$.P(3124937, J$.R(3124913, 'opts', opts, false, false), 'type', J$.M(3124929, J$.R(3124921, 'type', type, false, false), 'toLowerCase', false)());
                            J$.P(3124961, J$.R(3124945, 'opts', opts, false, false), 'parts', J$.T(3124953, [], 10, false));
                            try {
                                J$.M(3125009, J$.R(3124969, 'assert', assert, false, true), 'ok', false)(J$.B(323650, '>', J$.G(3124985, J$.R(3124977, 'data', data, false, false), 'length'), J$.T(3124993, 0, 22, false)), J$.T(3125001, 'signature must not be empty', 21, false));
                                switch (J$.C1(176008, J$.G(3125025, J$.R(3125017, 'opts', opts, false, false), 'type'))) {
                                case J$.C2(176016, J$.T(3125089, 'rsa', 21, false)):
                                    return J$.Rt(3125081, J$.F(3125073, J$.R(3125033, 'parseOneNum', parseOneNum, false, true), false)(J$.R(3125041, 'data', data, false, false), J$.R(3125049, 'type', type, false, false), J$.R(3125057, 'format', format, false, false), J$.R(3125065, 'opts', opts, false, false)));
                                case J$.C2(176024, J$.T(3125153, 'ed25519', 21, false)):
                                    return J$.Rt(3125145, J$.F(3125137, J$.R(3125097, 'parseOneNum', parseOneNum, false, true), false)(J$.R(3125105, 'data', data, false, false), J$.R(3125113, 'type', type, false, false), J$.R(3125121, 'format', format, false, false), J$.R(3125129, 'opts', opts, false, false)));
                                case J$.C2(176032, J$.T(3125161, 'dsa', 21, false)):
                                case J$.C2(176040, J$.T(3125377, 'ecdsa', 21, false)):
                                    if (J$.C(176000, J$.B(323658, '===', J$.R(3125169, 'format', format, false, false), J$.T(3125177, 'asn1', 21, false))))
                                        return J$.Rt(3125233, J$.F(3125225, J$.R(3125185, 'parseDSAasn1', parseDSAasn1, false, true), false)(J$.R(3125193, 'data', data, false, false), J$.R(3125201, 'type', type, false, false), J$.R(3125209, 'format', format, false, false), J$.R(3125217, 'opts', opts, false, false)));
                                    else if (J$.C(175992, J$.B(323666, '===', J$.G(3125249, J$.R(3125241, 'opts', opts, false, false), 'type'), J$.T(3125257, 'dsa', 21, false))))
                                        return J$.Rt(3125313, J$.F(3125305, J$.R(3125265, 'parseDSA', parseDSA, false, true), false)(J$.R(3125273, 'data', data, false, false), J$.R(3125281, 'type', type, false, false), J$.R(3125289, 'format', format, false, false), J$.R(3125297, 'opts', opts, false, false)));
                                    else
                                        return J$.Rt(3125369, J$.F(3125361, J$.R(3125321, 'parseECDSA', parseECDSA, false, true), false)(J$.R(3125329, 'data', data, false, false), J$.R(3125337, 'type', type, false, false), J$.R(3125345, 'format', format, false, false), J$.R(3125353, 'opts', opts, false, false)));
                                default:
                                    throw J$.F(3125401, J$.R(3125385, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), true)(J$.R(3125393, 'type', type, false, false));
                                }
                            } catch (e) {
                                J$.N(3125473, 'e', e, false, false, true);
                                if (J$.C(176048, J$.B(323674, 'instanceof', J$.R(3125409, 'e', e, false, false), J$.R(3125417, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true))))
                                    throw J$.R(3125425, 'e', e, false, false);
                                throw J$.F(3125465, J$.R(3125433, 'SignatureParseError', SignatureParseError, false, true), true)(J$.R(3125441, 'type', type, false, false), J$.R(3125449, 'format', format, false, false), J$.R(3125457, 'e', e, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(3128681, J$e);
                        } finally {
                            if (J$.Fr(3128689))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3128241, J$.R(3128145, 'Signature', Signature, false, true), 'isSignature', J$.T(3128233, function (obj, ver) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3128201, arguments.callee, this, arguments);
                            arguments = J$.N(3128209, 'arguments', arguments, true, false, false);
                            obj = J$.N(3128217, 'obj', obj, true, false, false);
                            ver = J$.N(3128225, 'ver', ver, true, false, false);
                            return J$.Rt(3128193, J$.M(3128185, J$.R(3128153, 'utils', utils, false, true), 'isCompatible', false)(J$.R(3128161, 'obj', obj, false, false), J$.R(3128169, 'Signature', Signature, false, true), J$.R(3128177, 'ver', ver, false, false)));
                        } catch (J$e) {
                            J$.Ex(3128761, J$e);
                        } finally {
                            if (J$.Fr(3128769))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(3128289, J$.G(3128257, J$.R(3128249, 'Signature', Signature, false, true), 'prototype'), '_sshpkApiVersion', J$.T(3128281, [
                J$.T(3128265, 2, 22, false),
                J$.T(3128273, 1, 22, false)
            ], 10, false));
            J$.P(3128457, J$.R(3128297, 'Signature', Signature, false, true), '_oldVersionDetect', J$.T(3128449, function (obj) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3128425, arguments.callee, this, arguments);
                            arguments = J$.N(3128433, 'arguments', arguments, true, false, false);
                            obj = J$.N(3128441, 'obj', obj, true, false, false);
                            J$.M(3128329, J$.R(3128305, 'assert', assert, false, true), 'func', false)(J$.G(3128321, J$.R(3128313, 'obj', obj, false, false), 'toBuffer'));
                            if (J$.C(176168, J$.M(3128353, J$.R(3128337, 'obj', obj, false, false), 'hasOwnProperty', false)(J$.T(3128345, 'hashAlgorithm', 21, false))))
                                return J$.Rt(3128385, J$.T(3128377, [
                                    J$.T(3128361, 2, 22, false),
                                    J$.T(3128369, 0, 22, false)
                                ], 10, false));
                            return J$.Rt(3128417, J$.T(3128409, [
                                J$.T(3128393, 1, 22, false),
                                J$.T(3128401, 0, 22, false)
                            ], 10, false));
                        } catch (J$e) {
                            J$.Ex(3128777, J$e);
                        } finally {
                            if (J$.Fr(3128785))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
        } catch (J$e) {
            J$.Ex(3128793, J$e);
        } finally {
            if (J$.Sr(3128801))
                continue jalangiLabel10;
            else
                break jalangiLabel10;
        }
    }
// JALANGI DO NOT INSTRUMENT

