J$.noInstrEval = false;
jalangiLabel19:
    while (true) {
        try {
            J$.Se(3010689, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/sshpk/lib/formats/openssh-cert.js');
            function verify(cert, key) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3003401, arguments.callee, this, arguments);
                            arguments = J$.N(3003409, 'arguments', arguments, true, false, false);
                            cert = J$.N(3003417, 'cert', cert, true, false, false);
                            key = J$.N(3003425, 'key', key, true, false, false);
                            return J$.Rt(3003393, J$.T(3003385, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(3010985, J$e);
                        } finally {
                            if (J$.Fr(3010993))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function read(buf, options) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3003905, arguments.callee, this, arguments);
                            arguments = J$.N(3003913, 'arguments', arguments, true, false, false);
                            buf = J$.N(3003921, 'buf', buf, true, false, false);
                            options = J$.N(3003929, 'options', options, true, false, false);
                            J$.N(3003937, 'parts', parts, false, false, false);
                            J$.N(3003945, 'algo', algo, false, false, false);
                            J$.N(3003953, 'data', data, false, false, false);
                            if (J$.C(170832, J$.M(3003609, J$.R(3003593, 'Buffer', Buffer, false, true), 'isBuffer', false)(J$.R(3003601, 'buf', buf, false, false))))
                                buf = J$.W(3003641, 'buf', J$.M(3003633, J$.R(3003617, 'buf', buf, false, false), 'toString', false)(J$.T(3003625, 'ascii', 21, false)), buf, false, false);
                            var parts = J$.W(3003681, 'parts', J$.M(3003673, J$.M(3003657, J$.R(3003649, 'buf', buf, false, false), 'trim', false)(), 'split', false)(J$.T(3003665, /[ \t\n]+/g, 14, false)), parts, false, false);
                            if (J$.C(170848, J$.C(170840, J$.B(316818, '<', J$.G(3003697, J$.R(3003689, 'parts', parts, false, false), 'length'), J$.T(3003705, 2, 22, false))) ? J$._() : J$.B(316826, '>', J$.G(3003721, J$.R(3003713, 'parts', parts, false, false), 'length'), J$.T(3003729, 3, 22, false))))
                                throw J$.F(3003753, J$.I(typeof Error === 'undefined' ? Error = J$.R(3003737, 'Error', undefined, true, true) : Error = J$.R(3003737, 'Error', Error, true, true)), true)(J$.T(3003745, 'Not a valid SSH certificate line', 21, false));
                            var algo = J$.W(3003785, 'algo', J$.G(3003777, J$.R(3003761, 'parts', parts, false, false), J$.T(3003769, 0, 22, false)), algo, false, false);
                            var data = J$.W(3003817, 'data', J$.G(3003809, J$.R(3003793, 'parts', parts, false, false), J$.T(3003801, 1, 22, false)), data, false, false);
                            data = J$.W(3003857, 'data', J$.M(3003849, J$.R(3003825, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3003833, 'data', data, false, false), J$.T(3003841, 'base64', 21, false)), data, false, false);
                            return J$.Rt(3003897, J$.F(3003889, J$.R(3003865, 'fromBuffer', fromBuffer, false, true), false)(J$.R(3003873, 'data', data, false, false), J$.R(3003881, 'algo', algo, false, false)));
                        } catch (J$e) {
                            J$.Ex(3011017, J$e);
                        } finally {
                            if (J$.Fr(3011025))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fromBuffer(data, algo, partial) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3006385, arguments.callee, this, arguments);
                            arguments = J$.N(3006393, 'arguments', arguments, true, false, false);
                            data = J$.N(3006401, 'data', data, true, false, false);
                            algo = J$.N(3006409, 'algo', algo, true, false, false);
                            partial = J$.N(3006417, 'partial', partial, true, false, false);
                            J$.N(3006425, 'sshbuf', sshbuf, false, false, false);
                            J$.N(3006433, 'innerAlgo', innerAlgo, false, false, false);
                            J$.N(3006441, 'cert', cert, false, false, false);
                            J$.N(3006449, 'key', key, false, false, false);
                            J$.N(3006457, 'parts', parts, false, false, false);
                            J$.N(3006465, 'partCount', partCount, false, false, false);
                            J$.N(3006473, 'algInfo', algInfo, false, false, false);
                            J$.N(3006481, 'res', res, false, false, false);
                            J$.N(3006489, 'i', i, false, false, false);
                            J$.N(3006497, 'p', p, false, false, false);
                            J$.N(3006505, 'type', type, false, false, false);
                            J$.N(3006513, 'principals', principals, false, false, false);
                            J$.N(3006521, 'pbuf', pbuf, false, false, false);
                            J$.N(3006529, 'psshbuf', psshbuf, false, false, false);
                            J$.N(3006537, 'exts', exts, false, false, false);
                            J$.N(3006545, 'extbuf', extbuf, false, false, false);
                            J$.N(3006553, 'ext', ext, false, false, false);
                            J$.N(3006561, 'signingKeyBuf', signingKeyBuf, false, false, false);
                            J$.N(3006569, 'sigBuf', sigBuf, false, false, false);
                            var sshbuf = J$.W(3003993, 'sshbuf', J$.F(3003985, J$.R(3003961, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3003977, { buffer: J$.R(3003969, 'data', data, false, false) }, 11, false)), sshbuf, false, false);
                            var innerAlgo = J$.W(3004017, 'innerAlgo', J$.M(3004009, J$.R(3004001, 'sshbuf', sshbuf, false, false), 'readString', false)(), innerAlgo, false, false);
                            if (J$.C(170864, J$.C(170856, J$.B(316834, '!==', J$.R(3004025, 'algo', algo, false, false), J$.T(3004033, undefined, 24, false))) ? J$.B(316842, '!==', J$.R(3004041, 'innerAlgo', innerAlgo, false, false), J$.R(3004049, 'algo', algo, false, false)) : J$._()))
                                throw J$.F(3004073, J$.I(typeof Error === 'undefined' ? Error = J$.R(3004057, 'Error', undefined, true, true) : Error = J$.R(3004057, 'Error', Error, true, true)), true)(J$.T(3004065, 'SSH certificate algorithm mismatch', 21, false));
                            if (J$.C(170872, J$.B(316850, '===', J$.R(3004081, 'algo', algo, false, false), J$.T(3004089, undefined, 24, false))))
                                algo = J$.W(3004105, 'algo', J$.R(3004097, 'innerAlgo', innerAlgo, false, false), algo, false, false);
                            var cert = J$.W(3004121, 'cert', J$.T(3004113, {}, 11, false), cert, false, false);
                            J$.P(3004145, J$.R(3004129, 'cert', cert, false, false), 'signatures', J$.T(3004137, {}, 11, false));
                            J$.P(3004177, J$.G(3004161, J$.R(3004153, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3004169, {}, 11, false));
                            J$.P(3004225, J$.G(3004201, J$.G(3004193, J$.R(3004185, 'cert', cert, false, false), 'signatures'), 'openssh'), 'nonce', J$.M(3004217, J$.R(3004209, 'sshbuf', sshbuf, false, false), 'readBuffer', false)());
                            var key = J$.W(3004241, 'key', J$.T(3004233, {}, 11, false), key, false, false);
                            var parts = J$.W(3004273, 'parts', J$.P(3004265, J$.R(3004249, 'key', key, false, false), 'parts', J$.T(3004257, [], 10, false)), parts, false, false);
                            J$.P(3004313, J$.R(3004281, 'key', key, false, false), 'type', J$.F(3004305, J$.R(3004289, 'getAlg', getAlg, false, true), false)(J$.R(3004297, 'algo', algo, false, false)));
                            var partCount = J$.W(3004377, 'partCount', J$.G(3004369, J$.G(3004361, J$.G(3004353, J$.G(3004329, J$.R(3004321, 'algs', algs, false, true), 'info'), J$.G(3004345, J$.R(3004337, 'key', key, false, false), 'type')), 'parts'), 'length'), partCount, false, false);
                            while (J$.C(170880, J$.B(316858, '<', J$.G(3004393, J$.R(3004385, 'parts', parts, false, false), 'length'), J$.R(3004401, 'partCount', partCount, false, false)))) {
                                J$.M(3004433, J$.R(3004409, 'parts', parts, false, false), 'push', false)(J$.M(3004425, J$.R(3004417, 'sshbuf', sshbuf, false, false), 'readPart', false)());
                            }
                            J$.M(3004481, J$.R(3004441, 'assert', assert, false, true), 'ok', false)(J$.B(316866, '>=', J$.G(3004457, J$.R(3004449, 'parts', parts, false, false), 'length'), J$.T(3004465, 1, 22, false)), J$.T(3004473, 'key must have at least one part', 21, false));
                            var algInfo = J$.W(3004529, 'algInfo', J$.G(3004521, J$.G(3004497, J$.R(3004489, 'algs', algs, false, true), 'info'), J$.G(3004513, J$.R(3004505, 'key', key, false, false), 'type')), algInfo, false, false);
                            if (J$.C(170888, J$.B(316874, '===', J$.G(3004545, J$.R(3004537, 'key', key, false, false), 'type'), J$.T(3004553, 'ecdsa', 21, false)))) {
                                var res = J$.W(3004585, 'res', J$.M(3004577, J$.R(3004561, 'ECDSA_ALGO', ECDSA_ALGO, false, true), 'exec', false)(J$.R(3004569, 'algo', algo, false, false)), res, false, false);
                                J$.M(3004617, J$.R(3004593, 'assert', assert, false, true), 'ok', false)(J$.B(316882, '!==', J$.R(3004601, 'res', res, false, false), J$.T(3004609, null, 25, false)));
                                J$.M(3004697, J$.R(3004625, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3004649, J$.R(3004633, 'res', res, false, false), J$.T(3004641, 1, 22, false)), J$.M(3004689, J$.G(3004681, J$.G(3004673, J$.R(3004657, 'parts', parts, false, false), J$.T(3004665, 0, 22, false)), 'data'), 'toString', false)());
                            }
                            for (var i = J$.W(3004713, 'i', J$.T(3004705, 0, 22, false), i, false, false); J$.C(170912, J$.B(316890, '<', J$.R(3004721, 'i', i, false, false), J$.G(3004745, J$.G(3004737, J$.R(3004729, 'algInfo', algInfo, false, false), 'parts'), 'length'))); i = J$.W(3004761, 'i', J$.B(316906, '+', J$.U(316898, '+', J$.R(3004753, 'i', i, false, false)), 1), i, false, false)) {
                                J$.P(3004825, J$.G(3004785, J$.R(3004769, 'parts', parts, false, false), J$.R(3004777, 'i', i, false, false)), 'name', J$.G(3004817, J$.G(3004801, J$.R(3004793, 'algInfo', algInfo, false, false), 'parts'), J$.R(3004809, 'i', i, false, false)));
                                if (J$.C(170904, J$.C(170896, J$.B(316914, '!==', J$.G(3004857, J$.G(3004849, J$.R(3004833, 'parts', parts, false, false), J$.R(3004841, 'i', i, false, false)), 'name'), J$.T(3004865, 'curve', 21, false))) ? J$.B(316922, '!==', J$.G(3004881, J$.R(3004873, 'algInfo', algInfo, false, false), 'normalize'), J$.T(3004889, false, 23, false)) : J$._())) {
                                    var p = J$.W(3004921, 'p', J$.G(3004913, J$.R(3004897, 'parts', parts, false, false), J$.R(3004905, 'i', i, false, false)), p, false, false);
                                    J$.P(3004969, J$.R(3004929, 'p', p, false, false), 'data', J$.M(3004961, J$.R(3004937, 'utils', utils, false, true), 'mpNormalize', false)(J$.G(3004953, J$.R(3004945, 'p', p, false, false), 'data')));
                                }
                            }
                            J$.P(3005009, J$.R(3004977, 'cert', cert, false, false), 'subjectKey', J$.F(3005001, J$.R(3004985, 'Key', Key, false, true), true)(J$.R(3004993, 'key', key, false, false)));
                            J$.P(3005041, J$.R(3005017, 'cert', cert, false, false), 'serial', J$.M(3005033, J$.R(3005025, 'sshbuf', sshbuf, false, false), 'readInt64', false)());
                            var type = J$.W(3005081, 'type', J$.G(3005073, J$.R(3005049, 'TYPES', TYPES, false, true), J$.M(3005065, J$.R(3005057, 'sshbuf', sshbuf, false, false), 'readInt', false)()), type, false, false);
                            J$.M(3005113, J$.R(3005089, 'assert', assert, false, true), 'string', false)(J$.R(3005097, 'type', type, false, false), J$.T(3005105, 'valid cert type', 21, false));
                            J$.P(3005161, J$.G(3005137, J$.G(3005129, J$.R(3005121, 'cert', cert, false, false), 'signatures'), 'openssh'), 'keyId', J$.M(3005153, J$.R(3005145, 'sshbuf', sshbuf, false, false), 'readString', false)());
                            var principals = J$.W(3005177, 'principals', J$.T(3005169, [], 10, false), principals, false, false);
                            var pbuf = J$.W(3005201, 'pbuf', J$.M(3005193, J$.R(3005185, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), pbuf, false, false);
                            var psshbuf = J$.W(3005241, 'psshbuf', J$.F(3005233, J$.R(3005209, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3005225, { buffer: J$.R(3005217, 'pbuf', pbuf, false, false) }, 11, false)), psshbuf, false, false);
                            while (J$.C(170920, J$.U(316930, '!', J$.M(3005257, J$.R(3005249, 'psshbuf', psshbuf, false, false), 'atEnd', false)()))) {
                                J$.M(3005289, J$.R(3005265, 'principals', principals, false, false), 'push', false)(J$.M(3005281, J$.R(3005273, 'psshbuf', psshbuf, false, false), 'readString', false)());
                            }
                            if (J$.C(170928, J$.B(316938, '===', J$.G(3005305, J$.R(3005297, 'principals', principals, false, false), 'length'), J$.T(3005313, 0, 22, false))))
                                principals = J$.W(3005337, 'principals', J$.T(3005329, [J$.T(3005321, '*', 21, false)], 10, false), principals, false, false);
                            J$.P(3005529, J$.R(3005345, 'cert', cert, false, false), 'subjects', J$.M(3005521, J$.R(3005353, 'principals', principals, false, false), 'map', false)(J$.T(3005513, function (pr) {
                                jalangiLabel3:
                                    while (true) {
                                        try {
                                            J$.Fe(3005489, arguments.callee, this, arguments);
                                            arguments = J$.N(3005497, 'arguments', arguments, true, false, false);
                                            pr = J$.N(3005505, 'pr', pr, true, false, false);
                                            if (J$.C(170944, J$.B(316946, '===', J$.R(3005361, 'type', type, false, false), J$.T(3005369, 'user', 21, false))))
                                                return J$.Rt(3005401, J$.M(3005393, J$.R(3005377, 'Identity', Identity, false, true), 'forUser', false)(J$.R(3005385, 'pr', pr, false, false)));
                                            else if (J$.C(170936, J$.B(316954, '===', J$.R(3005409, 'type', type, false, false), J$.T(3005417, 'host', 21, false))))
                                                return J$.Rt(3005449, J$.M(3005441, J$.R(3005425, 'Identity', Identity, false, true), 'forHost', false)(J$.R(3005433, 'pr', pr, false, false)));
                                            throw J$.F(3005481, J$.I(typeof Error === 'undefined' ? Error = J$.R(3005457, 'Error', undefined, true, true) : Error = J$.R(3005457, 'Error', Error, true, true)), true)(J$.B(316962, '+', J$.T(3005465, 'Unknown identity type ', 21, false), J$.R(3005473, 'type', type, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3011033, J$e);
                                        } finally {
                                            if (J$.Fr(3011041))
                                                continue jalangiLabel3;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)));
                            J$.P(3005577, J$.R(3005537, 'cert', cert, false, false), 'validFrom', J$.F(3005569, J$.R(3005545, 'int64ToDate', int64ToDate, false, true), false)(J$.M(3005561, J$.R(3005553, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            J$.P(3005625, J$.R(3005585, 'cert', cert, false, false), 'validUntil', J$.F(3005617, J$.R(3005593, 'int64ToDate', int64ToDate, false, true), false)(J$.M(3005609, J$.R(3005601, 'sshbuf', sshbuf, false, false), 'readInt64', false)()));
                            var exts = J$.W(3005641, 'exts', J$.T(3005633, [], 10, false), exts, false, false);
                            var extbuf = J$.W(3005689, 'extbuf', J$.F(3005681, J$.R(3005649, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3005673, { buffer: J$.M(3005665, J$.R(3005657, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            var ext;
                            while (J$.C(170952, J$.U(316970, '!', J$.M(3005705, J$.R(3005697, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(3005729, 'ext', J$.T(3005721, { critical: J$.T(3005713, true, 23, false) }, 11, false), ext, false, false);
                                J$.P(3005761, J$.R(3005737, 'ext', ext, false, false), 'name', J$.M(3005753, J$.R(3005745, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(3005793, J$.R(3005769, 'ext', ext, false, false), 'data', J$.M(3005785, J$.R(3005777, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(3005817, J$.R(3005801, 'exts', exts, false, false), 'push', false)(J$.R(3005809, 'ext', ext, false, false));
                            }
                            extbuf = J$.W(3005865, 'extbuf', J$.F(3005857, J$.R(3005825, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3005849, { buffer: J$.M(3005841, J$.R(3005833, 'sshbuf', sshbuf, false, false), 'readBuffer', false)() }, 11, false)), extbuf, false, false);
                            while (J$.C(170960, J$.U(316978, '!', J$.M(3005881, J$.R(3005873, 'extbuf', extbuf, false, false), 'atEnd', false)()))) {
                                ext = J$.W(3005905, 'ext', J$.T(3005897, { critical: J$.T(3005889, false, 23, false) }, 11, false), ext, false, false);
                                J$.P(3005937, J$.R(3005913, 'ext', ext, false, false), 'name', J$.M(3005929, J$.R(3005921, 'extbuf', extbuf, false, false), 'readString', false)());
                                J$.P(3005969, J$.R(3005945, 'ext', ext, false, false), 'data', J$.M(3005961, J$.R(3005953, 'extbuf', extbuf, false, false), 'readBuffer', false)());
                                J$.M(3005993, J$.R(3005977, 'exts', exts, false, false), 'push', false)(J$.R(3005985, 'ext', ext, false, false));
                            }
                            J$.P(3006033, J$.G(3006017, J$.G(3006009, J$.R(3006001, 'cert', cert, false, false), 'signatures'), 'openssh'), 'exts', J$.R(3006025, 'exts', exts, false, false));
                            J$.M(3006049, J$.R(3006041, 'sshbuf', sshbuf, false, false), 'readBuffer', false)();
                            var signingKeyBuf = J$.W(3006073, 'signingKeyBuf', J$.M(3006065, J$.R(3006057, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), signingKeyBuf, false, false);
                            J$.P(3006113, J$.R(3006081, 'cert', cert, false, false), 'issuerKey', J$.M(3006105, J$.R(3006089, 'rfc4253', rfc4253, false, true), 'read', false)(J$.R(3006097, 'signingKeyBuf', signingKeyBuf, false, false)));
                            J$.P(3006153, J$.R(3006121, 'cert', cert, false, false), 'issuer', J$.M(3006145, J$.R(3006129, 'Identity', Identity, false, true), 'forHost', false)(J$.T(3006137, '**', 21, false)));
                            var sigBuf = J$.W(3006177, 'sigBuf', J$.M(3006169, J$.R(3006161, 'sshbuf', sshbuf, false, false), 'readBuffer', false)(), sigBuf, false, false);
                            J$.P(3006265, J$.G(3006201, J$.G(3006193, J$.R(3006185, 'cert', cert, false, false), 'signatures'), 'openssh'), 'signature', J$.M(3006257, J$.R(3006209, 'Signature', Signature, false, true), 'parse', false)(J$.R(3006217, 'sigBuf', sigBuf, false, false), J$.G(3006241, J$.G(3006233, J$.R(3006225, 'cert', cert, false, false), 'issuerKey'), 'type'), J$.T(3006249, 'ssh', 21, false)));
                            if (J$.C(170968, J$.B(316986, '!==', J$.R(3006273, 'partial', partial, false, false), J$.T(3006281, undefined, 24, false)))) {
                                J$.P(3006313, J$.R(3006289, 'partial', partial, false, false), 'remainder', J$.M(3006305, J$.R(3006297, 'sshbuf', sshbuf, false, false), 'remainder', false)());
                                J$.P(3006345, J$.R(3006321, 'partial', partial, false, false), 'consumed', J$.G(3006337, J$.R(3006329, 'sshbuf', sshbuf, false, false), '_offset'));
                            }
                            return J$.Rt(3006377, J$.F(3006369, J$.R(3006353, 'Certificate', Certificate, false, true), true)(J$.R(3006361, 'cert', cert, false, false)));
                        } catch (J$e) {
                            J$.Ex(3011049, J$e);
                        } finally {
                            if (J$.Fr(3011057))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function int64ToDate(buf) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3006753, arguments.callee, this, arguments);
                            arguments = J$.N(3006761, 'arguments', arguments, true, false, false);
                            buf = J$.N(3006769, 'buf', buf, true, false, false);
                            J$.N(3006777, 'i', i, false, false, false);
                            J$.N(3006785, 'd', d, false, false, false);
                            var i = J$.W(3006609, 'i', J$.B(316994, '*', J$.M(3006593, J$.R(3006577, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(3006585, 0, 22, false)), J$.T(3006601, 4294967296, 22, false)), i, false, false);
                            i = J$.W(3006649, 'i', J$.B(317002, '+', J$.R(3006641, 'i', i, false, false), J$.M(3006633, J$.R(3006617, 'buf', buf, false, false), 'readUInt32BE', false)(J$.T(3006625, 4, 22, false))), i, false, false);
                            var d = J$.W(3006673, 'd', J$.F(3006665, J$.I(typeof Date === 'undefined' ? Date = J$.R(3006657, 'Date', undefined, true, true) : Date = J$.R(3006657, 'Date', Date, true, true)), true)(), d, false, false);
                            J$.M(3006705, J$.R(3006681, 'd', d, false, false), 'setTime', false)(J$.B(317010, '*', J$.R(3006689, 'i', i, false, false), J$.T(3006697, 1000, 22, false)));
                            J$.P(3006729, J$.R(3006713, 'd', d, false, false), 'sourceInt64', J$.R(3006721, 'buf', buf, false, false));
                            return J$.Rt(3006745, J$.R(3006737, 'd', d, false, false));
                        } catch (J$e) {
                            J$.Ex(3011065, J$e);
                        } finally {
                            if (J$.Fr(3011073))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function dateToInt64(date) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3007081, arguments.callee, this, arguments);
                            arguments = J$.N(3007089, 'arguments', arguments, true, false, false);
                            date = J$.N(3007097, 'date', date, true, false, false);
                            J$.N(3007105, 'i', i, false, false, false);
                            J$.N(3007113, 'upper', upper, false, false, false);
                            J$.N(3007121, 'lower', lower, false, false, false);
                            J$.N(3007129, 'buf', buf, false, false, false);
                            if (J$.C(170976, J$.B(317018, '!==', J$.G(3006801, J$.R(3006793, 'date', date, false, false), 'sourceInt64'), J$.T(3006809, undefined, 24, false))))
                                return J$.Rt(3006833, J$.G(3006825, J$.R(3006817, 'date', date, false, false), 'sourceInt64'));
                            var i = J$.W(3006881, 'i', J$.M(3006873, J$.I(typeof Math === 'undefined' ? Math = J$.R(3006841, 'Math', undefined, true, true) : Math = J$.R(3006841, 'Math', Math, true, true)), 'round', false)(J$.B(317026, '/', J$.M(3006857, J$.R(3006849, 'date', date, false, false), 'getTime', false)(), J$.T(3006865, 1000, 22, false))), i, false, false);
                            var upper = J$.W(3006921, 'upper', J$.M(3006913, J$.I(typeof Math === 'undefined' ? Math = J$.R(3006889, 'Math', undefined, true, true) : Math = J$.R(3006889, 'Math', Math, true, true)), 'floor', false)(J$.B(317034, '/', J$.R(3006897, 'i', i, false, false), J$.T(3006905, 4294967296, 22, false))), upper, false, false);
                            var lower = J$.W(3006961, 'lower', J$.M(3006953, J$.I(typeof Math === 'undefined' ? Math = J$.R(3006929, 'Math', undefined, true, true) : Math = J$.R(3006929, 'Math', Math, true, true)), 'floor', false)(J$.B(317042, '%', J$.R(3006937, 'i', i, false, false), J$.T(3006945, 4294967296, 22, false))), lower, false, false);
                            var buf = J$.W(3006993, 'buf', J$.M(3006985, J$.R(3006969, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(3006977, 8, 22, false)), buf, false, false);
                            J$.M(3007025, J$.R(3007001, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(3007009, 'upper', upper, false, false), J$.T(3007017, 0, 22, false));
                            J$.M(3007057, J$.R(3007033, 'buf', buf, false, false), 'writeUInt32BE', false)(J$.R(3007041, 'lower', lower, false, false), J$.T(3007049, 4, 22, false));
                            return J$.Rt(3007073, J$.R(3007065, 'buf', buf, false, false));
                        } catch (J$e) {
                            J$.Ex(3011081, J$e);
                        } finally {
                            if (J$.Fr(3011089))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function sign(cert, key) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3007497, arguments.callee, this, arguments);
                            arguments = J$.N(3007505, 'arguments', arguments, true, false, false);
                            cert = J$.N(3007513, 'cert', cert, true, false, false);
                            key = J$.N(3007521, 'key', key, true, false, false);
                            J$.N(3007529, 'blob', blob, false, false, false);
                            J$.N(3007537, 'sig', sig, false, false, false);
                            J$.N(3007545, 'hashAlgo', hashAlgo, false, false, false);
                            J$.N(3007553, 'signer', signer, false, false, false);
                            if (J$.C(170984, J$.B(317050, '===', J$.G(3007153, J$.G(3007145, J$.R(3007137, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3007161, undefined, 24, false))))
                                J$.P(3007193, J$.G(3007177, J$.R(3007169, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3007185, {}, 11, false));
                            try {
                                var blob = J$.W(3007233, 'blob', J$.F(3007225, J$.R(3007201, 'toBuffer', toBuffer, false, true), false)(J$.R(3007209, 'cert', cert, false, false), J$.T(3007217, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(3007273, 'e', e, false, false, true);
                                J$.B(317058, 'delete', J$.G(3007249, J$.R(3007241, 'cert', cert, false, false), 'signatures'), 'openssh');
                                return J$.Rt(3007265, J$.T(3007257, false, 23, false));
                            }
                            var sig = J$.W(3007305, 'sig', J$.G(3007297, J$.G(3007289, J$.R(3007281, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            var hashAlgo = J$.W(3007321, 'hashAlgo', J$.T(3007313, undefined, 24, false), hashAlgo, false, false);
                            if (J$.C(171000, J$.C(170992, J$.B(317066, '===', J$.G(3007337, J$.R(3007329, 'key', key, false, false), 'type'), J$.T(3007345, 'rsa', 21, false))) ? J$._() : J$.B(317074, '===', J$.G(3007361, J$.R(3007353, 'key', key, false, false), 'type'), J$.T(3007369, 'dsa', 21, false))))
                                hashAlgo = J$.W(3007385, 'hashAlgo', J$.T(3007377, 'sha1', 21, false), hashAlgo, false, false);
                            var signer = J$.W(3007417, 'signer', J$.M(3007409, J$.R(3007393, 'key', key, false, false), 'createSign', false)(J$.R(3007401, 'hashAlgo', hashAlgo, false, false)), signer, false, false);
                            J$.M(3007441, J$.R(3007425, 'signer', signer, false, false), 'write', false)(J$.R(3007433, 'blob', blob, false, false));
                            J$.P(3007473, J$.R(3007449, 'sig', sig, false, false), 'signature', J$.M(3007465, J$.R(3007457, 'signer', signer, false, false), 'sign', false)());
                            return J$.Rt(3007489, J$.T(3007481, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(3011097, J$e);
                        } finally {
                            if (J$.Fr(3011105))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function signAsync(cert, signer, done) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3007961, arguments.callee, this, arguments);
                            arguments = J$.N(3007969, 'arguments', arguments, true, false, false);
                            cert = J$.N(3007977, 'cert', cert, true, false, false);
                            signer = J$.N(3007985, 'signer', signer, true, false, false);
                            done = J$.N(3007993, 'done', done, true, false, false);
                            J$.N(3008001, 'blob', blob, false, false, false);
                            J$.N(3008009, 'sig', sig, false, false, false);
                            if (J$.C(171008, J$.B(317082, '===', J$.G(3007577, J$.G(3007569, J$.R(3007561, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3007585, undefined, 24, false))))
                                J$.P(3007617, J$.G(3007601, J$.R(3007593, 'cert', cert, false, false), 'signatures'), 'openssh', J$.T(3007609, {}, 11, false));
                            try {
                                var blob = J$.W(3007657, 'blob', J$.F(3007649, J$.R(3007625, 'toBuffer', toBuffer, false, true), false)(J$.R(3007633, 'cert', cert, false, false), J$.T(3007641, true, 23, false)), blob, false, false);
                            } catch (e) {
                                J$.N(3007713, 'e', e, false, false, true);
                                J$.B(317090, 'delete', J$.G(3007673, J$.R(3007665, 'cert', cert, false, false), 'signatures'), 'openssh');
                                J$.F(3007697, J$.R(3007681, 'done', done, false, false), false)(J$.R(3007689, 'e', e, false, false));
                                return J$.Rt(3007705, undefined);
                            }
                            var sig = J$.W(3007745, 'sig', J$.G(3007737, J$.G(3007729, J$.R(3007721, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            J$.F(3007953, J$.R(3007753, 'signer', signer, false, false), false)(J$.R(3007761, 'blob', blob, false, false), J$.T(3007945, function (err, signature) {
                                jalangiLabel8:
                                    while (true) {
                                        try {
                                            J$.Fe(3007913, arguments.callee, this, arguments);
                                            arguments = J$.N(3007921, 'arguments', arguments, true, false, false);
                                            err = J$.N(3007929, 'err', err, true, false, false);
                                            signature = J$.N(3007937, 'signature', signature, true, false, false);
                                            if (J$.C(171016, J$.R(3007769, 'err', err, false, false))) {
                                                J$.F(3007793, J$.R(3007777, 'done', done, false, false), false)(J$.R(3007785, 'err', err, false, false));
                                                return J$.Rt(3007801, undefined);
                                            }
                                            try {
                                                J$.M(3007825, J$.R(3007809, 'signature', signature, false, false), 'toBuffer', false)(J$.T(3007817, 'ssh', 21, false));
                                            } catch (e) {
                                                J$.N(3007865, 'e', e, false, false, true);
                                                J$.F(3007849, J$.R(3007833, 'done', done, false, false), false)(J$.R(3007841, 'e', e, false, false));
                                                return J$.Rt(3007857, undefined);
                                            }
                                            J$.P(3007889, J$.R(3007873, 'sig', sig, false, false), 'signature', J$.R(3007881, 'signature', signature, false, false));
                                            J$.F(3007905, J$.R(3007897, 'done', done, false, false), false)();
                                        } catch (J$e) {
                                            J$.Ex(3011113, J$e);
                                        } finally {
                                            if (J$.Fr(3011121))
                                                continue jalangiLabel8;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(3011129, J$e);
                        } finally {
                            if (J$.Fr(3011137))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(cert, options) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3008225, arguments.callee, this, arguments);
                            arguments = J$.N(3008233, 'arguments', arguments, true, false, false);
                            cert = J$.N(3008241, 'cert', cert, true, false, false);
                            options = J$.N(3008249, 'options', options, true, false, false);
                            J$.N(3008257, 'blob', blob, false, false, false);
                            J$.N(3008265, 'out', out, false, false, false);
                            if (J$.C(171024, J$.B(317098, '===', J$.R(3008017, 'options', options, false, false), J$.T(3008025, undefined, 24, false))))
                                options = J$.W(3008041, 'options', J$.T(3008033, {}, 11, false), options, false, false);
                            var blob = J$.W(3008073, 'blob', J$.F(3008065, J$.R(3008049, 'toBuffer', toBuffer, false, true), false)(J$.R(3008057, 'cert', cert, false, false)), blob, false, false);
                            var out = J$.W(3008145, 'out', J$.B(317114, '+', J$.B(317106, '+', J$.F(3008105, J$.R(3008081, 'getCertType', getCertType, false, true), false)(J$.G(3008097, J$.R(3008089, 'cert', cert, false, false), 'subjectKey')), J$.T(3008113, ' ', 21, false)), J$.M(3008137, J$.R(3008121, 'blob', blob, false, false), 'toString', false)(J$.T(3008129, 'base64', 21, false))), out, false, false);
                            if (J$.C(171032, J$.G(3008161, J$.R(3008153, 'options', options, false, false), 'comment')))
                                out = J$.W(3008201, 'out', J$.B(317130, '+', J$.B(317122, '+', J$.R(3008169, 'out', out, false, false), J$.T(3008177, ' ', 21, false)), J$.G(3008193, J$.R(3008185, 'options', options, false, false), 'comment')), out, false, false);
                            return J$.Rt(3008217, J$.R(3008209, 'out', out, false, false));
                        } catch (J$e) {
                            J$.Ex(3011145, J$e);
                        } finally {
                            if (J$.Fr(3011153))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function toBuffer(cert, noSig) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(3010153, arguments.callee, this, arguments);
                            arguments = J$.N(3010161, 'arguments', arguments, true, false, false);
                            cert = J$.N(3010169, 'cert', cert, true, false, false);
                            noSig = J$.N(3010177, 'noSig', noSig, true, false, false);
                            J$.N(3010185, 'sig', sig, false, false, false);
                            J$.N(3010193, 'buf', buf, false, false, false);
                            J$.N(3010201, 'key', key, false, false, false);
                            J$.N(3010209, 'algInfo', algInfo, false, false, false);
                            J$.N(3010217, 'type', type, false, false, false);
                            J$.N(3010225, 'sub', sub, false, false, false);
                            J$.N(3010233, 'exts', exts, false, false, false);
                            J$.N(3010241, 'extbuf', extbuf, false, false, false);
                            J$.M(3008313, J$.R(3008273, 'assert', assert, false, true), 'object', false)(J$.G(3008297, J$.G(3008289, J$.R(3008281, 'cert', cert, false, false), 'signatures'), 'openssh'), J$.T(3008305, 'signature for openssh format', 21, false));
                            var sig = J$.W(3008345, 'sig', J$.G(3008337, J$.G(3008329, J$.R(3008321, 'cert', cert, false, false), 'signatures'), 'openssh'), sig, false, false);
                            if (J$.C(171040, J$.B(317138, '===', J$.G(3008361, J$.R(3008353, 'sig', sig, false, false), 'nonce'), J$.T(3008369, undefined, 24, false))))
                                J$.P(3008409, J$.R(3008377, 'sig', sig, false, false), 'nonce', J$.M(3008401, J$.R(3008385, 'crypto', crypto, false, true), 'randomBytes', false)(J$.T(3008393, 16, 22, false)));
                            var buf = J$.W(3008441, 'buf', J$.F(3008433, J$.R(3008417, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3008425, {}, 11, false)), buf, false, false);
                            J$.M(3008489, J$.R(3008449, 'buf', buf, false, false), 'writeString', false)(J$.F(3008481, J$.R(3008457, 'getCertType', getCertType, false, true), false)(J$.G(3008473, J$.R(3008465, 'cert', cert, false, false), 'subjectKey')));
                            J$.M(3008521, J$.R(3008497, 'buf', buf, false, false), 'writeBuffer', false)(J$.G(3008513, J$.R(3008505, 'sig', sig, false, false), 'nonce'));
                            var key = J$.W(3008545, 'key', J$.G(3008537, J$.R(3008529, 'cert', cert, false, false), 'subjectKey'), key, false, false);
                            var algInfo = J$.W(3008593, 'algInfo', J$.G(3008585, J$.G(3008561, J$.R(3008553, 'algs', algs, false, true), 'info'), J$.G(3008577, J$.R(3008569, 'key', key, false, false), 'type')), algInfo, false, false);
                            J$.M(3008697, J$.G(3008609, J$.R(3008601, 'algInfo', algInfo, false, false), 'parts'), 'forEach', false)(J$.T(3008689, function (part) {
                                jalangiLabel11:
                                    while (true) {
                                        try {
                                            J$.Fe(3008665, arguments.callee, this, arguments);
                                            arguments = J$.N(3008673, 'arguments', arguments, true, false, false);
                                            part = J$.N(3008681, 'part', part, true, false, false);
                                            J$.M(3008657, J$.R(3008617, 'buf', buf, false, false), 'writePart', false)(J$.G(3008649, J$.G(3008633, J$.R(3008625, 'key', key, false, false), 'part'), J$.R(3008641, 'part', part, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(3011161, J$e);
                                        } finally {
                                            if (J$.Fr(3011169))
                                                continue jalangiLabel11;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3008729, J$.R(3008705, 'buf', buf, false, false), 'writeInt64', false)(J$.G(3008721, J$.R(3008713, 'cert', cert, false, false), 'serial'));
                            var type = J$.W(3008777, 'type', J$.G(3008769, J$.G(3008761, J$.G(3008745, J$.R(3008737, 'cert', cert, false, false), 'subjects'), J$.T(3008753, 0, 22, false)), 'type'), type, false, false);
                            J$.M(3008809, J$.R(3008785, 'assert', assert, false, true), 'notStrictEqual', false)(J$.R(3008793, 'type', type, false, false), J$.T(3008801, 'unknown', 21, false));
                            J$.M(3008905, J$.G(3008825, J$.R(3008817, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(3008897, function (id) {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(3008873, arguments.callee, this, arguments);
                                            arguments = J$.N(3008881, 'arguments', arguments, true, false, false);
                                            id = J$.N(3008889, 'id', id, true, false, false);
                                            J$.M(3008865, J$.R(3008833, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3008849, J$.R(3008841, 'id', id, false, false), 'type'), J$.R(3008857, 'type', type, false, false));
                                        } catch (J$e) {
                                            J$.Ex(3011177, J$e);
                                        } finally {
                                            if (J$.Fr(3011185))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            type = J$.W(3008937, 'type', J$.G(3008929, J$.R(3008913, 'TYPES', TYPES, false, true), J$.R(3008921, 'type', type, false, false)), type, false, false);
                            J$.M(3008961, J$.R(3008945, 'buf', buf, false, false), 'writeInt', false)(J$.R(3008953, 'type', type, false, false));
                            if (J$.C(171056, J$.B(317146, '===', J$.G(3008977, J$.R(3008969, 'sig', sig, false, false), 'keyId'), J$.T(3008985, undefined, 24, false)))) {
                                J$.P(3009129, J$.R(3008993, 'sig', sig, false, false), 'keyId', J$.B(317162, '+', J$.B(317154, '+', J$.G(3009033, J$.G(3009025, J$.G(3009009, J$.R(3009001, 'cert', cert, false, false), 'subjects'), J$.T(3009017, 0, 22, false)), 'type'), J$.T(3009041, '_', 21, false)), J$.C(171048, J$.G(3009081, J$.G(3009073, J$.G(3009057, J$.R(3009049, 'cert', cert, false, false), 'subjects'), J$.T(3009065, 0, 22, false)), 'uid')) ? J$._() : J$.G(3009121, J$.G(3009113, J$.G(3009097, J$.R(3009089, 'cert', cert, false, false), 'subjects'), J$.T(3009105, 0, 22, false)), 'hostname')));
                            }
                            J$.M(3009161, J$.R(3009137, 'buf', buf, false, false), 'writeString', false)(J$.G(3009153, J$.R(3009145, 'sig', sig, false, false), 'keyId'));
                            var sub = J$.W(3009193, 'sub', J$.F(3009185, J$.R(3009169, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3009177, {}, 11, false)), sub, false, false);
                            J$.M(3009361, J$.G(3009209, J$.R(3009201, 'cert', cert, false, false), 'subjects'), 'forEach', false)(J$.T(3009353, function (id) {
                                jalangiLabel13:
                                    while (true) {
                                        try {
                                            J$.Fe(3009329, arguments.callee, this, arguments);
                                            arguments = J$.N(3009337, 'arguments', arguments, true, false, false);
                                            id = J$.N(3009345, 'id', id, true, false, false);
                                            if (J$.C(171072, J$.B(317170, '===', J$.R(3009217, 'type', type, false, false), J$.G(3009233, J$.R(3009225, 'TYPES', TYPES, false, true), 'host'))))
                                                J$.M(3009265, J$.R(3009241, 'sub', sub, false, false), 'writeString', false)(J$.G(3009257, J$.R(3009249, 'id', id, false, false), 'hostname'));
                                            else if (J$.C(171064, J$.B(317178, '===', J$.R(3009273, 'type', type, false, false), J$.G(3009289, J$.R(3009281, 'TYPES', TYPES, false, true), 'user'))))
                                                J$.M(3009321, J$.R(3009297, 'sub', sub, false, false), 'writeString', false)(J$.G(3009313, J$.R(3009305, 'id', id, false, false), 'uid'));
                                        } catch (J$e) {
                                            J$.Ex(3011193, J$e);
                                        } finally {
                                            if (J$.Fr(3011201))
                                                continue jalangiLabel13;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3009393, J$.R(3009369, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3009385, J$.R(3009377, 'sub', sub, false, false), 'toBuffer', false)());
                            J$.M(3009441, J$.R(3009401, 'buf', buf, false, false), 'writeInt64', false)(J$.F(3009433, J$.R(3009409, 'dateToInt64', dateToInt64, false, true), false)(J$.G(3009425, J$.R(3009417, 'cert', cert, false, false), 'validFrom')));
                            J$.M(3009489, J$.R(3009449, 'buf', buf, false, false), 'writeInt64', false)(J$.F(3009481, J$.R(3009457, 'dateToInt64', dateToInt64, false, true), false)(J$.G(3009473, J$.R(3009465, 'cert', cert, false, false), 'validUntil')));
                            var exts = J$.W(3009513, 'exts', J$.G(3009505, J$.R(3009497, 'sig', sig, false, false), 'exts'), exts, false, false);
                            if (J$.C(171080, J$.B(317186, '===', J$.R(3009521, 'exts', exts, false, false), J$.T(3009529, undefined, 24, false))))
                                exts = J$.W(3009545, 'exts', J$.T(3009537, [], 10, false), exts, false, false);
                            var extbuf = J$.W(3009577, 'extbuf', J$.F(3009569, J$.R(3009553, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3009561, {}, 11, false)), extbuf, false, false);
                            J$.M(3009721, J$.R(3009585, 'exts', exts, false, false), 'forEach', false)(J$.T(3009713, function (ext) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(3009689, arguments.callee, this, arguments);
                                            arguments = J$.N(3009697, 'arguments', arguments, true, false, false);
                                            ext = J$.N(3009705, 'ext', ext, true, false, false);
                                            if (J$.C(171088, J$.B(317194, '!==', J$.G(3009601, J$.R(3009593, 'ext', ext, false, false), 'critical'), J$.T(3009609, true, 23, false))))
                                                return J$.Rt(3009617, undefined);
                                            J$.M(3009649, J$.R(3009625, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(3009641, J$.R(3009633, 'ext', ext, false, false), 'name'));
                                            J$.M(3009681, J$.R(3009657, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(3009673, J$.R(3009665, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(3011209, J$e);
                                        } finally {
                                            if (J$.Fr(3011217))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3009753, J$.R(3009729, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3009745, J$.R(3009737, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            extbuf = J$.W(3009785, 'extbuf', J$.F(3009777, J$.R(3009761, 'SSHBuffer', SSHBuffer, false, true), true)(J$.T(3009769, {}, 11, false)), extbuf, false, false);
                            J$.M(3009929, J$.R(3009793, 'exts', exts, false, false), 'forEach', false)(J$.T(3009921, function (ext) {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(3009897, arguments.callee, this, arguments);
                                            arguments = J$.N(3009905, 'arguments', arguments, true, false, false);
                                            ext = J$.N(3009913, 'ext', ext, true, false, false);
                                            if (J$.C(171096, J$.B(317202, '===', J$.G(3009809, J$.R(3009801, 'ext', ext, false, false), 'critical'), J$.T(3009817, true, 23, false))))
                                                return J$.Rt(3009825, undefined);
                                            J$.M(3009857, J$.R(3009833, 'extbuf', extbuf, false, false), 'writeString', false)(J$.G(3009849, J$.R(3009841, 'ext', ext, false, false), 'name'));
                                            J$.M(3009889, J$.R(3009865, 'extbuf', extbuf, false, false), 'writeBuffer', false)(J$.G(3009881, J$.R(3009873, 'ext', ext, false, false), 'data'));
                                        } catch (J$e) {
                                            J$.Ex(3011225, J$e);
                                        } finally {
                                            if (J$.Fr(3011233))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.M(3009961, J$.R(3009937, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3009953, J$.R(3009945, 'extbuf', extbuf, false, false), 'toBuffer', false)());
                            J$.M(3010001, J$.R(3009969, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3009993, J$.R(3009977, 'Buffer', Buffer, false, true), 'alloc', false)(J$.T(3009985, 0, 22, false)));
                            sub = J$.W(3010041, 'sub', J$.M(3010033, J$.R(3010009, 'rfc4253', rfc4253, false, true), 'write', false)(J$.G(3010025, J$.R(3010017, 'cert', cert, false, false), 'issuerKey')), sub, false, false);
                            J$.M(3010065, J$.R(3010049, 'buf', buf, false, false), 'writeBuffer', false)(J$.R(3010057, 'sub', sub, false, false));
                            if (J$.C(171104, J$.U(317210, '!', J$.R(3010073, 'noSig', noSig, false, false))))
                                J$.M(3010121, J$.R(3010081, 'buf', buf, false, false), 'writeBuffer', false)(J$.M(3010113, J$.G(3010097, J$.R(3010089, 'sig', sig, false, false), 'signature'), 'toBuffer', false)(J$.T(3010105, 'ssh', 21, false)));
                            return J$.Rt(3010145, J$.M(3010137, J$.R(3010129, 'buf', buf, false, false), 'toBuffer', false)());
                        } catch (J$e) {
                            J$.Ex(3011241, J$e);
                        } finally {
                            if (J$.Fr(3011249))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getAlg(certType) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(3010417, arguments.callee, this, arguments);
                            arguments = J$.N(3010425, 'arguments', arguments, true, false, false);
                            certType = J$.N(3010433, 'certType', certType, true, false, false);
                            if (J$.C(171112, J$.B(317218, '===', J$.R(3010249, 'certType', certType, false, false), J$.T(3010257, 'ssh-rsa-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3010273, J$.T(3010265, 'rsa', 21, false));
                            if (J$.C(171120, J$.B(317226, '===', J$.R(3010281, 'certType', certType, false, false), J$.T(3010289, 'ssh-dss-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3010305, J$.T(3010297, 'dsa', 21, false));
                            if (J$.C(171128, J$.M(3010329, J$.R(3010313, 'certType', certType, false, false), 'match', false)(J$.R(3010321, 'ECDSA_ALGO', ECDSA_ALGO, false, true))))
                                return J$.Rt(3010345, J$.T(3010337, 'ecdsa', 21, false));
                            if (J$.C(171136, J$.B(317234, '===', J$.R(3010353, 'certType', certType, false, false), J$.T(3010361, 'ssh-ed25519-cert-v01@openssh.com', 21, false))))
                                return J$.Rt(3010377, J$.T(3010369, 'ed25519', 21, false));
                            throw J$.F(3010409, J$.I(typeof Error === 'undefined' ? Error = J$.R(3010385, 'Error', undefined, true, true) : Error = J$.R(3010385, 'Error', Error, true, true)), true)(J$.B(317242, '+', J$.T(3010393, 'Unsupported cert type ', 21, false), J$.R(3010401, 'certType', certType, false, false)));
                        } catch (J$e) {
                            J$.Ex(3011257, J$e);
                        } finally {
                            if (J$.Fr(3011265))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getCertType(key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(3010665, arguments.callee, this, arguments);
                            arguments = J$.N(3010673, 'arguments', arguments, true, false, false);
                            key = J$.N(3010681, 'key', key, true, false, false);
                            if (J$.C(171144, J$.B(317250, '===', J$.G(3010449, J$.R(3010441, 'key', key, false, false), 'type'), J$.T(3010457, 'rsa', 21, false))))
                                return J$.Rt(3010473, J$.T(3010465, 'ssh-rsa-cert-v01@openssh.com', 21, false));
                            if (J$.C(171152, J$.B(317258, '===', J$.G(3010489, J$.R(3010481, 'key', key, false, false), 'type'), J$.T(3010497, 'dsa', 21, false))))
                                return J$.Rt(3010513, J$.T(3010505, 'ssh-dss-cert-v01@openssh.com', 21, false));
                            if (J$.C(171160, J$.B(317266, '===', J$.G(3010529, J$.R(3010521, 'key', key, false, false), 'type'), J$.T(3010537, 'ecdsa', 21, false))))
                                return J$.Rt(3010577, J$.B(317282, '+', J$.B(317274, '+', J$.T(3010545, 'ecdsa-sha2-', 21, false), J$.G(3010561, J$.R(3010553, 'key', key, false, false), 'curve')), J$.T(3010569, '-cert-v01@openssh.com', 21, false)));
                            if (J$.C(171168, J$.B(317290, '===', J$.G(3010593, J$.R(3010585, 'key', key, false, false), 'type'), J$.T(3010601, 'ed25519', 21, false))))
                                return J$.Rt(3010617, J$.T(3010609, 'ssh-ed25519-cert-v01@openssh.com', 21, false));
                            throw J$.F(3010657, J$.I(typeof Error === 'undefined' ? Error = J$.R(3010625, 'Error', undefined, true, true) : Error = J$.R(3010625, 'Error', Error, true, true)), true)(J$.B(317298, '+', J$.T(3010633, 'Unsupported key type ', 21, false), J$.G(3010649, J$.R(3010641, 'key', key, false, false), 'type')));
                        } catch (J$e) {
                            J$.Ex(3011273, J$e);
                        } finally {
                            if (J$.Fr(3011281))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3010697, 'assert', assert, false, false, false);
            J$.N(3010705, 'SSHBuffer', SSHBuffer, false, false, false);
            J$.N(3010713, 'crypto', crypto, false, false, false);
            J$.N(3010721, 'Buffer', Buffer, false, false, false);
            J$.N(3010729, 'algs', algs, false, false, false);
            J$.N(3010737, 'Key', Key, false, false, false);
            J$.N(3010745, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3010753, 'Identity', Identity, false, false, false);
            J$.N(3010761, 'rfc4253', rfc4253, false, false, false);
            J$.N(3010769, 'Signature', Signature, false, false, false);
            J$.N(3010777, 'utils', utils, false, false, false);
            J$.N(3010785, 'Certificate', Certificate, false, false, false);
            verify = J$.N(3010801, 'verify', J$.T(3010793, verify, 12, false), true, false, false);
            J$.N(3010809, 'TYPES', TYPES, false, false, false);
            J$.N(3010817, 'ECDSA_ALGO', ECDSA_ALGO, false, false, false);
            read = J$.N(3010833, 'read', J$.T(3010825, read, 12, false), true, false, false);
            fromBuffer = J$.N(3010849, 'fromBuffer', J$.T(3010841, fromBuffer, 12, false), true, false, false);
            int64ToDate = J$.N(3010865, 'int64ToDate', J$.T(3010857, int64ToDate, 12, false), true, false, false);
            dateToInt64 = J$.N(3010881, 'dateToInt64', J$.T(3010873, dateToInt64, 12, false), true, false, false);
            sign = J$.N(3010897, 'sign', J$.T(3010889, sign, 12, false), true, false, false);
            signAsync = J$.N(3010913, 'signAsync', J$.T(3010905, signAsync, 12, false), true, false, false);
            write = J$.N(3010929, 'write', J$.T(3010921, write, 12, false), true, false, false);
            toBuffer = J$.N(3010945, 'toBuffer', J$.T(3010937, toBuffer, 12, false), true, false, false);
            getAlg = J$.N(3010961, 'getAlg', J$.T(3010953, getAlg, 12, false), true, false, false);
            getCertType = J$.N(3010977, 'getCertType', J$.T(3010969, getCertType, 12, false), true, false, false);
            J$.T(3001753, 'use strict', 21, false);
            J$.F(3001777, J$.I(typeof require === 'undefined' ? require = J$.R(3001761, 'require', undefined, true, true) : require = J$.R(3001761, 'require', require, true, true)), false)(J$.T(3001769, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3001801, J$.I(typeof require === 'undefined' ? require = J$.R(3001785, 'require', undefined, true, true) : require = J$.R(3001785, 'require', require, true, true)), false)(J$.T(3001793, 'core-js/modules/es.array.map', 21, false));
            J$.F(3001825, J$.I(typeof require === 'undefined' ? require = J$.R(3001809, 'require', undefined, true, true) : require = J$.R(3001809, 'require', require, true, true)), false)(J$.T(3001817, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3001849, J$.I(typeof require === 'undefined' ? require = J$.R(3001833, 'require', undefined, true, true) : require = J$.R(3001833, 'require', require, true, true)), false)(J$.T(3001841, 'core-js/modules/es.function.name', 21, false));
            J$.F(3001873, J$.I(typeof require === 'undefined' ? require = J$.R(3001857, 'require', undefined, true, true) : require = J$.R(3001857, 'require', require, true, true)), false)(J$.T(3001865, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3001897, J$.I(typeof require === 'undefined' ? require = J$.R(3001881, 'require', undefined, true, true) : require = J$.R(3001881, 'require', require, true, true)), false)(J$.T(3001889, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3001921, J$.I(typeof require === 'undefined' ? require = J$.R(3001905, 'require', undefined, true, true) : require = J$.R(3001905, 'require', require, true, true)), false)(J$.T(3001913, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3001945, J$.I(typeof require === 'undefined' ? require = J$.R(3001929, 'require', undefined, true, true) : require = J$.R(3001929, 'require', require, true, true)), false)(J$.T(3001937, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3001969, J$.I(typeof require === 'undefined' ? require = J$.R(3001953, 'require', undefined, true, true) : require = J$.R(3001953, 'require', require, true, true)), false)(J$.T(3001961, 'core-js/modules/es.string.match', 21, false));
            J$.F(3001993, J$.I(typeof require === 'undefined' ? require = J$.R(3001977, 'require', undefined, true, true) : require = J$.R(3001977, 'require', require, true, true)), false)(J$.T(3001985, 'core-js/modules/es.string.split', 21, false));
            J$.F(3002017, J$.I(typeof require === 'undefined' ? require = J$.R(3002001, 'require', undefined, true, true) : require = J$.R(3002001, 'require', require, true, true)), false)(J$.T(3002009, 'core-js/modules/es.string.trim', 21, false));
            J$.F(3002041, J$.I(typeof require === 'undefined' ? require = J$.R(3002025, 'require', undefined, true, true) : require = J$.R(3002025, 'require', require, true, true)), false)(J$.T(3002033, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.F(3002065, J$.I(typeof require === 'undefined' ? require = J$.R(3002049, 'require', undefined, true, true) : require = J$.R(3002049, 'require', require, true, true)), false)(J$.T(3002057, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3002089, J$.I(typeof require === 'undefined' ? require = J$.R(3002073, 'require', undefined, true, true) : require = J$.R(3002073, 'require', require, true, true)), false)(J$.T(3002081, 'core-js/modules/es.array.map', 21, false));
            J$.F(3002113, J$.I(typeof require === 'undefined' ? require = J$.R(3002097, 'require', undefined, true, true) : require = J$.R(3002097, 'require', require, true, true)), false)(J$.T(3002105, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3002137, J$.I(typeof require === 'undefined' ? require = J$.R(3002121, 'require', undefined, true, true) : require = J$.R(3002121, 'require', require, true, true)), false)(J$.T(3002129, 'core-js/modules/es.function.name', 21, false));
            J$.F(3002161, J$.I(typeof require === 'undefined' ? require = J$.R(3002145, 'require', undefined, true, true) : require = J$.R(3002145, 'require', require, true, true)), false)(J$.T(3002153, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3002185, J$.I(typeof require === 'undefined' ? require = J$.R(3002169, 'require', undefined, true, true) : require = J$.R(3002169, 'require', require, true, true)), false)(J$.T(3002177, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3002209, J$.I(typeof require === 'undefined' ? require = J$.R(3002193, 'require', undefined, true, true) : require = J$.R(3002193, 'require', require, true, true)), false)(J$.T(3002201, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3002233, J$.I(typeof require === 'undefined' ? require = J$.R(3002217, 'require', undefined, true, true) : require = J$.R(3002217, 'require', require, true, true)), false)(J$.T(3002225, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3002257, J$.I(typeof require === 'undefined' ? require = J$.R(3002241, 'require', undefined, true, true) : require = J$.R(3002241, 'require', require, true, true)), false)(J$.T(3002249, 'core-js/modules/es.string.match', 21, false));
            J$.F(3002281, J$.I(typeof require === 'undefined' ? require = J$.R(3002265, 'require', undefined, true, true) : require = J$.R(3002265, 'require', require, true, true)), false)(J$.T(3002273, 'core-js/modules/es.string.split', 21, false));
            J$.F(3002305, J$.I(typeof require === 'undefined' ? require = J$.R(3002289, 'require', undefined, true, true) : require = J$.R(3002289, 'require', require, true, true)), false)(J$.T(3002297, 'core-js/modules/es.string.trim', 21, false));
            J$.F(3002329, J$.I(typeof require === 'undefined' ? require = J$.R(3002313, 'require', undefined, true, true) : require = J$.R(3002313, 'require', require, true, true)), false)(J$.T(3002321, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.F(3002353, J$.I(typeof require === 'undefined' ? require = J$.R(3002337, 'require', undefined, true, true) : require = J$.R(3002337, 'require', require, true, true)), false)(J$.T(3002345, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3002377, J$.I(typeof require === 'undefined' ? require = J$.R(3002361, 'require', undefined, true, true) : require = J$.R(3002361, 'require', require, true, true)), false)(J$.T(3002369, 'core-js/modules/es.array.map', 21, false));
            J$.F(3002401, J$.I(typeof require === 'undefined' ? require = J$.R(3002385, 'require', undefined, true, true) : require = J$.R(3002385, 'require', require, true, true)), false)(J$.T(3002393, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3002425, J$.I(typeof require === 'undefined' ? require = J$.R(3002409, 'require', undefined, true, true) : require = J$.R(3002409, 'require', require, true, true)), false)(J$.T(3002417, 'core-js/modules/es.function.name', 21, false));
            J$.F(3002449, J$.I(typeof require === 'undefined' ? require = J$.R(3002433, 'require', undefined, true, true) : require = J$.R(3002433, 'require', require, true, true)), false)(J$.T(3002441, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3002473, J$.I(typeof require === 'undefined' ? require = J$.R(3002457, 'require', undefined, true, true) : require = J$.R(3002457, 'require', require, true, true)), false)(J$.T(3002465, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3002497, J$.I(typeof require === 'undefined' ? require = J$.R(3002481, 'require', undefined, true, true) : require = J$.R(3002481, 'require', require, true, true)), false)(J$.T(3002489, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3002521, J$.I(typeof require === 'undefined' ? require = J$.R(3002505, 'require', undefined, true, true) : require = J$.R(3002505, 'require', require, true, true)), false)(J$.T(3002513, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3002545, J$.I(typeof require === 'undefined' ? require = J$.R(3002529, 'require', undefined, true, true) : require = J$.R(3002529, 'require', require, true, true)), false)(J$.T(3002537, 'core-js/modules/es.string.match', 21, false));
            J$.F(3002569, J$.I(typeof require === 'undefined' ? require = J$.R(3002553, 'require', undefined, true, true) : require = J$.R(3002553, 'require', require, true, true)), false)(J$.T(3002561, 'core-js/modules/es.string.split', 21, false));
            J$.F(3002593, J$.I(typeof require === 'undefined' ? require = J$.R(3002577, 'require', undefined, true, true) : require = J$.R(3002577, 'require', require, true, true)), false)(J$.T(3002585, 'core-js/modules/es.string.trim', 21, false));
            J$.F(3002617, J$.I(typeof require === 'undefined' ? require = J$.R(3002601, 'require', undefined, true, true) : require = J$.R(3002601, 'require', require, true, true)), false)(J$.T(3002609, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.F(3002641, J$.I(typeof require === 'undefined' ? require = J$.R(3002625, 'require', undefined, true, true) : require = J$.R(3002625, 'require', require, true, true)), false)(J$.T(3002633, 'core-js/modules/es.array.for-each', 21, false));
            J$.F(3002665, J$.I(typeof require === 'undefined' ? require = J$.R(3002649, 'require', undefined, true, true) : require = J$.R(3002649, 'require', require, true, true)), false)(J$.T(3002657, 'core-js/modules/es.array.map', 21, false));
            J$.F(3002689, J$.I(typeof require === 'undefined' ? require = J$.R(3002673, 'require', undefined, true, true) : require = J$.R(3002673, 'require', require, true, true)), false)(J$.T(3002681, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3002713, J$.I(typeof require === 'undefined' ? require = J$.R(3002697, 'require', undefined, true, true) : require = J$.R(3002697, 'require', require, true, true)), false)(J$.T(3002705, 'core-js/modules/es.function.name', 21, false));
            J$.F(3002737, J$.I(typeof require === 'undefined' ? require = J$.R(3002721, 'require', undefined, true, true) : require = J$.R(3002721, 'require', require, true, true)), false)(J$.T(3002729, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3002761, J$.I(typeof require === 'undefined' ? require = J$.R(3002745, 'require', undefined, true, true) : require = J$.R(3002745, 'require', require, true, true)), false)(J$.T(3002753, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3002785, J$.I(typeof require === 'undefined' ? require = J$.R(3002769, 'require', undefined, true, true) : require = J$.R(3002769, 'require', require, true, true)), false)(J$.T(3002777, 'core-js/modules/es.regexp.exec', 21, false));
            J$.F(3002809, J$.I(typeof require === 'undefined' ? require = J$.R(3002793, 'require', undefined, true, true) : require = J$.R(3002793, 'require', require, true, true)), false)(J$.T(3002801, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3002833, J$.I(typeof require === 'undefined' ? require = J$.R(3002817, 'require', undefined, true, true) : require = J$.R(3002817, 'require', require, true, true)), false)(J$.T(3002825, 'core-js/modules/es.string.match', 21, false));
            J$.F(3002857, J$.I(typeof require === 'undefined' ? require = J$.R(3002841, 'require', undefined, true, true) : require = J$.R(3002841, 'require', require, true, true)), false)(J$.T(3002849, 'core-js/modules/es.string.split', 21, false));
            J$.F(3002881, J$.I(typeof require === 'undefined' ? require = J$.R(3002865, 'require', undefined, true, true) : require = J$.R(3002865, 'require', require, true, true)), false)(J$.T(3002873, 'core-js/modules/es.string.trim', 21, false));
            J$.F(3002905, J$.I(typeof require === 'undefined' ? require = J$.R(3002889, 'require', undefined, true, true) : require = J$.R(3002889, 'require', require, true, true)), false)(J$.T(3002897, 'core-js/modules/web.dom-collections.for-each', 21, false));
            J$.P(3002985, J$.I(typeof module === 'undefined' ? module = J$.R(3002913, 'module', undefined, true, true) : module = J$.R(3002913, 'module', module, true, true)), 'exports', J$.T(3002977, {
                read: J$.R(3002921, 'read', read, false, true),
                verify: J$.R(3002929, 'verify', verify, false, true),
                sign: J$.R(3002937, 'sign', sign, false, true),
                signAsync: J$.R(3002945, 'signAsync', signAsync, false, true),
                write: J$.R(3002953, 'write', write, false, true),
                fromBuffer: J$.R(3002961, 'fromBuffer', fromBuffer, false, true),
                toBuffer: J$.R(3002969, 'toBuffer', toBuffer, false, true)
            }, 11, false));
            var assert = J$.W(3003017, 'assert', J$.F(3003009, J$.I(typeof require === 'undefined' ? require = J$.R(3002993, 'require', undefined, true, true) : require = J$.R(3002993, 'require', require, true, true)), false)(J$.T(3003001, 'assert-plus', 21, false)), assert, false, true);
            var SSHBuffer = J$.W(3003049, 'SSHBuffer', J$.F(3003041, J$.I(typeof require === 'undefined' ? require = J$.R(3003025, 'require', undefined, true, true) : require = J$.R(3003025, 'require', require, true, true)), false)(J$.T(3003033, '../ssh-buffer', 21, false)), SSHBuffer, false, true);
            var crypto = J$.W(3003081, 'crypto', J$.F(3003073, J$.I(typeof require === 'undefined' ? require = J$.R(3003057, 'require', undefined, true, true) : require = J$.R(3003057, 'require', require, true, true)), false)(J$.T(3003065, 'crypto', 21, false)), crypto, false, true);
            var Buffer = J$.W(3003121, 'Buffer', J$.G(3003113, J$.F(3003105, J$.I(typeof require === 'undefined' ? require = J$.R(3003089, 'require', undefined, true, true) : require = J$.R(3003089, 'require', require, true, true)), false)(J$.T(3003097, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3003153, 'algs', J$.F(3003145, J$.I(typeof require === 'undefined' ? require = J$.R(3003129, 'require', undefined, true, true) : require = J$.R(3003129, 'require', require, true, true)), false)(J$.T(3003137, '../algs', 21, false)), algs, false, true);
            var Key = J$.W(3003185, 'Key', J$.F(3003177, J$.I(typeof require === 'undefined' ? require = J$.R(3003161, 'require', undefined, true, true) : require = J$.R(3003161, 'require', require, true, true)), false)(J$.T(3003169, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3003217, 'PrivateKey', J$.F(3003209, J$.I(typeof require === 'undefined' ? require = J$.R(3003193, 'require', undefined, true, true) : require = J$.R(3003193, 'require', require, true, true)), false)(J$.T(3003201, '../private-key', 21, false)), PrivateKey, false, true);
            var Identity = J$.W(3003249, 'Identity', J$.F(3003241, J$.I(typeof require === 'undefined' ? require = J$.R(3003225, 'require', undefined, true, true) : require = J$.R(3003225, 'require', require, true, true)), false)(J$.T(3003233, '../identity', 21, false)), Identity, false, true);
            var rfc4253 = J$.W(3003281, 'rfc4253', J$.F(3003273, J$.I(typeof require === 'undefined' ? require = J$.R(3003257, 'require', undefined, true, true) : require = J$.R(3003257, 'require', require, true, true)), false)(J$.T(3003265, './rfc4253', 21, false)), rfc4253, false, true);
            var Signature = J$.W(3003313, 'Signature', J$.F(3003305, J$.I(typeof require === 'undefined' ? require = J$.R(3003289, 'require', undefined, true, true) : require = J$.R(3003289, 'require', require, true, true)), false)(J$.T(3003297, '../signature', 21, false)), Signature, false, true);
            var utils = J$.W(3003345, 'utils', J$.F(3003337, J$.I(typeof require === 'undefined' ? require = J$.R(3003321, 'require', undefined, true, true) : require = J$.R(3003321, 'require', require, true, true)), false)(J$.T(3003329, '../utils', 21, false)), utils, false, true);
            var Certificate = J$.W(3003377, 'Certificate', J$.F(3003369, J$.I(typeof require === 'undefined' ? require = J$.R(3003353, 'require', undefined, true, true) : require = J$.R(3003353, 'require', require, true, true)), false)(J$.T(3003361, '../certificate', 21, false)), Certificate, false, true);
            var TYPES = J$.W(3003457, 'TYPES', J$.T(3003449, {
                'user': J$.T(3003433, 1, 22, false),
                'host': J$.T(3003441, 2, 22, false)
            }, 11, false), TYPES, false, true);
            J$.M(3003569, J$.M(3003481, J$.I(typeof Object === 'undefined' ? Object = J$.R(3003465, 'Object', undefined, true, true) : Object = J$.R(3003465, 'Object', Object, true, true)), 'keys', false)(J$.R(3003473, 'TYPES', TYPES, false, true)), 'forEach', false)(J$.T(3003561, function (k) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3003537, arguments.callee, this, arguments);
                            arguments = J$.N(3003545, 'arguments', arguments, true, false, false);
                            k = J$.N(3003553, 'k', k, true, false, false);
                            J$.P(3003529, J$.R(3003489, 'TYPES', TYPES, false, true), J$.G(3003513, J$.R(3003497, 'TYPES', TYPES, false, true), J$.R(3003505, 'k', k, false, false)), J$.R(3003521, 'k', k, false, false));
                        } catch (J$e) {
                            J$.Ex(3011001, J$e);
                        } finally {
                            if (J$.Fr(3011009))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var ECDSA_ALGO = J$.W(3003585, 'ECDSA_ALGO', J$.T(3003577, /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/, 14, false), ECDSA_ALGO, false, true);
        } catch (J$e) {
            J$.Ex(3011289, J$e);
        } finally {
            if (J$.Sr(3011297))
                continue jalangiLabel19;
            else
                break jalangiLabel19;
        }
    }
// JALANGI DO NOT INSTRUMENT

