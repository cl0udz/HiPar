J$.noInstrEval = false;
jalangiLabel20:
    while (true) {
        try {
            J$.Se(3027729, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/sshpk/lib/formats/pkcs1.js');
            function read(buf, options) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(3019577, arguments.callee, this, arguments);
                            arguments = J$.N(3019585, 'arguments', arguments, true, false, false);
                            buf = J$.N(3019593, 'buf', buf, true, false, false);
                            options = J$.N(3019601, 'options', options, true, false, false);
                            return J$.Rt(3019569, J$.M(3019561, J$.R(3019529, 'pem', pem, false, true), 'read', false)(J$.R(3019537, 'buf', buf, false, false), J$.R(3019545, 'options', options, false, false), J$.T(3019553, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3028137, J$e);
                        } finally {
                            if (J$.Fr(3028145))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function write(key, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(3019657, arguments.callee, this, arguments);
                            arguments = J$.N(3019665, 'arguments', arguments, true, false, false);
                            key = J$.N(3019673, 'key', key, true, false, false);
                            options = J$.N(3019681, 'options', options, true, false, false);
                            return J$.Rt(3019649, J$.M(3019641, J$.R(3019609, 'pem', pem, false, true), 'write', false)(J$.R(3019617, 'key', key, false, false), J$.R(3019625, 'options', options, false, false), J$.T(3019633, 'pkcs1', 21, false)));
                        } catch (J$e) {
                            J$.Ex(3028153, J$e);
                        } finally {
                            if (J$.Fr(3028161))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readMPInt(der, nm) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(3019833, arguments.callee, this, arguments);
                            arguments = J$.N(3019841, 'arguments', arguments, true, false, false);
                            der = J$.N(3019849, 'der', der, true, false, false);
                            nm = J$.N(3019857, 'nm', nm, true, false, false);
                            J$.M(3019753, J$.R(3019689, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3019705, J$.R(3019697, 'der', der, false, false), 'peek', false)(), J$.G(3019729, J$.G(3019721, J$.R(3019713, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.B(317834, '+', J$.R(3019737, 'nm', nm, false, false), J$.T(3019745, ' is not an Integer', 21, false)));
                            return J$.Rt(3019825, J$.M(3019817, J$.R(3019761, 'utils', utils, false, true), 'mpNormalize', false)(J$.M(3019809, J$.R(3019769, 'der', der, false, false), 'readString', false)(J$.G(3019793, J$.G(3019785, J$.R(3019777, 'asn1', asn1, false, true), 'Ber'), 'Integer'), J$.T(3019801, true, 23, false))));
                        } catch (J$e) {
                            J$.Ex(3028169, J$e);
                        } finally {
                            if (J$.Fr(3028177))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1(alg, type, der) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(3020417, arguments.callee, this, arguments);
                            arguments = J$.N(3020425, 'arguments', arguments, true, false, false);
                            alg = J$.N(3020433, 'alg', alg, true, false, false);
                            type = J$.N(3020441, 'type', type, true, false, false);
                            der = J$.N(3020449, 'der', der, true, false, false);
                            switch (J$.C1(171584, J$.R(3019865, 'alg', alg, false, false))) {
                            case J$.C2(171592, J$.T(3020001, 'RSA', 21, false)):
                                if (J$.C(171536, J$.B(317842, '===', J$.R(3019873, 'type', type, false, false), J$.T(3019881, 'public', 21, false))))
                                    return J$.Rt(3019913, J$.F(3019905, J$.R(3019889, 'readPkcs1RSAPublic', readPkcs1RSAPublic, false, true), false)(J$.R(3019897, 'der', der, false, false)));
                                else if (J$.C(171528, J$.B(317850, '===', J$.R(3019921, 'type', type, false, false), J$.T(3019929, 'private', 21, false))))
                                    return J$.Rt(3019961, J$.F(3019953, J$.R(3019937, 'readPkcs1RSAPrivate', readPkcs1RSAPrivate, false, true), false)(J$.R(3019945, 'der', der, false, false)));
                                throw J$.F(3019993, J$.I(typeof Error === 'undefined' ? Error = J$.R(3019969, 'Error', undefined, true, true) : Error = J$.R(3019969, 'Error', Error, true, true)), true)(J$.B(317858, '+', J$.T(3019977, 'Unknown key type: ', 21, false), J$.R(3019985, 'type', type, false, false)));
                            case J$.C2(171600, J$.T(3020137, 'DSA', 21, false)):
                                if (J$.C(171552, J$.B(317866, '===', J$.R(3020009, 'type', type, false, false), J$.T(3020017, 'public', 21, false))))
                                    return J$.Rt(3020049, J$.F(3020041, J$.R(3020025, 'readPkcs1DSAPublic', readPkcs1DSAPublic, false, true), false)(J$.R(3020033, 'der', der, false, false)));
                                else if (J$.C(171544, J$.B(317874, '===', J$.R(3020057, 'type', type, false, false), J$.T(3020065, 'private', 21, false))))
                                    return J$.Rt(3020097, J$.F(3020089, J$.R(3020073, 'readPkcs1DSAPrivate', readPkcs1DSAPrivate, false, true), false)(J$.R(3020081, 'der', der, false, false)));
                                throw J$.F(3020129, J$.I(typeof Error === 'undefined' ? Error = J$.R(3020105, 'Error', undefined, true, true) : Error = J$.R(3020105, 'Error', Error, true, true)), true)(J$.B(317882, '+', J$.T(3020113, 'Unknown key type: ', 21, false), J$.R(3020121, 'type', type, false, false)));
                            case J$.C2(171608, J$.T(3020145, 'EC', 21, false)):
                            case J$.C2(171616, J$.T(3020281, 'ECDSA', 21, false)):
                                if (J$.C(171568, J$.B(317890, '===', J$.R(3020153, 'type', type, false, false), J$.T(3020161, 'private', 21, false))))
                                    return J$.Rt(3020193, J$.F(3020185, J$.R(3020169, 'readPkcs1ECDSAPrivate', readPkcs1ECDSAPrivate, false, true), false)(J$.R(3020177, 'der', der, false, false)));
                                else if (J$.C(171560, J$.B(317898, '===', J$.R(3020201, 'type', type, false, false), J$.T(3020209, 'public', 21, false))))
                                    return J$.Rt(3020241, J$.F(3020233, J$.R(3020217, 'readPkcs1ECDSAPublic', readPkcs1ECDSAPublic, false, true), false)(J$.R(3020225, 'der', der, false, false)));
                                throw J$.F(3020273, J$.I(typeof Error === 'undefined' ? Error = J$.R(3020249, 'Error', undefined, true, true) : Error = J$.R(3020249, 'Error', Error, true, true)), true)(J$.B(317906, '+', J$.T(3020257, 'Unknown key type: ', 21, false), J$.R(3020265, 'type', type, false, false)));
                            case J$.C2(171624, J$.T(3020289, 'EDDSA', 21, false)):
                            case J$.C2(171632, J$.T(3020377, 'EdDSA', 21, false)):
                                if (J$.C(171576, J$.B(317914, '===', J$.R(3020297, 'type', type, false, false), J$.T(3020305, 'private', 21, false))))
                                    return J$.Rt(3020337, J$.F(3020329, J$.R(3020313, 'readPkcs1EdDSAPrivate', readPkcs1EdDSAPrivate, false, true), false)(J$.R(3020321, 'der', der, false, false)));
                                throw J$.F(3020369, J$.I(typeof Error === 'undefined' ? Error = J$.R(3020345, 'Error', undefined, true, true) : Error = J$.R(3020345, 'Error', Error, true, true)), true)(J$.B(317922, '+', J$.R(3020353, 'type', type, false, false), J$.T(3020361, ' keys not supported with EdDSA', 21, false)));
                            default:
                                throw J$.F(3020409, J$.I(typeof Error === 'undefined' ? Error = J$.R(3020385, 'Error', undefined, true, true) : Error = J$.R(3020385, 'Error', Error, true, true)), true)(J$.B(317930, '+', J$.T(3020393, 'Unknown key algo: ', 21, false), J$.R(3020401, 'alg', alg, false, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(3028185, J$e);
                        } finally {
                            if (J$.Fr(3028193))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPublic(der) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(3020649, arguments.callee, this, arguments);
                            arguments = J$.N(3020657, 'arguments', arguments, true, false, false);
                            der = J$.N(3020665, 'der', der, true, false, false);
                            J$.N(3020673, 'n', n, false, false, false);
                            J$.N(3020681, 'e', e, false, false, false);
                            J$.N(3020689, 'key', key, false, false, false);
                            var n = J$.W(3020489, 'n', J$.F(3020481, J$.R(3020457, 'readMPInt', readMPInt, false, true), false)(J$.R(3020465, 'der', der, false, false), J$.T(3020473, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(3020529, 'e', J$.F(3020521, J$.R(3020497, 'readMPInt', readMPInt, false, true), false)(J$.R(3020505, 'der', der, false, false), J$.T(3020513, 'exponent', 21, false)), e, false, false);
                            var key = J$.W(3020609, 'key', J$.T(3020601, {
                                type: J$.T(3020537, 'rsa', 21, false),
                                parts: J$.T(3020593, [
                                    J$.T(3020561, {
                                        name: J$.T(3020545, 'e', 21, false),
                                        data: J$.R(3020553, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(3020585, {
                                        name: J$.T(3020569, 'n', 21, false),
                                        data: J$.R(3020577, 'n', n, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3020641, J$.F(3020633, J$.R(3020617, 'Key', Key, false, true), true)(J$.R(3020625, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028201, J$e);
                        } finally {
                            if (J$.Fr(3028209))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1RSAPrivate(der) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(3021361, arguments.callee, this, arguments);
                            arguments = J$.N(3021369, 'arguments', arguments, true, false, false);
                            der = J$.N(3021377, 'der', der, true, false, false);
                            J$.N(3021385, 'version', version, false, false, false);
                            J$.N(3021393, 'n', n, false, false, false);
                            J$.N(3021401, 'e', e, false, false, false);
                            J$.N(3021409, 'd', d, false, false, false);
                            J$.N(3021417, 'p', p, false, false, false);
                            J$.N(3021425, 'q', q, false, false, false);
                            J$.N(3021433, 'dmodp', dmodp, false, false, false);
                            J$.N(3021441, 'dmodq', dmodq, false, false, false);
                            J$.N(3021449, 'iqmp', iqmp, false, false, false);
                            J$.N(3021457, 'key', key, false, false, false);
                            var version = J$.W(3020729, 'version', J$.F(3020721, J$.R(3020697, 'readMPInt', readMPInt, false, true), false)(J$.R(3020705, 'der', der, false, false), J$.T(3020713, 'version', 21, false)), version, false, false);
                            J$.M(3020777, J$.R(3020737, 'assert', assert, false, true), 'strictEqual', false)(J$.G(3020761, J$.R(3020745, 'version', version, false, false), J$.T(3020753, 0, 22, false)), J$.T(3020769, 0, 22, false));
                            var n = J$.W(3020817, 'n', J$.F(3020809, J$.R(3020785, 'readMPInt', readMPInt, false, true), false)(J$.R(3020793, 'der', der, false, false), J$.T(3020801, 'modulus', 21, false)), n, false, false);
                            var e = J$.W(3020857, 'e', J$.F(3020849, J$.R(3020825, 'readMPInt', readMPInt, false, true), false)(J$.R(3020833, 'der', der, false, false), J$.T(3020841, 'public exponent', 21, false)), e, false, false);
                            var d = J$.W(3020897, 'd', J$.F(3020889, J$.R(3020865, 'readMPInt', readMPInt, false, true), false)(J$.R(3020873, 'der', der, false, false), J$.T(3020881, 'private exponent', 21, false)), d, false, false);
                            var p = J$.W(3020937, 'p', J$.F(3020929, J$.R(3020905, 'readMPInt', readMPInt, false, true), false)(J$.R(3020913, 'der', der, false, false), J$.T(3020921, 'prime1', 21, false)), p, false, false);
                            var q = J$.W(3020977, 'q', J$.F(3020969, J$.R(3020945, 'readMPInt', readMPInt, false, true), false)(J$.R(3020953, 'der', der, false, false), J$.T(3020961, 'prime2', 21, false)), q, false, false);
                            var dmodp = J$.W(3021017, 'dmodp', J$.F(3021009, J$.R(3020985, 'readMPInt', readMPInt, false, true), false)(J$.R(3020993, 'der', der, false, false), J$.T(3021001, 'exponent1', 21, false)), dmodp, false, false);
                            var dmodq = J$.W(3021057, 'dmodq', J$.F(3021049, J$.R(3021025, 'readMPInt', readMPInt, false, true), false)(J$.R(3021033, 'der', der, false, false), J$.T(3021041, 'exponent2', 21, false)), dmodq, false, false);
                            var iqmp = J$.W(3021097, 'iqmp', J$.F(3021089, J$.R(3021065, 'readMPInt', readMPInt, false, true), false)(J$.R(3021073, 'der', der, false, false), J$.T(3021081, 'iqmp', 21, false)), iqmp, false, false);
                            var key = J$.W(3021321, 'key', J$.T(3021313, {
                                type: J$.T(3021105, 'rsa', 21, false),
                                parts: J$.T(3021305, [
                                    J$.T(3021129, {
                                        name: J$.T(3021113, 'n', 21, false),
                                        data: J$.R(3021121, 'n', n, false, false)
                                    }, 11, false),
                                    J$.T(3021153, {
                                        name: J$.T(3021137, 'e', 21, false),
                                        data: J$.R(3021145, 'e', e, false, false)
                                    }, 11, false),
                                    J$.T(3021177, {
                                        name: J$.T(3021161, 'd', 21, false),
                                        data: J$.R(3021169, 'd', d, false, false)
                                    }, 11, false),
                                    J$.T(3021201, {
                                        name: J$.T(3021185, 'iqmp', 21, false),
                                        data: J$.R(3021193, 'iqmp', iqmp, false, false)
                                    }, 11, false),
                                    J$.T(3021225, {
                                        name: J$.T(3021209, 'p', 21, false),
                                        data: J$.R(3021217, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3021249, {
                                        name: J$.T(3021233, 'q', 21, false),
                                        data: J$.R(3021241, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3021273, {
                                        name: J$.T(3021257, 'dmodp', 21, false),
                                        data: J$.R(3021265, 'dmodp', dmodp, false, false)
                                    }, 11, false),
                                    J$.T(3021297, {
                                        name: J$.T(3021281, 'dmodq', 21, false),
                                        data: J$.R(3021289, 'dmodq', dmodq, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3021353, J$.F(3021345, J$.R(3021329, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3021337, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028217, J$e);
                        } finally {
                            if (J$.Fr(3028225))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPrivate(der) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(3021937, arguments.callee, this, arguments);
                            arguments = J$.N(3021945, 'arguments', arguments, true, false, false);
                            der = J$.N(3021953, 'der', der, true, false, false);
                            J$.N(3021961, 'version', version, false, false, false);
                            J$.N(3021969, 'p', p, false, false, false);
                            J$.N(3021977, 'q', q, false, false, false);
                            J$.N(3021985, 'g', g, false, false, false);
                            J$.N(3021993, 'y', y, false, false, false);
                            J$.N(3022001, 'x', x, false, false, false);
                            J$.N(3022009, 'key', key, false, false, false);
                            var version = J$.W(3021497, 'version', J$.F(3021489, J$.R(3021465, 'readMPInt', readMPInt, false, true), false)(J$.R(3021473, 'der', der, false, false), J$.T(3021481, 'version', 21, false)), version, false, false);
                            J$.M(3021545, J$.R(3021505, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3021529, J$.R(3021513, 'version', version, false, false), 'readUInt8', false)(J$.T(3021521, 0, 22, false)), J$.T(3021537, 0, 22, false));
                            var p = J$.W(3021585, 'p', J$.F(3021577, J$.R(3021553, 'readMPInt', readMPInt, false, true), false)(J$.R(3021561, 'der', der, false, false), J$.T(3021569, 'p', 21, false)), p, false, false);
                            var q = J$.W(3021625, 'q', J$.F(3021617, J$.R(3021593, 'readMPInt', readMPInt, false, true), false)(J$.R(3021601, 'der', der, false, false), J$.T(3021609, 'q', 21, false)), q, false, false);
                            var g = J$.W(3021665, 'g', J$.F(3021657, J$.R(3021633, 'readMPInt', readMPInt, false, true), false)(J$.R(3021641, 'der', der, false, false), J$.T(3021649, 'g', 21, false)), g, false, false);
                            var y = J$.W(3021705, 'y', J$.F(3021697, J$.R(3021673, 'readMPInt', readMPInt, false, true), false)(J$.R(3021681, 'der', der, false, false), J$.T(3021689, 'y', 21, false)), y, false, false);
                            var x = J$.W(3021745, 'x', J$.F(3021737, J$.R(3021713, 'readMPInt', readMPInt, false, true), false)(J$.R(3021721, 'der', der, false, false), J$.T(3021729, 'x', 21, false)), x, false, false);
                            var key = J$.W(3021897, 'key', J$.T(3021889, {
                                type: J$.T(3021753, 'dsa', 21, false),
                                parts: J$.T(3021881, [
                                    J$.T(3021777, {
                                        name: J$.T(3021761, 'p', 21, false),
                                        data: J$.R(3021769, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3021801, {
                                        name: J$.T(3021785, 'q', 21, false),
                                        data: J$.R(3021793, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3021825, {
                                        name: J$.T(3021809, 'g', 21, false),
                                        data: J$.R(3021817, 'g', g, false, false)
                                    }, 11, false),
                                    J$.T(3021849, {
                                        name: J$.T(3021833, 'y', 21, false),
                                        data: J$.R(3021841, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(3021873, {
                                        name: J$.T(3021857, 'x', 21, false),
                                        data: J$.R(3021865, 'x', x, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3021929, J$.F(3021921, J$.R(3021905, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3021913, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028233, J$e);
                        } finally {
                            if (J$.Fr(3028241))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1EdDSAPrivate(der) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(3022441, arguments.callee, this, arguments);
                            arguments = J$.N(3022449, 'arguments', arguments, true, false, false);
                            der = J$.N(3022457, 'der', der, true, false, false);
                            J$.N(3022465, 'version', version, false, false, false);
                            J$.N(3022473, 'k', k, false, false, false);
                            J$.N(3022481, 'oid', oid, false, false, false);
                            J$.N(3022489, 'A', A, false, false, false);
                            J$.N(3022497, 'key', key, false, false, false);
                            var version = J$.W(3022049, 'version', J$.F(3022041, J$.R(3022017, 'readMPInt', readMPInt, false, true), false)(J$.R(3022025, 'der', der, false, false), J$.T(3022033, 'version', 21, false)), version, false, false);
                            J$.M(3022097, J$.R(3022057, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3022081, J$.R(3022065, 'version', version, false, false), 'readUInt8', false)(J$.T(3022073, 0, 22, false)), J$.T(3022089, 1, 22, false));
                            var k = J$.W(3022153, 'k', J$.M(3022145, J$.R(3022105, 'der', der, false, false), 'readString', false)(J$.G(3022129, J$.G(3022121, J$.R(3022113, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(3022137, true, 23, false)), k, false, false);
                            J$.M(3022177, J$.R(3022161, 'der', der, false, false), 'readSequence', false)(J$.T(3022169, 160, 22, false));
                            var oid = J$.W(3022201, 'oid', J$.M(3022193, J$.R(3022185, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(3022241, J$.R(3022209, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3022217, 'oid', oid, false, false), J$.T(3022225, '1.3.101.112', 21, false), J$.T(3022233, 'the ed25519 curve identifier', 21, false));
                            J$.M(3022265, J$.R(3022249, 'der', der, false, false), 'readSequence', false)(J$.T(3022257, 161, 22, false));
                            var A = J$.W(3022297, 'A', J$.M(3022289, J$.R(3022273, 'utils', utils, false, true), 'readBitString', false)(J$.R(3022281, 'der', der, false, false)), A, false, false);
                            var key = J$.W(3022401, 'key', J$.T(3022393, {
                                type: J$.T(3022305, 'ed25519', 21, false),
                                parts: J$.T(3022385, [
                                    J$.T(3022353, {
                                        name: J$.T(3022313, 'A', 21, false),
                                        data: J$.M(3022345, J$.R(3022321, 'utils', utils, false, true), 'zeroPadToLength', false)(J$.R(3022329, 'A', A, false, false), J$.T(3022337, 32, 22, false))
                                    }, 11, false),
                                    J$.T(3022377, {
                                        name: J$.T(3022361, 'k', 21, false),
                                        data: J$.R(3022369, 'k', k, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3022433, J$.F(3022425, J$.R(3022409, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3022417, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028249, J$e);
                        } finally {
                            if (J$.Fr(3028257))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1DSAPublic(der) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(3022825, arguments.callee, this, arguments);
                            arguments = J$.N(3022833, 'arguments', arguments, true, false, false);
                            der = J$.N(3022841, 'der', der, true, false, false);
                            J$.N(3022849, 'y', y, false, false, false);
                            J$.N(3022857, 'p', p, false, false, false);
                            J$.N(3022865, 'q', q, false, false, false);
                            J$.N(3022873, 'g', g, false, false, false);
                            J$.N(3022881, 'key', key, false, false, false);
                            var y = J$.W(3022537, 'y', J$.F(3022529, J$.R(3022505, 'readMPInt', readMPInt, false, true), false)(J$.R(3022513, 'der', der, false, false), J$.T(3022521, 'y', 21, false)), y, false, false);
                            var p = J$.W(3022577, 'p', J$.F(3022569, J$.R(3022545, 'readMPInt', readMPInt, false, true), false)(J$.R(3022553, 'der', der, false, false), J$.T(3022561, 'p', 21, false)), p, false, false);
                            var q = J$.W(3022617, 'q', J$.F(3022609, J$.R(3022585, 'readMPInt', readMPInt, false, true), false)(J$.R(3022593, 'der', der, false, false), J$.T(3022601, 'q', 21, false)), q, false, false);
                            var g = J$.W(3022657, 'g', J$.F(3022649, J$.R(3022625, 'readMPInt', readMPInt, false, true), false)(J$.R(3022633, 'der', der, false, false), J$.T(3022641, 'g', 21, false)), g, false, false);
                            var key = J$.W(3022785, 'key', J$.T(3022777, {
                                type: J$.T(3022665, 'dsa', 21, false),
                                parts: J$.T(3022769, [
                                    J$.T(3022689, {
                                        name: J$.T(3022673, 'y', 21, false),
                                        data: J$.R(3022681, 'y', y, false, false)
                                    }, 11, false),
                                    J$.T(3022713, {
                                        name: J$.T(3022697, 'p', 21, false),
                                        data: J$.R(3022705, 'p', p, false, false)
                                    }, 11, false),
                                    J$.T(3022737, {
                                        name: J$.T(3022721, 'q', 21, false),
                                        data: J$.R(3022729, 'q', q, false, false)
                                    }, 11, false),
                                    J$.T(3022761, {
                                        name: J$.T(3022745, 'g', 21, false),
                                        data: J$.R(3022753, 'g', g, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3022817, J$.F(3022809, J$.R(3022793, 'Key', Key, false, true), true)(J$.R(3022801, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028265, J$e);
                        } finally {
                            if (J$.Fr(3028273))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPublic(der) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(3023449, arguments.callee, this, arguments);
                            arguments = J$.N(3023457, 'arguments', arguments, true, false, false);
                            der = J$.N(3023465, 'der', der, true, false, false);
                            J$.N(3023473, 'oid', oid, false, false, false);
                            J$.N(3023481, 'curveOid', curveOid, false, false, false);
                            J$.N(3023489, 'curve', curve, false, false, false);
                            J$.N(3023497, 'curves', curves, false, false, false);
                            J$.N(3023505, 'j', j, false, false, false);
                            J$.N(3023513, 'c', c, false, false, false);
                            J$.N(3023521, 'cd', cd, false, false, false);
                            J$.N(3023529, 'Q', Q, false, false, false);
                            J$.N(3023537, 'key', key, false, false, false);
                            J$.M(3022897, J$.R(3022889, 'der', der, false, false), 'readSequence', false)();
                            var oid = J$.W(3022921, 'oid', J$.M(3022913, J$.R(3022905, 'der', der, false, false), 'readOID', false)(), oid, false, false);
                            J$.M(3022961, J$.R(3022929, 'assert', assert, false, true), 'strictEqual', false)(J$.R(3022937, 'oid', oid, false, false), J$.T(3022945, '1.2.840.10045.2.1', 21, false), J$.T(3022953, 'must be ecPublicKey', 21, false));
                            var curveOid = J$.W(3022985, 'curveOid', J$.M(3022977, J$.R(3022969, 'der', der, false, false), 'readOID', false)(), curveOid, false, false);
                            var curve;
                            var curves = J$.W(3023025, 'curves', J$.M(3023017, J$.I(typeof Object === 'undefined' ? Object = J$.R(3022993, 'Object', undefined, true, true) : Object = J$.R(3022993, 'Object', Object, true, true)), 'keys', false)(J$.G(3023009, J$.R(3023001, 'algs', algs, false, true), 'curves')), curves, false, false);
                            for (var j = J$.W(3023041, 'j', J$.T(3023033, 0, 22, false), j, false, false); J$.C(171648, J$.B(317938, '<', J$.R(3023049, 'j', j, false, false), J$.G(3023065, J$.R(3023057, 'curves', curves, false, false), 'length'))); j = J$.W(3023081, 'j', J$.B(317954, '+', J$.U(317946, '+', J$.R(3023073, 'j', j, false, false)), 1), j, false, false)) {
                                var c = J$.W(3023113, 'c', J$.G(3023105, J$.R(3023089, 'curves', curves, false, false), J$.R(3023097, 'j', j, false, false)), c, false, false);
                                var cd = J$.W(3023153, 'cd', J$.G(3023145, J$.G(3023129, J$.R(3023121, 'algs', algs, false, true), 'curves'), J$.R(3023137, 'c', c, false, false)), cd, false, false);
                                if (J$.C(171640, J$.B(317962, '===', J$.G(3023169, J$.R(3023161, 'cd', cd, false, false), 'pkcs8oid'), J$.R(3023177, 'curveOid', curveOid, false, false)))) {
                                    curve = J$.W(3023193, 'curve', J$.R(3023185, 'c', c, false, false), curve, false, false);
                                    break;
                                }
                            }
                            J$.M(3023225, J$.R(3023201, 'assert', assert, false, true), 'string', false)(J$.R(3023209, 'curve', curve, false, false), J$.T(3023217, 'a known ECDSA named curve', 21, false));
                            var Q = J$.W(3023281, 'Q', J$.M(3023273, J$.R(3023233, 'der', der, false, false), 'readString', false)(J$.G(3023257, J$.G(3023249, J$.R(3023241, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(3023265, true, 23, false)), Q, false, false);
                            Q = J$.W(3023313, 'Q', J$.M(3023305, J$.R(3023289, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(3023297, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(3023409, 'key', J$.T(3023401, {
                                type: J$.T(3023321, 'ecdsa', 21, false),
                                parts: J$.T(3023393, [
                                    J$.T(3023361, {
                                        name: J$.T(3023329, 'curve', 21, false),
                                        data: J$.M(3023353, J$.R(3023337, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3023345, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(3023385, {
                                        name: J$.T(3023369, 'Q', 21, false),
                                        data: J$.R(3023377, 'Q', Q, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3023441, J$.F(3023433, J$.R(3023417, 'Key', Key, false, true), true)(J$.R(3023425, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028281, J$e);
                        } finally {
                            if (J$.Fr(3028289))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function readPkcs1ECDSAPrivate(der) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(3024041, arguments.callee, this, arguments);
                            arguments = J$.N(3024049, 'arguments', arguments, true, false, false);
                            der = J$.N(3024057, 'der', der, true, false, false);
                            J$.N(3024065, 'version', version, false, false, false);
                            J$.N(3024073, 'd', d, false, false, false);
                            J$.N(3024081, 'curve', curve, false, false, false);
                            J$.N(3024089, 'Q', Q, false, false, false);
                            J$.N(3024097, 'key', key, false, false, false);
                            var version = J$.W(3023577, 'version', J$.F(3023569, J$.R(3023545, 'readMPInt', readMPInt, false, true), false)(J$.R(3023553, 'der', der, false, false), J$.T(3023561, 'version', 21, false)), version, false, false);
                            J$.M(3023625, J$.R(3023585, 'assert', assert, false, true), 'strictEqual', false)(J$.M(3023609, J$.R(3023593, 'version', version, false, false), 'readUInt8', false)(J$.T(3023601, 0, 22, false)), J$.T(3023617, 1, 22, false));
                            var d = J$.W(3023681, 'd', J$.M(3023673, J$.R(3023633, 'der', der, false, false), 'readString', false)(J$.G(3023657, J$.G(3023649, J$.R(3023641, 'asn1', asn1, false, true), 'Ber'), 'OctetString'), J$.T(3023665, true, 23, false)), d, false, false);
                            J$.M(3023705, J$.R(3023689, 'der', der, false, false), 'readSequence', false)(J$.T(3023697, 160, 22, false));
                            var curve = J$.W(3023737, 'curve', J$.F(3023729, J$.R(3023713, 'readECDSACurve', readECDSACurve, false, true), false)(J$.R(3023721, 'der', der, false, false)), curve, false, false);
                            J$.M(3023769, J$.R(3023745, 'assert', assert, false, true), 'string', false)(J$.R(3023753, 'curve', curve, false, false), J$.T(3023761, 'a known elliptic curve', 21, false));
                            J$.M(3023793, J$.R(3023777, 'der', der, false, false), 'readSequence', false)(J$.T(3023785, 161, 22, false));
                            var Q = J$.W(3023849, 'Q', J$.M(3023841, J$.R(3023801, 'der', der, false, false), 'readString', false)(J$.G(3023825, J$.G(3023817, J$.R(3023809, 'asn1', asn1, false, true), 'Ber'), 'BitString'), J$.T(3023833, true, 23, false)), Q, false, false);
                            Q = J$.W(3023881, 'Q', J$.M(3023873, J$.R(3023857, 'utils', utils, false, true), 'ecNormalize', false)(J$.R(3023865, 'Q', Q, false, false)), Q, false, false);
                            var key = J$.W(3024001, 'key', J$.T(3023993, {
                                type: J$.T(3023889, 'ecdsa', 21, false),
                                parts: J$.T(3023985, [
                                    J$.T(3023929, {
                                        name: J$.T(3023897, 'curve', 21, false),
                                        data: J$.M(3023921, J$.R(3023905, 'Buffer', Buffer, false, true), 'from', false)(J$.R(3023913, 'curve', curve, false, false))
                                    }, 11, false),
                                    J$.T(3023953, {
                                        name: J$.T(3023937, 'Q', 21, false),
                                        data: J$.R(3023945, 'Q', Q, false, false)
                                    }, 11, false),
                                    J$.T(3023977, {
                                        name: J$.T(3023961, 'd', 21, false),
                                        data: J$.R(3023969, 'd', d, false, false)
                                    }, 11, false)
                                ], 10, false)
                            }, 11, false), key, false, false);
                            return J$.Rt(3024033, J$.F(3024025, J$.R(3024009, 'PrivateKey', PrivateKey, false, true), true)(J$.R(3024017, 'key', key, false, false)));
                        } catch (J$e) {
                            J$.Ex(3028297, J$e);
                        } finally {
                            if (J$.Fr(3028305))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1(der, key) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(3024577, arguments.callee, this, arguments);
                            arguments = J$.N(3024585, 'arguments', arguments, true, false, false);
                            der = J$.N(3024593, 'der', der, true, false, false);
                            key = J$.N(3024601, 'key', key, true, false, false);
                            J$.M(3024113, J$.R(3024105, 'der', der, false, false), 'startSequence', false)();
                            switch (J$.C1(171688, J$.G(3024129, J$.R(3024121, 'key', key, false, false), 'type'))) {
                            case J$.C2(171696, J$.T(3024225, 'rsa', 21, false)):
                                if (J$.C(171656, J$.M(3024153, J$.R(3024137, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3024145, 'key', key, false, false))))
                                    J$.F(3024185, J$.R(3024161, 'writePkcs1RSAPrivate', writePkcs1RSAPrivate, false, true), false)(J$.R(3024169, 'der', der, false, false), J$.R(3024177, 'key', key, false, false));
                                else
                                    J$.F(3024217, J$.R(3024193, 'writePkcs1RSAPublic', writePkcs1RSAPublic, false, true), false)(J$.R(3024201, 'der', der, false, false), J$.R(3024209, 'key', key, false, false));
                                break;
                            case J$.C2(171704, J$.T(3024321, 'dsa', 21, false)):
                                if (J$.C(171664, J$.M(3024249, J$.R(3024233, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3024241, 'key', key, false, false))))
                                    J$.F(3024281, J$.R(3024257, 'writePkcs1DSAPrivate', writePkcs1DSAPrivate, false, true), false)(J$.R(3024265, 'der', der, false, false), J$.R(3024273, 'key', key, false, false));
                                else
                                    J$.F(3024313, J$.R(3024289, 'writePkcs1DSAPublic', writePkcs1DSAPublic, false, true), false)(J$.R(3024297, 'der', der, false, false), J$.R(3024305, 'key', key, false, false));
                                break;
                            case J$.C2(171712, J$.T(3024417, 'ecdsa', 21, false)):
                                if (J$.C(171672, J$.M(3024345, J$.R(3024329, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3024337, 'key', key, false, false))))
                                    J$.F(3024377, J$.R(3024353, 'writePkcs1ECDSAPrivate', writePkcs1ECDSAPrivate, false, true), false)(J$.R(3024361, 'der', der, false, false), J$.R(3024369, 'key', key, false, false));
                                else
                                    J$.F(3024409, J$.R(3024385, 'writePkcs1ECDSAPublic', writePkcs1ECDSAPublic, false, true), false)(J$.R(3024393, 'der', der, false, false), J$.R(3024401, 'key', key, false, false));
                                break;
                            case J$.C2(171720, J$.T(3024513, 'ed25519', 21, false)):
                                if (J$.C(171680, J$.M(3024441, J$.R(3024425, 'PrivateKey', PrivateKey, false, true), 'isPrivateKey', false)(J$.R(3024433, 'key', key, false, false))))
                                    J$.F(3024473, J$.R(3024449, 'writePkcs1EdDSAPrivate', writePkcs1EdDSAPrivate, false, true), false)(J$.R(3024457, 'der', der, false, false), J$.R(3024465, 'key', key, false, false));
                                else
                                    J$.F(3024505, J$.R(3024481, 'writePkcs1EdDSAPublic', writePkcs1EdDSAPublic, false, true), false)(J$.R(3024489, 'der', der, false, false), J$.R(3024497, 'key', key, false, false));
                                break;
                            default:
                                throw J$.F(3024553, J$.I(typeof Error === 'undefined' ? Error = J$.R(3024521, 'Error', undefined, true, true) : Error = J$.R(3024521, 'Error', Error, true, true)), true)(J$.B(317970, '+', J$.T(3024529, 'Unknown key algo: ', 21, false), J$.G(3024545, J$.R(3024537, 'key', key, false, false), 'type')));
                            }
                            J$.M(3024569, J$.R(3024561, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3028313, J$e);
                        } finally {
                            if (J$.Fr(3028321))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPublic(der, key) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(3024753, arguments.callee, this, arguments);
                            arguments = J$.N(3024761, 'arguments', arguments, true, false, false);
                            der = J$.N(3024769, 'der', der, true, false, false);
                            key = J$.N(3024777, 'key', key, true, false, false);
                            J$.M(3024673, J$.R(3024609, 'der', der, false, false), 'writeBuffer', false)(J$.G(3024641, J$.G(3024633, J$.G(3024625, J$.R(3024617, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(3024665, J$.G(3024657, J$.R(3024649, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3024745, J$.R(3024681, 'der', der, false, false), 'writeBuffer', false)(J$.G(3024713, J$.G(3024705, J$.G(3024697, J$.R(3024689, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(3024737, J$.G(3024729, J$.R(3024721, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3028329, J$e);
                        } finally {
                            if (J$.Fr(3028337))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1RSAPrivate(der, key) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(3025521, arguments.callee, this, arguments);
                            arguments = J$.N(3025529, 'arguments', arguments, true, false, false);
                            der = J$.N(3025537, 'der', der, true, false, false);
                            key = J$.N(3025545, 'key', key, true, false, false);
                            J$.N(3025553, 'ver', ver, false, false, false);
                            var ver = J$.W(3024817, 'ver', J$.M(3024809, J$.R(3024785, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3024801, [J$.T(3024793, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(3024865, J$.R(3024825, 'der', der, false, false), 'writeBuffer', false)(J$.R(3024833, 'ver', ver, false, false), J$.G(3024857, J$.G(3024849, J$.R(3024841, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3024937, J$.R(3024873, 'der', der, false, false), 'writeBuffer', false)(J$.G(3024905, J$.G(3024897, J$.G(3024889, J$.R(3024881, 'key', key, false, false), 'part'), 'n'), 'data'), J$.G(3024929, J$.G(3024921, J$.R(3024913, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025009, J$.R(3024945, 'der', der, false, false), 'writeBuffer', false)(J$.G(3024977, J$.G(3024969, J$.G(3024961, J$.R(3024953, 'key', key, false, false), 'part'), 'e'), 'data'), J$.G(3025001, J$.G(3024993, J$.R(3024985, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025081, J$.R(3025017, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025049, J$.G(3025041, J$.G(3025033, J$.R(3025025, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(3025073, J$.G(3025065, J$.R(3025057, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025153, J$.R(3025089, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025121, J$.G(3025113, J$.G(3025105, J$.R(3025097, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3025145, J$.G(3025137, J$.R(3025129, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025225, J$.R(3025161, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025193, J$.G(3025185, J$.G(3025177, J$.R(3025169, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3025217, J$.G(3025209, J$.R(3025201, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            if (J$.C(171736, J$.C(171728, J$.U(317978, '!', J$.G(3025249, J$.G(3025241, J$.R(3025233, 'key', key, false, false), 'part'), 'dmodp'))) ? J$._() : J$.U(317986, '!', J$.G(3025273, J$.G(3025265, J$.R(3025257, 'key', key, false, false), 'part'), 'dmodq'))))
                                J$.M(3025297, J$.R(3025281, 'utils', utils, false, true), 'addRSAMissing', false)(J$.R(3025289, 'key', key, false, false));
                            J$.M(3025369, J$.R(3025305, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025337, J$.G(3025329, J$.G(3025321, J$.R(3025313, 'key', key, false, false), 'part'), 'dmodp'), 'data'), J$.G(3025361, J$.G(3025353, J$.R(3025345, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025441, J$.R(3025377, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025409, J$.G(3025401, J$.G(3025393, J$.R(3025385, 'key', key, false, false), 'part'), 'dmodq'), 'data'), J$.G(3025433, J$.G(3025425, J$.R(3025417, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025513, J$.R(3025449, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025481, J$.G(3025473, J$.G(3025465, J$.R(3025457, 'key', key, false, false), 'part'), 'iqmp'), 'data'), J$.G(3025505, J$.G(3025497, J$.R(3025489, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3028345, J$e);
                        } finally {
                            if (J$.Fr(3028353))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPrivate(der, key) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(3026009, arguments.callee, this, arguments);
                            arguments = J$.N(3026017, 'arguments', arguments, true, false, false);
                            der = J$.N(3026025, 'der', der, true, false, false);
                            key = J$.N(3026033, 'key', key, true, false, false);
                            J$.N(3026041, 'ver', ver, false, false, false);
                            var ver = J$.W(3025593, 'ver', J$.M(3025585, J$.R(3025561, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3025577, [J$.T(3025569, 0, 22, false)], 10, false)), ver, false, false);
                            J$.M(3025641, J$.R(3025601, 'der', der, false, false), 'writeBuffer', false)(J$.R(3025609, 'ver', ver, false, false), J$.G(3025633, J$.G(3025625, J$.R(3025617, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025713, J$.R(3025649, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025681, J$.G(3025673, J$.G(3025665, J$.R(3025657, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3025705, J$.G(3025697, J$.R(3025689, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025785, J$.R(3025721, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025753, J$.G(3025745, J$.G(3025737, J$.R(3025729, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3025777, J$.G(3025769, J$.R(3025761, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025857, J$.R(3025793, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025825, J$.G(3025817, J$.G(3025809, J$.R(3025801, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(3025849, J$.G(3025841, J$.R(3025833, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3025929, J$.R(3025865, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025897, J$.G(3025889, J$.G(3025881, J$.R(3025873, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(3025921, J$.G(3025913, J$.R(3025905, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3026001, J$.R(3025937, 'der', der, false, false), 'writeBuffer', false)(J$.G(3025969, J$.G(3025961, J$.G(3025953, J$.R(3025945, 'key', key, false, false), 'part'), 'x'), 'data'), J$.G(3025993, J$.G(3025985, J$.R(3025977, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3028361, J$e);
                        } finally {
                            if (J$.Fr(3028369))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1DSAPublic(der, key) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(3026337, arguments.callee, this, arguments);
                            arguments = J$.N(3026345, 'arguments', arguments, true, false, false);
                            der = J$.N(3026353, 'der', der, true, false, false);
                            key = J$.N(3026361, 'key', key, true, false, false);
                            J$.M(3026113, J$.R(3026049, 'der', der, false, false), 'writeBuffer', false)(J$.G(3026081, J$.G(3026073, J$.G(3026065, J$.R(3026057, 'key', key, false, false), 'part'), 'y'), 'data'), J$.G(3026105, J$.G(3026097, J$.R(3026089, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3026185, J$.R(3026121, 'der', der, false, false), 'writeBuffer', false)(J$.G(3026153, J$.G(3026145, J$.G(3026137, J$.R(3026129, 'key', key, false, false), 'part'), 'p'), 'data'), J$.G(3026177, J$.G(3026169, J$.R(3026161, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3026257, J$.R(3026193, 'der', der, false, false), 'writeBuffer', false)(J$.G(3026225, J$.G(3026217, J$.G(3026209, J$.R(3026201, 'key', key, false, false), 'part'), 'q'), 'data'), J$.G(3026249, J$.G(3026241, J$.R(3026233, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3026329, J$.R(3026265, 'der', der, false, false), 'writeBuffer', false)(J$.G(3026297, J$.G(3026289, J$.G(3026281, J$.R(3026273, 'key', key, false, false), 'part'), 'g'), 'data'), J$.G(3026321, J$.G(3026313, J$.R(3026305, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                        } catch (J$e) {
                            J$.Ex(3028377, J$e);
                        } finally {
                            if (J$.Fr(3028385))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPublic(der, key) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(3026689, arguments.callee, this, arguments);
                            arguments = J$.N(3026697, 'arguments', arguments, true, false, false);
                            der = J$.N(3026705, 'der', der, true, false, false);
                            key = J$.N(3026713, 'key', key, true, false, false);
                            J$.N(3026721, 'curve', curve, false, false, false);
                            J$.N(3026729, 'curveOid', curveOid, false, false, false);
                            J$.N(3026737, 'Q', Q, false, false, false);
                            J$.M(3026377, J$.R(3026369, 'der', der, false, false), 'startSequence', false)();
                            J$.M(3026401, J$.R(3026385, 'der', der, false, false), 'writeOID', false)(J$.T(3026393, '1.2.840.10045.2.1', 21, false));
                            var curve = J$.W(3026449, 'curve', J$.M(3026441, J$.G(3026433, J$.G(3026425, J$.G(3026417, J$.R(3026409, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(3026497, 'curveOid', J$.G(3026489, J$.G(3026481, J$.G(3026465, J$.R(3026457, 'algs', algs, false, true), 'curves'), J$.R(3026473, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(3026529, J$.R(3026505, 'assert', assert, false, true), 'string', false)(J$.R(3026513, 'curveOid', curveOid, false, false), J$.T(3026521, 'a known ECDSA named curve', 21, false));
                            J$.M(3026553, J$.R(3026537, 'der', der, false, false), 'writeOID', false)(J$.R(3026545, 'curveOid', curveOid, false, false));
                            J$.M(3026569, J$.R(3026561, 'der', der, false, false), 'endSequence', false)();
                            var Q = J$.W(3026633, 'Q', J$.M(3026625, J$.R(3026577, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(3026609, J$.G(3026601, J$.G(3026593, J$.R(3026585, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(3026617, true, 23, false)), Q, false, false);
                            J$.M(3026681, J$.R(3026641, 'der', der, false, false), 'writeBuffer', false)(J$.R(3026649, 'Q', Q, false, false), J$.G(3026673, J$.G(3026665, J$.R(3026657, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                        } catch (J$e) {
                            J$.Ex(3028393, J$e);
                        } finally {
                            if (J$.Fr(3028401))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1ECDSAPrivate(der, key) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(3027249, arguments.callee, this, arguments);
                            arguments = J$.N(3027257, 'arguments', arguments, true, false, false);
                            der = J$.N(3027265, 'der', der, true, false, false);
                            key = J$.N(3027273, 'key', key, true, false, false);
                            J$.N(3027281, 'ver', ver, false, false, false);
                            J$.N(3027289, 'curve', curve, false, false, false);
                            J$.N(3027297, 'curveOid', curveOid, false, false, false);
                            J$.N(3027305, 'Q', Q, false, false, false);
                            var ver = J$.W(3026777, 'ver', J$.M(3026769, J$.R(3026745, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3026761, [J$.T(3026753, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(3026825, J$.R(3026785, 'der', der, false, false), 'writeBuffer', false)(J$.R(3026793, 'ver', ver, false, false), J$.G(3026817, J$.G(3026809, J$.R(3026801, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3026897, J$.R(3026833, 'der', der, false, false), 'writeBuffer', false)(J$.G(3026865, J$.G(3026857, J$.G(3026849, J$.R(3026841, 'key', key, false, false), 'part'), 'd'), 'data'), J$.G(3026889, J$.G(3026881, J$.R(3026873, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(3026921, J$.R(3026905, 'der', der, false, false), 'startSequence', false)(J$.T(3026913, 160, 22, false));
                            var curve = J$.W(3026969, 'curve', J$.M(3026961, J$.G(3026953, J$.G(3026945, J$.G(3026937, J$.R(3026929, 'key', key, false, false), 'part'), 'curve'), 'data'), 'toString', false)(), curve, false, false);
                            var curveOid = J$.W(3027017, 'curveOid', J$.G(3027009, J$.G(3027001, J$.G(3026985, J$.R(3026977, 'algs', algs, false, true), 'curves'), J$.R(3026993, 'curve', curve, false, false)), 'pkcs8oid'), curveOid, false, false);
                            J$.M(3027049, J$.R(3027025, 'assert', assert, false, true), 'string', false)(J$.R(3027033, 'curveOid', curveOid, false, false), J$.T(3027041, 'a known ECDSA named curve', 21, false));
                            J$.M(3027073, J$.R(3027057, 'der', der, false, false), 'writeOID', false)(J$.R(3027065, 'curveOid', curveOid, false, false));
                            J$.M(3027089, J$.R(3027081, 'der', der, false, false), 'endSequence', false)();
                            J$.M(3027113, J$.R(3027097, 'der', der, false, false), 'startSequence', false)(J$.T(3027105, 161, 22, false));
                            var Q = J$.W(3027177, 'Q', J$.M(3027169, J$.R(3027121, 'utils', utils, false, true), 'ecNormalize', false)(J$.G(3027153, J$.G(3027145, J$.G(3027137, J$.R(3027129, 'key', key, false, false), 'part'), 'Q'), 'data'), J$.T(3027161, true, 23, false)), Q, false, false);
                            J$.M(3027225, J$.R(3027185, 'der', der, false, false), 'writeBuffer', false)(J$.R(3027193, 'Q', Q, false, false), J$.G(3027217, J$.G(3027209, J$.R(3027201, 'asn1', asn1, false, true), 'Ber'), 'BitString'));
                            J$.M(3027241, J$.R(3027233, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3028409, J$e);
                        } finally {
                            if (J$.Fr(3028417))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPrivate(der, key) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(3027633, arguments.callee, this, arguments);
                            arguments = J$.N(3027641, 'arguments', arguments, true, false, false);
                            der = J$.N(3027649, 'der', der, true, false, false);
                            key = J$.N(3027657, 'key', key, true, false, false);
                            J$.N(3027665, 'ver', ver, false, false, false);
                            var ver = J$.W(3027345, 'ver', J$.M(3027337, J$.R(3027313, 'Buffer', Buffer, false, true), 'from', false)(J$.T(3027329, [J$.T(3027321, 1, 22, false)], 10, false)), ver, false, false);
                            J$.M(3027393, J$.R(3027353, 'der', der, false, false), 'writeBuffer', false)(J$.R(3027361, 'ver', ver, false, false), J$.G(3027385, J$.G(3027377, J$.R(3027369, 'asn1', asn1, false, true), 'Ber'), 'Integer'));
                            J$.M(3027465, J$.R(3027401, 'der', der, false, false), 'writeBuffer', false)(J$.G(3027433, J$.G(3027425, J$.G(3027417, J$.R(3027409, 'key', key, false, false), 'part'), 'k'), 'data'), J$.G(3027457, J$.G(3027449, J$.R(3027441, 'asn1', asn1, false, true), 'Ber'), 'OctetString'));
                            J$.M(3027489, J$.R(3027473, 'der', der, false, false), 'startSequence', false)(J$.T(3027481, 160, 22, false));
                            J$.M(3027513, J$.R(3027497, 'der', der, false, false), 'writeOID', false)(J$.T(3027505, '1.3.101.112', 21, false));
                            J$.M(3027529, J$.R(3027521, 'der', der, false, false), 'endSequence', false)();
                            J$.M(3027553, J$.R(3027537, 'der', der, false, false), 'startSequence', false)(J$.T(3027545, 161, 22, false));
                            J$.M(3027609, J$.R(3027561, 'utils', utils, false, true), 'writeBitString', false)(J$.R(3027569, 'der', der, false, false), J$.G(3027601, J$.G(3027593, J$.G(3027585, J$.R(3027577, 'key', key, false, false), 'part'), 'A'), 'data'));
                            J$.M(3027625, J$.R(3027617, 'der', der, false, false), 'endSequence', false)();
                        } catch (J$e) {
                            J$.Ex(3028425, J$e);
                        } finally {
                            if (J$.Fr(3028433))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function writePkcs1EdDSAPublic(der, key) {
                jalangiLabel19:
                    while (true) {
                        try {
                            J$.Fe(3027697, arguments.callee, this, arguments);
                            arguments = J$.N(3027705, 'arguments', arguments, true, false, false);
                            der = J$.N(3027713, 'der', der, true, false, false);
                            key = J$.N(3027721, 'key', key, true, false, false);
                            throw J$.F(3027689, J$.I(typeof Error === 'undefined' ? Error = J$.R(3027673, 'Error', undefined, true, true) : Error = J$.R(3027673, 'Error', Error, true, true)), true)(J$.T(3027681, 'Public keys are not supported for EdDSA PKCS#1', 21, false));
                        } catch (J$e) {
                            J$.Ex(3028441, J$e);
                        } finally {
                            if (J$.Fr(3028449))
                                continue jalangiLabel19;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3027737, 'assert', assert, false, false, false);
            J$.N(3027745, 'asn1', asn1, false, false, false);
            J$.N(3027753, 'Buffer', Buffer, false, false, false);
            J$.N(3027761, 'algs', algs, false, false, false);
            J$.N(3027769, 'utils', utils, false, false, false);
            J$.N(3027777, 'Key', Key, false, false, false);
            J$.N(3027785, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3027793, 'pem', pem, false, false, false);
            J$.N(3027801, 'pkcs8', pkcs8, false, false, false);
            J$.N(3027809, 'readECDSACurve', readECDSACurve, false, false, false);
            read = J$.N(3027825, 'read', J$.T(3027817, read, 12, false), true, false, false);
            write = J$.N(3027841, 'write', J$.T(3027833, write, 12, false), true, false, false);
            readMPInt = J$.N(3027857, 'readMPInt', J$.T(3027849, readMPInt, 12, false), true, false, false);
            readPkcs1 = J$.N(3027873, 'readPkcs1', J$.T(3027865, readPkcs1, 12, false), true, false, false);
            readPkcs1RSAPublic = J$.N(3027889, 'readPkcs1RSAPublic', J$.T(3027881, readPkcs1RSAPublic, 12, false), true, false, false);
            readPkcs1RSAPrivate = J$.N(3027905, 'readPkcs1RSAPrivate', J$.T(3027897, readPkcs1RSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPrivate = J$.N(3027921, 'readPkcs1DSAPrivate', J$.T(3027913, readPkcs1DSAPrivate, 12, false), true, false, false);
            readPkcs1EdDSAPrivate = J$.N(3027937, 'readPkcs1EdDSAPrivate', J$.T(3027929, readPkcs1EdDSAPrivate, 12, false), true, false, false);
            readPkcs1DSAPublic = J$.N(3027953, 'readPkcs1DSAPublic', J$.T(3027945, readPkcs1DSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPublic = J$.N(3027969, 'readPkcs1ECDSAPublic', J$.T(3027961, readPkcs1ECDSAPublic, 12, false), true, false, false);
            readPkcs1ECDSAPrivate = J$.N(3027985, 'readPkcs1ECDSAPrivate', J$.T(3027977, readPkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1 = J$.N(3028001, 'writePkcs1', J$.T(3027993, writePkcs1, 12, false), true, false, false);
            writePkcs1RSAPublic = J$.N(3028017, 'writePkcs1RSAPublic', J$.T(3028009, writePkcs1RSAPublic, 12, false), true, false, false);
            writePkcs1RSAPrivate = J$.N(3028033, 'writePkcs1RSAPrivate', J$.T(3028025, writePkcs1RSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPrivate = J$.N(3028049, 'writePkcs1DSAPrivate', J$.T(3028041, writePkcs1DSAPrivate, 12, false), true, false, false);
            writePkcs1DSAPublic = J$.N(3028065, 'writePkcs1DSAPublic', J$.T(3028057, writePkcs1DSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPublic = J$.N(3028081, 'writePkcs1ECDSAPublic', J$.T(3028073, writePkcs1ECDSAPublic, 12, false), true, false, false);
            writePkcs1ECDSAPrivate = J$.N(3028097, 'writePkcs1ECDSAPrivate', J$.T(3028089, writePkcs1ECDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPrivate = J$.N(3028113, 'writePkcs1EdDSAPrivate', J$.T(3028105, writePkcs1EdDSAPrivate, 12, false), true, false, false);
            writePkcs1EdDSAPublic = J$.N(3028129, 'writePkcs1EdDSAPublic', J$.T(3028121, writePkcs1EdDSAPublic, 12, false), true, false, false);
            J$.T(3018761, 'use strict', 21, false);
            J$.F(3018785, J$.I(typeof require === 'undefined' ? require = J$.R(3018769, 'require', undefined, true, true) : require = J$.R(3018769, 'require', require, true, true)), false)(J$.T(3018777, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3018809, J$.I(typeof require === 'undefined' ? require = J$.R(3018793, 'require', undefined, true, true) : require = J$.R(3018793, 'require', require, true, true)), false)(J$.T(3018801, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3018833, J$.I(typeof require === 'undefined' ? require = J$.R(3018817, 'require', undefined, true, true) : require = J$.R(3018817, 'require', require, true, true)), false)(J$.T(3018825, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3018857, J$.I(typeof require === 'undefined' ? require = J$.R(3018841, 'require', undefined, true, true) : require = J$.R(3018841, 'require', require, true, true)), false)(J$.T(3018849, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3018881, J$.I(typeof require === 'undefined' ? require = J$.R(3018865, 'require', undefined, true, true) : require = J$.R(3018865, 'require', require, true, true)), false)(J$.T(3018873, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3018905, J$.I(typeof require === 'undefined' ? require = J$.R(3018889, 'require', undefined, true, true) : require = J$.R(3018889, 'require', require, true, true)), false)(J$.T(3018897, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3018929, J$.I(typeof require === 'undefined' ? require = J$.R(3018913, 'require', undefined, true, true) : require = J$.R(3018913, 'require', require, true, true)), false)(J$.T(3018921, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3018953, J$.I(typeof require === 'undefined' ? require = J$.R(3018937, 'require', undefined, true, true) : require = J$.R(3018937, 'require', require, true, true)), false)(J$.T(3018945, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3018977, J$.I(typeof require === 'undefined' ? require = J$.R(3018961, 'require', undefined, true, true) : require = J$.R(3018961, 'require', require, true, true)), false)(J$.T(3018969, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3019001, J$.I(typeof require === 'undefined' ? require = J$.R(3018985, 'require', undefined, true, true) : require = J$.R(3018985, 'require', require, true, true)), false)(J$.T(3018993, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3019025, J$.I(typeof require === 'undefined' ? require = J$.R(3019009, 'require', undefined, true, true) : require = J$.R(3019009, 'require', require, true, true)), false)(J$.T(3019017, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3019049, J$.I(typeof require === 'undefined' ? require = J$.R(3019033, 'require', undefined, true, true) : require = J$.R(3019033, 'require', require, true, true)), false)(J$.T(3019041, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.F(3019073, J$.I(typeof require === 'undefined' ? require = J$.R(3019057, 'require', undefined, true, true) : require = J$.R(3019057, 'require', require, true, true)), false)(J$.T(3019065, 'core-js/modules/es.date.to-string', 21, false));
            J$.F(3019097, J$.I(typeof require === 'undefined' ? require = J$.R(3019081, 'require', undefined, true, true) : require = J$.R(3019081, 'require', require, true, true)), false)(J$.T(3019089, 'core-js/modules/es.object.keys', 21, false));
            J$.F(3019121, J$.I(typeof require === 'undefined' ? require = J$.R(3019105, 'require', undefined, true, true) : require = J$.R(3019105, 'require', require, true, true)), false)(J$.T(3019113, 'core-js/modules/es.object.to-string', 21, false));
            J$.F(3019145, J$.I(typeof require === 'undefined' ? require = J$.R(3019129, 'require', undefined, true, true) : require = J$.R(3019129, 'require', require, true, true)), false)(J$.T(3019137, 'core-js/modules/es.regexp.to-string', 21, false));
            J$.P(3019201, J$.I(typeof module === 'undefined' ? module = J$.R(3019153, 'module', undefined, true, true) : module = J$.R(3019153, 'module', module, true, true)), 'exports', J$.T(3019193, {
                read: J$.R(3019161, 'read', read, false, true),
                readPkcs1: J$.R(3019169, 'readPkcs1', readPkcs1, false, true),
                write: J$.R(3019177, 'write', write, false, true),
                writePkcs1: J$.R(3019185, 'writePkcs1', writePkcs1, false, true)
            }, 11, false));
            var assert = J$.W(3019233, 'assert', J$.F(3019225, J$.I(typeof require === 'undefined' ? require = J$.R(3019209, 'require', undefined, true, true) : require = J$.R(3019209, 'require', require, true, true)), false)(J$.T(3019217, 'assert-plus', 21, false)), assert, false, true);
            var asn1 = J$.W(3019265, 'asn1', J$.F(3019257, J$.I(typeof require === 'undefined' ? require = J$.R(3019241, 'require', undefined, true, true) : require = J$.R(3019241, 'require', require, true, true)), false)(J$.T(3019249, 'asn1', 21, false)), asn1, false, true);
            var Buffer = J$.W(3019305, 'Buffer', J$.G(3019297, J$.F(3019289, J$.I(typeof require === 'undefined' ? require = J$.R(3019273, 'require', undefined, true, true) : require = J$.R(3019273, 'require', require, true, true)), false)(J$.T(3019281, 'safer-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var algs = J$.W(3019337, 'algs', J$.F(3019329, J$.I(typeof require === 'undefined' ? require = J$.R(3019313, 'require', undefined, true, true) : require = J$.R(3019313, 'require', require, true, true)), false)(J$.T(3019321, '../algs', 21, false)), algs, false, true);
            var utils = J$.W(3019369, 'utils', J$.F(3019361, J$.I(typeof require === 'undefined' ? require = J$.R(3019345, 'require', undefined, true, true) : require = J$.R(3019345, 'require', require, true, true)), false)(J$.T(3019353, '../utils', 21, false)), utils, false, true);
            var Key = J$.W(3019401, 'Key', J$.F(3019393, J$.I(typeof require === 'undefined' ? require = J$.R(3019377, 'require', undefined, true, true) : require = J$.R(3019377, 'require', require, true, true)), false)(J$.T(3019385, '../key', 21, false)), Key, false, true);
            var PrivateKey = J$.W(3019433, 'PrivateKey', J$.F(3019425, J$.I(typeof require === 'undefined' ? require = J$.R(3019409, 'require', undefined, true, true) : require = J$.R(3019409, 'require', require, true, true)), false)(J$.T(3019417, '../private-key', 21, false)), PrivateKey, false, true);
            var pem = J$.W(3019465, 'pem', J$.F(3019457, J$.I(typeof require === 'undefined' ? require = J$.R(3019441, 'require', undefined, true, true) : require = J$.R(3019441, 'require', require, true, true)), false)(J$.T(3019449, './pem', 21, false)), pem, false, true);
            var pkcs8 = J$.W(3019497, 'pkcs8', J$.F(3019489, J$.I(typeof require === 'undefined' ? require = J$.R(3019473, 'require', undefined, true, true) : require = J$.R(3019473, 'require', require, true, true)), false)(J$.T(3019481, './pkcs8', 21, false)), pkcs8, false, true);
            var readECDSACurve = J$.W(3019521, 'readECDSACurve', J$.G(3019513, J$.R(3019505, 'pkcs8', pkcs8, false, true), 'readECDSACurve'), readECDSACurve, false, true);
        } catch (J$e) {
            J$.Ex(3028457, J$e);
        } finally {
            if (J$.Sr(3028465))
                continue jalangiLabel20;
            else
                break jalangiLabel20;
        }
    }
// JALANGI DO NOT INSTRUMENT

