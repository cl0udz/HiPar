J$.noInstrEval = false;
jalangiLabel6:
    while (true) {
        try {
            J$.Se(2982713, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/sshpk/lib/errors.js');
            function FingerprintFormatError(fp, format) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(2981265, arguments.callee, this, arguments);
                            arguments = J$.N(2981273, 'arguments', arguments, true, false, false);
                            fp = J$.N(2981281, 'fp', fp, true, false, false);
                            format = J$.N(2981289, 'format', format, true, false, false);
                            if (J$.C(169808, J$.G(2981033, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981025, 'Error', undefined, true, true) : Error = J$.R(2981025, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2981065, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981041, 'Error', undefined, true, true) : Error = J$.R(2981041, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2981049, 'this', this, false, false), J$.R(2981057, 'FingerprintFormatError', FingerprintFormatError, false, true));
                            J$.P(2981089, J$.R(2981073, 'this', this, false, false), 'name', J$.T(2981081, 'FingerprintFormatError', 21, false));
                            J$.P(2981113, J$.R(2981097, 'this', this, false, false), 'fingerprint', J$.R(2981105, 'fp', fp, false, false));
                            J$.P(2981137, J$.R(2981121, 'this', this, false, false), 'format', J$.R(2981129, 'format', format, false, false));
                            J$.P(2981161, J$.R(2981145, 'this', this, false, false), 'message', J$.T(2981153, 'Fingerprint format is not supported, or is invalid: ', 21, false));
                            if (J$.C(169816, J$.B(315082, '!==', J$.R(2981169, 'fp', fp, false, false), J$.T(2981177, undefined, 24, false))))
                                J$.A(2981209, J$.R(2981185, 'this', this, false, false), 'message', '+')(J$.B(315090, '+', J$.T(2981193, ' fingerprint = ', 21, false), J$.R(2981201, 'fp', fp, false, false)));
                            if (J$.C(169824, J$.B(315098, '!==', J$.R(2981217, 'format', format, false, false), J$.T(2981225, undefined, 24, false))))
                                J$.A(2981257, J$.R(2981233, 'this', this, false, false), 'message', '+')(J$.B(315106, '+', J$.T(2981241, ' format = ', 21, false), J$.R(2981249, 'format', format, false, false)));
                        } catch (J$e) {
                            J$.Ex(2982833, J$e);
                        } finally {
                            if (J$.Fr(2982841))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function InvalidAlgorithmError(alg) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(2981465, arguments.callee, this, arguments);
                            arguments = J$.N(2981473, 'arguments', arguments, true, false, false);
                            alg = J$.N(2981481, 'alg', alg, true, false, false);
                            if (J$.C(169832, J$.G(2981337, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981329, 'Error', undefined, true, true) : Error = J$.R(2981329, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2981369, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981345, 'Error', undefined, true, true) : Error = J$.R(2981345, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2981353, 'this', this, false, false), J$.R(2981361, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true));
                            J$.P(2981393, J$.R(2981377, 'this', this, false, false), 'name', J$.T(2981385, 'InvalidAlgorithmError', 21, false));
                            J$.P(2981417, J$.R(2981401, 'this', this, false, false), 'algorithm', J$.R(2981409, 'alg', alg, false, false));
                            J$.P(2981457, J$.R(2981425, 'this', this, false, false), 'message', J$.B(315122, '+', J$.B(315114, '+', J$.T(2981433, 'Algorithm "', 21, false), J$.R(2981441, 'alg', alg, false, false)), J$.T(2981449, '" is not supported', 21, false)));
                        } catch (J$e) {
                            J$.Ex(2982849, J$e);
                        } finally {
                            if (J$.Fr(2982857))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyParseError(name, format, innerErr) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(2981737, arguments.callee, this, arguments);
                            arguments = J$.N(2981745, 'arguments', arguments, true, false, false);
                            name = J$.N(2981753, 'name', name, true, false, false);
                            format = J$.N(2981761, 'format', format, true, false, false);
                            innerErr = J$.N(2981769, 'innerErr', innerErr, true, false, false);
                            if (J$.C(169840, J$.G(2981529, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981521, 'Error', undefined, true, true) : Error = J$.R(2981521, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2981561, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981537, 'Error', undefined, true, true) : Error = J$.R(2981537, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2981545, 'this', this, false, false), J$.R(2981553, 'KeyParseError', KeyParseError, false, true));
                            J$.P(2981585, J$.R(2981569, 'this', this, false, false), 'name', J$.T(2981577, 'KeyParseError', 21, false));
                            J$.P(2981609, J$.R(2981593, 'this', this, false, false), 'format', J$.R(2981601, 'format', format, false, false));
                            J$.P(2981633, J$.R(2981617, 'this', this, false, false), 'keyName', J$.R(2981625, 'name', name, false, false));
                            J$.P(2981657, J$.R(2981641, 'this', this, false, false), 'innerErr', J$.R(2981649, 'innerErr', innerErr, false, false));
                            J$.P(2981729, J$.R(2981665, 'this', this, false, false), 'message', J$.B(315162, '+', J$.B(315154, '+', J$.B(315146, '+', J$.B(315138, '+', J$.B(315130, '+', J$.T(2981673, 'Failed to parse ', 21, false), J$.R(2981681, 'name', name, false, false)), J$.T(2981689, ' as a valid ', 21, false)), J$.R(2981697, 'format', format, false, false)), J$.T(2981705, ' format key: ', 21, false)), J$.G(2981721, J$.R(2981713, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(2982865, J$e);
                        } finally {
                            if (J$.Fr(2982873))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function SignatureParseError(type, format, innerErr) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(2982025, arguments.callee, this, arguments);
                            arguments = J$.N(2982033, 'arguments', arguments, true, false, false);
                            type = J$.N(2982041, 'type', type, true, false, false);
                            format = J$.N(2982049, 'format', format, true, false, false);
                            innerErr = J$.N(2982057, 'innerErr', innerErr, true, false, false);
                            if (J$.C(169848, J$.G(2981817, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981809, 'Error', undefined, true, true) : Error = J$.R(2981809, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2981849, J$.I(typeof Error === 'undefined' ? Error = J$.R(2981825, 'Error', undefined, true, true) : Error = J$.R(2981825, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2981833, 'this', this, false, false), J$.R(2981841, 'SignatureParseError', SignatureParseError, false, true));
                            J$.P(2981873, J$.R(2981857, 'this', this, false, false), 'name', J$.T(2981865, 'SignatureParseError', 21, false));
                            J$.P(2981897, J$.R(2981881, 'this', this, false, false), 'type', J$.R(2981889, 'type', type, false, false));
                            J$.P(2981921, J$.R(2981905, 'this', this, false, false), 'format', J$.R(2981913, 'format', format, false, false));
                            J$.P(2981945, J$.R(2981929, 'this', this, false, false), 'innerErr', J$.R(2981937, 'innerErr', innerErr, false, false));
                            J$.P(2982017, J$.R(2981953, 'this', this, false, false), 'message', J$.B(315202, '+', J$.B(315194, '+', J$.B(315186, '+', J$.B(315178, '+', J$.B(315170, '+', J$.T(2981961, 'Failed to parse the given data as a ', 21, false), J$.R(2981969, 'type', type, false, false)), J$.T(2981977, ' signature in ', 21, false)), J$.R(2981985, 'format', format, false, false)), J$.T(2981993, ' format: ', 21, false)), J$.G(2982009, J$.R(2982001, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(2982881, J$e);
                        } finally {
                            if (J$.Fr(2982889))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function CertificateParseError(name, format, innerErr) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(2982313, arguments.callee, this, arguments);
                            arguments = J$.N(2982321, 'arguments', arguments, true, false, false);
                            name = J$.N(2982329, 'name', name, true, false, false);
                            format = J$.N(2982337, 'format', format, true, false, false);
                            innerErr = J$.N(2982345, 'innerErr', innerErr, true, false, false);
                            if (J$.C(169856, J$.G(2982105, J$.I(typeof Error === 'undefined' ? Error = J$.R(2982097, 'Error', undefined, true, true) : Error = J$.R(2982097, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2982137, J$.I(typeof Error === 'undefined' ? Error = J$.R(2982113, 'Error', undefined, true, true) : Error = J$.R(2982113, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2982121, 'this', this, false, false), J$.R(2982129, 'CertificateParseError', CertificateParseError, false, true));
                            J$.P(2982161, J$.R(2982145, 'this', this, false, false), 'name', J$.T(2982153, 'CertificateParseError', 21, false));
                            J$.P(2982185, J$.R(2982169, 'this', this, false, false), 'format', J$.R(2982177, 'format', format, false, false));
                            J$.P(2982209, J$.R(2982193, 'this', this, false, false), 'certName', J$.R(2982201, 'name', name, false, false));
                            J$.P(2982233, J$.R(2982217, 'this', this, false, false), 'innerErr', J$.R(2982225, 'innerErr', innerErr, false, false));
                            J$.P(2982305, J$.R(2982241, 'this', this, false, false), 'message', J$.B(315242, '+', J$.B(315234, '+', J$.B(315226, '+', J$.B(315218, '+', J$.B(315210, '+', J$.T(2982249, 'Failed to parse ', 21, false), J$.R(2982257, 'name', name, false, false)), J$.T(2982265, ' as a valid ', 21, false)), J$.R(2982273, 'format', format, false, false)), J$.T(2982281, ' format certificate: ', 21, false)), J$.G(2982297, J$.R(2982289, 'innerErr', innerErr, false, false), 'message')));
                        } catch (J$e) {
                            J$.Ex(2982897, J$e);
                        } finally {
                            if (J$.Fr(2982905))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function KeyEncryptedError(name, format) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(2982577, arguments.callee, this, arguments);
                            arguments = J$.N(2982585, 'arguments', arguments, true, false, false);
                            name = J$.N(2982593, 'name', name, true, false, false);
                            format = J$.N(2982601, 'format', format, true, false, false);
                            if (J$.C(169864, J$.G(2982393, J$.I(typeof Error === 'undefined' ? Error = J$.R(2982385, 'Error', undefined, true, true) : Error = J$.R(2982385, 'Error', Error, true, true)), 'captureStackTrace')))
                                J$.M(2982425, J$.I(typeof Error === 'undefined' ? Error = J$.R(2982401, 'Error', undefined, true, true) : Error = J$.R(2982401, 'Error', Error, true, true)), 'captureStackTrace', false)(J$.R(2982409, 'this', this, false, false), J$.R(2982417, 'KeyEncryptedError', KeyEncryptedError, false, true));
                            J$.P(2982449, J$.R(2982433, 'this', this, false, false), 'name', J$.T(2982441, 'KeyEncryptedError', 21, false));
                            J$.P(2982473, J$.R(2982457, 'this', this, false, false), 'format', J$.R(2982465, 'format', format, false, false));
                            J$.P(2982497, J$.R(2982481, 'this', this, false, false), 'keyName', J$.R(2982489, 'name', name, false, false));
                            J$.P(2982569, J$.R(2982505, 'this', this, false, false), 'message', J$.B(315290, '+', J$.B(315282, '+', J$.B(315274, '+', J$.B(315266, '+', J$.B(315258, '+', J$.B(315250, '+', J$.T(2982513, 'The ', 21, false), J$.R(2982521, 'format', format, false, false)), J$.T(2982529, ' format key ', 21, false)), J$.R(2982537, 'name', name, false, false)), J$.T(2982545, ' is ', 21, false)), J$.T(2982553, 'encrypted (password-protected), and no passphrase was ', 21, false)), J$.T(2982561, 'provided in `options`', 21, false)));
                        } catch (J$e) {
                            J$.Ex(2982913, J$e);
                        } finally {
                            if (J$.Fr(2982921))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2982721, 'assert', assert, false, false, false);
            J$.N(2982729, 'util', util, false, false, false);
            FingerprintFormatError = J$.N(2982745, 'FingerprintFormatError', J$.T(2982737, FingerprintFormatError, 12, false), true, false, false);
            InvalidAlgorithmError = J$.N(2982761, 'InvalidAlgorithmError', J$.T(2982753, InvalidAlgorithmError, 12, false), true, false, false);
            KeyParseError = J$.N(2982777, 'KeyParseError', J$.T(2982769, KeyParseError, 12, false), true, false, false);
            SignatureParseError = J$.N(2982793, 'SignatureParseError', J$.T(2982785, SignatureParseError, 12, false), true, false, false);
            CertificateParseError = J$.N(2982809, 'CertificateParseError', J$.T(2982801, CertificateParseError, 12, false), true, false, false);
            KeyEncryptedError = J$.N(2982825, 'KeyEncryptedError', J$.T(2982817, KeyEncryptedError, 12, false), true, false, false);
            J$.T(2980857, 'use strict', 21, false);
            J$.F(2980881, J$.I(typeof require === 'undefined' ? require = J$.R(2980865, 'require', undefined, true, true) : require = J$.R(2980865, 'require', require, true, true)), false)(J$.T(2980873, 'core-js/modules/es.function.name', 21, false));
            J$.F(2980905, J$.I(typeof require === 'undefined' ? require = J$.R(2980889, 'require', undefined, true, true) : require = J$.R(2980889, 'require', require, true, true)), false)(J$.T(2980897, 'core-js/modules/es.function.name', 21, false));
            J$.F(2980929, J$.I(typeof require === 'undefined' ? require = J$.R(2980913, 'require', undefined, true, true) : require = J$.R(2980913, 'require', require, true, true)), false)(J$.T(2980921, 'core-js/modules/es.function.name', 21, false));
            J$.F(2980953, J$.I(typeof require === 'undefined' ? require = J$.R(2980937, 'require', undefined, true, true) : require = J$.R(2980937, 'require', require, true, true)), false)(J$.T(2980945, 'core-js/modules/es.function.name', 21, false));
            var assert = J$.W(2980985, 'assert', J$.F(2980977, J$.I(typeof require === 'undefined' ? require = J$.R(2980961, 'require', undefined, true, true) : require = J$.R(2980961, 'require', require, true, true)), false)(J$.T(2980969, 'assert-plus', 21, false)), assert, false, true);
            var util = J$.W(2981017, 'util', J$.F(2981009, J$.I(typeof require === 'undefined' ? require = J$.R(2980993, 'require', undefined, true, true) : require = J$.R(2980993, 'require', require, true, true)), false)(J$.T(2981001, 'util', 21, false)), util, false, true);
            J$.M(2981321, J$.R(2981297, 'util', util, false, true), 'inherits', false)(J$.R(2981305, 'FingerprintFormatError', FingerprintFormatError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2981313, 'Error', undefined, true, true) : Error = J$.R(2981313, 'Error', Error, true, true)));
            J$.M(2981513, J$.R(2981489, 'util', util, false, true), 'inherits', false)(J$.R(2981497, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2981505, 'Error', undefined, true, true) : Error = J$.R(2981505, 'Error', Error, true, true)));
            J$.M(2981801, J$.R(2981777, 'util', util, false, true), 'inherits', false)(J$.R(2981785, 'KeyParseError', KeyParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2981793, 'Error', undefined, true, true) : Error = J$.R(2981793, 'Error', Error, true, true)));
            J$.M(2982089, J$.R(2982065, 'util', util, false, true), 'inherits', false)(J$.R(2982073, 'SignatureParseError', SignatureParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2982081, 'Error', undefined, true, true) : Error = J$.R(2982081, 'Error', Error, true, true)));
            J$.M(2982377, J$.R(2982353, 'util', util, false, true), 'inherits', false)(J$.R(2982361, 'CertificateParseError', CertificateParseError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2982369, 'Error', undefined, true, true) : Error = J$.R(2982369, 'Error', Error, true, true)));
            J$.M(2982633, J$.R(2982609, 'util', util, false, true), 'inherits', false)(J$.R(2982617, 'KeyEncryptedError', KeyEncryptedError, false, true), J$.I(typeof Error === 'undefined' ? Error = J$.R(2982625, 'Error', undefined, true, true) : Error = J$.R(2982625, 'Error', Error, true, true)));
            J$.P(2982705, J$.I(typeof module === 'undefined' ? module = J$.R(2982641, 'module', undefined, true, true) : module = J$.R(2982641, 'module', module, true, true)), 'exports', J$.T(2982697, {
                FingerprintFormatError: J$.R(2982649, 'FingerprintFormatError', FingerprintFormatError, false, true),
                InvalidAlgorithmError: J$.R(2982657, 'InvalidAlgorithmError', InvalidAlgorithmError, false, true),
                KeyParseError: J$.R(2982665, 'KeyParseError', KeyParseError, false, true),
                SignatureParseError: J$.R(2982673, 'SignatureParseError', SignatureParseError, false, true),
                KeyEncryptedError: J$.R(2982681, 'KeyEncryptedError', KeyEncryptedError, false, true),
                CertificateParseError: J$.R(2982689, 'CertificateParseError', CertificateParseError, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(2982929, J$e);
        } finally {
            if (J$.Sr(2982937))
                continue jalangiLabel6;
            else
                break jalangiLabel6;
        }
    }
// JALANGI DO NOT INSTRUMENT

