J$.noInstrEval = false;
jalangiLabel0:
    while (true) {
        try {
            J$.Se(3101673, '/Users/ex1t/Desktop/nodeAnalysis/HiPar/outputs/target_cache/TestCouchDb/node_modules/sshpk/lib/index.js');
            J$.N(3101681, 'Key', Key, false, false, false);
            J$.N(3101689, 'Fingerprint', Fingerprint, false, false, false);
            J$.N(3101697, 'Signature', Signature, false, false, false);
            J$.N(3101705, 'PrivateKey', PrivateKey, false, false, false);
            J$.N(3101713, 'Certificate', Certificate, false, false, false);
            J$.N(3101721, 'Identity', Identity, false, false, false);
            J$.N(3101729, 'errs', errs, false, false, false);
            J$.T(3101065, 'use strict', 21, false);
            var Key = J$.W(3101097, 'Key', J$.F(3101089, J$.I(typeof require === 'undefined' ? require = J$.R(3101073, 'require', undefined, true, true) : require = J$.R(3101073, 'require', require, true, true)), false)(J$.T(3101081, './key', 21, false)), Key, false, true);
            var Fingerprint = J$.W(3101129, 'Fingerprint', J$.F(3101121, J$.I(typeof require === 'undefined' ? require = J$.R(3101105, 'require', undefined, true, true) : require = J$.R(3101105, 'require', require, true, true)), false)(J$.T(3101113, './fingerprint', 21, false)), Fingerprint, false, true);
            var Signature = J$.W(3101161, 'Signature', J$.F(3101153, J$.I(typeof require === 'undefined' ? require = J$.R(3101137, 'require', undefined, true, true) : require = J$.R(3101137, 'require', require, true, true)), false)(J$.T(3101145, './signature', 21, false)), Signature, false, true);
            var PrivateKey = J$.W(3101193, 'PrivateKey', J$.F(3101185, J$.I(typeof require === 'undefined' ? require = J$.R(3101169, 'require', undefined, true, true) : require = J$.R(3101169, 'require', require, true, true)), false)(J$.T(3101177, './private-key', 21, false)), PrivateKey, false, true);
            var Certificate = J$.W(3101225, 'Certificate', J$.F(3101217, J$.I(typeof require === 'undefined' ? require = J$.R(3101201, 'require', undefined, true, true) : require = J$.R(3101201, 'require', require, true, true)), false)(J$.T(3101209, './certificate', 21, false)), Certificate, false, true);
            var Identity = J$.W(3101257, 'Identity', J$.F(3101249, J$.I(typeof require === 'undefined' ? require = J$.R(3101233, 'require', undefined, true, true) : require = J$.R(3101233, 'require', require, true, true)), false)(J$.T(3101241, './identity', 21, false)), Identity, false, true);
            var errs = J$.W(3101289, 'errs', J$.F(3101281, J$.I(typeof require === 'undefined' ? require = J$.R(3101265, 'require', undefined, true, true) : require = J$.R(3101265, 'require', require, true, true)), false)(J$.T(3101273, './errors', 21, false)), errs, false, true);
            J$.P(3101665, J$.I(typeof module === 'undefined' ? module = J$.R(3101297, 'module', undefined, true, true) : module = J$.R(3101297, 'module', module, true, true)), 'exports', J$.T(3101657, {
                Key: J$.R(3101305, 'Key', Key, false, true),
                parseKey: J$.G(3101321, J$.R(3101313, 'Key', Key, false, true), 'parse'),
                Fingerprint: J$.R(3101329, 'Fingerprint', Fingerprint, false, true),
                parseFingerprint: J$.G(3101345, J$.R(3101337, 'Fingerprint', Fingerprint, false, true), 'parse'),
                Signature: J$.R(3101353, 'Signature', Signature, false, true),
                parseSignature: J$.G(3101369, J$.R(3101361, 'Signature', Signature, false, true), 'parse'),
                PrivateKey: J$.R(3101377, 'PrivateKey', PrivateKey, false, true),
                parsePrivateKey: J$.G(3101393, J$.R(3101385, 'PrivateKey', PrivateKey, false, true), 'parse'),
                generatePrivateKey: J$.G(3101409, J$.R(3101401, 'PrivateKey', PrivateKey, false, true), 'generate'),
                Certificate: J$.R(3101417, 'Certificate', Certificate, false, true),
                parseCertificate: J$.G(3101433, J$.R(3101425, 'Certificate', Certificate, false, true), 'parse'),
                createSelfSignedCertificate: J$.G(3101449, J$.R(3101441, 'Certificate', Certificate, false, true), 'createSelfSigned'),
                createCertificate: J$.G(3101465, J$.R(3101457, 'Certificate', Certificate, false, true), 'create'),
                Identity: J$.R(3101473, 'Identity', Identity, false, true),
                identityFromDN: J$.G(3101489, J$.R(3101481, 'Identity', Identity, false, true), 'parseDN'),
                identityForHost: J$.G(3101505, J$.R(3101497, 'Identity', Identity, false, true), 'forHost'),
                identityForUser: J$.G(3101521, J$.R(3101513, 'Identity', Identity, false, true), 'forUser'),
                identityForEmail: J$.G(3101537, J$.R(3101529, 'Identity', Identity, false, true), 'forEmail'),
                identityFromArray: J$.G(3101553, J$.R(3101545, 'Identity', Identity, false, true), 'fromArray'),
                FingerprintFormatError: J$.G(3101569, J$.R(3101561, 'errs', errs, false, true), 'FingerprintFormatError'),
                InvalidAlgorithmError: J$.G(3101585, J$.R(3101577, 'errs', errs, false, true), 'InvalidAlgorithmError'),
                KeyParseError: J$.G(3101601, J$.R(3101593, 'errs', errs, false, true), 'KeyParseError'),
                SignatureParseError: J$.G(3101617, J$.R(3101609, 'errs', errs, false, true), 'SignatureParseError'),
                KeyEncryptedError: J$.G(3101633, J$.R(3101625, 'errs', errs, false, true), 'KeyEncryptedError'),
                CertificateParseError: J$.G(3101649, J$.R(3101641, 'errs', errs, false, true), 'CertificateParseError')
            }, 11, false));
        } catch (J$e) {
            J$.Ex(3101737, J$e);
        } finally {
            if (J$.Sr(3101745))
                continue jalangiLabel0;
            else
                break jalangiLabel0;
        }
    }
// JALANGI DO NOT INSTRUMENT

