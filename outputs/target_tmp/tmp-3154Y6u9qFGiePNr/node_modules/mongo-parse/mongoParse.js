J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(14857, '/mnt/d/BearWork/nodeExploit/Goldie/outputs/target_tmp/tmp-3154Y6u9qFGiePNr/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(12625, arguments.callee, this, arguments);
                            arguments = J$.N(12633, 'arguments', arguments, true, false, false);
                            projection = J$.N(12641, 'projection', projection, true, false, false);
                            J$.N(12649, 'k', k, false, false, false);
                            for (var k in J$.H(12609, J$.R(12377, 'projection', projection, false, false))) {
                                J$.N(12617, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(800, J$.U(1170, '!', J$.G(12401, J$.R(12385, 'projection', projection, false, false), J$.R(12393, 'k', k, false, false))))) {
                                            if (J$.C(752, J$.B(1178, '!==', J$.R(12409, 'k', k, false, false), J$.T(12417, '_id', 21, false)))) {
                                                return J$.Rt(12433, J$.T(12425, false, 23, false));
                                            }
                                        } else if (J$.C(792, J$.B(1186, '===', J$.R(12441, 'k', k, false, false), J$.T(12449, '$meta', 21, false)))) {
                                            return J$.Rt(12465, J$.T(12457, true, 23, false));
                                        } else if (J$.C(784, J$.G(12489, J$.R(12473, 'projection', projection, false, false), J$.R(12481, 'k', k, false, false)))) {
                                            if (J$.C(776, J$.C(768, J$.B(1194, 'instanceof', J$.G(12513, J$.R(12497, 'projection', projection, false, false), J$.R(12505, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(12521, 'Object', undefined, true, true) : Object = J$.R(12521, 'Object', Object, true, true)))) ? J$.C(760, J$.B(1202, 'in', J$.T(12529, '$elemMatch', 21, false), J$.G(12553, J$.R(12537, 'projection', projection, false, false), J$.R(12545, 'k', k, false, false)))) ? J$._() : J$.B(1210, 'in', J$.T(12561, '$slice', 21, false), J$.G(12585, J$.R(12569, 'projection', projection, false, false), J$.R(12577, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(12601, J$.T(12593, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15105, J$e);
                        } finally {
                            if (J$.Fr(15113))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(13585, arguments.callee, this, arguments);
                            arguments = J$.N(13593, 'arguments', arguments, true, false, false);
                            query = J$.N(13601, 'query', query, true, false, false);
                            J$.N(13609, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(13617, 'parts', parts, false, false, false);
                            J$.N(13625, 'key', key, false, false, false);
                            J$.N(13633, 'operator', operator, false, false, false);
                            J$.N(13641, 'operands', operands, false, false, false);
                            J$.N(13649, 'innerParts', innerParts, false, false, false);
                            J$.N(13657, 'field', field, false, false, false);
                            J$.N(13665, 'innerOperator', innerOperator, false, false, false);
                            J$.N(13673, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(824, J$.C(808, J$.B(1218, 'instanceof', J$.R(12657, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12665, 'Function', undefined, true, true) : Function = J$.R(12665, 'Function', Function, true, true)))) ? J$._() : J$.B(1234, '===', J$.U(1226, 'typeof', J$.R(12673, 'query', query, false, false)), J$.T(12681, 'string', 21, false)))) {
                                if (J$.C(816, J$.B(1242, 'instanceof', J$.R(12689, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12697, 'Function', undefined, true, true) : Function = J$.R(12697, 'Function', Function, true, true))))) {
                                    query = J$.W(12729, 'query', J$.B(1258, '+', J$.B(1250, '+', J$.T(12705, '(', 21, false), J$.R(12713, 'query', query, false, false)), J$.T(12721, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(12769, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1274, '+', J$.B(1266, '+', J$.T(12737, '(function() {var obj=this; return ', 21, false), J$.R(12745, 'query', query, false, false)), J$.T(12753, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 12761, J$.evalInvoked(J$.B(1282, '+', J$.B(1266, '+', J$.T(12737, '(function() {var obj=this; return ', 21, false), J$.R(12745, 'query', query, false, false)), J$.T(12753, '})', 21, false)), 12761)).code), normalizedFunction, false, false);
                                return J$.Rt(12825, J$.T(12817, [J$.F(12809, J$.R(12777, 'Part', Part, false, true), true)(J$.T(12785, undefined, 24, false), J$.T(12793, '$where', 21, false), J$.R(12801, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(12841, 'parts', J$.T(12833, [], 10, false), parts, false, false);
                            for (var key in J$.H(13553, J$.R(12849, 'query', query, false, false))) {
                                J$.N(13561, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(856, J$.B(1290, 'in', J$.R(12857, 'key', key, false, false), J$.R(12865, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(12881, 'operator', J$.R(12873, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(12913, 'operands', J$.G(12905, J$.R(12889, 'query', query, false, false), J$.R(12897, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(12929, 'innerParts', J$.T(12921, [], 10, false), innerParts, false, false);
                                            J$.M(13065, J$.R(12937, 'operands', operands, false, false), 'forEach', false)(J$.T(13057, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(13033, arguments.callee, this, arguments);
                                                            arguments = J$.N(13041, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(13049, 'operand', operand, true, false, false);
                                                            J$.M(13025, J$.R(12945, 'innerParts', innerParts, false, false), 'push', false)(J$.F(13017, J$.R(12953, 'Part', Part, false, true), true)(J$.T(12961, undefined, 24, false), J$.T(12969, '$and', 21, false), J$.T(12985, [J$.R(12977, 'operand', operand, false, false)], 10, false), J$.F(13009, J$.R(12993, 'parseQuery', parseQuery, false, true), false)(J$.R(13001, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(15121, J$e);
                                                        } finally {
                                                            if (J$.Fr(15129))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(13145, J$.R(13073, 'parts', parts, false, false), 'push', false)(J$.F(13137, J$.R(13081, 'Part', Part, false, true), true)(J$.T(13089, undefined, 24, false), J$.R(13097, 'operator', operator, false, false), J$.G(13121, J$.R(13105, 'query', query, false, false), J$.R(13113, 'key', key, false, false)), J$.R(13129, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(848, J$.B(1298, 'in', J$.R(13153, 'key', key, false, false), J$.R(13161, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(13233, J$.R(13169, 'parts', parts, false, false), 'push', false)(J$.F(13225, J$.R(13177, 'Part', Part, false, true), true)(J$.T(13185, undefined, 24, false), J$.R(13193, 'key', key, false, false), J$.G(13217, J$.R(13201, 'query', query, false, false), J$.R(13209, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(13249, 'field', J$.R(13241, 'key', key, false, false), field, false, false);
                                            if (J$.C(840, J$.C(832, J$.F(13289, J$.R(13257, 'isObject', isObject, false, true), false)(J$.G(13281, J$.R(13265, 'query', query, false, false), J$.R(13273, 'key', key, false, false)))) ? J$.F(13329, J$.R(13297, 'fieldOperand', fieldOperand, false, true), false)(J$.G(13321, J$.R(13305, 'query', query, false, false), J$.R(13313, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(13465, J$.G(13353, J$.R(13337, 'query', query, false, false), J$.R(13345, 'key', key, false, false)))) {
                                                    J$.N(13473, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(13401, 'innerOperand', J$.G(13393, J$.G(13377, J$.R(13361, 'query', query, false, false), J$.R(13369, 'key', key, false, false)), J$.R(13385, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(13457, J$.R(13409, 'parts', parts, false, false), 'push', false)(J$.F(13449, J$.R(13417, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(13425, 'field', field, false, false), J$.R(13433, 'innerOperator', innerOperator, false, false), J$.R(13441, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(13545, J$.R(13481, 'parts', parts, false, false), 'push', false)(J$.F(13537, J$.R(13489, 'Part', Part, false, true), true)(J$.R(13497, 'field', field, false, false), J$.T(13505, undefined, 24, false), J$.G(13529, J$.R(13513, 'query', query, false, false), J$.R(13521, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(13577, J$.R(13569, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15137, J$e);
                        } finally {
                            if (J$.Fr(15145))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(13913, arguments.callee, this, arguments);
                            arguments = J$.N(13921, 'arguments', arguments, true, false, false);
                            field = J$.N(13929, 'field', field, true, false, false);
                            operator = J$.N(13937, 'operator', operator, true, false, false);
                            operand = J$.N(13945, 'operand', operand, true, false, false);
                            J$.N(13953, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(13961, 'innerParts', innerParts, false, false, false);
                            J$.N(13969, 'implicitField', implicitField, false, false, false);
                            if (J$.C(872, J$.B(1306, '===', J$.R(13681, 'operator', operator, false, false), J$.T(13689, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(13721, 'elemMatchInfo', J$.F(13713, J$.R(13697, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(13705, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(13745, 'innerParts', J$.G(13737, J$.R(13729, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(13769, 'implicitField', J$.G(13761, J$.R(13753, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(864, J$.B(1314, '===', J$.R(13777, 'operator', operator, false, false), J$.T(13785, '$not', 21, false)))) {
                                var innerParts = J$.W(13825, 'innerParts', J$.F(13817, J$.R(13793, 'parseNot', parseNot, false, true), false)(J$.R(13801, 'field', field, false, false), J$.R(13809, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(13841, 'innerParts', J$.T(13833, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(13905, J$.F(13897, J$.R(13849, 'Part', Part, false, true), true)(J$.R(13857, 'field', field, false, false), J$.R(13865, 'operator', operator, false, false), J$.R(13873, 'operand', operand, false, false), J$.R(13881, 'innerParts', innerParts, false, false), J$.R(13889, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(15153, J$e);
                        } finally {
                            if (J$.Fr(15161))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(14209, arguments.callee, this, arguments);
                            arguments = J$.N(14217, 'arguments', arguments, true, false, false);
                            operand = J$.N(14225, 'operand', operand, true, false, false);
                            J$.N(14233, 'parts', parts, false, false, false);
                            J$.N(14241, 'operator', operator, false, false, false);
                            J$.N(14249, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(880, J$.F(13993, J$.R(13977, 'fieldOperand', fieldOperand, false, true), false)(J$.R(13985, 'operand', operand, false, false)))) {
                                var parts = J$.W(14009, 'parts', J$.T(14001, [], 10, false), parts, false, false);
                                for (var operator in J$.H(14113, J$.R(14017, 'operand', operand, false, false))) {
                                    J$.N(14121, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(14049, 'innerOperand', J$.G(14041, J$.R(14025, 'operand', operand, false, false), J$.R(14033, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(14105, J$.R(14057, 'parts', parts, false, false), 'push', false)(J$.F(14097, J$.R(14065, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(14073, undefined, 24, false), J$.R(14081, 'operator', operator, false, false), J$.R(14089, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(14153, J$.T(14145, {
                                    parts: J$.R(14129, 'parts', parts, false, false),
                                    implicitField: J$.T(14137, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(14201, J$.T(14193, {
                                    parts: J$.F(14177, J$.R(14161, 'parseQuery', parseQuery, false, true), false)(J$.R(14169, 'operand', operand, false, false)),
                                    implicitField: J$.T(14185, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(15169, J$e);
                        } finally {
                            if (J$.Fr(15177))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(14401, arguments.callee, this, arguments);
                            arguments = J$.N(14409, 'arguments', arguments, true, false, false);
                            field = J$.N(14417, 'field', field, true, false, false);
                            operand = J$.N(14425, 'operand', operand, true, false, false);
                            J$.N(14433, 'parts', parts, false, false, false);
                            J$.N(14441, 'operator', operator, false, false, false);
                            J$.N(14449, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(14265, 'parts', J$.T(14257, [], 10, false), parts, false, false);
                            for (var operator in J$.H(14369, J$.R(14273, 'operand', operand, false, false))) {
                                J$.N(14377, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(14305, 'subOperand', J$.G(14297, J$.R(14281, 'operand', operand, false, false), J$.R(14289, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(14361, J$.R(14313, 'parts', parts, false, false), 'push', false)(J$.F(14353, J$.R(14321, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(14329, 'field', field, false, false), J$.R(14337, 'operator', operator, false, false), J$.R(14345, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(14393, J$.R(14385, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15185, J$e);
                        } finally {
                            if (J$.Fr(15193))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(14537, arguments.callee, this, arguments);
                            arguments = J$.N(14545, 'arguments', arguments, true, false, false);
                            obj = J$.N(14553, 'obj', obj, true, false, false);
                            J$.N(14561, 'key', key, false, false, false);
                            for (var key in J$.H(14521, J$.R(14457, 'obj', obj, false, false))) {
                                J$.N(14529, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(14513, J$.C(888, J$.B(1322, '===', J$.G(14481, J$.R(14465, 'key', key, false, false), J$.T(14473, 0, 22, false)), J$.T(14489, '$', 21, false))) ? J$.U(1338, '!', J$.B(1330, 'in', J$.R(14497, 'key', key, false, false), J$.R(14505, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15201, J$e);
                        } finally {
                            if (J$.Fr(15209))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(14609, arguments.callee, this, arguments);
                            arguments = J$.N(14617, 'arguments', arguments, true, false, false);
                            value = J$.N(14625, 'value', value, true, false, false);
                            return J$.Rt(14601, J$.C(896, J$.B(1346, 'instanceof', J$.R(14569, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(14577, 'Object', undefined, true, true) : Object = J$.R(14577, 'Object', Object, true, true)))) ? J$.U(1362, '!', J$.B(1354, 'instanceof', J$.R(14585, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(14593, 'Array', undefined, true, true) : Array = J$.R(14593, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(15217, J$e);
                        } finally {
                            if (J$.Fr(15225))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(14865, 'mapValues', mapValues, false, false, false);
            J$.N(14873, 'matches', matches, false, false, false);
            J$.N(14881, 'Parse', Parse, false, false, false);
            J$.N(14889, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(14897, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(14913, 'isInclusive', J$.T(14905, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(14929, 'parseQuery', J$.T(14921, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(14945, 'parseFieldOperator', J$.T(14937, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(14961, 'parseElemMatch', J$.T(14953, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(14977, 'parseNot', J$.T(14969, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(14993, 'fieldOperand', J$.T(14985, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(15009, 'isObject', J$.T(15001, isObject, 12, false), true, false, false);
            J$.N(15017, 'Part', Part, false, false, false);
            var mapValues = J$.W(11753, 'mapValues', J$.F(11745, J$.I(typeof require === 'undefined' ? require = J$.R(11729, 'require', undefined, true, true) : require = J$.R(11729, 'require', require, true, true)), false)(J$.T(11737, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(11785, 'matches', J$.F(11777, J$.I(typeof require === 'undefined' ? require = J$.R(11761, 'require', undefined, true, true) : require = J$.R(11761, 'require', require, true, true)), false)(J$.T(11769, './matches', 21, false)), matches, false, true);
            J$.P(11825, J$.I(typeof exports === 'undefined' ? exports = J$.R(11793, 'exports', undefined, true, true) : exports = J$.R(11793, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(11817, J$.I(typeof require === 'undefined' ? require = J$.R(11801, 'require', undefined, true, true) : require = J$.R(11801, 'require', require, true, true)), false)(J$.T(11809, './DotNotationPointers', 21, false)));
            var Parse = J$.W(11905, 'Parse', J$.T(11897, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(11873, arguments.callee, this, arguments);
                            arguments = J$.N(11881, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(11889, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(11865, J$.R(11833, 'this', this, false, false), 'parts', J$.F(11857, J$.R(11841, 'parseQuery', parseQuery, false, true), false)(J$.R(11849, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15025, J$e);
                        } finally {
                            if (J$.Fr(15033))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(11929, J$.R(11913, 'Parse', Parse, false, true), 'prototype', J$.T(11921, {}, 11, false));
            J$.P(12033, J$.G(11945, J$.R(11937, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(12025, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(12001, arguments.callee, this, arguments);
                            arguments = J$.N(12009, 'arguments', arguments, true, false, false);
                            callback = J$.N(12017, 'callback', callback, true, false, false);
                            return J$.Rt(11993, J$.F(11985, J$.R(11953, 'mapValues', mapValues, false, true), false)(J$.G(11969, J$.R(11961, 'this', this, false, false), 'parts'), J$.R(11977, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(15041, J$e);
                        } finally {
                            if (J$.Fr(15049))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12137, J$.G(12049, J$.R(12041, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(12129, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(12105, arguments.callee, this, arguments);
                            arguments = J$.N(12113, 'arguments', arguments, true, false, false);
                            document = J$.N(12121, 'document', document, true, false, false);
                            return J$.Rt(12097, J$.F(12089, J$.R(12057, 'matches', matches, false, true), false)(J$.G(12073, J$.R(12065, 'this', this, false, false), 'parts'), J$.R(12081, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(15057, J$e);
                        } finally {
                            if (J$.Fr(15065))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12217, J$.I(typeof exports === 'undefined' ? exports = J$.R(12145, 'exports', undefined, true, true) : exports = J$.R(12145, 'exports', exports, true, true)), 'parse', J$.T(12209, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(12185, arguments.callee, this, arguments);
                            arguments = J$.N(12193, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(12201, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(12177, J$.F(12169, J$.R(12153, 'Parse', Parse, false, true), true)(J$.R(12161, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15073, J$e);
                        } finally {
                            if (J$.Fr(15081))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12297, J$.I(typeof exports === 'undefined' ? exports = J$.R(12225, 'exports', undefined, true, true) : exports = J$.R(12225, 'exports', exports, true, true)), 'inclusive', J$.T(12289, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(12265, arguments.callee, this, arguments);
                            arguments = J$.N(12273, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(12281, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(12257, J$.F(12249, J$.R(12233, 'isInclusive', isInclusive, false, true), false)(J$.R(12241, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(15089, J$e);
                        } finally {
                            if (J$.Fr(15097))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(12337, 'complexFieldIndependantOperators', J$.T(12329, {
                $and: J$.T(12305, 1, 22, false),
                $or: J$.T(12313, 1, 22, false),
                $nor: J$.T(12321, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(12369, 'simpleFieldIndependantOperators', J$.T(12361, {
                $text: J$.T(12345, 1, 22, false),
                $comment: J$.T(12353, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(14849, 'Part', J$.T(14841, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(14785, arguments.callee, this, arguments);
                            arguments = J$.N(14793, 'arguments', arguments, true, false, false);
                            field = J$.N(14801, 'field', field, true, false, false);
                            operator = J$.N(14809, 'operator', operator, true, false, false);
                            operand = J$.N(14817, 'operand', operand, true, false, false);
                            parts = J$.N(14825, 'parts', parts, true, false, false);
                            implicitField = J$.N(14833, 'implicitField', implicitField, true, false, false);
                            if (J$.C(904, J$.B(1370, '===', J$.R(14633, 'parts', parts, false, false), J$.T(14641, undefined, 24, false))))
                                parts = J$.W(14657, 'parts', J$.T(14649, [], 10, false), parts, false, false);
                            J$.P(14681, J$.R(14665, 'this', this, false, false), 'field', J$.R(14673, 'field', field, false, false));
                            J$.P(14705, J$.R(14689, 'this', this, false, false), 'operator', J$.R(14697, 'operator', operator, false, false));
                            J$.P(14729, J$.R(14713, 'this', this, false, false), 'operand', J$.R(14721, 'operand', operand, false, false));
                            J$.P(14753, J$.R(14737, 'this', this, false, false), 'parts', J$.R(14745, 'parts', parts, false, false));
                            J$.P(14777, J$.R(14761, 'this', this, false, false), 'implicitField', J$.R(14769, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(15233, J$e);
                        } finally {
                            if (J$.Fr(15241))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(15249, J$e);
        } finally {
            if (J$.Sr(15257))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

