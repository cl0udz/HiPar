J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(14881, '/mnt/data/fxiao/Goldie/outputs/target_tmp/tmp-16770o4Z1xc2Xbn3a/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(12649, arguments.callee, this, arguments);
                            arguments = J$.N(12657, 'arguments', arguments, true, false, false);
                            projection = J$.N(12665, 'projection', projection, true, false, false);
                            J$.N(12673, 'k', k, false, false, false);
                            for (var k in J$.H(12633, J$.R(12401, 'projection', projection, false, false))) {
                                J$.N(12641, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(800, J$.U(1178, '!', J$.G(12425, J$.R(12409, 'projection', projection, false, false), J$.R(12417, 'k', k, false, false))))) {
                                            if (J$.C(752, J$.B(1186, '!==', J$.R(12433, 'k', k, false, false), J$.T(12441, '_id', 21, false)))) {
                                                return J$.Rt(12457, J$.T(12449, false, 23, false));
                                            }
                                        } else if (J$.C(792, J$.B(1194, '===', J$.R(12465, 'k', k, false, false), J$.T(12473, '$meta', 21, false)))) {
                                            return J$.Rt(12489, J$.T(12481, true, 23, false));
                                        } else if (J$.C(784, J$.G(12513, J$.R(12497, 'projection', projection, false, false), J$.R(12505, 'k', k, false, false)))) {
                                            if (J$.C(776, J$.C(768, J$.B(1202, 'instanceof', J$.G(12537, J$.R(12521, 'projection', projection, false, false), J$.R(12529, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(12545, 'Object', undefined, true, true) : Object = J$.R(12545, 'Object', Object, true, true)))) ? J$.C(760, J$.B(1210, 'in', J$.T(12553, '$elemMatch', 21, false), J$.G(12577, J$.R(12561, 'projection', projection, false, false), J$.R(12569, 'k', k, false, false)))) ? J$._() : J$.B(1218, 'in', J$.T(12585, '$slice', 21, false), J$.G(12609, J$.R(12593, 'projection', projection, false, false), J$.R(12601, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(12625, J$.T(12617, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15129, J$e);
                        } finally {
                            if (J$.Fr(15137))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(13609, arguments.callee, this, arguments);
                            arguments = J$.N(13617, 'arguments', arguments, true, false, false);
                            query = J$.N(13625, 'query', query, true, false, false);
                            J$.N(13633, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(13641, 'parts', parts, false, false, false);
                            J$.N(13649, 'key', key, false, false, false);
                            J$.N(13657, 'operator', operator, false, false, false);
                            J$.N(13665, 'operands', operands, false, false, false);
                            J$.N(13673, 'innerParts', innerParts, false, false, false);
                            J$.N(13681, 'field', field, false, false, false);
                            J$.N(13689, 'innerOperator', innerOperator, false, false, false);
                            J$.N(13697, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(824, J$.C(808, J$.B(1226, 'instanceof', J$.R(12681, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12689, 'Function', undefined, true, true) : Function = J$.R(12689, 'Function', Function, true, true)))) ? J$._() : J$.B(1242, '===', J$.U(1234, 'typeof', J$.R(12697, 'query', query, false, false)), J$.T(12705, 'string', 21, false)))) {
                                if (J$.C(816, J$.B(1250, 'instanceof', J$.R(12713, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(12721, 'Function', undefined, true, true) : Function = J$.R(12721, 'Function', Function, true, true))))) {
                                    query = J$.W(12753, 'query', J$.B(1266, '+', J$.B(1258, '+', J$.T(12729, '(', 21, false), J$.R(12737, 'query', query, false, false)), J$.T(12745, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(12793, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1282, '+', J$.B(1274, '+', J$.T(12761, '(function() {var obj=this; return ', 21, false), J$.R(12769, 'query', query, false, false)), J$.T(12777, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 12785, J$.evalInvoked(J$.B(1290, '+', J$.B(1274, '+', J$.T(12761, '(function() {var obj=this; return ', 21, false), J$.R(12769, 'query', query, false, false)), J$.T(12777, '})', 21, false)), 12785)).code), normalizedFunction, false, false);
                                return J$.Rt(12849, J$.T(12841, [J$.F(12833, J$.R(12801, 'Part', Part, false, true), true)(J$.T(12809, undefined, 24, false), J$.T(12817, '$where', 21, false), J$.R(12825, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(12865, 'parts', J$.T(12857, [], 10, false), parts, false, false);
                            for (var key in J$.H(13577, J$.R(12873, 'query', query, false, false))) {
                                J$.N(13585, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(856, J$.B(1298, 'in', J$.R(12881, 'key', key, false, false), J$.R(12889, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(12905, 'operator', J$.R(12897, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(12937, 'operands', J$.G(12929, J$.R(12913, 'query', query, false, false), J$.R(12921, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(12953, 'innerParts', J$.T(12945, [], 10, false), innerParts, false, false);
                                            J$.M(13089, J$.R(12961, 'operands', operands, false, false), 'forEach', false)(J$.T(13081, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(13057, arguments.callee, this, arguments);
                                                            arguments = J$.N(13065, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(13073, 'operand', operand, true, false, false);
                                                            J$.M(13049, J$.R(12969, 'innerParts', innerParts, false, false), 'push', false)(J$.F(13041, J$.R(12977, 'Part', Part, false, true), true)(J$.T(12985, undefined, 24, false), J$.T(12993, '$and', 21, false), J$.T(13009, [J$.R(13001, 'operand', operand, false, false)], 10, false), J$.F(13033, J$.R(13017, 'parseQuery', parseQuery, false, true), false)(J$.R(13025, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(15145, J$e);
                                                        } finally {
                                                            if (J$.Fr(15153))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(13169, J$.R(13097, 'parts', parts, false, false), 'push', false)(J$.F(13161, J$.R(13105, 'Part', Part, false, true), true)(J$.T(13113, undefined, 24, false), J$.R(13121, 'operator', operator, false, false), J$.G(13145, J$.R(13129, 'query', query, false, false), J$.R(13137, 'key', key, false, false)), J$.R(13153, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(848, J$.B(1306, 'in', J$.R(13177, 'key', key, false, false), J$.R(13185, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(13257, J$.R(13193, 'parts', parts, false, false), 'push', false)(J$.F(13249, J$.R(13201, 'Part', Part, false, true), true)(J$.T(13209, undefined, 24, false), J$.R(13217, 'key', key, false, false), J$.G(13241, J$.R(13225, 'query', query, false, false), J$.R(13233, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(13273, 'field', J$.R(13265, 'key', key, false, false), field, false, false);
                                            if (J$.C(840, J$.C(832, J$.F(13313, J$.R(13281, 'isObject', isObject, false, true), false)(J$.G(13305, J$.R(13289, 'query', query, false, false), J$.R(13297, 'key', key, false, false)))) ? J$.F(13353, J$.R(13321, 'fieldOperand', fieldOperand, false, true), false)(J$.G(13345, J$.R(13329, 'query', query, false, false), J$.R(13337, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(13489, J$.G(13377, J$.R(13361, 'query', query, false, false), J$.R(13369, 'key', key, false, false)))) {
                                                    J$.N(13497, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(13425, 'innerOperand', J$.G(13417, J$.G(13401, J$.R(13385, 'query', query, false, false), J$.R(13393, 'key', key, false, false)), J$.R(13409, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(13481, J$.R(13433, 'parts', parts, false, false), 'push', false)(J$.F(13473, J$.R(13441, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(13449, 'field', field, false, false), J$.R(13457, 'innerOperator', innerOperator, false, false), J$.R(13465, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(13569, J$.R(13505, 'parts', parts, false, false), 'push', false)(J$.F(13561, J$.R(13513, 'Part', Part, false, true), true)(J$.R(13521, 'field', field, false, false), J$.T(13529, undefined, 24, false), J$.G(13553, J$.R(13537, 'query', query, false, false), J$.R(13545, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(13601, J$.R(13593, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15161, J$e);
                        } finally {
                            if (J$.Fr(15169))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(13937, arguments.callee, this, arguments);
                            arguments = J$.N(13945, 'arguments', arguments, true, false, false);
                            field = J$.N(13953, 'field', field, true, false, false);
                            operator = J$.N(13961, 'operator', operator, true, false, false);
                            operand = J$.N(13969, 'operand', operand, true, false, false);
                            J$.N(13977, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(13985, 'innerParts', innerParts, false, false, false);
                            J$.N(13993, 'implicitField', implicitField, false, false, false);
                            if (J$.C(872, J$.B(1314, '===', J$.R(13705, 'operator', operator, false, false), J$.T(13713, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(13745, 'elemMatchInfo', J$.F(13737, J$.R(13721, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(13729, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(13769, 'innerParts', J$.G(13761, J$.R(13753, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(13793, 'implicitField', J$.G(13785, J$.R(13777, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(864, J$.B(1322, '===', J$.R(13801, 'operator', operator, false, false), J$.T(13809, '$not', 21, false)))) {
                                var innerParts = J$.W(13849, 'innerParts', J$.F(13841, J$.R(13817, 'parseNot', parseNot, false, true), false)(J$.R(13825, 'field', field, false, false), J$.R(13833, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(13865, 'innerParts', J$.T(13857, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(13929, J$.F(13921, J$.R(13873, 'Part', Part, false, true), true)(J$.R(13881, 'field', field, false, false), J$.R(13889, 'operator', operator, false, false), J$.R(13897, 'operand', operand, false, false), J$.R(13905, 'innerParts', innerParts, false, false), J$.R(13913, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(15177, J$e);
                        } finally {
                            if (J$.Fr(15185))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(14233, arguments.callee, this, arguments);
                            arguments = J$.N(14241, 'arguments', arguments, true, false, false);
                            operand = J$.N(14249, 'operand', operand, true, false, false);
                            J$.N(14257, 'parts', parts, false, false, false);
                            J$.N(14265, 'operator', operator, false, false, false);
                            J$.N(14273, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(880, J$.F(14017, J$.R(14001, 'fieldOperand', fieldOperand, false, true), false)(J$.R(14009, 'operand', operand, false, false)))) {
                                var parts = J$.W(14033, 'parts', J$.T(14025, [], 10, false), parts, false, false);
                                for (var operator in J$.H(14137, J$.R(14041, 'operand', operand, false, false))) {
                                    J$.N(14145, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(14073, 'innerOperand', J$.G(14065, J$.R(14049, 'operand', operand, false, false), J$.R(14057, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(14129, J$.R(14081, 'parts', parts, false, false), 'push', false)(J$.F(14121, J$.R(14089, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(14097, undefined, 24, false), J$.R(14105, 'operator', operator, false, false), J$.R(14113, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(14177, J$.T(14169, {
                                    parts: J$.R(14153, 'parts', parts, false, false),
                                    implicitField: J$.T(14161, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(14225, J$.T(14217, {
                                    parts: J$.F(14201, J$.R(14185, 'parseQuery', parseQuery, false, true), false)(J$.R(14193, 'operand', operand, false, false)),
                                    implicitField: J$.T(14209, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(15193, J$e);
                        } finally {
                            if (J$.Fr(15201))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(14425, arguments.callee, this, arguments);
                            arguments = J$.N(14433, 'arguments', arguments, true, false, false);
                            field = J$.N(14441, 'field', field, true, false, false);
                            operand = J$.N(14449, 'operand', operand, true, false, false);
                            J$.N(14457, 'parts', parts, false, false, false);
                            J$.N(14465, 'operator', operator, false, false, false);
                            J$.N(14473, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(14289, 'parts', J$.T(14281, [], 10, false), parts, false, false);
                            for (var operator in J$.H(14393, J$.R(14297, 'operand', operand, false, false))) {
                                J$.N(14401, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(14329, 'subOperand', J$.G(14321, J$.R(14305, 'operand', operand, false, false), J$.R(14313, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(14385, J$.R(14337, 'parts', parts, false, false), 'push', false)(J$.F(14377, J$.R(14345, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(14353, 'field', field, false, false), J$.R(14361, 'operator', operator, false, false), J$.R(14369, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(14417, J$.R(14409, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(15209, J$e);
                        } finally {
                            if (J$.Fr(15217))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(14561, arguments.callee, this, arguments);
                            arguments = J$.N(14569, 'arguments', arguments, true, false, false);
                            obj = J$.N(14577, 'obj', obj, true, false, false);
                            J$.N(14585, 'key', key, false, false, false);
                            for (var key in J$.H(14545, J$.R(14481, 'obj', obj, false, false))) {
                                J$.N(14553, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(14537, J$.C(888, J$.B(1330, '===', J$.G(14505, J$.R(14489, 'key', key, false, false), J$.T(14497, 0, 22, false)), J$.T(14513, '$', 21, false))) ? J$.U(1346, '!', J$.B(1338, 'in', J$.R(14521, 'key', key, false, false), J$.R(14529, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(15225, J$e);
                        } finally {
                            if (J$.Fr(15233))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(14633, arguments.callee, this, arguments);
                            arguments = J$.N(14641, 'arguments', arguments, true, false, false);
                            value = J$.N(14649, 'value', value, true, false, false);
                            return J$.Rt(14625, J$.C(896, J$.B(1354, 'instanceof', J$.R(14593, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(14601, 'Object', undefined, true, true) : Object = J$.R(14601, 'Object', Object, true, true)))) ? J$.U(1370, '!', J$.B(1362, 'instanceof', J$.R(14609, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(14617, 'Array', undefined, true, true) : Array = J$.R(14617, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(15241, J$e);
                        } finally {
                            if (J$.Fr(15249))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(14889, 'mapValues', mapValues, false, false, false);
            J$.N(14897, 'matches', matches, false, false, false);
            J$.N(14905, 'Parse', Parse, false, false, false);
            J$.N(14913, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(14921, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(14937, 'isInclusive', J$.T(14929, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(14953, 'parseQuery', J$.T(14945, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(14969, 'parseFieldOperator', J$.T(14961, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(14985, 'parseElemMatch', J$.T(14977, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(15001, 'parseNot', J$.T(14993, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(15017, 'fieldOperand', J$.T(15009, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(15033, 'isObject', J$.T(15025, isObject, 12, false), true, false, false);
            J$.N(15041, 'Part', Part, false, false, false);
            var mapValues = J$.W(11777, 'mapValues', J$.F(11769, J$.I(typeof require === 'undefined' ? require = J$.R(11753, 'require', undefined, true, true) : require = J$.R(11753, 'require', require, true, true)), false)(J$.T(11761, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(11809, 'matches', J$.F(11801, J$.I(typeof require === 'undefined' ? require = J$.R(11785, 'require', undefined, true, true) : require = J$.R(11785, 'require', require, true, true)), false)(J$.T(11793, './matches', 21, false)), matches, false, true);
            J$.P(11849, J$.I(typeof exports === 'undefined' ? exports = J$.R(11817, 'exports', undefined, true, true) : exports = J$.R(11817, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(11841, J$.I(typeof require === 'undefined' ? require = J$.R(11825, 'require', undefined, true, true) : require = J$.R(11825, 'require', require, true, true)), false)(J$.T(11833, './DotNotationPointers', 21, false)));
            var Parse = J$.W(11929, 'Parse', J$.T(11921, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(11897, arguments.callee, this, arguments);
                            arguments = J$.N(11905, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(11913, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(11889, J$.R(11857, 'this', this, false, false), 'parts', J$.F(11881, J$.R(11865, 'parseQuery', parseQuery, false, true), false)(J$.R(11873, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15049, J$e);
                        } finally {
                            if (J$.Fr(15057))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(11953, J$.R(11937, 'Parse', Parse, false, true), 'prototype', J$.T(11945, {}, 11, false));
            J$.P(12057, J$.G(11969, J$.R(11961, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(12049, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(12025, arguments.callee, this, arguments);
                            arguments = J$.N(12033, 'arguments', arguments, true, false, false);
                            callback = J$.N(12041, 'callback', callback, true, false, false);
                            return J$.Rt(12017, J$.F(12009, J$.R(11977, 'mapValues', mapValues, false, true), false)(J$.G(11993, J$.R(11985, 'this', this, false, false), 'parts'), J$.R(12001, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(15065, J$e);
                        } finally {
                            if (J$.Fr(15073))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12161, J$.G(12073, J$.R(12065, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(12153, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(12129, arguments.callee, this, arguments);
                            arguments = J$.N(12137, 'arguments', arguments, true, false, false);
                            document = J$.N(12145, 'document', document, true, false, false);
                            return J$.Rt(12121, J$.F(12113, J$.R(12081, 'matches', matches, false, true), false)(J$.G(12097, J$.R(12089, 'this', this, false, false), 'parts'), J$.R(12105, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(15081, J$e);
                        } finally {
                            if (J$.Fr(15089))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12241, J$.I(typeof exports === 'undefined' ? exports = J$.R(12169, 'exports', undefined, true, true) : exports = J$.R(12169, 'exports', exports, true, true)), 'parse', J$.T(12233, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(12209, arguments.callee, this, arguments);
                            arguments = J$.N(12217, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(12225, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(12201, J$.F(12193, J$.R(12177, 'Parse', Parse, false, true), true)(J$.R(12185, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(15097, J$e);
                        } finally {
                            if (J$.Fr(15105))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(12321, J$.I(typeof exports === 'undefined' ? exports = J$.R(12249, 'exports', undefined, true, true) : exports = J$.R(12249, 'exports', exports, true, true)), 'inclusive', J$.T(12313, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(12289, arguments.callee, this, arguments);
                            arguments = J$.N(12297, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(12305, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(12281, J$.F(12273, J$.R(12257, 'isInclusive', isInclusive, false, true), false)(J$.R(12265, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(15113, J$e);
                        } finally {
                            if (J$.Fr(15121))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(12361, 'complexFieldIndependantOperators', J$.T(12353, {
                $and: J$.T(12329, 1, 22, false),
                $or: J$.T(12337, 1, 22, false),
                $nor: J$.T(12345, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(12393, 'simpleFieldIndependantOperators', J$.T(12385, {
                $text: J$.T(12369, 1, 22, false),
                $comment: J$.T(12377, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(14873, 'Part', J$.T(14865, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(14809, arguments.callee, this, arguments);
                            arguments = J$.N(14817, 'arguments', arguments, true, false, false);
                            field = J$.N(14825, 'field', field, true, false, false);
                            operator = J$.N(14833, 'operator', operator, true, false, false);
                            operand = J$.N(14841, 'operand', operand, true, false, false);
                            parts = J$.N(14849, 'parts', parts, true, false, false);
                            implicitField = J$.N(14857, 'implicitField', implicitField, true, false, false);
                            if (J$.C(904, J$.B(1378, '===', J$.R(14657, 'parts', parts, false, false), J$.T(14665, undefined, 24, false))))
                                parts = J$.W(14681, 'parts', J$.T(14673, [], 10, false), parts, false, false);
                            J$.P(14705, J$.R(14689, 'this', this, false, false), 'field', J$.R(14697, 'field', field, false, false));
                            J$.P(14729, J$.R(14713, 'this', this, false, false), 'operator', J$.R(14721, 'operator', operator, false, false));
                            J$.P(14753, J$.R(14737, 'this', this, false, false), 'operand', J$.R(14745, 'operand', operand, false, false));
                            J$.P(14777, J$.R(14761, 'this', this, false, false), 'parts', J$.R(14769, 'parts', parts, false, false));
                            J$.P(14801, J$.R(14785, 'this', this, false, false), 'implicitField', J$.R(14793, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(15257, J$e);
                        } finally {
                            if (J$.Fr(15265))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(15273, J$e);
        } finally {
            if (J$.Sr(15281))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

