/*
watcher.js 2.5.3- app watcher
Built on 2015-10-20
*/
"use strict";process.env.NODE_TLS_REJECT_UNAUTHORIZED="0";var net=require("net"),http=require("http"),https=require("https"),events=require("events"),_=require("underscore"),s=require("underscore.string"),stampit=require("stampit"),resolvers=require("./resolvers"),constants=require("./constants"),logger=require("./logger"),utils=require("./utils"),eventDispatcher=utils.eventDispatcher,onConnectionResolutionFactory=resolvers.onConnectionResolutionFactory,statusResolverFactory=resolvers.statusResolverFactory,down=constants.serviceStatus.down,unreachable=constants.serviceStatus.unreachable,undetermined=constants.serviceStatus.undetermined,resolvedEv=constants.resolverEvents.resolved,errorEv=constants.streamEvents.error,dataEv=constants.streamEvents.data,endEv=constants.streamEvents.end,closeEv=constants.streamEvents.close,abstractConnector,socketConnector,socketConnectorFactory,httpConnector,httpConnectorFactory;abstractConnector=stampit.compose(eventDispatcher,stampit().state({options:void 0,resolver:void 0,emitter:void 0}).enclose(function(){var a=this;a.addStatusResolvedListener(function(b,c){a.stop()})}).methods({addStatusResolvedListener:function(a){this.resolver.on(resolvedEv,a)},removeStatusResolvedListeners:function(){this.resolver.removeAllListeners(resolvedEv)},_reset:function(){this.resolver.reset()},start:function(){throw"abstractServiceHandler, start method: implementation needed"},stop:function(){throw"abstractServiceHandler, stop method: implementation needed"}})),socketConnector=stampit.compose(abstractConnector,stampit().methods({start:function(){var a=this.options,b=!1,c=this.resolver;this._reset();var d=this.client=net.connect(a,function(){b=!0,logger.debug("Connection established for host: "+a.host+" at port: "+a.port),c.consumeAndResolve(d)});d.setEncoding("utf8"),d.on(dataEv,function(a){c.consumeAndResolve(d,a)}),d.on(errorEv,function(a){logger.error("Connection Error: "+a.message),c.resolved(unreachable)}),d.setTimeout(a.timeout,function(){logger.warn("Timeout elapsed: "+a.timeout+", closing the connection..."),b?c.resolved():c.resolved(unreachable)}),d.on(endEv,function(){logger.info("The remote host has closed the connection."),c.resolved(),d.end()}),d.on(closeEv,function(a){logger.debug("Connection is closed.")})},stop:function(){logger.debug("Stopping handler..."),this.client.destroy()}})),socketConnectorFactory={create:function(a){var b={port:9999,host:"localhost",timeout:5e3,resolutionStrategy:onConnectionResolutionFactory.create()};a=a||{},_.defaults(a,b);var c=statusResolverFactory.create(a.resolutionStrategy);return socketConnector.create({emitter:new events.EventEmitter,options:a,resolver:c})}},httpConnector=stampit.compose(abstractConnector,stampit().methods({start:function(){var a=this.options,b=!1,c=[404,500],d=302,e=this.resolver,f=a.url,g=http;"https"===f.split(":")[0]&&(g=https),this._reset();var h=this.request=g.get(f,function(a){a.setEncoding("utf8");var g=a.statusCode;logger.debug("Receiving response from: "+f+" with http status code: "+g),_.contains(c,g)?e.resolved(down):(s.startsWith(g,"4")||s.startsWith(g,"5")||d===g)&&e.resolved(undetermined),a.on(dataEv,function(a){logger.debug("Receiving data from: "+f),b=!0,e.consumeAndResolve(h,a)}),a.on(endEv,function(){logger.debug("Connection is closed."),e.resolved()})});h.setTimeout(a.timeout,function(){logger.warn("Timeout elapsed: "+a.timeout+", aborting request..."),b?e.resolved():e.resolved(unreachable)}),h.on(errorEv,function(a){logger.error("Connection error: "+a.message),e.resolved(unreachable)})},stop:function(){logger.debug("Stopping handler..."),this.request.abort()}})),httpConnectorFactory={create:function(a){var b={url:"http://localhost:8080",timeout:5e3,resolutionStrategy:void 0};a=a||{},_.defaults(a,b);var c=statusResolverFactory.create(a.resolutionStrategy);return httpConnector.create({emitter:new events.EventEmitter,options:a,resolver:c})}},module.exports={socketConnectorFactory:socketConnectorFactory,httpConnectorFactory:httpConnectorFactory};