"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.dom-collections.for-each");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function (root, factory) {
  module.exports = factory();
})(void 0, function () {
  return function () {
    var fs = require('fs');

    var accessDataDir = function accessDataDir(datadir) {
      return new Promise(function (resolve, reject) {
        fs.lstat(datadir, function (err, stats) {
          if (err) {
            reject({
              message: 'Dir does not exist'
            });
          }

          resolve(stats);
        });
      });
    };

    var saveRecord = function saveRecord(coll, obj, dir) {
      console.log("File is ".concat(dir, "/").concat(coll, "/").concat(obj.$loki, ".json"));
      fs.writeFile("".concat(dir, "/").concat(coll, "/").concat(obj.$loki, ".json"), JSON.stringify(obj), {
        encoding: 'utf8'
      }, function (err) {
        if (err) {
          console.log('Document save failed.');
          throw err;
        }

        console.log('Document saved correctly');
      });
    };

    var iterateFolders = function iterateFolders(db, dir) {
      console.log("Colls: ".concat(db.listCollections().length));
      console.log("Changes: ".concat(db.generateChangesNotification().length));
      db.generateChangesNotification().forEach(function (change) {
        saveRecord(change.name, change.obj, dir);
      });
    };

    var LokiIncrementalAdapter =
    /*#__PURE__*/
    function () {
      function LokiIncrementalAdapter(options) {
        _classCallCheck(this, LokiIncrementalAdapter);

        var config = options || {
          journaling: false,
          format: 'json'
        };
        this.mode = 'reference';
        this.journaling = config.journaling;
        this.format = config.format;
      }

      _createClass(LokiIncrementalAdapter, [{
        key: "checkAvailability",
        value: function checkAvailability() {
          if (typeof fs !== 'undefined' && fs) return true;
          return false;
        }
      }, {
        key: "exportDatabase",
        value: function exportDatabase(dir, dbref, callback) {
          console.log('Saving with incremental adapter');
          console.log('Database dir is ' + dir);
          var promise = accessDataDir(dir);
          console.log(promise);
          promise.then(function () {
            console.log('iterating folders...');
            iterateFolders(dbref, dir);
          });
          promise["catch"](function (err) {
            console.log(err);
          });

          if (callback) {
            callback();
          }
        }
      }, {
        key: "loadDatabase",
        value: function loadDatabase(dbname, callback) {
          console.log(this, dbname, callback);
        }
      }]);

      return LokiIncrementalAdapter;
    }();

    return LokiIncrementalAdapter;
  }();
});