"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t, i) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t = t || self).tinyLru = i();
}(void 0, function () {
  "use strict";

  var t =
  /*#__PURE__*/
  function () {
    function t() {
      _classCallCheck(this, t);

      var _t2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.first = null, this.items = {}, this.last = null, this.max = _t2, this.size = 0, this.ttl = i;
    }

    _createClass(t, [{
      key: "has",
      value: function has(t) {
        return t in this.items;
      }
    }, {
      key: "clear",
      value: function clear() {
        return this.first = null, this.items = {}, this.last = null, this.size = 0, this;
      }
    }, {
      key: "delete",
      value: function _delete(t) {
        if (this.has(t)) {
          var i = this.items[t];
          delete this.items[t], this.size--, null !== i.prev && (i.prev.next = i.next), null !== i.next && (i.next.prev = i.prev), this.first === i && (this.first = i.next), this.last === i && (this.last = i.prev);
        }

        return this;
      }
    }, {
      key: "evict",
      value: function evict() {
        var t = this.first;
        return delete this.items[t.key], this.first = t.next, this.first.prev = null, this.size--, this;
      }
    }, {
      key: "get",
      value: function get(t) {
        var i;

        if (this.has(t)) {
          var s = this.items[t];
          this.ttl > 0 && s.expiry <= new Date().getTime() ? this["delete"](t) : (i = s.value, this.set(t, i, !0));
        }

        return i;
      }
    }, {
      key: "keys",
      value: function keys() {
        return Object.keys(this.items);
      }
    }, {
      key: "set",
      value: function set(t, i) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        var e;

        if (s || this.has(t)) {
          if ((e = this.items[t]).value = i, this.last !== e) {
            var _t = this.last,
                _i = e.next,
                _s = e.prev;
            this.first === e && (this.first = e.next), e.next = null, e.prev = this.last, _t.next = e, null !== _s && (_s.next = _i), null !== _i && (_i.prev = _s);
          }
        } else this.max > 0 && this.size === this.max && this.evict(), e = this.items[t] = {
          expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl,
          key: t,
          prev: this.last,
          next: null,
          value: i
        }, 1 == ++this.size ? this.first = e : this.last.next = e;

        return this.last = e, this;
      }
    }]);

    return t;
  }();

  return function () {
    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1e3;
    var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (isNaN(i) || i < 0) throw new TypeError("Invalid max value");
    if (isNaN(s) || s < 0) throw new TypeError("Invalid ttl value");
    return new t(i, s);
  };
});