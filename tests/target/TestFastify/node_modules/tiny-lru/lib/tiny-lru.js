"use strict";

!function (t, i) {
  "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t = t || self).tinyLru = i();
}(void 0, function () {
  "use strict";

  class t {
    constructor() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.first = null, this.items = {}, this.last = null, this.max = t, this.size = 0, this.ttl = i;
    }

    has(t) {
      return t in this.items;
    }

    clear() {
      return this.first = null, this.items = {}, this.last = null, this.size = 0, this;
    }

    delete(t) {
      if (this.has(t)) {
        var i = this.items[t];
        delete this.items[t], this.size--, null !== i.prev && (i.prev.next = i.next), null !== i.next && (i.next.prev = i.prev), this.first === i && (this.first = i.next), this.last === i && (this.last = i.prev);
      }

      return this;
    }

    evict() {
      var t = this.first;
      return delete this.items[t.key], this.first = t.next, this.first.prev = null, this.size--, this;
    }

    get(t) {
      var i;

      if (this.has(t)) {
        var s = this.items[t];
        this.ttl > 0 && s.expiry <= new Date().getTime() ? this.delete(t) : (i = s.value, this.set(t, i, !0));
      }

      return i;
    }

    keys() {
      return Object.keys(this.items);
    }

    set(t, i) {
      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
      var e;

      if (s || this.has(t)) {
        if ((e = this.items[t]).value = i, this.last !== e) {
          var _t = this.last,
              _i = e.next,
              _s = e.prev;
          this.first === e && (this.first = e.next), e.next = null, e.prev = this.last, _t.next = e, null !== _s && (_s.next = _i), null !== _i && (_i.prev = _s);
        }
      } else this.max > 0 && this.size === this.max && this.evict(), e = this.items[t] = {
        expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl,
        key: t,
        prev: this.last,
        next: null,
        value: i
      }, 1 == ++this.size ? this.first = e : this.last.next = e;

      return this.last = e, this;
    }

  }

  return function () {
    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1e3;
    var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (isNaN(i) || i < 0) throw new TypeError("Invalid max value");
    if (isNaN(s) || s < 0) throw new TypeError("Invalid ttl value");
    return new t(i, s);
  };
});