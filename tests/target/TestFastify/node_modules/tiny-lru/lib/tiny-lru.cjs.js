'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var LRU =
/*#__PURE__*/
function () {
  function LRU() {
    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var ttl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, LRU);

    this.first = null;
    this.items = {};
    this.last = null;
    this.max = max;
    this.size = 0;
    this.ttl = ttl;
  }

  _createClass(LRU, [{
    key: "has",
    value: function has(key) {
      return key in this.items;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.first = null;
      this.items = {};
      this.last = null;
      this.size = 0;
      return this;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      if (this.has(key)) {
        var item = this.items[key];
        delete this.items[key];
        this.size--;

        if (item.prev !== null) {
          item.prev.next = item.next;
        }

        if (item.next !== null) {
          item.next.prev = item.prev;
        }

        if (this.first === item) {
          this.first = item.next;
        }

        if (this.last === item) {
          this.last = item.prev;
        }
      }

      return this;
    }
  }, {
    key: "evict",
    value: function evict() {
      var item = this.first;
      delete this.items[item.key];
      this.first = item.next;
      this.first.prev = null;
      this.size--;
      return this;
    }
  }, {
    key: "get",
    value: function get(key) {
      var result;

      if (this.has(key)) {
        var item = this.items[key];

        if (this.ttl > 0 && item.expiry <= new Date().getTime()) {
          this["delete"](key);
        } else {
          result = item.value;
          this.set(key, result, true);
        }
      }

      return result;
    }
  }, {
    key: "keys",
    value: function keys() {
      return Object.keys(this.items);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var bypass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var item;

      if (bypass || this.has(key)) {
        item = this.items[key];
        item.value = value;

        if (this.last !== item) {
          var last = this.last,
              next = item.next,
              prev = item.prev;

          if (this.first === item) {
            this.first = item.next;
          }

          item.next = null;
          item.prev = this.last;
          last.next = item;

          if (prev !== null) {
            prev.next = next;
          }

          if (next !== null) {
            next.prev = prev;
          }
        }
      } else {
        if (this.max > 0 && this.size === this.max) {
          this.evict();
        }

        item = this.items[key] = {
          expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl,
          key: key,
          prev: this.last,
          next: null,
          value: value
        };

        if (++this.size === 1) {
          this.first = item;
        } else {
          this.last.next = item;
        }
      }

      this.last = item;
      return this;
    }
  }]);

  return LRU;
}();

function factory() {
  var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
  var ttl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (isNaN(max) || max < 0) {
    throw new TypeError("Invalid max value");
  }

  if (isNaN(ttl) || ttl < 0) {
    throw new TypeError("Invalid ttl value");
  }

  return new LRU(max, ttl);
}

module.exports = factory;