'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('Parametric and static with shared prefix / 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.equal(params.param, 'winter');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/winter',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix / 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.ok('we should be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/woo',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix (nested)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.ok('We should be here');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/winter/coming',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix and different suffix', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('We should not be here');
    }
  });
  findMyWay.on('GET', '/example/shared/nested/test', function (req, res, params) {
    t.fail('We should not be here');
  });
  findMyWay.on('GET', '/example/:param/nested/other', function (req, res, params) {
    t.ok('We should be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/example/shared/nested/other',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix (with wildcard)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.equal(params.param, 'winter');
  });
  findMyWay.on('GET', '/*', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/winter',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix (nested with wildcard)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/*', function (req, res, params) {
    t.equal(params['*'], 'winter/coming');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/winter/coming',
    headers: {}
  }, null);
});
test('Parametric and static with shared prefix (nested with split)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.on('GET', '/:param', function (req, res, params) {
    t.equal(params.param, 'winter');
  });
  findMyWay.on('GET', '/wo', function (req, res, params) {
    t.fail('we should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/winter',
    headers: {}
  }, null);
});