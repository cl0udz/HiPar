'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('pretty print - static routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/hello', function () {});
  findMyWay.on('GET', '/hello/world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = `└── /
    ├── test (GET)
    │   └── /hello (GET)
    └── hello/world (GET)
`;
  t.is(typeof tree, 'string');
  t.equal(tree, expected);
});
test('pretty print - parametric routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/:hello', function () {});
  findMyWay.on('GET', '/hello/:world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = `└── /
    ├── test (GET)
    │   └── /
    │       └── :hello (GET)
    └── hello/
        └── :world (GET)
`;
  t.is(typeof tree, 'string');
  t.equal(tree, expected);
});
test('pretty print - mixed parametric routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/:hello', function () {});
  findMyWay.on('POST', '/test/:hello', function () {});
  findMyWay.on('GET', '/test/:hello/world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = `└── /
    └── test (GET)
        └── /
            └── :hello (GET)
                :hello (POST)
                └── /world (GET)
`;
  t.is(typeof tree, 'string');
  t.equal(tree, expected);
});
test('pretty print - wildcard routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/*', function () {});
  findMyWay.on('GET', '/hello/*', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = `└── /
    ├── test (GET)
    │   └── /
    │       └── * (GET)
    └── hello/
        └── * (GET)
`;
  t.is(typeof tree, 'string');
  t.equal(tree, expected);
});
test('pretty print - parametric routes with same parent and followed by a static route which has the same prefix with the former routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/hello/:id', function () {});
  findMyWay.on('POST', '/test/hello/:id', function () {});
  findMyWay.on('GET', '/test/helloworld', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = `└── /
    └── test (GET)
        └── /hello
            ├── /
            │   └── :id (GET)
            │       :id (POST)
            └── world (GET)
`;
  t.is(typeof tree, 'string');
  t.equal(tree, expected);
});