'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('pretty print - static routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/hello', function () {});
  findMyWay.on('GET', '/hello/world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /hello (GET)\n    \u2514\u2500\u2500 hello/world (GET)\n";
  t.is(_typeof(tree), 'string');
  t.equal(tree, expected);
});
test('pretty print - parametric routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/:hello', function () {});
  findMyWay.on('GET', '/hello/:world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /\n    \u2502       \u2514\u2500\u2500 :hello (GET)\n    \u2514\u2500\u2500 hello/\n        \u2514\u2500\u2500 :world (GET)\n";
  t.is(_typeof(tree), 'string');
  t.equal(tree, expected);
});
test('pretty print - mixed parametric routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/:hello', function () {});
  findMyWay.on('POST', '/test/:hello', function () {});
  findMyWay.on('GET', '/test/:hello/world', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = "\u2514\u2500\u2500 /\n    \u2514\u2500\u2500 test (GET)\n        \u2514\u2500\u2500 /\n            \u2514\u2500\u2500 :hello (GET)\n                :hello (POST)\n                \u2514\u2500\u2500 /world (GET)\n";
  t.is(_typeof(tree), 'string');
  t.equal(tree, expected);
});
test('pretty print - wildcard routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/*', function () {});
  findMyWay.on('GET', '/hello/*', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /\n    \u2502       \u2514\u2500\u2500 * (GET)\n    \u2514\u2500\u2500 hello/\n        \u2514\u2500\u2500 * (GET)\n";
  t.is(_typeof(tree), 'string');
  t.equal(tree, expected);
});
test('pretty print - parametric routes with same parent and followed by a static route which has the same prefix with the former routes', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {});
  findMyWay.on('GET', '/test/hello/:id', function () {});
  findMyWay.on('POST', '/test/hello/:id', function () {});
  findMyWay.on('GET', '/test/helloworld', function () {});
  var tree = findMyWay.prettyPrint();
  var expected = "\u2514\u2500\u2500 /\n    \u2514\u2500\u2500 test (GET)\n        \u2514\u2500\u2500 /hello\n            \u251C\u2500\u2500 /\n            \u2502   \u2514\u2500\u2500 :id (GET)\n            \u2502       :id (POST)\n            \u2514\u2500\u2500 world (GET)\n";
  t.is(_typeof(tree), 'string');
  t.equal(tree, expected);
});