'use strict';

var t = require('tap');

var test = t.test;

var http = require('http');

var request = require('request');

var FindMyWay = require('../');

test('basic router with http server', function (t) {
  t.plan(7);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.ok(params);
    res.end(JSON.stringify({
      hello: 'world'
    }));
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port + '/test'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('router with params with http server', function (t) {
  t.plan(7);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.is(params.id, 'hello');
    res.end(JSON.stringify({
      hello: 'world'
    }));
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port + '/test/hello'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('default route', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      res.statusCode = 404;
      res.end();
    }
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('automatic default route', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay();
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('maps two routes when trailing slash should be trimmed', function (t) {
  t.plan(25);
  var findMyWay = FindMyWay({
    ignoreTrailingSlash: true
  });
  findMyWay.on('GET', '/test/', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.ok(params);
    res.end('test');
  });
  findMyWay.on('GET', '/othertest', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.ok(params);
    res.end('othertest');
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    var baseURL = 'http://localhost:' + server.address().port;
    request({
      method: 'GET',
      uri: baseURL + '/test/'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'test');
    });
    request({
      method: 'GET',
      uri: baseURL + '/test'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'test');
    });
    request({
      method: 'GET',
      uri: baseURL + '/othertest'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'othertest');
    });
    request({
      method: 'GET',
      uri: baseURL + '/othertest/'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'othertest');
    });
  });
});
test('does not trim trailing slash when ignoreTrailingSlash is false', function (t) {
  t.plan(9);
  var findMyWay = FindMyWay({
    ignoreTrailingSlash: false
  });
  findMyWay.on('GET', '/test/', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.ok(params);
    res.end('test');
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    var baseURL = 'http://localhost:' + server.address().port;
    request({
      method: 'GET',
      uri: baseURL + '/test/'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'test');
    });
    request({
      method: 'GET',
      uri: baseURL + '/test'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('does not map // when ignoreTrailingSlash is true', function (t) {
  t.plan(9);
  var findMyWay = FindMyWay({
    ignoreTrailingSlash: false
  });
  findMyWay.on('GET', '/', function (req, res, params) {
    t.ok(req);
    t.ok(res);
    t.ok(params);
    res.end('test');
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    var baseURL = 'http://localhost:' + server.address().port;
    request({
      method: 'GET',
      uri: baseURL + '/'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body, 'test');
    });
    request({
      method: 'GET',
      uri: baseURL + '//'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('versioned routes', function (t) {
  t.plan(5);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', {
    version: '1.2.3'
  }, function (req, res, params) {
    res.end('ok');
  });
  var server = http.createServer(function (req, res) {
    findMyWay.lookup(req, res);
  });
  server.listen(0, function (err) {
    t.error(err);
    server.unref();
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port + '/test',
      headers: {
        'Accept-Version': '1.x'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
    request({
      method: 'GET',
      uri: 'http://localhost:' + server.address().port + '/test',
      headers: {
        'Accept-Version': '2.x'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});