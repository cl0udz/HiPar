'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('wildcard (more complex test)', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '/test/*', function (req, res, params) {
    switch (params['*']) {
      case 'hello':
        t.ok('correct parameter');
        break;

      case 'hello/world':
        t.ok('correct parameter');
        break;

      case '':
        t.ok('correct parameter');
        break;

      default:
        t.fail('wrong parameter: ' + params['*']);
    }
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello/world',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/',
    headers: {}
  }, null);
});
test('Wildcard inside a node with a static route but different method', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '/test/hello', function (req, res, params) {
    t.is(req.method, 'GET');
  });
  findMyWay.on('OPTIONS', '/*', function (req, res, params) {
    t.is(req.method, 'OPTIONS');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('Wildcard inside a node with a static route but different method (more complex case)', function (t) {
  t.plan(5);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      if (req.url === '/test/helloo' && req.method === 'GET') {
        t.ok('Everything fine');
      } else {
        t.fail('we should not be here, the url is: ' + req.url);
      }
    }
  });
  findMyWay.on('GET', '/test/hello', function (req, res, params) {
    t.is(req.method, 'GET');
  });
  findMyWay.on('OPTIONS', '/*', function (req, res, params) {
    t.is(req.method, 'OPTIONS');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/helloo',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test/',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test/helloo',
    headers: {}
  }, null);
});
test('Wildcard edge cases', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '/test1/foo', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/test2/foo', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('OPTIONS', '/*', function (req, res, params) {
    t.is(params['*'], 'test1/foo');
  });
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test1/foo',
    headers: {}
  }, null);
});
test('Wildcard edge cases same method', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('OPTIONS', '/test1/foo', function (req, res, params) {
    t.is(req.method, 'OPTIONS');
  });
  findMyWay.on('OPTIONS', '/test2/foo', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('OPTIONS', '/*', function (req, res, params) {
    t.is(params['*'], 'test/foo');
  });
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test1/foo',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test/foo',
    headers: {}
  }, null);
});
test('Wildcard and parametric edge cases', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('OPTIONS', '/test1/foo', function (req, res, params) {
    t.is(req.method, 'OPTIONS');
  });
  findMyWay.on('OPTIONS', '/test2/foo', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/:test/foo', function (req, res, params) {
    t.is(params.test, 'example');
  });
  findMyWay.on('OPTIONS', '/*', function (req, res, params) {
    t.is(params['*'], 'test/foo/hey');
  });
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test1/foo',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test/foo/hey',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/example/foo',
    headers: {}
  }, null);
});
test('Mixed wildcard and static with same method', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '/foo1/bar1/baz', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/bar2/baz', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/bar2/baz', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.is(params['*'], '/foo1/bar1/kuux');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/bar1/kuux',
    headers: {}
  }, null);
});
test('Nested wildcards case - 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.is(params['*'], 'bar1/kuux');
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/bar1/kuux',
    headers: {}
  }, null);
});
test('Nested wildcards case - 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.is(params['*'], 'bar1/kuux');
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/bar1/kuux',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.is(params['*'], 'bar1/kuux');
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo4/param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/bar1/kuux',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.is(params.param, 'bar1');
  });
  findMyWay.on('GET', '/foo4/param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo3/bar1',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 3', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo4/param', function (req, res, params) {
    t.is(req.url, '/foo4/param');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo4/param',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 4', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/param', function (req, res, params) {
    t.is(req.url, '/foo1/param');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/param',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 5', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.is(params['*'], 'param/hello/test/long/routee');
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/param/hello/test/long/route', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo1/param/hello/test/long/routee',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 6', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.is(params['*'], '/foo4/param/hello/test/long/routee');
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo4/param/hello/test/long/route', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo4/param/hello/test/long/routee',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 7', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.is(params.param, 'hello');
  });
  findMyWay.on('GET', '/foo3/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo4/example/hello/test/long/route', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo3/hello',
    headers: {}
  }, null);
});
test('Nested wildcards with parametric and static - 8', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo1/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo2/*', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/:param', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.on('GET', '/foo3/*', function (req, res, params) {
    t.is(params['*'], 'hello/world');
  });
  findMyWay.on('GET', '/foo4/param/hello/test/long/route', function (req, res, params) {
    t.fail('we should not be here, the url is: ' + req.url);
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo3/hello/world',
    headers: {}
  }, null);
});