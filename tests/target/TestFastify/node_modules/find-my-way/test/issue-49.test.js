'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

var noop = function noop() {};

test('Defining static route after parametric - 1', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/static', noop);
  findMyWay.on('GET', '/:param', noop);
  t.ok(findMyWay.find('GET', '/static'));
  t.ok(findMyWay.find('GET', '/para'));
  t.ok(findMyWay.find('GET', '/s'));
});
test('Defining static route after parametric - 2', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/:param', noop);
  findMyWay.on('GET', '/static', noop);
  t.ok(findMyWay.find('GET', '/static'));
  t.ok(findMyWay.find('GET', '/para'));
  t.ok(findMyWay.find('GET', '/s'));
});
test('Defining static route after parametric - 3', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/:param', noop);
  findMyWay.on('GET', '/static', noop);
  findMyWay.on('GET', '/other', noop);
  t.ok(findMyWay.find('GET', '/static'));
  t.ok(findMyWay.find('GET', '/para'));
  t.ok(findMyWay.find('GET', '/s'));
  t.ok(findMyWay.find('GET', '/o'));
});
test('Defining static route after parametric - 4', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/static', noop);
  findMyWay.on('GET', '/other', noop);
  findMyWay.on('GET', '/:param', noop);
  t.ok(findMyWay.find('GET', '/static'));
  t.ok(findMyWay.find('GET', '/para'));
  t.ok(findMyWay.find('GET', '/s'));
  t.ok(findMyWay.find('GET', '/o'));
});
test('Defining static route after parametric - 5', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/static', noop);
  findMyWay.on('GET', '/:param', noop);
  findMyWay.on('GET', '/other', noop);
  t.ok(findMyWay.find('GET', '/static'));
  t.ok(findMyWay.find('GET', '/para'));
  t.ok(findMyWay.find('GET', '/s'));
  t.ok(findMyWay.find('GET', '/o'));
});
test('Should produce the same tree - 1', function (t) {
  t.plan(1);
  var findMyWay1 = FindMyWay();
  var findMyWay2 = FindMyWay();
  findMyWay1.on('GET', '/static', noop);
  findMyWay1.on('GET', '/:param', noop);
  findMyWay2.on('GET', '/:param', noop);
  findMyWay2.on('GET', '/static', noop);
  t.deepEqual(findMyWay1.tree, findMyWay2.tree);
});
test('Should produce the same tree - 2', function (t) {
  t.plan(3);
  var findMyWay1 = FindMyWay();
  var findMyWay2 = FindMyWay();
  var findMyWay3 = FindMyWay();
  findMyWay1.on('GET', '/:param', noop);
  findMyWay1.on('GET', '/static', noop);
  findMyWay1.on('GET', '/other', noop);
  findMyWay2.on('GET', '/static', noop);
  findMyWay2.on('GET', '/:param', noop);
  findMyWay2.on('GET', '/other', noop);
  findMyWay3.on('GET', '/static', noop);
  findMyWay3.on('GET', '/other', noop);
  findMyWay3.on('GET', '/:param', noop);
  t.deepEqual(findMyWay1.tree, findMyWay2.tree);
  t.deepEqual(findMyWay2.tree, findMyWay3.tree);
  t.deepEqual(findMyWay1.tree, findMyWay3.tree);
});