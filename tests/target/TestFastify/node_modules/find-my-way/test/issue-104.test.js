'use strict';

require("core-js/modules/es.array.find");

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

var Node = require('../node');

test('Nested static parametric route, url with parameter common prefix > 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/bbbb', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/a/bbaa', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/a/babb', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('DELETE', '/a/:id', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  t.deepEqual(findMyWay.find('DELETE', '/a/bbar').params, {
    id: 'bbar'
  });
});
test('Parametric route, url with parameter common prefix > 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/aaa', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/aabb', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/abc', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/:id', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  t.deepEqual(findMyWay.find('GET', '/aab').params, {
    id: 'aab'
  });
});
test('Parametric route, url with multi parameter common prefix > 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/:id/aaa/:id2', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/:id/aabb/:id2', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/:id/abc/:id2', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  findMyWay.on('GET', '/:a/:b', function (req, res) {
    res.end('{"message":"hello world"}');
  });
  t.deepEqual(findMyWay.find('GET', '/hello/aab').params, {
    a: 'hello',
    b: 'aab'
  });
});
test('Mixed routes, url with parameter common prefix > 1', function (t) {
  t.plan(11);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/test', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/testify', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello/test', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/te/:a', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello/:b', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/:c', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/text/hello', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/text/:d', function (req, res, params) {
    res.end('{"winter":"is here"}');
  });
  findMyWay.on('GET', '/text/:e/test', function (req, res, params) {
    res.end('{"winter":"is here"}');
  });
  t.deepEqual(findMyWay.find('GET', '/test').params, {});
  t.deepEqual(findMyWay.find('GET', '/testify').params, {});
  t.deepEqual(findMyWay.find('GET', '/test/hello').params, {});
  t.deepEqual(findMyWay.find('GET', '/test/hello/test').params, {});
  t.deepEqual(findMyWay.find('GET', '/te/hello').params, {
    a: 'hello'
  });
  t.deepEqual(findMyWay.find('GET', '/te/').params, {
    a: ''
  });
  t.deepEqual(findMyWay.find('GET', '/testy').params, {
    c: 'testy'
  });
  t.deepEqual(findMyWay.find('GET', '/besty').params, {
    c: 'besty'
  });
  t.deepEqual(findMyWay.find('GET', '/text/hellos/test').params, {
    e: 'hellos'
  });
  t.deepEqual(findMyWay.find('GET', '/te/hello/'), null);
  t.deepEqual(findMyWay.find('GET', '/te/hellos/testy'), null);
});
test('Mixed parametric routes, with last defined route being static', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/test', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/:a', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello/:b', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello/:c/test', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/hello/:c/:k', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  findMyWay.on('GET', '/test/world', function (req, res, params) {
    res.end('{"hello":"world"}');
  });
  t.deepEqual(findMyWay.find('GET', '/test/hello').params, {
    a: 'hello'
  });
  t.deepEqual(findMyWay.find('GET', '/test/hello/world/test').params, {
    c: 'world'
  });
  t.deepEqual(findMyWay.find('GET', '/test/hello/world/te').params, {
    c: 'world',
    k: 'te'
  });
  t.deepEqual(findMyWay.find('GET', '/test/hello/world/testy').params, {
    c: 'world',
    k: 'testy'
  });
});
test('parametricBrother of Parent Node, with a parametric child', function (t) {
  t.plan(1);
  var parent = new Node({
    prefix: '/a'
  });
  var parametricChild = new Node({
    prefix: ':id',
    kind: parent.types.PARAM
  });
  parent.addChild(parametricChild);
  t.equal(parent.parametricBrother, null);
});
test('parametricBrother of Parent Node, with a parametric child and a static child', function (t) {
  t.plan(1);
  var parent = new Node({
    prefix: '/a'
  });
  var parametricChild = new Node({
    prefix: ':id',
    kind: parent.types.PARAM
  });
  var staticChild = new Node({
    prefix: '/b',
    kind: parent.types.STATIC
  });
  parent.addChild(parametricChild);
  parent.addChild(staticChild);
  t.equal(parent.parametricBrother, null);
});