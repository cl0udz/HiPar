'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

var _require = require('tap'),
    test = _require.test;

var FindMyWay = require('../');

function initializeRoutes(router, handler, quantity) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Array(quantity).keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var x = _step.value;
      router.on('GET', '/test-route-' + x, handler);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return router;
}

test('verify routes registered', function (t) {
  var quantity = 5; // 1 (check length) + quantity of routes * quantity of tests per route

  t.plan(1 + quantity * 1);
  var findMyWay = FindMyWay();

  var defaultHandler = function defaultHandler(req, res, params) {
    return res.end(JSON.stringify({
      hello: 'world'
    }));
  };

  findMyWay = initializeRoutes(findMyWay, defaultHandler, quantity);
  t.strictEqual(findMyWay.routes.length, quantity);
  findMyWay.routes.map(function (route, idx) {
    t.deepEqual(route, {
      method: 'GET',
      path: '/test-route-' + idx,
      opts: {},
      handler: defaultHandler,
      store: undefined
    });
  });
});
test('verify routes registered and deregister', function (t) {
  // 1 (check length) + quantity of routes * quantity of tests per route
  t.plan(2);
  var findMyWay = FindMyWay();
  var quantity = 2;

  var defaultHandler = function defaultHandler(req, res, params) {
    return res.end(JSON.stringify({
      hello: 'world'
    }));
  };

  findMyWay = initializeRoutes(findMyWay, defaultHandler, quantity);
  t.strictEqual(findMyWay.routes.length, quantity);
  findMyWay.off('GET', '/test-route-0');
  t.strictEqual(findMyWay.routes.length, quantity - 1);
});