'use strict';

var http = require('http');

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

t.test('should support shorthand', function (t) {
  t.plan(http.METHODS.length);

  var _loop = function _loop() {
    var m = http.METHODS[i];
    var methodName = m.toLowerCase();
    t.test('`.' + methodName + '`', function (t) {
      t.plan(1);
      var findMyWay = FindMyWay();
      findMyWay[methodName]('/test', function () {
        t.ok('inside the handler');
      });
      findMyWay.lookup({
        method: m,
        url: '/test',
        headers: {}
      }, null);
    });
  };

  for (var i in http.METHODS) {
    _loop();
  }
});
test('should support `.all` shorthand', function (t) {
  t.plan(11);
  var findMyWay = FindMyWay();
  findMyWay.all('/test', function () {
    t.ok('inside the handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'DELETE',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'HEAD',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'PATCH',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'POST',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'PUT',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'OPTIONS',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'TRACE',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'CONNECT',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'COPY',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'SUBSCRIBE',
    url: '/test',
    headers: {}
  }, null);
});