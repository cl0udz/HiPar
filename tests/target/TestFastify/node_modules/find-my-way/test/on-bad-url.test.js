'use strict';

require("core-js/modules/es.array.find");

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('If onBadUrl is defined, then a bad url should be handled differently (find)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    },
    onBadUrl: function onBadUrl(path, req, res) {
      t.strictEqual(path, '/%world');
    }
  });
  findMyWay.on('GET', '/hello/:id', function (req, res) {
    t.fail('Should not be here');
  });
  var handle = findMyWay.find('GET', '/hello/%world');
  t.notStrictEqual(handle, null);
});
test('If onBadUrl is defined, then a bad url should be handled differently (lookup)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    },
    onBadUrl: function onBadUrl(path, req, res) {
      t.strictEqual(path, '%world');
    }
  });
  findMyWay.on('GET', '/hello/:id', function (req, res) {
    t.fail('Should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/hello/%world',
    headers: {}
  }, null);
});
test('If onBadUrl is not defined, then we should call the defaultRoute (find)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/hello/:id', function (req, res) {
    t.fail('Should not be here');
  });
  var handle = findMyWay.find('GET', '/hello/%world');
  t.strictEqual(handle, null);
});
test('If onBadUrl is not defined, then we should call the defaultRoute (lookup)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.pass('Everything fine');
    }
  });
  findMyWay.on('GET', '/hello/:id', function (req, res) {
    t.fail('Should not be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/hello/%world',
    headers: {}
  }, null);
});