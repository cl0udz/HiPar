'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('Parametric route, request.url contains dash', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:param/b', function (req, res, params) {
    t.equal(params.param, 'foo-bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar/b',
    headers: {}
  }, null);
});
test('Parametric route with fixed suffix', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:param-bar', function (req, res, params) {
    t.equal(params.param, 'foo');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar',
    headers: {}
  }, null);
});
test('Parametric route with regexp and fixed suffix / 1', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.ok('route not matched');
    }
  });
  findMyWay.on('GET', '/a/:param(^\\w{3})bar', function (req, res, params) {
    t.fail('regex match');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/$mebar',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foolol',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foobaz',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foolbar',
    headers: {}
  }, null);
});
test('Parametric route with regexp and fixed suffix / 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:param(^\\w{3})bar', function (req, res, params) {
    t.equal(params.param, 'foo');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foobar',
    headers: {}
  }, null);
});
test('Parametric route with regexp and fixed suffix / 3', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:param(^\\w{3}-\\w{3})foo', function (req, res, params) {
    t.equal(params.param, 'abc-def');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/abc-deffoo',
    headers: {}
  }, null);
});
test('Multi parametric route / 1', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar',
    headers: {}
  }, null);
});
test('Multi parametric route / 2', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'bar-baz');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar-baz',
    headers: {}
  }, null);
});
test('Multi parametric route / 3', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p_1-:$p', function (req, res, params) {
    t.equal(params.p_1, 'foo');
    t.equal(params.$p, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar',
    headers: {}
  }, null);
});
test('Multi parametric route / 4', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.pass('Everything good');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2', function (req, res, params) {
    t.fail('Should not match this route');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo',
    headers: {}
  }, null);
});
test('Multi parametric route with regexp / 1', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/at/:hour(^\\d+)h:minute(^\\d+)m', function (req, res, params) {
    t.equal(params.hour, '0');
    t.equal(params.minute, '42');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/at/0h42m',
    headers: {}
  }, null);
});
test('Multi parametric route with regexp / 2', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:uuid(^[\\d-]{19})-:user(^\\w+)', function (req, res, params) {
    t.equal(params.uuid, '1111-2222-3333-4444');
    t.equal(params.user, 'foo');
  });
  findMyWay.on('GET', '/a/:uuid(^[\\d-]{19})-:user(^\\w+)/account', function (req, res, params) {
    t.equal(params.uuid, '1111-2222-3333-4445');
    t.equal(params.user, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/1111-2222-3333-4444-foo',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/a/1111-2222-3333-4445-bar/account',
    headers: {}
  }, null);
});
test('Multi parametric route with fixed suffix', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2-baz', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar-baz',
    headers: {}
  }, null);
});
test('Multi parametric route with regexp and fixed suffix', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1(^\\w+)-:p2(^\\w+)-kuux', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'barbaz');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-barbaz-kuux',
    headers: {}
  }, null);
});
test('Multi parametric route with wildcard', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2/*', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar/baz',
    headers: {}
  }, null);
});
test('Nested multi parametric route', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1-:p2/b/:p3', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, 'bar');
    t.equal(params.p3, 'baz');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-bar/b/baz',
    headers: {}
  }, null);
});
test('Nested multi parametric route with regexp / 1', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1(^\\w{3})-:p2(^\\d+)/b/:p3', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, '42');
    t.equal(params.p3, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-42/b/bar',
    headers: {}
  }, null);
});
test('Nested multi parametric route with regexp / 2', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/a/:p1(^\\w{3})-:p2/b/:p3', function (req, res, params) {
    t.equal(params.p1, 'foo');
    t.equal(params.p2, '42');
    t.equal(params.p3, 'bar');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/a/foo-42/b/bar',
    headers: {}
  }, null);
});