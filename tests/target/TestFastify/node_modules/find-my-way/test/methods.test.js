'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('the router is an object with methods', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay();
  t.is(typeof findMyWay.on, 'function');
  t.is(typeof findMyWay.off, 'function');
  t.is(typeof findMyWay.lookup, 'function');
  t.is(typeof findMyWay.find, 'function');
});
test('on throws for invalid method', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  t.throws(function () {
    findMyWay.on('INVALID', '/a/b');
  });
});
test('on throws for invalid path', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay(); // Non string

  t.throws(function () {
    findMyWay.on('GET', 1);
  }); // Empty

  t.throws(function () {
    findMyWay.on('GET', '');
  }); // Doesn't start with / or *

  t.throws(function () {
    findMyWay.on('GET', 'invalid');
  });
});
test('register a route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function () {
    t.ok('inside the handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
});
test('register a route with multiple methods', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on(['GET', 'POST'], '/test', function () {
    t.ok('inside the handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'POST',
    url: '/test',
    headers: {}
  }, null);
});
test('does not register /test/*/ when ignoreTrailingSlash is true', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    ignoreTrailingSlash: true
  });
  findMyWay.on('GET', '/test/*', function () {});
  t.is(findMyWay.routes.filter(function (r) {
    return r.path.includes('/test');
  }).length, 1);
});
test('off throws for invalid method', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  t.throws(function () {
    findMyWay.off('INVALID', '/a/b');
  });
});
test('off throws for invalid path', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay(); // Non string

  t.throws(function () {
    findMyWay.off('GET', 1);
  }); // Empty

  t.throws(function () {
    findMyWay.off('GET', '');
  }); // Doesn't start with / or *

  t.throws(function () {
    findMyWay.off('GET', 'invalid');
  });
});
test('off with nested wildcards with parametric and static', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.fail('we should not be here, the url is: ' + req.url);
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.is(params['*'], '/foo2/first/second');
  });
  findMyWay.on('GET', '/foo1/*', function () {});
  findMyWay.on('GET', '/foo2/*', function () {});
  findMyWay.on('GET', '/foo3/:param', function () {});
  findMyWay.on('GET', '/foo3/*', function () {});
  findMyWay.on('GET', '/foo4/param/hello/test/long/route', function () {});
  var route1 = findMyWay.find('GET', '/foo3/first/second');
  t.is(route1.params['*'], 'first/second');
  findMyWay.off('GET', '/foo3/*');
  var route2 = findMyWay.find('GET', '/foo3/first/second');
  t.is(route2.params['*'], '/foo3/first/second');
  findMyWay.off('GET', '/foo2/*');
  findMyWay.lookup({
    method: 'GET',
    url: '/foo2/first/second',
    headers: {}
  }, null);
});
test('off removes all routes when ignoreTrailingSlash is true', function (t) {
  t.plan(6);
  var findMyWay = FindMyWay({
    ignoreTrailingSlash: true
  });
  findMyWay.on('GET', '/test1/', function () {});
  t.is(findMyWay.routes.length, 2);
  findMyWay.on('GET', '/test2', function () {});
  t.is(findMyWay.routes.length, 4);
  findMyWay.off('GET', '/test1');
  t.is(findMyWay.routes.length, 2);
  t.is(findMyWay.routes.filter(function (r) {
    return r.path === '/test2';
  }).length, 1);
  t.is(findMyWay.routes.filter(function (r) {
    return r.path === '/test2/';
  }).length, 1);
  findMyWay.off('GET', '/test2/');
  t.is(findMyWay.routes.length, 0);
});
test('deregister a route without children', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/a', function () {});
  findMyWay.on('GET', '/a/b', function () {});
  findMyWay.off('GET', '/a/b');
  t.ok(findMyWay.find('GET', '/a'));
  t.notOk(findMyWay.find('GET', '/a/b'));
});
test('deregister a route with children', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/a', function () {});
  findMyWay.on('GET', '/a/b', function () {});
  findMyWay.off('GET', '/a');
  t.notOk(findMyWay.find('GET', '/a'));
  t.ok(findMyWay.find('GET', '/a/b'));
});
test('deregister a route by method', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on(['GET', 'POST'], '/a', function () {});
  findMyWay.off('GET', '/a');
  t.notOk(findMyWay.find('GET', '/a'));
  t.ok(findMyWay.find('POST', '/a'));
});
test('deregister a route with multiple methods', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on(['GET', 'POST'], '/a', function () {});
  findMyWay.off(['GET', 'POST'], '/a');
  t.notOk(findMyWay.find('GET', '/a'));
  t.notOk(findMyWay.find('POST', '/a'));
});
test('reset a router', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on(['GET', 'POST'], '/a', function () {});
  findMyWay.reset();
  t.notOk(findMyWay.find('GET', '/a'));
  t.notOk(findMyWay.find('POST', '/a'));
});
test('default route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute() {
      t.ok('inside the default route');
    }
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
});
test('parametric route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    t.is(params.id, 'hello');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('multiple parametric route', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    t.is(params.id, 'hello');
  });
  findMyWay.on('GET', '/other-test/:id', function (req, res, params) {
    t.is(params.id, 'world');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/other-test/world',
    headers: {}
  }, null);
});
test('multiple parametric route with the same prefix', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    t.is(params.id, 'hello');
  });
  findMyWay.on('GET', '/test/:id/world', function (req, res, params) {
    t.is(params.id, 'world');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/world/world',
    headers: {}
  }, null);
});
test('nested parametric route', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:hello/test/:world', function (req, res, params) {
    t.is(params.hello, 'hello');
    t.is(params.world, 'world');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello/test/world',
    headers: {}
  }, null);
});
test('nested parametric route with same prefix', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test', function (req, res, params) {
    t.ok('inside route');
  });
  findMyWay.on('GET', '/test/:hello/test/:world', function (req, res, params) {
    t.is(params.hello, 'hello');
    t.is(params.world, 'world');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello/test/world',
    headers: {}
  }, null);
});
test('long route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/abc/def/ghi/lmn/opq/rst/uvz', function (req, res, params) {
    t.ok('inside long path');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def/ghi/lmn/opq/rst/uvz',
    headers: {}
  }, null);
});
test('long parametric route', function (t) {
  t.plan(3);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/abc/:def/ghi/:lmn/opq/:rst/uvz', function (req, res, params) {
    t.is(params.def, 'def');
    t.is(params.lmn, 'lmn');
    t.is(params.rst, 'rst');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def/ghi/lmn/opq/rst/uvz',
    headers: {}
  }, null);
});
test('long parametric route with common prefix', function (t) {
  t.plan(9);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/', function (req, res, params) {
    throw new Error('I shoul not be here');
  });
  findMyWay.on('GET', '/abc', function (req, res, params) {
    throw new Error('I shoul not be here');
  });
  findMyWay.on('GET', '/abc/:def', function (req, res, params) {
    t.is(params.def, 'def');
  });
  findMyWay.on('GET', '/abc/:def/ghi/:lmn', function (req, res, params) {
    t.is(params.def, 'def');
    t.is(params.lmn, 'lmn');
  });
  findMyWay.on('GET', '/abc/:def/ghi/:lmn/opq/:rst', function (req, res, params) {
    t.is(params.def, 'def');
    t.is(params.lmn, 'lmn');
    t.is(params.rst, 'rst');
  });
  findMyWay.on('GET', '/abc/:def/ghi/:lmn/opq/:rst/uvz', function (req, res, params) {
    t.is(params.def, 'def');
    t.is(params.lmn, 'lmn');
    t.is(params.rst, 'rst');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def/ghi/lmn',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def/ghi/lmn/opq/rst',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/abc/def/ghi/lmn/opq/rst/uvz',
    headers: {}
  }, null);
});
test('common prefix', function (t) {
  t.plan(4);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/f', function (req, res, params) {
    t.ok('inside route');
  });
  findMyWay.on('GET', '/ff', function (req, res, params) {
    t.ok('inside route');
  });
  findMyWay.on('GET', '/ffa', function (req, res, params) {
    t.ok('inside route');
  });
  findMyWay.on('GET', '/ffb', function (req, res, params) {
    t.ok('inside route');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/f',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/ff',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/ffa',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/ffb',
    headers: {}
  }, null);
});
test('wildcard', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/*', function (req, res, params) {
    t.is(params['*'], 'hello');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('catch all wildcard', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '*', function (req, res, params) {
    t.is(params['*'], '/test/hello');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('find should return the route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test', fn);
  t.deepEqual(findMyWay.find('GET', '/test'), {
    handler: fn,
    params: {},
    store: null
  });
});
test('find should return the route with params', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/:id', fn);
  t.deepEqual(findMyWay.find('GET', '/test/hello'), {
    handler: fn,
    params: {
      id: 'hello'
    },
    store: null
  });
});
test('find should return a null handler if the route does not exist', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  t.deepEqual(findMyWay.find('GET', '/test'), null);
});
test('should decode the uri - parametric', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/:id', fn);
  t.deepEqual(findMyWay.find('GET', '/test/he%2Fllo'), {
    handler: fn,
    params: {
      id: 'he/llo'
    },
    store: null
  });
});
test('should decode the uri - wildcard', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/*', fn);
  t.deepEqual(findMyWay.find('GET', '/test/he%2Fllo'), {
    handler: fn,
    params: {
      '*': 'he/llo'
    },
    store: null
  });
});
test('safe decodeURIComponent', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/:id', fn);
  t.deepEqual(findMyWay.find('GET', '/test/hel%"Flo'), null);
});
test('safe decodeURIComponent - nested route', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/hello/world/:id/blah', fn);
  t.deepEqual(findMyWay.find('GET', '/test/hello/world/hel%"Flo/blah'), null);
});
test('safe decodeURIComponent - wildcard', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();

  var fn = function fn() {};

  findMyWay.on('GET', '/test/*', fn);
  t.deepEqual(findMyWay.find('GET', '/test/hel%"Flo'), null);
});
test('static routes should be inserted before parametric / 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/hello', function () {
    t.pass('inside correct handler');
  });
  findMyWay.on('GET', '/test/:id', function () {
    t.fail('wrong handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('static routes should be inserted before parametric / 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function () {
    t.fail('wrong handler');
  });
  findMyWay.on('GET', '/test/hello', function () {
    t.pass('inside correct handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('static routes should be inserted before parametric / 3', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/:id', function () {
    t.fail('wrong handler');
  });
  findMyWay.on('GET', '/test', function () {
    t.ok('inside correct handler');
  });
  findMyWay.on('GET', '/test/:id', function () {
    t.fail('wrong handler');
  });
  findMyWay.on('GET', '/test/hello', function () {
    t.ok('inside correct handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
});
test('static routes should be inserted before parametric / 4', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/:id', function () {
    t.ok('inside correct handler');
  });
  findMyWay.on('GET', '/test', function () {
    t.fail('wrong handler');
  });
  findMyWay.on('GET', '/test/:id', function () {
    t.ok('inside correct handler');
  });
  findMyWay.on('GET', '/test/hello', function () {
    t.fail('wrong handler');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/id',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/id',
    headers: {}
  }, null);
});
test('Static parametric with shared part of the path', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.is(req.url, '/example/shared/nested/oopss');
    }
  });
  findMyWay.on('GET', '/example/shared/nested/test', function (req, res, params) {
    t.fail('We should not be here');
  });
  findMyWay.on('GET', '/example/:param/nested/oops', function (req, res, params) {
    t.is(params.param, 'other');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/example/shared/nested/oopss',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/example/other/nested/oops',
    headers: {}
  }, null);
});
test('parametric route with different method', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    t.is(params.id, 'hello');
  });
  findMyWay.on('POST', '/test/:other', function (req, res, params) {
    t.is(params.other, 'world');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'POST',
    url: '/test/world',
    headers: {}
  }, null);
});
test('params does not keep the object reference', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay();
  var first = true;
  findMyWay.on('GET', '/test/:id', function (req, res, params) {
    if (first) {
      setTimeout(function () {
        t.is(params.id, 'hello');
      }, 10);
    } else {
      setTimeout(function () {
        t.is(params.id, 'world');
      }, 10);
    }

    first = false;
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/test/hello',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/test/world',
    headers: {}
  }, null);
});
test('Unsupported method (static)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.pass('Everything ok');
    }
  });
  findMyWay.on('GET', '/', function (req, res, params) {
    t.fail('We should not be here');
  });
  findMyWay.lookup({
    method: 'TROLL',
    url: '/',
    headers: {}
  }, null);
});
test('Unsupported method (wildcard)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    defaultRoute: function defaultRoute(req, res) {
      t.pass('Everything ok');
    }
  });
  findMyWay.on('GET', '*', function (req, res, params) {
    t.fail('We should not be here');
  });
  findMyWay.lookup({
    method: 'TROLL',
    url: '/hello/world',
    headers: {}
  }, null);
});
test('Unsupported method (static find)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '/', function () {});
  t.deepEqual(findMyWay.find('TROLL', '/'), null);
});
test('Unsupported method (wildcard find)', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay();
  findMyWay.on('GET', '*', function () {});
  t.deepEqual(findMyWay.find('TROLL', '/hello/world'), null);
});
test('register all known HTTP methods', function (t) {
  t.plan(6);
  var findMyWay = FindMyWay();

  var http = require('http');

  var handlers = {};

  for (var i in http.METHODS) {
    var m = http.METHODS[i];

    handlers[m] = function myHandler() {};

    findMyWay.on(m, '/test', handlers[m]);
  }

  t.ok(findMyWay.find('COPY', '/test'));
  t.equal(findMyWay.find('COPY', '/test').handler, handlers.COPY);
  t.ok(findMyWay.find('SUBSCRIBE', '/test'));
  t.equal(findMyWay.find('SUBSCRIBE', '/test').handler, handlers.SUBSCRIBE);
  t.ok(findMyWay.find('M-SEARCH', '/test'));
  t.equal(findMyWay.find('M-SEARCH', '/test').handler, handlers['M-SEARCH']);
});