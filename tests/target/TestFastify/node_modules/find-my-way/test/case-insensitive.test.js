'use strict';

var t = require('tap');

var test = t.test;

var FindMyWay = require('../');

test('case insensitive static routes of level 1', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/woo', function (req, res, params) {
    t.pass('we should be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/WOO',
    headers: {}
  }, null);
});
test('case insensitive static routes of level 2', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/woo', function (req, res, params) {
    t.pass('we should be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/FoO/WOO',
    headers: {}
  }, null);
});
test('case insensitive static routes of level 3', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/bar/woo', function (req, res, params) {
    t.pass('we should be here');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/Foo/bAR/WoO',
    headers: {}
  }, null);
});
test('parametric case insensitive', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/:param', function (req, res, params) {
    t.equal(params.param, 'bAR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/Foo/bAR',
    headers: {}
  }, null);
});
test('parametric case insensitive with a static part', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/my-:param', function (req, res, params) {
    t.equal(params.param, 'bAR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/Foo/MY-bAR',
    headers: {}
  }, null);
});
test('parametric case insensitive with capital letter', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/:Param', function (req, res, params) {
    t.equal(params.Param, 'bAR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/Foo/bAR',
    headers: {}
  }, null);
});
test('case insensitive with capital letter in static path with param', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/Foo/bar/:param', function (req, res, params) {
    t.equal(params.param, 'baZ');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo/bar/baZ',
    headers: {}
  }, null);
});
test('case insensitive with multiple paths containing capital letter in static path with param', function (t) {
  /*
   * This is a reproduction of the issue documented at
   * https://github.com/delvedor/find-my-way/issues/96.
   */
  t.plan(2);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/Foo/bar/:param', function (req, res, params) {
    t.equal(params.param, 'baZ');
  });
  findMyWay.on('GET', '/Foo/baz/:param', function (req, res, params) {
    t.equal(params.param, 'baR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/foo/bar/baZ',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'GET',
    url: '/foo/baz/baR',
    headers: {}
  }, null);
});
test('case insensitive with multiple mixed-case params within same slash couple', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/:param1-:param2', function (req, res, params) {
    t.equal(params.param1, 'My');
    t.equal(params.param2, 'bAR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/FOO/My-bAR',
    headers: {}
  }, null);
});
test('case insensitive with multiple mixed-case params', function (t) {
  t.plan(2);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/:param1/:param2', function (req, res, params) {
    t.equal(params.param1, 'My');
    t.equal(params.param2, 'bAR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/FOO/My/bAR',
    headers: {}
  }, null);
});
test('case insensitive with wildcard', function (t) {
  t.plan(1);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('GET', '/foo/*', function (req, res, params) {
    t.equal(params['*'], 'baR');
  });
  findMyWay.lookup({
    method: 'GET',
    url: '/FOO/baR',
    headers: {}
  }, null);
});
test('parametric case insensitive with multiple routes', function (t) {
  t.plan(6);
  var findMyWay = FindMyWay({
    caseSensitive: false,
    defaultRoute: function defaultRoute(req, res) {
      t.fail('Should not be defaultRoute');
    }
  });
  findMyWay.on('POST', '/foo/:param/Static/:userId/Save', function (req, res, params) {
    t.equal(params.param, 'bAR');
    t.equal(params.userId, 'one');
  });
  findMyWay.on('POST', '/foo/:param/Static/:userId/Update', function (req, res, params) {
    t.equal(params.param, 'Bar');
    t.equal(params.userId, 'two');
  });
  findMyWay.on('POST', '/foo/:param/Static/:userId/CANCEL', function (req, res, params) {
    t.equal(params.param, 'bAR');
    t.equal(params.userId, 'THREE');
  });
  findMyWay.lookup({
    method: 'POST',
    url: '/foo/bAR/static/one/SAVE',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'POST',
    url: '/fOO/Bar/Static/two/update',
    headers: {}
  }, null);
  findMyWay.lookup({
    method: 'POST',
    url: '/Foo/bAR/STATIC/THREE/cAnCeL',
    headers: {}
  }, null);
});