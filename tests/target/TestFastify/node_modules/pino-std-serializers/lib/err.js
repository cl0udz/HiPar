'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

module.exports = errSerializer;
var seen = Symbol('circular-ref-tag');
var rawSymbol = Symbol('pino-raw-err-ref');
var pinoErrProto = Object.create({}, {
  type: {
    enumerable: true,
    writable: true,
    value: undefined
  },
  message: {
    enumerable: true,
    writable: true,
    value: undefined
  },
  stack: {
    enumerable: true,
    writable: true,
    value: undefined
  },
  raw: {
    enumerable: false,
    get: function get() {
      return this[rawSymbol];
    },
    set: function set(val) {
      this[rawSymbol] = val;
    }
  }
});
Object.defineProperty(pinoErrProto, rawSymbol, {
  writable: true,
  value: {}
});

function errSerializer(err) {
  if (!(err instanceof Error)) {
    return err;
  }

  err[seen] = undefined; // tag to prevent re-looking at this

  var _err = Object.create(pinoErrProto);

  _err.type = err.constructor.name;
  _err.message = err.message;
  _err.stack = err.stack;

  for (var key in err) {
    if (_err[key] === undefined) {
      var val = err[key];

      if (val instanceof Error) {
        if (!val.hasOwnProperty(seen)) {
          _err[key] = errSerializer(val);
        }
      } else {
        _err[key] = val;
      }
    }
  }

  delete err[seen]; // clean up tag in case err is serialized again later

  _err.raw = err;
  return _err;
}