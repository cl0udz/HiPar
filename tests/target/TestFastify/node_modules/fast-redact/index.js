'use strict';

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

var validator = require('./lib/validator');

var parse = require('./lib/parse');

var redactor = require('./lib/redactor');

var restorer = require('./lib/restorer');

var _require = require('./lib/modifiers'),
    groupRedact = _require.groupRedact,
    nestedRedact = _require.nestedRedact;

var state = require('./lib/state');

var rx = require('./lib/rx');

var validate = validator();

var noop = function noop(o) {
  return o;
};

noop.restore = noop;
var DEFAULT_CENSOR = '[REDACTED]';
fastRedact.rx = rx;
fastRedact.validator = validator;
module.exports = fastRedact;

function fastRedact() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var paths = Array.from(new Set(opts.paths || []));
  var serialize = 'serialize' in opts ? opts.serialize === false ? opts.serialize : typeof opts.serialize === 'function' ? opts.serialize : JSON.stringify : JSON.stringify;
  var remove = opts.remove;

  if (remove === true && serialize !== JSON.stringify) {
    throw Error('fast-redact â€“ remove option may only be set when serializer is JSON.stringify');
  }

  var censor = remove === true ? undefined : 'censor' in opts ? opts.censor : DEFAULT_CENSOR;
  var isCensorFct = typeof censor === 'function';
  if (paths.length === 0) return serialize || noop;
  validate({
    paths: paths,
    serialize: serialize,
    censor: censor
  });

  var _parse = parse({
    paths: paths,
    censor: censor
  }),
      wildcards = _parse.wildcards,
      wcLen = _parse.wcLen,
      secret = _parse.secret;

  var compileRestore = restorer({
    secret: secret,
    wcLen: wcLen
  });
  var strict = 'strict' in opts ? opts.strict : true;
  return redactor({
    secret: secret,
    wcLen: wcLen,
    serialize: serialize,
    strict: strict,
    isCensorFct: isCensorFct
  }, state({
    secret: secret,
    censor: censor,
    compileRestore: compileRestore,
    serialize: serialize,
    groupRedact: groupRedact,
    nestedRedact: nestedRedact,
    wildcards: wildcards,
    wcLen: wcLen
  }));
}