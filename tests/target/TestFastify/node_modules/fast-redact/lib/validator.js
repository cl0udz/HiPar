'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.replace");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.replace");

require("core-js/modules/web.dom-collections.for-each");

var _require = require('vm'),
    createContext = _require.createContext,
    runInContext = _require.runInContext;

module.exports = validator;

function validator() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _opts$ERR_PATHS_MUST_ = opts.ERR_PATHS_MUST_BE_STRINGS,
      ERR_PATHS_MUST_BE_STRINGS = _opts$ERR_PATHS_MUST_ === void 0 ? function () {
    return 'fast-redact - Paths must be strings';
  } : _opts$ERR_PATHS_MUST_,
      _opts$ERR_INVALID_PAT = opts.ERR_INVALID_PATH,
      ERR_INVALID_PATH = _opts$ERR_INVALID_PAT === void 0 ? function (s) {
    return "fast-redact \u2013 Invalid path (".concat(s, ")");
  } : _opts$ERR_INVALID_PAT;
  return function validate(_ref) {
    var paths = _ref.paths;
    paths.forEach(function (s) {
      if (typeof s !== 'string') {
        throw Error(ERR_PATHS_MUST_BE_STRINGS());
      }

      try {
        if (/〇/.test(s)) throw Error();
        var proxy = new Proxy({}, {
          get: function get() {
            return proxy;
          },
          set: function set() {
            throw Error();
          }
        });
        var expr = (s[0] === '[' ? '' : '.') + s.replace(/^\*/, '〇').replace(/\.\*/g, '.〇').replace(/\[\*\]/g, '[〇]');
        if (/\n|\r|;/.test(expr)) throw Error();
        if (/\/\*/.test(expr)) throw Error();
        runInContext("\n          (function () {\n            'use strict'\n            o".concat(expr, "\n            if ([o").concat(expr, "].length !== 1) throw Error()\n          })()\n        "), createContext({
          o: proxy,
          〇: null
        }), {
          codeGeneration: {
            strings: false,
            wasm: false
          }
        });
      } catch (e) {
        throw Error(ERR_INVALID_PATH(s));
      }
    });
  };
}