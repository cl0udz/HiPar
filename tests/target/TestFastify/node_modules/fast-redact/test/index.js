'use strict';

var _require = require('tap'),
    test = _require.test;

var fastRedact = require('..');

var censor = '[REDACTED]';

var censorFct = function censorFct(value) {
  return !value ? value : 'xxx' + value.substr(-2);
};

test('returns no-op when passed no paths [serialize: false]', function (_ref) {
  var end = _ref.end,
      doesNotThrow = _ref.doesNotThrow;
  var redact = fastRedact({
    paths: [],
    serialize: false
  });
  doesNotThrow(function () {
    return redact({});
  });
  doesNotThrow(function () {
    var o = redact({});
    redact.restore(o);
  });
  end();
});
test('returns serializer when passed no paths [serialize: default]', function (_ref2) {
  var end = _ref2.end,
      is = _ref2.is;
  is(fastRedact({
    paths: []
  }), JSON.stringify);
  is(fastRedact(), JSON.stringify);
  end();
});
test('throws when passed non-object using defaults', function (_ref3) {
  var end = _ref3.end,
      throws = _ref3.throws;
  var redact = fastRedact({
    paths: ['a.b.c']
  });
  throws(function () {
    return redact(1);
  });
  end();
});
test('throws when passed non-object number using [strict: true]', function (_ref4) {
  var end = _ref4.end,
      throws = _ref4.throws;
  var redact = fastRedact({
    paths: ['a.b.c'],
    strict: true
  });
  throws(function () {
    return redact(1);
  });
  end();
});
test('returns JSON.stringified value when passed non-object using [strict: false] and no serialize option', function (_ref5) {
  var end = _ref5.end,
      is = _ref5.is,
      doesNotThrow = _ref5.doesNotThrow;
  var redactDefaultSerialize = fastRedact({
    paths: ['a.b.c'],
    strict: false
  }); // expectedOutputs holds `JSON.stringify`ied versions of each primitive.
  // We write them out explicitly though to make the test a bit clearer.

  var primitives = [null, undefined, 'A', 1, false];
  var expectedOutputs = ['null', undefined, '"A"', '1', 'false'];
  primitives.forEach(function (it, i) {
    doesNotThrow(function () {
      return redactDefaultSerialize(it);
    });
    var res = redactDefaultSerialize(it);
    is(res, expectedOutputs[i]);
  });
  end();
});
test('returns custom serialized value when passed non-object using [strict: false, serialize: fn]', function (_ref6) {
  var end = _ref6.end,
      is = _ref6.is,
      doesNotThrow = _ref6.doesNotThrow;

  var customSerialize = function customSerialize(v) {
    return `Hello ${v}!`;
  };

  var redactCustomSerialize = fastRedact({
    paths: ['a.b.c'],
    strict: false,
    serialize: customSerialize
  });
  var primitives = [null, undefined, 'A', 1, false];
  primitives.forEach(function (it) {
    doesNotThrow(function () {
      return redactCustomSerialize(it);
    });
    var res = redactCustomSerialize(it);
    is(res, customSerialize(it));
  });
  end();
});
test('returns original value when passed non-object using [strict: false, serialize: false]', function (_ref7) {
  var end = _ref7.end,
      is = _ref7.is,
      doesNotThrow = _ref7.doesNotThrow;
  var redactSerializeFalse = fastRedact({
    paths: ['a.b.c'],
    strict: false,
    serialize: false
  });
  var primitives = [null, undefined, 'A', 1, false];
  primitives.forEach(function (it) {
    doesNotThrow(function () {
      return redactSerializeFalse(it);
    });
    var res = redactSerializeFalse(it);
    is(res, it);
  });
  end();
});
test('throws if a path is not a string', function (_ref8) {
  var end = _ref8.end,
      is = _ref8.is,
      throws = _ref8.throws;
  throws(function (e) {
    fastRedact({
      paths: [1]
    });
  }, Error('fast-redact - Paths must be strings'));
  throws(function (e) {
    fastRedact({
      paths: [null]
    });
  }, Error('fast-redact - Paths must be strings'));
  throws(function (e) {
    fastRedact({
      paths: [undefined]
    });
  }, Error('fast-redact - Paths must be strings'));
  throws(function (e) {
    fastRedact({
      paths: [{}]
    });
  }, Error('fast-redact - Paths must be strings'));
  end();
});
test('throws when passed illegal paths', function (_ref9) {
  var end = _ref9.end,
      is = _ref9.is,
      throws = _ref9.throws;

  var err = function err(s) {
    return Error(`fast-redact – Invalid path (${s})`);
  };

  throws(function (e) {
    fastRedact({
      paths: ['@']
    });
  }, err('@'));
  throws(function (e) {
    fastRedact({
      paths: ['0']
    });
  }, err('0'));
  throws(function (e) {
    fastRedact({
      paths: ['〇']
    });
  }, err('〇'));
  throws(function (e) {
    fastRedact({
      paths: ['a.1.c']
    });
  }, err('a.1.c'));
  throws(function (e) {
    fastRedact({
      paths: ['a..c']
    });
  }, err('a..c'));
  throws(function (e) {
    fastRedact({
      paths: ['1..c']
    });
  }, err('1..c'));
  throws(function (e) {
    fastRedact({
      paths: ['a = b']
    });
  }, err('a = b'));
  throws(function (e) {
    fastRedact({
      paths: ['a(b)']
    });
  }, err('a(b)'));
  throws(function (e) {
    fastRedact({
      paths: ['//a.b.c']
    });
  }, err('//a.b.c'));
  throws(function (e) {
    fastRedact({
      paths: ['\\a.b.c']
    });
  }, err('\\a.b.c'));
  throws(function (e) {
    fastRedact({
      paths: ['a.#.c']
    });
  }, err('a.#.c'));
  throws(function (e) {
    fastRedact({
      paths: ['~~a.b.c']
    });
  }, err('~~a.b.c'));
  throws(function (e) {
    fastRedact({
      paths: ['^a.b.c']
    });
  }, err('^a.b.c'));
  throws(function (e) {
    fastRedact({
      paths: ['a + b']
    });
  }, err('a + b'));
  throws(function (e) {
    fastRedact({
      paths: ['return a + b']
    });
  }, err('return a + b'));
  throws(function (e) {
    fastRedact({
      paths: ['a / b']
    });
  }, err('a / b'));
  throws(function (e) {
    fastRedact({
      paths: ['a * b']
    });
  }, err('a * b'));
  throws(function (e) {
    fastRedact({
      paths: ['a - b']
    });
  }, err('a - b'));
  throws(function (e) {
    fastRedact({
      paths: ['a ** b']
    });
  }, err('a ** b'));
  throws(function (e) {
    fastRedact({
      paths: ['a % b']
    });
  }, err('a % b'));
  throws(function (e) {
    fastRedact({
      paths: ['a.b*.c']
    });
  }, err('a.b*.c'));
  throws(function (e) {
    fastRedact({
      paths: ['a;global.foo = "bar"']
    });
  }, err('a;global.foo = "bar"'));
  throws(function (e) {
    fastRedact({
      paths: ['a;while(1){}']
    });
  }, err('a;while(1){}'));
  throws(function (e) {
    fastRedact({
      paths: ['a//']
    });
  }, err('a//'));
  throws(function (e) {
    fastRedact({
      paths: ['a/*foo*/']
    });
  }, err('a/*foo*/'));
  throws(function (e) {
    fastRedact({
      paths: ['a,o.b']
    });
  }, err('a,o.b'));
  throws(function (e) {
    fastRedact({
      paths: ['a = o.b']
    });
  }, err('a = o.b'));
  throws(function (e) {
    fastRedact({
      paths: ['a\n']
    });
  }, err('a\n'));
  throws(function (e) {
    fastRedact({
      paths: ['a\r']
    });
  }, err('a\r'));
  end();
});
test('throws if more than one wildcard in a path', function (_ref10) {
  var end = _ref10.end,
      throws = _ref10.throws;
  throws(function () {
    fastRedact({
      paths: ['a.*.x.*'],
      serialize: false
    });
  }, Error('fast-redact – Only one wildcard per path is supported'));
  end();
});
test('throws if a custom serializer is used and remove is true', function (_ref11) {
  var end = _ref11.end,
      throws = _ref11.throws;
  throws(function () {
    fastRedact({
      paths: ['a'],
      serialize: function serialize(o) {
        return o;
      },
      remove: true
    });
  }, Error('fast-redact – remove option may only be set when serializer is JSON.stringify'));
  end();
});
test('throws if serialize is false and remove is true', function (_ref12) {
  var end = _ref12.end,
      throws = _ref12.throws;
  throws(function () {
    fastRedact({
      paths: ['a'],
      serialize: false,
      remove: true
    });
  }, Error('fast-redact – remove option may only be set when serializer is JSON.stringify'));
  end();
});
test('masks according to supplied censor', function (_ref13) {
  var end = _ref13.end,
      is = _ref13.is;
  var censor = 'test';
  var redact = fastRedact({
    paths: ['a'],
    censor,
    serialize: false
  });
  is(redact({
    a: 'a'
  }).a, censor);
  end();
});
test('redact.restore function is available when serialize is false', function (_ref14) {
  var end = _ref14.end,
      is = _ref14.is;
  var censor = 'test';
  var redact = fastRedact({
    paths: ['a'],
    censor,
    serialize: false
  });
  is(typeof redact.restore, 'function');
  end();
});
test('redact.restore function places original values back in place', function (_ref15) {
  var end = _ref15.end,
      is = _ref15.is;
  var censor = 'test';
  var redact = fastRedact({
    paths: ['a'],
    censor,
    serialize: false
  });
  var o = {
    a: 'a'
  };
  redact(o);
  is(o.a, censor);
  redact.restore(o);
  is(o.a, 'a');
  end();
});
test('masks according to supplied censor function', function (_ref16) {
  var end = _ref16.end,
      is = _ref16.is;
  var redact = fastRedact({
    paths: ['a'],
    censor: censorFct,
    serialize: false
  });
  is(redact({
    a: '0123456'
  }).a, 'xxx56');
  end();
});
test('masks according to supplied censor function with wildcards', function (_ref17) {
  var end = _ref17.end,
      is = _ref17.is;
  var redact = fastRedact({
    paths: '*',
    censor: censorFct,
    serialize: false
  });
  is(redact({
    a: '0123456'
  }).a, 'xxx56');
  end();
});
test('masks according to supplied censor function with nested wildcards', function (_ref18) {
  var end = _ref18.end,
      is = _ref18.is;
  var redact = fastRedact({
    paths: ['*.b'],
    censor: censorFct,
    serialize: false
  });
  is(redact({
    a: {
      b: '0123456'
    }
  }).a.b, 'xxx56');
  is(redact({
    c: {
      b: '0123456',
      d: 'pristine'
    }
  }).c.b, 'xxx56');
  is(redact({
    c: {
      b: '0123456',
      d: 'pristine'
    }
  }).c.d, 'pristine');
  end();
});
test('redact.restore function places original values back in place with censor function', function (_ref19) {
  var end = _ref19.end,
      is = _ref19.is;
  var redact = fastRedact({
    paths: ['a'],
    censor: censorFct,
    serialize: false
  });
  var o = {
    a: 'qwerty'
  };
  redact(o);
  is(o.a, 'xxxty');
  redact.restore(o);
  is(o.a, 'qwerty');
  end();
});
test('serializes with JSON.stringify by default', function (_ref20) {
  var end = _ref20.end,
      is = _ref20.is;
  var redact = fastRedact({
    paths: ['a']
  });
  var o = {
    a: 'a'
  };
  is(redact(o), `{"a":"${censor}"}`);
  is(o.a, 'a');
  end();
});
test('removes during serialization instead of redacting when remove option is true', function (_ref21) {
  var end = _ref21.end,
      is = _ref21.is;
  var redact = fastRedact({
    paths: ['a'],
    remove: true
  });
  var o = {
    a: 'a',
    b: 'b'
  };
  is(redact(o), `{"b":"b"}`);
  is(o.a, 'a');
  end();
});
test('serializes with JSON.stringify if serialize is true', function (_ref22) {
  var end = _ref22.end,
      is = _ref22.is;
  var redact = fastRedact({
    paths: ['a'],
    serialize: true
  });
  var o = {
    a: 'a'
  };
  is(redact(o), `{"a":"${censor}"}`);
  is(o.a, 'a');
  end();
});
test('serializes with JSON.stringify if serialize is not a function', function (_ref23) {
  var end = _ref23.end,
      is = _ref23.is;
  var redact = fastRedact({
    paths: ['a'],
    serialize: {}
  });
  var o = {
    a: 'a'
  };
  is(redact(o), `{"a":"${censor}"}`);
  is(o.a, 'a');
  end();
});
test('serializes with custom serializer if supplied', function (_ref24) {
  var end = _ref24.end,
      is = _ref24.is;
  var redact = fastRedact({
    paths: ['a'],
    serialize: function serialize(o) {
      return JSON.stringify(o, 0, 2);
    }
  });
  var o = {
    a: 'a'
  };
  is(redact(o), `{\n  "a": "${censor}"\n}`);
  is(o.a, 'a');
  end();
});
test('redacts parent keys', function (_ref25) {
  var end = _ref25.end,
      is = _ref25.is;
  var redact = fastRedact({
    paths: ['a.b.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  end();
});
test('supports paths with array indexes', function (_ref26) {
  var end = _ref26.end,
      same = _ref26.same;
  var redact = fastRedact({
    paths: ['insideArray.like[3].this'],
    serialize: false
  });
  same(redact({
    insideArray: {
      like: ['a', 'b', 'c', {
        this: {
          foo: 'meow'
        }
      }]
    }
  }), {
    insideArray: {
      like: ['a', 'b', 'c', {
        this: censor
      }]
    }
  });
  end();
});
test('censor may be any type, including function', function (_ref27) {
  var end = _ref27.end,
      same = _ref27.same;
  var redactToString = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: 'censor',
    serialize: false
  });
  var redactToUndefined = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: undefined,
    serialize: false
  });
  var sym = Symbol('sym');
  var redactToSymbol = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: sym,
    serialize: false
  });
  var redactToNumber = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: 0,
    serialize: false
  });
  var redactToBoolean = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: false,
    serialize: false
  });
  var redactToNull = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: null,
    serialize: false
  });
  var redactToObject = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: {
      redacted: true
    },
    serialize: false
  });
  var redactToArray = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: ['redacted'],
    serialize: false
  });
  var redactToBuffer = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: Buffer.from('redacted'),
    serialize: false
  });
  var redactToError = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: Error('redacted'),
    serialize: false
  });
  var redactToFunction = fastRedact({
    paths: ['a.b.c', 'a.b.d.*'],
    censor: function censor() {
      return 'redacted';
    },
    serialize: false
  });
  same(redactToString({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: 'censor',
        d: {
          x: 'censor',
          y: 'censor'
        }
      }
    }
  });
  same(redactToUndefined({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: undefined,
        d: {
          x: undefined,
          y: undefined
        }
      }
    }
  });
  same(redactToSymbol({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: sym,
        d: {
          x: sym,
          y: sym
        }
      }
    }
  });
  same(redactToNumber({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: 0,
        d: {
          x: 0,
          y: 0
        }
      }
    }
  });
  same(redactToBoolean({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: false,
        d: {
          x: false,
          y: false
        }
      }
    }
  });
  same(redactToNull({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: null,
        d: {
          x: null,
          y: null
        }
      }
    }
  });
  same(redactToObject({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: {
          redacted: true
        },
        d: {
          x: {
            redacted: true
          },
          y: {
            redacted: true
          }
        }
      }
    }
  });
  same(redactToArray({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: ['redacted'],
        d: {
          x: ['redacted'],
          y: ['redacted']
        }
      }
    }
  });
  same(redactToBuffer({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: Buffer.from('redacted'),
        d: {
          x: Buffer.from('redacted'),
          y: Buffer.from('redacted')
        }
      }
    }
  });
  same(redactToError({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: Error('redacted'),
        d: {
          x: Error('redacted'),
          y: Error('redacted')
        }
      }
    }
  });
  same(redactToFunction({
    a: {
      b: {
        c: 's',
        d: {
          x: 's',
          y: 's'
        }
      }
    }
  }), {
    a: {
      b: {
        c: 'redacted',
        d: {
          x: 'redacted',
          y: 'redacted'
        }
      }
    }
  });
  end();
});
test('supports multiple paths from the same root', function (_ref28) {
  var end = _ref28.end,
      same = _ref28.same;
  var redact = fastRedact({
    paths: ['deep.bar.shoe', 'deep.baz.shoe', 'deep.foo', 'deep.not.there.sooo', 'deep.fum.shoe'],
    serialize: false
  });
  same(redact({
    deep: {
      bar: 'hmm',
      baz: {
        shoe: {
          k: 1
        }
      },
      foo: {},
      fum: {
        shoe: 'moo'
      }
    }
  }), {
    deep: {
      bar: 'hmm',
      baz: {
        shoe: censor
      },
      foo: censor,
      fum: {
        shoe: censor
      }
    }
  });
  end();
});
test('supports strings in bracket notation paths (single quote)', function (_ref29) {
  var end = _ref29.end,
      is = _ref29.is;
  var redact = fastRedact({
    paths: [`a['@#!='].c`],
    serialize: false
  });
  var result = redact({
    a: {
      '@#!=': {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a['@#!='].c, censor);
  end();
});
test('supports strings in bracket notation paths (double quote)', function (_ref30) {
  var end = _ref30.end,
      is = _ref30.is;
  var redact = fastRedact({
    paths: [`a["@#!="].c`],
    serialize: false
  });
  var result = redact({
    a: {
      '@#!=': {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a['@#!='].c, censor);
  end();
});
test('supports strings in bracket notation paths (backtick quote)', function (_ref31) {
  var end = _ref31.end,
      is = _ref31.is;
  var redact = fastRedact({
    paths: ['a[`@#!=`].c'],
    serialize: false
  });
  var result = redact({
    a: {
      '@#!=': {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a['@#!='].c, censor);
  end();
});
test('allows * within a bracket notation string', function (_ref32) {
  var end = _ref32.end,
      is = _ref32.is;
  var redact = fastRedact({
    paths: ['a["*"].c'],
    serialize: false
  });
  var result = redact({
    a: {
      '*': {
        c: 's',
        x: 1
      }
    }
  });
  is(result.a['*'].c, censor);
  is(result.a['*'].x, 1);
  end();
});
test('redacts parent keys – restore', function (_ref33) {
  var end = _ref33.end,
      is = _ref33.is;
  var redact = fastRedact({
    paths: ['a.b.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  redact.restore(result);
  is(result.a.b.c, 's');
  end();
});
test('handles null proto objects', function (_ref34) {
  var end = _ref34.end,
      is = _ref34.is;
  var redact = fastRedact({
    paths: ['a.b.c'],
    serialize: false
  });
  var result = redact({
    __proto__: null,
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  end();
});
test('handles null proto objects – restore', function (_ref35) {
  var end = _ref35.end,
      is = _ref35.is;
  var redact = fastRedact({
    paths: ['a.b.c'],
    serialize: false
  });
  var result = redact({
    __proto__: null,
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  redact.restore(result, 's');
  is(result.a.b.c, 's');
  end();
});
test('handles paths that do not match object structure', function (_ref36) {
  var end = _ref36.end,
      same = _ref36.same;
  var redact = fastRedact({
    paths: ['x.y.z'],
    serialize: false
  });
  same(redact({
    a: {
      b: {
        c: 's'
      }
    }
  }), {
    a: {
      b: {
        c: 's'
      }
    }
  });
  end();
});
test('ignores missing paths in object', function (_ref37) {
  var end = _ref37.end,
      same = _ref37.same;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.z.d', 'a.b.z'],
    serialize: false
  });
  same(redact({
    a: {
      b: {
        c: 's'
      }
    }
  }), {
    a: {
      b: {
        c: censor
      }
    }
  });
  end();
});
test('ignores missing paths in object – restore', function (_ref38) {
  var end = _ref38.end,
      doesNotThrow = _ref38.doesNotThrow;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.z.d', 'a.b.z'],
    serialize: false
  });
  var o = {
    a: {
      b: {
        c: 's'
      }
    }
  };
  redact(o);
  doesNotThrow(function () {
    redact.restore(o);
  });
  end();
});
test('gracefully handles primitives that match intermediate keys in paths', function (_ref39) {
  var end = _ref39.end,
      same = _ref39.same;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.b.c.d'],
    serialize: false
  });
  same(redact({
    a: {
      b: null
    }
  }), {
    a: {
      b: null
    }
  });
  same(redact({
    a: {
      b: 's'
    }
  }), {
    a: {
      b: 's'
    }
  });
  same(redact({
    a: {
      b: 1
    }
  }), {
    a: {
      b: 1
    }
  });
  same(redact({
    a: {
      b: undefined
    }
  }), {
    a: {
      b: undefined
    }
  });
  same(redact({
    a: {
      b: true
    }
  }), {
    a: {
      b: true
    }
  });
  var sym = Symbol('sym');
  same(redact({
    a: {
      b: sym
    }
  }), {
    a: {
      b: sym
    }
  });
  end();
});
test('handles circulars', function (_ref40) {
  var end = _ref40.end,
      is = _ref40.is,
      same = _ref40.same;
  var redact = fastRedact({
    paths: ['bar.baz.baz'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  same(redact(o), {
    a: 1,
    bar: {
      b: 2,
      baz: censor
    }
  });
  end();
});
test('handles circulars – restore', function (_ref41) {
  var end = _ref41.end,
      is = _ref41.is,
      same = _ref41.same;
  var redact = fastRedact({
    paths: ['bar.baz.baz'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  is(o.bar.baz, bar);
  redact(o);
  is(o.bar.baz, censor);
  redact.restore(o);
  is(o.bar.baz, bar);
  end();
});
test('handles circulars and cross references – restore', function (_ref42) {
  var end = _ref42.end,
      is = _ref42.is,
      same = _ref42.same;
  var redact = fastRedact({
    paths: ['bar.baz.baz', 'cf.bar'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar,
    cf: {
      bar
    }
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  redact(o);
  is(o.bar.baz, censor);
  is(o.cf.bar, censor);
  redact.restore(o);
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  end();
});
test('ultimate wildcards – shallow', function (_ref43) {
  var end = _ref43.end,
      same = _ref43.same;
  var redact = fastRedact({
    paths: ['test.*'],
    serialize: false
  });
  same(redact({
    test: {
      baz: 1,
      bar: 'private'
    }
  }), {
    test: {
      baz: censor,
      bar: censor
    }
  });
  end();
});
test('ultimate wildcards – deep', function (_ref44) {
  var end = _ref44.end,
      same = _ref44.same;
  var redact = fastRedact({
    paths: ['deep.bar.baz.ding.*'],
    serialize: false
  });
  same(redact({
    deep: {
      a: 1,
      bar: {
        b: 2,
        baz: {
          c: 3,
          ding: {
            d: 4,
            e: 5,
            f: 'six'
          }
        }
      }
    }
  }), {
    deep: {
      a: 1,
      bar: {
        b: 2,
        baz: {
          c: 3,
          ding: {
            d: censor,
            e: censor,
            f: censor
          }
        }
      }
    }
  });
  end();
});
test('ultimate wildcards - array – shallow', function (_ref45) {
  var end = _ref45.end,
      same = _ref45.same;
  var redact = fastRedact({
    paths: ['array[*]'],
    serialize: false
  });
  same(redact({
    array: ['a', 'b', 'c', 'd']
  }), {
    array: [censor, censor, censor, censor]
  });
  end();
});
test('ultimate wildcards – array – deep', function (_ref46) {
  var end = _ref46.end,
      same = _ref46.same;
  var redact = fastRedact({
    paths: ['deepArray.down.here[*]'],
    serialize: false
  });
  same(redact({
    deepArray: {
      down: {
        here: ['a', 'b', 'c']
      }
    }
  }), {
    deepArray: {
      down: {
        here: [censor, censor, censor]
      }
    }
  });
  end();
});
test('ultimate wildcards – array – single index', function (_ref47) {
  var end = _ref47.end,
      same = _ref47.same;
  var redact = fastRedact({
    paths: ['insideArray.like[3].this.*'],
    serialize: false
  });
  same(redact({
    insideArray: {
      like: ['a', 'b', 'c', {
        this: {
          foo: 'meow'
        }
      }]
    }
  }), {
    insideArray: {
      like: ['a', 'b', 'c', {
        this: {
          foo: censor
        }
      }]
    }
  });
  end();
});
test('ultimate wildcards - handles null proto objects', function (_ref48) {
  var end = _ref48.end,
      is = _ref48.is;
  var redact = fastRedact({
    paths: ['a.b.c'],
    serialize: false
  });
  var result = redact({
    __proto__: null,
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  end();
});
test('ultimate wildcards - handles paths that do not match object structure', function (_ref49) {
  var end = _ref49.end,
      same = _ref49.same;
  var redact = fastRedact({
    paths: ['x.y.z'],
    serialize: false
  });
  same(redact({
    a: {
      b: {
        c: 's'
      }
    }
  }), {
    a: {
      b: {
        c: 's'
      }
    }
  });
  end();
});
test('ultimate wildcards - gracefully handles primitives that match intermediate keys in paths', function (_ref50) {
  var end = _ref50.end,
      same = _ref50.same;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.b.c.d'],
    serialize: false
  });
  same(redact({
    a: {
      b: null
    }
  }), {
    a: {
      b: null
    }
  });
  same(redact({
    a: {
      b: 's'
    }
  }), {
    a: {
      b: 's'
    }
  });
  same(redact({
    a: {
      b: 1
    }
  }), {
    a: {
      b: 1
    }
  });
  same(redact({
    a: {
      b: undefined
    }
  }), {
    a: {
      b: undefined
    }
  });
  same(redact({
    a: {
      b: true
    }
  }), {
    a: {
      b: true
    }
  });
  var sym = Symbol('sym');
  same(redact({
    a: {
      b: sym
    }
  }), {
    a: {
      b: sym
    }
  });
  end();
});
test('ultimate wildcards – handles circulars', function (_ref51) {
  var end = _ref51.end,
      is = _ref51.is,
      same = _ref51.same;
  var redact = fastRedact({
    paths: ['bar.baz.*'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  same(redact(o), {
    a: 1,
    bar: {
      b: censor,
      baz: censor
    }
  });
  end();
});
test('ultimate wildcards – handles circulars – restore', function (_ref52) {
  var end = _ref52.end,
      is = _ref52.is,
      same = _ref52.same;
  var redact = fastRedact({
    paths: ['bar.baz.*'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  is(o.bar.baz, bar);
  redact(o);
  is(o.bar.baz, censor);
  redact.restore(o);
  is(o.bar.baz, bar);
  end();
});
test('ultimate wildcards – handles circulars and cross references – restore', function (_ref53) {
  var end = _ref53.end,
      is = _ref53.is,
      same = _ref53.same;
  var redact = fastRedact({
    paths: ['bar.baz.*', 'cf.*'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar,
    cf: {
      bar
    }
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  redact(o);
  is(o.bar.baz, censor);
  is(o.cf.bar, censor);
  redact.restore(o);
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  end();
});
test('static + wildcards', function (_ref54) {
  var end = _ref54.end,
      is = _ref54.is;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.d.*', 'a.b.z.*'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's',
        z: {
          x: 's',
          y: 's'
        }
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  is(result.a.d.a, censor);
  is(result.a.d.b, censor);
  is(result.a.d.c, censor);
  is(result.a.b.z.x, censor);
  is(result.a.b.z.y, censor);
  end();
});
test('static + wildcards reuse', function (_ref55) {
  var end = _ref55.end,
      is = _ref55.is;
  var redact = fastRedact({
    paths: ['a.b.c', 'a.d.*'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  is(result.a.d.a, censor);
  is(result.a.d.b, censor);
  is(result.a.d.c, censor);
  redact.restore(result);
  var result2 = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result2.a.b.c, censor);
  is(result2.a.d.a, censor);
  is(result2.a.d.b, censor);
  is(result2.a.d.c, censor);
  redact.restore(result2);
  end();
});
test('parent wildcard – first position', function (_ref56) {
  var end = _ref56.end,
      is = _ref56.is;
  var redact = fastRedact({
    paths: ['*.c'],
    serialize: false
  });
  var result = redact({
    b: {
      c: 's'
    },
    d: {
      a: 's',
      b: 's',
      c: 's'
    }
  });
  is(result.b.c, censor);
  is(result.d.a, 's');
  is(result.d.b, 's');
  is(result.d.c, censor);
  end();
});
test('parent wildcard – one following key', function (_ref57) {
  var end = _ref57.end,
      is = _ref57.is;
  var redact = fastRedact({
    paths: ['a.*.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  is(result.a.d.a, 's');
  is(result.a.d.b, 's');
  is(result.a.d.c, censor);
  end();
});
test('restore parent wildcard  – one following key', function (_ref58) {
  var end = _ref58.end,
      is = _ref58.is;
  var redact = fastRedact({
    paths: ['a.*.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  redact.restore(result);
  is(result.a.b.c, 's');
  is(result.a.d.a, 's');
  is(result.a.d.b, 's');
  is(result.a.d.c, 's');
  end();
});
test('parent wildcard – one following key – reuse', function (_ref59) {
  var end = _ref59.end,
      is = _ref59.is;
  var redact = fastRedact({
    paths: ['a.*.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  is(result.a.d.a, 's');
  is(result.a.d.b, 's');
  is(result.a.d.c, censor);
  var result2 = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result2.a.b.c, censor);
  is(result2.a.d.a, 's');
  is(result2.a.d.b, 's');
  is(result2.a.d.c, censor);
  redact.restore(result2);
  end();
});
test('parent wildcard – two following keys', function (_ref60) {
  var end = _ref60.end,
      is = _ref60.is;
  var redact = fastRedact({
    paths: ['a.*.x.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        x: {
          c: 's'
        }
      },
      d: {
        x: {
          a: 's',
          b: 's',
          c: 's'
        }
      }
    }
  });
  is(result.a.b.x.c, censor);
  is(result.a.d.x.a, 's');
  is(result.a.d.x.b, 's');
  is(result.a.d.x.c, censor);
  end();
});
test('parent wildcard  – two following keys – reuse', function (_ref61) {
  var end = _ref61.end,
      is = _ref61.is;
  var redact = fastRedact({
    paths: ['a.*.x.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        x: {
          c: 's'
        }
      },
      d: {
        x: {
          a: 's',
          b: 's',
          c: 's'
        }
      }
    }
  });
  is(result.a.b.x.c, censor);
  is(result.a.d.x.a, 's');
  is(result.a.d.x.b, 's');
  is(result.a.d.x.c, censor);
  redact.restore(result);
  var result2 = redact({
    a: {
      b: {
        x: {
          c: 's'
        }
      },
      d: {
        x: {
          a: 's',
          b: 's',
          c: 's'
        }
      }
    }
  });
  is(result2.a.b.x.c, censor);
  is(result2.a.d.x.a, 's');
  is(result2.a.d.x.b, 's');
  is(result2.a.d.x.c, censor);
  end();
});
test('restore parent wildcard  – two following keys', function (_ref62) {
  var end = _ref62.end,
      is = _ref62.is;
  var redact = fastRedact({
    paths: ['a.*.x.c'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        x: {
          c: 's'
        }
      },
      d: {
        x: {
          a: 's',
          b: 's',
          c: 's'
        }
      }
    }
  });
  redact.restore(result);
  is(result.a.b.x.c, 's');
  is(result.a.d.x.a, 's');
  is(result.a.d.x.b, 's');
  is(result.a.d.x.c, 's');
  end();
});
test('parent wildcard - array', function (_ref63) {
  var end = _ref63.end,
      is = _ref63.is;
  var redact = fastRedact({
    paths: ['a.b[*].x'],
    serialize: false
  });
  var result = redact({
    a: {
      b: [{
        x: 1
      }, {
        a: 2
      }],
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b[0].x, censor);
  is(result.a.b[1].a, 2);
  is(result.a.d.a, 's');
  is(result.a.d.b, 's');
  end();
});
test('parent wildcards – array – single index', function (_ref64) {
  var end = _ref64.end,
      same = _ref64.same;
  var redact = fastRedact({
    paths: ['insideArray.like[3].*.foo'],
    serialize: false
  });
  same(redact({
    insideArray: {
      like: ['a', 'b', 'c', {
        this: {
          foo: 'meow'
        }
      }]
    }
  }), {
    insideArray: {
      like: ['a', 'b', 'c', {
        this: {
          foo: censor
        }
      }]
    }
  });
  end();
});
test('parent wildcards - handles null proto objects', function (_ref65) {
  var end = _ref65.end,
      is = _ref65.is;
  var redact = fastRedact({
    paths: ['a.*.c'],
    serialize: false
  });
  var result = redact({
    __proto__: null,
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  end();
});
test('parent wildcards - handles paths that do not match object structure', function (_ref66) {
  var end = _ref66.end,
      same = _ref66.same;
  var redact = fastRedact({
    paths: ['a.*.y.z'],
    serialize: false
  });
  same(redact({
    a: {
      b: {
        c: 's'
      }
    }
  }), {
    a: {
      b: {
        c: 's'
      }
    }
  });
  end();
});
test('parent wildcards - gracefully handles primitives that match intermediate keys in paths', function (_ref67) {
  var end = _ref67.end,
      same = _ref67.same;
  var redact = fastRedact({
    paths: ['a.*.c'],
    serialize: false
  });
  same(redact({
    a: {
      b: null
    }
  }), {
    a: {
      b: null
    }
  });
  same(redact({
    a: {
      b: 's'
    }
  }), {
    a: {
      b: 's'
    }
  });
  same(redact({
    a: {
      b: 1
    }
  }), {
    a: {
      b: 1
    }
  });
  same(redact({
    a: {
      b: undefined
    }
  }), {
    a: {
      b: undefined
    }
  });
  same(redact({
    a: {
      b: true
    }
  }), {
    a: {
      b: true
    }
  });
  var sym = Symbol('sym');
  same(redact({
    a: {
      b: sym
    }
  }), {
    a: {
      b: sym
    }
  });
  end();
});
test('parent wildcards – handles circulars', function (_ref68) {
  var end = _ref68.end,
      is = _ref68.is,
      same = _ref68.same;
  var redact = fastRedact({
    paths: ['x.*.baz'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    x: {
      a: 1,
      bar
    }
  };
  bar.baz = bar;
  o.x.bar.baz = o.x.bar;
  same(redact(o), {
    x: {
      a: 1,
      bar: {
        b: 2,
        baz: censor
      }
    }
  });
  end();
});
test('parent wildcards – handles circulars – restore', function (_ref69) {
  var end = _ref69.end,
      is = _ref69.is,
      same = _ref69.same;
  var redact = fastRedact({
    paths: ['x.*.baz'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    x: {
      a: 1,
      bar
    }
  };
  bar.baz = bar;
  o.x.bar.baz = o.x.bar;
  is(o.x.bar.baz, bar);
  redact(o);
  is(o.x.a, 1);
  is(o.x.bar.baz, censor);
  redact.restore(o);
  is(o.x.bar.baz, bar);
  end();
});
test('parent wildcards – handles circulars and cross references – restore', function (_ref70) {
  var end = _ref70.end,
      is = _ref70.is,
      same = _ref70.same;
  var redact = fastRedact({
    paths: ['x.*.baz', 'x.*.cf.bar'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    x: {
      a: 1,
      bar,
      y: {
        cf: {
          bar
        }
      }
    }
  };
  bar.baz = bar;
  o.x.bar.baz = o.x.bar;
  is(o.x.bar.baz, bar);
  is(o.x.y.cf.bar, bar);
  redact(o);
  is(o.x.bar.baz, censor);
  is(o.x.y.cf.bar, censor);
  redact.restore(o);
  is(o.x.bar.baz, bar);
  is(o.x.y.cf.bar, bar);
  end();
});
test('parent wildcards – handles missing paths', function (_ref71) {
  var end = _ref71.end,
      is = _ref71.is,
      same = _ref71.same;
  var redact = fastRedact({
    paths: ['z.*.baz']
  });
  var o = {
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  };
  is(redact(o), JSON.stringify(o));
  end();
});
test('ultimate wildcards – handles missing paths', function (_ref72) {
  var end = _ref72.end,
      is = _ref72.is,
      same = _ref72.same;
  var redact = fastRedact({
    paths: ['z.*']
  });
  var o = {
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  };
  is(redact(o), JSON.stringify(o));
  end();
});
test('parent wildcards – removes during serialization instead of redacting when remove option is true', function (_ref73) {
  var end = _ref73.end,
      is = _ref73.is;
  var redact = fastRedact({
    paths: ['a.*.c'],
    remove: true
  });
  var o = {
    a: {
      b: {
        c: 'c'
      },
      x: {
        c: 1
      }
    }
  };
  is(redact(o), `{"a":{"b":{},"x":{}}}`);
  end();
});
test('ultimate wildcards – removes during serialization instead of redacting when remove option is true', function (_ref74) {
  var end = _ref74.end,
      is = _ref74.is;
  var redact = fastRedact({
    paths: ['a.b.*'],
    remove: true
  });
  var o = {
    a: {
      b: {
        c: 'c'
      },
      x: {
        c: 1
      }
    }
  };
  is(redact(o), `{"a":{"b":{},"x":{"c":1}}}`);
  end();
});
test('supports leading bracket notation', function (_ref75) {
  var end = _ref75.end,
      is = _ref75.is;
  var redact = fastRedact({
    paths: ['["a"].b.c']
  });
  var o = {
    a: {
      b: {
        c: 'd'
      }
    }
  };
  is(redact(o), `{"a":{"b":{"c":"${censor}"}}}`);
  end();
});
test('supports leading bracket notation containing non-legal keyword characters', function (_ref76) {
  var end = _ref76.end,
      is = _ref76.is;
  var redact = fastRedact({
    paths: ['["a-x"].b.c']
  });
  var o = {
    'a-x': {
      b: {
        c: 'd'
      }
    }
  };
  is(redact(o), `{"a-x":{"b":{"c":"${censor}"}}}`);
  end();
});
test('supports single leading bracket', function (_ref77) {
  var end = _ref77.end,
      is = _ref77.is;
  var censor = 'test';
  var redact = fastRedact({
    paths: ['["a"]'],
    censor,
    serialize: false
  });
  is(redact({
    a: 'a'
  }).a, censor);
  end();
});
test('supports single leading bracket containing non-legal keyword characters', function (_ref78) {
  var end = _ref78.end,
      is = _ref78.is;
  var censor = 'test';
  var redact = fastRedact({
    paths: ['["a-x"]'],
    censor,
    serialize: false
  });
  is(redact({
    'a-x': 'a'
  })['a-x'], censor);
  end();
});
test('(leading brackets) ultimate wildcards – handles circulars and cross references – restore', function (_ref79) {
  var end = _ref79.end,
      is = _ref79.is,
      same = _ref79.same;
  var redact = fastRedact({
    paths: ['bar.baz.*', 'cf.*'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    a: 1,
    bar,
    cf: {
      bar
    }
  };
  bar.baz = bar;
  o.bar.baz = o.bar;
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  redact(o);
  is(o.bar.baz, censor);
  is(o.cf.bar, censor);
  redact.restore(o);
  is(o.bar.baz, bar);
  is(o.cf.bar, bar);
  end();
});
test('(leading brackets) parent wildcards – handles circulars and cross references – restore', function (_ref80) {
  var end = _ref80.end,
      is = _ref80.is,
      same = _ref80.same;
  var redact = fastRedact({
    paths: ['["x"].*.baz', '["x"].*.cf.bar'],
    serialize: false
  });
  var bar = {
    b: 2
  };
  var o = {
    x: {
      a: 1,
      bar,
      y: {
        cf: {
          bar
        }
      }
    }
  };
  bar.baz = bar;
  o.x.bar.baz = o.x.bar;
  is(o.x.bar.baz, bar);
  is(o.x.y.cf.bar, bar);
  redact(o);
  is(o.x.bar.baz, censor);
  is(o.x.y.cf.bar, censor);
  redact.restore(o);
  is(o.x.bar.baz, bar);
  is(o.x.y.cf.bar, bar);
  end();
});
test('(leading brackets) ultimate wildcards – handles missing paths', function (_ref81) {
  var end = _ref81.end,
      is = _ref81.is,
      same = _ref81.same;
  var redact = fastRedact({
    paths: ['["z"].*']
  });
  var o = {
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  };
  is(redact(o), JSON.stringify(o));
  end();
});
test('(leading brackets) static + wildcards reuse', function (_ref82) {
  var end = _ref82.end,
      is = _ref82.is;
  var redact = fastRedact({
    paths: ['["a"].b.c', '["a"].d.*'],
    serialize: false
  });
  var result = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result.a.b.c, censor);
  is(result.a.d.a, censor);
  is(result.a.d.b, censor);
  is(result.a.d.c, censor);
  redact.restore(result);
  var result2 = redact({
    a: {
      b: {
        c: 's'
      },
      d: {
        a: 's',
        b: 's',
        c: 's'
      }
    }
  });
  is(result2.a.b.c, censor);
  is(result2.a.d.a, censor);
  is(result2.a.d.b, censor);
  is(result2.a.d.c, censor);
  redact.restore(result2);
  end();
});
test('correctly restores original object when a path does not match object', function (_ref83) {
  var end = _ref83.end,
      is = _ref83.is;
  var redact = fastRedact({
    paths: ['foo.bar'],
    strict: false
  });
  var o = {};
  is(redact({
    foo: o
  }), '{"foo":{}}');
  is(o.hasOwnProperty('bar'), false);
  end();
});
test('correctly restores original object when a matching path has value of `undefined`', function (_ref84) {
  var end = _ref84.end,
      is = _ref84.is;
  var redact = fastRedact({
    paths: ['foo.bar'],
    strict: false
  });
  var o = {
    bar: undefined
  };
  is(redact({
    foo: o
  }), '{"foo":{}}');
  is(o.hasOwnProperty('bar'), true);
  is(o.bar, undefined);
  end();
});
test('handles multiple paths with leading brackets', function (_ref85) {
  var end = _ref85.end,
      is = _ref85.is;
  var redact = fastRedact({
    paths: ['["x-y"]', '["y-x"]']
  });
  var o = {
    'x-y': 'test',
    'y-x': 'test2'
  };
  is(redact(o), '{"x-y":"[REDACTED]","y-x":"[REDACTED]"}');
  end();
});
test('handles objects with and then without target paths', function (_ref86) {
  var end = _ref86.end,
      is = _ref86.is;
  var redact = fastRedact({
    paths: ['test']
  });
  var o1 = {
    test: 'check'
  };
  var o2 = {};
  is(redact(o1), '{"test":"[REDACTED]"}');
  is(redact(o2), '{}'); // run each check twice to ensure no mutations

  is(redact(o1), '{"test":"[REDACTED]"}');
  is(redact(o2), '{}');
  is('test' in o1, true);
  is('test' in o2, false);
  end();
});
test('handles leading wildcards and null values', function (_ref87) {
  var end = _ref87.end,
      is = _ref87.is;
  var redact = fastRedact({
    paths: ['*.test']
  });
  var o = {
    prop: null
  };
  is(redact(o), '{"prop":null}');
  is(o.prop, null);
  end();
});
test('handles keys with dots', function (_ref88) {
  var end = _ref88.end,
      is = _ref88.is;
  var redactSingleQ = fastRedact({
    paths: [`a['b.c']`],
    serialize: false
  });
  var redactDoubleQ = fastRedact({
    paths: [`a["b.c"]`],
    serialize: false
  });
  var redactBacktickQ = fastRedact({
    paths: ['a[`b.c`]'],
    serialize: false
  });
  var redactNum = fastRedact({
    paths: [`a[-1.2]`],
    serialize: false
  });
  var redactLeading = fastRedact({
    paths: [`["b.c"]`],
    serialize: false
  });
  is(redactSingleQ({
    a: {
      'b.c': 'x',
      '-1.2': 'x'
    }
  }).a['b.c'], censor);
  is(redactDoubleQ({
    a: {
      'b.c': 'x',
      '-1.2': 'x'
    }
  }).a['b.c'], censor);
  is(redactBacktickQ({
    a: {
      'b.c': 'x',
      '-1.2': 'x'
    }
  }).a['b.c'], censor);
  is(redactNum({
    a: {
      'b.c': 'x',
      '-1.2': 'x'
    }
  }).a['-1.2'], censor);
  is(redactLeading({
    'b.c': 'x',
    '-1.2': 'x'
  })['b.c'], censor);
  end();
});