'use strict';
/**
 * Code imported from `pino-http`
 * Repo: https://github.com/pinojs/pino-http
 * License: MIT (https://raw.githubusercontent.com/pinojs/pino-http/master/LICENSE)
 */

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var abstractLogging = require('abstract-logging');

var pino = require('pino');

var serializersSym = pino.symbols.serializersSym;

var _require = require('./validation'),
    isValidLogger = _require.isValidLogger;

var _require2 = require('./errors'),
    FST_ERR_LOG_INVALID_DESTINATION = _require2.codes.FST_ERR_LOG_INVALID_DESTINATION;

function createPinoLogger(opts, stream) {
  stream = stream || opts.stream;
  delete opts.stream;

  if (stream && opts.file) {
    throw new FST_ERR_LOG_INVALID_DESTINATION();
  } else if (opts.file) {
    // we do not have stream
    stream = pino.destination(opts.file);
    delete opts.file;
  }

  var prevLogger = opts.logger;
  var prevGenReqId = opts.genReqId;
  var logger = null;

  if (prevLogger) {
    opts.logger = undefined;
    opts.genReqId = undefined; // we need to tap into pino internals because in v5 it supports
    // adding serializers in child loggers

    if (prevLogger[serializersSym]) {
      opts.serializers = Object.assign({}, opts.serializers, prevLogger[serializersSym]);
    }

    logger = prevLogger.child(opts);
    opts.logger = prevLogger;
    opts.genReqId = prevGenReqId;
  } else {
    logger = pino(opts, stream);
  }

  return logger;
}

var serializers = {
  req: function asReqValue(req) {
    return {
      method: req.method,
      url: req.url,
      version: req.headers['accept-version'],
      hostname: req.hostname,
      remoteAddress: req.ip,
      remotePort: req.connection.remotePort
    };
  },
  err: pino.stdSerializers.err,
  res: function asResValue(res) {
    return {
      statusCode: res.statusCode
    };
  }
};

function now() {
  var ts = process.hrtime();
  return ts[0] * 1e3 + ts[1] / 1e6;
}

function createLogger(options) {
  if (isValidLogger(options.logger)) {
    var logger = createPinoLogger({
      logger: options.logger,
      serializers: Object.assign({}, serializers, options.logger.serializers)
    });
    return {
      logger: logger,
      hasLogger: true
    };
  } else if (!options.logger) {
    var _logger = Object.create(abstractLogging);

    _logger.child = function () {
      return _logger;
    };

    return {
      logger: _logger,
      hasLogger: false
    };
  } else {
    options.logger = _typeof(options.logger) === 'object' ? options.logger : {};
    options.logger.level = options.logger.level || 'info';
    options.logger.serializers = Object.assign({}, serializers, options.logger.serializers);

    var _logger2 = createPinoLogger(options.logger);

    return {
      logger: _logger2,
      hasLogger: true
    };
  }
}

module.exports = {
  createLogger: createLogger,
  serializers: serializers,
  now: now
};