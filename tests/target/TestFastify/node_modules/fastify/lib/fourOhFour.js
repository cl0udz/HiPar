'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.ends-with");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.ends-with");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var FindMyWay = require('find-my-way');

var Reply = require('./reply');

var Request = require('./request');

var Context = require('./context');

var _require = require('./symbols.js'),
    kRoutePrefix = _require.kRoutePrefix,
    kCanSetNotFoundHandler = _require.kCanSetNotFoundHandler,
    kFourOhFourLevelInstance = _require.kFourOhFourLevelInstance,
    kReply = _require.kReply,
    kRequest = _require.kRequest,
    kContentTypeParser = _require.kContentTypeParser,
    kBodyLimit = _require.kBodyLimit,
    kLogLevel = _require.kLogLevel,
    kFourOhFourContext = _require.kFourOhFourContext,
    kMiddlewares = _require.kMiddlewares,
    kHooks = _require.kHooks;

var _require2 = require('./warnings'),
    beforeHandlerWarning = _require2.beforeHandlerWarning;

var _require3 = require('./middleware'),
    buildMiddie = _require3.buildMiddie;
/**
 * Each fastify instance have a:
 * kFourOhFourLevelInstance: point to a fastify instance that has the 404 handler setted
 * kCanSetNotFoundHandler: bool to track if the 404 handler has alredy been set
 * kFourOhFour: the singleton instance of this 404 module
 * kFourOhFourContext: the context in the reply object where the handler will be executed
 */


function fourOhFour(options) {
  var logger = options.logger,
      modifyCoreObjects = options.modifyCoreObjects,
      genReqId = options.genReqId; // 404 router, used for handling encapsulated 404 handlers

  var router = FindMyWay({
    defaultRoute: fourOhFourFallBack
  });
  return {
    router: router,
    setNotFoundHandler: setNotFoundHandler,
    setContext: setContext,
    arrange404: arrange404
  };

  function arrange404(instance) {
    // Change the pointer of the fastify instance to itself, so register + prefix can add new 404 handler
    instance[kFourOhFourLevelInstance] = instance;
    instance[kCanSetNotFoundHandler] = true;
  }

  function basic404(request, reply) {
    var _request$raw = request.raw,
        url = _request$raw.url,
        method = _request$raw.method;
    var message = "Route ".concat(method, ":").concat(url, " not found");
    request.log.info(message);
    reply.code(404).send({
      message: message,
      error: 'Not Found',
      statusCode: 404
    });
  }

  function setContext(instance, context) {
    var _404Context = Object.assign({}, instance[kFourOhFourContext]);

    _404Context.onSend = context.onSend;
    context[kFourOhFourContext] = _404Context;
  }

  function setNotFoundHandler(opts, handler, avvio, routeHandler) {
    var _this = this; // First initialization of the fastify root instance


    if (this[kCanSetNotFoundHandler] === undefined) {
      this[kCanSetNotFoundHandler] = true;
    }

    if (this[kFourOhFourContext] === undefined) {
      this[kFourOhFourContext] = null;
    }

    var _fastify = this;

    var prefix = this[kRoutePrefix] || '/';

    if (this[kCanSetNotFoundHandler] === false) {
      throw new Error("Not found handler already set for Fastify instance with prefix: '".concat(prefix, "'"));
    }

    if (_typeof(opts) === 'object') {
      if (opts.preHandler == null && opts.beforeHandler != null) {
        beforeHandlerWarning();
        opts.preHandler = opts.beforeHandler;
      }

      if (opts.preHandler) {
        if (Array.isArray(opts.preHandler)) {
          opts.preHandler = opts.preHandler.map(function (hook) {
            return hook.bind(_fastify);
          });
        } else {
          opts.preHandler = opts.preHandler.bind(_fastify);
        }
      }

      if (opts.preValidation) {
        if (Array.isArray(opts.preValidation)) {
          opts.preValidation = opts.preValidation.map(function (hook) {
            return hook.bind(_fastify);
          });
        } else {
          opts.preValidation = opts.preValidation.bind(_fastify);
        }
      }
    }

    if (typeof opts === 'function') {
      handler = opts;
      opts = undefined;
    }

    opts = opts || {};

    if (handler) {
      this[kFourOhFourLevelInstance][kCanSetNotFoundHandler] = false;
      handler = handler.bind(this);
    } else {
      handler = basic404;
    }

    this.after(function (notHandledErr, done) {
      _setNotFoundHandler.call(_this, prefix, opts, handler, avvio, routeHandler);

      done(notHandledErr);
    });
  }

  function _setNotFoundHandler(prefix, opts, handler, avvio, routeHandler) {
    var _this2 = this;

    var context = new Context(opts.schema, handler, this[kReply], this[kRequest], this[kContentTypeParser], opts.config || {}, this._errorHandler, this[kBodyLimit], this[kLogLevel]);
    avvio.once('preReady', function () {
      var context = _this2[kFourOhFourContext];
      var onRequest = _this2[kHooks].onRequest;

      var preParsing = _this2[kHooks].preParsing.concat(opts.preParsing || []);

      var preValidation = _this2[kHooks].preValidation.concat(opts.preValidation || []);

      var preSerialization = _this2[kHooks].preSerialization.concat(opts.preSerialization || []);

      var preHandler = _this2[kHooks].preHandler.concat(opts.beforeHandler || opts.preHandler || []);

      var onSend = _this2[kHooks].onSend;
      var onError = _this2[kHooks].onError;
      var onResponse = _this2[kHooks].onResponse;
      context.onRequest = onRequest.length ? onRequest : null;
      context.preParsing = preParsing.length ? preParsing : null;
      context.preValidation = preValidation.length ? preValidation : null;
      context.preSerialization = preSerialization.length ? preSerialization : null;
      context.preHandler = preHandler.length ? preHandler : null;
      context.onSend = onSend.length ? onSend : null;
      context.onError = onError.length ? onError : null;
      context.onResponse = onResponse.length ? onResponse : null;
      context._middie = buildMiddie(_this2[kMiddlewares]);
    });

    if (this[kFourOhFourContext] !== null && prefix === '/') {
      Object.assign(this[kFourOhFourContext], context); // Replace the default 404 handler

      return;
    }

    this[kFourOhFourLevelInstance][kFourOhFourContext] = context;
    router.all(prefix + (prefix.endsWith('/') ? '*' : '/*'), routeHandler, context);
    router.all(prefix || '/', routeHandler, context);
  }

  function fourOhFourFallBack(req, res) {
    // if this happen, we have a very bad bug
    // we might want to do some hard debugging
    // here, let's print out as much info as
    // we can
    req.id = genReqId(req);
    req.originalUrl = req.url;
    var childLogger = logger.child({
      reqId: req.id
    });

    if (modifyCoreObjects) {
      req.log = res.log = childLogger;
    }

    childLogger.info({
      req: req
    }, 'incoming request');
    var request = new Request(null, req, null, req.headers, childLogger);
    var reply = new Reply(res, {
      onSend: [],
      onError: []
    }, request, childLogger);
    request.log.warn('the default handler for 404 did not catch this, this is likely a fastify bug, please report it');
    request.log.warn(router.prettyPrint());
    reply.code(404).send(new Error('Not Found'));
  }
}

module.exports = fourOhFour;