'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array-buffer.constructor");

require("core-js/modules/es.array-buffer.is-view");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.data-view");

require("core-js/modules/es.object.freeze");

require("core-js/modules/es.object.get-own-property-names");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var validate = require('./configValidator');

var deepClone = require('rfdc')({
  circles: true,
  proto: false
});

var _require = require('./errors'),
    FST_ERR_INIT_OPTS_INVALID = _require.codes.FST_ERR_INIT_OPTS_INVALID;

function validateInitialConfig(options) {
  var opts = deepClone(options);

  if (!validate(opts)) {
    var error = new FST_ERR_INIT_OPTS_INVALID(JSON.stringify(validate.errors.map(function (e) {
      return e.message;
    })));
    error.errors = validate.errors;
    throw error;
  }

  return deepFreezeObject(opts);
}

function deepFreezeObject(object) {
  var properties = Object.getOwnPropertyNames(object);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var name = _step.value;
      var value = object[name];

      if (ArrayBuffer.isView(value) && !(value instanceof DataView)) {
        continue;
      }

      object[name] = value && _typeof(value) === 'object' ? deepFreezeObject(value) : value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return Object.freeze(object);
}

module.exports = validateInitialConfig;
module.exports.defaultInitOptions = validate.defaultInitOptions;
module.exports.utils = {
  deepFreezeObject: deepFreezeObject
};