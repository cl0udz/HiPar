'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var assert = require('assert');

var http = require('http');

var https = require('https');

var _require = require('./symbols'),
    kState = _require.kState,
    kOptions = _require.kOptions;

var _require2 = require('./errors'),
    FST_ERR_HTTP2_INVALID_VERSION = _require2.codes.FST_ERR_HTTP2_INVALID_VERSION;

function createServer(options, httpHandler) {
  assert(options, 'Missing options');
  assert(httpHandler, 'Missing http handler');
  var server = null;

  if (options.serverFactory) {
    server = options.serverFactory(httpHandler, options);
  } else if (options.https) {
    if (options.http2) {
      server = http2().createSecureServer(options.https, httpHandler);
    } else {
      server = https.createServer(options.https, httpHandler);
    }
  } else if (options.http2) {
    server = http2().createServer(httpHandler);
  } else {
    server = http.createServer(httpHandler);
  }

  return {
    server: server,
    listen: listen
  }; // `this` is the Fastify object

  function listen() {
    var _this = this;

    var normalizeListenArgs = function normalizeListenArgs(args) {
      if (args.length === 0) {
        return {
          port: 0,
          host: 'localhost'
        };
      }

      var cb = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
      var options = {
        cb: cb
      };
      var firstArg = args[0];
      var argsLength = args.length;
      var lastArg = args[argsLength - 1];
      /* Deal with listen (options) || (handle[, backlog]) */

      if (_typeof(firstArg) === 'object' && firstArg !== null) {
        options.backlog = argsLength > 1 ? lastArg : undefined;
        Object.assign(options, firstArg);
      } else if (typeof firstArg === 'string' && isNaN(firstArg)) {
        /* Deal with listen (pipe[, backlog]) */
        options.path = firstArg;
        options.backlog = argsLength > 1 ? lastArg : undefined;
      } else {
        /* Deal with listen ([port[, host[, backlog]]]) */
        options.port = argsLength >= 1 && firstArg ? firstArg : 0; // This will listen to what localhost is.
        // It can be 127.0.0.1 or ::1, depending on the operating system.
        // Fixes https://github.com/fastify/fastify/issues/1022.

        options.host = argsLength >= 2 && args[1] ? args[1] : 'localhost';
        options.backlog = argsLength >= 3 ? args[2] : undefined;
      }

      return options;
    };

    var listenOptions = normalizeListenArgs(Array.from(arguments));
    var cb = listenOptions.cb;

    var wrap = function wrap(err) {
      server.removeListener('error', wrap);

      if (!err) {
        var address = logServerAddress();
        cb(null, address);
      } else {
        _this[kState].listening = false;
        cb(err, null);
      }
    };

    var listenPromise = function listenPromise(listenOptions) {
      if (_this[kState].listening) {
        return Promise.reject(new Error('Fastify is already listening'));
      }

      return _this.ready().then(function () {
        var errEventHandler;
        var errEvent = new Promise(function (resolve, reject) {
          errEventHandler = function errEventHandler(err) {
            _this[kState].listening = false;
            reject(err);
          };

          server.once('error', errEventHandler);
        });
        var listen = new Promise(function (resolve, reject) {
          server.listen(listenOptions, function () {
            server.removeListener('error', errEventHandler);
            resolve(logServerAddress());
          }); // we set it afterwards because listen can throw

          _this[kState].listening = true;
        });
        return Promise.race([errEvent, // e.g invalid port range error is always emitted before the server listening
        listen]);
      });
    };

    var logServerAddress = function logServerAddress() {
      var address = server.address();
      var isUnixSocket = typeof address === 'string';

      if (!isUnixSocket) {
        if (address.address.indexOf(':') === -1) {
          address = address.address + ':' + address.port;
        } else {
          address = '[' + address.address + ']:' + address.port;
        }
      }

      address = (isUnixSocket ? '' : 'http' + (_this[kOptions].https ? 's' : '') + '://') + address;

      _this.log.info('Server listening at ' + address);

      return address;
    };

    if (cb === undefined) return listenPromise(listenOptions);
    this.ready(function (err) {
      if (err != null) return cb(err);

      if (_this[kState].listening) {
        return cb(new Error('Fastify is already listening'), null);
      }

      server.once('error', wrap);
      server.listen(listenOptions, wrap);
      _this[kState].listening = true;
    });
  }
}

function http2() {
  try {
    return require('http2');
  } catch (err) {
    throw new FST_ERR_HTTP2_INVALID_VERSION();
  }
}

module.exports = {
  createServer: createServer
};