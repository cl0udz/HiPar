'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

var Ajv = require('ajv');

var fs = require('fs');

var path = require('path');

var pack = require('ajv-pack');

var ajv = new Ajv({
  sourceCode: true,
  // this option is required by ajv-pack
  removeAdditional: true,
  useDefaults: true,
  coerceTypes: true
});
var defaultInitOptions = {
  bodyLimit: 1024 * 1024,
  // 1 MiB
  caseSensitive: true,
  ignoreTrailingSlash: false,
  maxParamLength: 100,
  onProtoPoisoning: 'error',
  pluginTimeout: 10000,
  requestIdHeader: 'request-id',
  requestIdLogLabel: 'reqId'
};

function customRule0(schemaParamValue, validatedParamValue, validationSchemaObject, currentDataPath, validatedParamObject, validatedParam) {
  validatedParamObject[validatedParam] = schemaParamValue;
  return true;
} // We add a keyword that allow us to set default values


ajv.addKeyword('setDefaultValue', {
  modifying: true,
  validate: customRule0,
  errors: false
});
var schema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    bodyLimit: {
      type: 'integer',
      "default": defaultInitOptions.bodyLimit
    },
    caseSensitive: {
      type: 'boolean',
      "default": defaultInitOptions.caseSensitive
    },
    http2: {
      type: 'boolean'
    },
    https: {
      "if": {
        not: {
          oneOf: [{
            type: 'boolean'
          }, {
            type: 'null'
          }, {
            type: 'object',
            additionalProperties: false,
            required: ['allowHTTP1'],
            properties: {
              allowHTTP1: {
                type: 'boolean'
              }
            }
          }]
        }
      },
      then: {
        setDefaultValue: true
      }
    },
    ignoreTrailingSlash: {
      type: 'boolean',
      "default": defaultInitOptions.ignoreTrailingSlash
    },
    maxParamLength: {
      type: 'integer',
      "default": defaultInitOptions.maxParamLength
    },
    onProtoPoisoning: {
      type: 'string',
      "default": defaultInitOptions.onProtoPoisoning
    },
    pluginTimeout: {
      type: 'integer',
      "default": defaultInitOptions.pluginTimeout
    },
    requestIdHeader: {
      type: 'string',
      "default": defaultInitOptions.requestIdHeader
    },
    requestIdLogLabel: {
      type: 'string',
      "default": defaultInitOptions.requestIdLogLabel
    }
  }
};
var validate = ajv.compile(schema);
var moduleCode = "// This file is autogenerated by ".concat(__filename.replace(__dirname, 'build'), ", do not edit\n/* istanbul ignore file */\n// constant needed for customRule0 to work\nconst self = {}\n\n").concat(pack(ajv, validate), "\n\n").concat(customRule0.toString(), "\n\nmodule.exports.defaultInitOptions = ").concat(JSON.stringify(defaultInitOptions), "\n");
fs.writeFileSync(path.join(__dirname, '..', 'lib', 'configValidator.js'), moduleCode);