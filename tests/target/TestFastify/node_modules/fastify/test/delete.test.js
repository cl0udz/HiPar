'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.concat");

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var fastify = require('..')();

var schema = {
  schema: {
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};
var querySchema = {
  schema: {
    querystring: {
      type: 'object',
      properties: {
        hello: {
          type: 'integer'
        }
      }
    }
  }
};
var paramsSchema = {
  schema: {
    params: {
      type: 'object',
      properties: {
        foo: {
          type: 'string'
        },
        test: {
          type: 'integer'
        }
      }
    }
  }
};
var headersSchema = {
  schema: {
    headers: {
      type: 'object',
      properties: {
        'x-test': {
          type: 'number'
        }
      }
    }
  }
};
var bodySchema = {
  schema: {
    body: {
      type: 'object',
      properties: {
        hello: {
          type: 'string'
        }
      }
    },
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};
test('shorthand - delete', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/', schema, function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - delete params', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/params/:foo/:test', paramsSchema, function (req, reply) {
      reply.code(200).send(req.params);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - delete, querystring schema', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/query', querySchema, function (req, reply) {
      reply.send(req.query);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - get, headers schema', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/headers', headersSchema, function (req, reply) {
      reply.code(200).send(req.headers);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('missing schema - delete', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/missing', function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('body - delete', function (t) {
  t.plan(1);

  try {
    fastify["delete"]('/body', bodySchema, function (req, reply) {
      reply.send(req.body);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
fastify.listen(0, function (err) {
  t.error(err);
  fastify.server.unref();
  test('shorthand - request delete', function (t) {
    t.plan(4);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - request delete params schema', function (t) {
    t.plan(4);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/params/world/123'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        foo: 'world',
        test: 123
      });
    });
  });
  test('shorthand - request delete params schema error', function (t) {
    t.plan(3);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/params/world/string'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: 'params.test should be integer',
        statusCode: 400
      });
    });
  });
  test('shorthand - request delete headers schema', function (t) {
    t.plan(4);
    sget({
      method: 'DELETE',
      headers: {
        'x-test': 1
      },
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.strictEqual(JSON.parse(body)['x-test'], 1);
    });
  });
  test('shorthand - request delete headers schema error', function (t) {
    t.plan(3);
    sget({
      method: 'DELETE',
      headers: {
        'x-test': 'abc'
      },
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: "headers['x-test'] should be number",
        statusCode: 400
      });
    });
  });
  test('shorthand - request delete querystring schema', function (t) {
    t.plan(4);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=123'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 123
      });
    });
  });
  test('shorthand - request delete querystring schema error', function (t) {
    t.plan(3);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=world'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: 'querystring.hello should be integer',
        statusCode: 400
      });
    });
  });
  test('shorthand - request delete missing schema', function (t) {
    t.plan(4);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/missing'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - delete with body', function (t) {
    t.plan(3);
    sget({
      method: 'DELETE',
      url: 'http://localhost:' + fastify.server.address().port + '/body',
      body: {
        hello: 'world'
      },
      json: true
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(body, {
        hello: 'world'
      });
    });
  });
}); // https://github.com/fastify/fastify/issues/936

test('shorthand - delete with application/json Content-Type header and without body', function (t) {
  t.plan(4);

  var fastify = require('..')();

  fastify["delete"]('/', {}, function (req, reply) {
    t.equal(req.body, null);
    reply.send(req.body);
  });
  fastify.inject({
    method: 'DELETE',
    url: '/',
    headers: {
      'Content-Type': 'application/json'
    },
    body: null
  }, function (err, response) {
    t.error(err);
    t.strictEqual(response.statusCode, 200);
    t.deepEqual(JSON.parse(response.payload), null);
  });
});