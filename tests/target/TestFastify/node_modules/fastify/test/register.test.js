'use strict';
/* eslint no-prototype-builtins: 0 */

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var Fastify = require('..');

test('register', function (t) {
  t.plan(17);
  var fastify = Fastify();
  fastify.register(function (instance, opts, done) {
    t.notEqual(instance, fastify);
    t.ok(fastify.isPrototypeOf(instance));
    t.is(_typeof(opts), 'object');
    t.is(_typeof(done), 'function');
    instance.get('/first', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    done();
  });
  fastify.register(function (instance, opts, done) {
    t.notEqual(instance, fastify);
    t.ok(fastify.isPrototypeOf(instance));
    t.is(_typeof(opts), 'object');
    t.is(_typeof(done), 'function');
    instance.get('/second', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    done();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    makeRequest('first');
    makeRequest('second');
  });

  function makeRequest(path) {
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/' + path
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  }
});
test('internal route declaration should pass the error generated by the register to the next handler / 1', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    next(new Error('kaboom'));
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    fastify.close();
    t.is(err.message, 'kaboom');
  });
});
test('internal route declaration should pass the error generated by the register to the next handler / 2', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    next(new Error('kaboom'));
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.after(function (err) {
    t.is(err.message, 'kaboom');
  });
  fastify.listen(0, function (err) {
    fastify.close();
    t.error(err);
  });
});