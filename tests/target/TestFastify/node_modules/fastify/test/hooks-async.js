'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.starts-with");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("regenerator-runtime/runtime");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var split = require('split2');

var sget = require('simple-get').concat;

var Fastify = require('..');

var fs = require('fs');

var _require = require('util'),
    promisify = _require.promisify;

var sleep = promisify(setTimeout);

function asyncHookTest(t) {
  var test = t.test;
  test('async hooks', function (t) {
    t.plan(21);
    var fastify = Fastify();
    fastify.addHook('onRequest', function _callee(request, reply) {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(sleep(1));

            case 2:
              request.test = 'the request is coming';
              reply.test = 'the reply has come';

              if (!(request.raw.method === 'DELETE')) {
                _context.next = 6;
                break;
              }

              throw new Error('some error');

            case 6:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee2(request, reply) {
      return regeneratorRuntime.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(sleep(1));

            case 2:
              t.is(request.test, 'the request is coming');
              t.is(reply.test, 'the reply has come');

              if (!(request.raw.method === 'HEAD')) {
                _context2.next = 6;
                break;
              }

              throw new Error('some error');

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee3(request, reply, payload) {
      return regeneratorRuntime.async(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(sleep(1));

            case 2:
              t.ok('onSend called');

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee4(request, reply) {
      return regeneratorRuntime.async(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(sleep(1));

            case 2:
              t.ok('onResponse called');

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.is(request.test, 'the request is coming');
      t.is(reply.test, 'the reply has come');
      reply.code(200).send({
        hello: 'world'
      });
    });
    fastify.head('/', function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    fastify["delete"]('/', function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.server.unref();
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-length'], '' + body.length);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
      sget({
        method: 'HEAD',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 500);
      });
      sget({
        method: 'DELETE',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 500);
      });
    });
  });
  test('modify payload', function (t) {
    t.plan(10);
    var fastify = Fastify();
    var payload = {
      hello: 'world'
    };
    var modifiedPayload = {
      hello: 'modified'
    };
    var anotherPayload = '"winter is coming"';
    fastify.addHook('onSend', function _callee5(request, reply, thePayload) {
      return regeneratorRuntime.async(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              t.ok('onSend called');
              t.deepEqual(JSON.parse(thePayload), payload);
              return _context5.abrupt("return", thePayload.replace('world', 'modified'));

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee6(request, reply, thePayload) {
      return regeneratorRuntime.async(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              t.ok('onSend called');
              t.deepEqual(JSON.parse(thePayload), modifiedPayload);
              return _context6.abrupt("return", anotherPayload);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee7(request, reply, thePayload) {
      return regeneratorRuntime.async(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              t.ok('onSend called');
              t.strictEqual(thePayload, anotherPayload);

            case 2:
            case "end":
              return _context7.stop();
          }
        }
      });
    });
    fastify.get('/', function (req, reply) {
      reply.send(payload);
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.payload, anotherPayload);
      t.strictEqual(res.statusCode, 200);
      t.strictEqual(res.headers['content-length'], '18');
    });
  });
  test('onRequest hooks should be able to block a request', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('onRequest', function _callee8(req, reply) {
      return regeneratorRuntime.async(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      });
    });
    fastify.addHook('onRequest', function _callee9(req, reply) {
      return regeneratorRuntime.async(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context9.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee10(req, reply) {
      return regeneratorRuntime.async(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context10.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee11(req, reply, payload) {
      return regeneratorRuntime.async(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee12(request, reply) {
      return regeneratorRuntime.async(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context12.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preHandler hooks should be able to block a request', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('preHandler', function _callee13(req, reply) {
      return regeneratorRuntime.async(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context13.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee14(req, reply) {
      return regeneratorRuntime.async(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context14.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee15(req, reply, payload) {
      return regeneratorRuntime.async(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              t.equal(payload, 'hello');

            case 1:
            case "end":
              return _context15.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee16(request, reply) {
      return regeneratorRuntime.async(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context16.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preValidation hooks should be able to block a request', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('preValidation', function _callee17(req, reply) {
      return regeneratorRuntime.async(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context17.stop();
          }
        }
      });
    });
    fastify.addHook('preValidation', function _callee18(req, reply) {
      return regeneratorRuntime.async(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context18.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee19(req, reply, payload) {
      return regeneratorRuntime.async(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              t.equal(payload, 'hello');

            case 1:
            case "end":
              return _context19.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee20(request, reply) {
      return regeneratorRuntime.async(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context20.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preValidation hooks should be able to block a request with async onSend', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('preValidation', function _callee21(req, reply) {
      return regeneratorRuntime.async(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context21.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee22(req, reply, payload) {
      return regeneratorRuntime.async(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return regeneratorRuntime.awrap(sleep(10));

            case 2:
              t.equal(payload, 'hello');

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee23(request, reply) {
      return regeneratorRuntime.async(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              t.fail('we should not be here');

            case 1:
            case "end":
              return _context23.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee24(request, reply) {
      return regeneratorRuntime.async(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context24.stop();
          }
        }
      });
    });
    fastify.post('/', {
      schema: {
        body: {
          type: 'object',
          properties: {
            hello: {
              type: 'string'
            }
          },
          required: ['hello']
        }
      }
    }, function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'POST'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preSerialization hooks should be able to modify the payload', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.addHook('preSerialization', function _callee25(req, reply, payload) {
      return regeneratorRuntime.async(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              return _context25.abrupt("return", {
                hello: 'another world'
              });

            case 1:
            case "end":
              return _context25.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      reply.send({
        hello: 'world'
      });
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.deepEqual(JSON.parse(res.payload), {
        hello: 'another world'
      });
    });
  });
  test('preSerialization hooks should handle errors', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.addHook('preSerialization', function _callee26(req, reply, payload) {
      return regeneratorRuntime.async(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              throw new Error('kaboom');

            case 1:
            case "end":
              return _context26.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      reply.send({
        hello: 'world'
      });
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 500);
      t.deepEqual(JSON.parse(res.payload), {
        error: 'Internal Server Error',
        message: 'kaboom',
        statusCode: 500
      });
    });
  });
  test('onRequest hooks should be able to block a request (last hook)', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('onRequest', function _callee27(req, reply) {
      return regeneratorRuntime.async(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context27.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee28(req, reply) {
      return regeneratorRuntime.async(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context28.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee29(req, reply, payload) {
      return regeneratorRuntime.async(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context29.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee30(request, reply) {
      return regeneratorRuntime.async(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context30.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preHandler hooks should be able to block a request (last hook)', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('preHandler', function _callee31(req, reply) {
      return regeneratorRuntime.async(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context31.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee32(req, reply, payload) {
      return regeneratorRuntime.async(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              t.equal(payload, 'hello');

            case 1:
            case "end":
              return _context32.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee33(request, reply) {
      return regeneratorRuntime.async(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context33.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('preHandler hooks should be able to block a request (last hook) with a delay in onSend', function (t) {
    t.plan(5);
    var fastify = Fastify();
    fastify.addHook('preHandler', function _callee34(req, reply) {
      return regeneratorRuntime.async(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              reply.send('hello');

            case 1:
            case "end":
              return _context34.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee35(req, reply, payload) {
      return regeneratorRuntime.async(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return regeneratorRuntime.awrap(sleep(10));

            case 2:
              t.equal(payload, 'hello');

            case 3:
            case "end":
              return _context35.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee36(request, reply) {
      return regeneratorRuntime.async(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context36.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
      t.is(res.payload, 'hello');
    });
  });
  test('onRequest respond with a stream', function (t) {
    t.plan(4);
    var fastify = Fastify();
    fastify.addHook('onRequest', function _callee37(req, reply) {
      return regeneratorRuntime.async(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              return _context37.abrupt("return", new Promise(function (resolve, reject) {
                var stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8'); // stream.pipe(res)
                // res.once('finish', resolve)

                reply.send(stream);
                reply.res.once('finish', function () {
                  return resolve();
                });
              }));

            case 1:
            case "end":
              return _context37.stop();
          }
        }
      });
    });
    fastify.addHook('onRequest', function _callee38(req, res) {
      return regeneratorRuntime.async(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context38.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee39(req, reply) {
      return regeneratorRuntime.async(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context39.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee40(req, reply, payload) {
      return regeneratorRuntime.async(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context40.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee41(request, reply) {
      return regeneratorRuntime.async(function _callee41$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context41.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
    });
  });
  test('preHandler respond with a stream', function (t) {
    t.plan(7);
    var fastify = Fastify();
    fastify.addHook('onRequest', function _callee42(req, res) {
      return regeneratorRuntime.async(function _callee42$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context42.stop();
          }
        }
      });
    }); // we are calling `reply.send` inside the `preHandler` hook with a stream,
    // this triggers the `onSend` hook event if `preHanlder` has not yet finished

    var order = [1, 2];
    fastify.addHook('preHandler', function _callee43(req, reply) {
      return regeneratorRuntime.async(function _callee43$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              return _context43.abrupt("return", new Promise(function (resolve, reject) {
                var stream = fs.createReadStream(process.cwd() + '/test/stream.test.js', 'utf8');
                reply.send(stream);
                reply.res.once('finish', function () {
                  t.is(order.shift(), 2);
                  resolve();
                });
              }));

            case 1:
            case "end":
              return _context43.stop();
          }
        }
      });
    });
    fastify.addHook('preHandler', function _callee44(req, reply) {
      return regeneratorRuntime.async(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              t.fail('this should not be called');

            case 1:
            case "end":
              return _context44.stop();
          }
        }
      });
    });
    fastify.addHook('onSend', function _callee45(req, reply, payload) {
      return regeneratorRuntime.async(function _callee45$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              t.is(order.shift(), 1);
              t.is(_typeof(payload.pipe), 'function');

            case 2:
            case "end":
              return _context45.stop();
          }
        }
      });
    });
    fastify.addHook('onResponse', function _callee46(request, reply) {
      return regeneratorRuntime.async(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              t.ok('called');

            case 1:
            case "end":
              return _context46.stop();
          }
        }
      });
    });
    fastify.get('/', function (request, reply) {
      t.fail('we should not be here');
    });
    fastify.inject({
      url: '/',
      method: 'GET'
    }, function (err, res) {
      t.error(err);
      t.is(res.statusCode, 200);
    });
  });
  test('Should log a warning if is an async function with `next`', function (t) {
    t.test('3 arguments', function (t) {
      t.plan(3);
      var stream = split(JSON.parse);
      var fastify = Fastify({
        logger: {
          stream: stream
        }
      });
      stream.on('data', function (line) {
        t.strictEqual(line.level, 40);
        t["true"](line.msg.startsWith("Async function has too many arguments. Async hooks should not use the 'next' argument."));
        t["true"](/test(\\|\/)hooks-async\.js/.test(line.msg));
      });
      fastify.addHook('onRequest', function _callee47(req, reply, next) {
        return regeneratorRuntime.async(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
              case "end":
                return _context47.stop();
            }
          }
        });
      });
    });
    t.test('4 arguments', function (t) {
      t.plan(9);
      var stream = split(JSON.parse);
      var fastify = Fastify({
        logger: {
          stream: stream
        }
      });
      stream.on('data', function (line) {
        t.strictEqual(line.level, 40);
        t["true"](line.msg.startsWith("Async function has too many arguments. Async hooks should not use the 'next' argument."));
        t["true"](/test(\\|\/)hooks-async\.js/.test(line.msg));
      });
      fastify.addHook('onSend', function _callee48(req, reply, payload, next) {
        return regeneratorRuntime.async(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
              case "end":
                return _context48.stop();
            }
          }
        });
      });
      fastify.addHook('preSerialization', function _callee49(req, reply, payload, next) {
        return regeneratorRuntime.async(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
              case "end":
                return _context49.stop();
            }
          }
        });
      });
      fastify.addHook('onError', function _callee50(req, reply, error, next) {
        return regeneratorRuntime.async(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
              case "end":
                return _context50.stop();
            }
          }
        });
      });
    });
    t.end();
  });
}

module.exports = asyncHookTest;