'use strict';
/* eslint no-prototype-builtins: 0 */

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.starts-with");

require("core-js/modules/web.immediate");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.starts-with");

require("core-js/modules/web.immediate");

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var sget = require('simple-get').concat;

var fp = require('fastify-plugin');

var lolex = require('lolex');

test('require a plugin', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.register(require('./plugin.helper'));
  fastify.ready(function () {
    t.ok(fastify.test);
  });
});
test('plugin metadata - ignore prefix', function (t) {
  t.plan(2);
  var fastify = Fastify();
  plugin[Symbol["for"]('skip-override')] = true;
  fastify.register(plugin, {
    prefix: 'foo'
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equals(res.payload, 'hello');
  });

  function plugin(instance, opts, next) {
    instance.get('/', function (request, reply) {
      reply.send('hello');
    });
    next();
  }
});
test('fastify.register with fastify-plugin should not incapsulate his code', function (t) {
  t.plan(10);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      i.decorate('test', function () {});
      t.ok(i.test);
      n();
    }));
    t.notOk(instance.test); // the decoration is added at the end

    instance.after(function () {
      t.ok(instance.test);
    });
    instance.get('/', function (req, reply) {
      t.ok(instance.test);
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('fastify.register with fastify-plugin should provide access to external fastify instance if opts argument is a function', function (t) {
  t.plan(22);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      i.decorate('global', function () {});
      t.ok(i.global);
      n();
    }));
    instance.register(function (i, o, n) {
      return n();
    }, function (p) {
      t.notOk(p === instance || p === fastify);
      t.ok(instance.isPrototypeOf(p));
      t.ok(fastify.isPrototypeOf(p));
      t.ok(p.global);
    });
    instance.register(function (i, o, n) {
      i.decorate('local', function () {});
      n();
    });
    instance.register(function (i, o, n) {
      return n();
    }, function (p) {
      return t.notOk(p.local);
    });
    instance.register(function (i, o, n) {
      t.ok(i.local);
      n();
    }, function (p) {
      return p.decorate('local', function () {});
    });
    instance.register(function (i, o, n) {
      return n();
    }, function (p) {
      return t.notOk(p.local);
    });
    instance.register(fp(function (i, o, n) {
      t.ok(i.global_2);
      n();
    }), function (p) {
      return p.decorate('global_2', function () {
        return 'hello';
      });
    });
    instance.register(function (i, o, n) {
      i.decorate('global_2', function () {
        return 'world';
      });
      n();
    }, function (p) {
      return p.get('/', function (req, reply) {
        t.ok(p.global_2);
        reply.send({
          hello: p.global_2()
        });
      });
    });
    t.notOk(instance.global);
    t.notOk(instance.global_2);
    t.notOk(instance.local); // the decoration is added at the end

    instance.after(function () {
      t.ok(instance.global);
      t.strictEqual(instance.global_2(), 'hello');
      t.notOk(instance.local);
    });
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.global);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('fastify.register with fastify-plugin registers root level plugins', function (t) {
  t.plan(15);
  var fastify = Fastify();

  function rootPlugin(instance, opts, next) {
    instance.decorate('test', 'first');
    t.ok(instance.test);
    next();
  }

  function innerPlugin(instance, opts, next) {
    instance.decorate('test2', 'second');
    next();
  }

  fastify.register(fp(rootPlugin));
  fastify.register(function (instance, opts, next) {
    t.ok(instance.test);
    instance.register(fp(innerPlugin));
    instance.get('/test2', function (req, reply) {
      t.ok(instance.test2);
      reply.send({
        test2: instance.test2
      });
    });
    next();
  });
  fastify.ready(function () {
    t.ok(fastify.test);
    t.notOk(fastify.test2);
  });
  fastify.get('/', function (req, reply) {
    t.ok(fastify.test);
    reply.send({
      test: fastify.test
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        test: 'first'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/test2'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        test2: 'second'
      });
    });
  });
});
test('check dependencies - should not throw', function (t) {
  t.plan(12);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      i.decorate('test', function () {});
      t.ok(i.test);
      n();
    }));
    instance.register(fp(function (i, o, n) {
      try {
        i.decorate('otherTest', function () {}, ['test']);
        t.ok(i.test);
        t.ok(i.otherTest);
        n();
      } catch (e) {
        t.fail();
      }
    }));
    instance.get('/', function (req, reply) {
      t.ok(instance.test);
      t.ok(instance.otherTest);
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
    t.notOk(fastify.otherTest);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('check dependencies - should throw', function (t) {
  t.plan(12);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      try {
        i.decorate('otherTest', function () {}, ['test']);
        t.fail();
      } catch (e) {
        t.is(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');
        t.is(e.message, 'FST_ERR_DEC_MISSING_DEPENDENCY: The decorator is missing dependency \'test\'.');
      }

      n();
    }));
    instance.register(fp(function (i, o, n) {
      i.decorate('test', function () {});
      t.ok(i.test);
      t.notOk(i.otherTest);
      n();
    }));
    instance.get('/', function (req, reply) {
      t.ok(instance.test);
      t.notOk(instance.otherTest);
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('set the plugin name based on the plugin displayName symbol', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.register(fp(function (fastify, opts, next) {
    t.strictEqual(fastify.pluginName, 'plugin-A');
    fastify.register(fp(function (fastify, opts, next) {
      t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB');
      next();
    }, {
      name: 'plugin-AB'
    }));
    fastify.register(fp(function (fastify, opts, next) {
      t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB -> plugin-AC');
      next();
    }, {
      name: 'plugin-AC'
    }));
    next();
  }, {
    name: 'plugin-A'
  }));
  fastify.register(fp(function (fastify, opts, next) {
    t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB -> plugin-AC -> plugin-B');
    next();
  }, {
    name: 'plugin-B'
  }));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('plugin name will change when using no encapsulation', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.register(fp(function (fastify, opts, next) {
    // store it in a different variable will hold the correct name
    var pluginName = fastify.pluginName;
    fastify.register(fp(function (fastify, opts, next) {
      t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB');
      next();
    }, {
      name: 'plugin-AB'
    }));
    fastify.register(fp(function (fastify, opts, next) {
      t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB -> plugin-AC');
      next();
    }, {
      name: 'plugin-AC'
    }));
    setImmediate(function () {
      // normally we would expect the name plugin-A
      // but we operate on the same instance in each plugin
      t.strictEqual(fastify.pluginName, 'plugin-A -> plugin-AB -> plugin-AC');
      t.strictEqual(pluginName, 'plugin-A');
    });
    next();
  }, {
    name: 'plugin-A'
  }));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('plugin name is undefined when accessing in no plugin context', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.strictEqual(fastify.pluginName, undefined);
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('set the plugin name based on the plugin function name', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.register(function myPluginA(fastify, opts, next) {
    t.strictEqual(fastify.pluginName, 'myPluginA');
    fastify.register(function myPluginAB(fastify, opts, next) {
      t.strictEqual(fastify.pluginName, 'myPluginAB');
      next();
    });
    setImmediate(function () {
      // exact name due to encapsulation
      t.strictEqual(fastify.pluginName, 'myPluginA');
    });
    next();
  });
  fastify.register(function myPluginB(fastify, opts, next) {
    t.strictEqual(fastify.pluginName, 'myPluginB');
    next();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('approximate a plugin name when no meta data is available', function (t) {
  t.plan(7);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    // A
    t.is(fastify.pluginName.startsWith('(fastify, opts, next)'), true);
    t.is(fastify.pluginName.includes('// A'), true);
    fastify.register(function (fastify, opts, next) {
      // B
      t.is(fastify.pluginName.startsWith('(fastify, opts, next)'), true);
      t.is(fastify.pluginName.includes('// B'), true);
      next();
    });
    setImmediate(function () {
      t.is(fastify.pluginName.startsWith('(fastify, opts, next)'), true);
      t.is(fastify.pluginName.includes('// A'), true);
    });
    next();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('approximate a plugin name also when fastify-plugin has no meta data', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(fp(function (fastify, opts, next) {
    t.is(fastify.pluginName, 'plugin.test');
    fastify.register(fp(function B(fastify, opts, next) {
      // function has name
      t.is(fastify.pluginName, 'plugin.test -> B');
      next();
    }));
    setImmediate(function () {
      t.is(fastify.pluginName, 'plugin.test -> B');
    });
    next();
  }));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.close();
  });
});
test('plugin incapsulation', function (t) {
  t.plan(10);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      i.decorate('test', 'first');
      n();
    }));
    instance.get('/first', function (req, reply) {
      reply.send({
        plugin: instance.test
      });
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      i.decorate('test', 'second');
      n();
    }));
    instance.get('/second', function (req, reply) {
      reply.send({
        plugin: instance.test
      });
    });
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/first'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        plugin: 'first'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/second'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        plugin: 'second'
      });
    });
  });
});
test('if a plugin raises an error and there is not a callback to handle it, the server must not start', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    next(new Error('err'));
  });
  fastify.listen(0, function (err) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
  });
});
test('add hooks after route declaration', function (t) {
  t.plan(3);
  var fastify = Fastify();

  function plugin(instance, opts, next) {
    instance.decorateRequest('check', {});
    setImmediate(next);
  }

  fastify.register(fp(plugin));
  fastify.register(function (instance, options, next) {
    instance.addHook('preHandler', function b(req, res, next) {
      req.check.hook2 = true;
      next();
    });
    instance.get('/', function (req, reply) {
      reply.send(req.check);
    });
    instance.addHook('preHandler', function c(req, res, next) {
      req.check.hook3 = true;
      next();
    });
    next();
  });
  fastify.addHook('preHandler', function a(req, res, next) {
    req.check.hook1 = true;
    next();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.deepEqual(JSON.parse(body), {
        hook1: true,
        hook2: true,
        hook3: true
      });
      fastify.close();
    });
  });
});
test('nested plugins', function (t) {
  t.plan(5);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.register(function (fastify, opts, next) {
    fastify.register(function (fastify, opts, next) {
      fastify.get('/', function (req, reply) {
        reply.send('I am child 1');
      });
      next();
    }, {
      prefix: '/child1'
    });
    fastify.register(function (fastify, opts, next) {
      fastify.get('/', function (req, reply) {
        reply.send('I am child 2');
      });
      next();
    }, {
      prefix: '/child2'
    });
    next();
  }, {
    prefix: '/parent'
  });
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/parent/child1'
    }, function (err, response, body) {
      t.error(err);
      t.deepEqual(body.toString(), 'I am child 1');
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/parent/child2'
    }, function (err, response, body) {
      t.error(err);
      t.deepEqual(body.toString(), 'I am child 2');
    });
  });
});
test('plugin metadata - decorators', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.decorate('plugin1', true);
  fastify.decorateReply('plugin1', true);
  fastify.decorateRequest('plugin1', true);
  plugin[Symbol["for"]('skip-override')] = true;
  plugin[Symbol["for"]('plugin-meta')] = {
    decorators: {
      fastify: ['plugin1'],
      reply: ['plugin1'],
      request: ['plugin1']
    }
  };
  fastify.register(plugin);
  fastify.ready(function () {
    t.ok(fastify.plugin);
  });

  function plugin(instance, opts, next) {
    instance.decorate('plugin', true);
    next();
  }
});
test('plugin metadata - dependencies', function (t) {
  t.plan(1);
  var fastify = Fastify();
  dependency[Symbol["for"]('skip-override')] = true;
  dependency[Symbol["for"]('plugin-meta')] = {
    name: 'plugin'
  };
  plugin[Symbol["for"]('skip-override')] = true;
  plugin[Symbol["for"]('plugin-meta')] = {
    dependencies: ['plugin']
  };
  fastify.register(dependency);
  fastify.register(plugin);
  fastify.ready(function () {
    t.pass('everything right');
  });

  function dependency(instance, opts, next) {
    next();
  }

  function plugin(instance, opts, next) {
    next();
  }
});
test('plugin metadata - dependencies (nested)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  dependency[Symbol["for"]('skip-override')] = true;
  dependency[Symbol["for"]('plugin-meta')] = {
    name: 'plugin'
  };
  nested[Symbol["for"]('skip-override')] = true;
  nested[Symbol["for"]('plugin-meta')] = {
    dependencies: ['plugin']
  };
  fastify.register(dependency);
  fastify.register(plugin);
  fastify.ready(function () {
    t.pass('everything right');
  });

  function dependency(instance, opts, next) {
    next();
  }

  function plugin(instance, opts, next) {
    instance.register(nested);
    next();
  }

  function nested(instance, opts, next) {
    next();
  }
});
test('pluginTimeout', function (t) {
  t.plan(2);
  var fastify = Fastify({
    pluginTimeout: 10
  });
  fastify.register(function (app, opts, next) {// to no call next on purpose
  });
  fastify.ready(function (err) {
    t.ok(err);
    t.equal(err.code, 'ERR_AVVIO_PLUGIN_TIMEOUT');
  });
});
test('pluginTimeout default', function (t) {
  t.plan(2);
  var clock = lolex.install();
  var fastify = Fastify();
  fastify.register(function (app, opts, next) {
    // default time elapsed without calling next
    clock.tick(10000);
  });
  fastify.ready(function (err) {
    t.ok(err);
    t.equal(err.code, 'ERR_AVVIO_PLUGIN_TIMEOUT');
  });
  t.tearDown(clock.uninstall);
});