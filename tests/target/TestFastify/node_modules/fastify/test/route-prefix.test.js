'use strict';

var t = require('tap');

var test = t.test;

var Fastify = require('..');

test('Prefix options should add a prefix for all the routes inside a register / 1', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.get('/first', function (req, reply) {
    reply.send({
      route: '/first'
    });
  });
  fastify.register(function (fastify, opts, next) {
    fastify.get('/first', function (req, reply) {
      reply.send({
        route: '/v1/first'
      });
    });
    fastify.register(function (fastify, opts, next) {
      fastify.get('/first', function (req, reply) {
        reply.send({
          route: '/v1/v2/first'
        });
      });
      next();
    }, {
      prefix: '/v2'
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/first'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/first'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/first'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/first'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/v2/first'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/v2/first'
    });
  });
});
test('Prefix options should add a prefix for all the routes inside a register / 2', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/first', function (req, reply) {
      reply.send({
        route: '/v1/first'
      });
    });
    fastify.get('/second', function (req, reply) {
      reply.send({
        route: '/v1/second'
      });
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/first'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/first'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/second'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/second'
    });
  });
});
test('Prefix options should add a prefix for all the chained routes inside a register / 3', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/first', function (req, reply) {
      reply.send({
        route: '/v1/first'
      });
    }).get('/second', function (req, reply) {
      reply.send({
        route: '/v1/second'
      });
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/first'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/first'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/second'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/second'
    });
  });
});
test('Prefix should support parameters as well', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/hello', function (req, reply) {
      reply.send({
        id: req.params.id
      });
    });
    next();
  }, {
    prefix: '/v1/:id'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/param/hello'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      id: 'param'
    });
  });
});
test('Prefix should support /', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('Prefix without /', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    next();
  }, {
    prefix: 'v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('Prefix with trailing /', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/route1', function (req, reply) {
      reply.send({
        hello: 'world1'
      });
    });
    fastify.get('route2', function (req, reply) {
      reply.send({
        hello: 'world2'
      });
    });
    fastify.register(function (fastify, opts, next) {
      fastify.get('/route3', function (req, reply) {
        reply.send({
          hello: 'world3'
        });
      });
      next();
    }, {
      prefix: '/inner/'
    });
    next();
  }, {
    prefix: '/v1/'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/route1'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world1'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/route2'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world2'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/inner/route3'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world3'
    });
  });
});
test('Prefix works multiple levels deep', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.register(function (fastify, opts, next) {
      fastify.register(function (fastify, opts, next) {
        fastify.register(function (fastify, opts, next) {
          fastify.get('/', function (req, reply) {
            reply.send({
              hello: 'world'
            });
          });
          next();
        }, {
          prefix: '/v3'
        });
        next();
      }); // No prefix on this level

      next();
    }, {
      prefix: 'v2'
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/v2/v3'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('Different register - encapsulation check', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/first', function (req, reply) {
    reply.send({
      route: '/first'
    });
  });
  fastify.register(function (instance, opts, next) {
    instance.register(function (f, opts, next) {
      f.get('/', function (req, reply) {
        reply.send({
          route: '/v1/v2'
        });
      });
      next();
    }, {
      prefix: '/v2'
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.register(function (instance, opts, next) {
    instance.register(function (f, opts, next) {
      f.get('/', function (req, reply) {
        reply.send({
          route: '/v3/v4'
        });
      });
      next();
    }, {
      prefix: '/v4'
    });
    next();
  }, {
    prefix: '/v3'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/v2'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v1/v2'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/v3/v4'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      route: '/v3/v4'
    });
  });
});
test('Can retrieve prefix within encapsulated instances', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.get('/one', function (req, reply) {
      reply.send(instance.prefix);
    });
    instance.register(function (instance, opts, next) {
      instance.get('/two', function (req, reply) {
        reply.send(instance.prefix);
      });
      next();
    }, {
      prefix: '/v2'
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/one'
  }, function (err, res) {
    t.error(err);
    t.is(res.payload, '/v1');
  });
  fastify.inject({
    method: 'GET',
    url: '/v1/v2/two'
  }, function (err, res) {
    t.error(err);
    t.is(res.payload, '/v1/v2');
  });
});
test('matches both /prefix and /prefix/ with a / route', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    next();
  }, {
    prefix: '/prefix'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('prefix "/prefix/" does not match "/prefix" with a / route', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.register(function (fastify, opts, next) {
    fastify.get('/', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    next();
  }, {
    prefix: '/prefix/'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.equal(res.statusCode, 404);
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('matches both /prefix and /prefix/ with a / route - ignoreTrailingSlash: true', function (t) {
  t.plan(4);
  var fastify = Fastify({
    ignoreTrailingSlash: true
  });
  fastify.register(function (fastify, opts, next) {
    fastify.get('/', function (req, reply) {
      reply.send({
        hello: 'world'
      });
    });
    next();
  }, {
    prefix: '/prefix'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('matches both /prefix and /prefix/  with a / route - prefixTrailingSlash: "both", ignoreTrailingSlash: false', function (t) {
  t.plan(4);
  var fastify = Fastify({
    ignoreTrailingSlash: false
  });
  fastify.register(function (fastify, opts, next) {
    fastify.route({
      method: 'GET',
      url: '/',
      prefixTrailingSlash: 'both',
      handler: function handler(req, reply) {
        reply.send({
          hello: 'world'
        });
      }
    });
    next();
  }, {
    prefix: '/prefix'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('returns 404 status code with /prefix/ and / route - prefixTrailingSlash: "both" (default), ignoreTrailingSlash: true', function (t) {
  t.plan(2);
  var fastify = Fastify({
    ignoreTrailingSlash: true
  });
  fastify.register(function (fastify, opts, next) {
    fastify.route({
      method: 'GET',
      url: '/',
      handler: function handler(req, reply) {
        reply.send({
          hello: 'world'
        });
      }
    });
    next();
  }, {
    prefix: '/prefix/'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix//'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      error: 'Not Found',
      message: 'Route GET:/prefix// not found',
      statusCode: 404
    });
  });
});
test('matches only /prefix  with a / route - prefixTrailingSlash: "no-slash", ignoreTrailingSlash: false', function (t) {
  t.plan(4);
  var fastify = Fastify({
    ignoreTrailingSlash: false
  });
  fastify.register(function (fastify, opts, next) {
    fastify.route({
      method: 'GET',
      url: '/',
      prefixTrailingSlash: 'no-slash',
      handler: function handler(req, reply) {
        reply.send({
          hello: 'world'
        });
      }
    });
    next();
  }, {
    prefix: '/prefix'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.equal(JSON.parse(res.payload).statusCode, 404);
  });
});
test('matches only /prefix/  with a / route - prefixTrailingSlash: "slash", ignoreTrailingSlash: false', function (t) {
  t.plan(4);
  var fastify = Fastify({
    ignoreTrailingSlash: false
  });
  fastify.register(function (fastify, opts, next) {
    fastify.route({
      method: 'GET',
      url: '/',
      prefixTrailingSlash: 'slash',
      handler: function handler(req, reply) {
        reply.send({
          hello: 'world'
        });
      }
    });
    next();
  }, {
    prefix: '/prefix'
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix/'
  }, function (err, res) {
    t.error(err);
    t.same(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/prefix'
  }, function (err, res) {
    t.error(err);
    t.equal(JSON.parse(res.payload).statusCode, 404);
  });
});