'use strict';

var t = require('tap');

var Joi = require('joi');

require('./helper').payloadMethod('post', t);

require('./input-validation').payloadMethod('post', t);

var Fastify = require('..');

t.test('cannot call setSchemaCompiler after binding', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);

    try {
      fastify.setSchemaCompiler(function () {});
      t.fail();
    } catch (e) {
      t.pass();
    }
  });
});
t.test('cannot set schemaCompiler after binding', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);

    try {
      fastify.schemaCompiler = function () {};

      t.fail();
    } catch (e) {
      t.pass();
    }
  });
});
t.test('get schemaCompiler after set schemaCompiler', function (t) {
  t.plan(2);

  var mySchemaCompiler = function mySchemaCompiler() {};

  var fastify = Fastify();
  fastify.schemaCompiler = mySchemaCompiler;
  var sc = fastify.schemaCompiler;
  t.ok(Object.is(mySchemaCompiler, sc));
  fastify.ready(t.error);
});
t.test('get schemaCompiler after setSchemaCompiler', function (t) {
  t.plan(2);

  var mySchemaCompiler = function mySchemaCompiler() {};

  var fastify = Fastify();
  fastify.setSchemaCompiler(mySchemaCompiler);
  var sc = fastify.schemaCompiler;
  t.ok(Object.is(mySchemaCompiler, sc));
  fastify.ready(t.error);
});
t.test('get schemaCompiler is empty for schemaCompilere settle on routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var body = Joi.object().keys({
    name: Joi.string(),
    work: Joi.string()
  }).required();

  var schemaCompiler = function schemaCompiler(schema) {
    return function (data) {
      return Joi.validate(data, schema);
    };
  };

  fastify.post('/', {
    schema: {
      body
    },
    schemaCompiler
  }, function (req, reply) {
    reply.send('ok');
  });
  fastify.inject({
    method: 'POST',
    payload: {},
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(fastify.schemaCompiler, null);
  });
});