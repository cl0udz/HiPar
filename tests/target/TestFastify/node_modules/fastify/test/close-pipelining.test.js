'use strict';

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var autocannon = require('autocannon');

test('Should return 503 while closing - pipelining', function (t) {
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    fastify.close();
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    var instance = autocannon({
      url: 'http://localhost:' + fastify.server.address().port,
      pipelining: 1,
      connections: 1,
      amount: 10
    });
    var codes = [200, 503];
    instance.on('response', function (client, statusCode) {
      t.strictEqual(statusCode, codes.shift());
    });
    instance.on('done', function () {
      t.strictEqual(codes.length, 0);
      t.end('Done');
    });
    instance.on('reqError', function () {
      t.strictEqual(codes.shift(), undefined);
    });
    instance.on('error', function (err) {
      return t.fail(err);
    });
  });
});
test('Should not return 503 while closing - pipelining - return503OnClosing', function (t) {
  var fastify = Fastify({
    return503OnClosing: false
  });
  fastify.get('/', function (req, reply) {
    fastify.close();
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    var instance = autocannon({
      url: 'http://localhost:' + fastify.server.address().port,
      pipelining: 1,
      connections: 1,
      amount: 10
    });
    var codes = [200, 200];
    instance.on('response', function (client, statusCode) {
      t.strictEqual(statusCode, codes.shift());
    });
    instance.on('done', function () {
      t.strictEqual(codes.length, 0);
      t.end('Done');
    });
    instance.on('reqError', function () {
      t.strictEqual(codes.shift(), undefined);
    });
    instance.on('error', function (err) {
      return t.fail(err);
    });
  });
});