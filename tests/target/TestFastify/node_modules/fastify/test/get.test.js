'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var fastify = require('..')();

var schema = {
  schema: {
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};
var nullSchema = {
  schema: {
    response: {
      '2xx': {
        type: 'null'
      }
    }
  }
};
var numberSchema = {
  schema: {
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'number'
          }
        }
      }
    }
  }
};
var querySchema = {
  schema: {
    querystring: {
      type: 'object',
      properties: {
        hello: {
          type: 'integer'
        }
      }
    }
  }
};
var paramsSchema = {
  schema: {
    params: {
      type: 'object',
      properties: {
        foo: {
          type: 'string'
        },
        test: {
          type: 'integer'
        }
      }
    }
  }
};
var headersSchema = {
  schema: {
    headers: {
      type: 'object',
      properties: {
        'x-test': {
          type: 'number'
        },
        'Y-Test': {
          type: 'number'
        }
      }
    }
  }
};
test('shorthand - get', function (t) {
  t.plan(1);

  try {
    fastify.get('/', schema, function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - get (return null)', function (t) {
  t.plan(1);

  try {
    fastify.get('/null', nullSchema, function (req, reply) {
      reply.code(200).send(null);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - get params', function (t) {
  t.plan(1);

  try {
    fastify.get('/params/:foo/:test', paramsSchema, function (req, reply) {
      reply.code(200).send(req.params);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - get, querystring schema', function (t) {
  t.plan(1);

  try {
    fastify.get('/query', querySchema, function (req, reply) {
      reply.code(200).send(req.query);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('shorthand - get, headers schema', function (t) {
  t.plan(1);

  try {
    fastify.get('/headers', headersSchema, function (req, reply) {
      reply.code(200).send(req.headers);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('missing schema - get', function (t) {
  t.plan(1);

  try {
    fastify.get('/missing', function (req, reply) {
      reply.code(200).send({
        hello: 'world'
      });
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('custom serializer - get', function (t) {
  t.plan(1);

  function customSerializer(data) {
    return JSON.stringify(data);
  }

  try {
    fastify.get('/custom-serializer', numberSchema, function (req, reply) {
      reply.code(200).serializer(customSerializer).send({
        hello: 'world'
      });
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('empty response', function (t) {
  t.plan(1);

  try {
    fastify.get('/empty', function (req, reply) {
      reply.code(200).send();
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
test('send a falsy boolean', function (t) {
  t.plan(1);

  try {
    fastify.get('/boolean', function (req, reply) {
      reply.code(200).send(false);
    });
    t.pass();
  } catch (e) {
    t.fail();
  }
});
fastify.listen(0, function (err) {
  t.error(err);
  fastify.server.unref();
  test('shorthand - request get', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - request get params schema', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/params/world/123'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        foo: 'world',
        test: 123
      });
    });
  });
  test('shorthand - request get params schema error', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/params/world/string'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: 'params.test should be integer',
        statusCode: 400
      });
    });
  });
  test('shorthand - request get headers schema', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      headers: {
        'x-test': '1',
        'Y-Test': '3'
      },
      json: true,
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(body['x-test'], 1);
      t.strictEqual(body['y-test'], 3);
    });
  });
  test('shorthand - request get headers schema error', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      headers: {
        'x-test': 'abc'
      },
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: "headers['x-test'] should be number",
        statusCode: 400
      });
    });
  });
  test('shorthand - request get querystring schema', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=123'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 123
      });
    });
  });
  test('shorthand - request get querystring schema error', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/query?hello=world'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.deepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: 'querystring.hello should be integer',
        statusCode: 400
      });
    });
  });
  test('shorthand - request get missing schema', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/missing'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - custom serializer', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/custom-serializer'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - empty response', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/empty'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '0');
      t.deepEqual(body.toString(), '');
    });
  });
  test('shorthand - send a falsy boolean', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/boolean'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(body.toString(), 'false');
    });
  });
  test('shorthand - send null value', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/null'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(body.toString(), 'null');
    });
  });
});