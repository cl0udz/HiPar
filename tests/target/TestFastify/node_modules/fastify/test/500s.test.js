'use strict';

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var symbols = require('../lib/symbols.js');

test('default 500', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(new Error('kaboom'));
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(res.headers['content-type'], 'application/json; charset=utf-8');
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Internal Server Error',
      message: 'kaboom',
      statusCode: 500
    });
  });
});
test('custom 500', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(new Error('kaboom'));
  });
  fastify.setErrorHandler(function (err, request, reply) {
    t.type(request, 'object');
    t.type(request, fastify[symbols.kRequest]);
    reply.code(500).type('text/plain').send('an error happened: ' + err.message);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(res.headers['content-type'], 'text/plain');
    t.deepEqual(res.payload.toString(), 'an error happened: kaboom');
  });
});
test('encapsulated 500', function (t) {
  t.plan(10);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(new Error('kaboom'));
  });
  fastify.register(function (f, opts, next) {
    f.get('/', function (req, reply) {
      reply.send(new Error('kaboom'));
    });
    f.setErrorHandler(function (err, request, reply) {
      t.type(request, 'object');
      t.type(request, f[symbols.kRequest]);
      reply.code(500).type('text/plain').send('an error happened: ' + err.message);
    });
    next();
  }, {
    prefix: 'test'
  });
  fastify.inject({
    method: 'GET',
    url: '/test'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(res.headers['content-type'], 'text/plain');
    t.deepEqual(res.payload.toString(), 'an error happened: kaboom');
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(res.headers['content-type'], 'application/json; charset=utf-8');
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Internal Server Error',
      message: 'kaboom',
      statusCode: 500
    });
  });
});
test('custom 500 with hooks', function (t) {
  t.plan(7);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(new Error('kaboom'));
  });
  fastify.setErrorHandler(function (err, request, reply) {
    reply.code(500).type('text/plain').send('an error happened: ' + err.message);
  });
  fastify.addHook('onSend', function (req, res, payload, next) {
    t.ok('called', 'onSend');
    next();
  });
  fastify.addHook('onRequest', function (req, res, next) {
    t.ok('called', 'onRequest');
    next();
  });
  fastify.addHook('onResponse', function (request, reply, next) {
    t.ok('called', 'onResponse');
    next();
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(res.headers['content-type'], 'text/plain');
    t.deepEqual(res.payload.toString(), 'an error happened: kaboom');
  });
});
test('cannot set errorHandler after binding', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);

    try {
      fastify.setErrorHandler(function () {});
      t.fail();
    } catch (e) {
      t.pass();
    }
  });
});