'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var symbols = require('../lib/symbols.js');

test('Should expose addSchema function', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.is(_typeof(fastify.addSchema), 'function');
});
test('Should expose getSchemas function', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.is(_typeof(fastify.getSchemas), 'function');
});
test('The schemas should be added to an internal store', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var schema = {
    $id: 'id',
    my: 'schema'
  };
  fastify.addSchema(schema);
  t.deepEqual(fastify[symbols.kSchemas].store, {
    id: schema
  });
});
test('The schemas should be accessible via getSchemas', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var schemas = [{
    $id: 'id',
    my: 'schema'
  }, {
    $id: 'abc',
    my: 'schema'
  }, {
    $id: 'bcd',
    my: 'schema',
    properties: {
      a: 'a',
      b: 1
    }
  }];
  var expected = {};
  schemas.forEach(function (schema) {
    expected[schema.$id] = schema;
    fastify.addSchema(schema);
  });
  t.deepEqual(fastify.getSchemas(), expected);
});
test('Should throw if the $id property is missing', function (t) {
  t.plan(2);
  var fastify = Fastify();

  try {
    fastify.addSchema({
      type: 'string'
    });
  } catch (err) {
    t.is(err.code, 'FST_ERR_SCH_MISSING_ID');
    t.is(err.message, 'FST_ERR_SCH_MISSING_ID: Missing schema $id property');
  }
});
test('Cannot add multiple times the same id', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'id'
  });

  try {
    fastify.addSchema({
      $id: 'id'
    });
  } catch (err) {
    t.is(err.code, 'FST_ERR_SCH_ALREADY_PRESENT');
    t.is(err.message, 'FST_ERR_SCH_ALREADY_PRESENT: Schema with id \'id\' already declared!');
  }
});
test('Should throw of the schema does not exists', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/:id',
    schema: {
      params: 'test#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.ready(function (err) {
    t.is(err.code, 'FST_ERR_SCH_NOT_PRESENT');
    t.is(err.message, 'FST_ERR_SCH_NOT_PRESENT: Schema with id \'test\' does not exist!');
  });
});
test('Should use a stored schema', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  fastify.route({
    method: 'GET',
    url: '/:id',
    schema: {
      params: 'test#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/123'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'number');
  });
});
test('Should work with nested ids', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  fastify.addSchema({
    $id: 'greetings',
    type: 'string'
  });
  fastify.route({
    method: 'POST',
    url: '/:id',
    schema: {
      params: 'test#',
      body: {
        type: 'object',
        properties: {
          hello: 'greetings#'
        }
      }
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.inject({
    method: 'POST',
    url: '/123',
    payload: {
      hello: 'world'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'number');
  });
});
test('Use the same schema across multiple routes', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  fastify.route({
    method: 'GET',
    url: '/first/:id',
    schema: {
      params: 'test#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.route({
    method: 'GET',
    url: '/second/:id',
    schema: {
      params: 'test#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/first/123'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'number');
  });
  fastify.inject({
    method: 'GET',
    url: '/second/123'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'number');
  });
});
test('Encapsulation should intervene', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.addSchema({
      $id: 'encapsulation',
      type: 'object',
      properties: {
        id: {
          type: 'number'
        }
      }
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.route({
      method: 'GET',
      url: '/:id',
      schema: {
        params: 'encapsulation#'
      },
      handler: function handler(req, reply) {
        reply.send(_typeof(req.params.id));
      }
    });
    next();
  });
  fastify.ready(function (err) {
    t.is(err.code, 'FST_ERR_SCH_NOT_PRESENT');
    t.is(err.message, 'FST_ERR_SCH_NOT_PRESENT: Schema with id \'encapsulation\' does not exist!');
  });
});
test('Encapsulation isolation', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.addSchema({
      $id: 'id'
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.addSchema({
      $id: 'id'
    });
    next();
  });
  fastify.ready(function (err) {
    t.error(err);
  });
});
test('Encapsulation isolation for getSchemas', function (t) {
  t.plan(5);
  var fastify = Fastify();
  var pluginDeepOneSide;
  var pluginDeepOne;
  var pluginDeepTwo;
  var schemas = {
    z: {
      $id: 'z',
      my: 'schema'
    },
    a: {
      $id: 'a',
      my: 'schema'
    },
    b: {
      $id: 'b',
      my: 'schema'
    },
    c: {
      $id: 'c',
      my: 'schema',
      properties: {
        a: 'a',
        b: 1
      }
    }
  };
  fastify.addSchema(schemas.z);
  fastify.register(function (instance, opts, next) {
    instance.addSchema(schemas.a);
    pluginDeepOneSide = instance;
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.addSchema(schemas.b);
    instance.register(function (subinstance, opts, next) {
      subinstance.addSchema(schemas.c);
      pluginDeepTwo = subinstance;
      next();
    });
    pluginDeepOne = instance;
    next();
  });
  fastify.ready(function (err) {
    t.error(err);
    t.deepEqual(fastify.getSchemas(), {
      z: schemas.z
    });
    t.deepEqual(pluginDeepOneSide.getSchemas(), {
      z: schemas.z,
      a: schemas.a
    });
    t.deepEqual(pluginDeepOne.getSchemas(), {
      z: schemas.z,
      b: schemas.b
    });
    t.deepEqual(pluginDeepTwo.getSchemas(), {
      z: schemas.z,
      b: schemas.b,
      c: schemas.c
    });
  });
});
test('Encapsulation isolation for $ref to shared schema', function (t) {
  t.plan(10);
  var fastify = Fastify();
  var commonSchemaAbsoluteUri = {
    $id: 'http://example.com/asset.json',
    type: 'object',
    definitions: {
      id: {
        $id: '#uuid',
        type: 'string',
        format: 'uuid'
      },
      email: {
        $id: '#email',
        type: 'string',
        format: 'email'
      }
    }
  };
  fastify.register(function (instance, opts, next) {
    instance.addSchema(commonSchemaAbsoluteUri);
    instance.route({
      method: 'POST',
      url: '/id',
      schema: {
        body: {
          type: 'object',
          properties: {
            id: {
              $ref: 'http://example.com/asset.json#uuid'
            }
          },
          required: ['id']
        }
      },
      handler: function handler(req, reply) {
        reply.send('id is ok');
      }
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.addSchema(commonSchemaAbsoluteUri);
    instance.route({
      method: 'POST',
      url: '/email',
      schema: {
        body: {
          type: 'object',
          properties: {
            email: {
              $ref: 'http://example.com/asset.json#/definitions/email'
            }
          },
          required: ['email']
        }
      },
      handler: function handler(req, reply) {
        reply.send('email is ok');
      }
    });
    next();
  });
  var requestId = {
    id: '550e8400-e29b-41d4-a716-446655440000'
  };
  var requestEmail = {
    email: 'foo@bar.it'
  };
  fastify.inject({
    method: 'POST',
    url: '/id',
    payload: requestId
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'POST',
    url: '/id',
    payload: requestEmail
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 400);
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Bad Request',
      message: 'body should have required property \'id\'',
      statusCode: 400
    });
  });
  fastify.inject({
    method: 'POST',
    url: '/email',
    payload: requestEmail
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'POST',
    url: '/email',
    payload: requestId
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 400);
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Bad Request',
      message: 'body should have required property \'email\'',
      statusCode: 400
    });
  });
});
test('JSON Schema validation keywords', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      ip: {
        type: 'string',
        format: 'ipv4'
      }
    }
  });
  fastify.route({
    method: 'GET',
    url: '/:id',
    schema: {
      params: 'test#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.params.id));
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/127.0.0.1'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'string');
  });
});
test('Nested id calls', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      ip: {
        type: 'string',
        format: 'ipv4'
      }
    }
  });
  fastify.addSchema({
    $id: 'hello',
    type: 'object',
    properties: {
      host: 'test#'
    }
  });
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: 'hello#'
    },
    handler: function handler(req, reply) {
      reply.send(_typeof(req.body.host.ip));
    }
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      host: {
        ip: '127.0.0.1'
      }
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, 'string');
  });
});
test('Use the same schema id in diferent places', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  fastify.route({
    method: 'GET',
    url: '/:id',
    schema: {
      response: {
        200: {
          type: 'array',
          items: 'test#'
        }
      }
    },
    handler: function handler() {}
  });
  fastify.route({
    method: 'POST',
    url: '/:id',
    schema: {
      body: 'test#',
      response: {
        200: 'test#'
      }
    },
    handler: function handler() {}
  });
  fastify.ready(function (err) {
    t.error(err);
  });
});
test('Use shared schema and $ref with $id ($ref to $id)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  var body = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: 'http://foo/user',
    type: 'object',
    definitions: {
      address: {
        $id: '#address',
        type: 'object',
        properties: {
          city: {
            type: 'string'
          }
        }
      }
    },
    properties: {
      test: 'test#',
      address: {
        $ref: '#address'
      }
    }
  };
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: body,
      response: {
        200: 'test#'
      }
    },
    handler: function handler(req, reply) {
      reply.send(req.body.test);
    }
  });
  var id = Date.now();
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      address: {
        city: 'New Node'
      },
      test: {
        id: id
      }
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      id: id
    });
  });
});
test('Use shared schema and $ref with $id in response ($ref to $id)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  var body = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: 'http://foo/user',
    type: 'object',
    definitions: {
      address: {
        $id: '#address',
        type: 'object',
        properties: {
          city: {
            type: 'string'
          }
        }
      }
    },
    properties: {
      test: 'test#',
      address: {
        $ref: '#address'
      }
    },
    required: ['address', 'test']
  };
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: body,
      response: {
        200: body
      }
    },
    handler: function handler(req, reply) {
      req.body.removeThis = 'it should not be serialized';
      reply.send(req.body);
    }
  });
  var payload = {
    address: {
      city: 'New Node'
    },
    test: {
      id: Date.now()
    }
  };
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: payload
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), payload);
  });
}); // https://github.com/fastify/fastify/issues/1043

test('The schema resolver should clean the $id key before passing it to the compiler without modify it', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var first = {
    $id: 'first',
    type: 'object',
    properties: {
      first: {
        type: 'number'
      }
    }
  };
  fastify.addSchema(first);
  fastify.addSchema({
    $id: 'second',
    type: 'object',
    allOf: [{
      type: 'object',
      properties: {
        second: {
          type: 'number'
        }
      }
    }, 'first#']
  });
  fastify.route({
    url: '/',
    method: 'GET',
    schema: {
      description: 'get',
      body: 'second#',
      response: {
        200: 'second#'
      }
    },
    handler: function handler(request, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.route({
    url: '/',
    method: 'PATCH',
    schema: {
      description: 'patch',
      body: 'first#',
      response: {
        200: 'first#'
      }
    },
    handler: function handler(request, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  t.ok(first.$id);
  fastify.ready(function (err) {
    t.error(err);
    t.ok(first.$id);
  });
});
test('Get schema anyway should not add `properties` if allOf is present', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'first',
    type: 'object',
    properties: {
      first: {
        type: 'number'
      }
    }
  });
  fastify.addSchema({
    $id: 'second',
    type: 'object',
    allOf: [{
      type: 'object',
      properties: {
        second: {
          type: 'number'
        }
      }
    }, 'first#']
  });
  fastify.route({
    url: '/',
    method: 'GET',
    schema: {
      querystring: 'second#',
      response: {
        200: 'second#'
      }
    },
    handler: function handler() {}
  });
  fastify.ready(t.error);
});
test('Get schema anyway should not add `properties` if oneOf is present', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'first',
    type: 'object',
    properties: {
      first: {
        type: 'number'
      }
    }
  });
  fastify.addSchema({
    $id: 'second',
    type: 'object',
    oneOf: [{
      type: 'object',
      properties: {
        second: {
          type: 'number'
        }
      }
    }, 'first#']
  });
  fastify.route({
    url: '/',
    method: 'GET',
    schema: {
      querystring: 'second#',
      response: {
        200: 'second#'
      }
    },
    handler: function handler() {}
  });
  fastify.ready(t.error);
});
test('Get schema anyway should not add `properties` if anyOf is present', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'first',
    type: 'object',
    properties: {
      first: {
        type: 'number'
      }
    }
  });
  fastify.addSchema({
    $id: 'second',
    type: 'object',
    anyOf: [{
      type: 'object',
      properties: {
        second: {
          type: 'number'
        }
      }
    }, 'first#']
  });
  fastify.route({
    url: '/',
    method: 'GET',
    schema: {
      querystring: 'second#',
      response: {
        200: 'second#'
      }
    },
    handler: function handler() {}
  });
  fastify.ready(t.error);
});
test('Shared schema should be pass to serializer and validator ($ref to shared schema /definitions)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'http://example.com/asset.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'Physical Asset',
    description: 'A generic representation of a physical asset',
    type: 'object',
    required: ['id', 'model', 'location'],
    properties: {
      id: {
        type: 'string',
        format: 'uuid'
      },
      model: {
        type: 'string'
      },
      location: {
        $ref: 'http://example.com/point.json#'
      }
    },
    definitions: {
      inner: {
        $id: '#innerId',
        type: 'string',
        format: 'email'
      }
    }
  });
  fastify.addSchema({
    $id: 'http://example.com/point.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'Longitude and Latitude Values',
    description: 'A geographical coordinate.',
    type: 'object',
    required: ['latitude', 'longitude'],
    properties: {
      email: {
        $ref: 'http://example.com/asset.json#/definitions/inner'
      },
      latitude: {
        type: 'number',
        minimum: -90,
        maximum: 90
      },
      longitude: {
        type: 'number',
        minimum: -180,
        maximum: 180
      },
      altitude: {
        type: 'number'
      }
    }
  });
  var schemaLocations = {
    $id: 'http://example.com/locations.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'List of Asset locations',
    type: 'array',
    items: {
      $ref: 'http://example.com/asset.json#'
    },
    "default": []
  };
  var locations = [{
    id: '550e8400-e29b-41d4-a716-446655440000',
    model: 'mod',
    location: {
      latitude: 10,
      longitude: 10,
      email: 'foo@bar.it'
    }
  }, {
    id: '550e8400-e29b-41d4-a716-446655440000',
    model: 'mod',
    location: {
      latitude: 10,
      longitude: 10,
      email: 'foo@bar.it'
    }
  }];
  fastify.post('/', {
    schema: {
      body: schemaLocations,
      response: {
        200: schemaLocations
      }
    }
  }, function (req, reply) {
    reply.send(locations.map(function (i) {
      return Object.assign({
        serializer: 'remove me'
      }, i);
    }));
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: locations
  }, function (err, res) {
    t.error(err);
    locations.forEach(function (_) {
      return delete _.remove;
    });
    t.deepEqual(JSON.parse(res.payload), locations);
  });
});
test('Shared schema should be pass to serializer and validator ($ref to shared schema $id)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'http://example.com/asset.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'Physical Asset',
    description: 'A generic representation of a physical asset',
    type: 'object',
    required: ['id', 'model', 'location'],
    properties: {
      id: {
        type: 'string',
        format: 'uuid'
      },
      model: {
        type: 'string'
      },
      location: {
        $ref: 'http://example.com/point.json#'
      }
    },
    definitions: {
      inner: {
        $id: '#innerId',
        type: 'string',
        format: 'email'
      }
    }
  });
  fastify.addSchema({
    $id: 'http://example.com/point.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'Longitude and Latitude Values',
    description: 'A geographical coordinate.',
    type: 'object',
    required: ['latitude', 'longitude'],
    properties: {
      email: {
        $ref: 'http://example.com/asset.json#innerId'
      },
      latitude: {
        type: 'number',
        minimum: -90,
        maximum: 90
      },
      longitude: {
        type: 'number',
        minimum: -180,
        maximum: 180
      },
      altitude: {
        type: 'number'
      }
    }
  });
  var schemaLocations = {
    $id: 'http://example.com/locations.json',
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'List of Asset locations',
    type: 'array',
    items: {
      $ref: 'http://example.com/asset.json#'
    },
    "default": []
  };
  var locations = [{
    id: '550e8400-e29b-41d4-a716-446655440000',
    model: 'mod',
    location: {
      latitude: 10,
      longitude: 10,
      email: 'foo@bar.it'
    }
  }, {
    id: '550e8400-e29b-41d4-a716-446655440000',
    model: 'mod',
    location: {
      latitude: 10,
      longitude: 10,
      email: 'foo@bar.it'
    }
  }];
  fastify.post('/', {
    schema: {
      body: schemaLocations,
      response: {
        200: schemaLocations
      }
    }
  }, function (req, reply) {
    reply.send(locations.map(function (i) {
      return Object.assign({
        serializer: 'remove me'
      }, i);
    }));
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: locations
  }, function (err, res) {
    t.error(err);
    locations.forEach(function (_) {
      return delete _.remove;
    });
    t.deepEqual(JSON.parse(res.payload), locations);
  });
});
test('Use shared schema and $ref', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'http://example.com/ref-to-external-validator.json',
    type: 'object',
    properties: {
      hello: {
        type: 'string'
      }
    }
  });
  var body = {
    type: 'array',
    items: {
      $ref: 'http://example.com/ref-to-external-validator.json#'
    },
    "default": []
  };
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: body
    },
    handler: function handler(_, r) {
      r.send('ok');
    }
  });
  fastify.ready(t.error);
});
test('Use shared schema and $ref to /definitions', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'test',
    type: 'object',
    properties: {
      id: {
        type: 'number'
      }
    }
  });
  var body = {
    type: 'object',
    definitions: {
      address: {
        $id: '#otherId',
        type: 'object',
        properties: {
          city: {
            type: 'string'
          }
        }
      }
    },
    properties: {
      test: 'test#',
      address: {
        $ref: '#/definitions/address'
      }
    },
    required: ['address', 'test']
  };
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: body,
      response: {
        200: body
      }
    },
    handler: function handler(req, reply) {
      req.body.removeThis = 'it should not be serialized';
      reply.send(req.body);
    }
  });
  var payload = {
    address: {
      city: 'New Node'
    },
    test: {
      id: Date.now()
    }
  };
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: payload
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), payload);
  });
});
test('Cross shared schema reference', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'item',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  });
  fastify.addSchema({
    $id: 'itemList',
    type: 'array',
    items: 'item#'
  });
  fastify.post('/post', {
    schema: {
      body: 'itemList#',
      response: {
        200: 'item#'
      }
    }
  }, function () {});
  fastify.get('/get', {
    schema: {
      body: 'itemList#',
      response: {
        200: 'item#'
      }
    }
  }, function () {});
  fastify.ready(t.error);
});
test('Cross shared schema reference with unused shared schema', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'item',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  });
  fastify.addSchema({
    $id: 'itemList',
    type: 'array',
    items: 'item#'
  });
  fastify.get('/get', {
    schema: {
      response: {
        200: 'item#'
      }
    }
  }, function () {});
  fastify.ready(t.error);
});
test('Cross shared schema reference with multiple references', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'item',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  }); // This schema is not used

  fastify.addSchema({
    $id: 'itemList',
    type: 'array',
    items: 'item#'
  });
  var multipleRefReplaceWay = {
    type: 'object',
    properties: {
      a: 'item#',
      b: 'item#'
    }
  };
  fastify.get('/get', {
    schema: {
      response: {
        200: multipleRefReplaceWay
      }
    }
  }, function () {});
  fastify.post('/post', {
    schema: {
      body: multipleRefReplaceWay,
      response: {
        200: multipleRefReplaceWay
      }
    }
  }, function () {});
  fastify.ready(t.error);
});
test('Cross shared schema reference with encapsulation references', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.addSchema({
    $id: 'item',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  });
  fastify.addSchema({
    $id: 'itemList',
    type: 'array',
    items: 'item#'
  });
  fastify.register(function (instance, opts, next) {
    // this schema is not used
    instance.addSchema({
      $id: 'encapsulation',
      type: 'object',
      properties: {
        id: {
          type: 'number'
        },
        item: 'item#',
        secondItem: 'item#'
      }
    });
    var multipleRefReplaceWay = {
      type: 'object',
      properties: {
        a: 'itemList#',
        b: 'item#',
        c: 'item#',
        d: 'item#'
      }
    };
    instance.post('/post', {
      schema: {
        body: multipleRefReplaceWay,
        response: {
          200: multipleRefReplaceWay
        }
      }
    }, function () {});
    instance.post('/double', {
      schema: {
        response: {
          200: 'encapsulation#'
        }
      }
    }, function () {});
    instance.get('/get', {
      schema: {
        response: {
          200: multipleRefReplaceWay
        }
      }
    }, function () {});
    instance.get('/double-get', {
      schema: {
        body: multipleRefReplaceWay,
        response: {
          200: multipleRefReplaceWay
        }
      }
    }, function () {});
    next();
  }, {
    prefix: '/foo'
  });
  fastify.post('/post', {
    schema: {
      body: 'item#',
      response: {
        200: 'item#'
      }
    }
  }, function () {});
  fastify.get('/get', {
    schema: {
      body: 'item#',
      response: {
        200: 'item#'
      }
    }
  }, function () {});
  fastify.ready(t.error);
});