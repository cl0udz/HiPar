'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

var t = require('tap');

var test = t.test;

var fs = require('fs');

var path = require('path');

var Fastify = require('../..');

var h2url = require('h2url');

var sget = require('simple-get').concat;

var msg = {
  hello: 'world'
};
var fastify;

try {
  fastify = Fastify({
    http2: true,
    https: {
      allowHTTP1: true,
      key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),
      cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))
    }
  });
  t.pass('Key/cert successfully loaded');
} catch (e) {
  t.fail('Key/cert loading failed', e);
}

fastify.get('/', function (req, reply) {
  reply.code(200).send(msg);
});
fastify.post('/', function (req, reply) {
  reply.code(200).send(req.body);
});
fastify.get('/error', function _callee(req, reply) {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          throw new Error('kaboom');

        case 1:
        case "end":
          return _context.stop();
      }
    }
  });
});
fastify.listen(0, function (err) {
  t.error(err);
  fastify.server.unref();
  test('https get error', function _callee2(t) {
    var url, res;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            t.plan(1);
            url = "https://localhost:".concat(fastify.server.address().port, "/error");
            _context2.next = 4;
            return regeneratorRuntime.awrap(h2url.concat({
              url: url
            }));

          case 4:
            res = _context2.sent;
            t.strictEqual(res.headers[':status'], 500);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  test('https post', function _callee3(t) {
    var url, res;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            t.plan(2);
            url = "https://localhost:".concat(fastify.server.address().port);
            _context3.next = 4;
            return regeneratorRuntime.awrap(h2url.concat({
              url: url,
              method: 'POST',
              body: JSON.stringify({
                hello: 'http2'
              }),
              headers: {
                'content-type': 'application/json'
              }
            }));

          case 4:
            res = _context3.sent;
            t.strictEqual(res.headers[':status'], 200);
            t.deepEqual(JSON.parse(res.body), {
              hello: 'http2'
            });

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  test('https get request', function _callee4(t) {
    var url, res;
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            t.plan(3);
            url = "https://localhost:".concat(fastify.server.address().port);
            _context4.next = 4;
            return regeneratorRuntime.awrap(h2url.concat({
              url: url
            }));

          case 4:
            res = _context4.sent;
            t.strictEqual(res.headers[':status'], 200);
            t.strictEqual(res.headers['content-length'], '' + JSON.stringify(msg).length);
            t.deepEqual(JSON.parse(res.body), msg);

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  test('http1 get request', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'https://localhost:' + fastify.server.address().port,
      rejectUnauthorized: false
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('http1 get error', function (t) {
    t.plan(2);
    sget({
      method: 'GET',
      url: 'https://localhost:' + fastify.server.address().port + '/error',
      rejectUnauthorized: false
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 500);
    });
  });
});