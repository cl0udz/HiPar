'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.object.to-string");

var http = require('http');

var test = require('tap').test;

var fastify = require('../');

test('handlers receive correct `this` context', function (t) {
  t.plan(4); // simulate plugin that uses fastify-plugin

  var plugin = function plugin(instance, opts, next) {
    instance.decorate('foo', 'foo');
    next();
  };

  plugin[Symbol["for"]('skip-override')] = true;
  var instance = fastify();
  instance.register(plugin);
  instance.get('/', function (req, reply) {
    t.ok(this.foo);
    t.is(this.foo, 'foo');
    reply.send();
  });
  instance.listen(0, function (err) {
    instance.server.unref();
    if (err) t.threw(err);
    t.ok(instance.foo);
    t.is(instance.foo, 'foo');
    var address = "http://127.0.0.1:".concat(instance.server.address().port, "/");
    http.get(address, function () {}).on('error', t.threw);
  });
});
test('handlers have access to the internal context', function (t) {
  t.plan(5);
  var instance = fastify();
  instance.get('/', {
    config: {
      foo: 'bar'
    }
  }, function (req, reply) {
    t.ok(reply.context);
    t.ok(reply.context.config);
    t.type(reply.context.config, Object);
    t.ok(reply.context.config.foo);
    t.is(reply.context.config.foo, 'bar');
    reply.send();
  });
  instance.listen(0, function (err) {
    instance.server.unref();
    if (err) t.threw(err);
    var address = "http://127.0.0.1:".concat(instance.server.address().port, "/");
    http.get(address, function () {}).on('error', t.threw);
  });
});