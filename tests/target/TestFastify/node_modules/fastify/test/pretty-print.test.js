'use strict';

var t = require('tap');

var test = t.test;

var Fastify = require('..');

test('pretty print - static routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/hello', function () {});
  fastify.get('/hello/world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = `└── /
    ├── test (GET)
    │   └── /hello (GET)
    └── hello/world (GET)
`;
    t.is(typeof tree, 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - parametric routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/:hello', function () {});
  fastify.get('/hello/:world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = `└── /
    ├── test (GET)
    │   └── /
    │       └── :hello (GET)
    └── hello/
        └── :world (GET)
`;
    t.is(typeof tree, 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - mixed parametric routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/:hello', function () {});
  fastify.post('/test/:hello', function () {});
  fastify.get('/test/:hello/world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = `└── /
    └── test (GET)
        └── /
            └── :hello (GET)
                :hello (POST)
                └── /world (GET)
`;
    t.is(typeof tree, 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - wildcard routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/*', function () {});
  fastify.get('/hello/*', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = `└── /
    ├── test (GET)
    │   └── /
    │       └── * (GET)
    └── hello/
        └── * (GET)
`;
    t.is(typeof tree, 'string');
    t.equal(tree, expected);
  });
});