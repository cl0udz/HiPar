'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var Fastify = require('..');

test('pretty print - static routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/hello', function () {});
  fastify.get('/hello/world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /hello (GET)\n    \u2514\u2500\u2500 hello/world (GET)\n";
    t.is(_typeof(tree), 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - parametric routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/:hello', function () {});
  fastify.get('/hello/:world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /\n    \u2502       \u2514\u2500\u2500 :hello (GET)\n    \u2514\u2500\u2500 hello/\n        \u2514\u2500\u2500 :world (GET)\n";
    t.is(_typeof(tree), 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - mixed parametric routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/:hello', function () {});
  fastify.post('/test/:hello', function () {});
  fastify.get('/test/:hello/world', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = "\u2514\u2500\u2500 /\n    \u2514\u2500\u2500 test (GET)\n        \u2514\u2500\u2500 /\n            \u2514\u2500\u2500 :hello (GET)\n                :hello (POST)\n                \u2514\u2500\u2500 /world (GET)\n";
    t.is(_typeof(tree), 'string');
    t.equal(tree, expected);
  });
});
test('pretty print - wildcard routes', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.get('/test', function () {});
  fastify.get('/test/*', function () {});
  fastify.get('/hello/*', function () {});
  fastify.ready(function () {
    var tree = fastify.printRoutes();
    var expected = "\u2514\u2500\u2500 /\n    \u251C\u2500\u2500 test (GET)\n    \u2502   \u2514\u2500\u2500 /\n    \u2502       \u2514\u2500\u2500 * (GET)\n    \u2514\u2500\u2500 hello/\n        \u2514\u2500\u2500 * (GET)\n";
    t.is(_typeof(tree), 'string');
    t.equal(tree, expected);
  });
});