'use strict';

require("core-js/modules/es.array.concat");

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var joi = require('joi');

var Fastify = require('..');

test('route', function (t) {
  t.plan(10);
  var test = t.test;
  var fastify = Fastify();
  test('route - get', function (t) {
    t.plan(1);

    try {
      fastify.route({
        method: 'GET',
        url: '/',
        schema: {
          response: {
            '2xx': {
              type: 'object',
              properties: {
                hello: {
                  type: 'string'
                }
              }
            }
          }
        },
        handler: function handler(req, reply) {
          reply.send({
            hello: 'world'
          });
        }
      });
      t.pass();
    } catch (e) {
      t.fail();
    }
  });
  test('missing schema - route', function (t) {
    t.plan(1);

    try {
      fastify.route({
        method: 'GET',
        url: '/missing',
        handler: function handler(req, reply) {
          reply.send({
            hello: 'world'
          });
        }
      });
      t.pass();
    } catch (e) {
      t.fail();
    }
  });
  test('invalid handler attribute - route', function (t) {
    t.plan(1);

    try {
      fastify.get('/', {
        handler: 'not a function'
      }, function () {});
      t.fail();
    } catch (e) {
      t.pass();
    }
  });
  test('invalid schema - route', function (t) {
    t.plan(1);

    try {
      fastify.route({
        method: 'GET',
        url: '/invalid',
        schema: {
          querystring: {
            id: 'string'
          }
        },
        handler: function handler(req, reply) {
          reply.send({
            hello: 'world'
          });
        }
      });
      fastify.after(function (err) {
        t.ok(err instanceof Error);
      });
    } catch (e) {
      t.fail();
    }
  });
  test('Multiple methods', function (t) {
    t.plan(1);

    try {
      fastify.route({
        method: ['GET', 'DELETE'],
        url: '/multiple',
        handler: function handler(req, reply) {
          reply.send({
            hello: 'world'
          });
        }
      });
      t.pass();
    } catch (e) {
      t.fail();
    }
  });
  test('Add multiple methods', function (t) {
    t.plan(1);

    try {
      fastify.get('/add-multiple', function (req, reply) {
        reply.send({
          hello: 'Bob!'
        });
      });
      fastify.route({
        method: ['PUT', 'DELETE'],
        url: '/add-multiple',
        handler: function handler(req, reply) {
          reply.send({
            hello: 'world'
          });
        }
      });
      t.pass();
    } catch (e) {
      t.fail();
    }
  });
  fastify.listen(0, function (err) {
    if (err) t.error(err);
    fastify.server.unref();
    test('cannot add another route after binding', function (t) {
      t.plan(1);

      try {
        fastify.route({
          method: 'GET',
          url: '/another-get-route',
          handler: function handler(req, reply) {
            reply.send({
              hello: 'world'
            });
          }
        });
        t.fail();
      } catch (e) {
        t.pass();
      }
    });
    test('route - get', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
    });
    test('route - missing schema', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/missing'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
    });
    test('route - multiple methods', function (t) {
      t.plan(6);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/multiple'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
      sget({
        method: 'DELETE',
        url: 'http://localhost:' + fastify.server.address().port + '/multiple'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
    });
  });
});
test('path can be specified in place of uri', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    path: '/path',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  var reqOpts = {
    method: 'GET',
    url: '/path'
  };
  fastify.inject(reqOpts, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('invalid bodyLimit option - route', function (t) {
  t.plan(2);
  var fastify = Fastify();

  try {
    fastify.route({
      bodyLimit: false,
      method: 'PUT',
      handler: function handler() {
        return null;
      }
    });
    t.fail('bodyLimit must be an integer');
  } catch (err) {
    t.strictEqual(err.message, "'bodyLimit' option must be an integer > 0. Got 'false'");
  }

  try {
    fastify.post('/url', {
      bodyLimit: 10000.1
    }, function () {
      return null;
    });
    t.fail('bodyLimit must be an integer');
  } catch (err) {
    t.strictEqual(err.message, "'bodyLimit' option must be an integer > 0. Got '10000.1'");
  }
});
test('handler function in options of shorthand route should works correctly', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.get('/foo', {
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/foo'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
  });
});
test('does not mutate joi schemas', function (t) {
  t.plan(4);
  var fastify = Fastify();

  function schemaCompiler(schema) {
    return function (data, opts) {
      return joi.validate(data, schema);
    };
  }

  fastify.setSchemaCompiler(schemaCompiler);
  fastify.route({
    path: '/foo/:an_id',
    method: 'GET',
    schema: {
      params: {
        an_id: joi.number()
      }
    },
    handler: function handler(req, res) {
      t.deepEqual(req.params, {
        an_id: 42
      });
      res.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/foo/42'
  }, function (err, result) {
    t.error(err);
    t.strictEqual(result.statusCode, 200);
    t.deepEqual(JSON.parse(result.payload), {
      hello: 'world'
    });
  });
});