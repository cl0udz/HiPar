'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var t = require('tap');

var test = t.test;

var net = require('net');

var semver = require('semver');

var Fastify = require('..');

var statusCodes = require('http').STATUS_CODES;

var codes = Object.keys(statusCodes);
codes.forEach(function (code) {
  if (Number(code) >= 400) helper(code);
});

function helper(code) {
  test('Reply error handling - code: ' + code, function (t) {
    t.plan(4);
    var fastify = Fastify();
    var err = new Error('winter is coming');
    fastify.get('/', function (req, reply) {
      reply.code(Number(code)).send(err);
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (error, res) {
      t.error(error);
      t.strictEqual(res.statusCode, Number(code));
      t.equal(res.headers['content-type'], 'application/json; charset=utf-8');
      t.deepEqual({
        error: statusCodes[code],
        message: err.message,
        statusCode: Number(code)
      }, JSON.parse(res.payload));
    });
  });
}

test('preHandler hook error handling with external code', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var err = new Error('winter is coming');
  fastify.addHook('preHandler', function (req, reply, done) {
    reply.code(400);
    done(err);
  });
  fastify.get('/', function () {});
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (error, res) {
    t.error(error);
    t.strictEqual(res.statusCode, 400);
    t.deepEqual({
      error: statusCodes['400'],
      message: err.message,
      statusCode: 400
    }, JSON.parse(res.payload));
  });
});
test('onRequest hook error handling with external done', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var err = new Error('winter is coming');
  fastify.addHook('onRequest', function (req, reply, done) {
    reply.code(400);
    done(err);
  });
  fastify.get('/', function () {});
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (error, res) {
    t.error(error);
    t.strictEqual(res.statusCode, 400);
    t.deepEqual({
      error: statusCodes['400'],
      message: err.message,
      statusCode: 400
    }, JSON.parse(res.payload));
  });
});

if (semver.gt(process.versions.node, '6.0.0')) {
  test('Should reply 400 on client error', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.listen(0, function (err) {
      t.error(err);
      var client = net.connect(fastify.server.address().port);
      client.end('oooops!');
      var chunks = '';
      client.on('data', function (chunk) {
        chunks += chunk;
      });
      client.once('end', function () {
        var body = JSON.stringify({
          error: 'Bad Request',
          message: 'Client Error',
          statusCode: 400
        });
        t.equal("HTTP/1.1 400 Bad Request\r\nContent-Length: ".concat(body.length, "\r\nContent-Type: application/json\r\n\r\n").concat(body), chunks);
        fastify.close();
      });
    });
  });
}

test('Error instance sets HTTP status code', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var err = new Error('winter is coming');
  err.statusCode = 418;
  fastify.get('/', function () {
    return Promise.reject(err);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (error, res) {
    t.error(error);
    t.strictEqual(res.statusCode, 418);
    t.deepEqual({
      error: statusCodes['418'],
      message: err.message,
      statusCode: 418
    }, JSON.parse(res.payload));
  });
});
test('Error status code below 400 defaults to 500', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var err = new Error('winter is coming');
  err.statusCode = 399;
  fastify.get('/', function () {
    return Promise.reject(err);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (error, res) {
    t.error(error);
    t.strictEqual(res.statusCode, 500);
    t.deepEqual({
      error: statusCodes['500'],
      message: err.message,
      statusCode: 500
    }, JSON.parse(res.payload));
  });
});
test('Error.status property support', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var err = new Error('winter is coming');
  err.status = 418;
  fastify.get('/', function () {
    return Promise.reject(err);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (error, res) {
    t.error(error);
    t.strictEqual(res.statusCode, 418);
    t.deepEqual({
      error: statusCodes['418'],
      message: err.message,
      statusCode: 418
    }, JSON.parse(res.payload));
  });
});
test('Support rejection with values that are not Error instances', function (t) {
  var objs = [0, '', [], {}, null, undefined, 123, 'abc', new RegExp(), new Date(), new Uint8Array()];
  t.plan(objs.length);

  var _loop = function _loop() {
    var nonErr = _objs[_i];
    t.test('Type: ' + _typeof(nonErr), function (t) {
      t.plan(4);
      var fastify = Fastify();
      fastify.get('/', function () {
        return Promise.reject(nonErr);
      });
      fastify.setErrorHandler(function (err, request, reply) {
        if (_typeof(err) === 'object') {
          t.deepEqual(err, nonErr);
        } else {
          t.strictEqual(err, nonErr);
        }

        reply.send('error');
      });
      fastify.inject({
        method: 'GET',
        url: '/'
      }, function (error, res) {
        t.error(error);
        t.strictEqual(res.statusCode, 500);
        t.strictEqual(res.payload, 'error');
      });
    });
  };

  for (var _i = 0, _objs = objs; _i < _objs.length; _i++) {
    _loop();
  }
});
test('invalid schema - ajv', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', {
    schema: {
      querystring: {
        type: 'object',
        properties: {
          id: {
            type: 'number'
          }
        }
      }
    }
  }, function (req, reply) {
    t.fail('we should not be here');
  });
  fastify.setErrorHandler(function (err, request, reply) {
    t.ok(Array.isArray(err.validation));
    reply.send('error');
  });
  fastify.inject({
    url: '/?id=abc',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 400);
    t.strictEqual(res.payload, 'error');
  });
});
test('should set the status code and the headers from the error object (from route handler)', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    var error = new Error('kaboom');
    error.headers = {
      hello: 'world'
    };
    error.statusCode = 400;
    reply.send(error);
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 400);
    t.strictEqual(res.headers.hello, 'world');
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Bad Request',
      message: 'kaboom',
      statusCode: 400
    });
  });
});
test('should set the status code and the headers from the error object (from custom error handler)', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    var error = new Error('ouch');
    error.statusCode = 401;
    reply.send(error);
  });
  fastify.setErrorHandler(function (err, request, reply) {
    t.is(err.message, 'ouch');
    t.is(reply.res.statusCode, 401);
    var error = new Error('kaboom');
    error.headers = {
      hello: 'world'
    };
    error.statusCode = 400;
    reply.send(error);
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 400);
    t.strictEqual(res.headers.hello, 'world');
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Bad Request',
      message: 'kaboom',
      statusCode: 400
    });
  });
}); // Issue 595 https://github.com/fastify/fastify/issues/595

test('\'*\' should throw an error due to serializer can not handle the payload type', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.type('text/html');

    try {
      reply.send({});
    } catch (err) {
      t.type(err, TypeError);
      t.is(err.code, 'FST_ERR_REP_INVALID_PAYLOAD_TYPE');
      t.is(err.message, "FST_ERR_REP_INVALID_PAYLOAD_TYPE: Attempted to send payload of invalid type 'object'. Expected a string or Buffer.");
    }
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (e, res) {
    t.fail('should not be called');
  });
});
test('should throw an error if the custom serializer does not serialize the payload to a valid type', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    try {
      reply.type('text/html').serializer(function (payload) {
        return payload;
      }).send({});
    } catch (err) {
      t.type(err, TypeError);
      t.is(err.code, 'FST_ERR_REP_INVALID_PAYLOAD_TYPE');
      t.is(err.message, "FST_ERR_REP_INVALID_PAYLOAD_TYPE: Attempted to send payload of invalid type 'object'. Expected a string or Buffer.");
    }
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (e, res) {
    t.fail('should not be called');
  });
});