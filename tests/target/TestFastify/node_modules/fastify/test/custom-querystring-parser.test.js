'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.concat");

var t = require('tap');

var test = t.test;

var querystring = require('querystring');

var sget = require('simple-get').concat;

var Fastify = require('..');

test('Custom querystring parser', function (t) {
  t.plan(9);
  var fastify = Fastify({
    querystringParser: function querystringParser(str) {
      t.strictEqual(str, 'foo=bar&baz=faz');
      return querystring.parse(str);
    }
  });
  fastify.get('/', function (req, reply) {
    t.deepEqual(req.query, {
      foo: 'bar',
      baz: 'faz'
    });
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err, address) {
    t.error(err);
    t.tearDown(function () {
      return fastify.close();
    });
    sget({
      method: 'GET',
      url: "".concat(address, "?foo=bar&baz=faz")
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
    fastify.inject({
      method: 'GET',
      url: "".concat(address, "?foo=bar&baz=faz")
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
  });
});
test('Custom querystring parser should be called also if there is nothing to parse', function (t) {
  t.plan(9);
  var fastify = Fastify({
    querystringParser: function querystringParser(str) {
      t.strictEqual(str, '');
      return querystring.parse(str);
    }
  });
  fastify.get('/', function (req, reply) {
    t.deepEqual(req.query, {});
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err, address) {
    t.error(err);
    t.tearDown(function () {
      return fastify.close();
    });
    sget({
      method: 'GET',
      url: address
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
    fastify.inject({
      method: 'GET',
      url: address
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
  });
});
test('Querystring without value', function (t) {
  t.plan(9);
  var fastify = Fastify({
    querystringParser: function querystringParser(str) {
      t.strictEqual(str, 'foo');
      return querystring.parse(str);
    }
  });
  fastify.get('/', function (req, reply) {
    t.deepEqual(req.query, {
      foo: ''
    });
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err, address) {
    t.error(err);
    t.tearDown(function () {
      return fastify.close();
    });
    sget({
      method: 'GET',
      url: "".concat(address, "?foo")
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
    fastify.inject({
      method: 'GET',
      url: "".concat(address, "?foo")
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
  });
});
test('Custom querystring parser should be a function', function (t) {
  t.plan(1);

  try {
    Fastify({
      querystringParser: 10
    });
    t.fail('Should throw');
  } catch (err) {
    t.strictEqual(err.message, "querystringParser option should be a function, instead got 'number'");
  }
});