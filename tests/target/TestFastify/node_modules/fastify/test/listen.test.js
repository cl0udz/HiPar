'use strict';

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

var os = require('os');

var path = require('path');

var fs = require('fs');

var test = require('tap').test;

var Fastify = require('..');

test('listen accepts a callback', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(function (err) {
    t.is(fastify.server.address().address, '127.0.0.1');
    t.error(err);
  });
});
test('listen accepts a port and a callback', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.is(fastify.server.address().address, '127.0.0.1');
    t.error(err);
  });
});
test('listen accepts a port and a callback with (err, address)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err, address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
    t.error(err);
  });
});
test('listen accepts a port, address, and callback', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, '127.0.0.1', function (err) {
    t.error(err);
  });
});
test('listen accepts options and a callback', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen({
    port: 0,
    host: 'localhost',
    backlog: 511,
    exclusive: false,
    readableAll: false,
    writableAll: false,
    ipv6Only: false
  }, function (err) {
    t.error(err);
  });
});
test('listen accepts a port, address and a callback with (err, address)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, '127.0.0.1', function (err, address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
    t.error(err);
  });
});
test('listen accepts a port, address, backlog and callback', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, '127.0.0.1', 511, function (err) {
    t.error(err);
  });
});
test('listen accepts a port, address, backlog and callback with (err, address)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, '127.0.0.1', 511, function (err, address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
    t.error(err);
  });
});
test('listen after Promise.resolve()', function (t) {
  t.plan(2);
  var f = Fastify();
  t.tearDown(f.close.bind(f));
  Promise.resolve().then(function () {
    f.listen(0, function (err, address) {
      f.server.unref();
      t.is(address, 'http://127.0.0.1:' + f.server.address().port);
      t.error(err);
    });
  });
});
test('register after listen using Promise.resolve()', function (t) {
  t.plan(1);
  var f = Fastify();

  var handler = function handler(req, res) {
    return res.send({});
  };

  Promise.resolve().then(function () {
    f.get('/', handler);
    f.register(function (f2, options, done) {
      f2.get('/plugin', handler);
      done();
    });
    return f.ready();
  })["catch"](t.error).then(function () {
    return t.pass('resolved');
  });
});
test('double listen errors', function (t) {
  t.plan(3);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.listen(fastify.server.address().port, function (err, address) {
      t.is(address, null);
      t.ok(err);
    });
  });
});
test('double listen errors callback with (err, address)', function (t) {
  t.plan(4);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err1, address1) {
    t.is(address1, 'http://127.0.0.1:' + fastify.server.address().port);
    t.error(err1);
    fastify.listen(fastify.server.address().port, function (err2, address2) {
      t.is(address2, null);
      t.ok(err2);
    });
  });
});
test('listen twice on the same port', function (t) {
  t.plan(4);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err1, address1) {
    t.is(address1, 'http://127.0.0.1:' + fastify.server.address().port);
    t.error(err1);
    var s2 = Fastify();
    t.tearDown(s2.close.bind(s2));
    s2.listen(fastify.server.address().port, function (err2, address2) {
      t.is(address2, null);
      t.ok(err2);
    });
  });
});
test('listen twice on the same port callback with (err, address)', function (t) {
  t.plan(4);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err1, address1) {
    var _port = fastify.server.address().port;
    t.is(address1, 'http://127.0.0.1:' + _port);
    t.error(err1);
    var s2 = Fastify();
    t.tearDown(s2.close.bind(s2));
    s2.listen(_port, function (err2, address2) {
      t.is(address2, null);
      t.ok(err2);
    });
  });
}); // https://nodejs.org/api/net.html#net_ipc_support

if (os.platform() !== 'win32') {
  test('listen on socket', function (t) {
    t.plan(3);
    var fastify = Fastify();
    t.tearDown(fastify.close.bind(fastify));
    var sockFile = path.join(os.tmpdir(), "".concat((Math.random().toString(16) + '0000000').substr(2, 8), "-server.sock"));

    try {
      fs.unlinkSync(sockFile);
    } catch (e) {}

    fastify.listen(sockFile, function (err, address) {
      t.error(err);
      t.equal(sockFile, fastify.server.address());
      t.equal(address, sockFile);
    });
  });
}

test('listen without callback (port zero)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function () {
    t.is(fastify.server.address().address, '127.0.0.1');
  });
});
test('listen without callback (port not given)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen().then(function () {
    t.is(fastify.server.address().address, '127.0.0.1');
  });
});
test('listen null without callback with (address)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(null).then(function (address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
  });
});
test('listen without port without callback with (address)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen().then(function (address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
  });
});
test('listen with undefined without callback with (address)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(undefined).then(function (address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
  });
});
test('listen without callback with (address)', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function (address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
  });
});
test('double listen without callback rejects', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function () {
    fastify.listen(0)["catch"](function (err) {
      t.ok(err);
    });
  })["catch"](function (err) {
    return t.error(err);
  });
});
test('double listen without callback with (address)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function (address) {
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
    fastify.listen(0)["catch"](function (err) {
      t.ok(err);
    });
  })["catch"](function (err) {
    return t.error(err);
  });
});
test('listen twice on the same port without callback rejects', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function () {
    var s2 = Fastify();
    t.tearDown(s2.close.bind(s2));
    s2.listen(fastify.server.address().port)["catch"](function (err) {
      t.ok(err);
    });
  })["catch"](function (err) {
    return t.error(err);
  });
});
test('listen twice on the same port without callback rejects with (address)', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0).then(function (address) {
    var s2 = Fastify();
    t.tearDown(s2.close.bind(s2));
    t.is(address, 'http://127.0.0.1:' + fastify.server.address().port);
    s2.listen(fastify.server.address().port)["catch"](function (err) {
      t.ok(err);
    });
  })["catch"](function (err) {
    return t.error(err);
  });
});
test('listen on invalid port without callback rejects', function (t) {
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  return fastify.listen(-1)["catch"](function (err) {
    t.ok(err);
    return true;
  });
});
test('listen logs the port as info', function (t) {
  t.plan(1);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  var msgs = [];

  fastify.log.info = function (msg) {
    msgs.push(msg);
  };

  fastify.listen(0).then(function () {
    t.ok(/http:\/\//.test(msgs[0]));
  });
});