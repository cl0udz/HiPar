'use strict';

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var fastify = require('..')();

var opts = {
  schema: {
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};
fastify.get('/return', opts, function (req, reply) {
  var promise = new Promise(function (resolve, reject) {
    resolve({
      hello: 'world'
    });
  });
  return promise;
});
fastify.get('/return-error', opts, function (req, reply) {
  var promise = new Promise(function (resolve, reject) {
    reject(new Error('some error'));
  });
  return promise;
});
fastify.get('/double', function (req, reply) {
  setTimeout(function () {
    // this should not throw
    reply.send({
      hello: 'world'
    });
  }, 20);
  return Promise.resolve({
    hello: '42'
  });
});
fastify.get('/thenable', opts, function (req, reply) {
  setImmediate(function () {
    reply.send({
      hello: 'world'
    });
  });
  return reply;
});
fastify.get('/thenable-error', opts, function (req, reply) {
  setImmediate(function () {
    reply.send(new Error('kaboom'));
  });
  return reply;
});
fastify.get('/return-reply', opts, function (req, reply) {
  return reply.send({
    hello: 'world'
  });
});
fastify.listen(0, function (err) {
  t.error(err);
  fastify.server.unref();
  test('shorthand - sget return promise es6 get', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/return'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('shorthand - sget promise es6 get return error', function (t) {
    t.plan(2);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/return-error'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 500);
    });
  });
  test('sget promise double send', function (t) {
    t.plan(3);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/double'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(JSON.parse(body), {
        hello: '42'
      });
    });
  });
  test('thenable', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/thenable'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
  test('thenable (error)', function (t) {
    t.plan(2);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/thenable-error'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 500);
    });
  });
  test('return-reply', function (t) {
    t.plan(4);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/return-reply'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});