'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.concat");

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var sget = require('simple-get').concat;

var http = require('http');

var split = require('split2');

test('Should register a versioned route', function (t) {
  t.plan(11);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.x'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.2.x'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.2.0'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.2.1'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('Should register the same route with different versions', function (t) {
  t.plan(8);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send('1.2.0');
    }
  });
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.3.0',
    handler: function handler(req, reply) {
      reply.send('1.3.0');
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.x'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.payload, '1.3.0');
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.2.x'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.payload, '1.2.0');
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '2.x'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('The versioned route should take precedence', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.send({
        winter: 'is coming'
      });
    }
  });
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.x'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
    t.strictEqual(res.statusCode, 200);
  });
});
test('Versioned route but not version header should return a 404', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('Should register a versioned route', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Accept-Version': '1.x'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Accept-Version': '2.x'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('Shorthand route declaration', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.get('/', {
    version: '1.2.0'
  }, function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.x'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'world'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '1.2.1'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('The not found handler should not use the Accept-Version header', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.setNotFoundHandler(function (req, reply) {
    t.notOk(req.headers['accept-version']);
    reply.code(404).send('not found handler');
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': '2.x'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(res.payload, 'not found handler');
    t.strictEqual(res.statusCode, 404);
  });
});
test('Bad accept version (inject)', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': 'a.b.c'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      'Accept-Version': 12
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('Bas accept version (server)', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.route({
    method: 'GET',
    url: '/',
    version: '1.2.0',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'world'
      });
    }
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Accept-Version': 'a.b.c'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Accept-Version': 12
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('test log stream', function (t) {
  t.plan(3);
  var stream = split(JSON.parse);
  var fastify = Fastify({
    logger: {
      stream: stream,
      level: 'info'
    }
  });
  fastify.get('/', {
    version: '1.2.0'
  }, function (req, reply) {
    reply.send(new Error('kaboom'));
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    http.get({
      hostname: 'localhost',
      port: fastify.server.address().port,
      path: '/',
      method: 'GET',
      headers: {
        'Accept-Version': '1.x'
      }
    });
    stream.once('data', function (listenAtLogLine) {
      stream.once('data', function (line) {
        t.equal(line.req.version, '1.x');
        stream.once('data', function (line) {
          t.equal(line.req.version, '1.x');
        });
      });
    });
  });
});
test('Should register a versioned route with custome versioning strategy', function (t) {
  t.plan(8);
  var versioning = {
    storage: function storage() {
      var versions = {};
      return {
        get: function get(version) {
          return versions[version] || null;
        },
        set: function set(version, store) {
          versions[version] = store;
        },
        del: function del(version) {
          delete versions[version];
        },
        empty: function empty() {
          versions = {};
        }
      };
    },
    deriveVersion: function deriveVersion(req, ctx) {
      return req.headers.accept;
    }
  };
  var fastify = Fastify({
    versioning: versioning
  });
  fastify.route({
    method: 'GET',
    url: '/',
    version: 'application/vnd.example.api+json;version=2',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'from route v2'
      });
    }
  });
  fastify.route({
    method: 'GET',
    url: '/',
    version: 'application/vnd.example.api+json;version=3',
    handler: function handler(req, reply) {
      reply.send({
        hello: 'from route v3'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      Accept: 'application/vnd.example.api+json;version=2'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'from route v2'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      Accept: 'application/vnd.example.api+json;version=3'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEqual(JSON.parse(res.payload), {
      hello: 'from route v3'
    });
    t.strictEqual(res.statusCode, 200);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      Accept: 'application/vnd.example.api+json;version=4'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});