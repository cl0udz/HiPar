'use strict';

var Fastify = require('..');

var sget = require('simple-get').concat;

var t = require('tap');

var test = t.test;
test('proto-poisoning error', function (t) {
  t.plan(3);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.post('/', function (request, reply) {
    t.fail('handler should not be called');
  });
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'POST',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Content-Type': 'application/json'
      },
      body: '{ "__proto__": { "a": 42 } }'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
    });
  });
});
test('proto-poisoning remove', function (t) {
  t.plan(4);
  var fastify = Fastify({
    onProtoPoisoning: 'remove'
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.post('/', function (request, reply) {
    t.equal(undefined, Object.assign({}, request.body).a);
    reply.send({
      ok: true
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'POST',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Content-Type': 'application/json'
      },
      body: '{ "__proto__": { "a": 42 }, "b": 42 }'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
  });
});
test('proto-poisoning ignore', function (t) {
  t.plan(4);
  var fastify = Fastify({
    onProtoPoisoning: 'ignore'
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.post('/', function (request, reply) {
    t.equal(42, Object.assign({}, request.body).a);
    reply.send({
      ok: true
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'POST',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Content-Type': 'application/json'
      },
      body: '{ "__proto__": { "a": 42 }, "b": 42 }'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
    });
  });
});