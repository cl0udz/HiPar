'use strict';

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

var _require = require('tap'),
    test = _require.test;

var split = require('split2');

var Fastify = require('..');

test('skip automatic reply.send() with reply.sent = true and a body', function (t) {
  var stream = split(JSON.parse);
  var app = Fastify({
    logger: {
      stream: stream
    }
  });
  stream.on('data', function (line) {
    t.notEqual(line.level, 40); // there are no errors

    t.notEqual(line.level, 50); // there are no errors
  });
  app.get('/', function (req, reply) {
    reply.sent = true;
    reply.res.end('hello world');
    return Promise.resolve('this will be skipped');
  });
  return app.inject({
    method: 'GET',
    url: '/'
  }).then(function (res) {
    t.equal(res.statusCode, 200);
    t.equal(res.body, 'hello world');
  });
});
test('skip automatic reply.send() with reply.sent = true and no body', function (t) {
  var stream = split(JSON.parse);
  var app = Fastify({
    logger: {
      stream: stream
    }
  });
  stream.on('data', function (line) {
    t.notEqual(line.level, 40); // there are no error

    t.notEqual(line.level, 50); // there are no error
  });
  app.get('/', function (req, reply) {
    reply.sent = true;
    reply.res.end('hello world');
    return Promise.resolve();
  });
  return app.inject({
    method: 'GET',
    url: '/'
  }).then(function (res) {
    t.equal(res.statusCode, 200);
    t.equal(res.body, 'hello world');
  });
});
test('skip automatic reply.send() with reply.sent = true and an error', function (t) {
  var stream = split(JSON.parse);
  var app = Fastify({
    logger: {
      stream: stream
    }
  });
  var errorSeen = false;
  stream.on('data', function (line) {
    if (line.level === 50) {
      errorSeen = true;
      t.equal(line.err.message, 'kaboom');
      t.equal(line.msg, 'Promise errored, but reply.sent = true was set');
    }
  });
  app.get('/', function (req, reply) {
    reply.sent = true;
    reply.res.end('hello world');
    return Promise.reject(new Error('kaboom'));
  });
  return app.inject({
    method: 'GET',
    url: '/'
  }).then(function (res) {
    t.equal(errorSeen, true);
    t.equal(res.statusCode, 200);
    t.equal(res.body, 'hello world');
  });
});