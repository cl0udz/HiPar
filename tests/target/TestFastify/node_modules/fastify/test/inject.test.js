'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var Stream = require('stream');

var util = require('util');

var Fastify = require('..');

var FormData = require('form-data');

test('inject should exist', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.ok(fastify.inject);
  t.is(_typeof(fastify.inject), 'function');
});
test('should wait for the ready event', function (t) {
  t.plan(4);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.register(function (instance, opts, next) {
    instance.get('/', function (req, reply) {
      reply.send(payload);
    });
    setTimeout(next, 500);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.deepEqual(payload, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request', function (t) {
  t.plan(4);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.get('/', function (req, reply) {
    reply.send(payload);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.deepEqual(payload, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request - code check', function (t) {
  t.plan(4);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.get('/', function (req, reply) {
    reply.code(201).send(payload);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.deepEqual(payload, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 201);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request - headers check', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.header('content-type', 'text/plain').send('');
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual('', res.payload);
    t.strictEqual(res.headers['content-type'], 'text/plain');
    t.strictEqual(res.headers['content-length'], '0');
  });
});
test('inject get request - querystring', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(req.query);
  });
  fastify.inject({
    method: 'GET',
    url: '/?hello=world'
  }, function (err, res) {
    t.error(err);
    t.deepEqual({
      hello: 'world'
    }, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request - params', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/:hello', function (req, reply) {
    reply.send(req.params);
  });
  fastify.inject({
    method: 'GET',
    url: '/world'
  }, function (err, res) {
    t.error(err);
    t.deepEqual({
      hello: 'world'
    }, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request - wildcard', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/test/*', function (req, reply) {
    reply.send(req.params);
  });
  fastify.inject({
    method: 'GET',
    url: '/test/wildcard'
  }, function (err, res) {
    t.error(err);
    t.deepEqual({
      '*': 'wildcard'
    }, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '16');
  });
});
test('inject get request - headers', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(req.headers);
  });
  fastify.inject({
    method: 'GET',
    url: '/',
    headers: {
      hello: 'world'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual('world', JSON.parse(res.payload).hello);
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '69');
  });
});
test('inject post request', function (t) {
  t.plan(4);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.post('/', function (req, reply) {
    reply.send(req.body);
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: payload
  }, function (err, res) {
    t.error(err);
    t.deepEqual(payload, JSON.parse(res.payload));
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject post request - send stream', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.post('/', function (req, reply) {
    reply.send(req.body);
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    headers: {
      'content-type': 'application/json'
    },
    payload: getStream()
  }, function (err, res) {
    t.error(err);
    t.deepEqual('{"hello":"world"}', res.payload);
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.headers['content-length'], '17');
  });
});
test('inject get request - reply stream', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(getStream());
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.deepEqual('{"hello":"world"}', res.payload);
    t.strictEqual(res.statusCode, 200);
  });
});
test('inject promisify - waiting for ready event', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.get('/', function (req, reply) {
    reply.send(payload);
  });
  var injectParams = {
    method: 'GET',
    url: '/'
  };
  fastify.inject(injectParams).then(function (res) {
    t.strictEqual(res.statusCode, 200);
  })["catch"](t.fail);
});
test('inject promisify - after the ready event', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.get('/', function (req, reply) {
    reply.send(payload);
  });
  fastify.ready(function (err) {
    t.error(err);
    var injectParams = {
      method: 'GET',
      url: '/'
    };
    fastify.inject(injectParams).then(function (res) {
      t.strictEqual(res.statusCode, 200);
    })["catch"](t.fail);
  });
});
test('inject promisify - when the server is up', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var payload = {
    hello: 'world'
  };
  fastify.get('/', function (req, reply) {
    reply.send(payload);
  });
  fastify.ready(function (err) {
    t.error(err); // setTimeout because the ready event don't set "started" flag
    // in this iteration of the 'event loop'

    setTimeout(function () {
      var injectParams = {
        method: 'GET',
        url: '/'
      };
      fastify.inject(injectParams).then(function (res) {
        t.strictEqual(res.statusCode, 200);
      })["catch"](t.fail);
    }, 10);
  });
});
test('should reject in error case', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var error = new Error('DOOM!');
  fastify.register(function (instance, opts, next) {
    setTimeout(next, 500, error);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  })["catch"](function (e) {
    t.strictEqual(e, error);
  });
});
test('inject a multipart request using form-body', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.addContentTypeParser('*', function (req, done) {
    var body = '';
    req.on('data', function (d) {
      body += d;
    });
    req.on('end', function () {
      done(null, body);
    });
  });
  fastify.post('/', function (req, reply) {
    reply.send(req.body);
  });
  var form = new FormData();
  form.append('my_field', 'my value');
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: form
  }).then(function (response) {
    t.equal(response.statusCode, 200);
    t.ok(/Content-Disposition: form-data; name="my_field"/.test(response.payload));
  });
}); // https://github.com/hapijs/shot/blob/master/test/index.js#L836

function getStream() {
  var Read = function Read() {
    Stream.Readable.call(this);
  };

  util.inherits(Read, Stream.Readable);
  var word = '{"hello":"world"}';
  var i = 0;

  Read.prototype._read = function (size) {
    this.push(word[i] ? word[i++] : null);
  };

  return new Read();
}

test('should error the promise if ready errors', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.register(function (instance, opts) {
    return Promise.reject(new Error('kaboom'));
  }).after(function () {
    t.pass('after is called');
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }).then(function () {
    t.fail('this should not be called');
  })["catch"](function (err) {
    t.ok(err);
    t.strictequal(err.message, 'kaboom');
  });
});
test('should throw error if callback specified and if ready errors', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var error = new Error('kaboom');
  fastify.register(function (instance, opts) {
    return Promise.reject(error);
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err) {
    t.ok(err);
    t.strictEqual(err, error);
  });
});