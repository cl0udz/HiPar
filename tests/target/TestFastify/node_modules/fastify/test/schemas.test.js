'use strict';

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var AJV = require('ajv');

var fastClone = require('rfdc')({
  circles: false,
  proto: true
});

var schemaUsed = {
  $id: 'urn:schema:foo',
  definitions: {
    foo: {
      type: 'string'
    }
  },
  type: 'object',
  properties: {
    foo: {
      $ref: '#/definitions/foo'
    }
  }
};
var schemaParent = {
  $id: 'urn:schema:response',
  type: 'object',
  required: ['foo'],
  properties: {
    foo: {
      $ref: 'urn:schema:foo#/definitions/foo'
    }
  }
};
var schemaRequest = {
  $id: 'urn:schema:request',
  type: 'object',
  required: ['foo'],
  properties: {
    foo: {
      $ref: 'urn:schema:response#/properties/foo'
    }
  }
};
test('Should use the ref resolver - response', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var ajv = new AJV();
  ajv.addSchema(fastClone(schemaParent));
  ajv.addSchema(fastClone(schemaUsed));
  fastify.setSchemaCompiler(function (schema) {
    return ajv.compile(schema);
  });
  fastify.setSchemaResolver(function (ref) {
    t.equals(ref, 'urn:schema:foo');
    return ajv.getSchema(ref).schema;
  });
  fastify.route({
    method: 'GET',
    url: '/',
    schema: {
      response: {
        '2xx': ajv.getSchema('urn:schema:response').schema
      }
    },
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.ready(t.error);
});
test('Should use the ref resolver - body', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var ajv = new AJV();
  ajv.addSchema(fastClone(schemaParent));
  ajv.addSchema(fastClone(schemaUsed));
  fastify.setSchemaCompiler(function (schema) {
    return ajv.compile(schema);
  });
  fastify.setSchemaResolver(function (ref) {
    t.equals(ref, 'urn:schema:foo');
    return ajv.getSchema(ref).schema;
  });
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: ajv.getSchema('urn:schema:response').schema
    },
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      foo: 'bar'
    }
  }, function (err, res) {
    t.error(err);
    t.deepEquals(JSON.parse(res.payload), {
      foo: 'bar'
    });
  });
});
test('Encapsulation', function (t) {
  t.plan(14);
  var fastify = Fastify();
  var ajv = new AJV();
  ajv.addSchema(fastClone(schemaParent));
  ajv.addSchema(fastClone(schemaUsed));
  fastify.register(function (instance, opts, next) {
    instance.setSchemaCompiler(function (schema) {
      return ajv.compile(schema);
    });
    instance.setSchemaResolver(function (ref) {
      return ajv.getSchema(ref).schema;
    });
    instance.route({
      method: 'POST',
      url: '/',
      schema: {
        body: ajv.getSchema('urn:schema:response').schema
      },
      handler: function handler(req, reply) {
        reply.send({
          foo: 'bar'
        });
      }
    });
    instance.register(function (instance, opts, next) {
      instance.route({
        method: 'POST',
        url: '/two',
        schema: {
          body: ajv.getSchema('urn:schema:response').schema
        },
        handler: function handler(req, reply) {
          reply.send({
            foo: 'bar'
          });
        }
      });
      next();
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.route({
      method: 'POST',
      url: '/clean',
      handler: function handler(req, reply) {
        reply.send({
          foo: 'bar'
        });
      }
    });
    next();
  });
  fastify.ready(function (err) {
    t.error(err);
    fastify.inject({
      method: 'POST',
      url: '/',
      payload: {
        foo: 'bar'
      }
    }, function (err, res) {
      t.error(err);
      t.equals(res.statusCode, 200);
      t.deepEquals(JSON.parse(res.payload), {
        foo: 'bar'
      });
    });
    fastify.inject({
      method: 'POST',
      url: '/',
      payload: {
        wrongFoo: 'bar'
      }
    }, function (err, res) {
      t.error(err);
      t.equals(res.statusCode, 400);
    });
    fastify.inject({
      method: 'POST',
      url: '/two',
      payload: {
        foo: 'bar'
      }
    }, function (err, res) {
      t.error(err);
      t.equals(res.statusCode, 200);
      t.deepEquals(JSON.parse(res.payload), {
        foo: 'bar'
      });
    });
    fastify.inject({
      method: 'POST',
      url: '/two',
      payload: {
        wrongFoo: 'bar'
      }
    }, function (err, res) {
      t.error(err);
      t.equals(res.statusCode, 400);
    });
    fastify.inject({
      method: 'POST',
      url: '/clean',
      payload: {
        wrongFoo: 'bar'
      }
    }, function (err, res) {
      t.error(err);
      t.equals(res.statusCode, 200);
      t.deepEquals(JSON.parse(res.payload), {
        foo: 'bar'
      });
    });
  });
});
test('Schema resolver without schema compiler', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.setSchemaResolver(function () {
    t.fail('the schema resolver will never be called');
  });
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {},
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.ready(function (err) {
    t.is(err.code, 'FST_ERR_SCH_MISSING_COMPILER');
    t.isLike(err.message, /You must provide a schemaCompiler to route POST \/ to use the schemaResolver/);
  });
});
test('Triple $ref deep', function (t) {
  t.plan(6);
  var fastify = Fastify();
  var ajv = new AJV();
  ajv.addSchema(fastClone(schemaParent));
  ajv.addSchema(fastClone(schemaUsed));
  ajv.addSchema(fastClone(schemaRequest));
  fastify.setSchemaCompiler(function (schema) {
    return ajv.compile(schema);
  });
  fastify.setSchemaResolver(function (ref) {
    return ajv.getSchema(ref).schema;
  });
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: ajv.getSchema('urn:schema:request').schema,
      response: {
        '2xx': ajv.getSchema('urn:schema:response').schema
      }
    },
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      foo: 'bar'
    }
  }, function (err, res) {
    t.error(err);
    t.equals(res.statusCode, 200);
    t.deepEquals(JSON.parse(res.payload), {
      foo: 'bar'
    });
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      fool: 'bar'
    }
  }, function (err, res) {
    t.error(err);
    t.equals(res.statusCode, 400);
    t.deepEquals(JSON.parse(res.payload).message, "body should have required property 'foo'");
  });
});
test('$ref with a simple $id', function (t) {
  t.plan(4);
  var fastify = Fastify();
  var ajv = new AJV();
  ajv.addSchema(fastClone(schemaUsed));
  ajv.addSchema({
    $id: 'urn:schema:response',
    type: 'object',
    required: ['foo'],
    properties: {
      foo: {
        $ref: 'urn:schema:foo'
      }
    }
  });
  ajv.addSchema({
    $id: 'urn:schema:request',
    type: 'object',
    required: ['foo'],
    properties: {
      foo: {
        $ref: 'urn:schema:foo'
      }
    }
  });
  fastify.setSchemaCompiler(function (schema) {
    return ajv.compile(schema);
  });
  fastify.setSchemaResolver(function (ref) {
    t.equals(ref, 'urn:schema:foo');
    return ajv.getSchema(ref).schema;
  });
  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: ajv.getSchema('urn:schema:request').schema,
      response: {
        '2xx': ajv.getSchema('urn:schema:response').schema
      }
    },
    handler: function handler(req, reply) {
      reply.send({
        foo: {
          foo: 'bar',
          bar: 'foo'
        }
      });
    }
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      foo: {
        foo: 'bar'
      }
    }
  }, function (err, res) {
    t.error(err);
    t.equals(res.statusCode, 200);
    t.deepEquals(JSON.parse(res.payload), {
      foo: {
        foo: 'bar'
      }
    });
  });
});