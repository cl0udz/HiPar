'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var sget = require('simple-get').concat;

var http = require('http');

var NotFound = require('http-errors').NotFound;

var Reply = require('../../lib/reply');

var _require = require('readable-stream'),
    Writable = _require.Writable;

var _require2 = require('../../lib/symbols'),
    kReplyErrorHandlerCalled = _require2.kReplyErrorHandlerCalled,
    kReplyHeaders = _require2.kReplyHeaders,
    kReplySerializer = _require2.kReplySerializer,
    kReplyIsError = _require2.kReplyIsError;

test('Once called, Reply should return an object with methods', function (t) {
  t.plan(13);
  var response = {
    res: 'res'
  };

  function context() {}

  function request() {}

  var reply = new Reply(response, context, request);
  t.is(_typeof(reply), 'object');
  t.is(_typeof(reply[kReplyIsError]), 'boolean');
  t.is(_typeof(reply[kReplyErrorHandlerCalled]), 'boolean');
  t.is(_typeof(reply.send), 'function');
  t.is(_typeof(reply.code), 'function');
  t.is(_typeof(reply.status), 'function');
  t.is(_typeof(reply.header), 'function');
  t.is(_typeof(reply.serialize), 'function');
  t.is(_typeof(reply.getResponseTime), 'function');
  t.is(_typeof(reply[kReplyHeaders]), 'object');
  t.strictEqual(reply.res, response);
  t.strictEqual(reply.context, context);
  t.strictEqual(reply.request, request);
});
test('reply.send throw with circular JSON', function (t) {
  t.plan(1);
  var response = {
    setHeader: function setHeader() {},
    hasHeader: function hasHeader() {
      return false;
    },
    getHeader: function getHeader() {
      return undefined;
    },
    writeHead: function writeHead() {},
    end: function end() {}
  };
  var reply = new Reply(response, {
    onSend: []
  }, null);
  t["throws"](function () {
    var obj = {};
    obj.obj = obj;
    reply.send(JSON.stringify(obj));
  }, 'Converting circular structure to JSON');
});
test('reply.send returns itself', function (t) {
  t.plan(1);
  var response = {
    setHeader: function setHeader() {},
    hasHeader: function hasHeader() {
      return false;
    },
    getHeader: function getHeader() {
      return undefined;
    },
    writeHead: function writeHead() {},
    end: function end() {}
  };
  var reply = new Reply(response, {
    onSend: []
  }, null);
  t.equal(reply.send('hello'), reply);
});
test('reply.serializer should set a custom serializer', function (t) {
  t.plan(2);
  var reply = new Reply(null, null, null);
  t.equal(reply[kReplySerializer], null);
  reply.serializer('serializer');
  t.equal(reply[kReplySerializer], 'serializer');
});
test('reply.serialize should serialize payload', function (t) {
  t.plan(1);
  var response = {
    statusCode: 200
  };
  var context = {};
  var reply = new Reply(response, context, null);
  t.equal(reply.serialize({
    foo: 'bar'
  }), '{"foo":"bar"}');
});
test('reply.serialize should serialize payload with a custom serializer', function (t) {
  t.plan(2);
  var customSerializerCalled = false;
  var response = {
    statusCode: 200
  };
  var context = {};
  var reply = new Reply(response, context, null);
  reply.serializer(function (x) {
    return (customSerializerCalled = true) && JSON.stringify(x);
  });
  t.equal(reply.serialize({
    foo: 'bar'
  }), '{"foo":"bar"}');
  t.equal(customSerializerCalled, true, 'custom serializer not called');
});
test('reply.serialize should serialize payload with Fastify instance', function (t) {
  t.plan(2);

  var fastify = require('../..')();

  fastify.route({
    method: 'GET',
    url: '/',
    schema: {
      response: {
        200: {
          type: 'object',
          properties: {
            foo: {
              type: 'string'
            }
          }
        }
      }
    },
    handler: function handler(req, reply) {
      reply.send(reply.serialize({
        foo: 'bar'
      }));
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"foo":"bar"}');
  });
});
test('within an instance', function (t) {
  var fastify = require('../..')();

  var test = t.test;
  fastify.get('/', function (req, reply) {
    reply.code(200);
    reply.header('Content-Type', 'text/plain');
    reply.send('hello world!');
  });
  fastify.get('/auto-type', function (req, reply) {
    reply.code(200);
    reply.type('text/plain');
    reply.send('hello world!');
  });
  fastify.get('/auto-status-code', function (req, reply) {
    reply.send('hello world!');
  });
  fastify.get('/redirect', function (req, reply) {
    reply.redirect('/');
  });
  fastify.get('/redirect-code', function (req, reply) {
    reply.redirect(301, '/');
  });
  fastify.get('/redirect-code-before-call', function (req, reply) {
    reply.code(307).redirect('/');
  });
  fastify.get('/redirect-code-before-call-overwrite', function (req, reply) {
    reply.code(307).redirect(302, '/');
  });
  fastify.get('/custom-serializer', function (req, reply) {
    reply.code(200);
    reply.type('text/plain');
    reply.serializer(function (body) {
      return require('querystring').stringify(body);
    });
    reply.send({
      hello: 'world!'
    });
  });
  fastify.register(function (instance, options, next) {
    fastify.addHook('onSend', function (req, reply, payload, next) {
      reply.header('x-onsend', 'yes');
      next();
    });
    fastify.get('/redirect-onsend', function (req, reply) {
      reply.redirect('/');
    });
    next();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    test('custom serializer should be used', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/custom-serializer'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello=world!');
      });
    });
    test('status code and content-type should be correct', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('auto status code shoud be 200', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/auto-status-code'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('auto type shoud be text/plain', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/auto-type'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('redirect to `/` - 1', function (t) {
      t.plan(1);
      http.get('http://localhost:' + fastify.server.address().port + '/redirect', function (response) {
        t.strictEqual(response.statusCode, 302);
      });
    });
    test('redirect to `/` - 2', function (t) {
      t.plan(1);
      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code', function (response) {
        t.strictEqual(response.statusCode, 301);
      });
    });
    test('redirect to `/` - 3', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/redirect'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('redirect to `/` - 4', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('redirect to `/` - 5', function (t) {
      t.plan(3);
      var url = 'http://localhost:' + fastify.server.address().port + '/redirect-onsend';
      http.get(url, function (response) {
        t.strictEqual(response.headers['x-onsend'], 'yes');
        t.strictEqual(response.headers['content-length'], '0');
        t.strictEqual(response.headers.location, '/');
      });
    });
    test('redirect to `/` - 6', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('redirect to `/` - 7', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-type'], 'text/plain');
        t.deepEqual(body.toString(), 'hello world!');
      });
    });
    test('redirect to `/` - 8', function (t) {
      t.plan(1);
      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call', function (response) {
        t.strictEqual(response.statusCode, 307);
      });
    });
    test('redirect to `/` - 9', function (t) {
      t.plan(1);
      http.get('http://localhost:' + fastify.server.address().port + '/redirect-code-before-call-overwrite', function (response) {
        t.strictEqual(response.statusCode, 302);
      });
    });
    t.end();
  });
});
test('buffer without content type should send a application/octet-stream and raw buffer', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.send(Buffer.alloc(1024));
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'application/octet-stream');
      t.deepEqual(body, Buffer.alloc(1024));
    });
  });
});
test('buffer with content type should not send application/octet-stream', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.header('Content-Type', 'text/plain');
    reply.send(Buffer.alloc(1024));
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'text/plain');
      t.deepEqual(body, Buffer.alloc(1024));
    });
  });
});
test('stream with content type should not send application/octet-stream', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  var fs = require('fs');

  var path = require('path');

  var streamPath = path.join(__dirname, '..', '..', 'package.json');
  var stream = fs.createReadStream(streamPath);
  var buf = fs.readFileSync(streamPath);
  fastify.get('/', function (req, reply) {
    reply.header('Content-Type', 'text/plain').send(stream);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'text/plain');
      t.deepEqual(body, buf);
    });
  });
});
test('stream using reply.res.writeHead should return customize headers', function (t) {
  t.plan(6);

  var fastify = require('../..')();

  var fs = require('fs');

  var path = require('path');

  var streamPath = path.join(__dirname, '..', '..', 'package.json');
  var stream = fs.createReadStream(streamPath);
  var buf = fs.readFileSync(streamPath);
  fastify.get('/', function (req, reply) {
    reply.log.warn = function mockWarn(message) {
      t.equal(message, 'response will send, but you shouldn\'t use res.writeHead in stream mode');
    };

    reply.res.writeHead(200, {
      location: '/'
    });
    reply.send(stream);
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers.location, '/');
      t.strictEqual(response.headers['Content-Type'], undefined);
      t.deepEqual(body, buf);
    });
  });
});
test('plain string without content type should send a text/plain', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.send('hello world!');
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'text/plain; charset=utf-8');
      t.deepEqual(body.toString(), 'hello world!');
    });
  });
});
test('plain string with content type should be sent unmodified', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.type('text/css').send('hello world!');
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'text/css');
      t.deepEqual(body.toString(), 'hello world!');
    });
  });
});
test('plain string with content type and custom serializer should be serialized', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.serializer(function () {
      return 'serialized';
    }).type('text/css').send('hello world!');
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'text/css');
      t.deepEqual(body.toString(), 'serialized');
    });
  });
});
test('plain string with content type application/json should be serialized as json', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.type('application/json').send('hello world!');
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');
      t.deepEqual(body.toString(), '"hello world!"');
    });
  });
});
test('error object with a content type that is not application/json should work', function (t) {
  t.plan(6);

  var fastify = require('../..')();

  fastify.get('/text', function (req, reply) {
    reply.type('text/plain');
    reply.send(new Error('some application error'));
  });
  fastify.get('/html', function (req, reply) {
    reply.type('text/html');
    reply.send(new Error('some application error'));
  });
  fastify.inject({
    method: 'GET',
    url: '/text'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(JSON.parse(res.payload).message, 'some application error');
  });
  fastify.inject({
    method: 'GET',
    url: '/html'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
    t.strictEqual(JSON.parse(res.payload).message, 'some application error');
  });
});
test('undefined payload should be sent as-is', function (t) {
  t.plan(6);

  var fastify = require('../..')();

  fastify.addHook('onSend', function (request, reply, payload, next) {
    t.strictEqual(payload, undefined);
    next();
  });
  fastify.get('/', function (req, reply) {
    reply.code(204).send();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: "http://localhost:".concat(fastify.server.address().port)
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.headers['content-type'], undefined);
      t.strictEqual(response.headers['content-length'], undefined);
      t.strictEqual(body.length, 0);
    });
  });
});
test('reply.send(new NotFound()) should not invoke the 404 handler', function (t) {
  t.plan(9);

  var fastify = require('../..')();

  fastify.setNotFoundHandler(function (req, reply) {
    t.fail('Should not be called');
  });
  fastify.get('/not-found', function (req, reply) {
    reply.send(new NotFound());
  });
  fastify.register(function (instance, options, next) {
    instance.get('/not-found', function (req, reply) {
      reply.send(new NotFound());
    });
    next();
  }, {
    prefix: '/prefixed'
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/not-found'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
      t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');
      t.deepEqual(JSON.parse(body.toString()), {
        statusCode: 404,
        error: 'Not Found',
        message: 'Not Found'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/prefixed/not-found'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
      t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');
      t.deepEqual(JSON.parse(body), {
        error: 'Not Found',
        message: 'Not Found',
        statusCode: 404
      });
    });
  });
});
test('reply can set multiple instances of same header', function (t) {
  t.plan(4);

  var fastify = require('../../')();

  fastify.get('/headers', function (req, reply) {
    reply.header('set-cookie', 'one').header('set-cookie', 'two').send({});
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.ok(response.headers['set-cookie']);
      t.strictDeepEqual(response.headers['set-cookie'], ['one', 'two']);
    });
  });
});
test('reply.hasHeader returns correct values', function (t) {
  t.plan(3);

  var fastify = require('../../')();

  fastify.get('/headers', function (req, reply) {
    reply.header('x-foo', 'foo');
    t.is(reply.hasHeader('x-foo'), true);
    t.is(reply.hasHeader('x-bar'), false);
    reply.send();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function () {});
  });
});
test('reply.getHeader returns correct values', function (t) {
  t.plan(4);

  var fastify = require('../../')();

  fastify.get('/headers', function (req, reply) {
    reply.header('x-foo', 'foo');
    t.is(reply.getHeader('x-foo'), 'foo');
    reply.header('x-foo', 'bar');
    t.strictDeepEqual(reply.getHeader('x-foo'), 'bar');
    reply.header('set-cookie', 'one');
    reply.header('set-cookie', 'two');
    t.strictDeepEqual(reply.getHeader('set-cookie'), ['one', 'two']);
    reply.send();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function () {});
  });
});
test('reply.removeHeader can remove the value', function (t) {
  t.plan(5);

  var fastify = require('../../')();

  t.teardown(fastify.close.bind(fastify));
  fastify.get('/headers', function (req, reply) {
    reply.header('x-foo', 'foo');
    t.is(reply.getHeader('x-foo'), 'foo');
    t.is(reply.removeHeader('x-foo'), reply);
    t.strictDeepEqual(reply.getHeader('x-foo'), undefined);
    reply.send();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function () {
      t.pass();
    });
  });
});
test('reply.header can reset the value', function (t) {
  t.plan(3);

  var fastify = require('../../')();

  t.teardown(fastify.close.bind(fastify));
  fastify.get('/headers', function (req, reply) {
    reply.header('x-foo', 'foo');
    reply.header('x-foo', undefined);
    t.strictDeepEqual(reply.getHeader('x-foo'), '');
    reply.send();
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function () {
      t.pass();
    });
  });
});
test('Reply should handle JSON content type with a charset', function (t) {
  t.plan(16);

  var fastify = require('../../')();

  fastify.get('/default', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.get('/utf8', function (req, reply) {
    reply.header('content-type', 'application/json; charset=utf-8').send({
      hello: 'world'
    });
  });
  fastify.get('/utf16', function (req, reply) {
    reply.header('content-type', 'application/json; charset=utf-16').send({
      hello: 'world'
    });
  });
  fastify.get('/utf32', function (req, reply) {
    reply.header('content-type', 'application/json; charset=utf-32').send({
      hello: 'world'
    });
  });
  fastify.get('/type-utf8', function (req, reply) {
    reply.type('application/json; charset=utf-8').send({
      hello: 'world'
    });
  });
  fastify.get('/type-utf16', function (req, reply) {
    reply.type('application/json; charset=utf-16').send({
      hello: 'world'
    });
  });
  fastify.get('/type-utf32', function (req, reply) {
    reply.type('application/json; charset=utf-32').send({
      hello: 'world'
    });
  });
  fastify.get('/no-space-type-utf32', function (req, reply) {
    reply.type('application/json;charset=utf-32').send({
      hello: 'world'
    });
  });
  fastify.inject('/default', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-8');
  });
  fastify.inject('/utf8', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-8');
  });
  fastify.inject('/utf16', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-16');
  });
  fastify.inject('/utf32', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-32');
  });
  fastify.inject('/type-utf8', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-8');
  });
  fastify.inject('/type-utf16', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-16');
  });
  fastify.inject('/type-utf32', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-32');
  });
  fastify.inject('/no-space-type-utf32', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json;charset=utf-32');
  });
});
test('Content type and charset set previously', function (t) {
  t.plan(2);

  var fastify = require('../../')();

  fastify.addHook('onRequest', function (req, reply, next) {
    reply.header('content-type', 'application/json; charset=utf-16');
    next();
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.is(res.headers['content-type'], 'application/json; charset=utf-16');
  });
});
test('.status() is an alias for .code()', function (t) {
  t.plan(2);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.status(418).send();
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.is(res.statusCode, 418);
  });
});
test('.statusCode is getter and setter', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    t.ok(reply.statusCode, 200, 'default status value');
    reply.statusCode = 418;
    t.ok(reply.statusCode, 418);
    reply.send();
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.is(res.statusCode, 418);
  });
});
test('reply.header setting multiple cookies as multiple Set-Cookie headers', function (t) {
  t.plan(7);

  var fastify = require('../../')();

  fastify.get('/headers', function (req, reply) {
    reply.header('set-cookie', 'one').header('set-cookie', 'two').header('set-cookie', 'three').header('set-cookie', ['four', 'five', 'six']).send({});
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/headers'
    }, function (err, response, body) {
      t.error(err);
      t.ok(response.headers['set-cookie']);
      t.strictDeepEqual(response.headers['set-cookie'], ['one', 'two', 'three', 'four', 'five', 'six']);
    });
  });
  fastify.inject('/headers', function (error, response) {
    t.error(error);
    t.ok(response.headers['set-cookie']);
    t.strictDeepEqual(response.headers['set-cookie'], ['one', 'two', 'three', 'four', 'five', 'six']);
  });
});
test('should throw error when passing falsy value to reply.sent', function (t) {
  t.plan(3);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    try {
      reply.sent = false;
    } catch (err) {
      t.strictEqual(err.message, 'FST_ERR_REP_SENT_VALUE: The only possible value for reply.sent is true.');
      reply.send();
    }
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.pass();
  });
});
test('should throw error when attempting to set reply.sent more than once', function (t) {
  t.plan(3);

  var fastify = require('../..')();

  fastify.get('/', function (req, reply) {
    reply.sent = true;

    try {
      reply.sent = true;
    } catch (err) {
      t.strictEqual(err.message, 'FST_ERR_REP_ALREADY_SENT: Reply was already sent.');
    }

    reply.res.end();
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.pass();
  });
});
test('reply.getResponseTime() should return 0 before the timer is initialised on the reply by setting up response listeners', function (t) {
  t.plan(1);
  var response = {
    statusCode: 200
  };
  var context = {};
  var reply = new Reply(response, context, null);
  t.equal(reply.getResponseTime(), 0);
});
test('reply.getResponseTime() should return a number greater than 0 after the timer is initialised on the reply by setting up response listeners', function (t) {
  t.plan(1);

  var fastify = require('../..')();

  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.send('hello world');
    }
  });
  fastify.addHook('onResponse', function (req, reply) {
    t["true"](reply.getResponseTime() > 0);
    t.end();
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  });
});
test('reply should use the custom serializer', function (t) {
  t.plan(4);

  var fastify = require('../..')();

  fastify.setReplySerializer(function (payload, statusCode) {
    t.deepEqual(payload, {
      foo: 'bar'
    });
    t.equal(statusCode, 200);
    payload.foo = 'bar bar';
    return JSON.stringify(payload);
  });
  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"foo":"bar bar"}');
  });
});
test('reply should use the right serializer in encapsulated context', function (t) {
  t.plan(9);

  var fastify = require('../..')();

  fastify.setReplySerializer(function (payload) {
    t.deepEqual(payload, {
      foo: 'bar'
    });
    payload.foo = 'bar bar';
    return JSON.stringify(payload);
  });
  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.register(function (instance, opts, next) {
    instance.route({
      method: 'GET',
      url: '/sub',
      handler: function handler(req, reply) {
        reply.send({
          john: 'doo'
        });
      }
    });
    instance.setReplySerializer(function (payload) {
      t.deepEqual(payload, {
        john: 'doo'
      });
      payload.john = 'too too';
      return JSON.stringify(payload);
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.route({
      method: 'GET',
      url: '/sub',
      handler: function handler(req, reply) {
        reply.send({
          sweet: 'potato'
        });
      }
    });
    instance.setReplySerializer(function (payload) {
      t.deepEqual(payload, {
        sweet: 'potato'
      });
      payload.sweet = 'potato potato';
      return JSON.stringify(payload);
    });
    next();
  }, {
    prefix: 'sub'
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"foo":"bar bar"}');
  });
  fastify.inject({
    method: 'GET',
    url: '/sub'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"john":"too too"}');
  });
  fastify.inject({
    method: 'GET',
    url: '/sub/sub'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"sweet":"potato potato"}');
  });
});
test('reply should use the right serializer in deep encapsulated context', function (t) {
  t.plan(8);

  var fastify = require('../..')();

  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.send({
        foo: 'bar'
      });
    }
  });
  fastify.register(function (instance, opts, next) {
    instance.route({
      method: 'GET',
      url: '/sub',
      handler: function handler(req, reply) {
        reply.send({
          john: 'doo'
        });
      }
    });
    instance.setReplySerializer(function (payload) {
      t.deepEqual(payload, {
        john: 'doo'
      });
      payload.john = 'too too';
      return JSON.stringify(payload);
    });
    instance.register(function (subInstance, opts, next) {
      subInstance.route({
        method: 'GET',
        url: '/deep',
        handler: function handler(req, reply) {
          reply.send({
            john: 'deep'
          });
        }
      });
      subInstance.setReplySerializer(function (payload) {
        t.deepEqual(payload, {
          john: 'deep'
        });
        payload.john = 'deep deep';
        return JSON.stringify(payload);
      });
      next();
    });
    next();
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"foo":"bar"}');
  });
  fastify.inject({
    method: 'GET',
    url: '/sub'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"john":"too too"}');
  });
  fastify.inject({
    method: 'GET',
    url: '/deep'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"john":"deep deep"}');
  });
});
test('reply should use the route serializer', function (t) {
  t.plan(3);

  var fastify = require('../..')();

  fastify.setReplySerializer(function () {
    t.fail('this serializer should not be executed');
  });
  fastify.route({
    method: 'GET',
    url: '/',
    handler: function handler(req, reply) {
      reply.serializer(function (payload) {
        t.deepEqual(payload, {
          john: 'doo'
        });
        payload.john = 'too too';
        return JSON.stringify(payload);
      }).send({
        john: 'doo'
      });
    }
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '{"john":"too too"}');
  });
});
test('cannot set the replySerializer when the server is running', function (t) {
  t.plan(2);

  var fastify = require('../..')();

  t.teardown(fastify.close.bind(fastify));
  fastify.listen(function (err) {
    t.error(err);

    try {
      fastify.setReplySerializer(function () {});
      t.fail('this serializer should not be setup');
    } catch (e) {
      t.is(e.message, 'Cannot call "setReplySerializer" when fastify instance is already started!');
    }
  });
});
test('reply should not call the custom serializer for errors and not found', function (t) {
  t.plan(9);

  var fastify = require('../..')();

  fastify.setReplySerializer(function (payload, statusCode) {
    t.deepEqual(payload, {
      foo: 'bar'
    });
    t.equal(statusCode, 200);
    return JSON.stringify(payload);
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      foo: 'bar'
    });
  });
  fastify.get('/err', function (req, reply) {
    reply.send(new Error('an error'));
  });
  fastify.inject({
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 200);
    t.strictEqual(res.payload, '{"foo":"bar"}');
  });
  fastify.inject({
    method: 'GET',
    url: '/err'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 500);
  });
  fastify.inject({
    method: 'GET',
    url: '/not-existing'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('reply.then', function (t) {
  t.plan(2);

  function context() {}

  function request() {}

  t.test('without an error', function (t) {
    t.plan(1);
    var response = new Writable();
    var reply = new Reply(response, context, request);
    reply.then(function () {
      t.pass('fullfilled called');
    });
    response.destroy();
  });
  t.test('with an error', function (t) {
    t.plan(1);
    var response = new Writable();
    var reply = new Reply(response, context, request);

    var _err = new Error('kaboom');

    reply.then(function () {
      t.fail('fullfilled called');
    }, function (err) {
      t.equal(err, _err);
    });
    response.destroy(_err);
  });
});