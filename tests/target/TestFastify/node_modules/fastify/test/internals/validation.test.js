'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var Ajv = require('ajv');

var ajv = new Ajv({
  coerceTypes: true
});

var validation = require('../../lib/validation');

var _require = require('../../lib/schemas'),
    Schemas = _require.Schemas;

var symbols = require('../../lib/validation').symbols;

test('Symbols', function (t) {
  t.plan(5);
  t.is(_typeof(symbols.responseSchema), 'symbol');
  t.is(_typeof(symbols.bodySchema), 'symbol');
  t.is(_typeof(symbols.querystringSchema), 'symbol');
  t.is(_typeof(symbols.paramsSchema), 'symbol');
  t.is(_typeof(symbols.headersSchema), 'symbol');
});
test('build schema - missing schema', function (t) {
  t.plan(1);
  var opts = {};
  validation.build(opts);
  t.is(_typeof(opts[symbols.responseSchema]), 'undefined');
});
test('build schema - missing output schema', function (t) {
  t.plan(1);
  var opts = {
    schema: {}
  };
  validation.build(opts, null, new Schemas());
  t.is(_typeof(opts[symbols.responseSchema]), 'undefined');
});
test('build schema - output schema', function (t) {
  t.plan(2);
  var opts = {
    schema: {
      response: {
        '2xx': {
          type: 'object',
          properties: {
            hello: {
              type: 'string'
            }
          }
        },
        201: {
          type: 'object',
          properties: {
            hello: {
              type: 'number'
            }
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.is(_typeof(opts[symbols.responseSchema]['2xx']), 'function');
  t.is(_typeof(opts[symbols.responseSchema]['201']), 'function');
});
test('build schema - payload schema', function (t) {
  t.plan(1);
  var opts = {
    schema: {
      body: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.is(_typeof(opts[symbols.bodySchema]), 'function');
});
test('build schema - query schema', function (t) {
  t.plan(2);
  var opts = {
    schema: {
      query: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.type(opts[symbols.querystringSchema].schema.type, 'string');
  t.is(_typeof(opts[symbols.querystringSchema]), 'function');
});
test('build schema - query schema abbreviated', function (t) {
  t.plan(2);
  var opts = {
    schema: {
      query: {
        hello: {
          type: 'string'
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.type(opts[symbols.querystringSchema].schema.type, 'string');
  t.is(_typeof(opts[symbols.querystringSchema]), 'function');
});
test('build schema - querystring schema', function (t) {
  t.plan(2);
  var opts = {
    schema: {
      querystring: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.type(opts[symbols.querystringSchema].schema.type, 'string');
  t.is(_typeof(opts[symbols.querystringSchema]), 'function');
});
test('build schema - querystring schema abbreviated', function (t) {
  t.plan(2);
  var opts = {
    schema: {
      querystring: {
        hello: {
          type: 'string'
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.type(opts[symbols.querystringSchema].schema.type, 'string');
  t.is(_typeof(opts[symbols.querystringSchema]), 'function');
});
test('build schema - must throw if querystring and query schema exist', function (t) {
  t.plan(2);

  try {
    var opts = {
      schema: {
        query: {
          type: 'object',
          properties: {
            hello: {
              type: 'string'
            }
          }
        },
        querystring: {
          type: 'object',
          properties: {
            hello: {
              type: 'string'
            }
          }
        }
      }
    };
    validation.build(opts, function (schema) {
      return ajv.compile(schema);
    }, new Schemas());
  } catch (err) {
    t.is(err.code, 'FST_ERR_SCH_DUPLICATE');
    t.is(err.message, 'FST_ERR_SCH_DUPLICATE: Schema with \'querystring\' already present!');
  }
});
test('build schema - params schema', function (t) {
  t.plan(1);
  var opts = {
    schema: {
      params: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.is(_typeof(opts[symbols.paramsSchema]), 'function');
});
test('build schema - headers schema', function (t) {
  t.plan(1);
  var opts = {
    schema: {
      headers: {
        type: 'object',
        properties: {
          'content-type': {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    return ajv.compile(schema);
  }, new Schemas());
  t.is(_typeof(opts[symbols.headersSchema]), 'function');
});
test('build schema - headers are lowercase', function (t) {
  t.plan(1);
  var opts = {
    schema: {
      headers: {
        type: 'object',
        properties: {
          'Content-Type': {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    t.ok(schema.properties['content-type'], 'lowercase content-type exists');
    return function () {};
  }, new Schemas());
});
test('build schema - headers are not lowercased in case of custom object', function (t) {
  t.plan(1);

  var Headers = function Headers() {
    _classCallCheck(this, Headers);
  };

  var opts = {
    schema: {
      headers: new Headers()
    }
  };
  validation.build(opts, function (schema) {
    t.type(schema, Headers);
    return function () {};
  }, new Schemas());
});
test('build schema - uppercased headers are not included', function (t) {
  t.plan(1);
  var opts = {
    schema: {
      headers: {
        type: 'object',
        properties: {
          'Content-Type': {
            type: 'string'
          }
        }
      }
    }
  };
  validation.build(opts, function (schema) {
    t.notOk('Content-Type' in schema.properties, 'uppercase does not exist');
    return function () {};
  }, new Schemas());
});