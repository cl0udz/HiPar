'use strict';
/* eslint no-prototype-builtins: 0 */

var _this = void 0;

var t = require('tap');

var test = t.test;

var decorator = require('../../lib/decorate');

test('decorate should add the given method to its instance', function (t) {
  t.plan(1);

  function build() {
    server.add = decorator.add;
    return server;

    function server() {}
  }

  var server = build();
  server.add('test', function () {});
  t.ok(server.test);
});
test('decorate is chainable', function (t) {
  t.plan(3);

  function build() {
    server.add = decorator.add;
    return server;

    function server() {}
  }

  var server = build();
  server.add('test1', function () {}).add('test2', function () {}).add('test3', function () {});
  t.ok(server.test1);
  t.ok(server.test2);
  t.ok(server.test3);
});
test('checkExistence should check if a property is part of the given instance', function (t) {
  t.plan(1);
  var instance = {
    test: function test() {}
  };
  t.ok(decorator.exist(instance, 'test'));
});
test('checkExistence should find the instance if not given', function (t) {
  t.plan(1);

  function build() {
    server.add = decorator.add;
    server.check = decorator.exist;
    return server;

    function server() {}
  }

  var server = build();
  server.add('test', function () {});
  t.ok(server.check('test'));
});
test('checkExistence should check the prototype as well', function (t) {
  t.plan(1);

  function Instance() {}

  Instance.prototype.test = function () {};

  var instance = new Instance();
  t.ok(decorator.exist(instance, 'test'));
});
test('checkDependencies should throw if a dependency is not present', function (t) {
  t.plan(2);
  var instance = {};

  try {
    decorator.dependencies(instance, ['test']);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');
    t.is(e.message, 'FST_ERR_DEC_MISSING_DEPENDENCY: The decorator is missing dependency \'test\'.');
  }
});
test('decorate should internally call checkDependencies', function (t) {
  t.plan(2);

  function build() {
    server.add = decorator.add;
    return server;

    function server() {}
  }

  var server = build();

  try {
    server.add('method', function () {}, ['test']);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');
    t.is(e.message, 'FST_ERR_DEC_MISSING_DEPENDENCY: The decorator is missing dependency \'test\'.');
  }
});
test('decorate should recognize getter/setter objects', function (t) {
  t.plan(6);
  var one = {};
  decorator.add.call(one, 'foo', {
    getter: function getter() {
      return _this._a;
    },
    setter: function setter(val) {
      t.pass();
      _this._a = val;
    }
  });
  t.is(one.hasOwnProperty('foo'), true);
  t.is(one.foo, undefined);
  one.foo = 'a';
  t.is(one.foo, 'a'); // getter only

  var two = {};
  decorator.add.call(two, 'foo', {
    getter: function getter() {
      return 'a getter';
    }
  });
  t.is(two.hasOwnProperty('foo'), true);
  t.is(two.foo, 'a getter');
});