'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var _require = require('../../lib/hooks'),
    Hooks = _require.Hooks;

var noop = function noop() {};

test('hooks should have 4 array with the registered hooks', function (t) {
  var hooks = new Hooks();
  t.is(_typeof(hooks), 'object');
  t.ok(Array.isArray(hooks.onRequest));
  t.ok(Array.isArray(hooks.onSend));
  t.ok(Array.isArray(hooks.preParsing));
  t.ok(Array.isArray(hooks.preValidation));
  t.ok(Array.isArray(hooks.preHandler));
  t.ok(Array.isArray(hooks.onResponse));
  t.ok(Array.isArray(hooks.onError));
  t.end();
});
test('hooks.add should add a hook to the given hook', function (t) {
  var hooks = new Hooks();
  hooks.add('onRequest', noop);
  t.is(hooks.onRequest.length, 1);
  t.is(_typeof(hooks.onRequest[0]), 'function');
  hooks.add('preParsing', noop);
  t.is(hooks.preParsing.length, 1);
  t.is(_typeof(hooks.preParsing[0]), 'function');
  hooks.add('preValidation', noop);
  t.is(hooks.preValidation.length, 1);
  t.is(_typeof(hooks.preValidation[0]), 'function');
  hooks.add('preHandler', noop);
  t.is(hooks.preHandler.length, 1);
  t.is(_typeof(hooks.preHandler[0]), 'function');
  hooks.add('onResponse', noop);
  t.is(hooks.onResponse.length, 1);
  t.is(_typeof(hooks.onResponse[0]), 'function');
  hooks.add('onSend', noop);
  t.is(hooks.onSend.length, 1);
  t.is(_typeof(hooks.onSend[0]), 'function');
  hooks.add('onError', noop);
  t.is(hooks.onError.length, 1);
  t.is(_typeof(hooks.onError[0]), 'function');
  t.end();
});
test('hooks should throw on unexisting handler', function (t) {
  t.plan(1);
  var hooks = new Hooks();

  try {
    hooks.add('onUnexistingHook', noop);
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('should throw on wrong parameters', function (t) {
  var hooks = new Hooks();
  t.plan(4);

  try {
    hooks.add(null, noop);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_HOOK_INVALID_TYPE');
    t.is(e.message, 'FST_ERR_HOOK_INVALID_TYPE: The hook name must be a string');
  }

  try {
    hooks.add('', null);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_HOOK_INVALID_HANDLER');
    t.is(e.message, 'FST_ERR_HOOK_INVALID_HANDLER: The hook callback must be a function');
  }
});