'use strict';

var t = require('tap');

var test = t.test;

var _require = require('../../lib/errors'),
    createError = _require.createError;

test('Create error with zero parameter', function (t) {
  t.plan(6);
  var NewError = createError('CODE', 'Not available');
  var err = new NewError();
  t.type(err, Error);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: Not available');
  t.equal(err.code, 'CODE');
  t.equal(err.statusCode, 500);
  t.ok(err.stack);
});
test('Create error with 1 parameter', function (t) {
  t.plan(6);
  var NewError = createError('CODE', 'hey %s');
  var err = new NewError('alice');
  t.type(err, Error);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: hey alice');
  t.equal(err.code, 'CODE');
  t.equal(err.statusCode, 500);
  t.ok(err.stack);
});
test('Create error with 2 parameters', function (t) {
  t.plan(6);
  var NewError = createError('CODE', 'hey %s, I like your %s');
  var err = new NewError('alice', 'attitude');
  t.type(err, Error);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: hey alice, I like your attitude');
  t.equal(err.code, 'CODE');
  t.equal(err.statusCode, 500);
  t.ok(err.stack);
});
test('Create error with 3 parameters', function (t) {
  t.plan(6);
  var NewError = createError('CODE', 'hey %s, I like your %s %s');
  var err = new NewError('alice', 'attitude', 'see you');
  t.type(err, Error);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: hey alice, I like your attitude see you');
  t.equal(err.code, 'CODE');
  t.equal(err.statusCode, 500);
  t.ok(err.stack);
});
test('Create error with no statusCode property', function (t) {
  t.plan(6);
  var NewError = createError('CODE', 'hey %s', 0);
  var err = new NewError('dude');
  t.type(err, Error);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: hey dude');
  t.equal(err.code, 'CODE');
  t.notOk(err.statusCode);
  t.ok(err.stack);
});
test('Should throw when error code has no fastify code', function (t) {
  t.plan(1);

  try {
    createError();
  } catch (err) {
    t.equal(err.message, 'Fastify error code must not be empty');
  }
});
test('Should throw when error code has no message', function (t) {
  t.plan(1);

  try {
    createError('code');
  } catch (err) {
    t.equal(err.message, 'Fastify error message must not be empty');
  }
});
test('Create error with different base', function (t) {
  t.plan(7);
  var NewError = createError('CODE', 'hey %s', 500, TypeError);
  var err = new NewError('dude');
  t.type(err, Error);
  t.type(err, TypeError);
  t.equal(err.name, 'FastifyError [CODE]');
  t.equal(err.message, 'CODE: hey dude');
  t.equal(err.code, 'CODE');
  t.equal(err.statusCode, 500);
  t.ok(err.stack);
});
test('Error has appropriate string tag', function (t) {
  t.plan(1);
  var NewError = createError('CODE', 'foo');
  var err = new NewError();
  var str = Object.prototype.toString.call(err);
  t.equal(str, '[object Error]');
});