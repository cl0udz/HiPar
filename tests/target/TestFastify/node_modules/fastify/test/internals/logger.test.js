'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof3 = function _typeof3(obj) { return typeof obj; }; } else { _typeof3 = function _typeof3(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof3(obj); }

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var t = require('tap');

var test = t.test;

var Fastify = require('../..');

var loggerUtils = require('../../lib/logger');

test('time resolution', function (t) {
  t.plan(2);
  t.is(_typeof(loggerUtils.now), 'function');
  t.is(_typeof(loggerUtils.now()), 'number');
});
test('The logger should add a unique id for every request', function (t) {
  var ids = [];
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    t.ok(req.raw.id);
    reply.send({
      id: req.raw.id
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    var queue = new Queue();

    for (var i = 0; i < 10; i++) {
      queue.add(checkId);
    }

    queue.add(function () {
      fastify.close();
      t.end();
    });
  });

  function checkId(done) {
    fastify.inject({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.ok(ids.indexOf(payload.id) === -1, 'the id should not be duplicated');
      ids.push(payload.id);
      done();
    });
  }
});
test('The logger should reuse request id header for req.id', function (t) {
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    t.ok(req.raw.id);
    reply.send({
      id: req.raw.id
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.inject({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port,
      headers: {
        'Request-Id': 'request-id-1'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.ok(payload.id === 'request-id-1', 'the request id from the header should be returned');
      fastify.close();
      t.end();
    });
  });
});

function Queue() {
  this.q = [];
  this.running = false;
}

Queue.prototype.add = function add(job) {
  this.q.push(job);
  if (!this.running) this.run();
};

Queue.prototype.run = function run() {
  var _this = this;

  this.running = true;
  var job = this.q.shift();
  job(function () {
    if (_this.q.length) {
      _this.run();
    } else {
      _this.running = false;
    }
  });
};

test('The logger should error if both stream and file destination are given', function (t) {
  t.plan(2);

  var stream = require('stream').Writable;

  try {
    Fastify({
      logger: {
        level: 'info',
        stream: stream,
        file: '/test'
      }
    });
  } catch (err) {
    t.is(err.code, 'FST_ERR_LOG_INVALID_DESTINATION');
    t.is(err.message, 'FST_ERR_LOG_INVALID_DESTINATION: Cannot specify both logger.stream and logger.file options');
  }
});