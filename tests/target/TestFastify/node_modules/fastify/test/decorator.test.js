'use strict';
/* eslint no-prototype-builtins: 0 */

var t = require('tap');

var test = t.test;

var Fastify = require('..');

var fp = require('fastify-plugin');

var sget = require('simple-get').concat;

var symbols = require('../lib/symbols.js');

test('server methods should exist', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.ok(fastify.decorate);
  t.ok(fastify.hasDecorator);
});
test('server methods should be incapsulated via .register', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorate('test', function () {});
    t.ok(instance.test);
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
});
test('hasServerMethod should check if the given method already exist', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorate('test', function () {});
    t.ok(instance.hasDecorator('test'));
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.hasDecorator('test'));
  });
});
test('decorate should throw if a declared dependency is not present', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    try {
      instance.decorate('test', function () {}, ['dependency']);
      t.fail();
    } catch (e) {
      t.is(e.message, 'FST_ERR_DEC_MISSING_DEPENDENCY: The decorator is missing dependency \'dependency\'.');
    }

    next();
  });
  fastify.ready(function () {
    return t.pass();
  });
}); // issue #777

test('should pass error for missing request decorator', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var plugin = fp(function (instance, opts, next) {
    next();
  }, {
    decorators: {
      request: ['foo']
    }
  });
  fastify.register(plugin).ready(function (err) {
    t.type(err, Error);
    t.match(err, /The decorator 'foo'/);
  });
});
test('decorateReply inside register', function (t) {
  t.plan(12);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorateReply('test', 'test');
    t.ok(instance[symbols.kReply].prototype.test);
    instance.get('/yes', function (req, reply) {
      t.ok(reply.test, 'test exists');
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(reply.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorateReply as plugin (inside .after)', function (t) {
  t.plan(11);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      instance.decorateReply('test', 'test');
      n();
    })).after(function () {
      instance.get('/yes', function (req, reply) {
        t.ok(reply.test);
        reply.send({
          hello: 'world'
        });
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(reply.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorateReply as plugin (outside .after)', function (t) {
  t.plan(11);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      instance.decorateReply('test', 'test');
      n();
    }));
    instance.get('/yes', function (req, reply) {
      t.ok(reply.test);
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(reply.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorateRequest inside register', function (t) {
  t.plan(12);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorateRequest('test', 'test');
    t.ok(instance[symbols.kRequest].prototype.test);
    instance.get('/yes', function (req, reply) {
      t.ok(req.test, 'test exists');
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(req.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorateRequest as plugin (inside .after)', function (t) {
  t.plan(11);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      instance.decorateRequest('test', 'test');
      n();
    })).after(function () {
      instance.get('/yes', function (req, reply) {
        t.ok(req.test);
        reply.send({
          hello: 'world'
        });
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(req.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorateRequest as plugin (outside .after)', function (t) {
  t.plan(11);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.register(fp(function (i, o, n) {
      instance.decorateRequest('test', 'test');
      n();
    }));
    instance.get('/yes', function (req, reply) {
      t.ok(req.test);
      reply.send({
        hello: 'world'
      });
    });
    next();
  });
  fastify.get('/no', function (req, reply) {
    t.notOk(req.test);
    reply.send({
      hello: 'world'
    });
  });
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.server.unref();
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/yes'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/no'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 200);
      t.strictEqual(response.headers['content-length'], '' + body.length);
      t.deepEqual(JSON.parse(body), {
        hello: 'world'
      });
    });
  });
});
test('decorators should be instance separated', function (t) {
  t.plan(1);
  var fastify1 = Fastify();
  var fastify2 = Fastify();
  fastify1.decorate('test', 'foo');
  fastify2.decorate('test', 'foo');
  fastify1.decorateRequest('test', 'foo');
  fastify2.decorateRequest('test', 'foo');
  fastify1.decorateReply('test', 'foo');
  fastify2.decorateReply('test', 'foo');
  t.pass();
});
test('hasRequestDecorator', function (t) {
  var requestDecoratorName = 'my-decorator-name';
  t.test('is a function', function (t) {
    t.plan(1);
    var fastify = Fastify();
    t.ok(fastify.hasRequestDecorator);
  });
  t.test('should check if the given request decoration already exist', function (t) {
    t.plan(2);
    var fastify = Fastify();
    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));
    fastify.decorateRequest(requestDecoratorName, 42);
    t.ok(fastify.hasRequestDecorator(requestDecoratorName));
  });
  t.test('should be plugin encapsulable', function (t) {
    t.plan(4);
    var fastify = Fastify();
    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));
    fastify.register(function (fastify2, opts, next) {
      fastify2.decorateRequest(requestDecoratorName, 42);
      t.ok(fastify2.hasRequestDecorator(requestDecoratorName));
      next();
    });
    t.notOk(fastify.hasRequestDecorator(requestDecoratorName));
    fastify.ready(function () {
      t.notOk(fastify.hasRequestDecorator(requestDecoratorName));
    });
  });
  t.test('should be inherited', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.decorateRequest(requestDecoratorName, 42);
    fastify.register(function (fastify2, opts, next) {
      t.ok(fastify2.hasRequestDecorator(requestDecoratorName));
      next();
    });
    fastify.ready(function () {
      t.ok(fastify.hasRequestDecorator(requestDecoratorName));
    });
  });
  t.end();
});
test('hasReplyDecorator', function (t) {
  var replyDecoratorName = 'my-decorator-name';
  t.test('is a function', function (t) {
    t.plan(1);
    var fastify = Fastify();
    t.ok(fastify.hasReplyDecorator);
  });
  t.test('should check if the given reply decoration already exist', function (t) {
    t.plan(2);
    var fastify = Fastify();
    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));
    fastify.decorateReply(replyDecoratorName, 42);
    t.ok(fastify.hasReplyDecorator(replyDecoratorName));
  });
  t.test('should be plugin encapsulable', function (t) {
    t.plan(4);
    var fastify = Fastify();
    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));
    fastify.register(function (fastify2, opts, next) {
      fastify2.decorateReply(replyDecoratorName, 42);
      t.ok(fastify2.hasReplyDecorator(replyDecoratorName));
      next();
    });
    t.notOk(fastify.hasReplyDecorator(replyDecoratorName));
    fastify.ready(function () {
      t.notOk(fastify.hasReplyDecorator(replyDecoratorName));
    });
  });
  t.test('should be inherited', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.decorateReply(replyDecoratorName, 42);
    fastify.register(function (fastify2, opts, next) {
      t.ok(fastify2.hasReplyDecorator(replyDecoratorName));
      next();
    });
    fastify.ready(function () {
      t.ok(fastify.hasReplyDecorator(replyDecoratorName));
    });
  });
  t.end();
});
test('should register properties via getter/setter objects', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorate('test', {
      getter() {
        return 'a getter';
      }

    });
    t.ok(instance.test);
    t.is(instance.test, 'a getter');
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
});
test('decorateRequest should work with getter/setter', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorateRequest('test', {
      getter() {
        return 'a getter';
      }

    });
    instance.get('/req-decorated-get-set', function (req, res) {
      res.send({
        test: req.test
      });
    });
    next();
  });
  fastify.get('/not-decorated', function (req, res) {
    t.notOk(req.test);
    res.send();
  });
  fastify.ready(function () {
    fastify.inject({
      url: '/req-decorated-get-set'
    }, function (err, res) {
      t.error(err);
      t.deepEqual(JSON.parse(res.payload), {
        test: 'a getter'
      });
    });
    fastify.inject({
      url: '/not-decorated'
    }, function (err, res) {
      t.error(err);
      t.pass();
    });
  });
});
test('decorateReply should work with getter/setter', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorateReply('test', {
      getter() {
        return 'a getter';
      }

    });
    instance.get('/res-decorated-get-set', function (req, res) {
      res.send({
        test: res.test
      });
    });
    next();
  });
  fastify.get('/not-decorated', function (req, res) {
    t.notOk(res.test);
    res.send();
  });
  fastify.ready(function () {
    fastify.inject({
      url: '/res-decorated-get-set'
    }, function (err, res) {
      t.error(err);
      t.deepEqual(JSON.parse(res.payload), {
        test: 'a getter'
      });
    });
    fastify.inject({
      url: '/not-decorated'
    }, function (err, res) {
      t.error(err);
      t.pass();
    });
  });
});
test('should register empty values', function (t) {
  t.plan(2);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.decorate('test', null);
    t.true(instance.hasOwnProperty('test'));
    next();
  });
  fastify.ready(function () {
    t.notOk(fastify.test);
  });
});
test('nested plugins can override things', function (t) {
  t.plan(6);
  var fastify = Fastify();

  var rootFunc = function rootFunc() {};

  fastify.decorate('test', rootFunc);
  fastify.decorateRequest('test', rootFunc);
  fastify.decorateReply('test', rootFunc);
  fastify.register(function (instance, opts, next) {
    var func = function func() {};

    instance.decorate('test', func);
    instance.decorateRequest('test', func);
    instance.decorateReply('test', func);
    t.equal(instance.test, func);
    t.equal(instance[symbols.kRequest].prototype.test, func);
    t.equal(instance[symbols.kReply].prototype.test, func);
    next();
  });
  fastify.ready(function () {
    t.equal(fastify.test, rootFunc);
    t.equal(fastify[symbols.kRequest].prototype.test, rootFunc);
    t.equal(fastify[symbols.kReply].prototype.test, rootFunc);
  });
});
test('a decorator should addSchema to all the encapsulated tree', function (t) {
  t.plan(1);
  var fastify = Fastify();

  var decorator = function decorator(instance, opts, next) {
    instance.decorate('decoratorAddSchema', function (whereAddTheSchema) {
      instance.addSchema({
        $id: 'schema',
        type: 'string'
      });
    });
    next();
  };

  fastify.register(fp(decorator));
  fastify.register(function (instance, opts, next) {
    instance.register(function (subInstance, opts, next) {
      subInstance.decoratorAddSchema();
      next();
    });
    next();
  });
  fastify.ready(t.error);
});