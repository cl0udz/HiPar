'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

var t = require('tap');

var test = t.test;

var fp = require('fastify-plugin');

var httpErrors = require('http-errors');

var sget = require('simple-get').concat;

var errors = require('http-errors');

var split = require('split2');

var Fastify = require('..');

test('default 404', function (t) {
  t.plan(3);
  var test = t.test;
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    test('unsupported method', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port,
        body: {},
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');
      });
    });
    test('unsupported route', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/notSupported',
        body: {},
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8');
      });
    });
  });
});
test('customized 404', function (t) {
  t.plan(5);
  var test = t.test;
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.get('/with-error', function (req, reply) {
    reply.send(new errors.NotFound());
  });
  fastify.get('/with-error-custom-header', function (req, reply) {
    var err = new errors.NotFound();
    err.headers = {
      'x-foo': 'bar'
    };
    reply.send(err);
  });
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send('this was not found');
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    test('unsupported method', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port,
        body: JSON.stringify({
          hello: 'world'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found');
      });
    });
    test('unsupported route', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found');
      });
    });
    test('with error object', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/with-error'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.deepEqual(JSON.parse(body), {
          error: 'Not Found',
          message: 'Not Found',
          statusCode: 404
        });
      });
    });
    test('error object with headers property', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/with-error-custom-header'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(response.headers['x-foo'], 'bar');
        t.deepEqual(JSON.parse(body), {
          error: 'Not Found',
          message: 'Not Found',
          statusCode: 404
        });
      });
    });
  });
});
test('custom header in notFound handler', function (t) {
  t.plan(2);
  var test = t.test;
  var fastify = Fastify();
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).header('x-foo', 'bar').send('this was not found');
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    test('not found with custom header', function (t) {
      t.plan(4);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(response.headers['x-foo'], 'bar');
        t.strictEqual(body.toString(), 'this was not found');
      });
    });
  });
});
test('setting a custom 404 handler multiple times is an error', function (t) {
  t.plan(5);
  t.test('at the root level', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.setNotFoundHandler(function () {});

    try {
      fastify.setNotFoundHandler(function () {});
      t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');
    } catch (err) {
      t.type(err, Error);
      t.strictEqual(err.message, 'Not found handler already set for Fastify instance with prefix: \'/\'');
    }
  });
  t.test('at the plugin level', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.register(function (instance, options, next) {
      instance.setNotFoundHandler(function () {});

      try {
        instance.setNotFoundHandler(function () {});
        t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');
      } catch (err) {
        t.type(err, Error);
        t.strictEqual(err.message, 'Not found handler already set for Fastify instance with prefix: \'/prefix\'');
      }

      next();
    }, {
      prefix: '/prefix'
    });
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.close();
    });
  });
  t.test('at multiple levels', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.register(function (instance, options, next) {
      try {
        instance.setNotFoundHandler(function () {});
        t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');
      } catch (err) {
        t.type(err, Error);
        t.strictEqual(err.message, 'Not found handler already set for Fastify instance with prefix: \'/\'');
      }

      next();
    });
    fastify.setNotFoundHandler(function () {});
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.close();
    });
  });
  t.test('at multiple levels / 2', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.register(function (instance, options, next) {
      instance.setNotFoundHandler(function () {});
      instance.register(function (instance2, options, next) {
        try {
          instance2.setNotFoundHandler(function () {});
          t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');
        } catch (err) {
          t.type(err, Error);
          t.strictEqual(err.message, 'Not found handler already set for Fastify instance with prefix: \'/prefix\'');
        }

        next();
      });
      next();
    }, {
      prefix: '/prefix'
    });
    fastify.setNotFoundHandler(function () {});
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.close();
    });
  });
  t.test('in separate plugins at the same level', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.register(function (instance, options, next) {
      instance.register(function (instance2A, options, next) {
        instance2A.setNotFoundHandler(function () {});
        next();
      });
      instance.register(function (instance2B, options, next) {
        try {
          instance2B.setNotFoundHandler(function () {});
          t.fail('setting multiple 404 handlers at the same prefix encapsulation level should throw');
        } catch (err) {
          t.type(err, Error);
          t.strictEqual(err.message, 'Not found handler already set for Fastify instance with prefix: \'/prefix\'');
        }

        next();
      });
      next();
    }, {
      prefix: '/prefix'
    });
    fastify.setNotFoundHandler(function () {});
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.close();
    });
  });
});
test('encapsulated 404', function (t) {
  t.plan(9);
  var test = t.test;
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send('this was not found');
  });
  fastify.register(function (f, opts, next) {
    f.setNotFoundHandler(function (req, reply) {
      reply.code(404).send('this was not found 2');
    });
    next();
  }, {
    prefix: '/test'
  });
  fastify.register(function (f, opts, next) {
    f.setNotFoundHandler(function (req, reply) {
      reply.code(404).send('this was not found 3');
    });
    next();
  }, {
    prefix: '/test2'
  });
  fastify.register(function (f, opts, next) {
    f.setNotFoundHandler(function (request, reply) {
      reply.code(404).send('this was not found 4');
    });
    next();
  }, {
    prefix: '/test3/'
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    test('root unsupported method', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port,
        body: JSON.stringify({
          hello: 'world'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found');
      });
    });
    test('root insupported route', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found');
      });
    });
    test('unsupported method', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port + '/test',
        body: JSON.stringify({
          hello: 'world'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 2');
      });
    });
    test('unsupported route', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/test/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 2');
      });
    });
    test('unsupported method bis', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port + '/test2',
        body: JSON.stringify({
          hello: 'world'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 3');
      });
    });
    test('unsupported route bis', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/test2/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 3');
      });
    });
    test('unsupported method 3', function (t) {
      t.plan(3);
      sget({
        method: 'PUT',
        url: 'http://localhost:' + fastify.server.address().port + '/test3/',
        body: JSON.stringify({
          hello: 'world'
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 4');
      });
    });
    test('unsupported route 3', function (t) {
      t.plan(3);
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/test3/notSupported'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
        t.strictEqual(body.toString(), 'this was not found 4');
      });
    });
  });
});
test('custom 404 hook and handler context', function (t) {
  t.plan(21);
  var fastify = Fastify();
  fastify.decorate('foo', 42);
  fastify.addHook('onRequest', function (req, res, next) {
    t.strictEqual(this.foo, 42);
    next();
  });
  fastify.addHook('preHandler', function (request, reply, next) {
    t.strictEqual(this.foo, 42);
    next();
  });
  fastify.addHook('onSend', function (request, reply, payload, next) {
    t.strictEqual(this.foo, 42);
    next();
  });
  fastify.addHook('onResponse', function (request, reply, next) {
    t.strictEqual(this.foo, 42);
    next();
  });
  fastify.setNotFoundHandler(function (req, reply) {
    t.strictEqual(this.foo, 42);
    reply.code(404).send('this was not found');
  });
  fastify.register(function (instance, opts, next) {
    instance.decorate('bar', 84);
    instance.addHook('onRequest', function (req, res, next) {
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('preHandler', function (request, reply, next) {
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('onSend', function (request, reply, payload, next) {
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('onResponse', function (request, reply, next) {
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.setNotFoundHandler(function (req, reply) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      reply.code(404).send('encapsulated was not found');
    });
    next();
  }, {
    prefix: '/encapsulated'
  });
  fastify.inject('/not-found', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'this was not found');
  });
  fastify.inject('/encapsulated/not-found', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'encapsulated was not found');
  });
});
test('encapsulated custom 404 without - prefix hook and handler context', function (t) {
  t.plan(13);
  var fastify = Fastify();
  fastify.decorate('foo', 42);
  fastify.register(function (instance, opts, next) {
    instance.decorate('bar', 84);
    instance.addHook('onRequest', function (req, res, next) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('preHandler', function (request, reply, next) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('onSend', function (request, reply, payload, next) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.addHook('onResponse', function (request, reply, next) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      next();
    });
    instance.setNotFoundHandler(function (request, reply) {
      t.strictEqual(this.foo, 42);
      t.strictEqual(this.bar, 84);
      reply.code(404).send('custom not found');
    });
    next();
  });
  fastify.inject('/not-found', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'custom not found');
  });
});
test('run hooks and middleware on default 404', function (t) {
  t.plan(8);
  var fastify = Fastify();
  fastify.addHook('onRequest', function (req, res, next) {
    t.pass('onRequest called');
    next();
  });
  fastify.use(function (req, res, next) {
    t.pass('middleware called');
    next();
  });
  fastify.addHook('preHandler', function (request, reply, next) {
    t.pass('preHandler called');
    next();
  });
  fastify.addHook('onSend', function (request, reply, payload, next) {
    t.pass('onSend called');
    next();
  });
  fastify.addHook('onResponse', function (request, reply, next) {
    t.pass('onResponse called');
    next();
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'PUT',
      url: 'http://localhost:' + fastify.server.address().port,
      body: JSON.stringify({
        hello: 'world'
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('run non-encapsulated plugin hooks and middleware on default 404', function (t) {
  t.plan(7);
  var fastify = Fastify();
  fastify.register(fp(function (instance, options, next) {
    instance.addHook('onRequest', function (req, res, next) {
      t.pass('onRequest called');
      next();
    });
    instance.use(function (req, res, next) {
      t.pass('middleware called');
      next();
    });
    instance.addHook('preHandler', function (request, reply, next) {
      t.pass('preHandler called');
      next();
    });
    instance.addHook('onSend', function (request, reply, payload, next) {
      t.pass('onSend called');
      next();
    });
    instance.addHook('onResponse', function (request, reply, next) {
      t.pass('onResponse called');
      next();
    });
    next();
  }));
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.inject({
    method: 'POST',
    url: '/',
    payload: {
      hello: 'world'
    }
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
});
test('run non-encapsulated plugin hooks and middleware on custom 404', function (t) {
  t.plan(13);
  var fastify = Fastify();
  var plugin = fp(function (instance, opts, next) {
    instance.addHook('onRequest', function (req, res, next) {
      t.pass('onRequest called');
      next();
    });
    instance.use(function (req, res, next) {
      t.pass('middleware called');
      next();
    });
    instance.addHook('preHandler', function (request, reply, next) {
      t.pass('preHandler called');
      next();
    });
    instance.addHook('onSend', function (request, reply, payload, next) {
      t.pass('onSend called');
      next();
    });
    instance.addHook('onResponse', function (request, reply, next) {
      t.pass('onResponse called');
      next();
    });
    next();
  });
  fastify.register(plugin);
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send('this was not found');
  });
  fastify.register(plugin); // Registering plugin after handler also works

  fastify.inject({
    url: '/not-found'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'this was not found');
  });
});
test('run hooks and middleware with encapsulated 404', function (t) {
  t.plan(13);
  var fastify = Fastify();
  fastify.addHook('onRequest', function (req, res, next) {
    t.pass('onRequest called');
    next();
  });
  fastify.use(function (req, res, next) {
    t.pass('middleware called');
    next();
  });
  fastify.addHook('preHandler', function (request, reply, next) {
    t.pass('preHandler called');
    next();
  });
  fastify.addHook('onSend', function (request, reply, payload, next) {
    t.pass('onSend called');
    next();
  });
  fastify.addHook('onResponse', function (request, reply, next) {
    t.pass('onResponse called');
    next();
  });
  fastify.register(function (f, opts, next) {
    f.setNotFoundHandler(function (req, reply) {
      reply.code(404).send('this was not found 2');
    });
    f.addHook('onRequest', function (req, res, next) {
      t.pass('onRequest 2 called');
      next();
    });
    f.use(function (req, res, next) {
      t.pass('middleware 2 called');
      next();
    });
    f.addHook('preHandler', function (request, reply, next) {
      t.pass('preHandler 2 called');
      next();
    });
    f.addHook('onSend', function (request, reply, payload, next) {
      t.pass('onSend 2 called');
      next();
    });
    f.addHook('onResponse', function (request, reply, next) {
      t.pass('onResponse 2 called');
      next();
    });
    next();
  }, {
    prefix: '/test'
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'PUT',
      url: 'http://localhost:' + fastify.server.address().port + '/test',
      body: JSON.stringify({
        hello: 'world'
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('run middlewares on default 404', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.use(function (req, res, next) {
    t.pass('middleware called');
    next();
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'PUT',
      url: 'http://localhost:' + fastify.server.address().port,
      body: JSON.stringify({
        hello: 'world'
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('run middlewares with encapsulated 404', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.use(function (req, res, next) {
    t.pass('middleware called');
    next();
  });
  fastify.register(function (f, opts, next) {
    f.setNotFoundHandler(function (req, reply) {
      reply.code(404).send('this was not found 2');
    });
    f.use(function (req, res, next) {
      t.pass('middleware 2 called');
      next();
    });
    next();
  }, {
    prefix: '/test'
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'PUT',
      url: 'http://localhost:' + fastify.server.address().port + '/test',
      body: JSON.stringify({
        hello: 'world'
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('hooks check 404', function (t) {
  t.plan(13);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.addHook('onSend', function (req, reply, payload, next) {
    t.deepEqual(req.query, {
      foo: 'asd'
    });
    t.ok('called', 'onSend');
    next();
  });
  fastify.addHook('onRequest', function (req, res, next) {
    t.ok('called', 'onRequest');
    next();
  });
  fastify.addHook('onResponse', function (request, reply, next) {
    t.ok('called', 'onResponse');
    next();
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'PUT',
      url: 'http://localhost:' + fastify.server.address().port + '?foo=asd',
      body: JSON.stringify({
        hello: 'world'
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port + '/notSupported?foo=asd'
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('setNotFoundHandler should not suppress duplicated routes checking', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send('this was not found');
  });
  fastify.listen(0, function (err) {
    t.ok(err);
  });
});
test('log debug for 404', function (t) {
  t.plan(1);

  var Writable = require('stream').Writable;

  var logStream = new Writable();
  logStream.logs = [];

  logStream._write = function (chunk, encoding, callback) {
    this.logs.push(chunk.toString());
    callback();
  };

  var fastify = Fastify({
    logger: {
      level: 'trace',
      stream: logStream
    }
  });
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  t.test('log debug', function (t) {
    t.plan(7);
    fastify.inject({
      method: 'GET',
      url: '/not-found'
    }, function (err, response) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
      var INFO_LEVEL = 30;
      t.strictEqual(JSON.parse(logStream.logs[0]).msg, 'incoming request');
      t.strictEqual(JSON.parse(logStream.logs[1]).msg, 'Route GET:/not-found not found');
      t.strictEqual(JSON.parse(logStream.logs[1]).level, INFO_LEVEL);
      t.strictEqual(JSON.parse(logStream.logs[2]).msg, 'request completed');
      t.strictEqual(logStream.logs.length, 3);
    });
  });
});
test('Unknown method', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);

    var handler = function handler() {}; // See https://github.com/fastify/light-my-request/pull/20


    t["throws"](function () {
      return fastify.inject({
        method: 'UNKNWON_METHOD',
        url: '/'
      }, handler);
    }, Error);
    sget({
      method: 'UNKNWON_METHOD',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 400);
      t.strictDeepEqual(JSON.parse(body), {
        error: 'Bad Request',
        message: 'Client Error',
        statusCode: 400
      });
    });
  });
});
test('recognizes errors from the http-errors module', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send(httpErrors.NotFound());
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.statusCode, 404);
      sget('http://localhost:' + fastify.server.address().port, function (err, response, body) {
        t.error(err);
        var obj = JSON.parse(body.toString());
        t.strictDeepEqual(obj, {
          error: 'Not Found',
          message: 'Not Found',
          statusCode: 404
        });
      });
    });
  });
});
test('the default 404 handler can be invoked inside a prefixed plugin', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.get('/path', function (request, reply) {
      reply.send(httpErrors.NotFound());
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject('/v1/path', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictDeepEqual(JSON.parse(res.payload), {
      error: 'Not Found',
      message: 'Not Found',
      statusCode: 404
    });
  });
});
test('an inherited custom 404 handler can be invoked inside a prefixed plugin', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.setNotFoundHandler(function (request, reply) {
    reply.code(404).send('custom handler');
  });
  fastify.register(function (instance, opts, next) {
    instance.get('/path', function (request, reply) {
      reply.send(httpErrors.NotFound());
    });
    next();
  }, {
    prefix: '/v1'
  });
  fastify.inject('/v1/path', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Not Found',
      message: 'Not Found',
      statusCode: 404
    });
  });
});
test('encapsulated custom 404 handler without a prefix is the handler for the entire 404 level', function (t) {
  t.plan(6);
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.setNotFoundHandler(function (request, reply) {
      reply.code(404).send('custom handler');
    });
    next();
  });
  fastify.register(function (instance, opts, next) {
    instance.register(function (instance2, opts, next) {
      instance2.setNotFoundHandler(function (request, reply) {
        reply.code(404).send('custom handler 2');
      });
      next();
    });
    next();
  }, {
    prefix: 'prefixed'
  });
  fastify.inject('/not-found', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'custom handler');
  });
  fastify.inject('/prefixed/not-found', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'custom handler 2');
  });
});
test('cannot set notFoundHandler after binding', function (t) {
  t.plan(2);
  var fastify = Fastify();
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);

    try {
      fastify.setNotFoundHandler(function () {});
      t.fail();
    } catch (e) {
      t.pass();
    }
  });
});
test('404 inside onSend', function (t) {
  t.plan(3);
  var fastify = Fastify();
  var called = false;
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  fastify.addHook('onSend', function (request, reply, payload, next) {
    if (!called) {
      called = true;
      next(new errors.NotFound());
    } else {
      next();
    }
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    sget({
      method: 'GET',
      url: 'http://localhost:' + fastify.server.address().port
    }, function (err, response, body) {
      t.error(err);
      t.strictEqual(response.statusCode, 404);
    });
  });
});
test('Not found on supported method (should return a 404)', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.get('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.inject({
      method: 'POST',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.statusCode, 404);
      sget({
        method: 'POST',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
      });
    });
  });
}); // Return 404 instead of 405 see https://github.com/fastify/fastify/pull/862 for discussion

test('Not found on unsupported method (should return a 404)', function (t) {
  t.plan(5);
  var fastify = Fastify();
  fastify.all('/', function (req, reply) {
    reply.send({
      hello: 'world'
    });
  });
  t.tearDown(fastify.close.bind(fastify));
  fastify.listen(0, function (err) {
    t.error(err);
    fastify.inject({
      method: 'PROPFIND',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.statusCode, 404);
      sget({
        method: 'PROPFIND',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 404);
      });
    });
  });
}); // https://github.com/fastify/fastify/issues/868

test('onSend hooks run when an encapsulated route invokes the notFound handler', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.register(function (instance, options, done) {
    instance.addHook('onSend', function (request, reply, payload, next) {
      t.pass('onSend hook called');
      next();
    });
    instance.get('/', function (request, reply) {
      reply.send(new errors.NotFound());
    });
    done();
  });
  fastify.inject('/', function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
  });
}); // https://github.com/fastify/fastify/issues/713

test('preHandler option for setNotFoundHandler', function (t) {
  t.plan(8);
  t.test('preHandler option', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        req.body.preHandler = true;
        done();
      }
    }, function (req, reply) {
      reply.code(404).send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        preHandler: true,
        hello: 'world'
      });
    });
  });
  t.test('preHandler option should be called after preHandler hook', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.addHook('preHandler', function (req, reply, next) {
      req.body.check = 'a';
      next();
    });
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        req.body.check += 'b';
        done();
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        check: 'ab',
        hello: 'world'
      });
    });
  });
  t.test('preHandler option should be unique per prefix', function (t) {
    t.plan(4);
    var fastify = Fastify();
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        req.body.hello = 'earth';
        done();
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.register(function (i, o, n) {
      i.setNotFoundHandler(function (req, reply) {
        reply.send(req.body);
      });
      n();
    }, {
      prefix: '/no'
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        hello: 'earth'
      });
    });
    fastify.inject({
      method: 'POST',
      url: '/no/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        hello: 'world'
      });
    });
  });
  t.test('preHandler option should handle errors', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        done(new Error('kaboom'));
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.equal(res.statusCode, 500);
      t.deepEqual(payload, {
        message: 'kaboom',
        error: 'Internal Server Error',
        statusCode: 500
      });
    });
  });
  t.test('preHandler option should handle errors with custom status code', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        reply.code(401);
        done(new Error('go away'));
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.equal(res.statusCode, 401);
      t.deepEqual(payload, {
        message: 'go away',
        error: 'Unauthorized',
        statusCode: 401
      });
    });
  });
  t.test('preHandler option could accept an array of functions', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.setNotFoundHandler({
      preHandler: [function (req, reply, done) {
        req.body.preHandler = 'a';
        done();
      }, function (req, reply, done) {
        req.body.preHandler += 'b';
        done();
      }]
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        preHandler: 'ab',
        hello: 'world'
      });
    });
  });
  t.test('preHandler option does not interfere with preHandler', function (t) {
    t.plan(4);
    var fastify = Fastify();
    fastify.addHook('preHandler', function (req, reply, next) {
      req.body.check = 'a';
      next();
    });
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        req.body.check += 'b';
        done();
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.register(function (i, o, n) {
      i.setNotFoundHandler(function (req, reply) {
        reply.send(req.body);
      });
      n();
    }, {
      prefix: '/no'
    });
    fastify.inject({
      method: 'post',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        check: 'ab',
        hello: 'world'
      });
    });
    fastify.inject({
      method: 'post',
      url: '/no/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        check: 'a',
        hello: 'world'
      });
    });
  });
  t.test('preHandler option should keep the context', function (t) {
    t.plan(3);
    var fastify = Fastify();
    fastify.decorate('foo', 42);
    fastify.setNotFoundHandler({
      preHandler: function preHandler(req, reply, done) {
        t.strictEqual(this.foo, 42);
        this.foo += 1;
        req.body.foo = this.foo;
        done();
      }
    }, function (req, reply) {
      reply.send(req.body);
    });
    fastify.inject({
      method: 'POST',
      url: '/not-found',
      payload: {
        hello: 'world'
      }
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        foo: 43,
        hello: 'world'
      });
    });
  });
});
test('reply.notFound invoked the notFound handler', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send(new Error('kaboom'));
  });
  fastify.get('/', function (req, reply) {
    reply.callNotFound();
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Not Found',
      message: 'kaboom',
      statusCode: 404
    });
  });
});
test('The custom error handler should be invoked after the custom not found handler', function (t) {
  t.plan(6);
  var fastify = Fastify();
  var order = [1, 2];
  fastify.setErrorHandler(function (err, req, reply) {
    t.is(order.shift(), 2);
    t.type(err, Error);
    reply.send(err);
  });
  fastify.setNotFoundHandler(function (req, reply) {
    t.is(order.shift(), 1);
    reply.code(404).send(new Error('kaboom'));
  });
  fastify.get('/', function (req, reply) {
    reply.callNotFound();
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.deepEqual(JSON.parse(res.payload), {
      error: 'Not Found',
      message: 'kaboom',
      statusCode: 404
    });
  });
});
test('If the custom not found handler does not use an Error, the custom error handler should not be called', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.setErrorHandler(function (_err, req, reply) {
    t.fail('Should not be called');
  });
  fastify.setNotFoundHandler(function (req, reply) {
    reply.code(404).send('kaboom');
  });
  fastify.get('/', function (req, reply) {
    reply.callNotFound();
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.statusCode, 404);
    t.strictEqual(res.payload, 'kaboom');
  });
});
test('preValidation option', function (t) {
  t.plan(3);
  var fastify = Fastify();
  fastify.decorate('foo', true);
  fastify.setNotFoundHandler({
    preValidation: function preValidation(req, reply, done) {
      t["true"](this.foo);
      done();
    }
  }, function (req, reply) {
    reply.code(404).send(req.body);
  });
  fastify.inject({
    method: 'POST',
    url: '/not-found',
    payload: {
      hello: 'world'
    }
  }, function (err, res) {
    t.error(err);
    var payload = JSON.parse(res.payload);
    t.deepEqual(payload, {
      hello: 'world'
    });
  });
});
t.test('preValidation option could accept an array of functions', function (t) {
  t.plan(4);
  var fastify = Fastify();
  fastify.setNotFoundHandler({
    preValidation: [function (req, reply, done) {
      t.ok('called');
      done();
    }, function (req, reply, done) {
      t.ok('called');
      done();
    }]
  }, function (req, reply) {
    reply.send(req.body);
  });
  fastify.inject({
    method: 'POST',
    url: '/not-found',
    payload: {
      hello: 'world'
    }
  }, function (err, res) {
    t.error(err);
    var payload = JSON.parse(res.payload);
    t.deepEqual(payload, {
      hello: 'world'
    });
  });
});
test('Should fail to invoke callNotFound inside a 404 handler', function (t) {
  t.plan(5);
  var fastify = null;
  var logStream = split(JSON.parse);

  try {
    fastify = Fastify({
      logger: {
        stream: logStream,
        level: 'warn'
      }
    });
  } catch (e) {
    t.fail();
  }

  fastify.setNotFoundHandler(function (req, reply) {
    reply.callNotFound();
  });
  fastify.get('/', function (req, reply) {
    reply.callNotFound();
  });
  logStream.once('data', function (line) {
    t.is(line.msg, 'Trying to send a NotFound error inside a 404 handler. Sending basic 404 response.');
    t.is(line.level, 40);
  });
  fastify.inject({
    url: '/',
    method: 'GET'
  }, function (err, res) {
    t.error(err);
    t.is(res.statusCode, 404);
    t.is(res.payload, '404 Not Found');
  });
});