'use strict';

var sget = require('simple-get').concat;

var Ajv = require('ajv');

var Joi = require('joi');

module.exports.payloadMethod = function (method, t) {
  var test = t.test;

  var fastify = require('..')();

  var upMethod = method.toUpperCase();
  var loMethod = method.toLowerCase();
  var opts = {
    schema: {
      body: {
        type: 'object',
        properties: {
          hello: {
            type: 'integer'
          }
        }
      }
    }
  };
  var ajv = new Ajv({
    coerceTypes: true,
    removeAdditional: true
  });
  var optsWithCustomValidator = {
    schema: {
      body: {
        type: 'object',
        properties: {
          hello: {
            type: 'integer'
          }
        },
        additionalProperties: false
      }
    },
    schemaCompiler: function schemaCompiler(schema) {
      return ajv.compile(schema);
    }
  };
  var optsWithJoiValidator = {
    schema: {
      body: Joi.object().keys({
        hello: Joi.string().required()
      }).required()
    },
    schemaCompiler: function schemaCompiler(schema) {
      return schema.validate.bind(schema);
    }
  };
  test(`${upMethod} can be created`, function (t) {
    t.plan(1);

    try {
      fastify[loMethod]('/', opts, function (req, reply) {
        reply.send(req.body);
      });
      fastify[loMethod]('/custom', optsWithCustomValidator, function (req, reply) {
        reply.send(req.body);
      });
      fastify[loMethod]('/joi', optsWithJoiValidator, function (req, reply) {
        reply.send(req.body);
      });
      fastify.register(function (fastify2, opts, next) {
        fastify2.setSchemaCompiler(function schema(schema) {
          return function (body) {
            return {
              error: new Error('From custom schema compiler!')
            };
          };
        });
        var withInstanceCustomCompiler = {
          schema: {
            body: {
              type: 'object',
              properties: {},
              additionalProperties: false
            }
          }
        };
        fastify2[loMethod]('/plugin', withInstanceCustomCompiler, function (req, reply) {
          return reply.send({
            hello: 'never here!'
          });
        });
        var optsWithCustomValidator2 = {
          schema: {
            body: {
              type: 'object',
              properties: {},
              additionalProperties: false
            }
          },
          schemaCompiler: function schemaCompiler(schema) {
            return function (body) {
              return {
                error: new Error('Always fail!')
              };
            };
          }
        };
        fastify2[loMethod]('/plugin/custom', optsWithCustomValidator2, function (req, reply) {
          return reply.send({
            hello: 'never here!'
          });
        });
        next();
      });
      t.pass();
    } catch (e) {
      t.fail();
    }
  });
  fastify.listen(0, function (err) {
    if (err) {
      t.error(err);
    }

    fastify.server.unref();
    test(`${upMethod} - correctly replies`, function (t) {
      if (upMethod === 'HEAD') {
        t.plan(2);
        sget({
          method: upMethod,
          url: 'http://localhost:' + fastify.server.address().port
        }, function (err, response) {
          t.error(err);
          t.strictEqual(response.statusCode, 200);
        });
      } else {
        t.plan(3);
        sget({
          method: upMethod,
          url: 'http://localhost:' + fastify.server.address().port,
          body: {
            hello: 42
          },
          json: true
        }, function (err, response, body) {
          t.error(err);
          t.strictEqual(response.statusCode, 200);
          t.deepEqual(body, {
            hello: 42
          });
        });
      }
    });
    test(`${upMethod} - 400 on bad parameters`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port,
        body: {
          hello: 'world'
        },
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 400);
        t.deepEqual(body, {
          error: 'Bad Request',
          message: 'body.hello should be integer',
          statusCode: 400
        });
      });
    });
    test(`${upMethod} - input-validation coerce`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port,
        body: {
          hello: '42'
        },
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(body, {
          hello: 42
        });
      });
    });
    test(`${upMethod} - input-validation custom schema compiler`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port + '/custom',
        body: {
          hello: '42',
          world: 55
        },
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(body, {
          hello: 42
        });
      });
    });
    test(`${upMethod} - input-validation joi schema compiler ok`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port + '/joi',
        body: {
          hello: '42'
        },
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.deepEqual(body, {
          hello: 42
        });
      });
    });
    test(`${upMethod} - input-validation joi schema compiler ko`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port + '/joi',
        body: {
          hello: 44
        },
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 400);
        t.deepEqual(body, {
          error: 'Bad Request',
          message: 'child "hello" fails because ["hello" must be a string]',
          statusCode: 400
        });
      });
    });
    test(`${upMethod} - input-validation instance custom schema compiler encapsulated`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port + '/plugin',
        body: {},
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 400);
        t.deepEqual(body, {
          error: 'Bad Request',
          message: 'From custom schema compiler!',
          statusCode: '400'
        });
      });
    });
    test(`${upMethod} - input-validation custom schema compiler encapsulated`, function (t) {
      t.plan(3);
      sget({
        method: upMethod,
        url: 'http://localhost:' + fastify.server.address().port + '/plugin/custom',
        body: {},
        json: true
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 400);
        t.deepEqual(body, {
          error: 'Bad Request',
          message: 'Always fail!',
          statusCode: '400'
        });
      });
    });
  });
};