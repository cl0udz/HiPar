'use strict';

var _require = require('tap'),
    test = _require.test;

var Fastify = require('..');

test('Fastify should throw on wrong options', function (t) {
  t.plan(2);

  try {
    Fastify('lol');
    t.fail();
  } catch (e) {
    t.is(e.message, 'Options must be an object');
    t.pass();
  }
});
test('Fastify should throw on multiple assignment to the same route', function (t) {
  t.plan(1);
  var fastify = Fastify();
  fastify.get('/', function () {});
  fastify.get('/', function () {});
  fastify.ready(function (err) {
    t.is(err.message, "Method 'GET' already declared for route '/'");
  });
});
test('Fastify should throw for an invalid schema, printing the error route - headers', function (t) {
  t.plan(2);
  var badSchema = {
    type: 'object',
    properties: {
      bad: {
        type: 'bad-type'
      }
    }
  };
  var fastify = Fastify();
  fastify.get('/', {
    schema: {
      headers: badSchema
    }
  }, function () {});
  fastify.get('/not-loaded', {
    schema: {
      headers: badSchema
    }
  }, function () {});
  fastify.ready(function (err) {
    t.is(err.code, 'FST_ERR_SCH_BUILD');
    t.isLike(err.message, /Failed building the schema for GET: \//);
  });
});
test('Fastify should throw for an invalid schema, printing the error route - body', function (t) {
  t.plan(2);
  var badSchema = {
    type: 'object',
    properties: {
      bad: {
        type: 'bad-type'
      }
    }
  };
  var fastify = Fastify();
  fastify.register(function (instance, opts, next) {
    instance.post('/form', {
      schema: {
        body: badSchema
      }
    }, function () {});
    next();
  }, {
    prefix: 'hello'
  });
  fastify.ready(function (err) {
    t.is(err.code, 'FST_ERR_SCH_BUILD');
    t.isLike(err.message, /Failed building the schema for POST: \/hello\/form/);
  });
});
test('Should throw on unsupported method', function (t) {
  t.plan(1);
  var fastify = Fastify();

  try {
    fastify.route({
      method: 'TROLL',
      url: '/',
      schema: {},
      handler: function handler(req, reply) {}
    });
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw on missing handler', function (t) {
  t.plan(1);
  var fastify = Fastify();

  try {
    fastify.route({
      method: 'GET',
      url: '/'
    });
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw if one method is unsupported', function (t) {
  var fastify = Fastify();
  t.plan(1);

  try {
    fastify.route({
      method: ['GET', 'TROLL'],
      url: '/',
      schema: {},
      handler: function handler(req, reply) {}
    });
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw on duplicate content type parser', function (t) {
  t.plan(1);
  var fastify = Fastify();

  function customParser(req, done) {
    done(null, '');
  }

  fastify.addContentTypeParser('application/qq', customParser);

  try {
    fastify.addContentTypeParser('application/qq', customParser);
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw on duplicate decorator', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var fooObj = {};
  fastify.decorate('foo', fooObj);

  try {
    fastify.decorate('foo', fooObj);
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should not throw on duplicate decorator encapsulation', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var foo2Obj = {};
  fastify.decorate('foo2', foo2Obj);
  fastify.register(function (fastify, opts, next) {
    t.notThrow(function () {
      fastify.decorate('foo2', foo2Obj);
    });
    next();
  });
  fastify.ready();
});
test('Should throw on duplicate request decorator', function (t) {
  t.plan(2);
  var fooObj = {};
  var fastify = Fastify();
  fastify.decorateRequest('foo', fooObj);

  try {
    fastify.decorateRequest('foo', fooObj);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_DEC_ALREADY_PRESENT');
    t.is(e.message, "FST_ERR_DEC_ALREADY_PRESENT: The decorator 'foo' has already been added!");
  }
});
test('Should throw if request decorator dependencies are not met', function (t) {
  t.plan(2);
  var fastify = Fastify();
  var fooObj = {};

  try {
    fastify.decorateRequest('bar', fooObj, ['world']);
    t.fail();
  } catch (e) {
    t.is(e.code, 'FST_ERR_DEC_MISSING_DEPENDENCY');
    t.is(e.message, "FST_ERR_DEC_MISSING_DEPENDENCY: The decorator is missing dependency 'world'.");
  }
});
test('Should throw on duplicate reply decorator', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var fooObj = {};
  fastify.decorateReply('foo', fooObj);

  try {
    fastify.decorateReply('foo', fooObj);
    t.fail();
  } catch (e) {
    t.ok(/has already been added/.test(e.message));
  }
});
test('Should throw if reply decorator dependencies are not met', function (t) {
  t.plan(1);
  var fastify = Fastify();
  var fooObj = {};

  try {
    fastify.decorateReply('bar', fooObj, ['world']);
    t.fail();
  } catch (e) {
    t.ok(/missing dependency/.test(e.message));
  }
});
test('Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object', function (t) {
  t.plan(5);
  var fastify = Fastify();

  try {
    fastify.get('/foo/1', '');
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/2', 1);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/3', []);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/4', undefined);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/5', null);
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw if handler as the third parameter to the shortcut method is missing and the second parameter is not a function and also not an object', function (t) {
  t.plan(5);
  var fastify = Fastify();

  try {
    fastify.get('/foo/1', '');
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/2', 1);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/3', []);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/4', undefined);
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/5', null);
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw if there is handler function as the third parameter to the shortcut method and options as the second parameter is not an object', function (t) {
  t.plan(5);
  var fastify = Fastify();

  try {
    fastify.get('/foo/1', '', function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/2', 1, function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/3', [], function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/4', undefined, function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }

  try {
    fastify.get('/foo/5', null, function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }
});
test('Should throw if found duplicate handler as the third parameter to the shortcut method and in options', function (t) {
  t.plan(1);
  var fastify = Fastify();

  try {
    fastify.get('/foo/abc', {
      handler: function handler(req, res) {}
    }, function (req, res) {});
    t.fail();
  } catch (e) {
    t.pass();
  }
});