'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.immediate");

require("core-js/modules/web.timers");

require("regenerator-runtime/runtime");

var sget = require('simple-get').concat;

var Fastify = require('..');

var split = require('split2');

var pino = require('pino');

var statusCodes = require('http').STATUS_CODES;

var sleep = function sleep(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

var opts = {
  schema: {
    response: {
      '2xx': {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};

function asyncTest(t) {
  var test = t.test;
  test('async await', function (t) {
    t.plan(11);
    var fastify = Fastify();

    try {
      fastify.get('/', opts, function awaitMyFunc(req, reply) {
        return regeneratorRuntime.async(function awaitMyFunc$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(sleep(200));

              case 2:
                return _context.abrupt("return", {
                  hello: 'world'
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        });
      });
      t.pass();
    } catch (e) {
      t.fail();
    }

    try {
      fastify.get('/no-await', opts, function _callee(req, reply) {
        return regeneratorRuntime.async(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", {
                  hello: 'world'
                });

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        });
      });
      t.pass();
    } catch (e) {
      t.fail();
    }

    fastify.listen(0, function (err) {
      t.error(err);
      fastify.server.unref();
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-length'], '' + body.length);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/no-await'
      }, function (err, response, body) {
        t.error(err);
        t.strictEqual(response.statusCode, 200);
        t.strictEqual(response.headers['content-length'], '' + body.length);
        t.deepEqual(JSON.parse(body), {
          hello: 'world'
        });
      });
    });
  });
  test('ignore the result of the promise if reply.send is called beforehand (undefined)', function (t) {
    t.plan(4);
    var server = Fastify();
    var payload = {
      hello: 'world'
    };
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              reply.send(payload);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      });
    });
    t.tearDown(server.close.bind(server));
    server.listen(0, function (err) {
      t.error(err);
      sget({
        method: 'GET',
        url: 'http://localhost:' + server.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.deepEqual(payload, JSON.parse(body));
        t.strictEqual(res.statusCode, 200);
      });
    });
  });
  test('ignore the result of the promise if reply.send is called beforehand (object)', function (t) {
    t.plan(4);
    var server = Fastify();
    var payload = {
      hello: 'world2'
    };
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              reply.send(payload);
              return _context4.abrupt("return", {
                hello: 'world'
              });

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      });
    });
    t.tearDown(server.close.bind(server));
    server.listen(0, function (err) {
      t.error(err);
      sget({
        method: 'GET',
        url: 'http://localhost:' + server.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.deepEqual(payload, JSON.parse(body));
        t.strictEqual(res.statusCode, 200);
      });
    });
  });
  test('server logs an error if reply.send is called and a value is returned via async/await', function (t) {
    var lines = ['incoming request', 'request completed', 'Reply already sent'];
    t.plan(lines.length + 2);
    var splitStream = split(JSON.parse);
    splitStream.on('data', function (line) {
      t.is(line.msg, lines.shift());
    });
    var logger = pino(splitStream);
    var fastify = Fastify({
      logger: logger
    });
    fastify.get('/', function _callee2(req, reply) {
      return regeneratorRuntime.async(function _callee2$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              reply.send({
                hello: 'world'
              });
              return _context5.abrupt("return", {
                hello: 'world2'
              });

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        hello: 'world'
      });
    });
  });
  test('ignore the result of the promise if reply.send is called beforehand (undefined)', function (t) {
    t.plan(4);
    var server = Fastify();
    var payload = {
      hello: 'world'
    };
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              reply.send(payload);

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      });
    });
    t.tearDown(server.close.bind(server));
    server.listen(0, function (err) {
      t.error(err);
      sget({
        method: 'GET',
        url: 'http://localhost:' + server.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.deepEqual(payload, JSON.parse(body));
        t.strictEqual(res.statusCode, 200);
      });
    });
  });
  test('ignore the result of the promise if reply.send is called beforehand (object)', function (t) {
    t.plan(4);
    var server = Fastify();
    var payload = {
      hello: 'world2'
    };
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              reply.send(payload);
              return _context7.abrupt("return", {
                hello: 'world'
              });

            case 2:
            case "end":
              return _context7.stop();
          }
        }
      });
    });
    t.tearDown(server.close.bind(server));
    server.listen(0, function (err) {
      t.error(err);
      sget({
        method: 'GET',
        url: 'http://localhost:' + server.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.deepEqual(payload, JSON.parse(body));
        t.strictEqual(res.statusCode, 200);
      });
    });
  });
  test('await reply if we will be calling reply.send in the future', function (t) {
    var lines = ['incoming request', 'request completed'];
    t.plan(lines.length + 2);
    var splitStream = split(JSON.parse);
    splitStream.on('data', function (line) {
      t.is(line.msg, lines.shift());
    });
    var server = Fastify({
      logger: {
        stream: splitStream
      }
    });
    var payload = {
      hello: 'world'
    };
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              setImmediate(function () {
                reply.send(payload);
              });
              _context8.next = 3;
              return regeneratorRuntime.awrap(reply);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      });
    });
    server.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        hello: 'world'
      });
    });
  });
  test('await reply if we will be calling reply.send in the future (error case)', function (t) {
    var lines = ['incoming request', 'kaboom', 'request completed'];
    t.plan(lines.length + 2);
    var splitStream = split(JSON.parse);
    splitStream.on('data', function (line) {
      t.is(line.msg, lines.shift());
    });
    var server = Fastify({
      logger: {
        stream: splitStream
      }
    });
    server.get('/', function awaitMyFunc(req, reply) {
      return regeneratorRuntime.async(function awaitMyFunc$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              setImmediate(function () {
                reply.send(new Error('kaboom'));
              });
              _context9.next = 3;
              return regeneratorRuntime.awrap(reply);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      });
    });
    server.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.equal(res.statusCode, 500);
    });
  });
  test('support reply decorators with await', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.decorateReply('wow', function () {
      var _this = this;

      setImmediate(function () {
        _this.send({
          hello: 'world'
        });
      });
    });
    fastify.get('/', function _callee3(req, reply) {
      return regeneratorRuntime.async(function _callee3$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return regeneratorRuntime.awrap(sleep(1));

            case 2:
              reply.wow();

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      var payload = JSON.parse(res.payload);
      t.deepEqual(payload, {
        hello: 'world'
      });
    });
  });
  test('support 204', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.get('/', function _callee4(req, reply) {
      return regeneratorRuntime.async(function _callee4$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              reply.code(204);

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.equal(res.statusCode, 204);
    });
  });
  test('inject async await', function _callee5(t) {
    var fastify, res;
    return regeneratorRuntime.async(function _callee5$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            t.plan(1);
            fastify = Fastify();
            fastify.get('/', function (req, reply) {
              reply.send({
                hello: 'world'
              });
            });
            _context12.prev = 3;
            _context12.next = 6;
            return regeneratorRuntime.awrap(fastify.inject({
              method: 'GET',
              url: '/'
            }));

          case 6:
            res = _context12.sent;
            t.deepEqual({
              hello: 'world'
            }, JSON.parse(res.payload));
            _context12.next = 13;
            break;

          case 10:
            _context12.prev = 10;
            _context12.t0 = _context12["catch"](3);
            t.fail(_context12.t0);

          case 13:
          case "end":
            return _context12.stop();
        }
      }
    }, null, null, [[3, 10]]);
  });
  test('inject async await - when the server is up', function _callee6(t) {
    var fastify, res, res2;
    return regeneratorRuntime.async(function _callee6$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            t.plan(2);
            fastify = Fastify();
            fastify.get('/', function (req, reply) {
              reply.send({
                hello: 'world'
              });
            });
            _context13.prev = 3;
            _context13.next = 6;
            return regeneratorRuntime.awrap(fastify.inject({
              method: 'GET',
              url: '/'
            }));

          case 6:
            res = _context13.sent;
            t.deepEqual({
              hello: 'world'
            }, JSON.parse(res.payload));
            _context13.next = 13;
            break;

          case 10:
            _context13.prev = 10;
            _context13.t0 = _context13["catch"](3);
            t.fail(_context13.t0);

          case 13:
            _context13.next = 15;
            return regeneratorRuntime.awrap(sleep(200));

          case 15:
            _context13.prev = 15;
            _context13.next = 18;
            return regeneratorRuntime.awrap(fastify.inject({
              method: 'GET',
              url: '/'
            }));

          case 18:
            res2 = _context13.sent;
            t.deepEqual({
              hello: 'world'
            }, JSON.parse(res2.payload));
            _context13.next = 25;
            break;

          case 22:
            _context13.prev = 22;
            _context13.t1 = _context13["catch"](15);
            t.fail(_context13.t1);

          case 25:
          case "end":
            return _context13.stop();
        }
      }
    }, null, null, [[3, 10], [15, 22]]);
  });
  test('async await plugin', function _callee8(t) {
    var fastify, res;
    return regeneratorRuntime.async(function _callee8$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            t.plan(1);
            fastify = Fastify();
            fastify.register(function _callee7(fastify, opts) {
              return regeneratorRuntime.async(function _callee7$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      fastify.get('/', function (req, reply) {
                        reply.send({
                          hello: 'world'
                        });
                      });
                      _context14.next = 3;
                      return regeneratorRuntime.awrap(sleep(200));

                    case 3:
                    case "end":
                      return _context14.stop();
                  }
                }
              });
            });
            _context15.prev = 3;
            _context15.next = 6;
            return regeneratorRuntime.awrap(fastify.inject({
              method: 'GET',
              url: '/'
            }));

          case 6:
            res = _context15.sent;
            t.deepEqual({
              hello: 'world'
            }, JSON.parse(res.payload));
            _context15.next = 13;
            break;

          case 10:
            _context15.prev = 10;
            _context15.t0 = _context15["catch"](3);
            t.fail(_context15.t0);

          case 13:
          case "end":
            return _context15.stop();
        }
      }
    }, null, null, [[3, 10]]);
  });
  test('does not call reply.send() twice if 204 reponse is already sent', function (t) {
    t.plan(2);
    var fastify = Fastify();
    fastify.get('/', function _callee9(req, reply) {
      return regeneratorRuntime.async(function _callee9$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              reply.code(204).send();

              reply.send = function () {
                throw new Error('reply.send() was called twice');
              };

            case 2:
            case "end":
              return _context16.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.equal(res.statusCode, 204);
    });
  });
  test('error is logged because promise was fulfilled with undefined', function (t) {
    t.plan(3);
    var fastify = null;
    var stream = split(JSON.parse);

    try {
      fastify = Fastify({
        logger: {
          stream: stream,
          level: 'error'
        }
      });
    } catch (e) {
      t.fail();
    }

    t.tearDown(fastify.close.bind(fastify));
    fastify.get('/', function _callee10(req, reply) {
      return regeneratorRuntime.async(function _callee10$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              reply.code(200);

            case 1:
            case "end":
              return _context17.stop();
          }
        }
      });
    });
    stream.once('data', function (line) {
      t.strictEqual(line.msg, 'Promise may not be fulfilled with \'undefined\' when statusCode is not 204');
    });
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.server.unref();
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/',
        timeout: 500
      }, function (err, res, body) {
        t.is(err.message, 'Request timed out');
      });
    });
  });
  test('error is not logged because promise was fulfilled with undefined but statusCode 204 was set', function (t) {
    t.plan(3);
    var fastify = null;
    var stream = split(JSON.parse);

    try {
      fastify = Fastify({
        logger: {
          stream: stream,
          level: 'error'
        }
      });
    } catch (e) {
      t.fail();
    }

    t.tearDown(fastify.close.bind(fastify));
    fastify.get('/', function _callee11(req, reply) {
      return regeneratorRuntime.async(function _callee11$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              reply.code(204);

            case 1:
            case "end":
              return _context18.stop();
          }
        }
      });
    });
    stream.once('data', function (line) {
      t.fail('should not log an error');
    });
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.server.unref();
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.strictEqual(res.statusCode, 204);
      });
    });
  });
  test('error is not logged because promise was fulfilled with undefined but response was sent before promise resolution', function (t) {
    t.plan(4);
    var fastify = null;
    var stream = split(JSON.parse);
    var payload = {
      hello: 'world'
    };

    try {
      fastify = Fastify({
        logger: {
          stream: stream,
          level: 'error'
        }
      });
    } catch (e) {
      t.fail();
    }

    t.tearDown(fastify.close.bind(fastify));
    fastify.get('/', function _callee12(req, reply) {
      return regeneratorRuntime.async(function _callee12$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              reply.send(payload);

            case 1:
            case "end":
              return _context19.stop();
          }
        }
      });
    });
    stream.once('data', function (line) {
      t.fail('should not log an error');
    });
    fastify.listen(0, function (err) {
      t.error(err);
      fastify.server.unref();
      sget({
        method: 'GET',
        url: 'http://localhost:' + fastify.server.address().port + '/'
      }, function (err, res, body) {
        t.error(err);
        t.strictEqual(res.statusCode, 200);
        t.deepEqual(payload, JSON.parse(body));
      });
    });
  });
  test('Thrown Error instance sets HTTP status code', function (t) {
    t.plan(3);
    var fastify = Fastify();
    var err = new Error('winter is coming');
    err.statusCode = 418;
    fastify.get('/', function _callee13(req, reply) {
      return regeneratorRuntime.async(function _callee13$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              throw err;

            case 1:
            case "end":
              return _context20.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (error, res) {
      t.error(error);
      t.strictEqual(res.statusCode, 418);
      t.deepEqual({
        error: statusCodes['418'],
        message: err.message,
        statusCode: 418
      }, JSON.parse(res.payload));
    });
  });
  test('customErrorHandler support', function (t) {
    t.plan(4);
    var fastify = Fastify();
    fastify.get('/', function _callee14(req, reply) {
      var error;
      return regeneratorRuntime.async(function _callee14$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              error = new Error('ouch');
              error.statusCode = 400;
              throw error;

            case 3:
            case "end":
              return _context21.stop();
          }
        }
      });
    });
    fastify.setErrorHandler(function _callee15(err) {
      var error;
      return regeneratorRuntime.async(function _callee15$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              t.is(err.message, 'ouch');
              error = new Error('kaboom');
              error.statusCode = 401;
              throw error;

            case 4:
            case "end":
              return _context22.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.statusCode, 401);
      t.deepEqual({
        error: statusCodes['401'],
        message: 'kaboom',
        statusCode: 401
      }, JSON.parse(res.payload));
    });
  });
  test('customErrorHandler support without throwing', function (t) {
    t.plan(4);
    var fastify = Fastify();
    fastify.get('/', function _callee16(req, reply) {
      var error;
      return regeneratorRuntime.async(function _callee16$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              error = new Error('ouch');
              error.statusCode = 400;
              throw error;

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      });
    });
    fastify.setErrorHandler(function _callee17(err, req, reply) {
      return regeneratorRuntime.async(function _callee17$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              t.is(err.message, 'ouch');
              reply.code(401).send('kaboom');
              reply.send = t.fail.bind(t, 'should not be called');

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      });
    });
    fastify.inject({
      method: 'GET',
      url: '/'
    }, function (err, res) {
      t.error(err);
      t.strictEqual(res.statusCode, 401);
      t.deepEqual('kaboom', res.payload);
    });
  });
}

module.exports = asyncTest;