'use strict';

var Fastify = require('..');

var S = require('fluent-schema');

function fluentSchemaTest(t) {
  var test = t.test;
  test('fluent-schema generate a valid JSON Schema in "$ref-way"', function (t) {
    t.plan(1);
    var fastify = new Fastify();
    var addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required().valueOf();
    var commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema).valueOf();
    fastify.addSchema(commonSchemas);
    var bodyJsonSchema = S.object().prop('residence', S.ref('https://fastify/demo#address')).required().prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required().valueOf();
    var schema = {
      body: bodyJsonSchema
    };
    fastify.post('/the/url', {
      schema: schema
    }, function () {});
    fastify.ready(t.error);
  });
  test('fluent-schema generate a valid JSON Schema in "replace-way"', function (t) {
    t.plan(1);
    var fastify = new Fastify();
    var sharedAddressSchema = {
      $id: 'sharedAddress',
      type: 'object',
      required: ['line1', 'country', 'city', 'zipcode'],
      properties: {
        line1: {
          type: 'string'
        },
        line2: {
          type: 'string'
        },
        country: {
          type: 'string'
        },
        city: {
          type: 'string'
        },
        zipcode: {
          type: 'string'
        }
      }
    };
    fastify.addSchema(sharedAddressSchema);
    var bodyJsonSchema = {
      type: 'object',
      properties: {
        vacation: 'sharedAddress#'
      }
    };
    var schema = {
      body: bodyJsonSchema
    };
    fastify.post('/the/url', {
      schema: schema
    }, function () {});
    fastify.ready(t.error);
  });
  test('fluent-schema mix-up of "$ref-way" and "replace-way"', function (t) {
    t.plan(1);
    var fastify = new Fastify();
    var addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required().valueOf();
    var commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema).valueOf();
    var sharedAddressSchema = {
      $id: 'sharedAddress',
      type: 'object',
      required: ['line1', 'country', 'city', 'zipcode'],
      properties: {
        line1: {
          type: 'string'
        },
        line2: {
          type: 'string'
        },
        country: {
          type: 'string'
        },
        city: {
          type: 'string'
        },
        zipcode: {
          type: 'string'
        }
      }
    };
    fastify.addSchema(commonSchemas);
    fastify.addSchema(sharedAddressSchema);
    var bodyJsonSchema = S.object().prop('residence', S.ref('https://fastify/demo#address')).required().prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required().valueOf(); // add the key with the string value to use shared schema in "replace-way"

    bodyJsonSchema.properties.vacation = 'sharedAddress#';
    var schema = {
      body: bodyJsonSchema
    };
    fastify.post('/the/url', {
      schema: schema
    }, function () {});
    fastify.ready(t.error);
  });
  test('Should call valueOf internally', function (t) {
    t.plan(1);
    var fastify = new Fastify();
    var addressSchema = S.object().id('#address').prop('line1').required().prop('line2').prop('country').required().prop('city').required().prop('zipcode').required();
    var commonSchemas = S.object().id('https://fastify/demo').definition('addressSchema', addressSchema);
    fastify.addSchema(commonSchemas);
    fastify.route({
      method: 'POST',
      url: '/query',
      handler: function handler() {},
      schema: {
        query: S.object().prop('hello', S.string()).required(),
        body: S.object().prop('hello', S.string()).required(),
        params: S.object().prop('hello', S.string()).required(),
        headers: S.object().prop('hello', S.string()).required(),
        response: {
          200: S.object().prop('hello', S.string()).required(),
          201: S.object().prop('hello', S.string()).required()
        }
      }
    });
    fastify.route({
      method: 'POST',
      url: '/querystring',
      handler: function handler() {},
      schema: {
        querystring: S.object().prop('hello', S.string()).required(),
        body: S.object().prop('hello', S.string()).required(),
        params: S.object().prop('hello', S.string()).required(),
        headers: S.object().prop('hello', S.string()).required(),
        response: {
          200: S.object().prop('hello', S.string()).required(),
          201: S.object().prop('hello', S.string()).required()
        }
      }
    });
    fastify.ready(t.error);
  });
}

module.exports = fluentSchemaTest;