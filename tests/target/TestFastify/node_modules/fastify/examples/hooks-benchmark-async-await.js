'use strict';

var fastify = require('../fastify')();

var opts = {
  schema: {
    response: {
      200: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};

function promiseFunction(resolve) {
  setImmediate(resolve);
}

function asyncHook() {
  return regeneratorRuntime.async(function asyncHook$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(new Promise(promiseFunction));

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
}

fastify.addHook('onRequest', asyncHook).addHook('onRequest', asyncHook).addHook('preHandler', asyncHook).addHook('preHandler', asyncHook).addHook('preHandler', asyncHook).addHook('onSend', asyncHook);
fastify.get('/', opts, function (request, reply) {
  reply.send({
    hello: 'world'
  });
});
fastify.listen(3000, function (err) {
  if (err) {
    throw err;
  }

  console.log(`server listening on ${fastify.server.address().port}`);
});