'use strict';

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

var fastify = require('../fastify')();

var schema = {
  schema: {
    response: {
      200: {
        type: 'object',
        properties: {
          hello: {
            type: 'string'
          }
        }
      }
    }
  }
};

function result() {
  return Promise.resolve({
    hello: 'world'
  });
}

fastify.get('/await', schema, function _callee(req, reply) {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          reply.header('Content-Type', 'application/json').code(200);
          return _context.abrupt("return", result());

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
}).get('/', schema, function _callee2(req, reply) {
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          reply.header('Content-Type', 'application/json').code(200);
          return _context2.abrupt("return", {
            hello: 'world'
          });

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
});
fastify.listen(3000, function (err) {
  if (err) throw err;
  console.log("server listening on ".concat(fastify.server.address().port));
});