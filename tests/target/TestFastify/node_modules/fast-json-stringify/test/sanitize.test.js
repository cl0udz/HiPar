'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

var _properties;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var t = require('tap');

var build = require('..');

var stringify = build({
  title: 'Example Schema',
  type: 'object',
  properties: (_properties = {
    firstName: {
      type: 'string'
    },
    lastName: {
      type: 'string'
    },
    age: {
      description: 'Age in years"',
      type: 'integer'
    }
  }, _defineProperty(_properties, function () {
    return "phra'&& process.exit(1) ||'phra";
  }(), {}), _defineProperty(_properties, "now", {
    type: 'string'
  }), _defineProperty(_properties, "reg", {
    type: 'string',
    "default": 'a\'&& process.exit(1) ||\''
  }), _defineProperty(_properties, "obj", {
    type: 'object',
    properties: {
      bool: {
        type: 'boolean'
      }
    }
  }), _defineProperty(_properties, '"\'w00t', {
    type: 'string',
    "default": '"\'w00t'
  }), _defineProperty(_properties, "arr", {
    type: 'array',
    items: {
      type: 'object',
      properties: {
        'phra\' && process.exit(1)//': {
          type: 'number'
        },
        str: {
          type: 'string'
        }
      }
    }
  }), _properties),
  required: ['now'],
  patternProperties: {
    '.*foo$': {
      type: 'string'
    },
    test: {
      type: 'number'
    },
    'phra\'/ && process.exit(1) && /\'': {
      type: 'number'
    },
    '"\'w00t.*////': {
      type: 'number'
    }
  },
  additionalProperties: {
    type: 'string'
  }
});
var obj = {
  firstName: 'Matteo',
  lastName: 'Collina',
  age: 32,
  now: new Date(),
  foo: 'hello"',
  bar: "world'",
  'fuzz"': 42,
  "me'": 42,
  numfoo: 42,
  test: 42,
  strtest: '23',
  arr: [{
    'phra\' && process.exit(1)//': 42
  }],
  obj: {
    bool: true
  },
  notmatch: 'valar morghulis',
  notmatchobj: {
    a: true
  },
  notmatchnum: 42
}; // pass if it does not crash

var json = stringify(obj);
JSON.parse(json);
var stringify2 = build({
  title: 'Example Schema',
  type: 'object',
  patternProperties: {
    '"\'w00t.*////': {
      type: 'number'
    }
  }
});
t.deepEqual(JSON.parse(stringify2({
  '"\'phra////': 42,
  asd: 42
})), {});
var stringify3 = build({
  title: 'Example Schema',
  type: 'object',
  properties: {
    "\"phra\\'&&(console.log(42))//||'phra": {}
  }
}); // this verifies the escaping

JSON.parse(stringify3({
  '"phra\'&&(console.log(42))//||\'phra': 42
}));
var stringify4 = build({
  title: 'Example Schema',
  type: 'object',
  properties: {
    '"\\\\\\\\\'w00t': {
      type: 'string',
      "default": '"\'w00t'
    }
  }
});
t.deepEqual(JSON.parse(stringify4({})), {
  '"\\\\\\\\\'w00t': '"\'w00t'
});
t.pass('no crashes');