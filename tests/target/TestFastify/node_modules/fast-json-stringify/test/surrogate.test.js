'use strict';

var test = require('tap').test;

var validator = require('is-my-json-valid');

var build = require('..');

test('render a string with surrogate pairs as JSON:test 1', function (t) {
  t.plan(2);
  var schema = {
    title: 'surrogate',
    type: 'string'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify('𝌆');
  t.equal(output, '"𝌆"');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render a string with surrogate pairs as JSON: test 2', function (t) {
  t.plan(2);
  var schema = {
    title: 'long',
    type: 'string'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify('\uD834\uDF06');
  t.equal(output, '"𝌆"');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render a string with Unpaired surrogate code as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'surrogate',
    type: 'string'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify('\uDF06\uD834');
  t.equal(output, JSON.stringify('\uDF06\uD834'));
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render a string with lone surrogate code as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'surrogate',
    type: 'string'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify('\uDEAD');
  t.equal(output, JSON.stringify('\uDEAD'));
  t.ok(validate(JSON.parse(output)), 'valid schema');
});