'use strict';

var _require = require('tap'),
    test = _require.test;

var build = require('..');

test('object with multiple types field', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with multiple types field',
    type: 'object',
    properties: {
      str: {
        anyOf: [{
          type: 'string'
        }, {
          type: 'boolean'
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      str: 'string'
    });
    t.is(value, '{"str":"string"}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value = stringify({
      str: true
    });

    t.is(_value, '{"str":true}');
  } catch (e) {
    t.fail();
  }
});
test('object with field of type object or null', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with field of type object or null',
    type: 'object',
    properties: {
      prop: {
        anyOf: [{
          type: 'object',
          properties: {
            str: {
              type: 'string'
            }
          }
        }, {
          type: 'null'
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      prop: null
    });
    t.is(value, '{"prop":null}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value2 = stringify({
      prop: {
        str: 'string'
      }
    });

    t.is(_value2, '{"prop":{"str":"string"}}');
  } catch (e) {
    t.fail();
  }
});
test('object with field of type object or array', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with field of type object or array',
    type: 'object',
    properties: {
      prop: {
        anyOf: [{
          type: 'object',
          properties: {},
          additionalProperties: true
        }, {
          type: 'array',
          items: {
            type: 'string'
          }
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      prop: {
        str: 'string'
      }
    });
    t.is(value, '{"prop":{"str":"string"}}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value3 = stringify({
      prop: ['string']
    });

    t.is(_value3, '{"prop":["string"]}');
  } catch (e) {
    t.fail();
  }
});
test('object with field of type string and coercion disable ', function (t) {
  t.plan(1);
  var schema = {
    title: 'object with field of type string',
    type: 'object',
    properties: {
      str: {
        anyOf: [{
          type: 'string'
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      str: 1
    });
    t.is(value, '{"str":null}');
  } catch (e) {
    t.fail();
  }
});
test('object with field of type string and coercion enable ', function (t) {
  t.plan(1);
  var schema = {
    title: 'object with field of type string',
    type: 'object',
    properties: {
      str: {
        anyOf: [{
          type: 'string'
        }]
      }
    }
  };
  var options = {
    ajv: {
      coerceTypes: true
    }
  };
  var stringify = build(schema, options);

  try {
    var value = stringify({
      str: 1
    });
    t.is(value, '{"str":"1"}');
  } catch (e) {
    t.fail();
  }
});
test('object with field with type union of multiple objects', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with anyOf property value containing objects',
    type: 'object',
    properties: {
      anyOfSchema: {
        anyOf: [{
          type: 'object',
          properties: {
            baz: {
              type: 'number'
            }
          },
          required: ['baz']
        }, {
          type: 'object',
          properties: {
            bar: {
              type: 'string'
            }
          },
          required: ['bar']
        }]
      }
    },
    required: ['anyOfSchema']
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      anyOfSchema: {
        baz: 5
      }
    });
    t.is(value, '{"anyOfSchema":{"baz":5}}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value4 = stringify({
      anyOfSchema: {
        bar: 'foo'
      }
    });

    t.is(_value4, '{"anyOfSchema":{"bar":"foo"}}');
  } catch (e) {
    t.fail();
  }
});
test('null value in schema', function (t) {
  t.plan(0);
  var schema = {
    title: 'schema with null child',
    type: 'string',
    nullable: true,
    "enum": [null]
  };

  try {
    build(schema);
  } catch (e) {
    t.fail();
  }
});