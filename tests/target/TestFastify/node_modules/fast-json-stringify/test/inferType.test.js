'use strict';

var test = require('tap').test;

var validator = require('is-my-json-valid');

var build = require('..');

function buildTest(schema, toStringify) {
  test("render a ".concat(schema.title, " as JSON"), function (t) {
    t.plan(5);
    var validate = validator(schema);
    var stringify = build(schema);
    var stringifyUgly = build(schema, {
      uglify: true
    });
    var output = stringify(toStringify);
    var outputUglify = stringifyUgly(toStringify);
    t.deepEqual(JSON.parse(output), toStringify);
    t.deepEqual(JSON.parse(outputUglify), toStringify);
    t.equal(output, JSON.stringify(toStringify));
    t.equal(outputUglify, JSON.stringify(toStringify));
    t.ok(validate(JSON.parse(output)), 'valid schema');
  });
}

buildTest({
  title: 'infer type object by keyword',
  // 'type': 'object',
  properties: {
    name: {
      type: 'string'
    }
  }
}, {
  name: 'foo'
});
buildTest({
  title: 'infer type of nested object by keyword',
  // 'type': 'object',
  properties: {
    more: {
      description: 'more properties',
      // 'type': 'object',
      properties: {
        something: {
          type: 'string'
        }
      }
    }
  }
}, {
  more: {
    something: 'else'
  }
});
buildTest({
  title: 'infer type array by keyword',
  type: 'object',
  properties: {
    ids: {
      // 'type': 'array',
      items: {
        type: 'string'
      }
    }
  }
}, {
  ids: ['test']
});
buildTest({
  title: 'infer type string by keyword',
  type: 'object',
  properties: {
    name: {
      // 'type': 'string',
      maxLength: 3
    }
  }
}, {
  name: 'foo'
});
buildTest({
  title: 'infer type number by keyword',
  type: 'object',
  properties: {
    age: {
      // 'type': 'number',
      maximum: 18
    }
  }
}, {
  age: 18
});