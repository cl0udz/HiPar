'use strict';

var test = require('tap').test;

var validator = require('is-my-json-valid');

var proxyquire = require('proxyquire');

var build = proxyquire('..', {
  "long": null
});
test('render an integer as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'integer',
    type: 'integer'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify(1615);
  t.equal(output, '1615');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an object with an integer as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with integer',
    type: 'object',
    properties: {
      id: {
        type: 'integer'
      }
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify({
    id: 1615
  });
  t.equal(output, '{"id":1615}');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an array with an integer as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'array with integer',
    type: 'array',
    items: {
      type: 'integer'
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify([1615]);
  t.equal(output, '[1615]');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an object with an additionalProperty of type integer as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with integer',
    type: 'object',
    additionalProperties: {
      type: 'integer'
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify({
    num: 1615
  });
  t.equal(output, '{"num":1615}');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});