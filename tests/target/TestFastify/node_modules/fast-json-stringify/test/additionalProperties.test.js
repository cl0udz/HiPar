'use strict';

var test = require('tap').test;

var build = require('..');

test('additionalProperties', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'additionalProperties',
    type: 'object',
    properties: {
      str: {
        type: 'string'
      }
    },
    additionalProperties: {
      type: 'string'
    }
  });
  var obj = {
    str: 'test',
    foo: 42,
    ofoo: true,
    foof: 'string',
    objfoo: {
      a: true
    }
  };
  t.equal('{"foo":"42","ofoo":"true","foof":"string","objfoo":"[object Object]","str":"test"}', stringify(obj));
});
test('additionalProperties should not change properties', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'patternProperties should not change properties',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    },
    additionalProperties: {
      type: 'number'
    }
  });
  var obj = {
    foo: '42',
    ofoo: 42
  };
  t.equal('{"ofoo":42,"foo":"42"}', stringify(obj));
});
test('additionalProperties should not change properties and patternProperties', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'patternProperties should not change properties',
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    },
    patternProperties: {
      foo: {
        type: 'string'
      }
    },
    additionalProperties: {
      type: 'number'
    }
  });
  var obj = {
    foo: '42',
    ofoo: 42,
    test: '42'
  };
  t.equal('{"ofoo":"42","test":42,"foo":"42"}', stringify(obj));
});
test('additionalProperties set to true, use of fast-safe-stringify', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check string coerce',
    type: 'object',
    properties: {},
    additionalProperties: true
  });
  var obj = {
    foo: true,
    ofoo: 42,
    arrfoo: ['array', 'test'],
    objfoo: {
      a: 'world'
    }
  };
  t.equal('{"foo":true,"ofoo":42,"arrfoo":["array","test"],"objfoo":{"a":"world"}}', stringify(obj));
});
test('additionalProperties - string coerce', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check string coerce',
    type: 'object',
    properties: {},
    additionalProperties: {
      type: 'string'
    }
  });
  var obj = {
    foo: true,
    ofoo: 42,
    arrfoo: ['array', 'test'],
    objfoo: {
      a: 'world'
    }
  };
  t.equal('{"foo":"true","ofoo":"42","arrfoo":"array,test","objfoo":"[object Object]"}', stringify(obj));
});
test('additionalProperties - number skip', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check number coerce',
    type: 'object',
    properties: {},
    additionalProperties: {
      type: 'number'
    }
  });
  var obj = {
    foo: true,
    ofoo: '42',
    xfoo: 'string',
    arrfoo: [1, 2],
    objfoo: {
      num: 42
    }
  };
  t.equal(stringify(obj), '{"foo":1,"ofoo":42}');
});
test('additionalProperties - boolean coerce', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check boolean coerce',
    type: 'object',
    properties: {},
    additionalProperties: {
      type: 'boolean'
    }
  });
  var obj = {
    foo: 'true',
    ofoo: 0,
    arrfoo: [1, 2],
    objfoo: {
      a: true
    }
  };
  t.equal(stringify(obj), '{"foo":true,"ofoo":false,"arrfoo":true,"objfoo":true}');
});
test('additionalProperties - object coerce', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check object coerce',
    type: 'object',
    properties: {},
    additionalProperties: {
      type: 'object',
      properties: {
        answer: {
          type: 'number'
        }
      }
    }
  });
  var obj = {
    objfoo: {
      answer: 42
    }
  };
  t.equal('{"objfoo":{"answer":42}}', stringify(obj));
});
test('additionalProperties - array coerce', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'check array coerce',
    type: 'object',
    properties: {},
    additionalProperties: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  });
  var obj = {
    foo: 'true',
    ofoo: 0,
    arrfoo: [1, 2],
    objfoo: {
      tyrion: 'lannister'
    }
  };
  t.equal('{"foo":["t","r","u","e"],"ofoo":[],"arrfoo":["1","2"],"objfoo":[]}', stringify(obj));
});
test('nested additionalProperties', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'additionalProperties',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        ap: {
          type: 'object',
          additionalProperties: {
            type: 'string'
          }
        }
      }
    }
  });
  var obj = [{
    ap: {
      value: 'string'
    }
  }];
  t.equal('[{"ap":{"value":"string"}}]', stringify(obj));
});
test('very nested additionalProperties', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'additionalProperties',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        ap: {
          type: 'object',
          properties: {
            nested: {
              type: 'object',
              properties: {
                moarNested: {
                  type: 'object',
                  properties: {
                    "finally": {
                      type: 'object',
                      additionalProperties: {
                        type: 'string'
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  });
  var obj = [{
    ap: {
      nested: {
        moarNested: {
          "finally": {
            value: 'str'
          }
        }
      }
    }
  }];
  t.equal('[{"ap":{"nested":{"moarNested":{"finally":{"value":"str"}}}}}]', stringify(obj));
});
test('nested additionalProperties set to true', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'nested additionalProperties=true',
    type: 'object',
    properties: {
      ap: {
        type: 'object',
        additionalProperties: true
      }
    }
  });
  var obj = {
    ap: {
      value: 'string',
      someNumber: 42
    }
  };
  t.equal('{"ap":{"value":"string","someNumber":42}}', stringify(obj));
});
test('field passed to fastSafeStringify as undefined should be removed', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'nested additionalProperties=true',
    type: 'object',
    properties: {
      ap: {
        type: 'object',
        additionalProperties: true
      }
    }
  });
  var obj = {
    ap: {
      value: 'string',
      someNumber: undefined
    }
  };
  t.equal('{"ap":{"value":"string"}}', stringify(obj));
});