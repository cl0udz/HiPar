'use strict';

var test = require('tap').test;

var validator = require('is-my-json-valid');

var Long = require('long');

var build = require('..');

test('render a long as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'long',
    type: 'integer'
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify(Long.fromString('18446744073709551615', true));
  t.equal(output, '18446744073709551615');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an object with long as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with long',
    type: 'object',
    properties: {
      id: {
        type: 'integer'
      }
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify({
    id: Long.fromString('18446744073709551615', true)
  });
  t.equal(output, '{"id":18446744073709551615}');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an array with long as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'array with long',
    type: 'array',
    items: {
      type: 'integer'
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify([Long.fromString('18446744073709551615', true)]);
  t.equal(output, '[18446744073709551615]');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});
test('render an object with a long additionalProperty as JSON', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with long',
    type: 'object',
    additionalProperties: {
      type: 'integer'
    }
  };
  var validate = validator(schema);
  var stringify = build(schema);
  var output = stringify({
    num: Long.fromString('18446744073709551615', true)
  });
  t.equal(output, '{"num":18446744073709551615}');
  t.ok(validate(JSON.parse(output)), 'valid schema');
});