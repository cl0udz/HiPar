'use strict';

var test = require('tap').test;

var validator = require('is-my-json-valid');

var build = require('..');

function buildTest(schema, toStringify) {
  test("render a ".concat(schema.title, " as JSON"), function (t) {
    t.plan(5);
    var validate = validator(schema);
    var stringify = build(schema);
    var stringifyUgly = build(schema, {
      uglify: true
    });
    var output = stringify(toStringify);
    var outputUglify = stringifyUgly(toStringify);
    t.deepEqual(JSON.parse(output), toStringify);
    t.deepEqual(JSON.parse(outputUglify), toStringify);
    t.equal(output, JSON.stringify(toStringify));
    t.equal(outputUglify, JSON.stringify(toStringify));
    t.ok(validate(JSON.parse(output)), 'valid schema');
  });
}

buildTest({
  title: 'string array',
  type: 'object',
  properties: {
    ids: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  }
}, {
  ids: ['test']
});
buildTest({
  title: 'number array',
  type: 'object',
  properties: {
    ids: {
      type: 'array',
      items: {
        type: 'number'
      }
    }
  }
}, {
  ids: [1]
});
buildTest({
  title: 'mixed array',
  type: 'object',
  properties: {
    ids: {
      type: 'array',
      items: [{
        type: 'null'
      }, {
        type: 'string'
      }, {
        type: 'integer'
      }, {
        type: 'number'
      }, {
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          a: {
            type: 'string'
          }
        }
      }, {
        type: 'array',
        items: {
          type: 'string'
        }
      }]
    }
  }
}, {
  ids: [null, 'test', 1, 1.1, true, {
    a: 'test'
  }, ['test']]
});
buildTest({
  title: 'repeated types',
  type: 'object',
  properties: {
    ids: {
      type: 'array',
      items: [{
        type: 'number'
      }, {
        type: 'number'
      }]
    }
  }
}, {
  ids: [1, 2]
});
buildTest({
  title: 'pattern properties array',
  type: 'object',
  properties: {
    args: {
      type: 'array',
      items: [{
        type: 'object',
        patternProperties: {
          '.*': {
            type: 'string'
          }
        }
      }, {
        type: 'object',
        patternProperties: {
          '.*': {
            type: 'number'
          }
        }
      }]
    }
  }
}, {
  args: [{
    a: 'test'
  }, {
    b: 1
  }]
});
test('invalid items throw', function (t) {
  t.plan(1);
  var schema = {
    type: 'object',
    properties: {
      args: {
        type: 'array',
        items: [{
          type: 'object',
          patternProperties: {
            '.*': {
              type: 'string'
            }
          }
        }]
      }
    }
  };
  var stringify = build(schema);
  t["throws"](function () {
    return stringify({
      args: ['invalid']
    });
  });
});