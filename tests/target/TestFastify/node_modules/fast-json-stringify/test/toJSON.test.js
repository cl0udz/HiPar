'use strict';

require("core-js/modules/es.function.name");

require("core-js/modules/es.function.name");

var test = require('tap').test;

var build = require('..');

test('use toJSON method on object types', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    type: 'object',
    properties: {
      productName: {
        type: 'string'
      }
    }
  });
  var object = {
    product: {
      name: 'cola'
    },
    toJSON: function toJSON() {
      return {
        productName: this.product.name
      };
    }
  };
  t.equal('{"productName":"cola"}', stringify(object));
});
test('use toJSON method on nested object types', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple array',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        productName: {
          type: 'string'
        }
      }
    }
  });
  var array = [{
    product: {
      name: 'cola'
    },
    toJSON: function toJSON() {
      return {
        productName: this.product.name
      };
    }
  }, {
    product: {
      name: 'sprite'
    },
    toJSON: function toJSON() {
      return {
        productName: this.product.name
      };
    }
  }];
  t.equal('[{"productName":"cola"},{"productName":"sprite"}]', stringify(array));
});
test('not use toJSON if does not exist', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    type: 'object',
    properties: {
      product: {
        type: 'object',
        properties: {
          name: {
            type: 'string'
          }
        }
      }
    }
  });
  var object = {
    product: {
      name: 'cola'
    }
  };
  t.equal('{"product":{"name":"cola"}}', stringify(object));
});
test('not fail on null object declared nullable', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    type: 'object',
    nullable: true,
    properties: {
      product: {
        type: 'object',
        properties: {
          name: {
            type: 'string'
          }
        }
      }
    }
  });
  t.equal('null', stringify(null));
});
test('not fail on null sub-object declared nullable', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    type: 'object',
    properties: {
      product: {
        nullable: true,
        type: 'object',
        properties: {
          name: {
            type: 'string'
          }
        }
      }
    }
  });
  var object = {
    product: null
  };
  t.equal('{"product":null}', stringify(object));
});
test('throw an error on non nullable null sub-object', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    type: 'object',
    properties: {
      product: {
        nullable: false,
        type: 'object',
        properties: {
          name: {
            type: 'string'
          }
        }
      }
    }
  });
  var object = {
    product: null
  };
  t["throws"](function () {
    stringify(object);
  });
});
test('throw an error on non nullable null object', function (t) {
  t.plan(1);
  var stringify = build({
    title: 'simple object',
    nullable: false,
    type: 'object',
    properties: {
      product: {
        nullable: false,
        type: 'object',
        properties: {
          name: {
            type: 'string'
          }
        }
      }
    }
  });
  t["throws"](function () {
    stringify(null);
  });
});