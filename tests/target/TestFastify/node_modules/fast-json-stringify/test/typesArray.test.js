'use strict';

require("core-js/modules/es.date.to-string");

var test = require('tap').test;

var build = require('..');

test('possibly nullable integer primitive alternative', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with multi-type nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['integer']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: 4
    });
    t.is(value, '{"data":4}');
  } catch (e) {
    t.fail();
  }
});
test('possibly nullable number primitive alternative', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with multi-type nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['number']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: 4
    });
    t.is(value, '{"data":4}');
  } catch (e) {
    t.fail();
  }
});
test('possibly nullable integer primitive alternative with null value', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with multi-type nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['integer']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: null
    });
    t.is(value, '{"data":0}');
  } catch (e) {
    t.fail();
  }
});
test('possibly nullable number primitive alternative with null value', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with multi-type nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['number']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: null
    });
    t.is(value, '{"data":0}');
  } catch (e) {
    t.fail();
  }
});
test('nullable integer primitive', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['integer', 'null']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: 4
    });
    t.is(value, '{"data":4}');
  } catch (e) {
    t.fail();
  }
});
test('nullable number primitive', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['number', 'null']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: 4
    });
    t.is(value, '{"data":4}');
  } catch (e) {
    t.fail();
  }
});
test('nullable primitive with null value', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['integer', 'null']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: null
    });
    t.is(value, '{"data":null}');
  } catch (e) {
    t.fail();
  }
});
test('nullable number primitive with null value', function (t) {
  t.plan(1);
  var schema = {
    title: 'simple object with nullable primitive',
    type: 'object',
    properties: {
      data: {
        type: ['number', 'null']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      data: null
    });
    t.is(value, '{"data":null}');
  } catch (e) {
    t.fail();
  }
});
test('possibly null object with multi-type property', function (t) {
  t.plan(3);
  var schema = {
    title: 'simple object with multi-type property',
    type: 'object',
    properties: {
      objectOrNull: {
        type: ['object', 'null'],
        properties: {
          stringOrNumber: {
            type: ['string', 'number']
          }
        }
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      objectOrNull: {
        stringOrNumber: 'string'
      }
    });
    t.is(value, '{"objectOrNull":{"stringOrNumber":"string"}}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value = stringify({
      objectOrNull: {
        stringOrNumber: 42
      }
    });

    t.is(_value, '{"objectOrNull":{"stringOrNumber":42}}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value2 = stringify({
      objectOrNull: null
    });

    t.is(_value2, '{"objectOrNull":null}');
  } catch (e) {
    t.fail();
  }
});
test('object with possibly null array of multiple types', function (t) {
  t.plan(5);
  var schema = {
    title: 'object with array of multiple types',
    type: 'object',
    properties: {
      arrayOfStringsAndNumbers: {
        type: ['array', 'null'],
        items: {
          type: ['string', 'number', 'null']
        }
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      arrayOfStringsAndNumbers: null
    });
    t.is(value, '{"arrayOfStringsAndNumbers":null}');
  } catch (e) {
    console.log(e);
    t.fail();
  }

  try {
    var _value3 = stringify({
      arrayOfStringsAndNumbers: ['string1', 'string2']
    });

    t.is(_value3, '{"arrayOfStringsAndNumbers":["string1","string2"]}');
  } catch (e) {
    console.log(e);
    t.fail();
  }

  try {
    var _value4 = stringify({
      arrayOfStringsAndNumbers: [42, 7]
    });

    t.is(_value4, '{"arrayOfStringsAndNumbers":[42,7]}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value5 = stringify({
      arrayOfStringsAndNumbers: ['string1', 42, 7, 'string2']
    });

    t.is(_value5, '{"arrayOfStringsAndNumbers":["string1",42,7,"string2"]}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value6 = stringify({
      arrayOfStringsAndNumbers: ['string1', null, 42, 7, 'string2', null]
    });

    t.is(_value6, '{"arrayOfStringsAndNumbers":["string1",null,42,7,"string2",null]}');
  } catch (e) {
    t.fail();
  }
});
test('object with tuple of multiple types', function (t) {
  t.plan(2);
  var schema = {
    title: 'object with array of multiple types',
    type: 'object',
    properties: {
      fixedTupleOfStringsAndNumbers: {
        type: 'array',
        items: [{
          type: 'string'
        }, {
          type: 'number'
        }, {
          type: ['string', 'number']
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      fixedTupleOfStringsAndNumbers: ['string1', 42, 7]
    });
    t.is(value, '{"fixedTupleOfStringsAndNumbers":["string1",42,7]}');
  } catch (e) {
    console.log(e);
    t.fail();
  }

  try {
    var _value7 = stringify({
      fixedTupleOfStringsAndNumbers: ['string1', 42, 'string2']
    });

    t.is(_value7, '{"fixedTupleOfStringsAndNumbers":["string1",42,"string2"]}');
  } catch (e) {
    console.log(e);
    t.fail();
  }
});
test('object with anyOf and multiple types', function (t) {
  t.plan(3);
  var schema = {
    title: 'object with anyOf and multiple types',
    type: 'object',
    properties: {
      objectOrBoolean: {
        anyOf: [{
          type: 'object',
          properties: {
            stringOrNumber: {
              type: ['string', 'number']
            }
          }
        }, {
          type: 'boolean'
        }]
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      objectOrBoolean: {
        stringOrNumber: 'string'
      }
    });
    t.is(value, '{"objectOrBoolean":{"stringOrNumber":"string"}}');
  } catch (e) {
    console.log(e);
    t.fail();
  }

  try {
    var _value8 = stringify({
      objectOrBoolean: {
        stringOrNumber: 42
      }
    });

    t.is(_value8, '{"objectOrBoolean":{"stringOrNumber":42}}');
  } catch (e) {
    t.fail();
  }

  try {
    var _value9 = stringify({
      objectOrBoolean: true
    });

    t.is(_value9, '{"objectOrBoolean":true}');
  } catch (e) {
    t.fail();
  }
});
test('string type array can handle dates', function (t) {
  t.plan(1);
  var schema = {
    type: 'object',
    properties: {
      date: {
        type: ['string']
      }
    }
  };
  var stringify = build(schema);

  try {
    var value = stringify({
      date: new Date('2018-04-20T07:52:31.017Z')
    });
    t.is(value, '{"date":"2018-04-20T07:52:31.017Z"}');
  } catch (e) {
    t.fail();
  }
});