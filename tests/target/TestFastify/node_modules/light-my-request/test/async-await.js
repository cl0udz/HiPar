'use strict';

function asyncAwaitTest(t, inject) {
  t.plan(3);
  t.test('basic async await', function _callee(t) {
    var dispatch, res;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dispatch = function dispatch(req, res) {
              res.writeHead(200, {
                'Content-Type': 'text/plain'
              });
              res.end('hello');
            };

            _context.prev = 1;
            _context.next = 4;
            return regeneratorRuntime.awrap(inject(dispatch, {
              method: 'GET',
              url: 'http://example.com:8080/hello'
            }));

          case 4:
            res = _context.sent;
            t.equal(res.payload, 'hello');
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);
            t.fail(_context.t0);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[1, 8]]);
  });
  t.test('basic async await (errored)', function _callee2(t) {
    var dispatch;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dispatch = function dispatch(req, res) {
              res.connection.destroy(new Error('kaboom'));
            };

            _context2.prev = 1;
            _context2.next = 4;
            return regeneratorRuntime.awrap(inject(dispatch, {
              method: 'GET',
              url: 'http://example.com:8080/hello'
            }));

          case 4:
            t.fail('should throw');
            _context2.next = 10;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](1);
            t.ok(_context2.t0);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[1, 7]]);
  });
  t.test('chainable api with async await', function _callee3(t) {
    var dispatch, chain, res;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            dispatch = function dispatch(req, res) {
              res.writeHead(200, {
                'Content-Type': 'text/plain'
              });
              res.end('hello');
            };

            _context3.prev = 1;
            chain = inject(dispatch).get('http://example.com:8080/hello');
            _context3.next = 5;
            return regeneratorRuntime.awrap(chain.end());

          case 5:
            res = _context3.sent;
            t.equal(res.payload, 'hello');
            _context3.next = 12;
            break;

          case 9:
            _context3.prev = 9;
            _context3.t0 = _context3["catch"](1);
            t.fail(_context3.t0);

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[1, 9]]);
  });
}

module.exports = asyncAwaitTest;