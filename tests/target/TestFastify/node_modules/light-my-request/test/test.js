'use strict';

var t = require('tap');

var test = t.test;

var _require = require('readable-stream'),
    Readable = _require.Readable;

var qs = require('querystring');

var fs = require('fs');

var zlib = require('zlib');

var http = require('http');

var inject = require('../index');

var parseURL = require('../lib/parseURL');

var FormData = require('form-data');

var httpMethods = ['delete', 'get', 'head', 'options', 'patch', 'post', 'put', 'trace'];
test('returns non-chunked payload', function (t) {
  t.plan(7);
  var output = 'example.com:8080|/hello';

  var dispatch = function dispatch(req, res) {
    res.statusMessage = 'Super';
    res.setHeader('x-extra', 'hello');
    res.writeHead(200, {
      'Content-Type': 'text/plain',
      'Content-Length': output.length
    });
    res.end(req.headers.host + '|' + req.url);
  };

  inject(dispatch, 'http://example.com:8080/hello', function (err, res) {
    t.error(err);
    t.equal(res.statusCode, 200);
    t.equal(res.statusMessage, 'Super');
    t.ok(res.headers.date);
    t.deepEqual(res.headers, {
      date: res.headers.date,
      connection: 'keep-alive',
      'x-extra': 'hello',
      'content-type': 'text/plain',
      'content-length': output.length
    });
    t.equal(res.payload, output);
    t.equal(res.rawPayload.toString(), 'example.com:8080|/hello');
  });
});
test('returns single buffer payload', function (t) {
  t.plan(6);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host + '|' + req.url);
  };

  inject(dispatch, {
    url: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.ok(res.headers.date);
    t.ok(res.headers.connection);
    t.equal(res.headers['transfer-encoding'], 'chunked');
    t.equal(res.payload, 'example.com:8080|/hello');
    t.equal(res.rawPayload.toString(), 'example.com:8080|/hello');
  });
});
test('passes headers', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.super);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello',
    headers: {
      Super: 'duper'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'duper');
  });
});
test('passes remote address', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.connection.remoteAddress);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello',
    remoteAddress: '1.2.3.4'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '1.2.3.4');
  });
});

var parseQuery = function parseQuery(url) {
  var parsedURL = parseURL(url);
  return qs.parse(parsedURL.search.slice(1));
};

test('passes query', function (t) {
  t.plan(2);
  var query = {
    message: 'OK',
    xs: ['foo', 'bar']
  };

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.url);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello',
    query
  }, function (err, res) {
    t.error(err);
    t.deepEqual(parseQuery(res.payload), query);
  });
});
test('query will be merged into that in url', function (t) {
  t.plan(2);
  var query = {
    xs: ['foo', 'bar']
  };

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.url);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello?message=OK',
    query
  }, function (err, res) {
    t.error(err);
    t.deepEqual(parseQuery(res.payload), Object.assign({
      message: 'OK'
    }, query));
  });
});
test('passes localhost as default remote address', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.connection.remoteAddress);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '127.0.0.1');
  });
});
test('passes host option as host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/hello',
    headers: {
      host: 'test.example.com'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'test.example.com');
  });
});
test('passes localhost as default host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/hello'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'localhost:80');
  });
});
test('passes authority as host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/hello',
    authority: 'something'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'something');
  });
});
test('passes uri host as host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'example.com:8080');
  });
});
test('includes default http port in host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, 'http://example.com', function (err, res) {
    t.error(err);
    t.equal(res.payload, 'example.com:80');
  });
});
test('includes default https port in host header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.host);
  };

  inject(dispatch, 'https://example.com', function (err, res) {
    t.error(err);
    t.equal(res.payload, 'example.com:443');
  });
});
test('optionally accepts an object as url', function (t) {
  t.plan(5);
  var output = 'example.com:8080|/hello?test=1234';

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain',
      'Content-Length': output.length
    });
    res.end(req.headers.host + '|' + req.url);
  };

  var url = {
    protocol: 'http',
    hostname: 'example.com',
    port: '8080',
    pathname: 'hello',
    query: {
      test: '1234'
    }
  };
  inject(dispatch, {
    url
  }, function (err, res) {
    t.error(err);
    t.ok(res.headers.date);
    t.ok(res.headers.connection);
    t.notOk(res.headers['transfer-encoding']);
    t.equal(res.payload, output);
  });
});
test('leaves user-agent unmodified', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers['user-agent']);
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello',
    headers: {
      'user-agent': 'duper'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'duper');
  });
});
test('returns chunked payload', function (t) {
  t.plan(5);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, 'OK');
    res.write('a');
    res.write('b');
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.ok(res.headers.date);
    t.ok(res.headers.connection);
    t.equal(res.headers['transfer-encoding'], 'chunked');
    t.equal(res.payload, 'ab');
  });
});
test('sets trailers in response object', function (t) {
  t.plan(4);

  var dispatch = function dispatch(req, res) {
    res.setHeader('Trailer', 'Test');
    res.addTrailers({
      Test: 123
    });
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(res.headers.trailer, 'Test');
    t.equal(res.headers.test, undefined);
    t.equal(res.trailers.test, '123');
  });
});
test('parses zipped payload', function (t) {
  t.plan(4);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, 'OK');
    var stream = fs.createReadStream('./package.json');
    stream.pipe(zlib.createGzip()).pipe(res);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    fs.readFile('./package.json', {
      encoding: 'utf-8'
    }, function (err, file) {
      t.error(err);
      zlib.unzip(res.rawPayload, function (err, unzipped) {
        t.error(err);
        t.equal(unzipped.toString('utf-8'), file);
      });
    });
  });
});
test('returns multi buffer payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200);
    res.write('a');
    res.write(Buffer.from('b'));
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'ab');
  });
});
test('returns null payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Length': 0
    });
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '');
  });
});
test('allows ending twice', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Length': 0
    });
    res.end();
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '');
  });
});
test('identifies injection object', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    t.equal(inject.isInjection(req), true);
    t.equal(inject.isInjection(res), true);
    res.writeHead(200, {
      'Content-Length': 0
    });
    res.end();
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
  });
});
test('pipes response', function (t) {
  t.plan(3);
  var finished = false;

  var dispatch = function dispatch(req, res) {
    res.writeHead(200);
    var stream = getTestStream();
    res.on('finish', function () {
      finished = true;
    });
    stream.pipe(res);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(finished, true);
    t.equal(res.payload, 'hi');
  });
});
test('pipes response with old stream', function (t) {
  t.plan(3);
  var finished = false;

  var dispatch = function dispatch(req, res) {
    res.writeHead(200);
    var stream = getTestStream();
    stream.pause();
    var stream2 = new Readable().wrap(stream);
    stream.resume();
    res.on('finish', function () {
      finished = true;
    });
    stream2.pipe(res);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(finished, true);
    t.equal(res.payload, 'hi');
  });
});
test('echos object payload', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'content-type': req.headers['content-type']
    });
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: {
      a: 1
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.headers['content-type'], 'application/json');
    t.equal(res.payload, '{"a":1}');
  });
});
test('supports body option in Request and property in Response', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'content-type': req.headers['content-type']
    });
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    body: {
      a: 1
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.headers['content-type'], 'application/json');
    t.equal(res.body, '{"a":1}');
  });
});
test('echos buffer payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200);
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: Buffer.from('test!')
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'test!');
  });
});
test('echos object payload with non-english utf-8 string', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'content-type': req.headers['content-type']
    });
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: {
      a: '½½א'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.headers['content-type'], 'application/json');
    t.equal(res.payload, '{"a":"½½א"}');
  });
});
test('echos object payload without payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200);
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test'
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '');
  });
});
test('retains content-type header', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'content-type': req.headers['content-type']
    });
    req.pipe(res);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: {
      a: 1
    },
    headers: {
      'content-type': 'something'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.headers['content-type'], 'something');
    t.equal(res.payload, '{"a":1}');
  });
});
test('adds a content-length header if none set when payload specified', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers['content-length']);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: {
      a: 1
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '{"a":1}'.length.toString());
  });
});
test('retains a content-length header when payload specified', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers['content-length']);
  };

  inject(dispatch, {
    method: 'POST',
    url: '/test',
    payload: '',
    headers: {
      'content-length': '10'
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '10');
  });
});
test('can handle a stream payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    readStream(req, function (buff) {
      res.writeHead(200, {
        'Content-Type': 'text/plain'
      });
      res.end(buff);
    });
  };

  inject(dispatch, {
    method: 'POST',
    url: '/',
    payload: getTestStream()
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'hi');
  });
});
test('can handle a stream payload of utf-8 strings', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    readStream(req, function (buff) {
      res.writeHead(200, {
        'Content-Type': 'text/plain'
      });
      res.end(buff);
    });
  };

  inject(dispatch, {
    method: 'POST',
    url: '/',
    payload: getTestStream('utf8')
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'hi');
  });
});
test('can override stream payload content-length header', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers['content-length']);
  };

  var headers = {
    'content-length': '100'
  };
  inject(dispatch, {
    method: 'POST',
    url: '/',
    payload: getTestStream(),
    headers
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, '100');
  });
});
test('can override stream payload content-length header without request content-length', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    t.equal(req.headers['content-length'], '2');
  };

  inject(dispatch, {
    method: 'POST',
    url: '/',
    payload: getTestStream()
  }, function () {});
});
test('writeHead returns single buffer payload', function (t) {
  t.plan(4);
  var reply = 'Hello World';
  var statusCode = 200;
  var statusMessage = 'OK';

  var dispatch = function dispatch(req, res) {
    res.writeHead(statusCode, statusMessage, {
      'Content-Type': 'text/plain',
      'Content-Length': reply.length
    });
    res.end(reply);
  };

  inject(dispatch, {
    method: 'GET',
    url: '/'
  }, function (err, res) {
    t.error(err);
    t.equal(res.statusCode, statusCode);
    t.equal(res.statusMessage, statusMessage);
    t.equal(res.payload, reply);
  });
});
test('_read() plays payload', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    var buffer = '';
    req.on('readable', function () {
      buffer = buffer + (req.read() || '');
    });
    req.on('close', function () {});
    req.on('end', function () {
      res.writeHead(200, {
        'Content-Length': 0
      });
      res.end(buffer);
      req.destroy();
    });
  };

  var body = 'something special just for you';
  inject(dispatch, {
    method: 'GET',
    url: '/',
    payload: body
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, body);
  });
});
test('simulates split', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    var buffer = '';
    req.on('readable', function () {
      buffer = buffer + (req.read() || '');
    });
    req.on('close', function () {});
    req.on('end', function () {
      res.writeHead(200, {
        'Content-Length': 0
      });
      res.end(buffer);
      req.destroy();
    });
  };

  var body = 'something special just for you';
  inject(dispatch, {
    method: 'GET',
    url: '/',
    payload: body,
    simulate: {
      split: true
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, body);
  });
});
test('simulates error', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    req.on('readable', function () {});
    req.on('error', function () {
      res.writeHead(200, {
        'Content-Length': 0
      });
      res.end('error');
    });
  };

  var body = 'something special just for you';
  inject(dispatch, {
    method: 'GET',
    url: '/',
    payload: body,
    simulate: {
      error: true
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'error');
  });
});
test('simulates no end without payload', function (t) {
  t.plan(2);
  var end = false;

  var dispatch = function dispatch(req, res) {
    req.resume();
    req.on('end', function () {
      end = true;
    });
  };

  var replied = false;
  inject(dispatch, {
    method: 'GET',
    url: '/',
    simulate: {
      end: false
    }
  }, function (notHandledErr, res) {
    replied = true;
  });
  setTimeout(function () {
    t.equal(end, false);
    t.equal(replied, false);
  }, 10);
});
test('simulates no end with payload', function (t) {
  t.plan(2);
  var end = false;

  var dispatch = function dispatch(req, res) {
    req.resume();
    req.on('end', function () {
      end = true;
    });
  };

  var replied = false;
  inject(dispatch, {
    method: 'GET',
    url: '/',
    payload: '1234567',
    simulate: {
      end: false
    }
  }, function (notHandledErr, res) {
    replied = true;
  });
  setTimeout(function () {
    t.equal(end, false);
    t.equal(replied, false);
  }, 10);
});
test('simulates close', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    var buffer = '';
    req.on('readable', function () {
      buffer = buffer + (req.read() || '');
    });
    req.on('close', function () {
      res.writeHead(200, {
        'Content-Length': 0
      });
      res.end('close');
    });
    req.on('end', function () {});
  };

  var body = 'something special just for you';
  inject(dispatch, {
    method: 'GET',
    url: '/',
    payload: body,
    simulate: {
      close: true
    }
  }, function (err, res) {
    t.error(err);
    t.equal(res.payload, 'close');
  });
});
test('errors for invalid input options', function (t) {
  t.plan(1);

  try {
    inject({}, {}, function () {});
    t.fail('This should throw');
  } catch (err) {
    t.is(err.message, 'dispatchFunc should be a function');
  }
});
test('errors for missing url', function (t) {
  t.plan(1);

  try {
    inject(function (req, res) {}, {}, function () {});
  } catch (err) {
    t.ok(err);
  }
});
test('errors for an incorrect simulation object', function (t) {
  t.plan(1);

  try {
    inject(function (req, res) {}, {
      url: '/',
      simulate: 'sample string'
    }, function () {});
  } catch (err) {
    t.ok(err);
  }
});
test('ignores incorrect simulation object', function (t) {
  t.plan(1);

  try {
    inject(function (req, res) {}, {
      url: '/',
      simulate: 'sample string',
      validate: false
    }, function () {});
    t.pass();
  } catch (err) {
    t.fail('we shoult not be here');
  }
});
test('errors for an incorrect simulation object values', function (t) {
  t.plan(1);

  try {
    inject(function (req, res) {}, {
      url: '/',
      simulate: {
        end: 'wrong input'
      }
    }, function () {});
  } catch (err) {
    t.ok(err);
  }
});
test('promises support', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end('hello');
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello'
  }).then(function (res) {
    return t.equal(res.payload, 'hello');
  }).catch(function (err) {
    return t.fail(err);
  });
});
test('async wait support', function (t) {
  if (Number(process.versions.node[0]) >= 8) {
    require('./async-await')(t, inject);
  } else {
    t.pass('Skip because Node version < 8');
    t.end();
  }
});
test('this should be the server instance', function (t) {
  t.plan(2);
  var server = http.createServer();

  var dispatch = function dispatch(req, res) {
    t.equal(this, server);
    res.end('hello');
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello',
    server: server
  }).then(function (res) {
    return t.equal(res.statusCode, 200);
  }).catch(function (err) {
    return t.fail(err);
  });
});
test('should handle response errors', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {
    res.connection.destroy(new Error('kaboom'));
  };

  inject(dispatch, 'http://example.com:8080/hello', function (err, res) {
    t.ok(err);
  });
});
test('should handle response errors (promises)', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {
    res.connection.destroy(new Error('kaboom'));
  };

  inject(dispatch, {
    method: 'GET',
    url: 'http://example.com:8080/hello'
  }).then(function (res) {
    return t.fail('should throw');
  }).catch(function (err) {
    return t.ok(err);
  });
});
test('should throw on unknown HTTP method', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {};

  t.throws(function () {
    return inject(dispatch, {
      method: 'UNKNOWN_METHOD',
      url: 'http://example.com:8080/hello'
    }, function (err, res) {
      t.ok(err);
    });
  }, Error);
});
test('should throw on unknown HTTP method (promises)', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {};

  t.throws(function () {
    return inject(dispatch, {
      method: 'UNKNOWN_METHOD',
      url: 'http://example.com:8080/hello'
    }).then(function (res) {});
  }, Error);
});
test('HTTP method is case insensitive', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    res.end('Hi!');
  };

  inject(dispatch, {
    method: 'get',
    url: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.equal(res.statusCode, 200);
    t.equal(res.payload, 'Hi!');
  });
});
test('form-data should be handled correctly', function (t) {
  t.plan(3);

  var dispatch = function dispatch(req, res) {
    var body = '';
    req.on('data', function (d) {
      body += d;
    });
    req.on('end', function () {
      res.end(body);
    });
  };

  var form = new FormData();
  form.append('my_field', 'my value');
  inject(dispatch, {
    method: 'POST',
    url: 'http://example.com:8080/hello',
    payload: form
  }, function (err, res) {
    t.error(err);
    t.equal(res.statusCode, 200);
    t.ok(/--.+\r\nContent-Disposition: form-data; name="my_field"\r\n\r\nmy value\r\n--.+--\r\n/.test(res.payload));
  });
});
test('path as alias to url', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.url);
  };

  inject(dispatch, {
    method: 'GET',
    path: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.strictEqual(res.payload, '/hello');
  });
});
test('Should throw if both path and url are missing', function (t) {
  t.plan(1);

  try {
    inject(function () {}, {
      method: 'GET'
    }, function () {});
    t.fail('Should throw');
  } catch (err) {
    t.ok(err);
  }
});
test('chainable api: backwards compatibility for promise (then)', function (t) {
  t.plan(1);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end('hello');
  };

  inject(dispatch).get('/').then(function (res) {
    return t.equal(res.payload, 'hello');
  }).catch(function (err) {
    return t.fail(err);
  });
});
test('chainable api: backwards compatibility for promise (catch)', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    throw Error;
  }

  inject(dispatch).get('/').catch(function (err) {
    return t.ok(err);
  });
});
test('chainable api: multiple call of then should return the same promise', function (t) {
  t.plan(2);
  var id = 0;

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain',
      'Request-Id': id
    });
    ++id;
    t.pass('request id incremented');
    res.end('hello');
  }

  var chain = inject(dispatch).get('/');
  chain.then(function (res) {
    chain.then(function (rep) {
      t.equal(res.headers['request-id'], rep.headers['request-id']);
    });
  });
});
test('chainable api: http methods should work correctly', function (t) {
  t.plan(16);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.method);
  }

  httpMethods.forEach(function (method) {
    inject(dispatch)[method]('http://example.com:8080/hello').end(function (err, res) {
      t.error(err);
      t.equal(res.body, method.toUpperCase());
    });
  });
});
test('chainable api: http methods should throw if already invoked', function (t) {
  t.plan(8);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  httpMethods.forEach(function (method) {
    var chain = inject(dispatch)[method]('http://example.com:8080/hello');
    chain.end();
    t.throws(function () {
      return chain[method]('/');
    }, Error);
  });
});
test('chainable api: body method should work correctly', function (t) {
  t.plan(2);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    req.pipe(res);
  }

  inject(dispatch).get('http://example.com:8080/hello').body('test').end(function (err, res) {
    t.error(err);
    t.equal(res.body, 'test');
  });
});
test('chainable api: body method should throw if already invoked', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch);
  chain.get('http://example.com:8080/hello').end();
  t.throws(function () {
    return chain.body('test');
  }, Error);
});
test('chainable api: headers method should work correctly', function (t) {
  t.plan(2);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.headers.foo);
  }

  inject(dispatch).get('http://example.com:8080/hello').headers({
    foo: 'bar'
  }).end(function (err, res) {
    t.error(err);
    t.equal(res.payload, 'bar');
  });
});
test('chainable api: headers method should throw if already invoked', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch);
  chain.get('http://example.com:8080/hello').end();
  t.throws(function () {
    return chain.headers({
      foo: 'bar'
    });
  }, Error);
});
test('chainable api: payload method should work correctly', function (t) {
  t.plan(2);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    req.pipe(res);
  }

  inject(dispatch).get('http://example.com:8080/hello').payload('payload').end(function (err, res) {
    t.error(err);
    t.equal(res.payload, 'payload');
  });
});
test('chainable api: payload method should throw if already invoked', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch);
  chain.get('http://example.com:8080/hello').end();
  t.throws(function () {
    return chain.payload('payload');
  }, Error);
});
test('chainable api: query method should work correctly', function (t) {
  t.plan(2);
  var query = {
    message: 'OK',
    xs: ['foo', 'bar']
  };

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(req.url);
  }

  inject(dispatch).get('http://example.com:8080/hello').query(query).end(function (err, res) {
    t.error(err);
    t.deepEqual(parseQuery(res.payload), query);
  });
});
test('chainable api: query method should throw if already invoked', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch);
  chain.get('http://example.com:8080/hello').end();
  t.throws(function () {
    return chain.query({
      foo: 'bar'
    });
  }, Error);
});
test('chainable api: invoking end method after promise method should throw', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch).get('http://example.com:8080/hello');
  chain.then();
  t.throws(function () {
    return chain.end();
  }, Error);
});
test('chainable api: invoking promise method after end method with a callback function should throw', function (t) {
  t.plan(2);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch).get('http://example.com:8080/hello');
  chain.end(function (err, res) {
    t.error(err);
  });
  t.throws(function () {
    return chain.then();
  }, Error);
});
test('chainable api: invoking promise method after end method without a callback function should work properly', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end('hello');
  }

  inject(dispatch).get('http://example.com:8080/hello').end().then(function (res) {
    return t.equal(res.payload, 'hello');
  });
});
test('chainable api: invoking end method multiple times should throw', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var chain = inject(dispatch).get('http://example.com:8080/hello');
  chain.end();
  t.throws(function () {
    return chain.end();
  }, Error);
});
test('chainable api: string url', function (t) {
  t.plan(2);

  function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
    t.pass();
  }

  var chain = inject(dispatch, 'http://example.com:8080/hello');
  chain.then(function () {
    return t.pass();
  });
});
test('Response.json() should parse the JSON payload', function (t) {
  t.plan(2);
  var json = {
    a: 1,
    b: '2'
  };

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    res.end(JSON.stringify(json));
  };

  inject(dispatch, {
    method: 'GET',
    path: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.deepEqual(res.json(), json);
  });
});
test('Response.json() should throw an error if content-type is not application/json', function (t) {
  t.plan(2);
  var json = {
    a: 1,
    b: '2'
  };

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end(JSON.stringify(json));
  };

  inject(dispatch, {
    method: 'GET',
    path: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.throws(res.json, Error);
  });
});
test('Response.json() should throw an error if the payload is not of valid JSON format', function (t) {
  t.plan(2);

  var dispatch = function dispatch(req, res) {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    res.end('notAJSON');
  };

  inject(dispatch, {
    method: 'GET',
    path: 'http://example.com:8080/hello'
  }, function (err, res) {
    t.error(err);
    t.throws(res.json, Error);
  });
});
test('promise api should auto start (fire and forget)', function (t) {
  t.plan(1);

  function dispatch(req, res) {
    t.pass('dispatch called');
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  inject(dispatch, 'http://example.com:8080/hello');
});
test('disabling autostart', function (t) {
  t.plan(3);
  var called = false;

  function dispatch(req, res) {
    t.pass('dispatch called');
    called = true;
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    res.end();
  }

  var p = inject(dispatch, {
    url: 'http://example.com:8080/hello',
    autoStart: false
  });
  setImmediate(function () {
    t.equal(called, false);
    p.then(function () {
      t.equal(called, true);
    });
  });
});

function getTestStream(encoding) {
  var word = 'hi';
  var i = 0;
  var stream = new Readable({
    read(n) {
      this.push(word[i] ? word[i++] : null);
    }

  });

  if (encoding) {
    stream.setEncoding(encoding);
  }

  return stream;
}

function readStream(stream, callback) {
  var chunks = [];
  stream.on('data', function (chunk) {
    return chunks.push(chunk);
  });
  stream.on('end', function () {
    return callback(Buffer.concat(chunks));
  });
}