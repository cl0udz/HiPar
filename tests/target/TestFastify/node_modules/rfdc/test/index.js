'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

var _require = require('tap'),
    test = _require.test;

var rfdc = require('..');

var clone = rfdc();
var cloneProto = rfdc({
  proto: true
});
var cloneCircles = rfdc({
  circles: true
});
var cloneCirclesProto = rfdc({
  circles: true,
  proto: true
});
types(clone, 'default');
types(cloneProto, 'proto option');
types(cloneCircles, 'circles option');
types(cloneCirclesProto, 'circles and proto option');
test('default – does not copy proto properties', function _callee(_ref) {
  var is;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is;
          is(clone(Object.create({
            a: 1
          })).a, undefined, 'value not copied');

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('proto option – copies enumerable proto properties', function _callee2(_ref2) {
  var is;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is;
          is(cloneProto(Object.create({
            a: 1
          })).a, 1, 'value copied');

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('circles option - circular object', function _callee3(_ref3) {
  var same, is, isNot, o, c;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          same = _ref3.same, is = _ref3.is, isNot = _ref3.isNot;
          o = {
            nest: {
              a: 1,
              b: 2
            }
          };
          o.circular = o;
          same(cloneCircles(o), o, 'same values');
          isNot(cloneCircles(o), o, 'different objects');
          isNot(cloneCircles(o).nest, o.nest, 'different nested objects');
          c = cloneCircles(o);
          is(c.circular, c, 'circular references point to copied parent');
          isNot(c.circular, o, 'circular references do not point to original parent');

        case 9:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('circles option – deep circular object', function _callee4(_ref4) {
  var same, is, isNot, o, c;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          same = _ref4.same, is = _ref4.is, isNot = _ref4.isNot;
          o = {
            nest: {
              a: 1,
              b: 2
            }
          };
          o.nest.circular = o;
          same(cloneCircles(o), o, 'same values');
          isNot(cloneCircles(o), o, 'different objects');
          isNot(cloneCircles(o).nest, o.nest, 'different nested objects');
          c = cloneCircles(o);
          is(c.nest.circular, c, 'circular references point to copied parent');
          isNot(c.nest.circular, o, 'circular references do not point to original parent');

        case 9:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('circles option alone – does not copy proto properties', function _callee5(_ref5) {
  var is;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          is = _ref5.is;
          is(cloneCircles(Object.create({
            a: 1
          })).a, undefined, 'value not copied');

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('circles and proto option – copies enumerable proto properties', function _callee6(_ref6) {
  var is;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          is = _ref6.is;
          is(cloneCirclesProto(Object.create({
            a: 1
          })).a, 1, 'value copied');

        case 2:
        case "end":
          return _context6.stop();
      }
    }
  });
});
test('circles and proto option - circular object', function _callee7(_ref7) {
  var same, is, isNot, o, c;
  return regeneratorRuntime.async(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          same = _ref7.same, is = _ref7.is, isNot = _ref7.isNot;
          o = {
            nest: {
              a: 1,
              b: 2
            }
          };
          o.circular = o;
          same(cloneCirclesProto(o), o, 'same values');
          isNot(cloneCirclesProto(o), o, 'different objects');
          isNot(cloneCirclesProto(o).nest, o.nest, 'different nested objects');
          c = cloneCirclesProto(o);
          is(c.circular, c, 'circular references point to copied parent');
          isNot(c.circular, o, 'circular references do not point to original parent');

        case 9:
        case "end":
          return _context7.stop();
      }
    }
  });
});
test('circles and proto option – deep circular object', function _callee8(_ref8) {
  var same, is, isNot, o, c;
  return regeneratorRuntime.async(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          same = _ref8.same, is = _ref8.is, isNot = _ref8.isNot;
          o = {
            nest: {
              a: 1,
              b: 2
            }
          };
          o.nest.circular = o;
          same(cloneCirclesProto(o), o, 'same values');
          isNot(cloneCirclesProto(o), o, 'different objects');
          isNot(cloneCirclesProto(o).nest, o.nest, 'different nested objects');
          c = cloneCirclesProto(o);
          is(c.nest.circular, c, 'circular references point to copied parent');
          isNot(c.nest.circular, o, 'circular references do not point to original parent');

        case 9:
        case "end":
          return _context8.stop();
      }
    }
  });
});
test('circles and proto option – deep circular array', function _callee9(_ref9) {
  var same, is, isNot, o, c;
  return regeneratorRuntime.async(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          same = _ref9.same, is = _ref9.is, isNot = _ref9.isNot;
          o = {
            nest: [1, 2]
          };
          o.nest.push(o);
          same(cloneCirclesProto(o), o, 'same values');
          isNot(cloneCirclesProto(o), o, 'different objects');
          isNot(cloneCirclesProto(o).nest, o.nest, 'different nested objects');
          c = cloneCirclesProto(o);
          is(c.nest[2], c, 'circular references point to copied parent');
          isNot(c.nest[2], o, 'circular references do not point to original parent');

        case 9:
        case "end":
          return _context9.stop();
      }
    }
  });
});

function types(clone, label) {
  test(label + ' – number', function _callee10(_ref10) {
    var is;
    return regeneratorRuntime.async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            is = _ref10.is;
            is(clone(42), 42, 'same value');

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  test(label + ' – string', function _callee11(_ref11) {
    var is;
    return regeneratorRuntime.async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            is = _ref11.is;
            is(clone('str'), 'str', 'same value');

          case 2:
          case "end":
            return _context11.stop();
        }
      }
    });
  });
  test(label + ' – boolean', function _callee12(_ref12) {
    var is;
    return regeneratorRuntime.async(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            is = _ref12.is;
            is(clone(true), true, 'same value');

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    });
  });
  test(label + ' – function', function _callee13(_ref13) {
    var is, fn;
    return regeneratorRuntime.async(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            is = _ref13.is;

            fn = function fn() {};

            is(clone(fn), fn, 'same function');

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    });
  });
  test(label + ' – async function', function _callee14(_ref14) {
    var is, fn;
    return regeneratorRuntime.async(function _callee14$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            is = _ref14.is;

            fn = function fn() {
              return regeneratorRuntime.async(function fn$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                    case "end":
                      return _context14.stop();
                  }
                }
              });
            };

            is(clone(fn), fn, 'same function');

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    });
  });
  test(label + ' – generator function', function _callee15(_ref15) {
    var is, fn;
    return regeneratorRuntime.async(function _callee15$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            is = _ref15.is;
            fn =
            /*#__PURE__*/
            regeneratorRuntime.mark(function fn() {
              return regeneratorRuntime.wrap(function fn$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, fn);
            });
            is(clone(fn), fn, 'same function');

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    });
  });
  test(label + ' – date', function _callee16(_ref16) {
    var is, isNot, date;
    return regeneratorRuntime.async(function _callee16$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            is = _ref16.is, isNot = _ref16.isNot;
            date = new Date();
            is(+clone(date), +date, 'same value');
            isNot(clone(date), date, 'different object');

          case 4:
          case "end":
            return _context18.stop();
        }
      }
    });
  });
  test(label + ' – null', function _callee17(_ref17) {
    var is;
    return regeneratorRuntime.async(function _callee17$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            is = _ref17.is;
            is(clone(null), null, 'same value');

          case 2:
          case "end":
            return _context19.stop();
        }
      }
    });
  });
  test(label + ' – shallow object', function _callee18(_ref18) {
    var same, isNot, o;
    return regeneratorRuntime.async(function _callee18$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            same = _ref18.same, isNot = _ref18.isNot;
            o = {
              a: 1,
              b: 2
            };
            same(clone(o), o, 'same values');
            isNot(clone(o), o, 'different object');

          case 4:
          case "end":
            return _context20.stop();
        }
      }
    });
  });
  test(label + ' – shallow array', function _callee19(_ref19) {
    var same, isNot, o;
    return regeneratorRuntime.async(function _callee19$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            same = _ref19.same, isNot = _ref19.isNot;
            o = [1, 2];
            same(clone(o), o, 'same values');
            isNot(clone(o), o, 'different arrays');

          case 4:
          case "end":
            return _context21.stop();
        }
      }
    });
  });
  test(label + ' – deep object', function _callee20(_ref20) {
    var same, isNot, o;
    return regeneratorRuntime.async(function _callee20$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            same = _ref20.same, isNot = _ref20.isNot;
            o = {
              nest: {
                a: 1,
                b: 2
              }
            };
            same(clone(o), o, 'same values');
            isNot(clone(o), o, 'different objects');
            isNot(clone(o).nest, o.nest, 'different nested objects');

          case 5:
          case "end":
            return _context22.stop();
        }
      }
    });
  });
  test(label + ' – deep array', function _callee21(_ref21) {
    var same, isNot, o;
    return regeneratorRuntime.async(function _callee21$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            same = _ref21.same, isNot = _ref21.isNot;
            o = [{
              a: 1,
              b: 2
            }, [3]];
            same(clone(o), o, 'same values');
            isNot(clone(o), o, 'different arrays');
            isNot(clone(o)[0], o[0], 'different array elements');
            isNot(clone(o)[1], o[1], 'different array elements');

          case 6:
          case "end":
            return _context23.stop();
        }
      }
    });
  });
  test(label + ' – nested number', function _callee22(_ref22) {
    var is;
    return regeneratorRuntime.async(function _callee22$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            is = _ref22.is;
            is(clone({
              a: 1
            }).a, 1, 'same value');

          case 2:
          case "end":
            return _context24.stop();
        }
      }
    });
  });
  test(label + ' – nested string', function _callee23(_ref23) {
    var is;
    return regeneratorRuntime.async(function _callee23$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            is = _ref23.is;
            is(clone({
              s: 'str'
            }).s, 'str', 'same value');

          case 2:
          case "end":
            return _context25.stop();
        }
      }
    });
  });
  test(label + ' – nested boolean', function _callee24(_ref24) {
    var is;
    return regeneratorRuntime.async(function _callee24$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            is = _ref24.is;
            is(clone({
              b: true
            }).b, true, 'same value');

          case 2:
          case "end":
            return _context26.stop();
        }
      }
    });
  });
  test(label + ' – nested function', function _callee25(_ref25) {
    var is, fn;
    return regeneratorRuntime.async(function _callee25$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            is = _ref25.is;

            fn = function fn() {};

            is(clone({
              fn: fn
            }).fn, fn, 'same function');

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    });
  });
  test(label + ' – nested async function', function _callee26(_ref26) {
    var is, fn;
    return regeneratorRuntime.async(function _callee26$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            is = _ref26.is;

            fn = function fn() {
              return regeneratorRuntime.async(function fn$(_context28) {
                while (1) {
                  switch (_context28.prev = _context28.next) {
                    case 0:
                    case "end":
                      return _context28.stop();
                  }
                }
              });
            };

            is(clone({
              fn: fn
            }).fn, fn, 'same function');

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    });
  });
  test(label + ' – nested generator function', function _callee27(_ref27) {
    var is, fn;
    return regeneratorRuntime.async(function _callee27$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            is = _ref27.is;
            fn =
            /*#__PURE__*/
            regeneratorRuntime.mark(function fn() {
              return regeneratorRuntime.wrap(function fn$(_context30) {
                while (1) {
                  switch (_context30.prev = _context30.next) {
                    case 0:
                    case "end":
                      return _context30.stop();
                  }
                }
              }, fn);
            });
            is(clone({
              fn: fn
            }).fn, fn, 'same function');

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    });
  });
  test(label + ' – nested date', function _callee28(_ref28) {
    var is, isNot, date;
    return regeneratorRuntime.async(function _callee28$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            is = _ref28.is, isNot = _ref28.isNot;
            date = new Date();
            is(+clone({
              d: date
            }).d, +date, 'same value');
            isNot(clone({
              d: date
            }).d, date, 'different object');

          case 4:
          case "end":
            return _context32.stop();
        }
      }
    });
  });
  test(label + ' – nested date in array', function _callee29(_ref29) {
    var is, isNot, date;
    return regeneratorRuntime.async(function _callee29$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            is = _ref29.is, isNot = _ref29.isNot;
            date = new Date();
            is(+clone({
              d: [date]
            }).d[0], +date, 'same value');
            isNot(clone({
              d: [date]
            }).d[0], date, 'different object');
            is(+cloneCircles({
              d: [date]
            }).d[0], +date, 'same value');
            isNot(cloneCircles({
              d: [date]
            }).d, date, 'different object');

          case 6:
          case "end":
            return _context33.stop();
        }
      }
    });
  });
  test(label + ' – nested null', function _callee30(_ref30) {
    var is;
    return regeneratorRuntime.async(function _callee30$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            is = _ref30.is;
            is(clone({
              n: null
            }).n, null, 'same value');

          case 2:
          case "end":
            return _context34.stop();
        }
      }
    });
  });
  test(label + ' – arguments', function _callee31(_ref31) {
    var isNot, same, fn;
    return regeneratorRuntime.async(function _callee31$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            fn = function _ref32() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              same(clone(arguments), args, 'same values');
              isNot(clone(arguments), arguments, 'different object');
            };

            isNot = _ref31.isNot, same = _ref31.same;
            fn(1, 2, 3);

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    });
  });
}