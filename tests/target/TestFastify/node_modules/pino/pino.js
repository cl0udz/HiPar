'use strict';

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.set-prototype-of");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var os = require('os');

var stdSerializers = require('pino-std-serializers');

var redaction = require('./lib/redaction');

var time = require('./lib/time');

var proto = require('./lib/proto');

var symbols = require('./lib/symbols');

var _require = require('./lib/levels'),
    assertDefaultLevelFound = _require.assertDefaultLevelFound,
    mappings = _require.mappings,
    genLsCache = _require.genLsCache;

var _require2 = require('./lib/tools'),
    createArgsNormalizer = _require2.createArgsNormalizer,
    asChindings = _require2.asChindings,
    _final = _require2["final"],
    stringify = _require2.stringify,
    buildSafeSonicBoom = _require2.buildSafeSonicBoom;

var _require3 = require('./lib/meta'),
    version = _require3.version,
    LOG_VERSION = _require3.LOG_VERSION;

var chindingsSym = symbols.chindingsSym,
    redactFmtSym = symbols.redactFmtSym,
    serializersSym = symbols.serializersSym,
    timeSym = symbols.timeSym,
    timeSliceIndexSym = symbols.timeSliceIndexSym,
    streamSym = symbols.streamSym,
    stringifySym = symbols.stringifySym,
    stringifiersSym = symbols.stringifiersSym,
    setLevelSym = symbols.setLevelSym,
    endSym = symbols.endSym,
    formatOptsSym = symbols.formatOptsSym,
    messageKeySym = symbols.messageKeySym,
    useLevelLabelsSym = symbols.useLevelLabelsSym,
    changeLevelNameSym = symbols.changeLevelNameSym,
    useOnlyCustomLevelsSym = symbols.useOnlyCustomLevelsSym;
var epochTime = time.epochTime,
    nullTime = time.nullTime;
var _process = process,
    pid = _process.pid;
var hostname = os.hostname();
var defaultErrorSerializer = stdSerializers.err;
var defaultOptions = {
  level: 'info',
  useLevelLabels: false,
  messageKey: 'msg',
  enabled: true,
  prettyPrint: false,
  base: {
    pid: pid,
    hostname: hostname
  },
  serializers: Object.assign(Object.create(null), {
    err: defaultErrorSerializer
  }),
  timestamp: epochTime,
  name: undefined,
  redact: null,
  customLevels: null,
  changeLevelName: 'level',
  useOnlyCustomLevels: false
};
var normalize = createArgsNormalizer(defaultOptions);
var serializers = Object.assign(Object.create(null), stdSerializers);

function pino() {
  var _asChindings$bind, _instance;

  var _normalize = normalize.apply(void 0, arguments),
      opts = _normalize.opts,
      stream = _normalize.stream;

  var redact = opts.redact,
      crlf = opts.crlf,
      serializers = opts.serializers,
      timestamp = opts.timestamp,
      messageKey = opts.messageKey,
      base = opts.base,
      name = opts.name,
      level = opts.level,
      customLevels = opts.customLevels,
      useLevelLabels = opts.useLevelLabels,
      changeLevelName = opts.changeLevelName,
      useOnlyCustomLevels = opts.useOnlyCustomLevels;
  var stringifiers = redact ? redaction(redact, stringify) : {};
  var formatOpts = redact ? {
    stringify: stringifiers[redactFmtSym]
  } : {
    stringify: stringify
  };
  var end = ',"v":' + LOG_VERSION + '}' + (crlf ? '\r\n' : '\n');
  var coreChindings = asChindings.bind(null, (_asChindings$bind = {}, _defineProperty(_asChindings$bind, chindingsSym, ''), _defineProperty(_asChindings$bind, serializersSym, serializers), _defineProperty(_asChindings$bind, stringifiersSym, stringifiers), _defineProperty(_asChindings$bind, stringifySym, stringify), _asChindings$bind));
  var chindings = base === null ? '' : name === undefined ? coreChindings(base) : coreChindings(Object.assign({}, base, {
    name: name
  }));
  var time = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;
  var timeSliceIndex = time().indexOf(':') + 1;
  if (useOnlyCustomLevels && !customLevels) throw Error('customLevels is required if useOnlyCustomLevels is set true');
  assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
  var levels = mappings(customLevels, useOnlyCustomLevels);
  var instance = (_instance = {
    levels: levels
  }, _defineProperty(_instance, useLevelLabelsSym, useLevelLabels), _defineProperty(_instance, changeLevelNameSym, changeLevelName), _defineProperty(_instance, useOnlyCustomLevelsSym, useOnlyCustomLevels), _defineProperty(_instance, streamSym, stream), _defineProperty(_instance, timeSym, time), _defineProperty(_instance, timeSliceIndexSym, timeSliceIndex), _defineProperty(_instance, stringifySym, stringify), _defineProperty(_instance, stringifiersSym, stringifiers), _defineProperty(_instance, endSym, end), _defineProperty(_instance, formatOptsSym, formatOpts), _defineProperty(_instance, messageKeySym, messageKey), _defineProperty(_instance, serializersSym, serializers), _defineProperty(_instance, chindingsSym, chindings), _instance);
  Object.setPrototypeOf(instance, proto);
  if (customLevels || useLevelLabels || changeLevelName !== defaultOptions.changeLevelName) genLsCache(instance);
  instance[setLevelSym](level);
  return instance;
}

pino.extreme = function () {
  var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.stdout.fd;
  return buildSafeSonicBoom(dest, 4096, false);
};

pino.destination = function () {
  var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.stdout.fd;
  return buildSafeSonicBoom(dest, 0, true);
};

pino["final"] = _final;
pino.levels = mappings();
pino.stdSerializers = serializers;
pino.stdTimeFunctions = Object.assign({}, time);
pino.symbols = symbols;
pino.version = version;
pino.LOG_VERSION = LOG_VERSION;
module.exports = pino;