'use strict';

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

var test = require('tape');

var pino = require('../browser');

test('set the level by string', function (_ref) {
  var end = _ref.end,
      same = _ref.same,
      is = _ref.is;
  var expected = [{
    level: 50,
    msg: 'this is an error'
  }, {
    level: 60,
    msg: 'this is fatal'
  }];
  var instance = pino({
    browser: {
      write: function write(actual) {
        checkLogObjects(is, same, actual, expected.shift());
      }
    }
  });
  instance.level = 'error';
  instance.info('hello world');
  instance.error('this is an error');
  instance.fatal('this is fatal');
  end();
});
test('set the level by string. init with silent', function (_ref2) {
  var end = _ref2.end,
      same = _ref2.same,
      is = _ref2.is;
  var expected = [{
    level: 50,
    msg: 'this is an error'
  }, {
    level: 60,
    msg: 'this is fatal'
  }];
  var instance = pino({
    level: 'silent',
    browser: {
      write: function write(actual) {
        checkLogObjects(is, same, actual, expected.shift());
      }
    }
  });
  instance.level = 'error';
  instance.info('hello world');
  instance.error('this is an error');
  instance.fatal('this is fatal');
  end();
});
test('set the level by string. init with silent and transmit', function (_ref3) {
  var end = _ref3.end,
      same = _ref3.same,
      is = _ref3.is;
  var expected = [{
    level: 50,
    msg: 'this is an error'
  }, {
    level: 60,
    msg: 'this is fatal'
  }];
  var instance = pino({
    level: 'silent',
    browser: {
      write: function write(actual) {
        checkLogObjects(is, same, actual, expected.shift());
      }
    },
    transmit: {
      send: function send() {}
    }
  });
  instance.level = 'error';
  instance.info('hello world');
  instance.error('this is an error');
  instance.fatal('this is fatal');
  end();
});
test('set the level via constructor', function (_ref4) {
  var end = _ref4.end,
      same = _ref4.same,
      is = _ref4.is;
  var expected = [{
    level: 50,
    msg: 'this is an error'
  }, {
    level: 60,
    msg: 'this is fatal'
  }];
  var instance = pino({
    level: 'error',
    browser: {
      write: function write(actual) {
        checkLogObjects(is, same, actual, expected.shift());
      }
    }
  });
  instance.info('hello world');
  instance.error('this is an error');
  instance.fatal('this is fatal');
  end();
});
test('the wrong level throws', function (_ref5) {
  var end = _ref5.end,
      _throws = _ref5["throws"];
  var instance = pino();

  _throws(function () {
    instance.level = 'kaboom';
  });

  end();
});
test('the wrong level by number throws', function (_ref6) {
  var end = _ref6.end,
      _throws2 = _ref6["throws"];
  var instance = pino();

  _throws2(function () {
    instance.levelVal = 55;
  });

  end();
});
test('exposes level string mappings', function (_ref7) {
  var end = _ref7.end,
      is = _ref7.is;
  is(pino.levels.values.error, 50);
  end();
});
test('exposes level number mappings', function (_ref8) {
  var end = _ref8.end,
      is = _ref8.is;
  is(pino.levels.labels[50], 'error');
  end();
});
test('returns level integer', function (_ref9) {
  var end = _ref9.end,
      is = _ref9.is;
  var instance = pino({
    level: 'error'
  });
  is(instance.levelVal, 50);
  end();
});
test('silent level via constructor', function (_ref10) {
  var end = _ref10.end,
      fail = _ref10.fail;
  var instance = pino({
    level: 'silent',
    browser: {
      write: function write() {
        fail('no data should be logged');
      }
    }
  });
  Object.keys(pino.levels.values).forEach(function (level) {
    instance[level]('hello world');
  });
  end();
});
test('silent level by string', function (_ref11) {
  var end = _ref11.end,
      fail = _ref11.fail;
  var instance = pino({
    browser: {
      write: function write() {
        fail('no data should be logged');
      }
    }
  });
  instance.level = 'silent';
  Object.keys(pino.levels.values).forEach(function (level) {
    instance[level]('hello world');
  });
  end();
});
test('exposed levels', function (_ref12) {
  var end = _ref12.end,
      same = _ref12.same;
  same(Object.keys(pino.levels.values), ['fatal', 'error', 'warn', 'info', 'debug', 'trace']);
  end();
});
test('exposed labels', function (_ref13) {
  var end = _ref13.end,
      same = _ref13.same;
  same(Object.keys(pino.levels.labels), ['10', '20', '30', '40', '50', '60']);
  end();
});

function checkLogObjects(is, same, actual, expected) {
  is(actual.time <= Date.now(), true, 'time is greater than Date.now()');
  var actualCopy = Object.assign({}, actual);
  var expectedCopy = Object.assign({}, expected);
  delete actualCopy.time;
  delete expectedCopy.time;
  same(actualCopy, expectedCopy);
}