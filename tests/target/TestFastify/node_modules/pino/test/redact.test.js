'use strict';

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.replace");

require("regenerator-runtime/runtime");

var _require = require('tap'),
    test = _require.test;

var _require2 = require('./helper'),
    sink = _require2.sink,
    once = _require2.once;

var pino = require('../');

test('redact option – throws if not array', function _callee(_ref) {
  var _throws;

  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _throws = _ref["throws"];

          _throws(function () {
            pino({
              redact: 'req.headers.cookie'
            });
          });

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('redact option – throws if array does not only contain strings', function _callee2(_ref2) {
  var _throws2;

  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _throws2 = _ref2["throws"];

          _throws2(function () {
            pino({
              redact: ['req.headers.cookie', {}]
            });
          });

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('redact option – throws if array contains an invalid path', function _callee3(_ref3) {
  var _throws3;

  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _throws3 = _ref3["throws"];

          _throws3(function () {
            pino({
              redact: ['req,headers.cookie']
            });
          });

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('redact.paths option – throws if not array', function _callee4(_ref4) {
  var _throws4;

  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _throws4 = _ref4["throws"];

          _throws4(function () {
            pino({
              redact: {
                paths: 'req.headers.cookie'
              }
            });
          });

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('redact.paths option – throws if array does not only contain strings', function _callee5(_ref5) {
  var _throws5;

  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _throws5 = _ref5["throws"];

          _throws5(function () {
            pino({
              redact: {
                paths: ['req.headers.cookie', {}]
              }
            });
          });

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('redact.paths option – throws if array contains an invalid path', function _callee6(_ref6) {
  var _throws6;

  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _throws6 = _ref6["throws"];

          _throws6(function () {
            pino({
              redact: {
                paths: ['req,headers.cookie']
              }
            });
          });

        case 2:
        case "end":
          return _context6.stop();
      }
    }
  });
});
test('redact option – top level key', function _callee7(_ref7) {
  var is, stream, instance, _ref8, key;

  return regeneratorRuntime.async(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          is = _ref7.is;
          stream = sink();
          instance = pino({
            redact: ['key']
          }, stream);
          instance.info({
            key: {
              redact: 'me'
            }
          });
          _context7.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref8 = _context7.sent;
          key = _ref8.key;
          is(key, '[Redacted]');

        case 9:
        case "end":
          return _context7.stop();
      }
    }
  });
});
test('redact option – top level key next level key', function _callee8(_ref9) {
  var is, stream, instance, _ref10, key;

  return regeneratorRuntime.async(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          is = _ref9.is;
          stream = sink();
          instance = pino({
            redact: ['key', 'key.foo']
          }, stream);
          instance.info({
            key: {
              redact: 'me'
            }
          });
          _context8.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref10 = _context8.sent;
          key = _ref10.key;
          is(key, '[Redacted]');

        case 9:
        case "end":
          return _context8.stop();
      }
    }
  });
});
test('redact option – next level key then top level key', function _callee9(_ref11) {
  var is, stream, instance, _ref12, key;

  return regeneratorRuntime.async(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          is = _ref11.is;
          stream = sink();
          instance = pino({
            redact: ['key.foo', 'key']
          }, stream);
          instance.info({
            key: {
              redact: 'me'
            }
          });
          _context9.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref12 = _context9.sent;
          key = _ref12.key;
          is(key, '[Redacted]');

        case 9:
        case "end":
          return _context9.stop();
      }
    }
  });
});
test('redact option – object', function _callee10(_ref13) {
  var is, stream, instance, _ref14, req;

  return regeneratorRuntime.async(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          is = _ref13.is;
          stream = sink();
          instance = pino({
            redact: ['req.headers.cookie']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context10.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref14 = _context10.sent;
          req = _ref14.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context10.stop();
      }
    }
  });
});
test('redact option – child object', function _callee11(_ref15) {
  var is, stream, instance, _ref16, req;

  return regeneratorRuntime.async(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          is = _ref15.is;
          stream = sink();
          instance = pino({
            redact: ['req.headers.cookie']
          }, stream);
          instance.child({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          }).info('message completed');
          _context11.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref16 = _context11.sent;
          req = _ref16.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context11.stop();
      }
    }
  });
});
test('redact option – interpolated object', function _callee12(_ref17) {
  var is, stream, instance, _ref18, msg;

  return regeneratorRuntime.async(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          is = _ref17.is;
          stream = sink();
          instance = pino({
            redact: ['req.headers.cookie']
          }, stream);
          instance.info('test', {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context12.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref18 = _context12.sent;
          msg = _ref18.msg;
          is(JSON.parse(msg.replace(/test /, '')).req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context12.stop();
      }
    }
  });
});
test('redact.paths option – object', function _callee13(_ref19) {
  var is, stream, instance, _ref20, req;

  return regeneratorRuntime.async(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          is = _ref19.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie']
            }
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context13.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref20 = _context13.sent;
          req = _ref20.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context13.stop();
      }
    }
  });
});
test('redact.paths option – child object', function _callee14(_ref21) {
  var is, stream, instance, _ref22, req;

  return regeneratorRuntime.async(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          is = _ref21.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie']
            }
          }, stream);
          instance.child({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          }).info('message completed');
          _context14.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref22 = _context14.sent;
          req = _ref22.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context14.stop();
      }
    }
  });
});
test('redact.paths option – interpolated object', function _callee15(_ref23) {
  var is, stream, instance, _ref24, msg;

  return regeneratorRuntime.async(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          is = _ref23.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie']
            }
          }, stream);
          instance.info('test', {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context15.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref24 = _context15.sent;
          msg = _ref24.msg;
          is(JSON.parse(msg.replace(/test /, '')).req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context15.stop();
      }
    }
  });
});
test('redact.censor option – sets the redact value', function _callee16(_ref25) {
  var is, stream, instance, _ref26, req;

  return regeneratorRuntime.async(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          is = _ref25.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie'],
              censor: 'test'
            }
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context16.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref26 = _context16.sent;
          req = _ref26.req;
          is(req.headers.cookie, 'test');

        case 9:
        case "end":
          return _context16.stop();
      }
    }
  });
});
test('redact.remove option – removes both key and value', function _callee17(_ref27) {
  var is, stream, instance, _ref28, req;

  return regeneratorRuntime.async(function _callee17$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          is = _ref27.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie'],
              remove: true
            }
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context17.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref28 = _context17.sent;
          req = _ref28.req;
          is('cookie' in req.headers, false);

        case 9:
        case "end":
          return _context17.stop();
      }
    }
  });
});
test('redact.remove – top level key', function _callee18(_ref29) {
  var is, stream, instance, o;
  return regeneratorRuntime.async(function _callee18$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          is = _ref29.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['key'],
              remove: true
            }
          }, stream);
          instance.info({
            key: {
              redact: 'me'
            }
          });
          _context18.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          o = _context18.sent;
          is('key' in o, false);

        case 8:
        case "end":
          return _context18.stop();
      }
    }
  });
});
test('redact.remove – top level key in child logger', function _callee19(_ref30) {
  var is, stream, opts, instance, o;
  return regeneratorRuntime.async(function _callee19$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          is = _ref30.is;
          stream = sink();
          opts = {
            redact: {
              paths: ['key'],
              remove: true
            }
          };
          instance = pino(opts, stream).child({
            key: {
              redact: 'me'
            }
          });
          instance.info('test');
          _context19.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context19.sent;
          is('key' in o, false);

        case 9:
        case "end":
          return _context19.stop();
      }
    }
  });
});
test('redact.paths preserves original object values after the log write', function _callee20(_ref31) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee20$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          is = _ref31.is;
          stream = sink();
          instance = pino({
            redact: ['req.headers.cookie']
          }, stream);
          obj = {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          };
          instance.info(obj);
          _context20.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context20.sent;
          is(o.req.headers.cookie, '[Redacted]');
          is(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');

        case 10:
        case "end":
          return _context20.stop();
      }
    }
  });
});
test('redact.paths preserves original object values after the log write', function _callee21(_ref32) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee21$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          is = _ref32.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie']
            }
          }, stream);
          obj = {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          };
          instance.info(obj);
          _context21.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context21.sent;
          is(o.req.headers.cookie, '[Redacted]');
          is(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');

        case 10:
        case "end":
          return _context21.stop();
      }
    }
  });
});
test('redact.censor preserves original object values after the log write', function _callee22(_ref33) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee22$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          is = _ref33.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie'],
              censor: 'test'
            }
          }, stream);
          obj = {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          };
          instance.info(obj);
          _context22.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context22.sent;
          is(o.req.headers.cookie, 'test');
          is(obj.req.headers.cookie, 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;');

        case 10:
        case "end":
          return _context22.stop();
      }
    }
  });
});
test('redact.remove preserves original object values after the log write', function _callee23(_ref34) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee23$(_context23) {
    while (1) {
      switch (_context23.prev = _context23.next) {
        case 0:
          is = _ref34.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['req.headers.cookie'],
              remove: true
            }
          }, stream);
          obj = {
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          };
          instance.info(obj);
          _context23.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context23.sent;
          is('cookie' in o.req.headers, false);
          is('cookie' in obj.req.headers, true);

        case 10:
        case "end":
          return _context23.stop();
      }
    }
  });
});
test('redact – supports last position wildcard paths', function _callee24(_ref35) {
  var is, stream, instance, _ref36, req;

  return regeneratorRuntime.async(function _callee24$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          is = _ref35.is;
          stream = sink();
          instance = pino({
            redact: ['req.headers.*']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context24.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref36 = _context24.sent;
          req = _ref36.req;
          is(req.headers.cookie, '[Redacted]');
          is(req.headers.host, '[Redacted]');
          is(req.headers.connection, '[Redacted]');

        case 11:
        case "end":
          return _context24.stop();
      }
    }
  });
});
test('redact – supports first position wildcard paths', function _callee25(_ref37) {
  var is, stream, instance, _ref38, req;

  return regeneratorRuntime.async(function _callee25$(_context25) {
    while (1) {
      switch (_context25.prev = _context25.next) {
        case 0:
          is = _ref37.is;
          stream = sink();
          instance = pino({
            redact: ['*.headers']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context25.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref38 = _context25.sent;
          req = _ref38.req;
          is(req.headers, '[Redacted]');

        case 9:
        case "end":
          return _context25.stop();
      }
    }
  });
});
test('redact – supports first position wildcards before other paths', function _callee26(_ref39) {
  var is, stream, instance, _ref40, req;

  return regeneratorRuntime.async(function _callee26$(_context26) {
    while (1) {
      switch (_context26.prev = _context26.next) {
        case 0:
          is = _ref39.is;
          stream = sink();
          instance = pino({
            redact: ['*.headers.cookie', 'req.id']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context26.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref40 = _context26.sent;
          req = _ref40.req;
          is(req.headers.cookie, '[Redacted]');
          is(req.id, '[Redacted]');

        case 10:
        case "end":
          return _context26.stop();
      }
    }
  });
});
test('redact – supports first position wildcards after other paths', function _callee27(_ref41) {
  var is, stream, instance, _ref42, req;

  return regeneratorRuntime.async(function _callee27$(_context27) {
    while (1) {
      switch (_context27.prev = _context27.next) {
        case 0:
          is = _ref41.is;
          stream = sink();
          instance = pino({
            redact: ['req.id', '*.headers.cookie']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context27.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref42 = _context27.sent;
          req = _ref42.req;
          is(req.headers.cookie, '[Redacted]');
          is(req.id, '[Redacted]');

        case 10:
        case "end":
          return _context27.stop();
      }
    }
  });
});
test('redact – supports first position wildcards after top level keys', function _callee28(_ref43) {
  var is, stream, instance, _ref44, req;

  return regeneratorRuntime.async(function _callee28$(_context28) {
    while (1) {
      switch (_context28.prev = _context28.next) {
        case 0:
          is = _ref43.is;
          stream = sink();
          instance = pino({
            redact: ['key', '*.headers.cookie']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context28.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref44 = _context28.sent;
          req = _ref44.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context28.stop();
      }
    }
  });
});
test('redact – supports top level wildcard', function _callee29(_ref45) {
  var is, stream, instance, _ref46, req;

  return regeneratorRuntime.async(function _callee29$(_context29) {
    while (1) {
      switch (_context29.prev = _context29.next) {
        case 0:
          is = _ref45.is;
          stream = sink();
          instance = pino({
            redact: ['*']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context29.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref46 = _context29.sent;
          req = _ref46.req;
          is(req, '[Redacted]');

        case 9:
        case "end":
          return _context29.stop();
      }
    }
  });
});
test('redact – supports top level wildcard with a censor function', function _callee30(_ref47) {
  var is, stream, instance, _ref48, req;

  return regeneratorRuntime.async(function _callee30$(_context30) {
    while (1) {
      switch (_context30.prev = _context30.next) {
        case 0:
          is = _ref47.is;
          stream = sink();
          instance = pino({
            redact: {
              paths: ['*'],
              censor: function censor() {
                return '[Redacted]';
              }
            }
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context30.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref48 = _context30.sent;
          req = _ref48.req;
          is(req, '[Redacted]');

        case 9:
        case "end":
          return _context30.stop();
      }
    }
  });
});
test('redact – supports top level wildcard and leading wildcard', function _callee31(_ref49) {
  var is, stream, instance, _ref50, req;

  return regeneratorRuntime.async(function _callee31$(_context31) {
    while (1) {
      switch (_context31.prev = _context31.next) {
        case 0:
          is = _ref49.is;
          stream = sink();
          instance = pino({
            redact: ['*', '*.req']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context31.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref50 = _context31.sent;
          req = _ref50.req;
          is(req, '[Redacted]');

        case 9:
        case "end":
          return _context31.stop();
      }
    }
  });
});
test('redact – supports intermediate wildcard paths', function _callee32(_ref51) {
  var is, stream, instance, _ref52, req;

  return regeneratorRuntime.async(function _callee32$(_context32) {
    while (1) {
      switch (_context32.prev = _context32.next) {
        case 0:
          is = _ref51.is;
          stream = sink();
          instance = pino({
            redact: ['req.*.cookie']
          }, stream);
          instance.info({
            req: {
              id: 7915,
              method: 'GET',
              url: '/',
              headers: {
                host: 'localhost:3000',
                connection: 'keep-alive',
                cookie: 'SESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;'
              },
              remoteAddress: '::ffff:127.0.0.1',
              remotePort: 58022
            }
          });
          _context32.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref52 = _context32.sent;
          req = _ref52.req;
          is(req.headers.cookie, '[Redacted]');

        case 9:
        case "end":
          return _context32.stop();
      }
    }
  });
});
test('redacts numbers at the top level', function _callee33(_ref53) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee33$(_context33) {
    while (1) {
      switch (_context33.prev = _context33.next) {
        case 0:
          is = _ref53.is;
          stream = sink();
          instance = pino({
            redact: ['id']
          }, stream);
          obj = {
            id: 7915
          };
          instance.info(obj);
          _context33.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context33.sent;
          is(o.id, '[Redacted]');

        case 9:
        case "end":
          return _context33.stop();
      }
    }
  });
});
test('redacts booleans at the top level', function _callee34(_ref54) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee34$(_context34) {
    while (1) {
      switch (_context34.prev = _context34.next) {
        case 0:
          is = _ref54.is;
          stream = sink();
          instance = pino({
            redact: ['maybe']
          }, stream);
          obj = {
            maybe: true
          };
          instance.info(obj);
          _context34.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context34.sent;
          is(o.maybe, '[Redacted]');

        case 9:
        case "end":
          return _context34.stop();
      }
    }
  });
});
test('redacts strings at the top level', function _callee35(_ref55) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee35$(_context35) {
    while (1) {
      switch (_context35.prev = _context35.next) {
        case 0:
          is = _ref55.is;
          stream = sink();
          instance = pino({
            redact: ['s']
          }, stream);
          obj = {
            s: 's'
          };
          instance.info(obj);
          _context35.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context35.sent;
          is(o.s, '[Redacted]');

        case 9:
        case "end":
          return _context35.stop();
      }
    }
  });
});
test('does not redact primitives if not objects', function _callee36(_ref56) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee36$(_context36) {
    while (1) {
      switch (_context36.prev = _context36.next) {
        case 0:
          is = _ref56.is;
          stream = sink();
          instance = pino({
            redact: ['a.b']
          }, stream);
          obj = {
            a: 42
          };
          instance.info(obj);
          _context36.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context36.sent;
          is(o.a, 42);

        case 9:
        case "end":
          return _context36.stop();
      }
    }
  });
});
test('redacts null at the top level', function _callee37(_ref57) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee37$(_context37) {
    while (1) {
      switch (_context37.prev = _context37.next) {
        case 0:
          is = _ref57.is;
          stream = sink();
          instance = pino({
            redact: ['n']
          }, stream);
          obj = {
            n: null
          };
          instance.info(obj);
          _context37.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context37.sent;
          is(o.n, '[Redacted]');

        case 9:
        case "end":
          return _context37.stop();
      }
    }
  });
});
test('supports bracket notation', function _callee38(_ref58) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee38$(_context38) {
    while (1) {
      switch (_context38.prev = _context38.next) {
        case 0:
          is = _ref58.is;
          stream = sink();
          instance = pino({
            redact: ['a["b.b"]']
          }, stream);
          obj = {
            a: {
              'b.b': 'c'
            }
          };
          instance.info(obj);
          _context38.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context38.sent;
          is(o.a['b.b'], '[Redacted]');

        case 9:
        case "end":
          return _context38.stop();
      }
    }
  });
});
test('supports bracket notation with further nesting', function _callee39(_ref59) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee39$(_context39) {
    while (1) {
      switch (_context39.prev = _context39.next) {
        case 0:
          is = _ref59.is;
          stream = sink();
          instance = pino({
            redact: ['a["b.b"].c']
          }, stream);
          obj = {
            a: {
              'b.b': {
                c: 'd'
              }
            }
          };
          instance.info(obj);
          _context39.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context39.sent;
          is(o.a['b.b'].c, '[Redacted]');

        case 9:
        case "end":
          return _context39.stop();
      }
    }
  });
});
test('supports bracket notation with empty string as path segment', function _callee40(_ref60) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee40$(_context40) {
    while (1) {
      switch (_context40.prev = _context40.next) {
        case 0:
          is = _ref60.is;
          stream = sink();
          instance = pino({
            redact: ['a[""].c']
          }, stream);
          obj = {
            a: {
              '': {
                c: 'd'
              }
            }
          };
          instance.info(obj);
          _context40.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context40.sent;
          is(o.a[''].c, '[Redacted]');

        case 9:
        case "end":
          return _context40.stop();
      }
    }
  });
});
test('supports leading bracket notation (single quote)', function _callee41(_ref61) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee41$(_context41) {
    while (1) {
      switch (_context41.prev = _context41.next) {
        case 0:
          is = _ref61.is;
          stream = sink();
          instance = pino({
            redact: ['[\'a.a\'].b']
          }, stream);
          obj = {
            'a.a': {
              b: 'c'
            }
          };
          instance.info(obj);
          _context41.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context41.sent;
          is(o['a.a'].b, '[Redacted]');

        case 9:
        case "end":
          return _context41.stop();
      }
    }
  });
});
test('supports leading bracket notation (double quote)', function _callee42(_ref62) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee42$(_context42) {
    while (1) {
      switch (_context42.prev = _context42.next) {
        case 0:
          is = _ref62.is;
          stream = sink();
          instance = pino({
            redact: ['["a.a"].b']
          }, stream);
          obj = {
            'a.a': {
              b: 'c'
            }
          };
          instance.info(obj);
          _context42.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context42.sent;
          is(o['a.a'].b, '[Redacted]');

        case 9:
        case "end":
          return _context42.stop();
      }
    }
  });
});
test('supports leading bracket notation (backtick quote)', function _callee43(_ref63) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee43$(_context43) {
    while (1) {
      switch (_context43.prev = _context43.next) {
        case 0:
          is = _ref63.is;
          stream = sink();
          instance = pino({
            redact: ['[`a.a`].b']
          }, stream);
          obj = {
            'a.a': {
              b: 'c'
            }
          };
          instance.info(obj);
          _context43.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context43.sent;
          is(o['a.a'].b, '[Redacted]');

        case 9:
        case "end":
          return _context43.stop();
      }
    }
  });
});
test('supports leading bracket notation (single-segment path)', function _callee44(_ref64) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee44$(_context44) {
    while (1) {
      switch (_context44.prev = _context44.next) {
        case 0:
          is = _ref64.is;
          stream = sink();
          instance = pino({
            redact: ['[`a.a`]']
          }, stream);
          obj = {
            'a.a': {
              b: 'c'
            }
          };
          instance.info(obj);
          _context44.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context44.sent;
          is(o['a.a'], '[Redacted]');

        case 9:
        case "end":
          return _context44.stop();
      }
    }
  });
});
test('supports leading bracket notation (single-segment path, wilcard)', function _callee45(_ref65) {
  var is, stream, instance, obj, o;
  return regeneratorRuntime.async(function _callee45$(_context45) {
    while (1) {
      switch (_context45.prev = _context45.next) {
        case 0:
          is = _ref65.is;
          stream = sink();
          instance = pino({
            redact: ['[*]']
          }, stream);
          obj = {
            'a.a': {
              b: 'c'
            }
          };
          instance.info(obj);
          _context45.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context45.sent;
          is(o['a.a'], '[Redacted]');

        case 9:
        case "end":
          return _context45.stop();
      }
    }
  });
});