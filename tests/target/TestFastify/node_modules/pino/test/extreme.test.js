'use strict';

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.trim");

require("regenerator-runtime/runtime");

var os = require('os');

var _require = require('fs'),
    createWriteStream = _require.createWriteStream;

var _require2 = require('path'),
    join = _require2.join;

var _require3 = require('tap'),
    test = _require3.test;

var _require4 = require('child_process'),
    fork = _require4.fork;

var writer = require('flush-write-stream');

var _require5 = require('./helper'),
    once = _require5.once,
    getPathToNull = _require5.getPathToNull;

test('extreme mode', function _callee(_ref) {
  var is, teardown, now, hostname, proc, pino, expected, actual, normal, dest, extreme, i, expected2, actual2, child;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is, teardown = _ref.teardown;
          now = Date.now;
          hostname = os.hostname;
          proc = process;
          global.process = {
            __proto__: process,
            pid: 123456
          };

          Date.now = function () {
            return 1459875739796;
          };

          os.hostname = function () {
            return 'abcdefghijklmnopqr';
          };

          delete require.cache[require.resolve('../')];
          pino = require('../');
          expected = '';
          actual = '';
          normal = pino(writer(function (s, enc, cb) {
            expected += s;
            cb();
          }));
          dest = createWriteStream(getPathToNull());

          dest.write = function (s) {
            actual += s;
          };

          extreme = pino(dest);
          i = 44;

          while (i--) {
            normal.info('h');
            extreme.info('h');
          }

          expected2 = expected.split('\n')[0];
          actual2 = '';
          child = fork(join(__dirname, '/fixtures/extreme.js'), {
            silent: true
          });
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual2 += s;
            cb();
          }));
          _context.next = 23;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 23:
          is(actual, expected);
          is(actual2.trim(), expected2);
          teardown(function () {
            os.hostname = hostname;
            Date.now = now;
            global.process = proc;
          });

        case 26:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('extreme mode with child', function _callee2(_ref2) {
  var is, teardown, now, hostname, proc, pino, expected, actual, normal, dest, extreme, i, expected2, actual2, child;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is, teardown = _ref2.teardown;
          now = Date.now;
          hostname = os.hostname;
          proc = process;
          global.process = {
            __proto__: process,
            pid: 123456
          };

          Date.now = function () {
            return 1459875739796;
          };

          os.hostname = function () {
            return 'abcdefghijklmnopqr';
          };

          delete require.cache[require.resolve('../')];
          pino = require('../');
          expected = '';
          actual = '';
          normal = pino(writer(function (s, enc, cb) {
            expected += s;
            cb();
          })).child({
            hello: 'world'
          });
          dest = createWriteStream(getPathToNull());

          dest.write = function (s) {
            actual += s;
          };

          extreme = pino(dest).child({
            hello: 'world'
          });
          i = 500;

          while (i--) {
            normal.info('h');
            extreme.info('h');
          }

          extreme.flush();
          expected2 = expected.split('\n')[0];
          actual2 = '';
          child = fork(join(__dirname, '/fixtures/extreme-child.js'), {
            silent: true
          });
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual2 += s;
            cb();
          }));
          _context2.next = 24;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 24:
          is(actual, expected);
          is(actual2.trim(), expected2);
          teardown(function () {
            os.hostname = hostname;
            Date.now = now;
            global.process = proc;
          });

        case 27:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('throw an error if extreme is passed', function _callee3(_ref3) {
  var _throws, pino;

  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _throws = _ref3["throws"];
          pino = require('..');

          _throws(function () {
            pino({
              extreme: true
            });
          });

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('flush does nothing without extreme mode', function _callee4() {
  var instance;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          instance = require('..')();
          instance.flush();

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  });
});