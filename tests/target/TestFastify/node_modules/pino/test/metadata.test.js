'use strict';

var os = require('os');

var _require = require('tap'),
    test = _require.test;

var pino = require('../');

var _process = process,
    pid = _process.pid;
var hostname = os.hostname();
test('metadata works', function _callee(_ref) {
  var ok, same, is, now, result, instance;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ok = _ref.ok, same = _ref.same, is = _ref.is;
          now = Date.now();
          instance = pino({}, {
            [Symbol.for('pino.metadata')]: true,

            write(chunk) {
              is(instance, this.lastLogger);
              is(30, this.lastLevel);
              is('a msg', this.lastMsg);
              ok(Number(this.lastTime) >= now);
              same(this.lastObj, {
                hello: 'world',
                msg: 'a msg'
              });
              result = JSON.parse(chunk);
              ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
              delete result.time;
              same(result, {
                pid: pid,
                hostname: hostname,
                level: 30,
                hello: 'world',
                msg: 'a msg',
                v: 1
              });
            }

          });
          instance.info({
            hello: 'world'
          }, 'a msg');

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('child loggers works', function _callee2(_ref2) {
  var ok, same, is, result, instance, child;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ok = _ref2.ok, same = _ref2.same, is = _ref2.is;
          instance = pino({}, {
            [Symbol.for('pino.metadata')]: true,

            write(chunk) {
              is(child, this.lastLogger);
              is(30, this.lastLevel);
              is('a msg', this.lastMsg);
              same(this.lastObj, {
                from: 'child',
                msg: 'a msg'
              });
              result = JSON.parse(chunk);
              ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
              delete result.time;
              same(result, {
                pid: pid,
                hostname: hostname,
                level: 30,
                hello: 'world',
                from: 'child',
                msg: 'a msg',
                v: 1
              });
            }

          });
          child = instance.child({
            hello: 'world'
          });
          child.info({
            from: 'child'
          }, 'a msg');

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('without object', function _callee3(_ref3) {
  var ok, same, is, result, instance;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ok = _ref3.ok, same = _ref3.same, is = _ref3.is;
          instance = pino({}, {
            [Symbol.for('pino.metadata')]: true,

            write(chunk) {
              is(instance, this.lastLogger);
              is(30, this.lastLevel);
              is('a msg', this.lastMsg);
              same({
                msg: 'a msg'
              }, this.lastObj);
              result = JSON.parse(chunk);
              ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
              delete result.time;
              same(result, {
                pid: pid,
                hostname: hostname,
                level: 30,
                msg: 'a msg',
                v: 1
              });
            }

          });
          instance.info('a msg');

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('without msg', function _callee4(_ref4) {
  var ok, same, is, result, instance;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ok = _ref4.ok, same = _ref4.same, is = _ref4.is;
          instance = pino({}, {
            [Symbol.for('pino.metadata')]: true,

            write(chunk) {
              is(instance, this.lastLogger);
              is(30, this.lastLevel);
              is(undefined, this.lastMsg);
              same({
                hello: 'world'
              }, this.lastObj);
              result = JSON.parse(chunk);
              ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
              delete result.time;
              same(result, {
                pid: pid,
                hostname: hostname,
                level: 30,
                hello: 'world',
                v: 1
              });
            }

          });
          instance.info({
            hello: 'world'
          });

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});