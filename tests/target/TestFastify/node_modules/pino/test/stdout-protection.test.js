'use strict';

var _require = require('tap'),
    test = _require.test;

var _require2 = require('path'),
    join = _require2.join;

var _require3 = require('child_process'),
    fork = _require3.fork;

var _require4 = require('./helper'),
    once = _require4.once;

var writer = require('flush-write-stream');

test('do not use SonicBoom is someone tampered with process.stdout.write', function _callee(_ref) {
  var isNot, actual, child;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          isNot = _ref.isNot;
          actual = '';
          child = fork(join(__dirname, 'fixtures', 'stdout-hack-protection.js'), {
            silent: true
          });
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual += s;
            cb();
          }));
          _context.next = 6;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 6:
          isNot(actual.match(/^hack/), null);

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
});