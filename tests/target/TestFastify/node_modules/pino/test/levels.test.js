'use strict';

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("regenerator-runtime/runtime");

var _require = require('tap'),
    test = _require.test;

var _require2 = require('./helper'),
    sink = _require2.sink,
    once = _require2.once,
    check = _require2.check;

var pino = require('../');

test('set the level by string', function _callee(_ref) {
  var is, expected, stream, instance, result, current;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is;
          expected = [{
            level: 50,
            msg: 'this is an error'
          }, {
            level: 60,
            msg: 'this is fatal'
          }];
          stream = sink();
          instance = pino(stream);
          instance.level = 'error';
          instance.info('hello world');
          instance.error('this is an error');
          instance.fatal('this is fatal');
          _context.next = 10;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 10:
          result = _context.sent;
          current = expected.shift();
          check(is, result, current.level, current.msg);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('the wrong level throws', function _callee2(_ref2) {
  var _throws, instance;

  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _throws = _ref2["throws"];
          instance = pino();

          _throws(function () {
            instance.level = 'kaboom';
          });

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('set the level by number', function _callee3(_ref3) {
  var is, expected, stream, instance, result, current;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          is = _ref3.is;
          expected = [{
            level: 50,
            msg: 'this is an error'
          }, {
            level: 60,
            msg: 'this is fatal'
          }];
          stream = sink();
          instance = pino(stream);
          instance.level = 50;
          instance.info('hello world');
          instance.error('this is an error');
          instance.fatal('this is fatal');
          _context3.next = 10;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 10:
          result = _context3.sent;
          current = expected.shift();
          check(is, result, current.level, current.msg);

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('exposes level string mappings', function _callee4(_ref4) {
  var is;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          is = _ref4.is;
          is(pino.levels.values.error, 50);

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('exposes level number mappings', function _callee5(_ref5) {
  var is;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          is = _ref5.is;
          is(pino.levels.labels[50], 'error');

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('returns level integer', function _callee6(_ref6) {
  var is, instance;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          is = _ref6.is;
          instance = pino({
            level: 'error'
          });
          is(instance.levelVal, 50);

        case 3:
        case "end":
          return _context6.stop();
      }
    }
  });
});
test('child returns level integer', function _callee7(_ref7) {
  var is, parent, child;
  return regeneratorRuntime.async(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          is = _ref7.is;
          parent = pino({
            level: 'error'
          });
          child = parent.child({
            foo: 'bar'
          });
          is(child.levelVal, 50);

        case 4:
        case "end":
          return _context7.stop();
      }
    }
  });
});
test('set the level via exported pino function', function _callee8(_ref8) {
  var is, expected, stream, instance, result, current;
  return regeneratorRuntime.async(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          is = _ref8.is;
          expected = [{
            level: 50,
            msg: 'this is an error'
          }, {
            level: 60,
            msg: 'this is fatal'
          }];
          stream = sink();
          instance = pino({
            level: 'error'
          }, stream);
          instance.info('hello world');
          instance.error('this is an error');
          instance.fatal('this is fatal');
          _context8.next = 9;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 9:
          result = _context8.sent;
          current = expected.shift();
          check(is, result, current.level, current.msg);

        case 12:
        case "end":
          return _context8.stop();
      }
    }
  });
});
test('level-change event', function _callee9(_ref9) {
  var is, instance, handle, count, l1, l2, l3;
  return regeneratorRuntime.async(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          handle = function _ref10(lvl, val, prevLvl, prevVal) {
            is(lvl, 'trace');
            is(val, 10);
            is(prevLvl, 'info');
            is(prevVal, 30);
          };

          is = _ref9.is;
          instance = pino();
          instance.on('level-change', handle);
          instance.level = 'trace';
          instance.removeListener('level-change', handle);
          instance.level = 'info';
          count = 0;

          l1 = function l1() {
            return count++;
          };

          l2 = function l2() {
            return count++;
          };

          l3 = function l3() {
            return count++;
          };

          instance.on('level-change', l1);
          instance.on('level-change', l2);
          instance.on('level-change', l3);
          instance.level = 'trace';
          instance.removeListener('level-change', l3);
          instance.level = 'fatal';
          instance.removeListener('level-change', l1);
          instance.level = 'debug';
          instance.removeListener('level-change', l2);
          instance.level = 'info';
          is(count, 6);

        case 22:
        case "end":
          return _context9.stop();
      }
    }
  });
});
test('enable', function _callee10(_ref11) {
  var fail, instance;
  return regeneratorRuntime.async(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          fail = _ref11.fail;
          instance = pino({
            level: 'trace',
            enabled: false
          }, sink(function (result, enc) {
            fail('no data should be logged');
          }));
          Object.keys(pino.levels.values).forEach(function (level) {
            instance[level]('hello world');
          });

        case 3:
        case "end":
          return _context10.stop();
      }
    }
  });
});
test('silent level', function _callee11(_ref12) {
  var fail, instance;
  return regeneratorRuntime.async(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          fail = _ref12.fail;
          instance = pino({
            level: 'silent'
          }, sink(function (result, enc) {
            fail('no data should be logged');
          }));
          Object.keys(pino.levels.values).forEach(function (level) {
            instance[level]('hello world');
          });

        case 3:
        case "end":
          return _context11.stop();
      }
    }
  });
});
test('set silent via Infinity', function _callee12(_ref13) {
  var fail, instance;
  return regeneratorRuntime.async(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          fail = _ref13.fail;
          instance = pino({
            level: Infinity
          }, sink(function (result, enc) {
            fail('no data should be logged');
          }));
          Object.keys(pino.levels.values).forEach(function (level) {
            instance[level]('hello world');
          });

        case 3:
        case "end":
          return _context12.stop();
      }
    }
  });
});
test('exposed levels', function _callee13(_ref14) {
  var same;
  return regeneratorRuntime.async(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          same = _ref14.same;
          same(Object.keys(pino.levels.values), ['trace', 'debug', 'info', 'warn', 'error', 'fatal']);

        case 2:
        case "end":
          return _context13.stop();
      }
    }
  });
});
test('exposed labels', function _callee14(_ref15) {
  var same;
  return regeneratorRuntime.async(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          same = _ref15.same;
          same(Object.keys(pino.levels.labels), ['10', '20', '30', '40', '50', '60']);

        case 2:
        case "end":
          return _context14.stop();
      }
    }
  });
});
test('setting level in child', function _callee15(_ref16) {
  var is, expected, instance;
  return regeneratorRuntime.async(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          is = _ref16.is;
          expected = [{
            level: 50,
            msg: 'this is an error'
          }, {
            level: 60,
            msg: 'this is fatal'
          }];
          instance = pino(sink(function (result, enc, cb) {
            var current = expected.shift();
            check(is, result, current.level, current.msg);
            cb();
          })).child({
            level: 30
          });
          instance.level = 'error';
          instance.info('hello world');
          instance.error('this is an error');
          instance.fatal('this is fatal');

        case 7:
        case "end":
          return _context15.stop();
      }
    }
  });
});
test('setting level by assigning a number to level', function _callee16(_ref17) {
  var is, instance;
  return regeneratorRuntime.async(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          is = _ref17.is;
          instance = pino();
          is(instance.levelVal, 30);
          is(instance.level, 'info');
          instance.level = 50;
          is(instance.levelVal, 50);
          is(instance.level, 'error');

        case 7:
        case "end":
          return _context16.stop();
      }
    }
  });
});
test('setting level by number to unknown value results in a throw', function _callee17(_ref18) {
  var _throws2, instance;

  return regeneratorRuntime.async(function _callee17$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          _throws2 = _ref18["throws"];
          instance = pino();

          _throws2(function () {
            instance.level = 973;
          });

        case 3:
        case "end":
          return _context17.stop();
      }
    }
  });
});
test('setting level by assigning a known label to level', function _callee18(_ref19) {
  var is, instance;
  return regeneratorRuntime.async(function _callee18$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          is = _ref19.is;
          instance = pino();
          is(instance.levelVal, 30);
          is(instance.level, 'info');
          instance.level = 'error';
          is(instance.levelVal, 50);
          is(instance.level, 'error');

        case 7:
        case "end":
          return _context18.stop();
      }
    }
  });
});
test('levelVal is read only', function _callee19(_ref20) {
  var _throws3, instance;

  return regeneratorRuntime.async(function _callee19$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          _throws3 = _ref20["throws"];
          instance = pino();

          _throws3(function () {
            instance.levelVal = 20;
          });

        case 3:
        case "end":
          return _context19.stop();
      }
    }
  });
});
test('produces labels when told to', function _callee20(_ref21) {
  var is, expected, instance;
  return regeneratorRuntime.async(function _callee20$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          is = _ref21.is;
          expected = [{
            level: 'info',
            msg: 'hello world'
          }];
          instance = pino({
            useLevelLabels: true
          }, sink(function (result, enc, cb) {
            var current = expected.shift();
            check(is, result, current.level, current.msg);
            cb();
          }));
          instance.info('hello world');

        case 4:
        case "end":
          return _context20.stop();
      }
    }
  });
});
test('resets levels from labels to numbers', function _callee21(_ref22) {
  var is, expected, instance;
  return regeneratorRuntime.async(function _callee21$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          is = _ref22.is;
          expected = [{
            level: 30,
            msg: 'hello world'
          }];
          pino({
            useLevelLabels: true
          });
          instance = pino({
            useLevelLabels: false
          }, sink(function (result, enc, cb) {
            var current = expected.shift();
            check(is, result, current.level, current.msg);
            cb();
          }));
          instance.info('hello world');

        case 5:
        case "end":
          return _context21.stop();
      }
    }
  });
});
test('changes label naming when told to', function _callee22(_ref23) {
  var is, expected, instance;
  return regeneratorRuntime.async(function _callee22$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          is = _ref23.is;
          expected = [{
            priority: 30,
            msg: 'hello world'
          }];
          instance = pino({
            changeLevelName: 'priority'
          }, sink(function (result, enc, cb) {
            var current = expected.shift();
            is(result.priority, current.priority);
            is(result.msg, current.msg);
            cb();
          }));
          instance.info('hello world');

        case 4:
        case "end":
          return _context22.stop();
      }
    }
  });
});
test('children produce labels when told to', function _callee23(_ref24) {
  var is, expected, instance, child1, child2;
  return regeneratorRuntime.async(function _callee23$(_context23) {
    while (1) {
      switch (_context23.prev = _context23.next) {
        case 0:
          is = _ref24.is;
          expected = [{
            level: 'info',
            msg: 'child 1'
          }, {
            level: 'info',
            msg: 'child 2'
          }];
          instance = pino({
            useLevelLabels: true
          }, sink(function (result, enc, cb) {
            var current = expected.shift();
            check(is, result, current.level, current.msg);
            cb();
          }));
          child1 = instance.child({
            name: 'child1'
          });
          child2 = child1.child({
            name: 'child2'
          });
          child1.info('child 1');
          child2.info('child 2');

        case 7:
        case "end":
          return _context23.stop();
      }
    }
  });
});
test('produces labels for custom levels', function _callee24(_ref25) {
  var is, expected, opts, instance;
  return regeneratorRuntime.async(function _callee24$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          is = _ref25.is;
          expected = [{
            level: 'info',
            msg: 'hello world'
          }, {
            level: 'foo',
            msg: 'foobar'
          }];
          opts = {
            useLevelLabels: true,
            customLevels: {
              foo: 35
            }
          };
          instance = pino(opts, sink(function (result, enc, cb) {
            var current = expected.shift();
            check(is, result, current.level, current.msg);
            cb();
          }));
          instance.info('hello world');
          instance.foo('foobar');

        case 6:
        case "end":
          return _context24.stop();
      }
    }
  });
});
test('setting changeLevelName does not affect labels when told to', function _callee25(_ref26) {
  var is, instance;
  return regeneratorRuntime.async(function _callee25$(_context25) {
    while (1) {
      switch (_context25.prev = _context25.next) {
        case 0:
          is = _ref26.is;
          instance = pino({
            useLevelLabels: true,
            changeLevelName: 'priority'
          }, sink(function (result, enc, cb) {
            is(result.priority, 'info');
            cb();
          }));
          instance.info('hello world');

        case 3:
        case "end":
          return _context25.stop();
      }
    }
  });
});
test('throws when creating a default label that does not exist in logger levels', function _callee26(_ref27) {
  var is, _throws4, defaultLevel, message;

  return regeneratorRuntime.async(function _callee26$(_context26) {
    while (1) {
      switch (_context26.prev = _context26.next) {
        case 0:
          is = _ref27.is, _throws4 = _ref27["throws"];
          defaultLevel = 'foo';

          _throws4(function () {
            pino({
              customLevels: {
                bar: 5
              },
              level: defaultLevel
            });
          });

          try {
            pino({
              level: defaultLevel
            });
          } catch (_ref28) {
            message = _ref28.message;
            is(message, "default level:".concat(defaultLevel, " must be included in custom levels"));
          }

        case 4:
        case "end":
          return _context26.stop();
      }
    }
  });
});
test('throws when creating a default value that does not exist in logger levels', function _callee27(_ref29) {
  var is, _throws5, defaultLevel, message;

  return regeneratorRuntime.async(function _callee27$(_context27) {
    while (1) {
      switch (_context27.prev = _context27.next) {
        case 0:
          is = _ref29.is, _throws5 = _ref29["throws"];
          defaultLevel = 15;

          _throws5(function () {
            pino({
              customLevels: {
                bar: 5
              },
              level: defaultLevel
            });
          });

          try {
            pino({
              level: defaultLevel
            });
          } catch (_ref30) {
            message = _ref30.message;
            is(message, "default level:".concat(defaultLevel, " must be included in custom levels"));
          }

        case 4:
        case "end":
          return _context27.stop();
      }
    }
  });
});
test('throws when creating a default value that does not exist in logger levels', function _callee28(_ref31) {
  var is, _throws6, message;

  return regeneratorRuntime.async(function _callee28$(_context28) {
    while (1) {
      switch (_context28.prev = _context28.next) {
        case 0:
          is = _ref31.is, _throws6 = _ref31["throws"];

          _throws6(function () {
            pino({
              customLevels: {
                foo: 5
              },
              useOnlyCustomLevels: true
            });
          });

          try {
            pino({
              customLevels: {
                foo: 5
              },
              useOnlyCustomLevels: true
            });
          } catch (_ref32) {
            message = _ref32.message;
            is(message, 'default level:info must be included in custom levels');
          }

        case 3:
        case "end":
          return _context28.stop();
      }
    }
  });
});
test('passes when creating a default value that exists in logger levels', function _callee29(_ref33) {
  var is, _throws7;

  return regeneratorRuntime.async(function _callee29$(_context29) {
    while (1) {
      switch (_context29.prev = _context29.next) {
        case 0:
          is = _ref33.is, _throws7 = _ref33["throws"];
          pino({
            level: 30
          });

        case 2:
        case "end":
          return _context29.stop();
      }
    }
  });
});
test('fatal method sync-flushes the destination if sync flushing is available', function _callee30(_ref34) {
  var pass, doesNotThrow, plan, stream, instance;
  return regeneratorRuntime.async(function _callee30$(_context30) {
    while (1) {
      switch (_context30.prev = _context30.next) {
        case 0:
          pass = _ref34.pass, doesNotThrow = _ref34.doesNotThrow, plan = _ref34.plan;
          plan(2);
          stream = sink();

          stream.flushSync = function () {
            pass('destination flushed');
          };

          instance = pino(stream);
          instance.fatal('this is fatal');
          _context30.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          doesNotThrow(function () {
            stream.flushSync = undefined;
            instance.fatal('this is fatal');
          });

        case 9:
        case "end":
          return _context30.stop();
      }
    }
  });
});