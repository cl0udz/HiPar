'use strict';

require("core-js/modules/es.array.slice");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/web.timers");

var test = require('tape');

var fresh = require('import-fresh');

var pinoStdSerializers = require('pino-std-serializers');

var pino = require('../browser');

levelTest('fatal');
levelTest('error');
levelTest('warn');
levelTest('info');
levelTest('debug');
levelTest('trace');
test('silent level', function (_ref) {
  var end = _ref.end,
      fail = _ref.fail,
      pass = _ref.pass;
  var instance = pino({
    level: 'silent',
    browser: {
      write: fail
    }
  });
  instance.info('test');
  var child = instance.child({
    test: 'test'
  });
  child.info('msg-test'); // use setTimeout because setImmediate isn't supported in most browsers

  setTimeout(function () {
    pass();
    end();
  }, 0);
});
test('enabled false', function (_ref2) {
  var end = _ref2.end,
      fail = _ref2.fail,
      pass = _ref2.pass;
  var instance = pino({
    enabled: false,
    browser: {
      write: fail
    }
  });
  instance.info('test');
  var child = instance.child({
    test: 'test'
  });
  child.info('msg-test'); // use setTimeout because setImmediate isn't supported in most browsers

  setTimeout(function () {
    pass();
    end();
  }, 0);
});
test('throw if creating child without bindings', function (_ref3) {
  var end = _ref3.end,
      _throws = _ref3["throws"];
  var instance = pino();

  _throws(function () {
    return instance.child();
  });

  end();
});
test('stubs write, flush and ee methods on instance', function (_ref4) {
  var end = _ref4.end,
      ok = _ref4.ok,
      is = _ref4.is;
  var instance = pino();
  ok(isFunc(instance.setMaxListeners));
  ok(isFunc(instance.getMaxListeners));
  ok(isFunc(instance.emit));
  ok(isFunc(instance.addListener));
  ok(isFunc(instance.on));
  ok(isFunc(instance.prependListener));
  ok(isFunc(instance.once));
  ok(isFunc(instance.prependOnceListener));
  ok(isFunc(instance.removeListener));
  ok(isFunc(instance.removeAllListeners));
  ok(isFunc(instance.listeners));
  ok(isFunc(instance.listenerCount));
  ok(isFunc(instance.eventNames));
  ok(isFunc(instance.write));
  ok(isFunc(instance.flush));
  is(instance.on(), undefined);
  end();
});
test('exposes levels object', function (_ref5) {
  var end = _ref5.end,
      same = _ref5.same;
  same(pino.levels, {
    values: {
      fatal: 60,
      error: 50,
      warn: 40,
      info: 30,
      debug: 20,
      trace: 10
    },
    labels: {
      10: 'trace',
      20: 'debug',
      30: 'info',
      40: 'warn',
      50: 'error',
      60: 'fatal'
    }
  });
  end();
});
test('exposes LOG_VERSION', function (_ref6) {
  var end = _ref6.end,
      is = _ref6.is;
  is(pino.LOG_VERSION, 1);
  end();
});
test('exposes faux stdSerializers', function (_ref7) {
  var end = _ref7.end,
      ok = _ref7.ok,
      same = _ref7.same;
  ok(pino.stdSerializers); // make sure faux stdSerializers match pino-std-serializers

  for (var serializer in pinoStdSerializers) {
    ok(pino.stdSerializers[serializer], "pino.stdSerializers.".concat(serializer));
  } // confirm faux methods return empty objects


  same(pino.stdSerializers.req(), {});
  same(pino.stdSerializers.mapHttpRequest(), {});
  same(pino.stdSerializers.mapHttpResponse(), {});
  same(pino.stdSerializers.res(), {}); // confirm wrapping function is a passthrough

  var noChange = {
    foo: 'bar',
    fuz: 42
  };
  same(pino.stdSerializers.wrapRequestSerializer(noChange), noChange);
  same(pino.stdSerializers.wrapResponseSerializer(noChange), noChange);
  end();
});
test('exposes err stdSerializer', function (_ref8) {
  var end = _ref8.end,
      ok = _ref8.ok;
  ok(pino.stdSerializers.err);
  ok(pino.stdSerializers.err(Error()));
  end();
});
consoleMethodTest('error');
consoleMethodTest('fatal', 'error');
consoleMethodTest('warn');
consoleMethodTest('info');
consoleMethodTest('debug');
consoleMethodTest('trace');
absentConsoleMethodTest('error', 'log');
absentConsoleMethodTest('warn', 'error');
absentConsoleMethodTest('info', 'log');
absentConsoleMethodTest('debug', 'log');
absentConsoleMethodTest('trace', 'log'); // do not run this with airtap

if (process.title !== 'browser') {
  test('in absence of console, log methods become noops', function (_ref9) {
    var end = _ref9.end,
        ok = _ref9.ok;
    var console = global.console;
    delete global.console;
    var instance = fresh('../browser')();
    global.console = console;
    ok(fnName(instance.log).match(/noop/));
    ok(fnName(instance.fatal).match(/noop/));
    ok(fnName(instance.error).match(/noop/));
    ok(fnName(instance.warn).match(/noop/));
    ok(fnName(instance.info).match(/noop/));
    ok(fnName(instance.debug).match(/noop/));
    ok(fnName(instance.trace).match(/noop/));
    end();
  });
}

test('opts.browser.asObject logs pino-like object to console', function (_ref10) {
  var end = _ref10.end,
      ok = _ref10.ok,
      is = _ref10.is;
  var info = console.info;

  console.info = function (o) {
    is(o.level, 30);
    is(o.msg, 'test');
    ok(o.time);
    console.info = info;
  };

  var instance = require('../browser')({
    browser: {
      asObject: true
    }
  });

  instance.info('test');
  end();
});
test('opts.browser.write func log single string', function (_ref11) {
  var end = _ref11.end,
      ok = _ref11.ok,
      is = _ref11.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test');
        ok(o.time);
      }
    }
  });
  instance.info('test');
  end();
});
test('opts.browser.write func string joining', function (_ref12) {
  var end = _ref12.end,
      ok = _ref12.ok,
      is = _ref12.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test test2 test3');
        ok(o.time);
      }
    }
  });
  instance.info('test', 'test2', 'test3');
  end();
});
test('opts.browser.write func string joining when asObject is true', function (_ref13) {
  var end = _ref13.end,
      ok = _ref13.ok,
      is = _ref13.is;
  var instance = pino({
    browser: {
      asObject: true,
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test test2 test3');
        ok(o.time);
      }
    }
  });
  instance.info('test', 'test2', 'test3');
  end();
});
test('opts.browser.write func string joining when asObject is true', function (_ref14) {
  var end = _ref14.end,
      ok = _ref14.ok,
      is = _ref14.is;
  var instance = pino({
    browser: {
      asObject: true,
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test test2 test3');
        ok(o.time);
      }
    }
  });
  instance.info('test', 'test2', 'test3');
  end();
});
test('opts.browser.write func string object joining', function (_ref15) {
  var end = _ref15.end,
      ok = _ref15.ok,
      is = _ref15.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test {"test":"test2"} {"test":"test3"}');
        ok(o.time);
      }
    }
  });
  instance.info('test', {
    test: 'test2'
  }, {
    test: 'test3'
  });
  end();
});
test('opts.browser.write func string object joining when asObject is true', function (_ref16) {
  var end = _ref16.end,
      ok = _ref16.ok,
      is = _ref16.is;
  var instance = pino({
    browser: {
      asObject: true,
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test {"test":"test2"} {"test":"test3"}');
        ok(o.time);
      }
    }
  });
  instance.info('test', {
    test: 'test2'
  }, {
    test: 'test3'
  });
  end();
});
test('opts.browser.write func string interpolation', function (_ref17) {
  var end = _ref17.end,
      ok = _ref17.ok,
      is = _ref17.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 'test2 test ({"test":"test3"})');
        ok(o.time);
      }
    }
  });
  instance.info('%s test (%j)', 'test2', {
    test: 'test3'
  });
  end();
});
test('opts.browser.write func number', function (_ref18) {
  var end = _ref18.end,
      ok = _ref18.ok,
      is = _ref18.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.msg, 1);
        ok(o.time);
      }
    }
  });
  instance.info(1);
  end();
});
test('opts.browser.write func log single object', function (_ref19) {
  var end = _ref19.end,
      ok = _ref19.ok,
      is = _ref19.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.test, 'test');
        ok(o.time);
      }
    }
  });
  instance.info({
    test: 'test'
  });
  end();
});
test('opts.browser.write obj writes to methods corresponding to level', function (_ref20) {
  var end = _ref20.end,
      ok = _ref20.ok,
      is = _ref20.is;
  var instance = pino({
    browser: {
      write: {
        error: function error(o) {
          is(o.level, 50);
          is(o.test, 'test');
          ok(o.time);
        }
      }
    }
  });
  instance.error({
    test: 'test'
  });
  end();
});
test('opts.browser.asObject/write supports child loggers', function (_ref21) {
  var end = _ref21.end,
      ok = _ref21.ok,
      is = _ref21.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.test, 'test');
        is(o.msg, 'msg-test');
        ok(o.time);
      }
    }
  });
  var child = instance.child({
    test: 'test'
  });
  child.info('msg-test');
  end();
});
test('opts.browser.asObject/write supports child child loggers', function (_ref22) {
  var end = _ref22.end,
      ok = _ref22.ok,
      is = _ref22.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.test, 'test');
        is(o.foo, 'bar');
        is(o.msg, 'msg-test');
        ok(o.time);
      }
    }
  });
  var child = instance.child({
    test: 'test'
  }).child({
    foo: 'bar'
  });
  child.info('msg-test');
  end();
});
test('opts.browser.asObject/write supports child child child loggers', function (_ref23) {
  var end = _ref23.end,
      ok = _ref23.ok,
      is = _ref23.is;
  var instance = pino({
    browser: {
      write: function write(o) {
        is(o.level, 30);
        is(o.test, 'test');
        is(o.foo, 'bar');
        is(o.baz, 'bop');
        is(o.msg, 'msg-test');
        ok(o.time);
      }
    }
  });
  var child = instance.child({
    test: 'test'
  }).child({
    foo: 'bar'
  }).child({
    baz: 'bop'
  });
  child.info('msg-test');
  end();
});
test('opts.browser.asObject defensively mitigates naughty numbers', function (_ref24) {
  var end = _ref24.end,
      pass = _ref24.pass;
  var instance = pino({
    browser: {
      asObject: true,
      write: function write() {}
    }
  });
  var child = instance.child({
    test: 'test'
  });
  child._childLevel = -10;
  child.info('test');
  pass(); // if we reached here, there was no infinite loop, so, .. pass.

  end();
});
test('opts.browser.write obj falls back to console where a method is not supplied', function (_ref25) {
  var end = _ref25.end,
      ok = _ref25.ok,
      is = _ref25.is;
  var info = console.info;

  console.info = function (o) {
    is(o.level, 30);
    is(o.msg, 'test');
    ok(o.time);
    console.info = info;
  };

  var instance = require('../browser')({
    browser: {
      write: {
        error: function error(o) {
          is(o.level, 50);
          is(o.test, 'test');
          ok(o.time);
        }
      }
    }
  });

  instance.error({
    test: 'test'
  });
  instance.info('test');
  end();
});

function levelTest(name) {
  test(name + ' logs', function (_ref26) {
    var end = _ref26.end,
        is = _ref26.is;
    var msg = 'hello world';
    sink(name, function (args) {
      is(args[0], msg);
      end();
    });
    pino({
      level: name
    })[name](msg);
  });
  test('passing objects at level ' + name, function (_ref27) {
    var end = _ref27.end,
        is = _ref27.is;
    var msg = {
      hello: 'world'
    };
    sink(name, function (args) {
      is(args[0], msg);
      end();
    });
    pino({
      level: name
    })[name](msg);
  });
  test('passing an object and a string at level ' + name, function (_ref28) {
    var end = _ref28.end,
        is = _ref28.is;
    var a = {
      hello: 'world'
    };
    var b = 'a string';
    sink(name, function (args) {
      is(args[0], a);
      is(args[1], b);
      end();
    });
    pino({
      level: name
    })[name](a, b);
  });
  test('formatting logs as ' + name, function (_ref29) {
    var end = _ref29.end,
        is = _ref29.is;
    sink(name, function (args) {
      is(args[0], 'hello %d');
      is(args[1], 42);
      end();
    });
    pino({
      level: name
    })[name]('hello %d', 42);
  });
  test('passing error at level ' + name, function (_ref30) {
    var end = _ref30.end,
        is = _ref30.is;
    var err = new Error('myerror');
    sink(name, function (args) {
      is(args[0], err);
      end();
    });
    pino({
      level: name
    })[name](err);
  });
  test('passing error with a serializer at level ' + name, function (_ref31) {
    var end = _ref31.end,
        is = _ref31.is;
    // in browser - should have no effect (should not crash)
    var err = new Error('myerror');
    sink(name, function (args) {
      is(args[0].err, err);
      end();
    });
    var instance = pino({
      level: name,
      serializers: {
        err: pino.stdSerializers.err
      }
    });
    instance[name]({
      err: err
    });
  });
  test('child logger for level ' + name, function (_ref32) {
    var end = _ref32.end,
        is = _ref32.is;
    var msg = 'hello world';
    var parent = {
      hello: 'world'
    };
    sink(name, function (args) {
      is(args[0], parent);
      is(args[1], msg);
      end();
    });
    var instance = pino({
      level: name
    });
    var child = instance.child(parent);
    child[name](msg);
  });
  test('child-child logger for level ' + name, function (_ref33) {
    var end = _ref33.end,
        is = _ref33.is;
    var msg = 'hello world';
    var grandParent = {
      hello: 'world'
    };
    var parent = {
      hello: 'you'
    };
    sink(name, function (args) {
      is(args[0], grandParent);
      is(args[1], parent);
      is(args[2], msg);
      end();
    });
    var instance = pino({
      level: name
    });
    var child = instance.child(grandParent).child(parent);
    child[name](msg);
  });
}

function consoleMethodTest(level, method) {
  if (!method) method = level;
  test('pino().' + level + ' uses console.' + method, function (_ref34) {
    var end = _ref34.end,
        is = _ref34.is;
    sink(method, function (args) {
      is(args[0], 'test');
      end();
    });

    var instance = require('../browser')({
      level: level
    });

    instance[level]('test');
  });
}

function absentConsoleMethodTest(method, fallback) {
  test('in absence of console.' + method + ', console.' + fallback + ' is used', function (_ref35) {
    var end = _ref35.end,
        is = _ref35.is;
    var fn = console[method];
    console[method] = undefined;
    sink(fallback, function (args) {
      is(args[0], 'test');
      end();
      console[method] = fn;
    });

    var instance = require('../browser')({
      level: method
    });

    instance[method]('test');
  });
}

function isFunc(fn) {
  return typeof fn === 'function';
}

function fnName(fn) {
  var rx = /^\s*function\s*([^(]*)/i;
  var match = rx.exec(fn);
  return match && match[1];
}

function sink(method, fn) {
  if (method === 'fatal') method = 'error';
  var orig = console[method];

  console[method] = function () {
    console[method] = orig;
    fn(Array.prototype.slice.call(arguments));
  };
}