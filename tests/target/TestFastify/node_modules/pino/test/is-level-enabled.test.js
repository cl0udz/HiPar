'use strict';

var _require = require('tap'),
    test = _require.test;

var pino = require('../');

test('can check if current level enabled', function _callee(_ref) {
  var is, log;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is;
          log = pino({
            level: 'debug'
          });
          is(true, log.isLevelEnabled('debug'));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('can check if level enabled after level set', function _callee2(_ref2) {
  var is, log;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is;
          log = pino();
          is(false, log.isLevelEnabled('debug'));
          log.level = 'debug';
          is(true, log.isLevelEnabled('debug'));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('can check if higher level enabled', function _callee3(_ref3) {
  var is, log;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          is = _ref3.is;
          log = pino({
            level: 'debug'
          });
          is(true, log.isLevelEnabled('error'));

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('can check if lower level is disabled', function _callee4(_ref4) {
  var is, log;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          is = _ref4.is;
          log = pino({
            level: 'error'
          });
          is(false, log.isLevelEnabled('trace'));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('can check if child has current level enabled', function _callee5(_ref5) {
  var is, log;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          is = _ref5.is;
          log = pino().child({
            level: 'debug'
          });
          is(true, log.isLevelEnabled('debug'));
          is(true, log.isLevelEnabled('error'));
          is(false, log.isLevelEnabled('trace'));

        case 5:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('can check if custom level is enabled', function _callee6(_ref6) {
  var is, log;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          is = _ref6.is;
          log = pino({
            customLevels: {
              foo: 35
            },
            level: 'debug'
          });
          is(true, log.isLevelEnabled('foo'));
          is(true, log.isLevelEnabled('error'));
          is(false, log.isLevelEnabled('trace'));

        case 5:
        case "end":
          return _context6.stop();
      }
    }
  });
});