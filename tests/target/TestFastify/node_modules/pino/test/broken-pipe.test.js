'use strict';

require("core-js/modules/es.array.join");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

var t = require('tap');

var _require = require('path'),
    join = _require.join;

var _require2 = require('child_process'),
    fork = _require2.fork;

var _require3 = require('./helper'),
    once = _require3.once;

var pino = require('..');

function test(file) {
  file = join('fixtures', 'broken-pipe', file);
  t.test(file, {
    parallel: true
  }, function _callee(_ref) {
    var is, child, res;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            is = _ref.is;
            child = fork(join(__dirname, file), {
              silent: true
            });
            child.stdout.destroy();
            child.stderr.pipe(process.stdout);
            _context.next = 6;
            return regeneratorRuntime.awrap(once(child, 'close'));

          case 6:
            res = _context.sent;
            is(res, 0); // process exits successfully

          case 8:
          case "end":
            return _context.stop();
        }
      }
    });
  });
}

t.jobs = 42;
test('basic.js');
test('destination.js');
test('extreme.js');
t.test('let error pass through', function (_ref2) {
  var is = _ref2.is,
      plan = _ref2.plan;
  plan(3);
  var stream = pino.destination(); // side effect of the pino constructor is that it will set an
  // event handler for error

  pino(stream);
  process.nextTick(function () {
    return stream.emit('error', new Error('kaboom'));
  });
  process.nextTick(function () {
    return stream.emit('error', new Error('kaboom'));
  });
  stream.on('error', function (err) {
    is(err.message, 'kaboom');
  });
});