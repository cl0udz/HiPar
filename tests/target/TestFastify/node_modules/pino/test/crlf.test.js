'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

require("regenerator-runtime/runtime");

var _require = require('tap'),
    test = _require.test;

var writer = require('flush-write-stream');

var pino = require('../');

function capture() {
  var ws = writer(function (chunk, enc, cb) {
    ws.data += chunk.toString();
    cb();
  });
  ws.data = '';
  return ws;
}

test('pino uses LF by default', function _callee(_ref) {
  var ok, stream, logger;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ok = _ref.ok;
          stream = capture();
          logger = pino(stream);
          logger.info('foo');
          logger.error('bar');
          ok(/foo[^\r\n]+\n[^\r\n]+bar[^\r\n]+\n/.test(stream.data));

        case 6:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('pino can log CRLF', function _callee2(_ref2) {
  var ok, stream, logger;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ok = _ref2.ok;
          stream = capture();
          logger = pino({
            crlf: true
          }, stream);
          logger.info('foo');
          logger.error('bar');
          ok(/foo[^\n]+\r\n[^\n]+bar[^\n]+\r\n/.test(stream.data));

        case 6:
        case "end":
          return _context2.stop();
      }
    }
  });
});