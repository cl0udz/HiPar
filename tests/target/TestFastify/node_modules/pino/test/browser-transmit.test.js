'use strict';

var test = require('tape');

var pino = require('../browser');

function noop() {}

test('throws if transmit object does not have send function', function (_ref) {
  var end = _ref.end,
      throws = _ref.throws;
  throws(function () {
    pino({
      browser: {
        transmit: {}
      }
    });
  });
  throws(function () {
    pino({
      browser: {
        transmit: {
          send: 'not a func'
        }
      }
    });
  });
  end();
});
test('calls send function after write', function (_ref2) {
  var end = _ref2.end,
      is = _ref2.is;
  var c = 0;
  var logger = pino({
    browser: {
      write: function write() {
        c++;
      },
      transmit: {
        send() {
          is(c, 1);
        }

      }
    }
  });
  logger.fatal({
    test: 'test'
  });
  end();
});
test('passes send function the logged level', function (_ref3) {
  var end = _ref3.end,
      is = _ref3.is;
  var logger = pino({
    browser: {
      write() {},

      transmit: {
        send(level) {
          is(level, 'fatal');
        }

      }
    }
  });
  logger.fatal({
    test: 'test'
  });
  end();
});
test('passes send function message strings in logEvent object when asObject is not set', function (_ref4) {
  var end = _ref4.end,
      same = _ref4.same,
      is = _ref4.is;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        send(level, _ref5) {
          var messages = _ref5.messages;
          is(messages[0], 'test');
          is(messages[1], 'another test');
        }

      }
    }
  });
  logger.fatal('test', 'another test');
  end();
});
test('passes send function message objects in logEvent object when asObject is not set', function (_ref6) {
  var end = _ref6.end,
      same = _ref6.same,
      is = _ref6.is;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        send(level, _ref7) {
          var messages = _ref7.messages;
          same(messages[0], {
            test: 'test'
          });
          is(messages[1], 'another test');
        }

      }
    }
  });
  logger.fatal({
    test: 'test'
  }, 'another test');
  end();
});
test('passes send function message strings in logEvent object when asObject is set', function (_ref8) {
  var end = _ref8.end,
      same = _ref8.same,
      is = _ref8.is;
  var logger = pino({
    browser: {
      asObject: true,
      write: noop,
      transmit: {
        send(level, _ref9) {
          var messages = _ref9.messages;
          is(messages[0], 'test');
          is(messages[1], 'another test');
        }

      }
    }
  });
  logger.fatal('test', 'another test');
  end();
});
test('passes send function message objects in logEvent object when asObject is set', function (_ref10) {
  var end = _ref10.end,
      same = _ref10.same,
      is = _ref10.is;
  var logger = pino({
    browser: {
      asObject: true,
      write: noop,
      transmit: {
        send(level, _ref11) {
          var messages = _ref11.messages;
          same(messages[0], {
            test: 'test'
          });
          is(messages[1], 'another test');
        }

      }
    }
  });
  logger.fatal({
    test: 'test'
  }, 'another test');
  end();
});
test('supplies a timestamp (ts) in logEvent object which is exactly the same as the `time` property in asObject mode', function (_ref12) {
  var end = _ref12.end,
      is = _ref12.is;
  var expected;
  var logger = pino({
    browser: {
      asObject: true,

      // implict because `write`, but just to be explicit
      write(o) {
        expected = o.time;
      },

      transmit: {
        send(level, logEvent) {
          is(logEvent.ts, expected);
        }

      }
    }
  });
  logger.fatal('test');
  end();
});
test('passes send function child bindings via logEvent object', function (_ref13) {
  var end = _ref13.end,
      same = _ref13.same,
      is = _ref13.is;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        send(level, logEvent) {
          var messages = logEvent.messages;
          var bindings = logEvent.bindings;
          same(bindings[0], {
            first: 'binding'
          });
          same(bindings[1], {
            second: 'binding2'
          });
          same(messages[0], {
            test: 'test'
          });
          is(messages[1], 'another test');
        }

      }
    }
  });
  logger.child({
    first: 'binding'
  }).child({
    second: 'binding2'
  }).fatal({
    test: 'test'
  }, 'another test');
  end();
});
test('passes send function level:{label, value} via logEvent object', function (_ref14) {
  var end = _ref14.end,
      is = _ref14.is;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        send(level, logEvent) {
          var label = logEvent.level.label;
          var value = logEvent.level.value;
          is(label, 'fatal');
          is(value, 60);
        }

      }
    }
  });
  logger.fatal({
    test: 'test'
  }, 'another test');
  end();
});
test('calls send function according to transmit.level', function (_ref15) {
  var end = _ref15.end,
      is = _ref15.is;
  var c = 0;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        level: 'error',

        send(level) {
          c++;
          if (c === 1) is(level, 'error');
          if (c === 2) is(level, 'fatal');
        }

      }
    }
  });
  logger.warn('ignored');
  logger.error('test');
  logger.fatal('test');
  end();
});
test('transmit.level defaults to logger level', function (_ref16) {
  var end = _ref16.end,
      is = _ref16.is;
  var c = 0;
  var logger = pino({
    level: 'error',
    browser: {
      write: noop,
      transmit: {
        send(level) {
          c++;
          if (c === 1) is(level, 'error');
          if (c === 2) is(level, 'fatal');
        }

      }
    }
  });
  logger.warn('ignored');
  logger.error('test');
  logger.fatal('test');
  end();
});
test('transmit.level is effective even if lower than logger level', function (_ref17) {
  var end = _ref17.end,
      is = _ref17.is;
  var c = 0;
  var logger = pino({
    level: 'error',
    browser: {
      write: noop,
      transmit: {
        level: 'info',

        send(level) {
          c++;
          if (c === 1) is(level, 'warn');
          if (c === 2) is(level, 'error');
          if (c === 3) is(level, 'fatal');
        }

      }
    }
  });
  logger.warn('ignored');
  logger.error('test');
  logger.fatal('test');
  end();
});
test('applies all serializers to messages and bindings (serialize:false - default)', function (_ref18) {
  var end = _ref18.end,
      same = _ref18.same,
      is = _ref18.is;
  var logger = pino({
    serializers: {
      first: function first() {
        return 'first';
      },
      second: function second() {
        return 'second';
      },
      test: function test() {
        return 'serialize it';
      }
    },
    browser: {
      write: noop,
      transmit: {
        send(level, logEvent) {
          var messages = logEvent.messages;
          var bindings = logEvent.bindings;
          same(bindings[0], {
            first: 'first'
          });
          same(bindings[1], {
            second: 'second'
          });
          same(messages[0], {
            test: 'serialize it'
          });
          is(messages[1].type, 'Error');
        }

      }
    }
  });
  logger.child({
    first: 'binding'
  }).child({
    second: 'binding2'
  }).fatal({
    test: 'test'
  }, Error());
  end();
});
test('applies all serializers to messages and bindings (serialize:true)', function (_ref19) {
  var end = _ref19.end,
      same = _ref19.same,
      is = _ref19.is;
  var logger = pino({
    serializers: {
      first: function first() {
        return 'first';
      },
      second: function second() {
        return 'second';
      },
      test: function test() {
        return 'serialize it';
      }
    },
    browser: {
      serialize: true,
      write: noop,
      transmit: {
        send(level, logEvent) {
          var messages = logEvent.messages;
          var bindings = logEvent.bindings;
          same(bindings[0], {
            first: 'first'
          });
          same(bindings[1], {
            second: 'second'
          });
          same(messages[0], {
            test: 'serialize it'
          });
          is(messages[1].type, 'Error');
        }

      }
    }
  });
  logger.child({
    first: 'binding'
  }).child({
    second: 'binding2'
  }).fatal({
    test: 'test'
  }, Error());
  end();
});
test('extracts correct bindings and raw messages over multiple transmits', function (_ref20) {
  var end = _ref20.end,
      same = _ref20.same,
      is = _ref20.is;
  var messages = null;
  var bindings = null;
  var logger = pino({
    browser: {
      write: noop,
      transmit: {
        send(level, logEvent) {
          messages = logEvent.messages;
          bindings = logEvent.bindings;
        }

      }
    }
  });
  var child = logger.child({
    child: true
  });
  var grandchild = child.child({
    grandchild: true
  });
  logger.fatal({
    test: 'parent:test1'
  });
  logger.fatal({
    test: 'parent:test2'
  });
  same([], bindings);
  same([{
    test: 'parent:test2'
  }], messages);
  child.fatal({
    test: 'child:test1'
  });
  child.fatal({
    test: 'child:test2'
  });
  same([{
    child: true
  }], bindings);
  same([{
    test: 'child:test2'
  }], messages);
  grandchild.fatal({
    test: 'grandchild:test1'
  });
  grandchild.fatal({
    test: 'grandchild:test2'
  });
  same([{
    child: true
  }, {
    grandchild: true
  }], bindings);
  same([{
    test: 'grandchild:test2'
  }], messages);
  end();
});