'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('tap'),
    test = _require.test;

var _require2 = require('./helper'),
    sink = _require2.sink,
    once = _require2.once;

var pino = require('../');

var parentSerializers = {
  test: function test() {
    return 'parent';
  }
};
var childSerializers = {
  test: function test() {
    return 'child';
  }
};
test('default err namespace error serializer', function _callee(_ref) {
  var is, stream, parent, o;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is;
          stream = sink();
          parent = pino(stream);
          parent.info({
            err: ReferenceError('test')
          });
          _context.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          o = _context.sent;
          is(_typeof(o.err), 'object');
          is(o.err.type, 'ReferenceError');
          is(o.err.message, 'test');
          is(_typeof(o.err.stack), 'string');

        case 11:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('custom serializer overrides default err namespace error serializer', function _callee2(_ref2) {
  var is, stream, parent, o;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is;
          stream = sink();
          parent = pino({
            serializers: {
              err: function err(e) {
                return {
                  t: e.constructor.name,
                  m: e.message,
                  s: e.stack
                };
              }
            }
          }, stream);
          parent.info({
            err: ReferenceError('test')
          });
          _context2.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          o = _context2.sent;
          is(_typeof(o.err), 'object');
          is(o.err.t, 'ReferenceError');
          is(o.err.m, 'test');
          is(_typeof(o.err.s), 'string');

        case 11:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('null overrides default err namespace error serializer', function _callee3(_ref3) {
  var is, stream, parent, o;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          is = _ref3.is;
          stream = sink();
          parent = pino({
            serializers: {
              err: null
            }
          }, stream);
          parent.info({
            err: ReferenceError('test')
          });
          _context3.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          o = _context3.sent;
          is(_typeof(o.err), 'object');
          is(_typeof(o.err.type), 'undefined');
          is(_typeof(o.err.message), 'undefined');
          is(_typeof(o.err.stack), 'undefined');

        case 11:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('undefined overrides default err namespace error serializer', function _callee4(_ref4) {
  var is, stream, parent, o;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          is = _ref4.is;
          stream = sink();
          parent = pino({
            serializers: {
              err: undefined
            }
          }, stream);
          parent.info({
            err: ReferenceError('test')
          });
          _context4.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          o = _context4.sent;
          is(_typeof(o.err), 'object');
          is(_typeof(o.err.type), 'undefined');
          is(_typeof(o.err.message), 'undefined');
          is(_typeof(o.err.stack), 'undefined');

        case 11:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('serializers override values', function _callee5(_ref5) {
  var is, stream, parent, o;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          is = _ref5.is;
          stream = sink();
          parent = pino({
            serializers: parentSerializers
          }, stream);
          parent.child({
            serializers: childSerializers
          });
          parent.fatal({
            test: 'test'
          });
          _context5.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context5.sent;
          is(o.test, 'parent');

        case 9:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('child does not overwrite parent serializers', function _callee6(_ref6) {
  var is, stream, parent, child, o, o2;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          is = _ref6.is;
          stream = sink();
          parent = pino({
            serializers: parentSerializers
          }, stream);
          child = parent.child({
            serializers: childSerializers
          });
          parent.fatal({
            test: 'test'
          });
          o = once(stream, 'data');
          _context6.t0 = is;
          _context6.next = 9;
          return regeneratorRuntime.awrap(o);

        case 9:
          _context6.t1 = _context6.sent.test;
          (0, _context6.t0)(_context6.t1, 'parent');
          o2 = once(stream, 'data');
          child.fatal({
            test: 'test'
          });
          _context6.t2 = is;
          _context6.next = 16;
          return regeneratorRuntime.awrap(o2);

        case 16:
          _context6.t3 = _context6.sent.test;
          (0, _context6.t2)(_context6.t3, 'child');

        case 18:
        case "end":
          return _context6.stop();
      }
    }
  });
});
test('Symbol.for(\'pino.serializers\')', function _callee7(_ref7) {
  var is, isNot, stream, parent, child, child2, a;
  return regeneratorRuntime.async(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          a = function _ref8() {
            return 'hello';
          };

          is = _ref7.is, isNot = _ref7.isNot;
          stream = sink();
          parent = pino({
            serializers: parentSerializers
          }, stream);
          child = parent.child({
            a: 'property'
          });
          is(parent[Symbol["for"]('pino.serializers')], parentSerializers);
          is(child[Symbol["for"]('pino.serializers')], parentSerializers);
          child2 = parent.child({
            serializers: {
              a: a
            }
          });
          isNot(child2[Symbol["for"]('pino.serializers')], parentSerializers);
          is(child2[Symbol["for"]('pino.serializers')].a, a);
          is(child2[Symbol["for"]('pino.serializers')].test, parentSerializers.test);

        case 11:
        case "end":
          return _context7.stop();
      }
    }
  });
});
test('children inherit parent serializers', function _callee8(_ref9) {
  var is, stream, parent, child, o;
  return regeneratorRuntime.async(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          is = _ref9.is;
          stream = sink();
          parent = pino({
            serializers: parentSerializers
          }, stream);
          child = parent.child({
            a: 'property'
          });
          child.fatal({
            test: 'test'
          });
          _context8.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context8.sent;
          is(o.test, 'parent');

        case 9:
        case "end":
          return _context8.stop();
      }
    }
  });
});
test('children inherit parent Symbol serializers', function _callee9(_ref10) {
  var is, isNot, stream, symbolSerializers, parent, child, a;
  return regeneratorRuntime.async(function _callee9$(_context9) {
    var _serializers;

    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          a = function _ref11() {
            return 'hello';
          };

          is = _ref10.is, isNot = _ref10.isNot;
          stream = sink();
          symbolSerializers = _defineProperty({}, Symbol["for"]('pino.*'), parentSerializers.test);
          parent = pino({
            serializers: symbolSerializers
          }, stream);
          is(parent[Symbol["for"]('pino.serializers')], symbolSerializers);
          child = parent.child({
            serializers: (_serializers = {}, _defineProperty(_serializers, Symbol["for"]('a'), a), _defineProperty(_serializers, "a", a), _serializers)
          });
          isNot(child[Symbol["for"]('pino.serializers')], symbolSerializers);
          is(child[Symbol["for"]('pino.serializers')].a, a);
          is(child[Symbol["for"]('pino.serializers')][Symbol["for"]('a')], a);
          is(child[Symbol["for"]('pino.serializers')][Symbol["for"]('pino.*')], parentSerializers.test);

        case 11:
        case "end":
          return _context9.stop();
      }
    }
  });
});
test('children serializers get called', function _callee10(_ref12) {
  var is, stream, parent, child, o;
  return regeneratorRuntime.async(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          is = _ref12.is;
          stream = sink();
          parent = pino({
            test: 'this'
          }, stream);
          child = parent.child({
            a: 'property',
            serializers: childSerializers
          });
          child.fatal({
            test: 'test'
          });
          _context10.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context10.sent;
          is(o.test, 'child');

        case 9:
        case "end":
          return _context10.stop();
      }
    }
  });
});
test('children serializers get called when inherited from parent', function _callee11(_ref13) {
  var is, stream, parent, child, o;
  return regeneratorRuntime.async(function _callee11$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          is = _ref13.is;
          stream = sink();
          parent = pino({
            test: 'this',
            serializers: parentSerializers
          }, stream);
          child = parent.child({
            serializers: {
              test: function test() {
                return 'pass';
              }
            }
          });
          child.fatal({
            test: 'fail'
          });
          _context11.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          o = _context11.sent;
          is(o.test, 'pass');

        case 9:
        case "end":
          return _context11.stop();
      }
    }
  });
});
test('non-overridden serializers are available in the children', function _callee12(_ref14) {
  var is, stream, pSerializers, cSerializers, parent, child, o, o2, o3, o4;
  return regeneratorRuntime.async(function _callee12$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          is = _ref14.is;
          stream = sink();
          pSerializers = {
            onlyParent: function onlyParent() {
              return 'parent';
            },
            shared: function shared() {
              return 'parent';
            }
          };
          cSerializers = {
            shared: function shared() {
              return 'child';
            },
            onlyChild: function onlyChild() {
              return 'child';
            }
          };
          parent = pino({
            serializers: pSerializers
          }, stream);
          child = parent.child({
            serializers: cSerializers
          });
          o = once(stream, 'data');
          child.fatal({
            shared: 'test'
          });
          _context12.t0 = is;
          _context12.next = 11;
          return regeneratorRuntime.awrap(o);

        case 11:
          _context12.t1 = _context12.sent.shared;
          (0, _context12.t0)(_context12.t1, 'child');
          o2 = once(stream, 'data');
          child.fatal({
            onlyParent: 'test'
          });
          _context12.t2 = is;
          _context12.next = 18;
          return regeneratorRuntime.awrap(o2);

        case 18:
          _context12.t3 = _context12.sent.onlyParent;
          (0, _context12.t2)(_context12.t3, 'parent');
          o3 = once(stream, 'data');
          child.fatal({
            onlyChild: 'test'
          });
          _context12.t4 = is;
          _context12.next = 25;
          return regeneratorRuntime.awrap(o3);

        case 25:
          _context12.t5 = _context12.sent.onlyChild;
          (0, _context12.t4)(_context12.t5, 'child');
          o4 = once(stream, 'data');
          parent.fatal({
            onlyChild: 'test'
          });
          _context12.t6 = is;
          _context12.next = 32;
          return regeneratorRuntime.awrap(o4);

        case 32:
          _context12.t7 = _context12.sent.onlyChild;
          (0, _context12.t6)(_context12.t7, 'test');

        case 34:
        case "end":
          return _context12.stop();
      }
    }
  });
});
test('Symbol.for(\'pino.*\') serializer', function _callee13(_ref15) {
  var notSame, is, isNot, stream, globalSerializer, logger, o, o2, o3;
  return regeneratorRuntime.async(function _callee13$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          notSame = _ref15.notSame, is = _ref15.is, isNot = _ref15.isNot;
          stream = sink();
          globalSerializer = _defineProperty({}, Symbol["for"]('pino.*'), function (obj) {
            if (obj.lionel === 'richie') {
              return {
                hello: 'is',
                it: 'me',
                you: 'are',
                looking: 'for'
              };
            }

            return {
              lionel: 'richie'
            };
          });
          logger = pino({
            serializers: globalSerializer
          }, stream);
          o = once(stream, 'data');
          logger.info({
            hello: 'is',
            it: 'me',
            you: 'are',
            looking: 'for'
          });
          _context13.t0 = is;
          _context13.next = 9;
          return regeneratorRuntime.awrap(o);

        case 9:
          _context13.t1 = _context13.sent.lionel;
          (0, _context13.t0)(_context13.t1, 'richie');
          _context13.t2 = isNot;
          _context13.next = 14;
          return regeneratorRuntime.awrap(o);

        case 14:
          _context13.t3 = _context13.sent.hello;
          (0, _context13.t2)(_context13.t3, 'is');
          _context13.t4 = isNot;
          _context13.next = 19;
          return regeneratorRuntime.awrap(o);

        case 19:
          _context13.t5 = _context13.sent.it;
          (0, _context13.t4)(_context13.t5, 'me');
          _context13.t6 = isNot;
          _context13.next = 24;
          return regeneratorRuntime.awrap(o);

        case 24:
          _context13.t7 = _context13.sent.you;
          (0, _context13.t6)(_context13.t7, 'are');
          _context13.t8 = isNot;
          _context13.next = 29;
          return regeneratorRuntime.awrap(o);

        case 29:
          _context13.t9 = _context13.sent.looking;
          (0, _context13.t8)(_context13.t9, 'for');
          o2 = once(stream, 'data');
          logger.info({
            lionel: 'richie'
          });
          _context13.t10 = is;
          _context13.next = 36;
          return regeneratorRuntime.awrap(o2);

        case 36:
          _context13.t11 = _context13.sent.lionel;
          (0, _context13.t10)(_context13.t11, 'richie');
          _context13.t12 = is;
          _context13.next = 41;
          return regeneratorRuntime.awrap(o2);

        case 41:
          _context13.t13 = _context13.sent.hello;
          (0, _context13.t12)(_context13.t13, 'is');
          _context13.t14 = is;
          _context13.next = 46;
          return regeneratorRuntime.awrap(o2);

        case 46:
          _context13.t15 = _context13.sent.it;
          (0, _context13.t14)(_context13.t15, 'me');
          _context13.t16 = is;
          _context13.next = 51;
          return regeneratorRuntime.awrap(o2);

        case 51:
          _context13.t17 = _context13.sent.you;
          (0, _context13.t16)(_context13.t17, 'are');
          _context13.t18 = is;
          _context13.next = 56;
          return regeneratorRuntime.awrap(o2);

        case 56:
          _context13.t19 = _context13.sent.looking;
          (0, _context13.t18)(_context13.t19, 'for');
          o3 = once(stream, 'data');
          logger.info('message');
          _context13.t20 = is;
          _context13.next = 63;
          return regeneratorRuntime.awrap(o3);

        case 63:
          _context13.t21 = _context13.sent.lionel;
          (0, _context13.t20)(_context13.t21, 'richie');
          _context13.t22 = is;
          _context13.next = 68;
          return regeneratorRuntime.awrap(o3);

        case 68:
          _context13.t23 = _context13.sent;
          _context13.t24 = 'pid' in _context13.t23;
          (0, _context13.t22)(_context13.t24, false);
          _context13.t25 = is;
          _context13.next = 74;
          return regeneratorRuntime.awrap(o3);

        case 74:
          _context13.t26 = _context13.sent;
          _context13.t27 = 'hostname' in _context13.t26;
          (0, _context13.t25)(_context13.t27, false);
          _context13.t28 = notSame;
          _context13.next = 80;
          return regeneratorRuntime.awrap(o3);

        case 80:
          _context13.t29 = _context13.sent;
          _context13.t30 = ['pid', 'hostname'];
          (0, _context13.t28)(_context13.t29, _context13.t30);

        case 83:
        case "end":
          return _context13.stop();
      }
    }
  });
});