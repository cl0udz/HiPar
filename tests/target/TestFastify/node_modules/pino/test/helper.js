'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.timers");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.timers");

var os = require('os');

var writer = require('flush-write-stream');

var split = require('split2');

var pid = process.pid;
var hostname = os.hostname();
var v = 1;
var isWin = process.platform === 'win32';

function getPathToNull() {
  return isWin ? '\\\\.\\NUL' : '/dev/null';
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    if (name !== 'error') emitter.once('error', reject);
    emitter.once(name, function () {
      emitter.removeListener('error', reject);
      resolve.apply(void 0, arguments);
    });
  });
}

function sink(func) {
  var result = split(function (data) {
    try {
      return JSON.parse(data);
    } catch (err) {
      console.log(err);
      console.log(data);
    }
  });
  if (func) result.pipe(writer.obj(func));
  return result;
}

function check(is, chunk, level, msg) {
  is(new Date(chunk.time) <= new Date(), true, 'time is greater than Date.now()');
  delete chunk.time;
  is(chunk.pid, pid);
  is(chunk.hostname, hostname);
  is(chunk.level, level);
  is(chunk.msg, msg);
  is(chunk.v, v);
}

function sleep(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
}

module.exports = {
  getPathToNull: getPathToNull,
  sink: sink,
  check: check,
  once: once,
  sleep: sleep
};