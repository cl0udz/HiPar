'use strict'; // eslint-disable-next-line

if (typeof $1 !== 'undefined') $1 = arguments.callee.caller.arguments[0];

var test = require('tape');

var fresh = require('import-fresh');

var pino = require('../browser');

var parentSerializers = {
  test: function test() {
    return 'parent';
  }
};
var childSerializers = {
  test: function test() {
    return 'child';
  }
};
test('serializers override values', function (_ref) {
  var end = _ref.end,
      is = _ref.is;
  var parent = pino({
    serializers: parentSerializers,
    browser: {
      serialize: true,

      write(o) {
        is(o.test, 'parent');
        end();
      }

    }
  });
  parent.fatal({
    test: 'test'
  });
});
test('without the serialize option, serializers do not override values', function (_ref2) {
  var end = _ref2.end,
      is = _ref2.is;
  var parent = pino({
    serializers: parentSerializers,
    browser: {
      write(o) {
        is(o.test, 'test');
        end();
      }

    }
  });
  parent.fatal({
    test: 'test'
  });
});

if (process.title !== 'browser') {
  test('if serialize option is true, standard error serializer is auto enabled', function (_ref3) {
    var end = _ref3.end,
        same = _ref3.same;
    var err = Error('test');
    err.code = 'test';
    err.type = 'Error'; // get that cov

    var expect = pino.stdSerializers.err(err);
    var consoleError = console.error;

    console.error = function (err) {
      same(err, expect);
    };

    var logger = fresh('../browser')({
      browser: {
        serialize: true
      }
    });
    console.error = consoleError;
    logger.fatal(err);
    end();
  });
  test('if serialize option is array, standard error serializer is auto enabled', function (_ref4) {
    var end = _ref4.end,
        same = _ref4.same;
    var err = Error('test');
    err.code = 'test';
    var expect = pino.stdSerializers.err(err);
    var consoleError = console.error;

    console.error = function (err) {
      same(err, expect);
    };

    var logger = fresh('../browser', require)({
      browser: {
        serialize: []
      }
    });
    console.error = consoleError;
    logger.fatal(err);
    end();
  });
  test('if serialize option is array containing !stdSerializers.err, standard error serializer is disabled', function (_ref5) {
    var end = _ref5.end,
        is = _ref5.is;
    var err = Error('test');
    err.code = 'test';
    var expect = err;
    var consoleError = console.error;

    console.error = function (err) {
      is(err, expect);
    };

    var logger = fresh('../browser', require)({
      browser: {
        serialize: ['!stdSerializers.err']
      }
    });
    console.error = consoleError;
    logger.fatal(err);
    end();
  });
  test('in browser, serializers apply to all objects', function (_ref6) {
    var end = _ref6.end,
        is = _ref6.is;
    var consoleError = console.error;

    console.error = function (test, test2, test3, test4, test5) {
      is(test.key, 'serialized');
      is(test2.key2, 'serialized2');
      is(test5.key3, 'serialized3');
    };

    var logger = fresh('../browser', require)({
      serializers: {
        key: function key() {
          return 'serialized';
        },
        key2: function key2() {
          return 'serialized2';
        },
        key3: function key3() {
          return 'serialized3';
        }
      },
      browser: {
        serialize: true
      }
    });
    console.error = consoleError;
    logger.fatal({
      key: 'test'
    }, {
      key2: 'test'
    }, 'str should skip', [{
      foo: 'array should skip'
    }], {
      key3: 'test'
    });
    end();
  });
  test('serialize can be an array of selected serializers', function (_ref7) {
    var end = _ref7.end,
        is = _ref7.is;
    var consoleError = console.error;

    console.error = function (test, test2, test3, test4, test5) {
      is(test.key, 'test');
      is(test2.key2, 'serialized2');
      is(test5.key3, 'test');
    };

    var logger = fresh('../browser', require)({
      serializers: {
        key: function key() {
          return 'serialized';
        },
        key2: function key2() {
          return 'serialized2';
        },
        key3: function key3() {
          return 'serialized3';
        }
      },
      browser: {
        serialize: ['key2']
      }
    });
    console.error = consoleError;
    logger.fatal({
      key: 'test'
    }, {
      key2: 'test'
    }, 'str should skip', [{
      foo: 'array should skip'
    }], {
      key3: 'test'
    });
    end();
  });
  test('serialize filter applies to child loggers', function (_ref8) {
    var end = _ref8.end,
        is = _ref8.is;
    var consoleError = console.error;

    console.error = function (binding, test, test2, test3, test4, test5) {
      is(test.key, 'test');
      is(test2.key2, 'serialized2');
      is(test5.key3, 'test');
    };

    var logger = fresh('../browser', require)({
      browser: {
        serialize: ['key2']
      }
    });
    console.error = consoleError;
    logger.child({
      aBinding: 'test',
      serializers: {
        key: function key() {
          return 'serialized';
        },
        key2: function key2() {
          return 'serialized2';
        },
        key3: function key3() {
          return 'serialized3';
        }
      }
    }).fatal({
      key: 'test'
    }, {
      key2: 'test'
    }, 'str should skip', [{
      foo: 'array should skip'
    }], {
      key3: 'test'
    });
    end();
  });
  test('parent serializers apply to child bindings', function (_ref9) {
    var end = _ref9.end,
        is = _ref9.is;
    var consoleError = console.error;

    console.error = function (binding) {
      is(binding.key, 'serialized');
    };

    var logger = fresh('../browser', require)({
      serializers: {
        key: function key() {
          return 'serialized';
        }
      },
      browser: {
        serialize: true
      }
    });
    console.error = consoleError;
    logger.child({
      key: 'test'
    }).fatal({
      test: 'test'
    });
    end();
  });
  test('child serializers apply to child bindings', function (_ref10) {
    var end = _ref10.end,
        is = _ref10.is;
    var consoleError = console.error;

    console.error = function (binding) {
      is(binding.key, 'serialized');
    };

    var logger = fresh('../browser', require)({
      browser: {
        serialize: true
      }
    });
    console.error = consoleError;
    logger.child({
      key: 'test',
      serializers: {
        key: function key() {
          return 'serialized';
        }
      }
    }).fatal({
      test: 'test'
    });
    end();
  });
}

test('child does not overwrite parent serializers', function (_ref11) {
  var end = _ref11.end,
      is = _ref11.is;
  var c = 0;
  var parent = pino({
    serializers: parentSerializers,
    browser: {
      serialize: true,

      write(o) {
        c++;
        if (c === 1) is(o.test, 'parent');

        if (c === 2) {
          is(o.test, 'child');
          end();
        }
      }

    }
  });
  var child = parent.child({
    serializers: childSerializers
  });
  parent.fatal({
    test: 'test'
  });
  child.fatal({
    test: 'test'
  });
});
test('children inherit parent serializers', function (_ref12) {
  var end = _ref12.end,
      is = _ref12.is;
  var parent = pino({
    serializers: parentSerializers,
    browser: {
      serialize: true,

      write(o) {
        is(o.test, 'parent');
      }

    }
  });
  var child = parent.child({
    a: 'property'
  });
  child.fatal({
    test: 'test'
  });
  end();
});
test('children serializers get called', function (_ref13) {
  var end = _ref13.end,
      is = _ref13.is;
  var parent = pino({
    test: 'this',
    browser: {
      serialize: true,

      write(o) {
        is(o.test, 'child');
      }

    }
  });
  var child = parent.child({
    a: 'property',
    serializers: childSerializers
  });
  child.fatal({
    test: 'test'
  });
  end();
});
test('children serializers get called when inherited from parent', function (_ref14) {
  var end = _ref14.end,
      is = _ref14.is;
  var parent = pino({
    test: 'this',
    serializers: parentSerializers,
    browser: {
      serialize: true,
      write: function write(o) {
        is(o.test, 'pass');
      }
    }
  });
  var child = parent.child({
    serializers: {
      test: function test() {
        return 'pass';
      }
    }
  });
  child.fatal({
    test: 'fail'
  });
  end();
});
test('non overriden serializers are available in the children', function (_ref15) {
  var end = _ref15.end,
      is = _ref15.is;
  var pSerializers = {
    onlyParent: function onlyParent() {
      return 'parent';
    },
    shared: function shared() {
      return 'parent';
    }
  };
  var cSerializers = {
    shared: function shared() {
      return 'child';
    },
    onlyChild: function onlyChild() {
      return 'child';
    }
  };
  var c = 0;
  var parent = pino({
    serializers: pSerializers,
    browser: {
      serialize: true,

      write(o) {
        c++;
        if (c === 1) is(o.shared, 'child');
        if (c === 2) is(o.onlyParent, 'parent');
        if (c === 3) is(o.onlyChild, 'child');
        if (c === 4) is(o.onlyChild, 'test');
      }

    }
  });
  var child = parent.child({
    serializers: cSerializers
  });
  child.fatal({
    shared: 'test'
  });
  child.fatal({
    onlyParent: 'test'
  });
  child.fatal({
    onlyChild: 'test'
  });
  parent.fatal({
    onlyChild: 'test'
  });
  end();
});