'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/web.timers");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/web.timers");

require("regenerator-runtime/runtime");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var os = require('os');

var _require = require('path'),
    join = _require.join;

var _require2 = require('fs'),
    readFileSync = _require2.readFileSync;

var _require3 = require('tap'),
    test = _require3.test;

var _require4 = require('./helper'),
    sink = _require4.sink,
    check = _require4.check,
    once = _require4.once;

var pino = require('../');

var _require5 = require('../package.json'),
    version = _require5.version;

var _process = process,
    pid = _process.pid;
var hostname = os.hostname();

var sleep = function sleep(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

test('pino version is exposed on export', function _callee(_ref) {
  var is;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          is = _ref.is;
          is(pino.version, version);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('pino version is exposed on instance', function _callee2(_ref2) {
  var is, instance;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is;
          instance = pino();
          is(instance.version, version);

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('child instance exposes pino version', function _callee3(_ref3) {
  var is, child;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          is = _ref3.is;
          child = pino().child({
            foo: 'bar'
          });
          is(child.version, version);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('bindings are exposed on every instance', function _callee4(_ref4) {
  var same, instance;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          same = _ref4.same;
          instance = pino();
          same(instance.bindings(), {});

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('bindings contain the name and the child bindings', function _callee5(_ref5) {
  var same, instance;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          same = _ref5.same;
          instance = pino({
            name: 'basicTest',
            level: 'info'
          }).child({
            foo: 'bar'
          }).child({
            a: 2
          });
          same(instance.bindings(), {
            name: 'basicTest',
            foo: 'bar',
            a: 2
          });

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  });
});

function levelTest(name, level) {
  test("".concat(name, " logs as ").concat(level), function _callee6(_ref6) {
    var is, stream, instance;
    return regeneratorRuntime.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            is = _ref6.is;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            instance[name]('hello world');
            _context6.t0 = check;
            _context6.t1 = is;
            _context6.next = 9;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 9:
            _context6.t2 = _context6.sent;
            _context6.t3 = level;
            (0, _context6.t0)(_context6.t1, _context6.t2, _context6.t3, 'hello world');

          case 12:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
  test("passing objects at level ".concat(name), function _callee7(_ref7) {
    var is, same, stream, instance, obj, result;
    return regeneratorRuntime.async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            is = _ref7.is, same = _ref7.same;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            obj = {
              hello: 'world'
            };
            instance[name](obj);
            _context7.next = 8;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 8:
            result = _context7.sent;
            is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
            is(result.pid, pid);
            is(result.hostname, hostname);
            is(result.level, level);
            is(result.hello, 'world');
            is(result.v, 1);
            same(Object.keys(obj), ['hello']);

          case 16:
          case "end":
            return _context7.stop();
        }
      }
    });
  });
  test("passing an object and a string at level ".concat(name), function _callee8(_ref8) {
    var is, same, stream, instance, obj, result;
    return regeneratorRuntime.async(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            is = _ref8.is, same = _ref8.same;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            obj = {
              hello: 'world'
            };
            instance[name](obj, 'a string');
            _context8.next = 8;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 8:
            result = _context8.sent;
            is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
            delete result.time;
            same(result, {
              pid: pid,
              hostname: hostname,
              level: level,
              msg: 'a string',
              hello: 'world',
              v: 1
            });
            same(Object.keys(obj), ['hello']);

          case 13:
          case "end":
            return _context8.stop();
        }
      }
    });
  });
  test("overriding object key by string at level ".concat(name), function _callee9(_ref9) {
    var is, same, stream, instance, result;
    return regeneratorRuntime.async(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            is = _ref9.is, same = _ref9.same;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            instance[name]({
              hello: 'world',
              msg: 'object'
            }, 'string');
            _context9.next = 7;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 7:
            result = _context9.sent;
            is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
            delete result.time;
            same(result, {
              pid: pid,
              hostname: hostname,
              level: level,
              msg: 'string',
              hello: 'world',
              v: 1
            });

          case 11:
          case "end":
            return _context9.stop();
        }
      }
    });
  });
  test("formatting logs as ".concat(name), function _callee10(_ref10) {
    var is, stream, instance, result;
    return regeneratorRuntime.async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            is = _ref10.is;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            instance[name]('hello %d', 42);
            _context10.next = 7;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 7:
            result = _context10.sent;
            check(is, result, level, 'hello 42');

          case 9:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  test("formatting a symbol at level ".concat(name), function _callee11(_ref11) {
    var is, stream, instance, sym, result;
    return regeneratorRuntime.async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            is = _ref11.is;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            sym = Symbol('foo');
            instance[name]('hello', sym);
            _context11.next = 8;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 8:
            result = _context11.sent;
            check(is, result, level, 'hello Symbol(foo)');

          case 10:
          case "end":
            return _context11.stop();
        }
      }
    });
  });
  test("passing error with a serializer at level ".concat(name), function _callee12(_ref12) {
    var is, same, stream, err, instance, result;
    return regeneratorRuntime.async(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            is = _ref12.is, same = _ref12.same;
            stream = sink();
            err = new Error('myerror');
            instance = pino({
              serializers: {
                err: pino.stdSerializers.err
              }
            }, stream);
            instance.level = name;
            instance[name]({
              err: err
            });
            _context12.next = 8;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 8:
            result = _context12.sent;
            is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
            delete result.time;
            same(result, {
              pid: pid,
              hostname: hostname,
              level: level,
              err: {
                type: 'Error',
                message: err.message,
                stack: err.stack
              },
              v: 1
            });

          case 12:
          case "end":
            return _context12.stop();
        }
      }
    });
  });
  test("child logger for level ".concat(name), function _callee13(_ref13) {
    var is, same, stream, instance, child, result;
    return regeneratorRuntime.async(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            is = _ref13.is, same = _ref13.same;
            stream = sink();
            instance = pino(stream);
            instance.level = name;
            child = instance.child({
              hello: 'world'
            });
            child[name]('hello world');
            _context13.next = 8;
            return regeneratorRuntime.awrap(once(stream, 'data'));

          case 8:
            result = _context13.sent;
            is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
            delete result.time;
            same(result, {
              pid: pid,
              hostname: hostname,
              level: level,
              msg: 'hello world',
              hello: 'world',
              v: 1
            });

          case 12:
          case "end":
            return _context13.stop();
        }
      }
    });
  });
}

levelTest('fatal', 60);
levelTest('error', 50);
levelTest('warn', 40);
levelTest('info', 30);
levelTest('debug', 20);
levelTest('trace', 10);
test('serializers can return undefined to strip field', function _callee14(_ref14) {
  var is, stream, instance, result;
  return regeneratorRuntime.async(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          is = _ref14.is;
          stream = sink();
          instance = pino({
            serializers: {
              test: function test() {
                return undefined;
              }
            }
          }, stream);
          instance.info({
            test: 'sensitive info'
          });
          _context14.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context14.sent;
          is('test' in result, false);

        case 8:
        case "end":
          return _context14.stop();
      }
    }
  });
});
test('does not explode with a circular ref', function _callee15(_ref15) {
  var doesNotThrow, stream, instance, b, a;
  return regeneratorRuntime.async(function _callee15$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          doesNotThrow = _ref15.doesNotThrow;
          stream = sink();
          instance = pino(stream);
          b = {};
          a = {
            hello: b
          };
          b.a = a; // circular ref

          doesNotThrow(function () {
            return instance.info(a);
          });

        case 7:
        case "end":
          return _context15.stop();
      }
    }
  });
});
test('set the name', function _callee16(_ref16) {
  var is, same, stream, instance, result;
  return regeneratorRuntime.async(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          is = _ref16.is, same = _ref16.same;
          stream = sink();
          instance = pino({
            name: 'hello'
          }, stream);
          instance.fatal('this is fatal');
          _context16.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context16.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 60,
            name: 'hello',
            msg: 'this is fatal',
            v: 1
          });

        case 10:
        case "end":
          return _context16.stop();
      }
    }
  });
});
test('set the messageKey', function _callee17(_ref17) {
  var is, same, stream, message, messageKey, instance, result;
  return regeneratorRuntime.async(function _callee17$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          is = _ref17.is, same = _ref17.same;
          stream = sink();
          message = 'hello world';
          messageKey = 'fooMessage';
          instance = pino({
            messageKey: messageKey
          }, stream);
          instance.info(message);
          _context17.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context17.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            fooMessage: message,
            v: 1
          });

        case 12:
        case "end":
          return _context17.stop();
      }
    }
  });
});
test('set undefined properties', function _callee18(_ref18) {
  var is, same, stream, instance, result;
  return regeneratorRuntime.async(function _callee18$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          is = _ref18.is, same = _ref18.same;
          stream = sink();
          instance = pino(stream);
          instance.info({
            hello: 'world',
            property: undefined
          });
          _context18.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context18.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            hello: 'world',
            v: 1
          });

        case 10:
        case "end":
          return _context18.stop();
      }
    }
  });
});
test('prototype properties are not logged', function _callee19(_ref19) {
  var is, stream, instance, _ref20, hello;

  return regeneratorRuntime.async(function _callee19$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          is = _ref19.is;
          stream = sink();
          instance = pino(stream);
          instance.info(Object.create({
            hello: 'world'
          }));
          _context19.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref20 = _context19.sent;
          hello = _ref20.hello;
          is(hello, undefined);

        case 9:
        case "end":
          return _context19.stop();
      }
    }
  });
});
test('set the base', function _callee20(_ref21) {
  var is, same, stream, instance, result;
  return regeneratorRuntime.async(function _callee20$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          is = _ref21.is, same = _ref21.same;
          stream = sink();
          instance = pino({
            base: {
              a: 'b'
            }
          }, stream);
          instance.fatal('this is fatal');
          _context20.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context20.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            a: 'b',
            level: 60,
            msg: 'this is fatal',
            v: 1
          });

        case 10:
        case "end":
          return _context20.stop();
      }
    }
  });
});
test('set the base to null', function _callee21(_ref22) {
  var is, same, stream, instance, result;
  return regeneratorRuntime.async(function _callee21$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          is = _ref22.is, same = _ref22.same;
          stream = sink();
          instance = pino({
            base: null
          }, stream);
          instance.fatal('this is fatal');
          _context21.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context21.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            level: 60,
            msg: 'this is fatal',
            v: 1
          });

        case 10:
        case "end":
          return _context21.stop();
      }
    }
  });
});
test('set the base to null and use a serializer', function _callee22(_ref23) {
  var is, same, stream, instance, result;
  return regeneratorRuntime.async(function _callee22$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          is = _ref23.is, same = _ref23.same;
          stream = sink();
          instance = pino({
            base: null,
            serializers: _defineProperty({}, Symbol["for"]('pino.*'), function (input) {
              return Object.assign({}, input, {
                additionalMessage: 'using pino'
              });
            })
          }, stream);
          instance.fatal('this is fatal too');
          _context22.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context22.sent;
          is(new Date(result.time) <= new Date(), true, 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            level: 60,
            msg: 'this is fatal too',
            additionalMessage: 'using pino',
            v: 1
          });

        case 10:
        case "end":
          return _context22.stop();
      }
    }
  });
});
test('throw if creating child without bindings', function _callee23(_ref24) {
  var _throws, stream, instance;

  return regeneratorRuntime.async(function _callee23$(_context23) {
    while (1) {
      switch (_context23.prev = _context23.next) {
        case 0:
          _throws = _ref24["throws"];
          stream = sink();
          instance = pino(stream);

          _throws(function () {
            return instance.child();
          });

        case 4:
        case "end":
          return _context23.stop();
      }
    }
  });
});
test('correctly escapes msg strings with stray double quote at end', function _callee24(_ref25) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee24$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          same = _ref25.same;
          stream = sink();
          instance = pino({
            name: 'hello'
          }, stream);
          instance.fatal('this contains "');
          _context24.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context24.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 60,
            name: 'hello',
            msg: 'this contains "',
            v: 1
          });

        case 9:
        case "end":
          return _context24.stop();
      }
    }
  });
});
test('correctly escape msg strings with unclosed double quote', function _callee25(_ref26) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee25$(_context25) {
    while (1) {
      switch (_context25.prev = _context25.next) {
        case 0:
          same = _ref26.same;
          stream = sink();
          instance = pino({
            name: 'hello'
          }, stream);
          instance.fatal('" this contains');
          _context25.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context25.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 60,
            name: 'hello',
            msg: '" this contains',
            v: 1
          });

        case 9:
        case "end":
          return _context25.stop();
      }
    }
  });
}); // https://github.com/pinojs/pino/issues/139

test('object and format string', function _callee26(_ref27) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee26$(_context26) {
    while (1) {
      switch (_context26.prev = _context26.next) {
        case 0:
          same = _ref27.same;
          stream = sink();
          instance = pino(stream);
          instance.info({}, 'foo %s', 'bar');
          _context26.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context26.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: 'foo bar',
            v: 1
          });

        case 9:
        case "end":
          return _context26.stop();
      }
    }
  });
});
test('object and format string property', function _callee27(_ref28) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee27$(_context27) {
    while (1) {
      switch (_context27.prev = _context27.next) {
        case 0:
          same = _ref28.same;
          stream = sink();
          instance = pino(stream);
          instance.info({
            answer: 42
          }, 'foo %s', 'bar');
          _context27.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context27.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: 'foo bar',
            answer: 42,
            v: 1
          });

        case 9:
        case "end":
          return _context27.stop();
      }
    }
  });
});
test('correctly strip undefined when returned from toJSON', function _callee28(_ref29) {
  var is, stream, instance, result;
  return regeneratorRuntime.async(function _callee28$(_context28) {
    while (1) {
      switch (_context28.prev = _context28.next) {
        case 0:
          is = _ref29.is;
          stream = sink();
          instance = pino({
            test: 'this'
          }, stream);
          instance.fatal({
            test: {
              toJSON: function toJSON() {
                return undefined;
              }
            }
          });
          _context28.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context28.sent;
          is('test' in result, false);

        case 8:
        case "end":
          return _context28.stop();
      }
    }
  });
});
test('correctly supports stderr', function _callee29(_ref30) {
  var same, dest, instance;
  return regeneratorRuntime.async(function _callee29$(_context29) {
    while (1) {
      switch (_context29.prev = _context29.next) {
        case 0:
          same = _ref30.same; // stderr inherits from Stream, rather than Writable

          dest = {
            writable: true,
            write: function write(result) {
              result = JSON.parse(result);
              delete result.time;
              same(result, {
                pid: pid,
                hostname: hostname,
                level: 60,
                msg: 'a message',
                v: 1
              });
            }
          };
          instance = pino(dest);
          instance.fatal('a message');

        case 4:
        case "end":
          return _context29.stop();
      }
    }
  });
});
test('normalize number to string', function _callee30(_ref31) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee30$(_context30) {
    while (1) {
      switch (_context30.prev = _context30.next) {
        case 0:
          same = _ref31.same;
          stream = sink();
          instance = pino(stream);
          instance.info(1);
          _context30.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context30.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: '1',
            v: 1
          });

        case 9:
        case "end":
          return _context30.stop();
      }
    }
  });
});
test('normalize number to string with an object', function _callee31(_ref32) {
  var same, stream, instance, result;
  return regeneratorRuntime.async(function _callee31$(_context31) {
    while (1) {
      switch (_context31.prev = _context31.next) {
        case 0:
          same = _ref32.same;
          stream = sink();
          instance = pino(stream);
          instance.info({
            answer: 42
          }, 1);
          _context31.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          result = _context31.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: '1',
            answer: 42,
            v: 1
          });

        case 9:
        case "end":
          return _context31.stop();
      }
    }
  });
});
test('handles objects with null prototype', function _callee32(_ref33) {
  var same, stream, instance, o, result;
  return regeneratorRuntime.async(function _callee32$(_context32) {
    while (1) {
      switch (_context32.prev = _context32.next) {
        case 0:
          same = _ref33.same;
          stream = sink();
          instance = pino(stream);
          o = Object.create(null);
          o.test = 'test';
          instance.info(o);
          _context32.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context32.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            test: 'test',
            v: 1
          });

        case 11:
        case "end":
          return _context32.stop();
      }
    }
  });
});
test('pino.destination', function _callee33(_ref34) {
  var same, tmp, instance, result;
  return regeneratorRuntime.async(function _callee33$(_context33) {
    while (1) {
      switch (_context33.prev = _context33.next) {
        case 0:
          same = _ref34.same;
          tmp = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));
          instance = pino(pino.destination(tmp));
          instance.info('hello');
          _context33.next = 6;
          return regeneratorRuntime.awrap(sleep(250));

        case 6:
          result = JSON.parse(readFileSync(tmp).toString());
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: 'hello',
            v: 1
          });

        case 9:
        case "end":
          return _context33.stop();
      }
    }
  });
});
test('auto pino.destination with a string', function _callee34(_ref35) {
  var same, tmp, instance, result;
  return regeneratorRuntime.async(function _callee34$(_context34) {
    while (1) {
      switch (_context34.prev = _context34.next) {
        case 0:
          same = _ref35.same;
          tmp = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));
          instance = pino(tmp);
          instance.info('hello');
          _context34.next = 6;
          return regeneratorRuntime.awrap(sleep(250));

        case 6:
          result = JSON.parse(readFileSync(tmp).toString());
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: 'hello',
            v: 1
          });

        case 9:
        case "end":
          return _context34.stop();
      }
    }
  });
});
test('auto pino.destination with a string as second argument', function _callee35(_ref36) {
  var same, tmp, instance, result;
  return regeneratorRuntime.async(function _callee35$(_context35) {
    while (1) {
      switch (_context35.prev = _context35.next) {
        case 0:
          same = _ref36.same;
          tmp = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));
          instance = pino(null, tmp);
          instance.info('hello');
          _context35.next = 6;
          return regeneratorRuntime.awrap(sleep(250));

        case 6:
          result = JSON.parse(readFileSync(tmp).toString());
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            msg: 'hello',
            v: 1
          });

        case 9:
        case "end":
          return _context35.stop();
      }
    }
  });
});
test('does not override opts with a string as second argument', function _callee36(_ref37) {
  var same, tmp, instance, result;
  return regeneratorRuntime.async(function _callee36$(_context36) {
    while (1) {
      switch (_context36.prev = _context36.next) {
        case 0:
          same = _ref37.same;
          tmp = join(os.tmpdir(), '_' + Math.random().toString(36).substr(2, 9));
          instance = pino({
            timestamp: function timestamp() {
              return ',"time":"none"';
            }
          }, tmp);
          instance.info('hello');
          _context36.next = 6;
          return regeneratorRuntime.awrap(sleep(250));

        case 6:
          result = JSON.parse(readFileSync(tmp).toString());
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 30,
            time: 'none',
            msg: 'hello',
            v: 1
          });

        case 8:
        case "end":
          return _context36.stop();
      }
    }
  });
}); // https://github.com/pinojs/pino/issues/222

test('children with same names render in correct order', function _callee37(_ref38) {
  var is, stream, root, _ref39, a;

  return regeneratorRuntime.async(function _callee37$(_context37) {
    while (1) {
      switch (_context37.prev = _context37.next) {
        case 0:
          is = _ref38.is;
          stream = sink();
          root = pino(stream);
          root.child({
            a: 1
          }).child({
            a: 2
          }).info({
            a: 3
          });
          _context37.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref39 = _context37.sent;
          a = _ref39.a;
          is(a, 3, 'last logged object takes precedence');

        case 9:
        case "end":
          return _context37.stop();
      }
    }
  });
}); // https://github.com/pinojs/pino/pull/251 - use this.stringify

test('use `fast-safe-stringify` to avoid circular dependencies', function _callee38(_ref40) {
  var deepEqual, stream, root, obj, _ref41, a;

  return regeneratorRuntime.async(function _callee38$(_context38) {
    while (1) {
      switch (_context38.prev = _context38.next) {
        case 0:
          deepEqual = _ref40.deepEqual;
          stream = sink();
          root = pino(stream); // circular depth

          obj = {};
          obj.a = obj;
          root.info(obj);
          _context38.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          _ref41 = _context38.sent;
          a = _ref41.a;
          deepEqual(a, {
            a: '[Circular]'
          });

        case 11:
        case "end":
          return _context38.stop();
      }
    }
  });
});
test('fast-safe-stringify must be used when interpolating', function _callee39(t) {
  var stream, instance, o, _ref42, msg;

  return regeneratorRuntime.async(function _callee39$(_context39) {
    while (1) {
      switch (_context39.prev = _context39.next) {
        case 0:
          stream = sink();
          instance = pino(stream);
          o = {
            a: {
              b: {}
            }
          };
          o.a.b.c = o.a.b;
          instance.info('test', o);
          _context39.next = 7;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 7:
          _ref42 = _context39.sent;
          msg = _ref42.msg;
          t.is(msg, 'test {"a":{"b":{"c":"[Circular]"}}}');

        case 10:
        case "end":
          return _context39.stop();
      }
    }
  });
});
test('throws when setting useOnlyCustomLevels without customLevels', function _callee40(_ref43) {
  var is, _throws2, message;

  return regeneratorRuntime.async(function _callee40$(_context40) {
    while (1) {
      switch (_context40.prev = _context40.next) {
        case 0:
          is = _ref43.is, _throws2 = _ref43["throws"];

          _throws2(function () {
            pino({
              useOnlyCustomLevels: true
            });
          });

          try {
            pino({
              useOnlyCustomLevels: true
            });
          } catch (_ref44) {
            message = _ref44.message;
            is(message, 'customLevels is required if useOnlyCustomLevels is set true');
          }

        case 3:
        case "end":
          return _context40.stop();
      }
    }
  });
});
test('correctly log Infinity', function _callee41(t) {
  var stream, instance, o, _ref45, num;

  return regeneratorRuntime.async(function _callee41$(_context41) {
    while (1) {
      switch (_context41.prev = _context41.next) {
        case 0:
          stream = sink();
          instance = pino(stream);
          o = {
            num: Infinity
          };
          instance.info(o);
          _context41.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref45 = _context41.sent;
          num = _ref45.num;
          t.is(num, null);

        case 9:
        case "end":
          return _context41.stop();
      }
    }
  });
});
test('correctly log -Infinity', function _callee42(t) {
  var stream, instance, o, _ref46, num;

  return regeneratorRuntime.async(function _callee42$(_context42) {
    while (1) {
      switch (_context42.prev = _context42.next) {
        case 0:
          stream = sink();
          instance = pino(stream);
          o = {
            num: -Infinity
          };
          instance.info(o);
          _context42.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref46 = _context42.sent;
          num = _ref46.num;
          t.is(num, null);

        case 9:
        case "end":
          return _context42.stop();
      }
    }
  });
});
test('correctly log NaN', function _callee43(t) {
  var stream, instance, o, _ref47, num;

  return regeneratorRuntime.async(function _callee43$(_context43) {
    while (1) {
      switch (_context43.prev = _context43.next) {
        case 0:
          stream = sink();
          instance = pino(stream);
          o = {
            num: NaN
          };
          instance.info(o);
          _context43.next = 6;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 6:
          _ref47 = _context43.sent;
          num = _ref47.num;
          t.is(num, null);

        case 9:
        case "end":
          return _context43.stop();
      }
    }
  });
});