'use strict';

var _require = require('tap'),
    test = _require.test;

var _require2 = require('path'),
    join = _require2.join;

var execa = require('execa');

var writer = require('flush-write-stream');

var _require3 = require('./helper'),
    once = _require3.once; // https://github.com/pinojs/pino/issues/542


test('pino.destination log everything when calling process.exit(0)', function _callee(_ref) {
  var isNot, actual, child;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          isNot = _ref.isNot;
          actual = '';
          child = execa(process.argv[0], [join(__dirname, 'fixtures', 'destination-exit.js')]);
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual += s;
            cb();
          }));
          _context.next = 6;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 6:
          isNot(actual.match(/hello/), null);
          isNot(actual.match(/world/), null);

        case 8:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('pino.extreme does not log everything when calling process.exit(0)', function _callee2(_ref2) {
  var is, actual, child;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          is = _ref2.is;
          actual = '';
          child = execa(process.argv[0], [join(__dirname, 'fixtures', 'extreme-exit.js')]);
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual += s;
            cb();
          }));
          _context2.next = 6;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 6:
          is(actual.match(/hello/), null);
          is(actual.match(/world/), null);

        case 8:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('pino.extreme logs everything when calling flushSync', function _callee3(_ref3) {
  var isNot, actual, child;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          isNot = _ref3.isNot;
          actual = '';
          child = execa(process.argv[0], [join(__dirname, 'fixtures', 'extreme-flush-exit.js')]);
          child.stdout.pipe(writer(function (s, enc, cb) {
            actual += s;
            cb();
          }));
          _context3.next = 6;
          return regeneratorRuntime.awrap(once(child, 'close'));

        case 6:
          isNot(actual.match(/hello/), null);
          isNot(actual.match(/world/), null);

        case 8:
        case "end":
          return _context3.stop();
      }
    }
  });
});