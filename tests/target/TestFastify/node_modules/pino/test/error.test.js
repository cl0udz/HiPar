'use strict';
/* eslint no-prototype-builtins: 0 */

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.to-string");

require("regenerator-runtime/runtime");

var os = require('os');

var _require = require('tap'),
    test = _require.test;

var _require2 = require('./helper'),
    sink = _require2.sink,
    once = _require2.once;

var pino = require('../');

var _process = process,
    pid = _process.pid;
var hostname = os.hostname();
var level = 50;
var name = 'error';
test('err is serialized with additional properties set on the Error object', function _callee(_ref) {
  var ok, same, stream, err, instance, result;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ok = _ref.ok, same = _ref.same;
          stream = sink();
          err = Object.assign(new Error('myerror'), {
            foo: 'bar'
          });
          instance = pino(stream);
          instance.level = name;
          instance[name](err);
          _context.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context.sent;
          ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: level,
            type: 'Error',
            msg: err.message,
            stack: err.stack,
            foo: err.foo,
            v: 1
          });

        case 12:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('type should be retained, even if type is a property', function _callee2(_ref2) {
  var ok, same, stream, err, instance, result;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ok = _ref2.ok, same = _ref2.same;
          stream = sink();
          err = Object.assign(new Error('myerror'), {
            type: 'bar'
          });
          instance = pino(stream);
          instance.level = name;
          instance[name](err);
          _context2.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context2.sent;
          ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: level,
            type: 'bar',
            msg: err.message,
            stack: err.stack,
            v: 1
          });

        case 12:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('type, message and stack should be first level properties', function _callee3(_ref3) {
  var ok, same, stream, err, instance, result;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ok = _ref3.ok, same = _ref3.same;
          stream = sink();
          err = Object.assign(new Error('foo'), {
            foo: 'bar'
          });
          instance = pino(stream);
          instance.level = name;
          instance[name](err);
          _context3.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context3.sent;
          ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: level,
            type: 'Error',
            msg: err.message,
            stack: err.stack,
            foo: err.foo,
            v: 1
          });

        case 12:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('err serializer', function _callee4(_ref4) {
  var ok, same, stream, err, instance, result;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ok = _ref4.ok, same = _ref4.same;
          stream = sink();
          err = Object.assign(new Error('myerror'), {
            foo: 'bar'
          });
          instance = pino({
            serializers: {
              err: pino.stdSerializers.err
            }
          }, stream);
          instance.level = name;
          instance[name]({
            err: err
          });
          _context4.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context4.sent;
          ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: level,
            err: {
              type: 'Error',
              message: err.message,
              stack: err.stack,
              foo: err.foo
            },
            v: 1
          });

        case 12:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('an error with statusCode property is not confused for a http response', function _callee5(_ref5) {
  var ok, same, stream, err, instance, result;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          ok = _ref5.ok, same = _ref5.same;
          stream = sink();
          err = Object.assign(new Error('StatusCodeErr'), {
            statusCode: 500
          });
          instance = pino(stream);
          instance.level = name;
          instance[name](err);
          _context5.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context5.sent;
          ok(new Date(result.time) <= new Date(), 'time is greater than Date.now()');
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: level,
            type: 'Error',
            msg: err.message,
            stack: err.stack,
            statusCode: err.statusCode,
            v: 1
          });

        case 12:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('stack is omitted if it is not set on err', function (t) {
  t.plan(2);
  var err = new Error('myerror');
  delete err.stack;
  var instance = pino(sink(function (chunk, enc, cb) {
    t.ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');
    delete chunk.time;
    t.equal(chunk.hasOwnProperty('stack'), false);
    cb();
  }));
  instance.level = name;
  instance[name](err);
});
test('stack is rendered as any other property if it\'s not a string', function (t) {
  t.plan(3);
  var err = new Error('myerror');
  err.stack = null;
  var instance = pino(sink(function (chunk, enc, cb) {
    t.ok(new Date(chunk.time) <= new Date(), 'time is greater than Date.now()');
    delete chunk.time;
    t.equal(chunk.hasOwnProperty('stack'), true);
    t.equal(chunk.stack, null);
    cb();
  }));
  instance.level = name;
  instance[name](err);
});
test('correctly ignores toString on errors', function _callee6(_ref6) {
  var same, err, stream, instance, result;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          same = _ref6.same;
          err = new Error('myerror');

          err.toString = function () {
            return undefined;
          };

          stream = sink();
          instance = pino({
            test: 'this'
          }, stream);
          instance.fatal(err);
          _context6.next = 8;
          return regeneratorRuntime.awrap(once(stream, 'data'));

        case 8:
          result = _context6.sent;
          delete result.time;
          same(result, {
            pid: pid,
            hostname: hostname,
            level: 60,
            type: 'Error',
            msg: err.message,
            stack: err.stack,
            v: 1
          });

        case 11:
        case "end":
          return _context6.stop();
      }
    }
  });
});