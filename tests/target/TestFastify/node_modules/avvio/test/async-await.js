'use strict';

var test = require('tap').test;

var sleep = require('then-sleep');

var boot = require('..');

test('one level', function _callee(t) {
  var app, firstLoaded, secondLoaded, thirdLoaded, first, second, third, readyContext;
  return regeneratorRuntime.async(function _callee$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          third = function _ref3(s, opts) {
            return regeneratorRuntime.async(function third$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    thirdLoaded = true;

                  case 4:
                  case "end":
                    return _context3.stop();
                }
              }
            });
          };

          second = function _ref2(s, opts) {
            return regeneratorRuntime.async(function second$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    secondLoaded = true;

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          };

          first = function _ref(s, opts) {
            return regeneratorRuntime.async(function first$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    t.notOk(firstLoaded, 'first is not loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    firstLoaded = true;
                    s.use(second);

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            });
          };

          t.plan(14);
          app = boot();
          firstLoaded = false;
          secondLoaded = false;
          thirdLoaded = false;
          app.use(first);
          app.use(third);
          _context4.next = 12;
          return regeneratorRuntime.awrap(app.ready());

        case 12:
          readyContext = _context4.sent;
          t.equal(app, readyContext);
          t.ok(firstLoaded, 'first is loaded');
          t.ok(secondLoaded, 'second is loaded');
          t.ok(thirdLoaded, 'third is loaded');
          t.pass('booted');

        case 18:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('multiple reentrant plugin loading', function _callee2(t) {
  var app, firstLoaded, secondLoaded, thirdLoaded, fourthLoaded, fifthLoaded, first, second, third, fourth, fifth;
  return regeneratorRuntime.async(function _callee2$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          fifth = function _ref8(s, opts) {
            return regeneratorRuntime.async(function fifth$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.ok(thirdLoaded, 'third is loaded');
                    t.ok(fourthLoaded, 'fourth is loaded');
                    t.notOk(fifthLoaded, 'fifth is not loaded');
                    fifthLoaded = true;

                  case 6:
                  case "end":
                    return _context9.stop();
                }
              }
            });
          };

          fourth = function _ref7(s, opts) {
            return regeneratorRuntime.async(function fourth$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.ok(thirdLoaded, 'third is loaded');
                    t.notOk(fourthLoaded, 'fourth is not loaded');
                    t.notOk(fifthLoaded, 'fifth is not loaded');
                    fourthLoaded = true;

                  case 6:
                  case "end":
                    return _context8.stop();
                }
              }
            });
          };

          third = function _ref6(s, opts) {
            return regeneratorRuntime.async(function third$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    t.notOk(fourthLoaded, 'fourth is not loaded');
                    t.notOk(fifthLoaded, 'fifth is not loaded');
                    thirdLoaded = true;

                  case 6:
                  case "end":
                    return _context7.stop();
                }
              }
            });
          };

          second = function _ref5(s, opts) {
            return regeneratorRuntime.async(function second$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    t.notOk(fourthLoaded, 'fourth is not loaded');
                    t.notOk(fifthLoaded, 'fifth is not loaded');
                    secondLoaded = true;
                    s.use(third);
                    _context6.next = 9;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 9:
                    s.use(fourth);

                  case 10:
                  case "end":
                    return _context6.stop();
                }
              }
            });
          };

          first = function _ref4(s, opts) {
            return regeneratorRuntime.async(function first$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    t.notOk(firstLoaded, 'first is not loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    t.notOk(fourthLoaded, 'fourth is not loaded');
                    t.notOk(fifthLoaded, 'fifth is not loaded');
                    firstLoaded = true;
                    s.use(second);

                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            });
          };

          t.plan(31);
          app = boot();
          firstLoaded = false;
          secondLoaded = false;
          thirdLoaded = false;
          fourthLoaded = false;
          fifthLoaded = false;
          app.use(first);
          app.use(fifth);
          _context10.next = 16;
          return regeneratorRuntime.awrap(app.ready());

        case 16:
          t.ok(firstLoaded, 'first is loaded');
          t.ok(secondLoaded, 'second is loaded');
          t.ok(thirdLoaded, 'third is loaded');
          t.ok(fourthLoaded, 'fourth is loaded');
          t.ok(fifthLoaded, 'fifth is loaded');
          t.pass('booted');

        case 22:
        case "end":
          return _context10.stop();
      }
    }
  });
});
test('async ready plugin registration (errored)', function _callee4(t) {
  var app;
  return regeneratorRuntime.async(function _callee4$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          t.plan(1);
          app = boot();
          app.use(function _callee3(server, opts) {
            return regeneratorRuntime.async(function _callee3$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    _context11.next = 2;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 2:
                    throw new Error('kaboom');

                  case 3:
                  case "end":
                    return _context11.stop();
                }
              }
            });
          });
          _context12.prev = 3;
          _context12.next = 6;
          return regeneratorRuntime.awrap(app.ready());

        case 6:
          t.fail('we should not be here');
          _context12.next = 12;
          break;

        case 9:
          _context12.prev = 9;
          _context12.t0 = _context12["catch"](3);
          t.is(_context12.t0.message, 'kaboom');

        case 12:
        case "end":
          return _context12.stop();
      }
    }
  }, null, null, [[3, 9]]);
});
test('after', function _callee5(t) {
  var app, firstLoaded, secondLoaded, thirdLoaded, first, second, third, readyContext;
  return regeneratorRuntime.async(function _callee5$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          third = function _ref11() {
            return regeneratorRuntime.async(function third$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    _context15.next = 5;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 5:
                    thirdLoaded = true;

                  case 6:
                  case "end":
                    return _context15.stop();
                }
              }
            });
          };

          second = function _ref10(err) {
            return regeneratorRuntime.async(function second$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    t.error(err);
                    t.ok(firstLoaded, 'first is loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    _context14.next = 6;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 6:
                    secondLoaded = true;

                  case 7:
                  case "end":
                    return _context14.stop();
                }
              }
            });
          };

          first = function _ref9(s, opts) {
            return regeneratorRuntime.async(function first$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    t.notOk(firstLoaded, 'first is not loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    firstLoaded = true;
                    s.after(second);
                    s.after(third);

                  case 6:
                  case "end":
                    return _context13.stop();
                }
              }
            });
          };

          t.plan(15);
          app = boot();
          firstLoaded = false;
          secondLoaded = false;
          thirdLoaded = false;
          app.use(first);
          _context16.next = 11;
          return regeneratorRuntime.awrap(app.ready());

        case 11:
          readyContext = _context16.sent;
          t.equal(app, readyContext);
          t.ok(firstLoaded, 'first is loaded');
          t.ok(secondLoaded, 'second is loaded');
          t.ok(thirdLoaded, 'third is loaded');
          t.pass('booted');

        case 17:
        case "end":
          return _context16.stop();
      }
    }
  });
});
test('after wrapped', function _callee6(t) {
  var app, firstLoaded, secondLoaded, thirdLoaded, first, second, third, readyContext;
  return regeneratorRuntime.async(function _callee6$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          third = function _ref14() {
            return regeneratorRuntime.async(function third$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    t.ok(firstLoaded, 'first is loaded');
                    t.ok(secondLoaded, 'second is loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    _context19.next = 5;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 5:
                    thirdLoaded = true;

                  case 6:
                  case "end":
                    return _context19.stop();
                }
              }
            });
          };

          second = function _ref13(err) {
            return regeneratorRuntime.async(function second$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    t.error(err);
                    t.ok(firstLoaded, 'first is loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    _context18.next = 6;
                    return regeneratorRuntime.awrap(sleep(10));

                  case 6:
                    secondLoaded = true;

                  case 7:
                  case "end":
                    return _context18.stop();
                }
              }
            });
          };

          first = function _ref12(s, opts) {
            return regeneratorRuntime.async(function first$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    t.notOk(firstLoaded, 'first is not loaded');
                    t.notOk(secondLoaded, 'second is not loaded');
                    t.notOk(thirdLoaded, 'third is not loaded');
                    firstLoaded = true;
                    s.after(second);
                    s.after(third);

                  case 6:
                  case "end":
                    return _context17.stop();
                }
              }
            });
          };

          t.plan(15);
          app = {};
          boot(app);
          firstLoaded = false;
          secondLoaded = false;
          thirdLoaded = false;
          app.use(first);
          _context20.next = 12;
          return regeneratorRuntime.awrap(app.ready());

        case 12:
          readyContext = _context20.sent;
          t.equal(app, readyContext);
          t.ok(firstLoaded, 'first is loaded');
          t.ok(secondLoaded, 'second is loaded');
          t.ok(thirdLoaded, 'third is loaded');
          t.pass('booted');

        case 18:
        case "end":
          return _context20.stop();
      }
    }
  });
});