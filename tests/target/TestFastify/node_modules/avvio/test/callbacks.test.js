'use strict';

require("core-js/modules/es.array.for-each");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.timers");

var test = require('tap').test;

var boot = require('..');

test('reentrant', function (t) {
  t.plan(7);
  var app = boot();
  var firstLoaded = false;
  var secondLoaded = false;
  app.use(first).after(function () {
    t.ok(firstLoaded, 'first is loaded');
    t.ok(secondLoaded, 'second is loaded');
    t.pass('booted');
  });

  function first(s, opts, done) {
    t.notOk(firstLoaded, 'first is not loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    firstLoaded = true;
    s.use(second);
    done();
  }

  function second(s, opts, done) {
    t.ok(firstLoaded, 'first is loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    secondLoaded = true;
    done();
  }
});
test('reentrant with callbacks deferred', function (t) {
  t.plan(11);
  var app = boot();
  var firstLoaded = false;
  var secondLoaded = false;
  var thirdLoaded = false;
  app.use(first);

  function first(s, opts, done) {
    t.notOk(firstLoaded, 'first is not loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    t.notOk(thirdLoaded, 'third is not loaded');
    firstLoaded = true;
    s.use(second);
    setTimeout(function () {
      try {
        s.use(third);
      } catch (err) {
        t.is(err.message, 'root plugin has already booted');
      }
    }, 500);
    done();
  }

  function second(s, opts, done) {
    t.ok(firstLoaded, 'first is loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    t.notOk(thirdLoaded, 'third is not loaded');
    secondLoaded = true;
    done();
  }

  function third(s, opts, done) {
    thirdLoaded = true;
    done();
  }

  app.on('start', function () {
    t.ok(firstLoaded, 'first is loaded');
    t.ok(secondLoaded, 'second is loaded');
    t.notOk(thirdLoaded, 'third is not loaded');
    t.pass('booted');
  });
});
test('multiple loading time', function (t) {
  t.plan(1);
  var app = boot();

  function a(instance, opts, done) {
    (opts.use || []).forEach(function (_) {
      instance.use(_, {
        use: opts.subUse || []
      });
    });
    setTimeout(done, 10);
  }

  var pointer = a;

  function b(instance, opts, done) {
    (opts.use || []).forEach(function (_) {
      instance.use(_, {
        use: opts.subUse || []
      });
    });
    setTimeout(done, 20);
  }

  function c(instance, opts, done) {
    (opts.use || []).forEach(function (_) {
      instance.use(_, {
        use: opts.subUse || []
      });
    });
    setTimeout(done, 30);
  }

  app.use(function a(instance, opts, done) {
    instance.use(pointer, {
      use: [b],
      subUse: [c]
    }).use(b);
    setTimeout(done, 0);
  }).after(function () {
    t.pass('booted');
  });
});