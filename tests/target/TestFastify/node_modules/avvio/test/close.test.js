'use strict';

var test = require('tap').test;

var boot = require('..');

test('boot an app with a plugin', function (t) {
  t.plan(4);
  var app = boot();
  var last = false;
  app.use(function (server, opts, done) {
    app.onClose(function () {
      t.ok('onClose called');
      t.notOk(last);
      last = true;
    });
    done();
  });
  app.on('start', function () {
    app.close(function () {
      t.ok(last);
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose arguments', function (t) {
  t.plan(5);
  var app = boot();
  app.use(function (server, opts, next) {
    server.onClose(function (instance, done) {
      t.ok('called');
      t.equal(server, instance);
      done();
    });
    next();
  });
  app.use(function (server, opts, next) {
    server.onClose(function (instance) {
      t.ok('called');
      t.equal(server, instance);
    });
    next();
  });
  app.on('start', function () {
    app.close(function () {
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose arguments - fastify encapsulation test case', function (t) {
  t.plan(5);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.onClose(function (i, done) {
      t.ok(i.test);
      done();
    });
    next();
  });
  app.use(function (instance, opts, next) {
    t.notOk(instance.test);
    instance.onClose(function (i, done) {
      t.notOk(i.test);
      done();
    });
    next();
  });
  app.on('start', function () {
    t.notOk(app.test);
    app.close(function () {
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose arguments - fastify encapsulation test case / 2', function (t) {
  t.plan(5);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  server.use(function (instance, opts, next) {
    instance.test = true;
    instance.onClose(function (i, done) {
      t.ok(i.test);
      done();
    });
    next();
  });
  server.use(function (instance, opts, next) {
    t.notOk(instance.test);
    instance.onClose(function (i, done) {
      t.notOk(i.test);
      done();
    });
    next();
  });
  app.on('start', function () {
    t.notOk(server.test);

    try {
      server.close();
      t.pass();
    } catch (err) {
      t.fail(err);
    }
  });
});
test('onClose arguments - encapsulation test case no server', function (t) {
  t.plan(5);
  var app = boot();

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.onClose(function (i, done) {
      t.notOk(i.test);
      done();
    });
    next();
  });
  app.use(function (instance, opts, next) {
    t.notOk(instance.test);
    instance.onClose(function (i) {
      t.notOk(i.test);
    });
    next();
  });
  app.on('start', function () {
    t.notOk(app.test);
    app.close(function () {
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose should handle errors', function (t) {
  t.plan(3);
  var app = boot();
  app.use(function (server, opts, done) {
    app.onClose(function (instance, done) {
      t.ok('called');
      done(new Error('some error'));
    });
    done();
  });
  app.on('start', function () {
    app.close(function (err) {
      t.is(err.message, 'some error');
      t.pass('Closed in the correct order');
    });
  });
});
test('#54 close handlers should receive same parameters when queue is not empty', function (t) {
  t.plan(6);
  var context = {
    test: true
  };
  var app = boot(context);
  app.use(function (server, opts, done) {
    done();
  });
  app.on('start', function () {
    app.close(function (err, done) {
      t.is(err, null);
      t.pass('Closed in the correct order');
      setImmediate(done);
    });
    app.close(function (err) {
      t.is(err, null);
      t.pass('Closed in the correct order');
    });
    app.close(function (err) {
      t.is(err, null);
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose should handle errors / 2', function (t) {
  t.plan(4);
  var app = boot();
  app.onClose(function (instance, done) {
    t.ok('called');
    done(new Error('some error'));
  });
  app.use(function (server, opts, done) {
    app.onClose(function (instance, done) {
      t.ok('called');
      done();
    });
    done();
  });
  app.on('start', function () {
    app.close(function (err) {
      t.is(err.message, 'some error');
      t.pass('Closed in the correct order');
    });
  });
});
test('close arguments', function (t) {
  t.plan(4);
  var app = boot();
  app.use(function (server, opts, done) {
    app.onClose(function (instance, done) {
      t.ok('called');
      done();
    });
    done();
  });
  app.on('start', function () {
    app.close(function (err, instance, done) {
      t.error(err);
      t.equal(instance, app);
      done();
      t.pass('Closed in the correct order');
    });
  });
});
test('close event', function (t) {
  t.plan(3);
  var app = boot();
  var last = false;
  app.on('start', function () {
    app.close(function () {
      t.notOk(last);
      last = true;
    });
  });
  app.on('close', function () {
    t.ok(last);
    t.pass('event fired');
  });
});
test('close order', function (t) {
  t.plan(5);
  var app = boot();
  var order = [1, 2, 3, 4];
  app.use(function (server, opts, done) {
    app.onClose(function () {
      t.is(order.shift(), 3);
    });
    app.use(function (server, opts, done) {
      app.onClose(function () {
        t.is(order.shift(), 2);
      });
      done();
    });
    done();
  });
  app.use(function (server, opts, done) {
    app.onClose(function () {
      t.is(order.shift(), 1);
    });
    done();
  });
  app.on('start', function () {
    app.close(function () {
      t.is(order.shift(), 4);
      t.pass('Closed in the correct order');
    });
  });
});
test('close without a cb', function (t) {
  t.plan(1);
  var app = boot();
  app.onClose(function (instance, done) {
    t.ok('called');
    done();
  });
  app.close();
});
test('onClose with 0 parameters', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (instance, opts, next) {
    instance.onClose(function () {
      t.ok('called');
      t.is(arguments.length, 0);
    });
    next();
  });
  app.close(function (err) {
    t.error(err);
    t.pass('Closed');
  });
});
test('onClose with 1 parameter', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (instance, opts, next) {
    instance.onClose(function (done) {
      t.is(arguments.length, 1);
      done();
    });
    next();
  });
  app.close(function (err) {
    t.error(err);
    t.pass('Closed');
  });
});
test('close passing not a function', function (t) {
  t.plan(1);
  var app = boot();
  app.onClose(function (instance, done) {
    t.ok('called');
    done();
  });
  t.throws(function () {
    return app.close({});
  }, {
    message: 'not a function'
  });
});
test('close passing not a function', function (t) {
  t.plan(1);
  var app = boot();
  app.onClose(function (instance, done) {
    t.ok('called');
    done();
  });
  t.throws(function () {
    return app.close({});
  }, {
    message: 'not a function'
  });
});
test('close passing not a function when wrapping', function (t) {
  t.plan(1);
  var app = {};
  boot(app);
  app.onClose(function (instance, done) {
    t.ok('called');
    done();
  });
  t.throws(function () {
    return app.close({});
  }, {
    message: 'not a function'
  });
});
test('close should trigger ready()', function (t) {
  t.plan(2);
  var app = boot(null, {
    autostart: false
  });
  app.on('start', function () {
    // this will be emitted after the
    // callback in close() is fired
    t.pass('started');
  });
  app.close(function () {
    t.pass('closed');
  });
});
test('close without a cb returns a promise', function (t) {
  t.plan(1);
  var app = boot();
  app.close().then(function () {
    t.pass('promise resolves');
  });
});
test('close without a cb returns a promise when attaching to a server', function (t) {
  t.plan(1);
  var server = {};
  boot(server);
  server.close().then(function () {
    t.pass('promise resolves');
  });
});
test('close with async onClose handlers', function (t) {
  t.plan(5);
  var app = boot();
  var order = [1, 2, 3, 4];
  app.onClose(function () {
    return new Promise(function (resolve) {
      return setTimeout(resolve, 500);
    }).then(function () {
      t.is(order.shift(), 3);
    });
  });
  app.onClose(function () {
    t.is(order.shift(), 2);
  });
  app.onClose(function (instance) {
    return new Promise(function (resolve) {
      return setTimeout(resolve, 500);
    }).then(function () {
      t.is(order.shift(), 1);
    });
  });
  app.on('start', function () {
    app.close(function () {
      t.is(order.shift(), 4);
      t.pass('Closed in the correct order');
    });
  });
});
test('onClose callback must be a function', function (t) {
  t.plan(1);
  var app = boot();
  app.use(function (server, opts, done) {
    t.throws(function () {
      return app.onClose({});
    }, {
      message: 'not a function'
    });
    done();
  });
});