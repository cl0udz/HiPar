'use strict';

var test = require('tap').test;

var boot = require('..');

test('custom inheritance', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s) {
    t.equal(s, server);
    var res = Object.create(s);
    res.b = 42;
    return res;
  };

  app.use(function first(s, opts, cb) {
    t.notEqual(s, server);
    t.ok(server.isPrototypeOf(s));
    cb();
  });
});
test('custom inheritance multiple levels', function (t) {
  t.plan(6);
  var server = {
    count: 0
  };
  var app = boot(server);

  app.override = function (s) {
    var res = Object.create(s);
    res.count = res.count + 1;
    return res;
  };

  app.use(function first(s1, opts, cb) {
    t.notEqual(s1, server);
    t.ok(server.isPrototypeOf(s1));
    t.equal(s1.count, 1);
    s1.use(second);
    cb();

    function second(s2, opts, cb) {
      t.notEqual(s2, s1);
      t.ok(s1.isPrototypeOf(s2));
      t.equal(s2.count, 2);
      cb();
    }
  });
});
test('custom inheritance multiple levels twice', function (t) {
  t.plan(10);
  var server = {
    count: 0
  };
  var app = boot(server);

  app.override = function (s) {
    var res = Object.create(s);
    res.count = res.count + 1;
    return res;
  };

  app.use(function first(s1, opts, cb) {
    t.notEqual(s1, server);
    t.ok(server.isPrototypeOf(s1));
    t.equal(s1.count, 1);
    s1.use(second);
    s1.use(third);
    var prev;
    cb();

    function second(s2, opts, cb) {
      prev = s2;
      t.notEqual(s2, s1);
      t.ok(s1.isPrototypeOf(s2));
      t.equal(s2.count, 2);
      cb();
    }

    function third(s3, opts, cb) {
      t.notEqual(s3, s1);
      t.ok(s1.isPrototypeOf(s3));
      t.notOk(prev.isPrototypeOf(s3));
      t.equal(s3.count, 2);
      cb();
    }
  });
});
test('custom inheritance multiple levels with multiple heads', function (t) {
  t.plan(13);
  var server = {
    count: 0
  };
  var app = boot(server);

  app.override = function (s) {
    var res = Object.create(s);
    res.count = res.count + 1;
    return res;
  };

  app.use(function first(s1, opts, cb) {
    t.notEqual(s1, server);
    t.ok(server.isPrototypeOf(s1));
    t.equal(s1.count, 1);
    s1.use(second);
    cb();

    function second(s2, opts, cb) {
      t.notEqual(s2, s1);
      t.ok(s1.isPrototypeOf(s2));
      t.equal(s2.count, 2);
      cb();
    }
  });
  app.use(function third(s1, opts, cb) {
    t.notEqual(s1, server);
    t.ok(server.isPrototypeOf(s1));
    t.equal(s1.count, 1);
    s1.use(fourth);
    cb();

    function fourth(s2, opts, cb) {
      t.notEqual(s2, s1);
      t.ok(s1.isPrototypeOf(s2));
      t.equal(s2.count, 2);
      cb();
    }
  });
  app.ready(function () {
    t.equal(server.count, 0);
  });
});
test('fastify test case', function (t) {
  t.plan(7);

  var noop = function noop() {};

  function build() {
    var app = boot(server, {});

    app.override = function (s) {
      return Object.create(s);
    };

    server.add = function (name, fn, cb) {
      if (this[name]) return cb(new Error('already existent'));
      this[name] = fn;
      cb();
    };

    return server;

    function server(req, res) {}
  }

  var instance = build();
  t.ok(instance.add);
  t.ok(instance.use);
  instance.use(function (i, opts, cb) {
    t.notEqual(i, instance);
    t.ok(instance.isPrototypeOf(i));
    i.add('test', noop, function (err) {
      t.error(err);
      t.ok(i.test);
      cb();
    });
  });
  instance.ready(function () {
    t.notOk(instance.test);
  });
});
test('override should pass also the plugin function', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, fn) {
    t.type(fn, 'function');
    t.equal(fn, first);
    return s;
  };

  app.use(first);

  function first(s, opts, cb) {
    t.equal(s, server);
    cb();
  }
});
test('skip override - fastify test case', function (t) {
  t.plan(2);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, func) {
    if (func[Symbol.for('skip-override')]) {
      return s;
    }

    return Object.create(s);
  };

  first[Symbol.for('skip-override')] = true;
  app.use(first);

  function first(s, opts, cb) {
    t.equal(s, server);
    t.notOk(server.isPrototypeOf(s));
    cb();
  }
});
test('override can receive options object', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var options = {
    hello: 'world'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    t.equal(s, server);
    t.deepEqual(opts, options);
    var res = Object.create(s);
    res.b = 42;
    return res;
  };

  app.use(function first(s, opts, cb) {
    t.notEqual(s, server);
    t.ok(server.isPrototypeOf(s));
    cb();
  }, options);
});
test('override can receive options function', function (t) {
  t.plan(8);
  var server = {
    my: 'server'
  };
  var options = {
    hello: 'world'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    t.equal(s, server);

    if (typeof opts !== 'function') {
      t.deepEqual(opts, options);
    }

    var res = Object.create(s);
    res.b = 42;
    res.bar = 'world';
    return res;
  };

  app.use(function first(s, opts, cb) {
    t.notEqual(s, server);
    t.ok(server.isPrototypeOf(s));
    s.foo = 'bar';
    cb();
  }, options);
  app.use(function second(s, opts, cb) {
    t.notOk(s.foo);
    t.deepEqual(opts, {
      hello: 'world'
    });
    t.ok(server.isPrototypeOf(s));
    cb();
  }, function (p) {
    return {
      hello: p.bar
    };
  });
});