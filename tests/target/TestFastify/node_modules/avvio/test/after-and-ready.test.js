'use strict';

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.create");

var test = require('tap').test;

var boot = require('..');

test('boot a plugin and then execute a call after that', function (t) {
  t.plan(5);
  var app = boot();
  var pluginLoaded = false;
  var afterCalled = false;
  app.use(function (s, opts, done) {
    t.notOk(afterCalled, 'after not called');
    pluginLoaded = true;
    done();
  });
  app.after(function (err, cb) {
    t.error(err);
    t.ok(pluginLoaded, 'afterred!');
    afterCalled = true;
    cb();
  });
  app.on('start', function () {
    t.ok(afterCalled, 'after called');
    t.ok(pluginLoaded, 'plugin loaded');
  });
});
test('after without a done callback', function (t) {
  t.plan(5);
  var app = boot();
  var pluginLoaded = false;
  var afterCalled = false;
  app.use(function (s, opts, done) {
    t.notOk(afterCalled, 'after not called');
    pluginLoaded = true;
    done();
  });
  app.after(function (err) {
    t.error(err);
    t.ok(pluginLoaded, 'afterred!');
    afterCalled = true;
  });
  app.on('start', function () {
    t.ok(afterCalled, 'after called');
    t.ok(pluginLoaded, 'plugin loaded');
  });
});
test('verify when a afterred call happens', function (t) {
  t.plan(3);
  var app = boot();
  app.use(function (s, opts, done) {
    done();
  });
  app.after(function (err, cb) {
    t.error(err);
    t.pass('afterred finished');
    cb();
  });
  app.on('start', function () {
    t.pass('booted');
  });
});
test('internal after', function (t) {
  t.plan(18);
  var app = boot();
  var firstLoaded = false;
  var secondLoaded = false;
  var thirdLoaded = false;
  var afterCalled = false;
  app.use(first);
  app.use(third);

  function first(s, opts, done) {
    t.notOk(firstLoaded, 'first is not loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    t.notOk(thirdLoaded, 'third is not loaded');
    firstLoaded = true;
    s.use(second);
    s.after(function (err, cb) {
      t.error(err);
      t.notOk(afterCalled, 'after was not called');
      afterCalled = true;
      cb();
    });
    done();
  }

  function second(s, opts, done) {
    t.ok(firstLoaded, 'first is loaded');
    t.notOk(secondLoaded, 'second is not loaded');
    t.notOk(thirdLoaded, 'third is not loaded');
    t.notOk(afterCalled, 'after was not called');
    secondLoaded = true;
    done();
  }

  function third(s, opts, done) {
    t.ok(firstLoaded, 'first is loaded');
    t.ok(secondLoaded, 'second is loaded');
    t.ok(afterCalled, 'after was called');
    t.notOk(thirdLoaded, 'third is not loaded');
    thirdLoaded = true;
    done();
  }

  app.on('start', function () {
    t.ok(firstLoaded, 'first is loaded');
    t.ok(secondLoaded, 'second is loaded');
    t.ok(thirdLoaded, 'third is loaded');
    t.ok(afterCalled, 'after was called');
    t.pass('booted');
  });
});
test('ready adds at the end of the queue', function (t) {
  t.plan(14);
  var app = boot();
  var pluginLoaded = false;
  var afterCalled = false;
  var readyCalled = false;
  app.ready(function (err, cb) {
    t.error(err);
    t.ok(pluginLoaded, 'after the plugin');
    t.ok(afterCalled, 'after after');
    readyCalled = true;
    process.nextTick(cb);
  });
  app.use(function (s, opts, done) {
    t.notOk(afterCalled, 'after not called');
    t.notOk(readyCalled, 'ready not called');
    pluginLoaded = true;
    app.ready(function (err) {
      t.error(err);
      t.ok(readyCalled, 'after the first ready');
      t.ok(afterCalled, 'after the after callback');
    });
    done();
  });
  app.after(function (err, cb) {
    t.error(err);
    t.ok(pluginLoaded, 'executing after!');
    t.notOk(readyCalled, 'ready not called');
    afterCalled = true;
    cb();
  });
  app.on('start', function () {
    t.ok(afterCalled, 'after called');
    t.ok(pluginLoaded, 'plugin loaded');
    t.ok(readyCalled, 'ready called');
  });
});
test('if the after/ready callback has two parameters, the first one must be the context', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done();
  });
  app.after(function (err, context, cb) {
    t.error(err);
    t.equal(server, context);
    cb();
  });
  app.ready(function (err, context, cb) {
    t.error(err);
    t.equal(server, context);
    cb();
  });
});
test('error should come in the first after - one parameter', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.after(function (err) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('error should come in the first after - two parameters', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.after(function (err, cb) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
    cb();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('error should come in the first after - three parameter', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.after(function (err, context, cb) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
    t.equal(context, server);
    cb();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('error should come in the first ready - one parameter', function (t) {
  t.plan(2);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.ready(function (err) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
  });
});
test('error should come in the first ready - two parameters', function (t) {
  t.plan(2);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.ready(function (err, cb) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
    cb();
  });
});
test('error should come in the first ready - three parameters', function (t) {
  t.plan(3);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.ready(function (err, context, cb) {
    t.ok(err instanceof Error);
    t.is(err.message, 'err');
    t.equal(context, server);
    cb();
  });
});
test('if `use` has a callback with more then one parameter, the error must not reach ready', function (t) {
  t.plan(1);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  });
  app.ready(function (err) {
    t.ok(err);
  });
});
test('if `use` has a callback without parameters, the error must reach ready', function (t) {
  t.plan(1);
  var server = {
    my: 'server'
  };
  var app = boot(server);
  app.use(function (s, opts, done) {
    done(new Error('err'));
  }, function () {});
  app.ready(function (err) {
    t.ok(err);
  });
});
test('should pass the errors from after to ready', function (t) {
  t.plan(6);
  var server = {};
  var app = boot(server, {});
  server.use(function (s, opts, done) {
    t.equal(s, server, 'the first argument is the server');
    t.deepEqual(opts, {}, 'no options');
    done();
  }).after(function (err, done) {
    t.error(err);
    done(new Error('some error'));
  });
  server.onClose(function () {
    t.ok('onClose called');
  });
  server.ready(function (err) {
    t.is(err.message, 'some error');
  });
  app.on('start', function () {
    server.close(function () {
      t.pass('booted');
    });
  });
});
test('after no encapsulation', function (t) {
  t.plan(4);
  var app = boot();

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.after(function (err, i, done) {
      t.error(err);
      t.notOk(i.test);
      done();
    });
    next();
  });
  app.after(function (err, i, done) {
    t.error(err);
    t.notOk(i.test);
    done();
  });
});
test('ready no encapsulation', function (t) {
  t.plan(4);
  var app = boot();

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.ready(function (err, i, done) {
      t.error(err);
      t.notOk(i.test);
      done();
    });
    next();
  });
  app.ready(function (err, i, done) {
    t.error(err);
    t.notOk(i.test);
    done();
  });
});
test('after encapsulation with a server', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.after(function (err, i, done) {
      t.error(err);
      t.ok(i.test);
      done();
    });
    next();
  });
  app.after(function (err, i, done) {
    t.error(err);
    t.notOk(i.test);
    done();
  });
});
test('ready encapsulation with a server', function (t) {
  t.plan(4);
  var server = {
    my: 'server'
  };
  var app = boot(server);

  app.override = function (s, fn, opts) {
    s = Object.create(s);
    return s;
  };

  app.use(function (instance, opts, next) {
    instance.test = true;
    instance.ready(function (err, i, done) {
      t.error(err);
      t.ok(i.test);
      done();
    });
    next();
  });
  app.ready(function (err, i, done) {
    t.error(err);
    t.notOk(i.test);
    done();
  });
});
test('after should passthrough the errors', function (t) {
  t.plan(5);
  var app = boot();
  var pluginLoaded = false;
  var afterCalled = false;
  app.use(function (s, opts, done) {
    t.notOk(afterCalled, 'after not called');
    pluginLoaded = true;
    done(new Error('kaboom'));
  });
  app.after(function () {
    t.ok(pluginLoaded, 'afterred!');
    afterCalled = true;
  });
  app.ready(function (err) {
    t.ok(err);
    t.ok(afterCalled, 'after called');
    t.ok(pluginLoaded, 'plugin loaded');
  });
});
test('stop loading plugins if it errors', function (t) {
  t.plan(2);
  var app = boot();
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done(new Error('kaboom'));
  });
  app.use(function second(server, opts, done) {
    t.fail('this should never be called');
  });
  app.ready(function (err) {
    t.equal(err.message, 'kaboom');
  });
});
test('keep loading if there is an .after', function (t) {
  t.plan(4);
  var app = boot();
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done(new Error('kaboom'));
  });
  app.after(function (err) {
    t.equal(err.message, 'kaboom');
  });
  app.use(function second(server, opts, done) {
    t.pass('second called');
    done();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('do not load nested plugin if parent errors', function (t) {
  t.plan(4);
  var app = boot();
  app.use(function first(server, opts, done) {
    t.pass('first called');
    server.use(function second(_, opts, done) {
      t.fail('this should never be called');
    });
    done(new Error('kaboom'));
  });
  app.after(function (err) {
    t.equal(err.message, 'kaboom');
  });
  app.use(function third(server, opts, done) {
    t.pass('third called');
    done();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('.after nested', function (t) {
  t.plan(4);
  var app = boot();
  app.use(function outer(app, opts, done) {
    app.use(function first(app, opts, done) {
      t.pass('first called');
      done(new Error('kaboom'));
    });
    app.after(function (err) {
      t.equal(err.message, 'kaboom');
    });
    app.use(function second(app, opts, done) {
      t.pass('second called');
      done();
    });
    done();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('nested error', function (t) {
  t.plan(4);
  var app = boot();
  app.use(function outer(app, opts, done) {
    app.use(function first(app, opts, done) {
      t.pass('first called');
      done(new Error('kaboom'));
    });
    app.use(function second(app, opts, done) {
      t.fail('this should never be called');
    });
    done();
  });
  app.after(function (err) {
    t.equal(err.message, 'kaboom');
  });
  app.use(function third(server, opts, done) {
    t.pass('third called');
    done();
  });
  app.ready(function (err) {
    t.error(err);
  });
});
test('preReady event', function (t) {
  t.plan(4);
  var app = boot();
  var order = [1, 2];
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done();
  });
  app.use(function second(server, opts, done) {
    t.pass('second called');
    done();
  });
  app.on('preReady', function () {
    t.is(order.shift(), 1);
  });
  app.ready(function () {
    t.is(order.shift(), 2);
  });
});
test('preReady event (multiple)', function (t) {
  t.plan(6);
  var app = boot();
  var order = [1, 2, 3, 4];
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done();
  });
  app.use(function second(server, opts, done) {
    t.pass('second called');
    done();
  });
  app.on('preReady', function () {
    t.is(order.shift(), 1);
  });
  app.on('preReady', function () {
    t.is(order.shift(), 2);
  });
  app.on('preReady', function () {
    t.is(order.shift(), 3);
  });
  app.ready(function () {
    t.is(order.shift(), 4);
  });
});
test('preReady event (nested)', function (t) {
  t.plan(6);
  var app = boot();
  var order = [1, 2, 3, 4];
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done();
  });
  app.use(function second(server, opts, done) {
    t.pass('second called');
    server.on('preReady', function () {
      t.is(order.shift(), 3);
    });
    done();
  });
  app.on('preReady', function () {
    t.is(order.shift(), 1);
  });
  app.on('preReady', function () {
    t.is(order.shift(), 2);
  });
  app.ready(function () {
    t.is(order.shift(), 4);
  });
});
test('preReady event (errored)', function (t) {
  t.plan(5);
  var app = boot();
  var order = [1, 2, 3];
  app.use(function first(server, opts, done) {
    t.pass('first called');
    done(new Error('kaboom'));
  });
  app.use(function second(server, opts, done) {
    t.fail('We should not be here');
  });
  app.on('preReady', function () {
    t.is(order.shift(), 1);
  });
  app.on('preReady', function () {
    t.is(order.shift(), 2);
  });
  app.ready(function (err) {
    t.ok(err);
    t.is(order.shift(), 3);
  });
});