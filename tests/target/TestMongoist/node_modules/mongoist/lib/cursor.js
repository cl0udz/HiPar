"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.async-iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var _require = require('stream'),
    Readable = _require.Readable;

var Cursor =
/*#__PURE__*/
function (_Readable) {
  _inherits(Cursor, _Readable);

  function Cursor(cursorFactory) {
    var _this;

    _classCallCheck(this, Cursor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cursor).call(this, {
      objectMode: true,
      highWaterMark: 0
    }));
    _this.cursorFactory = cursorFactory; // Currently mongodb cursor options itcount, readPref, showDiskLoc are not implemented - and some other
    // See https://docs.mongodb.com/manual/reference/method/js-cursor/

    var operations = ['batchSize', 'hint', 'limit', 'maxTimeMS', 'max', 'min', 'skip', 'snapshot', 'sort', 'collation'];
    _this._options = {};
    _this._flags = {};
    operations.forEach(function (operation) {
      Cursor.prototype[operation] = function (data) {
        _this._options[operation] = data;
        return _assertThisInitialized(_this);
      };
    });
    return _this;
  }

  _createClass(Cursor, [{
    key: "map",
    value: function map(fn) {
      var _this2 = this;

      var result = [];
      return new Promise(function (resolve) {
        var loop = function loop() {
          _this2.next().then(function (doc) {
            if (!doc) {
              return resolve(result);
            }

            result.push(fn(doc)); // Avoid maximum call stack size exceeded errors

            setImmediate(loop);
          });
        };

        loop();
      });
    }
  }, {
    key: "forEach",
    value: function forEach(fn) {
      var _this3 = this;

      return new Promise(function (resolve) {
        var loop = function loop() {
          _this3.next().then(function (doc) {
            if (!doc) {
              return resolve();
            }

            fn(doc); // Avoid maximum call stack size exceeded errors

            setImmediate(loop);
          });
        };

        loop();
      });
    }
  }, {
    key: "count",
    value: function count() {
      var _this4 = this;

      return this.getCursor().then(function (cursor) {
        return cursor.count(false, _this4._options);
      });
    }
  }, {
    key: "size",
    value: function size() {
      var _this5 = this;

      return this.getCursor().then(function (cursor) {
        return cursor.count(true, _this5._options);
      });
    }
  }, {
    key: "explain",
    value: function explain() {
      return this.getCursor().then(function (cursor) {
        return cursor.explain();
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      return this.close();
    }
  }, {
    key: "close",
    value: function close() {
      return this.getCursor().then(function (cursor) {
        return cursor.close();
      });
    }
  }, {
    key: "next",
    value: function next() {
      return this.getCursor().then(function (cursor) {
        if (cursor.cursorState.dead || cursor.cursorState.killed) {
          return null;
        }

        return cursor.next();
      });
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this.getCursor().then(function (cursor) {
        return !cursor.isClosed() && cursor.hasNext();
      });
    }
  }, {
    key: "rewind",
    value: function rewind() {
      return this.getCursor().then(function (cursor) {
        return cursor.rewind();
      });
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return this.getCursor().then(function (cursor) {
        return cursor.toArray();
      });
    }
  }, {
    key: "addCursorFlag",
    value: function addCursorFlag(flag, value) {
      this._flags[flag] = value;
      return this;
    }
  }, {
    key: "_read",
    value: function _read() {
      var _this6 = this;

      return this.next().then(function (doc) {
        return _this6.push(doc);
      })["catch"](function (err) {
        return _this6.emit('error', err);
      });
    }
  }, {
    key: "getCursor",
    value: function getCursor() {
      var _this7 = this;

      if (this.cursor) {
        return Promise.resolve(this.cursor);
      }

      return this.cursorFactory().then(function (cursor) {
        Object.keys(_this7._options).forEach(function (key) {
          cursor = cursor[key](_this7._options[key]);
        });
        Object.keys(_this7._flags).forEach(function (key) {
          cursor.addCursorFlag(key, _this7._flags[key]);
        });
        cursor.on('close', function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _this7.emit.apply(_this7, ['close'].concat(args));
        });
        _this7.cursor = cursor;
        return cursor;
      });
    }
  }]);

  return Cursor;
}(Readable); // Feature-detect async iterator protocol support, only available in Node 10+.


if (_typeof(Symbol.asyncIterator) === 'symbol') {
  Cursor.prototype[Symbol.asyncIterator] = function () {
    var _this8 = this;

    var next = function next() {
      return _this8.next().then(function (doc) {
        return {
          value: doc || undefined,
          done: !doc
        };
      });
    };

    return {
      next: next
    };
  };
}

module.exports = Cursor;