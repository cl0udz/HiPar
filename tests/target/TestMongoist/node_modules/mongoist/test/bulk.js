"use strict";

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

var _require = require('chai'),
    expect = _require.expect;

var dropMongoDbCollections = require('drop-mongodb-collections');

var mongoist = require('../');

var connectionString = 'mongodb://localhost:27017/test';
describe('bulk', function () {
  this.timeout(10000);
  var db;
  beforeEach(dropMongoDbCollections(connectionString));
  beforeEach(function () {
    db = mongoist(connectionString);
  });
  afterEach(function () {
    return db.close();
  });
  it('should break excessive bulk operations in junks', function _callee() {
    var bulk, numberOfOp, i, res, docs;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            bulk = db.a.initializeOrderedBulkOp();
            numberOfOp = 1066;

            for (i = 0; i < numberOfOp; ++i) {
              bulk.insert({
                name: 'Spearow',
                type: 'flying'
              });
            }

            _context.next = 5;
            return regeneratorRuntime.awrap(bulk.execute());

          case 5:
            res = _context.sent;
            expect(res.ok).to.equal(1);
            _context.next = 9;
            return regeneratorRuntime.awrap(db.a.find());

          case 9:
            docs = _context.sent;
            expect(docs).to.have.length(numberOfOp);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should replace one using bulk', function _callee2() {
    var bulk, res, docs;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water'
            }, {
              name: 'Starmie',
              type: 'water'
            }]));

          case 2:
            bulk = db.a.initializeUnorderedBulkOp();
            bulk.find({
              name: 'Squirtle'
            }).replaceOne({
              name: 'Charmander',
              type: 'fire'
            });
            bulk.find({
              name: 'Starmie'
            }).replaceOne({
              type: 'fire'
            });
            _context2.next = 7;
            return regeneratorRuntime.awrap(bulk.execute());

          case 7:
            res = _context2.sent;
            expect(res.ok).to.equal(1);
            _context2.next = 11;
            return regeneratorRuntime.awrap(db.a.find());

          case 11:
            docs = _context2.sent;
            expect(docs[0].name).to.equal('Charmander');
            expect(docs[1].name).to.equal(undefined);
            expect(docs[0].type).to.equal('fire');
            expect(docs[1].type).to.equal('fire');

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should update documents in bulk', function _callee3() {
    var bulk, res, docs;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water'
            }, {
              name: 'Starmie',
              type: 'water'
            }, {
              name: 'Lapras',
              type: 'water'
            }, {
              name: 'Charmander',
              type: 'fire'
            }]));

          case 2:
            bulk = db.a.initializeOrderedBulkOp();
            bulk.find({
              type: 'water'
            }).update({
              $set: {
                level: 1
              }
            });
            bulk.find({
              type: 'water'
            }).update({
              $inc: {
                level: 2
              }
            });
            bulk.insert({
              name: 'Spearow',
              type: 'flying'
            });
            bulk.insert({
              name: 'Pidgeotto',
              type: 'flying'
            });
            bulk.insert({
              name: 'Charmeleon',
              type: 'fire'
            });
            bulk.find({
              type: 'flying'
            }).removeOne();
            bulk.find({
              type: 'fire'
            }).remove();
            bulk.find({
              type: 'water'
            }).updateOne({
              $set: {
                hp: 100
              }
            });
            bulk.find({
              name: 'Squirtle'
            }).upsert().updateOne({
              $set: {
                name: 'Wartortle',
                type: 'water'
              }
            });
            bulk.find({
              name: 'Bulbasaur'
            }).upsert().updateOne({
              $setOnInsert: {
                name: 'Bulbasaur'
              },
              $set: {
                type: 'grass',
                level: 1
              }
            });
            _context3.next = 15;
            return regeneratorRuntime.awrap(bulk.execute());

          case 15:
            res = _context3.sent;
            expect(res.ok).to.equal(1);
            _context3.next = 19;
            return regeneratorRuntime.awrap(db.a.find());

          case 19:
            docs = _context3.sent;
            expect(docs[0].name).to.equal('Wartortle');
            expect(docs[1].name).to.equal('Starmie');
            expect(docs[2].name).to.equal('Lapras');
            expect(docs[3].name).to.equal('Pidgeotto');
            expect(docs[4].name).to.equal('Bulbasaur');
            expect(docs[4].type).to.equal('grass');
            expect(docs[0].level).to.equal(3);
            expect(docs[1].level).to.equal(3);
            expect(docs[2].level).to.equal(3);
            expect(docs[4].level).to.equal(1);
            expect(docs[0].hp).to.equal(100);

          case 31:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should execute an empty bulk', function _callee4() {
    var bulk, res;
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water'
            }, {
              name: 'Starmie',
              type: 'water'
            }, {
              name: 'Lapras',
              type: 'water'
            }, {
              name: 'Charmander',
              type: 'fire'
            }]));

          case 2:
            bulk = db.a.initializeOrderedBulkOp();
            _context4.next = 5;
            return regeneratorRuntime.awrap(bulk.execute());

          case 5:
            res = _context4.sent;
            expect(res.ok).to.equal(1);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should return a bulk json representation', function _callee5() {
    var bulk, result;
    return regeneratorRuntime.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water'
            }, {
              name: 'Starmie',
              type: 'water'
            }, {
              name: 'Lapras',
              type: 'water'
            }, {
              name: 'Charmander',
              type: 'fire'
            }]));

          case 2:
            bulk = db.a.initializeOrderedBulkOp();
            bulk.insert({
              item: 'abc123',
              status: 'A',
              defaultQty: 500,
              points: 5
            });
            bulk.insert({
              item: 'ijk123',
              status: 'A',
              defaultQty: 100,
              points: 10
            });
            bulk.find({
              item: null
            }).update({
              $set: {
                item: 'TBD'
              }
            });
            bulk.find({
              status: 'D'
            }).removeOne();
            result = bulk.tojson();
            expect(result.nInsertOps).to.equal(2, 'Should result in nInsertOps field set to 2');
            expect(result.nUpdateOps).to.equal(1, 'Should result in nUpdateOps field set to 1');
            expect(result.nRemoveOps).to.equal(1, 'Should result in nRemoveOps field set to 1');
            expect(result.nBatches).to.equal(3, 'Should result in nBatches field set to 3');

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('should return a bulk string representation', function _callee6() {
    var bulk, result, json;
    return regeneratorRuntime.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water'
            }, {
              name: 'Starmie',
              type: 'water'
            }, {
              name: 'Lapras',
              type: 'water'
            }, {
              name: 'Charmander',
              type: 'fire'
            }]));

          case 2:
            bulk = db.a.initializeOrderedBulkOp();
            bulk.insert({
              item: 'abc123',
              status: 'A',
              defaultQty: 500,
              points: 5
            });
            bulk.insert({
              item: 'ijk123',
              status: 'A',
              defaultQty: 100,
              points: 10
            });
            bulk.find({
              item: null
            }).update({
              $set: {
                item: 'TBD'
              }
            });
            bulk.find({
              status: 'D'
            }).removeOne();
            result = bulk.toString();
            expect(result).to.be.a('string');
            json = JSON.parse(result);
            expect(json.nInsertOps).to.equal(2, 'Should result in nInsertOps field set to 2');
            expect(json.nUpdateOps).to.equal(1, 'Should result in nUpdateOps field set to 1');
            expect(json.nRemoveOps).to.equal(1, 'Should result in nRemoveOps field set to 1');
            expect(json.nBatches).to.equal(3, 'Should result in nBatches field set to 3');

          case 14:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
});