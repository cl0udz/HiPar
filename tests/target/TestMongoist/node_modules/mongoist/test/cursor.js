"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.async-iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _asyncIterator(iterable) {
  var method;

  if (typeof Symbol !== "undefined") {
    if (Symbol.asyncIterator) {
      method = iterable[Symbol.asyncIterator];
      if (method != null) return method.call(iterable);
    }

    if (Symbol.iterator) {
      method = iterable[Symbol.iterator];
      if (method != null) return method.call(iterable);
    }
  }

  throw new TypeError("Object is not async iterable");
}

var _require = require('chai'),
    expect = _require.expect;

var _require2 = require('stream'),
    Writable = _require2.Writable;

var semver = require('semver');

var dropMongoDbCollections = require('drop-mongodb-collections');

var mongoist = require('../');

var connectionString = 'mongodb://localhost:27017/test';
describe('cursor', function () {
  this.timeout(10000);
  var db;
  beforeEach(dropMongoDbCollections(connectionString));
  beforeEach(function _callee() {
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            db = mongoist(connectionString);
            _context.next = 3;
            return regeneratorRuntime.awrap(db.a.insert([{
              name: 'Squirtle',
              type: 'water',
              level: 10
            }, {
              name: 'Starmie',
              type: 'water',
              level: 8
            }, {
              name: 'Charmander',
              type: 'fire',
              level: 8
            }, {
              name: 'Lapras',
              type: 'water',
              level: 12
            }, {
              name: 'bulbasaur',
              type: 'amphybian',
              level: 7
            }]));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  afterEach(function () {
    return db.close();
  });
  it('should return cursor count', function _callee2() {
    var count;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1).count());

          case 2:
            count = _context2.sent;
            expect(count).to.equal(1);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should return cursor size', function _callee3() {
    var size;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1).size());

          case 2:
            size = _context3.sent;
            expect(size).to.equal(1);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should explain a cursor', function _callee4() {
    var explained;
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1).explain());

          case 2:
            explained = _context4.sent;
            expect(explained).to.exist;

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should close a cursor', function _callee5() {
    return regeneratorRuntime.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1).close());

          case 2:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('should iterate a cursor with next', function _callee6() {
    var cursor, document, nonExisting;
    return regeneratorRuntime.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1));

          case 2:
            cursor = _context6.sent;
            _context6.next = 5;
            return regeneratorRuntime.awrap(cursor.next());

          case 5:
            document = _context6.sent;
            expect(document).to.exist; // Exhausting cursor!

            _context6.next = 9;
            return regeneratorRuntime.awrap(cursor.next());

          case 9:
            nonExisting = _context6.sent;
            expect(nonExisting).to.not.exist;

          case 11:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
  it('should return true for hasNext is documents are ready otherwise false', function _callee7() {
    var cursor, hasNextBeforeFirst, noNext, definitelyNoNext;
    return regeneratorRuntime.async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1));

          case 2:
            cursor = _context7.sent;
            _context7.next = 5;
            return regeneratorRuntime.awrap(cursor.hasNext());

          case 5:
            hasNextBeforeFirst = _context7.sent;
            expect(hasNextBeforeFirst).to.be["true"];
            _context7.next = 9;
            return regeneratorRuntime.awrap(cursor.next());

          case 9:
            _context7.next = 11;
            return regeneratorRuntime.awrap(cursor.hasNext());

          case 11:
            noNext = _context7.sent;
            expect(noNext).to.be["false"];
            _context7.next = 15;
            return regeneratorRuntime.awrap(cursor.next());

          case 15:
            _context7.next = 17;
            return regeneratorRuntime.awrap(cursor.hasNext());

          case 17:
            definitelyNoNext = _context7.sent;
            expect(definitelyNoNext).to.be["false"];

          case 19:
          case "end":
            return _context7.stop();
        }
      }
    });
  });
  it('should sort cursors', function _callee8() {
    var sortedDocs, sortedNames;
    return regeneratorRuntime.async(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor().sort({
              name: 1
            }).toArray());

          case 2:
            sortedDocs = _context8.sent;
            sortedNames = sortedDocs.map(function (doc) {
              return doc.name;
            });
            expect(sortedNames).to.deep.equal(['Charmander', 'Lapras', 'Squirtle', 'Starmie', 'bulbasaur']);

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    });
  });
  it('should sort cursors case-insensitively in MongoDB v3.4 and later', function _callee9() {
    var buildInfo, sortedDocs, sortedNames;
    return regeneratorRuntime.async(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return regeneratorRuntime.awrap(db.runCommand('buildInfo'));

          case 2:
            buildInfo = _context9.sent;

            if (!semver.gte(buildInfo.version, '3.4.0')) {
              _context9.next = 9;
              break;
            }

            _context9.next = 6;
            return regeneratorRuntime.awrap(db.a.findAsCursor().collation({
              locale: 'en'
            }).sort({
              name: 1
            }).toArray());

          case 6:
            sortedDocs = _context9.sent;
            sortedNames = sortedDocs.map(function (doc) {
              return doc.name;
            });
            expect(sortedNames).to.deep.equal(['bulbasaur', 'Charmander', 'Lapras', 'Squirtle', 'Starmie']);

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    });
  });
  it('should rewind a cursor', function _callee10() {
    var cursor, obj1, obj2, obj3;
    return regeneratorRuntime.async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            cursor = db.a.findAsCursor().sort({
              name: 1
            });
            _context10.next = 3;
            return regeneratorRuntime.awrap(cursor.next());

          case 3:
            obj1 = _context10.sent;
            expect(obj1.name).to.equal('Charmander');
            _context10.next = 7;
            return regeneratorRuntime.awrap(cursor.next());

          case 7:
            obj2 = _context10.sent;
            expect(obj2.name).to.equal('Lapras');
            _context10.next = 11;
            return regeneratorRuntime.awrap(cursor.rewind());

          case 11:
            _context10.next = 13;
            return regeneratorRuntime.awrap(cursor.next());

          case 13:
            obj3 = _context10.sent;
            expect(obj3.name).to.equal('Charmander');

          case 15:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  it('should iterate a cursor with forEach', function _callee11() {
    var i;
    return regeneratorRuntime.async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            i = 0;
            _context11.next = 3;
            return regeneratorRuntime.awrap(db.a.findAsCursor().forEach(function (pkm) {
              expect(pkm.name).to.exist;
              expect(pkm.type).to.exist;
              i++;
            }));

          case 3:
            expect(i).to.equal(5);

          case 4:
          case "end":
            return _context11.stop();
        }
      }
    });
  });
  it('should map a cursor with map', function _callee12() {
    var names;
    return regeneratorRuntime.async(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor().sort({
              name: 1
            }).map(function (pkm) {
              return pkm.name;
            }));

          case 2:
            names = _context12.sent;
            expect(names).to.deep.equal(['Charmander', 'Lapras', 'Squirtle', 'Starmie', 'bulbasaur']);

          case 4:
          case "end":
            return _context12.stop();
        }
      }
    });
  });
  it('should pass projections to findAsCursor', function _callee13() {
    var docs;
    return regeneratorRuntime.async(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}, {
              name: true,
              _id: false
            }).toArray());

          case 2:
            docs = _context13.sent;
            expect(docs).to.have.length(5);
            expect(docs).to.deep.include({
              name: 'Charmander'
            });
            expect(docs).to.deep.include({
              name: 'Lapras'
            });
            expect(docs).to.deep.include({
              name: 'Squirtle'
            });
            expect(docs).to.deep.include({
              name: 'Starmie'
            });
            expect(docs).to.deep.include({
              name: 'bulbasaur'
            });

          case 9:
          case "end":
            return _context13.stop();
        }
      }
    });
  });
  it('should return null for next if the cursor was closed', function _callee14() {
    var cursor, document;
    return regeneratorRuntime.async(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1));

          case 2:
            cursor = _context14.sent;
            _context14.next = 5;
            return regeneratorRuntime.awrap(cursor.close());

          case 5:
            _context14.next = 7;
            return regeneratorRuntime.awrap(cursor.next());

          case 7:
            document = _context14.sent;
            expect(document).to.not.exist;

          case 9:
          case "end":
            return _context14.stop();
        }
      }
    });
  });
  it('should return null for next if the cursor was destroyed (alias of close)', function _callee15() {
    var cursor, document;
    return regeneratorRuntime.async(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1));

          case 2:
            cursor = _context15.sent;
            _context15.next = 5;
            return regeneratorRuntime.awrap(cursor.destroy());

          case 5:
            _context15.next = 7;
            return regeneratorRuntime.awrap(cursor.next());

          case 7:
            document = _context15.sent;
            expect(document).to.not.exist;

          case 9:
          case "end":
            return _context15.stop();
        }
      }
    });
  });
  it('should allow multiple operations on one cursor', function _callee16() {
    var cursor, arr, count;
    return regeneratorRuntime.async(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor({}).sort({
              name: 1
            }).limit(1));

          case 2:
            cursor = _context16.sent;
            _context16.next = 5;
            return regeneratorRuntime.awrap(cursor.toArray());

          case 5:
            arr = _context16.sent;
            expect(arr).to.exist;
            _context16.next = 9;
            return regeneratorRuntime.awrap(cursor.count());

          case 9:
            count = _context16.sent;
            expect(count).to.equal(1);
            _context16.next = 13;
            return regeneratorRuntime.awrap(cursor.close());

          case 13:
          case "end":
            return _context16.stop();
        }
      }
    });
  });
  it('should stream a cursor', function _callee17() {
    var cursor, runs, loop;
    return regeneratorRuntime.async(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            cursor = db.a.findAsCursor();
            runs = 0;

            loop = function loop() {
              var doc;

              while ((doc = cursor.read()) !== null) {
                expect(doc.name).to.be.oneOf(['Squirtle', 'Starmie', 'Charmander', 'Lapras', 'bulbasaur']);
                expect(doc).to.be.a('object');
                runs++;
              }

              cursor.once('readable', loop);
            };

            loop();
            return _context17.abrupt("return", new Promise(function (resolve) {
              cursor.on('end', function () {
                expect(runs).to.equal(5);
                resolve();
              });
            }));

          case 5:
          case "end":
            return _context17.stop();
        }
      }
    });
  });
  it('should pipe documents', function _callee18() {
    var out;
    return regeneratorRuntime.async(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            out = new ToArrayStream();
            return _context18.abrupt("return", new Promise(function (resolve) {
              db.a.findAsCursor().pipe(out).on('finish', function () {
                expect(out._data).to.have.length(5);
                resolve();
              });
            }));

          case 2:
          case "end":
            return _context18.stop();
        }
      }
    });
  });
  it('should pass multiple arguments to operations', function _callee19() {
    var cursor, arr, count;
    return regeneratorRuntime.async(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return regeneratorRuntime.awrap(db.a.findAsCursor().limit(1).addCursorFlag('noCursorTimeout', true));

          case 2:
            cursor = _context19.sent;
            _context19.next = 5;
            return regeneratorRuntime.awrap(cursor.toArray());

          case 5:
            arr = _context19.sent;
            expect(arr).to.exist;
            _context19.next = 9;
            return regeneratorRuntime.awrap(cursor.count());

          case 9:
            count = _context19.sent;
            expect(count).to.equal(1);
            expect(cursor.cursor.cmd.limit).to.equal(1);
            expect(cursor.cursor.cmd.noCursorTimeout).to.equal(true);

          case 13:
          case "end":
            return _context19.stop();
        }
      }
    });
  });
  it('should emit a close event when closed', function _callee20() {
    var cursor;
    return regeneratorRuntime.async(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            cursor = db.a.findAsCursor();
            return _context20.abrupt("return", new Promise(function (resolve) {
              cursor.once('close', resolve);
              cursor.close();
            }));

          case 2:
          case "end":
            return _context20.stop();
        }
      }
    });
  });
  it('should support the async iterator protocol', function _callee21() {
    var cursor, _cursor$Symbol$asyncI, next, result;

    return regeneratorRuntime.async(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            cursor = db.a.findAsCursor({
              name: 'Squirtle'
            });
            _cursor$Symbol$asyncI = cursor[Symbol.asyncIterator](), next = _cursor$Symbol$asyncI.next;
            _context21.next = 4;
            return regeneratorRuntime.awrap(next());

          case 4:
            result = _context21.sent;
            expect(result).to.be.an('object').that.has.all.keys('value', 'done').and.has.own.property('done', false);
            expect(result.value).to.be.an('object').that.has.own.property('type', 'water');
            _context21.t0 = expect;
            _context21.next = 10;
            return regeneratorRuntime.awrap(next());

          case 10:
            _context21.t1 = _context21.sent;
            _context21.t2 = {
              done: true,
              value: undefined
            };
            (0, _context21.t0)(_context21.t1).to.deep.equal(_context21.t2);

          case 13:
          case "end":
            return _context21.stop();
        }
      }
    });
  });
  it('should work in a for-await loop', function _callee22() {
    var cursor, docs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, doc;

    return regeneratorRuntime.async(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            cursor = db.a.findAsCursor();
            docs = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context22.prev = 4;
            _iterator = _asyncIterator(cursor);

          case 6:
            _context22.next = 8;
            return regeneratorRuntime.awrap(_iterator.next());

          case 8:
            _step = _context22.sent;
            _iteratorNormalCompletion = _step.done;
            _context22.next = 12;
            return regeneratorRuntime.awrap(_step.value);

          case 12:
            _value = _context22.sent;

            if (_iteratorNormalCompletion) {
              _context22.next = 19;
              break;
            }

            doc = _value;
            docs.push(doc);

          case 16:
            _iteratorNormalCompletion = true;
            _context22.next = 6;
            break;

          case 19:
            _context22.next = 25;
            break;

          case 21:
            _context22.prev = 21;
            _context22.t0 = _context22["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context22.t0;

          case 25:
            _context22.prev = 25;
            _context22.prev = 26;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context22.next = 30;
              break;
            }

            _context22.next = 30;
            return regeneratorRuntime.awrap(_iterator["return"]());

          case 30:
            _context22.prev = 30;

            if (!_didIteratorError) {
              _context22.next = 33;
              break;
            }

            throw _iteratorError;

          case 33:
            return _context22.finish(30);

          case 34:
            return _context22.finish(25);

          case 35:
            expect(docs).to.have.length(5);
            expect(docs.map(function (doc) {
              return doc.name;
            })).to.have.members(['Squirtle', 'Starmie', 'Charmander', 'Lapras', 'bulbasaur']);

          case 37:
          case "end":
            return _context22.stop();
        }
      }
    }, null, null, [[4, 21, 25, 35], [26,, 30, 34]]);
  });
});

var ToArrayStream =
/*#__PURE__*/
function (_Writable) {
  _inherits(ToArrayStream, _Writable);

  function ToArrayStream() {
    var _this;

    _classCallCheck(this, ToArrayStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToArrayStream).call(this, {
      objectMode: true,
      highWaterMark: 0
    }));
    _this._data = [];
    return _this;
  }

  _createClass(ToArrayStream, [{
    key: "_write",
    value: function _write(chunk, encoding, cb) {
      this._data.push(chunk);

      cb();
    }
  }]);

  return ToArrayStream;
}(Writable);