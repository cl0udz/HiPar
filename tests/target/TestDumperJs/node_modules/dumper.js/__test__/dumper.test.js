"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.number.is-integer");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.replace");

var _this = void 0;

var Dumper = require('../src/dumper');

describe('Dump class tests', function () {
  generateDump = function generateDump(item) {
    var dumper = new Dumper();
    return dumper.generateDump(item).replace(/\u001b\[.*?m/g, '');
  };

  it('can dump strings', function () {
    var stringsToTest = ['list of strings', '', ' '];
    stringsToTest.forEach(function (toTest) {
      var actualDump = generateDump(toTest);
      var expectedDump = "string \"".concat(toTest, "\" (length=").concat(toTest.length, ")");
      expect(actualDump).toStrictEqual(expectedDump);
    });
  });
  it('can dump boolean values', function () {
    expect(generateDump(true)).toStrictEqual('boolean true');
    expect(generateDump(false)).toStrictEqual('boolean false');
  });
  it('can dump numeric values', function () {
    var numbers = [23, 2, 0, 11.1, -1, -12.2, -9.22, -0.9];
    numbers.forEach(function (number) {
      var type = Number.isInteger(number) ? 'int' : 'float';
      expect(generateDump(number)).toStrictEqual("".concat(type, " ").concat(number));
    });
  });
  it('can dump regex values', function () {
    expect(generateDump(/[0-9]+/)).toStrictEqual('/[0-9]+/');
  });
  it('can dump function values inside object', function () {
    var users = [{
      user: 'barney',
      age: 36,
      active: true,
      getAge: function getAge() {
        return _this.age;
      }
    }, {
      user: 'fred',
      age: 40,
      active: false,
      getAge: function getAge() {
        return _this.age;
      }
    }, {
      user: 'pebbles',
      age: 1,
      active: true,
      getAge: function getAge() {
        return _this.age;
      }
    }];
    var expectedOutput = "array (size=3) [\n    [0] => object (size=4) {\n        'user' => string \"barney\" (length=6),\n        'age' => int 36,\n        'active' => boolean true,\n        'getAge' => () => this.age,\n    },\n    [1] => object (size=4) {\n        'user' => string \"fred\" (length=4),\n        'age' => int 40,\n        'active' => boolean false,\n        'getAge' => () => this.age,\n    },\n    [2] => object (size=4) {\n        'user' => string \"pebbles\" (length=7),\n        'age' => int 1,\n        'active' => boolean true,\n        'getAge' => () => this.age,\n    },\n]";
    expect(generateDump(users)).toStrictEqual(expectedOutput);
  });
  it('can dump null values', function () {
    expect(generateDump(null)).toStrictEqual('null');
  });
  it('can dump undefined values', function () {
    expect(generateDump(undefined)).toStrictEqual('undefined');
  });
  it('can dump array values', function () {
    var weekdays = ['sunday', 'monday', 1, true, 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', null, false];
    var expectedOutput = "array (size=11) [\n    [0] => string \"sunday\" (length=6),\n    [1] => string \"monday\" (length=6),\n    [2] => int 1,\n    [3] => boolean true,\n    [4] => string \"tuesday\" (length=7),\n    [5] => string \"wednesday\" (length=9),\n    [6] => string \"thursday\" (length=8),\n    [7] => string \"friday\" (length=6),\n    [8] => string \"saturday\" (length=8),\n    [9] => null,\n    [10] => boolean false,\n]";
    expect(generateDump(weekdays)).toStrictEqual(expectedOutput);
  });
  it('can dump object values', function () {
    var carDetails = {
      color: 'red',
      wheels: 4,
      engine: {
        cylinders: 4,
        size: 2.2
      }
    };
    var expectedOutput = "object (size=3) {\n    'color' => string \"red\" (length=3),\n    'wheels' => int 4,\n    'engine' => object (size=2) {\n        'cylinders' => int 4,\n        'size' => float 2.2,\n    },\n}";
    expect(generateDump(carDetails)).toStrictEqual(expectedOutput);
  });
  it('can dump cycled object', function () {
    var mainNode = {};
    var rightNode = {
      left: mainNode,
      right: null
    };
    mainNode.left = mainNode;
    mainNode.right = rightNode;
    var expectedOutput = "object (size=2) {\n    'left' => object (size=1) {\n        '$ref' => string \"$\" (length=1),\n    },\n    'right' => object (size=2) {\n        'left' => object (size=1) {\n            '$ref' => string \"$\" (length=1),\n        },\n        'right' => null,\n    },\n}";
    expect(generateDump(mainNode)).toStrictEqual(expectedOutput);
  });
  it('can dump object without hasOwnProperty', function () {
    var weirdObject = {
      hasOwnProperty: null
    };
    var expectedOutput = "object (size=1) {\n    'hasOwnProperty' => null,\n}";
    expect(generateDump(weirdObject)).toStrictEqual(expectedOutput);
  });
});