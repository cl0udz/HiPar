#!/usr/bin/env node
// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
//
"use strict";

var Aerospike = require('aerospike');

var shared = require('./shared');

shared.runner();

function sindexCreate(client, argv) {
  var options, type;
  return regeneratorRuntime.async(function sindexCreate$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = {
            ns: argv.namespace,
            set: argv.set,
            bin: argv.bin,
            index: argv.index
          };
          type = argv.type.toUpperCase();
          _context.t0 = type;
          _context.next = _context.t0 === 'NUMERIC' ? 5 : _context.t0 === 'STRING' ? 7 : _context.t0 === 'GEO2DSPHERE' ? 10 : 13;
          break;

        case 5:
          options.datatype = Aerospike.indexDataType.NUMERIC;
          return _context.abrupt("break", 14);

        case 7:
          type = 'STRING';
          options.datatype = Aerospike.indexDataType.STRING;
          return _context.abrupt("break", 14);

        case 10:
          type = 'GEO2DSPHERE';
          options.datatype = Aerospike.indexDataType.GEO2DSPHERE;
          return _context.abrupt("break", 14);

        case 13:
          throw new Error("Unsupported index type: ".concat(argv.type));

        case 14:
          _context.next = 16;
          return regeneratorRuntime.awrap(client.createIndex(options));

        case 16:
          console.info("Creating ".concat(type, " index \"").concat(options.index, "\" on bin \"").concat(options.bin, "\""));

        case 17:
        case "end":
          return _context.stop();
      }
    }
  });
}

function sindexRemove(client, argv) {
  return regeneratorRuntime.async(function sindexRemove$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(client.indexRemove(argv.namespace, argv.index));

        case 2:
          console.info("Removing index \"".concat(argv.index, "\""));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  });
}

exports.command = 'sindex <command>';
exports.describe = 'Manage secondary indexes';

exports.builder = function (yargs) {
  return yargs.command({
    command: 'create <bin> <index> <type>',
    desc: 'Create a secondary index',
    handler: shared.run(sindexCreate),
    builder: {
      type: {
        choices: ['numeric', 'string', 'geo2dsphere'],
        hidden: true
      }
    }
  }).command({
    command: 'remove <index>',
    desc: 'Remove a secondary index',
    handler: shared.run(sindexRemove)
  });
};