#!/usr/bin/env node
// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
//
"use strict";

var Aerospike = require('aerospike');

var shared = require('./shared');

shared.runner();

function batchRead(client, argv) {
  var batch, batchResults, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, result, record;

  return regeneratorRuntime.async(function batchRead$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          batch = argv.keys.map(function (key) {
            var request = {
              key: new Aerospike.Key(argv.namespace, argv.set, key)
            };

            if (argv.bins) {
              request.bins = argv.bins;
            } else {
              request.read_all_bins = true;
            }

            return request;
          });
          _context.next = 3;
          return regeneratorRuntime.awrap(client.batchRead(batch));

        case 3:
          batchResults = _context.sent;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 7;

          for (_iterator = batchResults[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            result = _step.value;
            record = result.record;
            console.info(record.key.key, ':', result.status === Aerospike.status.OK ? record.bins : 'NOT FOUND');
          }

          _context.next = 15;
          break;

        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](7);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 15:
          _context.prev = 15;
          _context.prev = 16;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 18:
          _context.prev = 18;

          if (!_didIteratorError) {
            _context.next = 21;
            break;
          }

          throw _iteratorError;

        case 21:
          return _context.finish(18);

        case 22:
          return _context.finish(15);

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[7, 11, 15, 23], [16,, 18, 22]]);
}

exports.command = 'batch <keys..>';
exports.describe = 'Fetch multiple records from the database in a batch';
exports.handler = shared.run(batchRead);
exports.builder = {
  bins: {
    describe: 'List of bins to fetch for each record',
    type: 'array',
    group: 'Command:'
  }
};