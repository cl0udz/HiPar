#!/usr/bin/env node
// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
//
"use strict";

var shared = require('./shared');

var path = require('path');

shared.runner();

function udfRegister(client, argv) {
  var module, job;
  return regeneratorRuntime.async(function udfRegister$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          module = argv.module;
          _context.next = 3;
          return regeneratorRuntime.awrap(client.udfRegister(module));

        case 3:
          job = _context.sent;
          _context.next = 6;
          return regeneratorRuntime.awrap(job.waitUntilDone());

        case 6:
          console.info('UDF module registered successfully');

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
}

function udfRemove(client, argv) {
  var module, job;
  return regeneratorRuntime.async(function udfRemove$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          module = path.basename(argv.module);
          _context2.next = 3;
          return regeneratorRuntime.awrap(client.udfRemove(module));

        case 3:
          job = _context2.sent;
          _context2.next = 6;
          return regeneratorRuntime.awrap(job.waitUntilDone());

        case 6:
          console.info('UDF module removed successfully');

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  });
}

exports.command = 'udf <command>';
exports.describe = 'Manage User-Defined Functions (UDF)';

exports.builder = function (yargs) {
  return yargs.command({
    command: 'register <module>',
    desc: 'Register a new UDF module with the cluster',
    handler: shared.run(udfRegister)
  }).command({
    command: 'remove <module>',
    desc: 'Remove a UDF module from the cluster',
    handler: shared.run(udfRemove)
  });
};