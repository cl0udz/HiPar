// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';
/* global expect, describe, it, before, after */

var Aerospike = require('../lib/aerospike');

var helper = require('./test_helper');

var AerospikeError = Aerospike.AerospikeError;
var keygen = helper.keygen;
describe('client.apply()', function () {
  var client = helper.client;
  var key = keygen.string(helper.namespace, helper.set, {
    prefix: 'test/apply/'
  })();
  before(function () {
    return helper.udf.register('udf.lua').then(function () {
      return client.put(key, {
        foo: 'bar'
      }, {
        ttl: 1000
      });
    });
  });
  after(function () {
    return helper.udf.remove('udf.lua').then(function () {
      return client.remove(key);
    });
  });
  it('should invoke an UDF to without any args', function (done) {
    var udfArgs = {
      module: 'udf',
      funcname: 'withoutArguments'
    };
    client.apply(key, udfArgs, function (error, result) {
      if (error) throw error;
      expect(result).to.equal(1);
      done();
    });
  });
  it('should invoke an UDF with arguments', function (done) {
    var udfArgs = {
      module: 'udf',
      funcname: 'withArguments',
      args: [42]
    };
    client.apply(key, udfArgs, function (error, result) {
      if (error) throw error;
      expect(result).to.equal(42);
      done();
    });
  });
  it('should invoke an UDF with apply policy', function (done) {
    var policy = new Aerospike.ApplyPolicy({
      totalTimeout: 1500
    });
    var udf = {
      module: 'udf',
      funcname: 'withArguments',
      args: [[1, 2, 3]]
    };
    client.apply(key, udf, policy, function (error, result) {
      if (error) throw error;
      expect(result).to.eql([1, 2, 3]);
      done();
    });
  });
  it('should return an error if the user-defined function does not exist', function (done) {
    var udfArgs = {
      module: 'udf',
      funcname: 'not-such-function'
    };
    client.apply(key, udfArgs, function (error, result) {
      expect(error).to.be["instanceof"](AerospikeError)["with"].property('code', Aerospike.status.ERR_UDF);
      done();
    });
  });
  it('should return an error if the UDF arguments are invalid', function (done) {
    var udfArgs = {
      module: 'udf',
      funcname: 'noop',
      args: 42
    }; // args should always be an array

    client.apply(key, udfArgs, function (error, result) {
      expect(error).to.be["instanceof"](AerospikeError)["with"].property('code', Aerospike.status.ERR_PARAM);
      done();
    });
  });
  it('should return a Promise that resolves to the return value of the UDF function', function () {
    var udfArgs = {
      module: 'udf',
      funcname: 'withoutArguments'
    };
    return client.apply(key, udfArgs).then(function (result) {
      return expect(result).to.equal(1);
    });
  });
});