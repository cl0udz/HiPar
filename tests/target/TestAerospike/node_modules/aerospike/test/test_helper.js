// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ****************************************************************************
'use strict';

var Aerospike = require('../lib/aerospike');

var Info = require('../lib/info');

var options = require('./util/options');

var semver = require('semver');

var path = require('path');

var runInNewProcessFn = require('./util/run_in_new_process');

var chai = require('chai');

var dirtyChai = require('dirty-chai');

var expect = chai.expect;
chai.use(dirtyChai);
global.expect = expect;
exports.options = options;
exports.namespace = options.namespace;
exports.set = options.set;
exports.keygen = require('./generators/key');
exports.metagen = require('./generators/metadata');
exports.recgen = require('./generators/record');
exports.valgen = require('./generators/value');
exports.putgen = require('./generators/put');
var config = options.getConfig();
exports.config = config;
Aerospike.setDefaultLogging(config.log);
var client = Aerospike.client(config);
exports.client = client;

function UDFHelper(client) {
  this.client = client;
}

UDFHelper.prototype.register = function (filename) {
  var script = path.join(__dirname, filename);
  return this.client.udfRegister(script).then(function (job) {
    return job.wait(50);
  });
};

UDFHelper.prototype.remove = function (filename) {
  return this.client.udfRemove(filename).then(function (job) {
    return job.wait(50);
  })["catch"](function (error) {
    if (error.code !== Aerospike.status.ERR_UDF) {
      return Promise.reject(error);
    }
  });
};

function IndexHelper(client) {
  this.client = client;
}

IndexHelper.prototype.create = function (indexName, setName, binName, dataType, indexType) {
  var index = {
    ns: options.namespace,
    set: setName,
    bin: binName,
    index: indexName,
    type: indexType || Aerospike.indexType.DEFAULT,
    datatype: dataType
  };
  return this.client.createIndex(index).then(function (job) {
    return job.wait(10);
  })["catch"](function (error) {
    if (error.code === Aerospike.status.ERR_INDEX_FOUND) {// ignore - index already exists
    } else {
      return Promise.reject(error);
    }
  });
};

IndexHelper.prototype.remove = function (indexName) {
  return this.client.indexRemove(options.namespace, indexName)["catch"](function (error) {
    if (error.code === Aerospike.status.ERR_INDEX_NOT_FOUND) {// ignore - index does not exist
    } else {
      return Promise.reject(error);
    }
  });
};

function ServerInfoHelper() {
  this.features = new Set();
  this.edition = 'community';
  this.build = '';
  this.nsconfig = {};
  this.cluster = [];
}

ServerInfoHelper.prototype.hasFeature = function (feature) {
  return this.features.has(feature);
};

ServerInfoHelper.prototype.isEnterprise = function () {
  return this.edition.match('Enterprise');
};

ServerInfoHelper.prototype.isVersionInRange = function (versionRange) {
  var version = process.env.AEROSPIKE_VERSION_OVERRIDE || this.build;
  version = semver.coerce(version); // truncate a build number like "4.3.0.2-28-gdd9f506" to just "4.3.0"

  return semver.satisfies(version, versionRange);
};

ServerInfoHelper.prototype.fetchInfo = function () {
  var _this = this;

  return client.infoAll('build\nedition\nfeatures').then(function (results) {
    results.forEach(function (response) {
      var info = Info.parse(response.info);
      _this.edition = info.edition;
      _this.build = info.build;
      var features = info.features;

      if (Array.isArray(features)) {
        features.forEach(function (feature) {
          return _this.features.add(feature);
        });
      }
    });
  });
};

ServerInfoHelper.prototype.fetchNamespaceConfig = function (ns) {
  var _this2 = this;

  var nsKey = 'namespace/' + ns;
  return client.infoAny(nsKey).then(function (results) {
    var info = Info.parse(results);
    _this2.nsconfig = info[nsKey];
  });
};

ServerInfoHelper.prototype.randomNode = function () {
  var nodes = client.getNodes();
  var i = Math.floor(Math.random() * nodes.length);
  return nodes[i];
};

var udfHelper = new UDFHelper(client);
var indexHelper = new IndexHelper(client);
var serverInfoHelper = new ServerInfoHelper(client);
exports.udf = udfHelper;
exports.index = indexHelper;
exports.cluster = serverInfoHelper;

exports.runInNewProcess = function (fn, data) {
  if (data === undefined) {
    data = null;
  }

  var env = {
    NODE_PATH: path.join(process.cwd(), 'node_modules')
  };
  return runInNewProcessFn(fn, env, data);
};

function skipConditional(ctx, condition, message) {
  ctx.beforeEach(function () {
    if (condition()) {
      this.skip(message);
    }
  });
}

exports.skipUnlessSupportsFeature = function (feature, ctx) {
  var _this3 = this;

  skipConditional(ctx, function () {
    return !_this3.cluster.hasFeature(feature);
  }, "requires server feature \"".concat(feature, "\""));
};

exports.skipUnlessEnterprise = function (ctx) {
  var _this4 = this;

  skipConditional(ctx, function () {
    return !_this4.cluster.isEnterprise();
  }, 'requires enterprise edition');
};

exports.skipUnlessVersion = function (versionRange, ctx) {
  var _this5 = this;

  skipConditional(ctx, function () {
    return !_this5.cluster.isVersionInRange(versionRange);
  }, "cluster version does not meet requirements: \"".concat(versionRange, "\""));
};

if (process.env.GLOBAL_CLIENT !== 'false') {
  /* global before */
  before(function () {
    return client.connect().then(function () {
      return serverInfoHelper.fetchInfo();
    }).then(function () {
      return serverInfoHelper.fetchNamespaceConfig(options.namespace);
    })["catch"](function (error) {
      console.error('ERROR:', error);
      console.error('CONFIG:', client.config);
      throw error;
    });
  });
}
/* global after */


after(function (done) {
  client.close();
  done();
});