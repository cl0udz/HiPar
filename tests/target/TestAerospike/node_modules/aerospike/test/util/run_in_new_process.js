// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';

var childProcess = require('child_process');

var tmp = require('tmp');

var fs = require('fs');

function generateTestSource(fn, data) {
  return "'use strict'\n  const Aerospike = require(process.cwd())\n  let fn = ".concat(fn.toString(), "\n  let data = JSON.parse(`").concat(JSON.stringify(data), "`)\n  let finish = (msg) => process.send(msg, () => process.exit())\n  try {\n    fn(Aerospike, data, result => finish({ result: result }))\n  } catch (error) {\n    finish({ error: error })\n  }");
}

function createTempFile(fn, data) {
  var source = generateTestSource(fn, data);
  var temp = tmp.fileSync({
    postfix: '.js'
  });
  fs.writeSync(temp.fd, source);
  return temp.name;
}

function forkAndRun(fn, env, data) {
  var temp = createTempFile(fn, data);
  return childProcess.fork(temp, {
    env: env
  });
}

module.exports = function runInNewProcess(fn, env, data) {
  return new Promise(function (resolve, reject) {
    var child = forkAndRun(fn, env, data);
    child.on('message', function (message) {
      child.disconnect();

      if (message.error) {
        reject(new Error(message.error));
      } else {
        resolve(message.result);
      }
    });
    child.on('error', function (error) {
      return console.error('Error for PID %s: %s', child.pid, error.message);
    });
  });
};