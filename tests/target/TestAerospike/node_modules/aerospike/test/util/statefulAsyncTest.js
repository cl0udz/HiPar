// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';
/* global expect */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Aerospike = require('../../lib/aerospike');

var AerospikeError = Aerospike.AerospikeError;

var helper = require('../test_helper');

var State =
/*#__PURE__*/
function () {
  function State() {
    _classCallCheck(this, State);
  }

  _createClass(State, [{
    key: "set",
    value: function set(name, promise) {
      var _this = this;

      if (this._expectError) {
        return promise["catch"](function (error) {
          _this.error = error;
          return _this;
        });
      } else {
        return promise.then(function (value) {
          _this[name] = value;
          return _this;
        });
      }
    }
  }, {
    key: "setExpectError",
    value: function setExpectError() {
      this._expectError = true;
      return this;
    }
  }]);

  return State;
}();

exports.initState = function () {
  return Promise.resolve(new State());
};

exports.expectError = function () {
  return function (state) {
    return state.setExpectError();
  };
};

exports.createRecord = function (bins) {
  return function (state) {
    var key = helper.keygen.string(helper.namespace, helper.set)();
    var meta = {
      ttl: 600
    };
    var policy = new Aerospike.WritePolicy({
      exists: Aerospike.policy.exists.CREATE_OR_REPLACE
    });
    return state.set('key', helper.client.put(key, bins, meta, policy));
  };
};

exports.operate = function (ops) {
  return function (state) {
    return state.set('result', helper.client.operate(state.key, Array.isArray(ops) ? ops : [ops]));
  };
};

exports.assertResultEql = function (expected) {
  return function (state) {
    expect(state.result.bins).to.eql(expected, 'result of operation does not match expectation');
    return state;
  };
};

exports.assertResultSatisfy = function (matcher) {
  return function (state) {
    expect(state.result.bins).to.satisfy(matcher, 'result of operation does not satisfy expectation');
    return state;
  };
};

exports.assertRecordEql = function (expected) {
  return function (state) {
    return helper.client.get(state.key).then(function (record) {
      return expect(record.bins).to.eql(expected, 'after operation, record bins do not match expectations');
    }).then(function () {
      return state;
    });
  };
};

exports.assertError = function (code) {
  return function (state) {
    expect(state.error, "expected operation to raise exception with error code ".concat(code)).to.be["instanceof"](AerospikeError)["with"].property('code', code);
    return state;
  };
};

exports.cleanup = function () {
  return function (state) {
    return helper.client.remove(state.key);
  };
};