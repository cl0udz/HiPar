// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';
/* eslint-env mocha */

/* global expect */

var Aerospike = require('../lib/aerospike');

var helper = require('./test_helper');

var keygen = helper.keygen;
var metagen = helper.metagen;
var recgen = helper.recgen;
var putgen = helper.putgen;
var valgen = helper.valgen;
var Key = Aerospike.Key;
describe('client.batchRead()', function () {
  var client = helper.client;
  before(function () {
    var nrecords = 10;
    var kgen = keygen.string(helper.namespace, helper.set, {
      prefix: 'test/batch_read/',
      random: false
    });
    var mgen = metagen.constant({
      ttl: 1000
    });
    var rgen = recgen.record({
      i: valgen.integer(),
      s: valgen.string(),
      l: function l() {
        return [1, 2, 3];
      },
      m: function m() {
        return {
          a: 1,
          b: 2,
          c: 3
        };
      }
    });
    return putgen.put(nrecords, kgen, rgen, mgen);
  });
  it('returns the status whether each key was found or not', function (done) {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/3')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/5')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/no_such_key')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/not_either')
    }];
    client.batchRead(batchRecords, function (err, results) {
      expect(err).not.to.be.ok();
      expect(results.length).to.equal(5);
      var found = results.filter(function (result) {
        return result.status === Aerospike.status.OK;
      });
      expect(found.length).to.equal(3);
      var notFound = results.filter(function (result) {
        return result.status === Aerospike.status.ERR_RECORD_NOT_FOUND;
      });
      expect(notFound.length).to.equal(2);
      done();
    });
  });
  it('returns only meta data if no bins are selected', function (done) {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/3')
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/5')
    }];
    client.batchRead(batchRecords, function (err, results) {
      expect(err).not.to.be.ok();
      expect(results.length).to.equal(3);
      results.forEach(function (result) {
        expect(result.status).to.equal(Aerospike.status.OK);
        expect(result.record.bins).to.be.empty();
      });
      done();
    });
  });
  it('returns just the selected bins', function (done) {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1'),
      bins: ['i']
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/3'),
      bins: ['i']
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/5'),
      bins: ['i']
    }];
    client.batchRead(batchRecords, function (err, results) {
      expect(err).not.to.be.ok();
      expect(results.length).to.equal(3);
      results.forEach(function (result) {
        expect(result.status).to.equal(Aerospike.status.OK);
        expect(result.record.bins).to.have.all.keys('i');
        expect(result.record.gen).to.be.ok();
        expect(result.record.ttl).to.be.ok();
      });
      done();
    });
  });
  it('returns the entire record', function (done) {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1'),
      read_all_bins: true
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/3'),
      read_all_bins: true
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/5'),
      read_all_bins: true
    }];
    client.batchRead(batchRecords, function (err, results) {
      expect(err).not.to.be.ok();
      expect(results.length).to.equal(3);
      results.forEach(function (result) {
        expect(result.status).to.equal(Aerospike.status.OK);
        expect(result.record.bins).to.have.keys('i', 's', 'l', 'm');
        expect(result.record.gen).to.be.ok();
        expect(result.record.ttl).to.be.ok();
      });
      done();
    });
  });
  it('returns selected bins for each key', function (done) {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1'),
      read_all_bins: true
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/3'),
      read_all_bins: false,
      bins: ['i']
    }, {
      key: new Key(helper.namespace, helper.set, 'test/batch_read/5'),
      read_all_bins: false
    }];
    client.batchRead(batchRecords, function (err, results) {
      expect(err).not.to.be.ok();
      expect(results.length).to.equal(3);
      results.forEach(function (result) {
        var record = result.record;

        switch (record.key.key) {
          case 'test/batch_read/1':
            expect(record.bins).to.have.all.keys('i', 's', 'l', 'm');
            break;

          case 'test/batch_read/3':
            expect(record.bins).to.have.all.keys('i');
            break;

          case 'test/batch_read/5':
            expect(record.bins).to.be.empty();
            break;

          default:
            throw new Error('unpexected record key');
        }
      });
      done();
    });
  });
  context('with BatchPolicy', function () {
    context('with deserialize: false', function () {
      var policy = new Aerospike.BatchPolicy({
        deserialize: false
      });
      it('returns list and map bins as byte buffers', function () {
        var batch = [{
          key: new Key(helper.namespace, helper.set, 'test/batch_read/1'),
          read_all_bins: true
        }];
        return client.batchRead(batch, policy).then(function (results) {
          var bins = results[0].record.bins;
          expect(bins.i).to.be.a('number');
          expect(bins.s).to.be.a('string');
          expect(bins.l).to.be["instanceof"](Buffer);
          expect(bins.m).to.be["instanceof"](Buffer);
        });
      });
    });
  });
  it('returns a Promise that resolves to the batch results', function () {
    var batchRecords = [{
      key: new Key(helper.namespace, helper.set, 'test/batch_read/1'),
      read_all_bins: true
    }];
    return client.batchRead(batchRecords).then(function (results) {
      expect(results.length).to.equal(1);
      return results.pop();
    }).then(function (result) {
      expect(result.status).to.equal(Aerospike.status.OK);
      expect(result.record).to.be["instanceof"](Aerospike.Record);
    });
  });
});