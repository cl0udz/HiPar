// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var status = require('./status');
/**
 * Error raised by the client when execution of a database command fails. This
 * may be either due to an error status code returned by the server, or caused
 * by an error condition that occured on the client side.
 *
 * @extends Error
 *
 * @example <caption>Expected output: "Error: 127.0.0.1:3000 Record does not exist in database. May be returned by read, or write with policy Aerospike.policy.exists.UPDATE [2]"</caption>
 *
 * const Aerospike = require('aerospike')
 * let key = new Aerospike.Key('test', 'key', 'does_not_exist')
 * Aerospike.connect()
 *   .then(client => {
 *     client.get(key)
 *       .then(record => console.info(record))
 *       .catch(error => console.error(`Error: ${error.message} [${error.code}]`))
 *       .then(() => client.close())
 *   })
 */


var AerospikeError =
/*#__PURE__*/
function (_Error) {
  _inherits(AerospikeError, _Error);

  /** @private */
  function AerospikeError(message, command) {
    var _this;

    _classCallCheck(this, AerospikeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AerospikeError).call(this, message));
    _this.name = _this.constructor.name;
    /**
     * Numeric status code returned by the server or the client.
     *
     * @type {number}
     * @readonly
     *
     * @see {@link module:aerospike.status} contains the full list of possible status codes.
     */

    _this.code = status.ERR_CLIENT;
    /**
     * Command during which the error occurred.
     *
     * @type {?Command}
     * @readonly
     */

    _this.command = command || null;
    /**
     * C/C++ function name in which the error occurred.
     *
     * @type {?string}
     * @readonly
     */

    _this.func = null;
    /**
     * File name of the C/C++ source file in which the error occurred.
     *
     * @type {?string}
     * @readonly
     */

    _this.file = null;
    /**
     * Line number in the C/C++ source file in which the error occurred.
     *
     * @type {?number}
     * @readonly
     */

    _this.line = null;
    /**
     * It is possible that a write transaction completed even though the client
     * returned this error. This may be the case when a client error occurs
     * (like timeout) after the command was sent to the server.
     *
     * @type {boolean}
     * @readonly
     */

    _this.inDoubt = false;

    if (command && command.stack) {
      _this.setStackTrace(command.stack);
    }

    return _this;
  }
  /** @private */


  _createClass(AerospikeError, [{
    key: "setStackTrace",

    /** @private */
    value: function setStackTrace(stack) {
      var firstLine = "".concat(this.name, ": ").concat(this.message);
      stack = stack.replace(/^.*$/m, firstLine);
      Object.defineProperty(this, 'stack', {
        value: stack
      });
    }
    /**
     * Indicates whether the error originated on the database server.
     *
     * @returns {boolean} - <code>true</code> if the server raised the error, <code>false</code> otherwise.
     */

  }, {
    key: "isServerError",
    value: function isServerError() {
      return this.code > status.OK;
    }
    /**
     * The {@link Client} instance associated with this error, if any.
     *
     * @type {?Client}
     * @readonly
     * @since v3.7.0
     *
     * @example <caption>Closing the client connection, when an error occurs:</caption>
     *
     * const Aerospike = require('aerospike')
     *
     * Aerospike.connect().then(async client => {
     *   await client.put(new Aerospike.Key('demo', 'test', 'foo'), { 'foo': 'bar' })
     *   client.close()
     * }).catch(error => {
     *   console.error('Error: %s [%i]', error.message, error.code)
     *   if (error.client) error.client.close()
     * })
     */

  }, {
    key: "client",
    get: function get() {
      if (this.command) return this.command.client;
    }
  }], [{
    key: "fromASError",
    value: function fromASError(asError, command) {
      if (!asError) {
        return null;
      } else if (asError.code === status.OK) {
        return null;
      } else if (asError instanceof AerospikeError) {
        return asError;
      } else {
        var message = this.formatMessage(asError.message, asError.code);
        var error = new AerospikeError(message, command);
        this.copyASErrorProperties(error, asError);
        return error;
      }
    }
    /** @private */

  }, {
    key: "copyASErrorProperties",
    value: function copyASErrorProperties(target, source) {
      target.code = source.code;
      target.inDoubt = source.inDoubt;
      target.func = source.func;
      target.file = source.file;
      target.line = Number.parseInt(source.line);
    }
    /** @private */

  }, {
    key: "formatMessage",
    value: function formatMessage(message, code) {
      if (message) {
        message = message.replace(/AEROSPIKE_[A-Z_]+/, function () {
          return status.getMessage(code);
        });
      }

      return message;
    }
  }]);

  return AerospikeError;
}(_wrapNativeSuper(Error));

module.exports = AerospikeError;