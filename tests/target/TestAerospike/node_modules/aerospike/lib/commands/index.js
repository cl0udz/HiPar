// *****************************************************************************
// Copyright 2013-2019 Aerospike, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *****************************************************************************
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BatchCommand = require('./batch_command');

var Command = require('./command');

var ConnectCommandBase = require('./connect_command');

var ExistsCommandBase = require('./exists_command');

var ReadRecordCommand = require('./read_record_command');

var StreamCommand = require('./stream_command');

var WriteRecordCommand = require('./write_record_command');

module.exports = {
  Apply:
  /*#__PURE__*/
  function (_Command) {
    _inherits(ApplyCommand, _Command);

    function ApplyCommand() {
      _classCallCheck(this, ApplyCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(ApplyCommand).apply(this, arguments));
    }

    return ApplyCommand;
  }(Command('applyAsync')),
  BatchExists:
  /*#__PURE__*/
  function (_BatchCommand) {
    _inherits(BatchExistsCommand, _BatchCommand);

    function BatchExistsCommand() {
      _classCallCheck(this, BatchExistsCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(BatchExistsCommand).apply(this, arguments));
    }

    return BatchExistsCommand;
  }(BatchCommand('batchExists')),
  BatchGet:
  /*#__PURE__*/
  function (_BatchCommand2) {
    _inherits(BatchGetCommand, _BatchCommand2);

    function BatchGetCommand() {
      _classCallCheck(this, BatchGetCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(BatchGetCommand).apply(this, arguments));
    }

    return BatchGetCommand;
  }(BatchCommand('batchGet')),
  BatchRead:
  /*#__PURE__*/
  function (_BatchCommand3) {
    _inherits(BatchReadCommand, _BatchCommand3);

    function BatchReadCommand() {
      _classCallCheck(this, BatchReadCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(BatchReadCommand).apply(this, arguments));
    }

    return BatchReadCommand;
  }(BatchCommand('batchRead')),
  BatchSelect:
  /*#__PURE__*/
  function (_BatchCommand4) {
    _inherits(BatchSelectCommand, _BatchCommand4);

    function BatchSelectCommand() {
      _classCallCheck(this, BatchSelectCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(BatchSelectCommand).apply(this, arguments));
    }

    return BatchSelectCommand;
  }(BatchCommand('batchSelect')),
  Connect:
  /*#__PURE__*/
  function (_ConnectCommandBase) {
    _inherits(ConnectCommand, _ConnectCommandBase);

    function ConnectCommand() {
      _classCallCheck(this, ConnectCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(ConnectCommand).apply(this, arguments));
    }

    return ConnectCommand;
  }(ConnectCommandBase('connect')),
  Exists:
  /*#__PURE__*/
  function (_ExistsCommandBase) {
    _inherits(ExistsCommand, _ExistsCommandBase);

    function ExistsCommand() {
      _classCallCheck(this, ExistsCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(ExistsCommand).apply(this, arguments));
    }

    return ExistsCommand;
  }(ExistsCommandBase('existsAsync')),
  Get:
  /*#__PURE__*/
  function (_ReadRecordCommand) {
    _inherits(GetCommand, _ReadRecordCommand);

    function GetCommand() {
      _classCallCheck(this, GetCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(GetCommand).apply(this, arguments));
    }

    return GetCommand;
  }(ReadRecordCommand('getAsync')),
  IndexCreate:
  /*#__PURE__*/
  function (_Command2) {
    _inherits(IndexCreateCommand, _Command2);

    function IndexCreateCommand() {
      _classCallCheck(this, IndexCreateCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(IndexCreateCommand).apply(this, arguments));
    }

    return IndexCreateCommand;
  }(Command('indexCreate')),
  IndexRemove:
  /*#__PURE__*/
  function (_Command3) {
    _inherits(IndexRemoveCommand, _Command3);

    function IndexRemoveCommand() {
      _classCallCheck(this, IndexRemoveCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(IndexRemoveCommand).apply(this, arguments));
    }

    return IndexRemoveCommand;
  }(Command('indexRemove')),
  InfoAny:
  /*#__PURE__*/
  function (_Command4) {
    _inherits(InfoAnyCommand, _Command4);

    function InfoAnyCommand() {
      _classCallCheck(this, InfoAnyCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(InfoAnyCommand).apply(this, arguments));
    }

    return InfoAnyCommand;
  }(Command('infoAny')),
  InfoForeach:
  /*#__PURE__*/
  function (_Command5) {
    _inherits(InfoForeachCommand, _Command5);

    function InfoForeachCommand() {
      _classCallCheck(this, InfoForeachCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(InfoForeachCommand).apply(this, arguments));
    }

    return InfoForeachCommand;
  }(Command('infoForeach')),
  InfoHost:
  /*#__PURE__*/
  function (_Command6) {
    _inherits(InfoHostCommand, _Command6);

    function InfoHostCommand() {
      _classCallCheck(this, InfoHostCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(InfoHostCommand).apply(this, arguments));
    }

    return InfoHostCommand;
  }(Command('infoHost')),
  InfoNode:
  /*#__PURE__*/
  function (_Command7) {
    _inherits(InfoNodeCommand, _Command7);

    function InfoNodeCommand() {
      _classCallCheck(this, InfoNodeCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(InfoNodeCommand).apply(this, arguments));
    }

    return InfoNodeCommand;
  }(Command('infoNode')),
  JobInfo:
  /*#__PURE__*/
  function (_Command8) {
    _inherits(JobInfoCommand, _Command8);

    function JobInfoCommand() {
      _classCallCheck(this, JobInfoCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(JobInfoCommand).apply(this, arguments));
    }

    return JobInfoCommand;
  }(Command('jobInfo')),
  Operate:
  /*#__PURE__*/
  function (_ReadRecordCommand2) {
    _inherits(OperateCommand, _ReadRecordCommand2);

    function OperateCommand() {
      _classCallCheck(this, OperateCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(OperateCommand).apply(this, arguments));
    }

    return OperateCommand;
  }(ReadRecordCommand('operateAsync')),
  Put:
  /*#__PURE__*/
  function (_WriteRecordCommand) {
    _inherits(PutCommand, _WriteRecordCommand);

    function PutCommand() {
      _classCallCheck(this, PutCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(PutCommand).apply(this, arguments));
    }

    return PutCommand;
  }(WriteRecordCommand('putAsync')),
  Query:
  /*#__PURE__*/
  function (_StreamCommand) {
    _inherits(QueryCommand, _StreamCommand);

    function QueryCommand() {
      _classCallCheck(this, QueryCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(QueryCommand).apply(this, arguments));
    }

    return QueryCommand;
  }(StreamCommand('queryAsync')),
  QueryApply:
  /*#__PURE__*/
  function (_Command9) {
    _inherits(QueryApplyCommand, _Command9);

    function QueryApplyCommand() {
      _classCallCheck(this, QueryApplyCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(QueryApplyCommand).apply(this, arguments));
    }

    return QueryApplyCommand;
  }(Command('queryApply')),
  QueryBackground:
  /*#__PURE__*/
  function (_Command10) {
    _inherits(QueryBackgroundCommand, _Command10);

    function QueryBackgroundCommand() {
      _classCallCheck(this, QueryBackgroundCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(QueryBackgroundCommand).apply(this, arguments));
    }

    return QueryBackgroundCommand;
  }(Command('queryBackground')),
  QueryForeach:
  /*#__PURE__*/
  function (_StreamCommand2) {
    _inherits(QueryForeachCommand, _StreamCommand2);

    function QueryForeachCommand() {
      _classCallCheck(this, QueryForeachCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(QueryForeachCommand).apply(this, arguments));
    }

    return QueryForeachCommand;
  }(StreamCommand('queryForeach')),
  Remove:
  /*#__PURE__*/
  function (_WriteRecordCommand2) {
    _inherits(RemoveCommand, _WriteRecordCommand2);

    function RemoveCommand() {
      _classCallCheck(this, RemoveCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(RemoveCommand).apply(this, arguments));
    }

    return RemoveCommand;
  }(WriteRecordCommand('removeAsync')),
  Scan:
  /*#__PURE__*/
  function (_StreamCommand3) {
    _inherits(ScanCommand, _StreamCommand3);

    function ScanCommand() {
      _classCallCheck(this, ScanCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(ScanCommand).apply(this, arguments));
    }

    return ScanCommand;
  }(StreamCommand('scanAsync')),
  ScanBackground:
  /*#__PURE__*/
  function (_Command11) {
    _inherits(ScanBackgroundCommand, _Command11);

    function ScanBackgroundCommand() {
      _classCallCheck(this, ScanBackgroundCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(ScanBackgroundCommand).apply(this, arguments));
    }

    return ScanBackgroundCommand;
  }(Command('scanBackground')),
  Select:
  /*#__PURE__*/
  function (_ReadRecordCommand3) {
    _inherits(SelectCommand, _ReadRecordCommand3);

    function SelectCommand() {
      _classCallCheck(this, SelectCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(SelectCommand).apply(this, arguments));
    }

    return SelectCommand;
  }(ReadRecordCommand('selectAsync')),
  Truncate:
  /*#__PURE__*/
  function (_Command12) {
    _inherits(TruncateCommand, _Command12);

    function TruncateCommand() {
      _classCallCheck(this, TruncateCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(TruncateCommand).apply(this, arguments));
    }

    return TruncateCommand;
  }(Command('truncate')),
  UdfRegister:
  /*#__PURE__*/
  function (_Command13) {
    _inherits(UdfRegisterCommand, _Command13);

    function UdfRegisterCommand() {
      _classCallCheck(this, UdfRegisterCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(UdfRegisterCommand).apply(this, arguments));
    }

    return UdfRegisterCommand;
  }(Command('udfRegister')),
  UdfRemove:
  /*#__PURE__*/
  function (_Command14) {
    _inherits(UdfRemoveCommand, _Command14);

    function UdfRemoveCommand() {
      _classCallCheck(this, UdfRemoveCommand);

      return _possibleConstructorReturn(this, _getPrototypeOf(UdfRemoveCommand).apply(this, arguments));
    }

    return UdfRemoveCommand;
  }(Command('udfRemove'))
};