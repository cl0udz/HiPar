'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var path = require('path');

var os = require('os');

var fs = require('graceful-fs');

var makeDir = require('make-dir');

var xdgBasedir = require('xdg-basedir');

var writeFileAtomic = require('write-file-atomic');

var dotProp = require('dot-prop');

var uniqueString = require('unique-string');

var configDir = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());
var permissionError = 'You don\'t have access to this file.';
var makeDirOptions = {
  mode: 448
};
var writeFileOptions = {
  mode: 384
};

var Configstore =
/*#__PURE__*/
function () {
  function Configstore(id, defaults, opts) {
    _classCallCheck(this, Configstore);

    opts = opts || {};
    var pathPrefix = opts.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', "".concat(id, ".json"));
    this.path = path.join(configDir, pathPrefix);
    this.all = Object.assign({}, defaults, this.all);
  }

  _createClass(Configstore, [{
    key: "get",
    value: function get(key) {
      return dotProp.get(this.all, key);
    }
  }, {
    key: "set",
    value: function set(key, val) {
      var config = this.all;

      if (arguments.length === 1) {
        for (var _i = 0, _Object$keys = Object.keys(key); _i < _Object$keys.length; _i++) {
          var k = _Object$keys[_i];
          dotProp.set(config, k, key[k]);
        }
      } else {
        dotProp.set(config, key, val);
      }

      this.all = config;
    }
  }, {
    key: "has",
    value: function has(key) {
      return dotProp.has(this.all, key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var config = this.all;
      dotProp["delete"](config, key);
      this.all = config;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.all = {};
    }
  }, {
    key: "all",
    get: function get() {
      try {
        return JSON.parse(fs.readFileSync(this.path, 'utf8'));
      } catch (err) {
        // Create dir if it doesn't exist
        if (err.code === 'ENOENT') {
          makeDir.sync(path.dirname(this.path), makeDirOptions);
          return {};
        } // Improve the message of permission errors


        if (err.code === 'EACCES') {
          err.message = "".concat(err.message, "\n").concat(permissionError, "\n");
        } // Empty the file if it encounters invalid JSON


        if (err.name === 'SyntaxError') {
          writeFileAtomic.sync(this.path, '', writeFileOptions);
          return {};
        }

        throw err;
      }
    },
    set: function set(val) {
      try {
        // Make sure the folder exists as it could have been deleted in the meantime
        makeDir.sync(path.dirname(this.path), makeDirOptions);
        writeFileAtomic.sync(this.path, JSON.stringify(val, null, '\t'), writeFileOptions);
      } catch (err) {
        // Improve the message of permission errors
        if (err.code === 'EACCES') {
          err.message = "".concat(err.message, "\n").concat(permissionError, "\n");
        }

        throw err;
      }
    }
  }, {
    key: "size",
    get: function get() {
      return Object.keys(this.all || {}).length;
    }
  }]);

  return Configstore;
}();

module.exports = Configstore;