'use strict';

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.join");

var fs = require('fs');

var path = require('path');

var request = require('supertest');

var server = require('./server');

var app = server.setup();
var clearUploadsDir = server.clearUploadsDir;
var fileDir = server.fileDir;
var uploadDir = server.uploadDir;
var mockFiles = ['car.png', 'tree.png', 'basketball.png'];
var mockUser = {
  firstName: 'Joe',
  lastName: 'Schmo',
  email: 'joe@mailinator.com'
};
describe('Test Directory Cleaning Method', function () {
  it('emptied "uploads" directory', function (done) {
    clearUploadsDir();
    var filesFound = fs.readdirSync(uploadDir).length;
    done(filesFound ? "Directory not empty. Found ".concat(filesFound, " files.") : null);
  });
});
describe('Test Single File Upload', function () {
  var _loop = function _loop(i) {
    var fileName = mockFiles[i];
    it("upload ".concat(fileName, " with POST"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).post('/upload/single').attach('testFile', filePath).expect(200).end(function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
    it("upload ".concat(fileName, " with PUT"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).post('/upload/single').attach('testFile', filePath).expect(200).end(function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
  };

  for (var i = 0; i < mockFiles.length; i++) {
    _loop(i);
  }

  it('fail when no files were attached', function (done) {
    request(app).post('/upload/single').expect(400).end(done);
  });
  it('fail when using GET', function (done) {
    var filePath = path.join(fileDir, mockFiles[0]);
    request(app).get('/upload/single').attach('testFile', filePath).expect(400).end(done);
  });
  it('fail when using HEAD', function (done) {
    var filePath = path.join(fileDir, mockFiles[0]);
    request(app).head('/upload/single').attach('testFile', filePath).expect(400).end(done);
  });
});
describe('Test Single File Upload w/ .mv() Promise', function () {
  var _loop2 = function _loop2(i) {
    var fileName = mockFiles[i];
    it("upload ".concat(fileName, " with POST w/ .mv() Promise"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).post('/upload/single/promise').attach('testFile', filePath).expect(200).end(function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
    it("upload ".concat(fileName, " with PUT w/ .mv() Promise"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).post('/upload/single/promise').attach('testFile', filePath).expect(200).end(function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
  };

  for (var i = 0; i < mockFiles.length; i++) {
    _loop2(i);
  }

  it('fail when no files were attached', function (done) {
    request(app).post('/upload/single').expect(400).end(done);
  });
  it('fail when using GET', function (done) {
    var filePath = path.join(fileDir, mockFiles[0]);
    request(app).get('/upload/single').attach('testFile', filePath).expect(400).end(done);
  });
  it('fail when using HEAD', function (done) {
    var filePath = path.join(fileDir, mockFiles[0]);
    request(app).head('/upload/single').attach('testFile', filePath).expect(400).end(done);
  });
});
describe('Test Multi-File Upload', function () {
  it('upload multiple files with POST', function (done) {
    var upload1 = path.join(fileDir, mockFiles[0]);
    var upload2 = path.join(fileDir, mockFiles[1]);
    var upload3 = path.join(fileDir, mockFiles[2]);
    clearUploadsDir();
    request(app).post('/upload/multiple').attach('testFile1', upload1).attach('testFile2', upload2).attach('testFile3', upload3).expect(200).end(function (err, res) {
      if (err) {
        return done(err);
      }

      fs.stat(upload1, function (err) {
        if (err) {
          return done(err);
        }

        fs.stat(upload2, function (err) {
          if (err) {
            return done(err);
          }

          fs.stat(upload3, done);
        });
      });
    });
  });
});
describe('Test File Array Upload', function () {
  it('upload array of files with POST', function (done) {
    var req = request(app).post('/upload/array');
    clearUploadsDir();

    for (var i = 0; i < mockFiles.length; i++) {
      req.attach('testFiles', path.join(fileDir, mockFiles[i]));
    }

    req.expect(200).end(function (err, res) {
      if (err) {
        return done(err);
      }

      for (var _i = 0; _i < mockFiles.length; _i++) {
        fs.statSync(path.join(uploadDir, mockFiles[_i]));
      }

      done();
    });
  });
});
describe('Test Upload With Fields', function () {
  var _loop3 = function _loop3(i) {
    var fileName = mockFiles[i];
    it("upload ".concat(fileName, " and submit fields at the same time with POST"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).post('/upload/single/withfields').attach('testFile', filePath).field('firstName', mockUser.firstName).field('lastName', mockUser.lastName).field('email', mockUser.email).expect(200, {
        firstName: mockUser.firstName,
        lastName: mockUser.lastName,
        email: mockUser.email
      }, function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
    it("upload ".concat(fileName, " and submit fields at the same time with PUT"), function (done) {
      var filePath = path.join(fileDir, fileName);
      var uploadedFilePath = path.join(uploadDir, fileName);
      clearUploadsDir();
      request(app).put('/upload/single/withfields').attach('testFile', filePath).field('firstName', mockUser.firstName).field('lastName', mockUser.lastName).field('email', mockUser.email).expect(200, {
        firstName: mockUser.firstName,
        lastName: mockUser.lastName,
        email: mockUser.email
      }, function (err, res) {
        if (err) {
          return done(err);
        }

        fs.stat(uploadedFilePath, done);
      });
    });
  };

  for (var i = 0; i < mockFiles.length; i++) {
    _loop3(i);
  }
});