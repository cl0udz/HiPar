'use strict';

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.join");

require("core-js/modules/es.function.name");

require("core-js/modules/es.string.trim");

var path = require('path');

var fileDir = path.join(__dirname, 'files');
var uploadDir = path.join(__dirname, 'uploads');

var fs = require('fs-extra');

var clearUploadsDir = function clearUploadsDir() {
  if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
  } else {
    fs.emptyDirSync(uploadDir);
  }
};

var setup = function setup(fileUploadOptions) {
  var express = require('express');

  var expressFileupload = require('../lib/index');

  var app = express();
  fileUploadOptions = fileUploadOptions || {};
  app.use(expressFileupload(fileUploadOptions));
  app.all('/upload/single', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    var testFile = req.files.testFile;
    var uploadPath = path.join(uploadDir, testFile.name);
    testFile.mv(uploadPath, function (err) {
      if (err) {
        return res.status(500).send(err);
      }

      res.send('File uploaded to ' + uploadPath);
    });
  });
  app.all('/upload/single/promise', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    var testFile = req.files.testFile;
    var uploadPath = path.join(uploadDir, testFile.name);
    testFile.mv(uploadPath).then(function () {
      res.send('File uploaded to ' + uploadPath);
    })["catch"](function (err) {
      res.status(500).send(err);
    });
  });
  app.all('/upload/single/withfields', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    if (!req.body) {
      return res.status(400).send('No request body found');
    }

    if (!req.body.firstName || !req.body.firstName.trim()) {
      return res.status(400).send('Invalid first name');
    }

    if (!req.body.lastName || !req.body.lastName.trim()) {
      return res.status(400).send('Invalid last name');
    }

    if (!req.body.email || !req.body.email.trim()) {
      return res.status(400).send('Invalid email');
    }

    var testFile = req.files.testFile;
    var uploadPath = path.join(uploadDir, testFile.name);
    testFile.mv(uploadPath, function (err) {
      if (err) {
        return res.status(500).send(err);
      }

      res.json({
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        email: req.body.email
      });
    });
  });
  app.all('/upload/single/truncated', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    if (req.files.testFile.truncated) {
      // status 400 to differentiate from ending the request in the on limit
      return res.status(400).send("File too big");
    }

    return res.status(200).send('Upload succeed');
  });
  app.all('/upload/multiple', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    var testFile1 = req.files.testFile1;
    var testFile2 = req.files.testFile2;
    var testFile3 = req.files.testFile3;
    var uploadPath1 = path.join(uploadDir, testFile1.name);
    var uploadPath2 = path.join(uploadDir, testFile2.name);
    var uploadPath3 = path.join(uploadDir, testFile3.name);

    if (!testFile1) {
      return res.status(400).send('testFile1 was not uploaded');
    }

    if (!testFile2) {
      return res.status(400).send('testFile2 was not uploaded');
    }

    if (!testFile3) {
      return res.status(400).send('testFile3 was not uploaded');
    }

    testFile1.mv(uploadPath1, function (err) {
      if (err) {
        return res.status(500).send(err);
      }

      testFile2.mv(uploadPath2, function (err) {
        if (err) {
          return res.status(500).send(err);
        }

        testFile3.mv(uploadPath3, function (err) {
          if (err) {
            return res.status(500).send(err);
          }

          res.send('Files uploaded to ' + uploadDir);
        });
      });
    });
  });
  app.all('/upload/array', function (req, res) {
    if (!req.files) {
      return res.status(400).send('No files were uploaded.');
    }

    var testFiles = req.files.testFiles;

    if (!testFiles) {
      return res.status(400).send('No files were uploaded');
    }

    if (!Array.isArray(testFiles)) {
      return res.status(400).send('Files were not uploaded as an array');
    }

    if (!testFiles.length) {
      return res.status(400).send('Files array is empty');
    }

    var filesUploaded = 0;

    var _loop = function _loop(i) {
      var uploadPath = path.join(uploadDir, testFiles[i].name);
      testFiles[i].mv(uploadPath, function (err) {
        if (err) {
          return res.status(500).send(err);
        }

        if (++filesUploaded === testFiles.length) {
          res.send('File uploaded to ' + uploadPath);
        }
      });
    };

    for (var i = 0; i < testFiles.length; i++) {
      _loop(i);
    }
  });
  app.all('/fields/user', function (req, res) {
    if (!req.body) {
      return res.status(400).send('No request body found');
    }

    if (!req.body.firstName || !req.body.firstName.trim()) {
      return res.status(400).send('Invalid first name');
    }

    if (!req.body.lastName || !req.body.lastName.trim()) {
      return res.status(400).send('Invalid last name');
    }

    if (!req.body.email || !req.body.email.trim()) {
      return res.status(400).send('Invalid email');
    }

    res.json({
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      email: req.body.email
    });
  });
  app.all('/fields/array', function (req, res) {
    if (!req.body) {
      return res.status(400).send('No request body found');
    }

    if (!req.body.testField) {
      return res.status(400).send('Invalid field');
    }

    if (!Array.isArray(req.body.testField)) {
      return res.status(400).send('Field is not an array');
    }

    res.json(req.body.testField);
  });
  return app;
};

module.exports = {
  setup: setup,
  fileDir: fileDir,
  uploadDir: uploadDir,
  clearUploadsDir: clearUploadsDir
};