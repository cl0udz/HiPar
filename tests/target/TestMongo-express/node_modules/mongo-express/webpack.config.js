'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.join");

var webpack = require('webpack');

var path = require('path');

var AssetsPlugin = require('assets-webpack-plugin');

var CleanWebpackPlugin = require('clean-webpack-plugin');

var CopyWebpackPlugin = require('copy-webpack-plugin');

var env = process.env.NODE_ENV || 'development';
var isDev = env === 'development';
var isProd = !isDev;
var fileSuffix = isDev ? '' : '-[chunkhash].min';

function resolveModulePath(name) {
  var packageJson = '/package.json';
  return path.dirname(require.resolve("".concat(name).concat(packageJson)));
}

var codemirrorPath = resolveModulePath('codemirror');
var bootstrapPath = resolveModulePath('bootstrap');
module.exports = {
  entry: {
    index: './lib/scripts/index.js',
    database: './lib/scripts/database.js',
    collection: './lib/scripts/collection.js',
    document: './lib/scripts/document.js',
    gridfs: './lib/scripts/gridfs.js',
    vendor: './lib/scripts/vendor.js',
    codemirror: './lib/scripts/codeMirrorLoader.js'
  },
  output: {
    filename: "[name]".concat(fileSuffix, ".js"),
    path: path.join(__dirname, 'build'),
    publicPath: 'public/'
  },
  module: {
    loaders: [{
      test: /.js$/,
      loader: 'babel-loader',
      exclude: /(node_modules)/,
      query: {
        presets: ['es2015']
      }
    }]
  },
  plugins: [new CleanWebpackPlugin(['build']), new webpack.DefinePlugin({
    'process.env.NODE_ENV': JSON.stringify(env),
    __DEV__: isDev
  }), new webpack.optimize.CommonsChunkPlugin({
    names: ['codemirror', 'vendor'],
    filename: "[name]".concat(fileSuffix, ".js")
  }), isProd && new webpack.optimize.UglifyJsPlugin(), isProd && new webpack.optimize.OccurrenceOrderPlugin(true), new CopyWebpackPlugin([{
    from: 'public/images/*',
    to: 'img/[name].[ext]'
  }, {
    from: 'public/stylesheets/*',
    to: 'css/[name].[ext]'
  }, {
    from: path.join(codemirrorPath, '/lib/codemirror.css'),
    to: 'css/[name].[ext]'
  }, {
    from: path.join(codemirrorPath, '/theme/*'),
    to: 'css/theme/[name].[ext]'
  }, {
    from: path.join(bootstrapPath, '/dist/fonts/*'),
    to: 'fonts/[name].[ext]'
  }, {
    from: path.join(bootstrapPath, '/dist/css/bootstrap.min.css'),
    to: 'css/[name].[ext]'
  }, {
    from: path.join(bootstrapPath, '/dist/css/bootstrap.min.css.map'),
    to: 'css/[name].[ext]'
  }, {
    from: path.join(bootstrapPath, '/dist/css/bootstrap-theme.min.css'),
    to: 'css/[name].[ext]'
  }, {
    from: path.join(bootstrapPath, '/dist/css/bootstrap-theme.min.css.map'),
    to: 'css/[name].[ext]'
  }]), new AssetsPlugin({
    filename: 'build-assets.json'
  })].filter(function (n) {
    return !!n;
  })
};