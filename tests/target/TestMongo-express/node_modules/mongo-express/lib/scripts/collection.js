"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.search");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.search");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

var _jquery = _interopRequireDefault(require("jquery"));

var _renderjson = _interopRequireDefault(require("renderjson"));

var _codeMirrorLoader = _interopRequireDefault(require("./codeMirrorLoader"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var $document = (0, _jquery["default"])(document);

function getParameterByName(name) {
  name = name.replace(/\[/, '\\[').replace(/[\]]/, '\\]');
  var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
  var results = regex.exec(location.search);
  return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

$document.ready(function () {
  (0, _jquery["default"])('#tabs').tab();

  if (document.location.href.indexOf('query=') >= 0 && getParameterByName('query') !== '') {
    (0, _jquery["default"])('#tabs a[href="#advanced"]').tab('show');
  }
});

var addDoc = _codeMirrorLoader["default"].fromTextArea(document.getElementById('document'), {
  mode: {
    name: 'javascript',
    json: true
  },
  indentUnit: 4,
  electricChars: true,
  matchBrackets: true,
  lineNumbers: true,
  theme: ME_SETTINGS.codeMirrorEditorTheme
});

var addIndexDoc = _codeMirrorLoader["default"].fromTextArea(document.getElementById('index'), {
  mode: {
    name: 'javascript',
    json: true
  },
  indentUnit: 4,
  electricChars: true,
  matchBrackets: true,
  lineNumbers: true,
  theme: ME_SETTINGS.codeMirrorEditorTheme
});

window.checkValidJSON = function () {
  _jquery["default"].ajax({
    type: 'POST',
    url: "".concat(ME_SETTINGS.baseHref, "checkValid"),
    data: {
      document: addDoc.getValue()
    }
  }).done(function (data) {
    if (data === 'Valid') {
      (0, _jquery["default"])('#documentInvalidJSON').remove();
      (0, _jquery["default"])('#addDocumentForm').submit();
    } else if ((0, _jquery["default"])('#documentInvalidJSON').length === 0) {
      (0, _jquery["default"])('#document-modal-body').parent().append('<div id="documentInvalidJSON" class="alert alert-danger"><strong>Invalid JSON</strong></div>');
    }
  });

  return false;
};

window.checkValidIndexJSON = function () {
  _jquery["default"].ajax({
    type: 'POST',
    url: "".concat(ME_SETTINGS.baseHref, "checkValid"),
    data: {
      document: addIndexDoc.getValue()
    }
  }).done(function (data) {
    if (data === 'Valid') {
      (0, _jquery["default"])('#indexInvalidJSON').remove();
      (0, _jquery["default"])('#addIndexForm').submit();
    } else if ((0, _jquery["default"])('#indexInvalidJSON').length === 0) {
      (0, _jquery["default"])('#index-modal-body').parent().append('<div id="indexInvalidJSON" class="alert alert-danger"><strong>Invalid JSON</strong></div>');
    }
  });

  return false;
};

(0, _jquery["default"])('#addDocument').on('shown.bs.modal', function () {
  addDoc.refresh();
  addDoc.focus();
});
(0, _jquery["default"])('#addIndex').on('shown.bs.modal', function () {
  addIndexDoc.refresh();
  addIndexDoc.focus();
});

if (ME_SETTINGS.collapsibleJSON) {
  (0, _jquery["default"])(function () {
    // convert all objects to renderjson elements
    (0, _jquery["default"])('div.tableContent pre').each(function () {
      var $this = (0, _jquery["default"])(this);

      var text = _jquery["default"].trim($this.text());

      if (text) {
        $this.html((0, _renderjson["default"])(JSON.parse(text)));
      }
    });
  });

  _renderjson["default"].set_show_to_level(ME_SETTINGS.collapsibleJSONDefaultUnfold);
}

function makeCollectionUrl() {
  var st = ME_SETTINGS;
  return "".concat(st.baseHref, "db/").concat(encodeURIComponent(st.dbName), "/").concat(encodeURIComponent(st.collectionName), "/");
}

window.loadDocument = function (url) {
  var selection = window.getSelection().toString();

  if (selection === '') {
    location.href = url;
  }
};

$document.ready(function () {
  var $tableWrapper = (0, _jquery["default"])('.tableWrapper');

  if ((0, _jquery["default"])('.tableHeaderFooterBars').width() === $tableWrapper.width()) {
    // table wrapper is the same width as the table itself, so not overflowing, so remove the white gradient
    (0, _jquery["default"])('.fadeToWhite').remove();
  } else {
    (0, _jquery["default"])('.fadeToWhite').height((0, _jquery["default"])('.tableWrapper').height()); // limit the height only to the table div
  }

  (0, _jquery["default"])('.deleteButtonCollection').tooltip({
    title: 'Are you sure you want to delete this collection? All documents will be deleted.'
  });
  $tableWrapper.scroll(function () {
    var proximityToRightOfTable = (0, _jquery["default"])('.tableWrapper table').width() - $tableWrapper.scrollLeft() - $tableWrapper.width();
    document.getElementById('fadeToWhiteID').style.opacity = Math.min(Math.max(proximityToRightOfTable - 50, 50) - 50, 100) / 100;
  });
  (0, _jquery["default"])('.tooDamnBig').bind('click', function (e) {
    e.preventDefault();
    e.stopPropagation();
    var target = (0, _jquery["default"])(this);

    var _id = target.attr('doc_id');

    var prop = target.attr('doc_prop');
    var spinner = "<img src=\"".concat(ME_SETTINGS.baseHref, "public/img/gears.gif\" />");
    var leftScroll = $tableWrapper.scrollLeft(); // Set the element with spinner for now

    target.html(spinner);

    _jquery["default"].get("".concat(makeCollectionUrl()).concat(encodeURIComponent(_id), "/").concat(prop), function (input) {
      // Images inline
      if (typeof input === 'string' && (input.substr(0, 22) === 'data:image/png;base64,' || input.substr(0, 22) === 'data:image/gif;base64,' || input.substr(0, 22) === 'data:image/jpg;base64,' || input.substr(0, 23) === 'data:image/jpeg;base64,')) {
        input = '<img src="' + input + '" style="max-height:100%; max-width:100%; "/>';
      } // Audio inline


      if (typeof input === 'string' && (input.substr(0, 22) === 'data:audio/ogg;base64,' || input.substr(0, 22) === 'data:audio/wav;base64,' || input.substr(0, 22) === 'data:audio/mp3;base64,')) {
        input = '<audio controls style="width:45px;" src="' + input + '">Your browser does not support the audio element.</audio>';
      } // Video inline


      if (typeof input === 'string' && (input.substr(0, 23) === 'data:video/webm;base64,' || input.substr(0, 22) === 'data:video/mp4;base64,' || input.substr(0, 22) === 'data:video/ogv;base64,')) {
        input = '<video controls><source type="' + input.substring(input.indexOf(':') + 1, input.indexOf(';')) + '" src="' + input + '"/>' + 'Your browser does not support the video element.</video>';
      }

      if (_typeof(input) === 'object' && (input.toString() === '[object Object]' || input.toString().substr(0, 7) === '[object')) {
        input = (0, _renderjson["default"])(input);
      } // Set the element with gotten datas


      target.parent().html(input); // Set original scroll position

      (0, _jquery["default"])('.tableWrapper').scrollLeft(leftScroll);
    });
  });
  (0, _jquery["default"])('.deleteButtonDocument').on('click', function (e) {
    var $form = (0, _jquery["default"])(this).closest('form');
    e.stopPropagation();
    e.preventDefault();
    (0, _jquery["default"])('#confirm-deletion-document').modal({
      backdrop: 'static',
      keyboard: false
    }).one('click', '#delete', function () {
      $form.trigger('submit'); // submit the form
    });
  });
  (0, _jquery["default"])('#deleteListConfirmButton').on('click', function () {
    // we just need to POST the form, as all the query parameters are already embedded in the form action
    (0, _jquery["default"])('#deleteListForm').trigger('submit');
  });
  (0, _jquery["default"])('.deleteButtonCollection').on('click', function (event) {
    (0, _jquery["default"])('.deleteButtonCollection').tooltip('hide');
    event.preventDefault();
    var $target = (0, _jquery["default"])(this);
    var $parentForm = $target.parent();
    (0, _jquery["default"])('#confirmation-input').attr('shouldbe', $target.attr('collection-name'));
    (0, _jquery["default"])('#modal-collection-name').text($target.attr('collection-name'));
    (0, _jquery["default"])('#confirm-deletion-collection').modal({
      backdrop: 'static',
      keyboard: false
    }).one('shown.bs.modal', function () {
      (0, _jquery["default"])('#confirmation-input').focus();
    }).one('click', '#delete', function () {
      var $input = (0, _jquery["default"])('#confirmation-input');

      if ($input.val().toLowerCase() === $input.attr('shouldbe').toLowerCase()) {
        $parentForm.trigger('submit');
      }
    });
  });
  var nextSort = {
    1: -1,
    '-1': 0,
    0: 1,
    undefined: 1
  };
  (0, _jquery["default"])('.sorting-button').on('click', function () {
    var $this = (0, _jquery["default"])(this);
    var column = $this.data('column');
    var direction = nextSort[$this.data('direction')];
    (0, _jquery["default"])('input.sort-' + column).val(direction).prop('checked', direction !== 0);
    var $form = (0, _jquery["default"])((0, _jquery["default"])('#tabs li.active a').attr('href') + ' form');
    $form.find('button[type="submit"]').click();
  });
  var $importInputsFile = (0, _jquery["default"])('.import-input-file');
  var $importFileLinks = (0, _jquery["default"])('.import-file-link'); // Trigger onClick event on hidden input file

  _jquery["default"].each($importFileLinks, function (key, link) {
    (0, _jquery["default"])(link).on('click', function () {
      (0, _jquery["default"])($importInputsFile[key]).trigger('click');
    });
  }); // When file is add in input, send it to the server


  $importInputsFile.on('change', function (event) {
    var files = event.target.files;
    var collection = (0, _jquery["default"])(event.target).attr('collection-name');
    var data = new FormData();

    _jquery["default"].each(files, function (key, value) {
      data.append("file_".concat(key), value);
    });

    _jquery["default"].ajax({
      type: 'POST',
      url: "".concat(ME_SETTINGS.baseHref, "db/").concat(ME_SETTINGS.dbName, "/import/").concat(collection),
      data: data,
      cache: false,
      dataType: 'json',
      processData: false,
      // Don't process the files
      contentType: false // Set content type to false as jQuery will tell the server its a query string request

    });
  });
});