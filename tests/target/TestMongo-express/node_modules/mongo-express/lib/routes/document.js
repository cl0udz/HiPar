'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

var bson = require('../bson');

var filters = require('../filters');

var buildCollectionURL = require('../utils').buildCollectionURL;

var routes = function routes(config) {
  var exp = {};

  exp.getProperty = function (req, res) {
    // Get a single property
    // URI like database/collection/document/prop
    res.send(req.prop);
  };

  exp.viewDocument = function (req, res) {
    var ctx = {
      title: (config.options.readOnly ? 'Viewing' : 'Editing') + ' Document: ' + filters.stringDocIDs(req.document._id),
      editorTheme: config.options.editorTheme,
      docLength: bson.toString(req.document).split(/\r\n|\r|\n/).length,
      docString: bson.toString(req.document)
    };
    res.render('document', ctx);
  };

  exp.checkValid = function (req, res) {
    var doc = req.body.document;

    try {
      bson.toBSON(doc);
    } catch (err) {
      console.error(err);
      return res.send('Invalid');
    }

    res.send('Valid');
  };

  exp.addDocument = function (req, res) {
    var doc = req.body.document;

    if (doc === undefined || doc.length === 0) {
      req.session.error = 'You forgot to enter a document!';
      return res.redirect('back');
    }

    var docBSON;

    try {
      docBSON = bson.toBSON(doc);
    } catch (err) {
      req.session.error = 'That document is not valid!';
      console.error(err);
      return res.redirect('back');
    }

    req.collection.insert(docBSON, {
      safe: true
    }, function (err) {
      if (err) {
        req.session.error = 'Something went wrong: ' + err;
        console.error(err);
        return res.redirect('back');
      }

      req.session.success = 'Document added!';
      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));
    });
  };

  exp.updateDocument = function (req, res) {
    var doc = req.body.document;

    if (doc === undefined || doc.length === 0) {
      req.session.error = 'You forgot to enter a document!';
      return res.redirect('back');
    }

    var docBSON;

    try {
      docBSON = bson.toBSON(doc);
    } catch (err) {
      req.session.error = 'That document is not valid!';
      console.error(err);
      return res.redirect('back');
    }

    docBSON._id = req.document._id;
    req.collection.update(req.document, docBSON, {
      safe: true
    }, function (err) {
      if (err) {
        //document was not saved
        req.session.error = 'Something went wrong: ' + err;
        console.error(err);
        return res.redirect('back');
      }

      req.session.success = 'Document updated!';
      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));
    });
  };

  exp.deleteDocument = function (req, res) {
    var skip = req.query.skip || '';
    var key = req.query.key || '';
    var value = req.query.value || '';
    var type = req.query.type || '';
    var jsonQuery = req.query.query || '';
    var jsonProjection = req.query.projection || '';
    req.collection.remove(req.document, {
      safe: true
    }, function (err) {
      if (err) {
        req.session.error = 'Something went wrong! ' + err;
        console.error(err);
        return res.redirect('back');
      }

      req.session.success = 'Document deleted! _id: ' + req.document._id;
      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName) + "?skip=".concat(skip, "&key=").concat(key, "&value=").concat(value, "&type=").concat(type, "&query=").concat(jsonQuery, "&projection=").concat(jsonProjection));
    });
  };

  return exp;
};

module.exports = routes;