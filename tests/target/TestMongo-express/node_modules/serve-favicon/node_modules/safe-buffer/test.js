"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.fill");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.fill");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}
/* eslint-disable node/no-deprecated-api */


var test = require('tape');

var SafeBuffer = require('./').Buffer;

test('new SafeBuffer(value) works just like Buffer', function (t) {
  t.deepEqual(new SafeBuffer('hey'), new Buffer('hey'));
  t.deepEqual(new SafeBuffer('hey', 'utf8'), new Buffer('hey', 'utf8'));
  t.deepEqual(new SafeBuffer('686579', 'hex'), new Buffer('686579', 'hex'));
  t.deepEqual(new SafeBuffer([1, 2, 3]), new Buffer([1, 2, 3]));
  t.deepEqual(new SafeBuffer(new Uint8Array([1, 2, 3])), new Buffer(new Uint8Array([1, 2, 3])));
  t.equal(_typeof(SafeBuffer.isBuffer), 'function');
  t.equal(SafeBuffer.isBuffer(new SafeBuffer('hey')), true);
  t.equal(Buffer.isBuffer(new SafeBuffer('hey')), true);
  t.notOk(SafeBuffer.isBuffer({}));
  t.end();
});
test('SafeBuffer.from(value) converts to a Buffer', function (t) {
  t.deepEqual(SafeBuffer.from('hey'), new Buffer('hey'));
  t.deepEqual(SafeBuffer.from('hey', 'utf8'), new Buffer('hey', 'utf8'));
  t.deepEqual(SafeBuffer.from('686579', 'hex'), new Buffer('686579', 'hex'));
  t.deepEqual(SafeBuffer.from([1, 2, 3]), new Buffer([1, 2, 3]));
  t.deepEqual(SafeBuffer.from(new Uint8Array([1, 2, 3])), new Buffer(new Uint8Array([1, 2, 3])));
  t.end();
});
test('SafeBuffer.alloc(number) returns zeroed-out memory', function (t) {
  for (var i = 0; i < 10; i++) {
    var expected1 = new Buffer(1000);
    expected1.fill(0);
    t.deepEqual(SafeBuffer.alloc(1000), expected1);
    var expected2 = new Buffer(1000 * 1000);
    expected2.fill(0);
    t.deepEqual(SafeBuffer.alloc(1000 * 1000), expected2);
  }

  t.end();
});
test('SafeBuffer.allocUnsafe(number)', function (t) {
  var buf = SafeBuffer.allocUnsafe(100); // unitialized memory

  t.equal(buf.length, 100);
  t.equal(SafeBuffer.isBuffer(buf), true);
  t.equal(Buffer.isBuffer(buf), true);
  t.end();
});
test('SafeBuffer.from() throws with number types', function (t) {
  t.plan(5);
  t["throws"](function () {
    SafeBuffer.from(0);
  });
  t["throws"](function () {
    SafeBuffer.from(-1);
  });
  t["throws"](function () {
    SafeBuffer.from(NaN);
  });
  t["throws"](function () {
    SafeBuffer.from(Infinity);
  });
  t["throws"](function () {
    SafeBuffer.from(99);
  });
});
test('SafeBuffer.allocUnsafe() throws with non-number types', function (t) {
  t.plan(4);
  t["throws"](function () {
    SafeBuffer.allocUnsafe('hey');
  });
  t["throws"](function () {
    SafeBuffer.allocUnsafe('hey', 'utf8');
  });
  t["throws"](function () {
    SafeBuffer.allocUnsafe([1, 2, 3]);
  });
  t["throws"](function () {
    SafeBuffer.allocUnsafe({});
  });
});
test('SafeBuffer.alloc() throws with non-number types', function (t) {
  t.plan(4);
  t["throws"](function () {
    SafeBuffer.alloc('hey');
  });
  t["throws"](function () {
    SafeBuffer.alloc('hey', 'utf8');
  });
  t["throws"](function () {
    SafeBuffer.alloc([1, 2, 3]);
  });
  t["throws"](function () {
    SafeBuffer.alloc({});
  });
});