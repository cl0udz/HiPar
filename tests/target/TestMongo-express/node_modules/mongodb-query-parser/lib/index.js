'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.every");

require("core-js/modules/es.array.find-index");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.date.to-iso-string");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.parse-int");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.every");

require("core-js/modules/es.array.find-index");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.date.to-iso-string");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.parse-int");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.trim");

var EJSON = require('mongodb-extended-json');

var bson = require('bson');

var ms = require('ms');

var _require = require('safer-eval'),
    SaferEval = _require.SaferEval;

var toJavascriptString = require('javascript-stringify');

var _ = require('lodash');

var queryLanguage = require('mongodb-language-model');

var getMongoDBType = require('mongodb-extended-json/lib/types').type;

var debug = require('debug')('mongodb-query-parser');

var _require2 = require('./constants'),
    COLLATION_OPTIONS = _require2.COLLATION_OPTIONS;

var DEFAULT_FILTER = {};
var DEFAULT_SORT = null;
var DEFAULT_LIMIT = 0;
var DEFAULT_SKIP = 0;
var DEFAULT_PROJECT = null;
var DEFAULT_COLLATION = null;
var DEFAULT_MAX_TIME_MS = ms('5 seconds');
var QUERY_PROPERTIES = ['filter', 'project', 'sort', 'skip', 'limit'];
var BSON_TO_JS_STRING = {
  Code: function Code(v) {
    if (v.scope) {
      return "Code('".concat(v.code, "',").concat(JSON.stringify(v.scope), ")");
    }

    return "Code('".concat(v.code, "')");
  },
  ObjectID: function ObjectID(v) {
    return "ObjectId('".concat(v.toHexString(), "')");
  },
  ObjectId: function ObjectId(v) {
    return "ObjectId('".concat(v.toHexString(), "')");
  },
  Binary: function Binary(v) {
    var subType = v.sub_type;

    if (subType === 4) {
      return "UUID(\"".concat(v.buffer.toString('hex'), "\")");
    }

    return "BinData(".concat(subType.toString(16), ", '").concat(v.buffer.toString('base64'), "')");
  },
  DBRef: function DBRef(v) {
    return "DBRef('".concat(v.namespace, "', '").concat(v.oid, "')");
  },
  Timestamp: function Timestamp(v) {
    return "Timestamp(".concat(v.low, ", ").concat(v.high, ")");
  },
  Long: function Long(v) {
    return "NumberLong(".concat(v.toString(), ")");
  },
  Decimal128: function Decimal128(v) {
    return "NumberDecimal('".concat(v.toString(), "')");
  },
  Int32: function Int32(v) {
    return "NumberInt{'".concat(v.toString(), "')");
  },
  MaxKey: function MaxKey() {
    return 'MaxKey()';
  },
  MinKey: function MinKey() {
    return 'MinKey()';
  },
  Date: function Date(v) {
    return "ISODate('".concat(v.toISOString(), "')");
  },
  ISODate: function ISODate(v) {
    return "ISODate('".concat(v.toISOString(), "')");
  },
  RegExp: function RegExp(v) {
    var o = '';
    var hasOptions = false;

    if (v.global) {
      hasOptions = true;
      o += 'g';
    }

    if (v.ignoreCase) {
      hasOptions = true;
      o += 'i';
    }

    if (v.multiline) {
      hasOptions = true;
      o += 'm';
    }

    return "RegExp('".concat(v.source, "'").concat(hasOptions ? ", ".concat(o) : '', ")");
  }
};
var FILTER_SANDBOX = {
  RegExp: RegExp,
  Binary: bson.Binary,
  BinData: function BinData(t, d) {
    return new bson.Binary(Buffer.from(d, 'base64'), t);
  },
  UUID: function UUID(u) {
    return new bson.Binary(Buffer.from(u.replace(/-/g, ''), 'hex'), 4);
  },
  Code: function Code(c, s) {
    return new bson.Code(c, s);
  },
  DBRef: bson.DBRef,
  Decimal128: bson.Decimal128,
  NumberDecimal: function NumberDecimal(s) {
    return bson.Decimal128.fromString(s);
  },
  Double: bson.Double,
  Int32: bson.Int32,
  NumberInt: function NumberInt(s) {
    return parseInt(s, 10);
  },
  Long: bson.Long,
  NumberLong: function NumberLong(v) {
    return bson.Long.fromNumber(v);
  },
  Int64: bson.Long,
  Map: bson.Map,
  MaxKey: bson.MaxKey,
  MinKey: bson.MinKey,
  ObjectID: bson.ObjectID,
  ObjectId: bson.ObjectID,
  Symbol: bson.Symbol,
  Timestamp: function Timestamp(low, high) {
    return new bson.Timestamp(low, high);
  },
  ISODate: function ISODate(s) {
    return s === undefined ? new Date() : new Date(s);
  },
  Date: function (_Date) {
    function Date(_x) {
      return _Date.apply(this, arguments);
    }

    Date.toString = function () {
      return _Date.toString();
    };

    return Date;
  }(function (s) {
    return s === undefined ? new Date() : new Date(s);
  })
};
var CORE_JS_GLOBAL = '__core-js_shared__';
var SANDBOX = new SaferEval(FILTER_SANDBOX);
delete SANDBOX._context[CORE_JS_GLOBAL];

function isEmpty(input) {
  var s = _.trim(input);

  if (s === '{}') {
    return true;
  }

  return _.isEmpty(s);
}

function isNumberValid(input) {
  if (isEmpty(input)) {
    return 0;
  }

  return /^\d+$/.test(input) ? parseInt(input, 10) : false;
}

function executeJavascript(input) {
  'use strict';

  return SANDBOX.runInContext(input);
}

function parseProject(input) {
  return executeJavascript(input);
}

function parseCollation(input) {
  return executeJavascript(input);
}

function parseSort(input) {
  return executeJavascript(input);
}

function parseFilter(input) {
  return executeJavascript(input);
}

module.exports = function (filter) {
  var project = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PROJECT;

  if (arguments.length === 1) {
    if (_.isString(filter)) {
      return parseFilter(filter);
    }
  }

  return {
    filter: parseFilter(filter),
    project: parseProject(project)
  };
};

module.exports.parseFilter = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_FILTER;
  }

  return parseFilter(input);
};

module.exports.parseCollation = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_COLLATION;
  }

  return parseCollation(input);
};
/**
 * Validation function for a query `filter`. Must be a valid MongoDB query
 * according to the query language.
 *
 * @param {String} input
 * @return {Boolean|Object} false if not valid, or the parsed filter.
 */


module.exports.isFilterValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_FILTER;
  }

  try {
    var parsed = parseFilter(input); // is it a valid MongoDB query according to the language?

    return queryLanguage.accepts(EJSON.stringify(parsed)) ? parsed : false;
  } catch (e) {
    debug('Filter "%s" is invalid', input, e);
    return false;
  }
};
/**
 * Validation of collation object keys and values.
 *
 * @param {Object} collation
 * @return {Boolean|Object} false if not valid, otherwise the parsed project.
 */


function isCollationValid(collation) {
  var isValid = true;

  _.forIn(collation, function (value, key) {
    var itemIndex = _.findIndex(COLLATION_OPTIONS, key);

    if (itemIndex === -1) {
      debug('Collation "%s" is invalid bc of its keys', collation);
      isValid = false;
    }

    if (COLLATION_OPTIONS[itemIndex][key].includes(value) === false) {
      debug('Collation "%s" is invalid bc of its values', collation);
      isValid = false;
    }
  });

  return isValid ? collation : false;
}
/**
 * Validation function for a query `collation`.
 *
 * @param {String} input
 * @return {Boolean|Object} false if not valid, or the parsed filter.
 */


module.exports.isCollationValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_COLLATION;
  }

  try {
    var parsed = parseCollation(input);
    return isCollationValid(parsed);
  } catch (e) {
    debug('Collation "%s" is invalid', input, e);
    return false;
  }
};

function isValueOkforProject(val) {
  return _.isNumber(val) && (val === 0 || val === 1) || _.isObject(val);
}

module.exports.parseProject = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_PROJECT;
  }

  return parseProject(input);
};
/**
 * Validation function for a query `project`. Must only have 0 or 1 as values.
 *
 * @param {String} input
 * @return {Boolean|Object} false if not valid, otherwise the parsed project.
 */


module.exports.isProjectValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_PROJECT;
  }

  try {
    var parsed = parseProject(input);

    if (!_.every(parsed, isValueOkforProject)) {
      debug('Project "%s" is invalid bc of its values', input);
      return false;
    }

    return parsed;
  } catch (e) {
    debug('Project "%s" is invalid', input, e);
    return false;
  }
};

function isValueOkforSort(val) {
  return _.isNumber(val) && (val === 1 || val === -1);
}

module.exports.parseSort = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_SORT;
  }

  return parseSort(input);
};
/**
 * validation function for a query `sort`. Must only have -1 or 1 as values.
 *
 * @param {String} input
 * @return {Boolean|Object} false if not valid, otherwise the cleaned-up sort.
 */


module.exports.isSortValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_SORT;
  }

  try {
    var parsed = parseSort(input);

    if (!_.every(parsed, isValueOkforSort)) {
      debug('Sort "%s" is invalid bc of its values', input);
      return false;
    }

    return parsed;
  } catch (e) {
    debug('Sort "%s" is invalid', input, e);
    return false;
  }
};
/**
 * Validation function for a query `maxTimeMS`. Must be digits only.
 *
 * @param {String} input
 * @return {Boolean|Number} false if not valid, otherwise the cleaned-up skip.
 */


module.exports.isMaxTimeMSValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_MAX_TIME_MS;
  }

  return isNumberValid(input);
};
/**
 * Validation function for a query `skip`. Must be digits only.
 *
 * @param {String} input
 * @return {Boolean|Number} false if not valid, otherwise the cleaned-up skip.
 */


module.exports.isSkipValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_SKIP;
  }

  return isNumberValid(input);
};
/**
 * Validation function for a query `limit`. Must be digits only.
 *
 * @param {String} input
 * @return {Boolean|Number} false if not valid, otherwise the cleaned-up limit.
 */


module.exports.isLimitValid = function (input) {
  if (isEmpty(input)) {
    return DEFAULT_LIMIT;
  }

  return isNumberValid(input);
};

module.exports.validate = function (what, input) {
  var validator = module.exports["is".concat(_.upperFirst(what), "Valid")];

  if (!validator) {
    debug('Do not know how to validate `%s`. Returning false.', what);
    return false;
  }

  return validator(input);
};

function toJSString(obj, ind) {
  return toJavascriptString(obj, function (value, indent, stringify) {
    var toJs = BSON_TO_JS_STRING[getMongoDBType(value)];

    if (!toJs) {
      return stringify(value);
    }

    return toJs(value);
  }, ind || ' ');
}

module.exports.toJSString = toJSString;

module.exports.stringify = function (obj) {
  return toJSString(obj).replace(/ ?\n ? ?/g, '').replace(/ {2,}/g, ' ');
};

module.exports.QUERY_PROPERTIES = QUERY_PROPERTIES;
module.exports.DEFAULT_FILTER = DEFAULT_FILTER;
module.exports.DEFAULT_SORT = DEFAULT_SORT;
module.exports.DEFAULT_LIMIT = DEFAULT_LIMIT;
module.exports.DEFAULT_SKIP = DEFAULT_SKIP;
module.exports.DEFAULT_PROJECT = DEFAULT_PROJECT;
module.exports.DEFAULT_COLLATION = DEFAULT_COLLATION;
module.exports.DEFAULT_MAX_TIME_MS = DEFAULT_MAX_TIME_MS;