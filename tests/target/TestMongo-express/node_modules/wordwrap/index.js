"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var wordwrap = module.exports = function (start, stop, params) {
  if (_typeof(start) === 'object') {
    params = start;
    start = params.start;
    stop = params.stop;
  }

  if (_typeof(stop) === 'object') {
    params = stop;
    start = start || params.start;
    stop = undefined;
  }

  if (!stop) {
    stop = start;
    start = 0;
  }

  if (!params) params = {};
  var mode = params.mode || 'soft';
  var re = mode === 'hard' ? /\b/ : /(\S+\s+)/;
  return function (text) {
    var chunks = text.toString().split(re).reduce(function (acc, x) {
      if (mode === 'hard') {
        for (var i = 0; i < x.length; i += stop - start) {
          acc.push(x.slice(i, i + stop - start));
        }
      } else acc.push(x);

      return acc;
    }, []);
    return chunks.reduce(function (lines, rawChunk) {
      if (rawChunk === '') return lines;
      var chunk = rawChunk.replace(/\t/g, '    ');
      var i = lines.length - 1;

      if (lines[i].length + chunk.length > stop) {
        lines[i] = lines[i].replace(/\s+$/, '');
        chunk.split(/\n/).forEach(function (c) {
          lines.push(new Array(start + 1).join(' ') + c.replace(/^\s+/, ''));
        });
      } else if (chunk.match(/\n/)) {
        var xs = chunk.split(/\n/);
        lines[i] += xs.shift();
        xs.forEach(function (c) {
          lines.push(new Array(start + 1).join(' ') + c.replace(/^\s+/, ''));
        });
      } else {
        lines[i] += chunk;
      }

      return lines;
    }, [new Array(start + 1).join(' ')]).join('\n');
  };
};

wordwrap.soft = wordwrap;

wordwrap.hard = function (start, stop) {
  return wordwrap(start, stop, {
    mode: 'hard'
  });
};