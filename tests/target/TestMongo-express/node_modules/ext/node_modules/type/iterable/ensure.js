"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

var resolveException = require("../lib/resolve-exception"),
    resolveErrorMessage = require("../lib/resolve-error-message"),
    toShortString = require("../lib/to-short-string"),
    ensurePlainFunction = require("../plain-function/ensure"),
    is = require("./is");

var invalidItemsLimit = 3,
    defaultErrorMessage = "%v is not expected iterable value";

module.exports = function (value
/*, options*/
) {
  var options = arguments[1];
  if (!is(value, options)) return resolveException(value, defaultErrorMessage, options);
  if (!options) return value;
  var ensureItem = ensurePlainFunction(options.ensureItem, {
    isOptional: true
  });

  if (ensureItem) {
    var coercedValue = [];
    var iterator = value[Symbol.iterator]();
    var item, invalidItems;

    while (!(item = iterator.next()).done) {
      var newItemValue;

      try {
        newItemValue = ensureItem(item.value);
      } catch (error) {
        if (!invalidItems) invalidItems = [];
        if (invalidItems.push(item.value) === invalidItemsLimit) break;
      }

      if (invalidItems) continue;
      coercedValue.push(newItemValue);
    }

    if (invalidItems) {
      var errorMessage = resolveErrorMessage(defaultErrorMessage, value, options) + ".\n           Following items are invalid:";

      for (var i = 0; i < invalidItems.length; ++i) {
        errorMessage += "\n             - " + toShortString(invalidItems[i]);
      }

      throw new TypeError(errorMessage);
    }

    return coercedValue;
  }

  return value;
};