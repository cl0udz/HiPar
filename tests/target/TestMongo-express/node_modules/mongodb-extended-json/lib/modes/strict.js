"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-iso-string");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.parse-int");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-iso-string");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.parse-int");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var bson = require('bson');
/**
 * Map of all extended types to serializers (stringify) and deserializers (parse).
 *
 * @api private
 */


module.exports = {
  serialize: {
    Code: function Code(v) {
      if (v.scope) {
        return {
          $code: v.code,
          $scope: v.scope
        };
      }

      return {
        $code: v.code
      };
    },
    ObjectID: function ObjectID(v) {
      return {
        $oid: v.toHexString()
      };
    },
    Binary: function Binary(v) {
      return {
        $binary: v.buffer.toString('base64'),
        $type: v.sub_type.toString(16)
      };
    },
    DBRef: function DBRef(v) {
      var id = _typeof(v.oid) === 'object' && module.exports.serialize[v.oid.constructor.name] ? module.exports.serialize[v.oid.constructor.name](v.oid) : v.oid;
      return {
        $ref: v.namespace,
        $id: id
      };
    },
    Timestamp: function Timestamp(v) {
      return {
        $timestamp: {
          t: v.low_,
          i: v.high_
        }
      };
    },
    Long: function Long(v) {
      return {
        $numberLong: v.toString()
      };
    },
    Decimal128: function Decimal128(v) {
      return {
        $numberDecimal: v.toString()
      };
    },
    MaxKey: function MaxKey() {
      return {
        $maxKey: 1
      };
    },
    MinKey: function MinKey() {
      return {
        $minKey: 1
      };
    },
    Date: function Date(v) {
      var timestamp = v.getTime();

      if (timestamp >= 32535215999000) {
        return {
          $date: {
            $numberLong: '' + timestamp
          }
        };
      }

      return {
        $date: v.toISOString()
      };
    },
    RegExp: function RegExp(v) {
      var o = '';

      if (v.global) {
        o += 'g';
      }

      if (v.ignoreCase) {
        o += 'i';
      }

      if (v.multiline) {
        o += 'm';
      }

      return {
        $regex: v.source,
        $options: o
      };
    },
    Undefined: function Undefined() {
      return {
        $undefined: true
      };
    }
  },

  /* eslint new-cap:0 */
  deserialize: {
    $code: function $code(code) {
      return bson.Code(code.$code, code.$scope);
    },
    $oid: function $oid(data) {
      return bson.ObjectID(data.$oid);
    },
    $binary: function $binary(val) {
      return new bson.Binary(new Buffer(val.$binary, 'base64'), parseInt(val.$type, 16));
    },
    $ref: function $ref(val) {
      var id = _typeof(val.$id) === 'object' && module.exports.deserialize[Object.keys(val.$id)[0]] ? module.exports.deserialize[Object.keys(val.$id)[0]](val.$id) : val.$id;
      return bson.DBRef(val.$ref, id);
    },
    $timestamp: function $timestamp(val) {
      return bson.Timestamp(val.$timestamp.t, val.$timestamp.i);
    },
    $numberLong: function $numberLong(val) {
      return bson.Long.fromString(val.$numberLong);
    },
    $numberDecimal: function $numberDecimal(val) {
      return bson.Decimal128.fromString(val.$numberDecimal);
    },
    $maxKey: function $maxKey() {
      return bson.MaxKey();
    },
    $minKey: function $minKey() {
      return bson.MinKey();
    },
    $date: function $date(val) {
      var d = new Date();
      var v;

      if (_typeof(val.$date) === 'object') {
        v = val.$date.$numberLong;
      } else {
        v = val.$date;
      } // Kernel bug.  See #2 http://git.io/AEbmFg


      if (isNaN(d.setTime(v))) {
        d = new Date(v);
      }

      return d;
    },
    $regex: function $regex(val) {
      return new RegExp(val.$regex, val.$options);
    },
    $undefined: function $undefined() {
      return undefined;
    }
  }
};