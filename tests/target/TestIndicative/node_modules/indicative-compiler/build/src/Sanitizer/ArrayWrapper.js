"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var lodash_get_1 = __importDefault(require("lodash.get"));

var ArrayWrapper =
/*#__PURE__*/
function () {
  function ArrayWrapper(_field, _index, _childSanitizations, _dotPath) {
    _classCallCheck(this, ArrayWrapper);

    this._field = _field;
    this._index = _index;
    this._childSanitizations = _childSanitizations;
    this._dotPath = _dotPath;
    this._pointer = this._dotPath.concat(this._field).join('.');
  }

  _createClass(ArrayWrapper, [{
    key: "_getDataCopy",
    value: function _getDataCopy(data) {
      var value = lodash_get_1["default"](data.tip, this._pointer);

      if (!Array.isArray(value)) {
        return null;
      }

      return {
        original: data.original,
        tip: null,
        parentArray: value,
        currentIndex: this._index === '*' ? 0 : Number(this._index)
      };
    }
  }, {
    key: "_executeSanitizations",
    value: function _executeSanitizations(data, config) {
      this._childSanitizations.forEach(function (sanitization) {
        return sanitization.exec(data, config);
      });
    }
  }, {
    key: "exec",
    value: function exec(data, config) {
      var _this = this;

      var dataCopy = this._getDataCopy(data);

      if (!dataCopy) {
        return true;
      }

      if (this._index !== '*') {
        dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];
        return this._executeSanitizations(dataCopy, config);
      }

      dataCopy.parentArray.forEach(function (item, index) {
        dataCopy.tip = item;
        dataCopy.currentIndex = index;

        _this._executeSanitizations(dataCopy, config);
      });
    }
  }]);

  return ArrayWrapper;
}();

exports.ArrayWrapper = ArrayWrapper;