"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var indicative_parser_1 = require("indicative-parser");

var TreeWalker_1 = require("../TreeWalker");

var ArrayWrapper_1 = require("./ArrayWrapper");

var SanitizationsRunner_1 = require("./SanitizationsRunner");

var Compiler =
/*#__PURE__*/
function () {
  function Compiler(schema, _sanitizations) {
    _classCallCheck(this, Compiler);

    this._sanitizations = _sanitizations;
    this._parsedSchema = indicative_parser_1.rulesParser(schema);
  }

  _createClass(Compiler, [{
    key: "compile",
    value: function compile() {
      var _this = this;

      return new TreeWalker_1.TreeWalker(function (field, _type, rules, dotPath) {
        return new SanitizationsRunner_1.SanitizationsRunner(field, dotPath, rules, _this._sanitizations);
      }, function (index, field, children, dotPath) {
        return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);
      }).walk(this._parsedSchema);
    }
  }]);

  return Compiler;
}();

exports.Compiler = Compiler;