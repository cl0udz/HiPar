"use strict";

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var lodash_get_1 = __importDefault(require("lodash.get"));

var isobject_1 = __importDefault(require("isobject"));

var SanitizationsRunner =
/*#__PURE__*/
function () {
  function SanitizationsRunner(_field, _dotPath, rules, sanitizations) {
    _classCallCheck(this, SanitizationsRunner);

    this._field = _field;
    this._dotPath = _dotPath;
    this._sanitizations = [];

    this._computeSanitizations(sanitizations, rules);
  }

  _createClass(SanitizationsRunner, [{
    key: "_computeSanitizations",
    value: function _computeSanitizations(sanitizations, rules) {
      this._sanitizations = rules.map(function (rule) {
        var sanitization = sanitizations[rule.name];

        if (!sanitization) {
          throw new Error("".concat(rule.name, " is not a registered as a sanitization"));
        }

        if (typeof sanitization.sanitize !== 'function') {
          throw new Error("".concat(rule.name, " is missing sanitize function"));
        }

        if (typeof sanitization.compile === 'function') {
          rule.args = sanitization.compile(rule.args);
        }

        return {
          rule: rule,
          fn: sanitization.sanitize
        };
      });
    }
  }, {
    key: "_getDataCopy",
    value: function _getDataCopy(data) {
      var tip = this._dotPath.length ? lodash_get_1["default"](data.tip, this._dotPath) : data.tip;
      return Object.assign({}, data, {
        tip: this._field === '::tip::' ? _defineProperty({}, this._field, tip) : tip
      });
    }
  }, {
    key: "exec",
    value: function exec(data, config) {
      var _this = this;

      var dataCopy = this._getDataCopy(data);

      if (!isobject_1["default"](dataCopy.tip)) {
        return true;
      }

      this._sanitizations.forEach(function (sanitization) {
        sanitization.fn(dataCopy, _this._field, sanitization.rule.args, config);
      });
    }
  }]);

  return SanitizationsRunner;
}();

exports.SanitizationsRunner = SanitizationsRunner;