"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var indicative_parser_1 = require("indicative-parser");

var ArrayWrapper_1 = require("./ArrayWrapper");

var ValidationsRunner_1 = require("./ValidationsRunner");

var TreeWalker_1 = require("../TreeWalker");

var Compiler =
/*#__PURE__*/
function () {
  function Compiler(schema, messages, _validations) {
    _classCallCheck(this, Compiler);

    this._validations = _validations;
    this._parsedSchema = indicative_parser_1.rulesParser(schema);
    this._parsedMessages = indicative_parser_1.messagesParser(messages);
  }

  _createClass(Compiler, [{
    key: "compile",
    value: function compile() {
      var _this = this;

      return new TreeWalker_1.TreeWalker(function (field, type, rules, dotPath, pointer) {
        var messages = _this._parsedMessages.fields[pointer] || {};
        var genericMessage = _this._parsedMessages.rules;
        return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, _this._validations, messages, genericMessage);
      }, function (index, field, children, dotPath) {
        return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);
      }).walk(this._parsedSchema);
    }
  }]);

  return Compiler;
}();

exports.Compiler = Compiler;