"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var pope_1 = require("pope");

var lodash_set_1 = __importDefault(require("lodash.set"));

var Collector =
/*#__PURE__*/
function () {
  function Collector(formatter, _generateTree, _customErrorCollector) {
    _classCallCheck(this, Collector);

    this.formatter = formatter;
    this._generateTree = _generateTree;
    this._customErrorCollector = _customErrorCollector;
    this.tree = {};
    this.hasErrors = false;
  }

  _createClass(Collector, [{
    key: "setValue",
    value: function setValue(pointer, value) {
      if (!this._generateTree || value === undefined || this.hasErrors) {
        return;
      }

      pointer = pointer.replace('.::tip::', '');
      lodash_set_1["default"](this.tree, pointer, value);
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.tree;
    }
  }, {
    key: "getErrors",
    value: function getErrors() {
      return this.formatter.toJSON();
    }
  }, {
    key: "setError",
    value: function setError(pointer, rule, message) {
      this.hasErrors = true;

      if (message && typeof message === 'string') {
        message = pope_1.pope(message, {
          field: pointer,
          args: rule.args,
          validation: rule.name
        });
      }

      message = message || "".concat(rule.name, " validation failed on ").concat(pointer);
      message = typeof message === 'function' ? message(pointer, rule.name, rule.args) : message;

      if (typeof this._customErrorCollector === 'function') {
        this._customErrorCollector(this.formatter, message, pointer, rule.name, rule.args);
      } else {
        this.formatter.addError(message, pointer, rule.name, rule.args);
      }
    }
  }]);

  return Collector;
}();

exports.Collector = Collector;