"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var lodash_get_1 = __importDefault(require("lodash.get"));

var ArrayWrapper =
/*#__PURE__*/
function () {
  function ArrayWrapper(_field, _index, _childValidators, _dotPath) {
    _classCallCheck(this, ArrayWrapper);

    this._field = _field;
    this._index = _index;
    this._childValidators = _childValidators;
    this._dotPath = _dotPath;
    this._pointer = this._dotPath.concat(this._field).join('.');
    this.async = !!this._childValidators.find(function (validator) {
      return validator.async;
    });
  }

  _createClass(ArrayWrapper, [{
    key: "_getDataCopy",
    value: function _getDataCopy(data) {
      var value = lodash_get_1["default"](data.tip, this._pointer);

      if (!Array.isArray(value)) {
        return null;
      }

      return {
        original: data.original,
        pointer: '',
        tip: null,
        parentArray: value,
        currentIndex: this._index === '*' ? 0 : Number(this._index),
        arrayPointer: data.arrayPointer ? "".concat(data.arrayPointer, ".").concat(data.currentIndex, ".").concat(this._pointer) : this._pointer
      };
    }
  }, {
    key: "_executeValidations",
    value: function _executeValidations(data, collector, config, bail) {
      var hasFailures = false;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._childValidators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var validator = _step.value;
          var passed = validator.exec(data, collector, config, bail);

          if (!passed) {
            hasFailures = true;

            if (bail) {
              break;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return !hasFailures;
    }
  }, {
    key: "_executeAsyncValidations",
    value: function _executeAsyncValidations(data, collector, config, bail) {
      var hasFailures, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, validator, passed;

      return regeneratorRuntime.async(function _executeAsyncValidations$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hasFailures = false;
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 4;
              _iterator2 = this._childValidators[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 23;
                break;
              }

              validator = _step2.value;
              passed = true;

              if (!validator.async) {
                _context.next = 15;
                break;
              }

              _context.next = 12;
              return regeneratorRuntime.awrap(validator.execAsync(data, collector, config, bail));

            case 12:
              passed = _context.sent;
              _context.next = 16;
              break;

            case 15:
              passed = validator.exec(data, collector, config, bail);

            case 16:
              if (passed) {
                _context.next = 20;
                break;
              }

              hasFailures = true;

              if (!bail) {
                _context.next = 20;
                break;
              }

              return _context.abrupt("break", 23);

            case 20:
              _iteratorNormalCompletion2 = true;
              _context.next = 6;
              break;

            case 23:
              _context.next = 29;
              break;

            case 25:
              _context.prev = 25;
              _context.t0 = _context["catch"](4);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 29:
              _context.prev = 29;
              _context.prev = 30;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 32:
              _context.prev = 32;

              if (!_didIteratorError2) {
                _context.next = 35;
                break;
              }

              throw _iteratorError2;

            case 35:
              return _context.finish(32);

            case 36:
              return _context.finish(29);

            case 37:
              return _context.abrupt("return", !hasFailures);

            case 38:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[4, 25, 29, 37], [30,, 32, 36]]);
    }
  }, {
    key: "exec",
    value: function exec(data, collector, config) {
      var bail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var dataCopy = this._getDataCopy(data);

      if (!dataCopy) {
        return true;
      }

      if (this._index !== '*') {
        dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];
        return this._executeValidations(dataCopy, collector, config, bail);
      }

      var index = 0;
      var hasFailures = false;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = dataCopy.parentArray[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var item = _step3.value;
          dataCopy.tip = item;
          dataCopy.currentIndex = index;
          var passed = true;
          passed = this._executeValidations(dataCopy, collector, config, bail);

          if (!passed) {
            hasFailures = true;

            if (bail) {
              break;
            }
          }

          index++;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return !hasFailures;
    }
  }, {
    key: "execAsync",
    value: function execAsync(data, collector, config) {
      var bail,
          dataCopy,
          index,
          hasFailures,
          _iteratorNormalCompletion4,
          _didIteratorError4,
          _iteratorError4,
          _iterator4,
          _step4,
          item,
          passed,
          _args2 = arguments;

      return regeneratorRuntime.async(function execAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              bail = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : false;
              dataCopy = this._getDataCopy(data);

              if (dataCopy) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", true);

            case 4:
              if (!(this._index !== '*')) {
                _context2.next = 7;
                break;
              }

              dataCopy.tip = dataCopy.parentArray[dataCopy.currentIndex];
              return _context2.abrupt("return", this._executeAsyncValidations(dataCopy, collector, config, bail));

            case 7:
              index = 0;
              hasFailures = false;
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 12;
              _iterator4 = dataCopy.parentArray[Symbol.iterator]();

            case 14:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context2.next = 29;
                break;
              }

              item = _step4.value;
              dataCopy.tip = item;
              dataCopy.currentIndex = index;
              _context2.next = 20;
              return regeneratorRuntime.awrap(this._executeAsyncValidations(dataCopy, collector, config, bail));

            case 20:
              passed = _context2.sent;

              if (passed) {
                _context2.next = 25;
                break;
              }

              hasFailures = true;

              if (!bail) {
                _context2.next = 25;
                break;
              }

              return _context2.abrupt("break", 29);

            case 25:
              index++;

            case 26:
              _iteratorNormalCompletion4 = true;
              _context2.next = 14;
              break;

            case 29:
              _context2.next = 35;
              break;

            case 31:
              _context2.prev = 31;
              _context2.t0 = _context2["catch"](12);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t0;

            case 35:
              _context2.prev = 35;
              _context2.prev = 36;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 38:
              _context2.prev = 38;

              if (!_didIteratorError4) {
                _context2.next = 41;
                break;
              }

              throw _iteratorError4;

            case 41:
              return _context2.finish(38);

            case 42:
              return _context2.finish(35);

            case 43:
              return _context2.abrupt("return", !hasFailures);

            case 44:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[12, 31, 35, 43], [36,, 38, 42]]);
    }
  }]);

  return ArrayWrapper;
}();

exports.ArrayWrapper = ArrayWrapper;