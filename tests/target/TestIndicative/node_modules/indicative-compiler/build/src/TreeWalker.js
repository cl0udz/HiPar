"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var TreeWalker =
/*#__PURE__*/
function () {
  function TreeWalker(_consumerFn, _arrayWrapper) {
    _classCallCheck(this, TreeWalker);

    this._consumerFn = _consumerFn;
    this._arrayWrapper = _arrayWrapper;
  }

  _createClass(TreeWalker, [{
    key: "_processLiteralNode",
    value: function _processLiteralNode(field, node, dotPath, arrayPath) {
      var pointer = arrayPath.concat(dotPath).concat(field).join('.');
      return this._consumerFn(field, node.type, node.rules, dotPath, pointer);
    }
  }, {
    key: "_processObjectNode",
    value: function _processObjectNode(field, node, dotPath, arrayPath) {
      var output = [];

      if (node.rules.length) {
        var pointer = arrayPath.concat(dotPath).concat(field).join('.');
        output.push(this._consumerFn(field, node.type, node.rules, dotPath, pointer));
      }

      output = output.concat(this.walk(node.children, dotPath.concat(field), arrayPath));
      return output;
    }
  }, {
    key: "_processArrayNode",
    value: function _processArrayNode(field, node, dotPath, arrayPath) {
      var _this = this;

      var output = [];
      var basePath = arrayPath.concat(dotPath).concat(field);

      if (node.rules.length) {
        var pointer = basePath.join('.');
        output.push(this._consumerFn(field, node.type, node.rules, dotPath, pointer));
      }

      Object.keys(node.each).forEach(function (index) {
        var child = [];

        if (node.each[index].rules.length) {
          var _pointer = basePath.concat(index).join('.');

          child.push(_this._consumerFn('::tip::', 'literal', node.each[index].rules, [], _pointer));
        }

        child = child.concat(_this.walk(node.each[index].children, [], basePath.concat(index)));
        output = output.concat(_this._arrayWrapper(index, field, child, dotPath));
      });
      return output;
    }
  }, {
    key: "walk",
    value: function walk(schema) {
      var _this2 = this;

      var dotPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var arrayPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      return Object.keys(schema).reduce(function (result, field) {
        var node = schema[field];

        if (node.type === 'literal') {
          result = result.concat(_this2._processLiteralNode(field, node, dotPath, arrayPath));
        }

        if (node.type === 'object') {
          result = result.concat(_this2._processObjectNode(field, node, dotPath, arrayPath));
        }

        if (node.type === 'array') {
          result = result.concat(_this2._processArrayNode(field, node, dotPath, arrayPath));
        }

        return result;
      }, []);
    }
  }]);

  return TreeWalker;
}();

exports.TreeWalker = TreeWalker;