"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TreeWalker {
    constructor(_consumerFn, _arrayWrapper) {
        this._consumerFn = _consumerFn;
        this._arrayWrapper = _arrayWrapper;
    }
    _processLiteralNode(field, node, dotPath, arrayPath) {
        const pointer = arrayPath.concat(dotPath).concat(field).join('.');
        return this._consumerFn(field, node.type, node.rules, dotPath, pointer);
    }
    _processObjectNode(field, node, dotPath, arrayPath) {
        let output = [];
        if (node.rules.length) {
            const pointer = arrayPath.concat(dotPath).concat(field).join('.');
            output.push(this._consumerFn(field, node.type, node.rules, dotPath, pointer));
        }
        output = output.concat(this.walk(node.children, dotPath.concat(field), arrayPath));
        return output;
    }
    _processArrayNode(field, node, dotPath, arrayPath) {
        let output = [];
        const basePath = arrayPath.concat(dotPath).concat(field);
        if (node.rules.length) {
            const pointer = basePath.join('.');
            output.push(this._consumerFn(field, node.type, node.rules, dotPath, pointer));
        }
        Object.keys(node.each).forEach((index) => {
            let child = [];
            if (node.each[index].rules.length) {
                const pointer = basePath.concat(index).join('.');
                child.push(this._consumerFn('::tip::', 'literal', node.each[index].rules, [], pointer));
            }
            child = child.concat(this.walk(node.each[index].children, [], basePath.concat(index)));
            output = output.concat(this._arrayWrapper(index, field, child, dotPath));
        });
        return output;
    }
    walk(schema, dotPath = [], arrayPath = []) {
        return Object.keys(schema).reduce((result, field) => {
            const node = schema[field];
            if (node.type === 'literal') {
                result = result.concat(this._processLiteralNode(field, node, dotPath, arrayPath));
            }
            if (node.type === 'object') {
                result = result.concat(this._processObjectNode(field, node, dotPath, arrayPath));
            }
            if (node.type === 'array') {
                result = result.concat(this._processArrayNode(field, node, dotPath, arrayPath));
            }
            return result;
        }, []);
    }
}
exports.TreeWalker = TreeWalker;
