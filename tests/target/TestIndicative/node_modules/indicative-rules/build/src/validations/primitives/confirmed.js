"use strict";

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var indicative_utils_1 = require("indicative-utils");

var same_1 = require("../../raw/same");

function castType(input, type) {
  if (type === 'string') {
    return indicative_utils_1.cast(input, 'string');
  }

  if (type === 'number') {
    return indicative_utils_1.cast(input, 'integer');
  }

  return input;
}

var validation = {
  async: false,
  validate: function validate(data, field, _args, config) {
    var fieldValue = indicative_utils_1.getValue(data, field);

    if (indicative_utils_1.skippable(fieldValue, field, config)) {
      return true;
    }

    var valueType = _typeof(fieldValue);

    var comparisonValue = indicative_utils_1.getValue(data, "".concat(field, "_confirmation"));

    if (_typeof(comparisonValue) !== valueType) {
      comparisonValue = castType(comparisonValue, valueType);
    }

    return same_1.same(fieldValue, comparisonValue);
  }
};
exports["default"] = validation;