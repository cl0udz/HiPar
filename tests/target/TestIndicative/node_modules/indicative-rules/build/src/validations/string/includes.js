"use strict";

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var indicative_utils_1 = require("indicative-utils");

var MISSING_VALUE = 'includes:make sure to define substring to match';
var validation = {
  async: false,
  compile: function compile(args) {
    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);
    return [String(args[0])];
  },
  validate: function validate(data, field, _ref, config) {
    var _ref2 = _slicedToArray(_ref, 1),
        substring = _ref2[0];

    var fieldValue = indicative_utils_1.getValue(data, field);

    if (indicative_utils_1.skippable(fieldValue, field, config)) {
      return true;
    }

    if (typeof fieldValue !== 'string') {
      return false;
    }

    return fieldValue.includes(substring);
  }
};
exports["default"] = validation;