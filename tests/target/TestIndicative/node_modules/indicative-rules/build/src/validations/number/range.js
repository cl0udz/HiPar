"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var indicative_utils_1 = require("indicative-utils");

var MISSING_VALUES = 'range:make sure to define min and max values';
var INVALID_TYPE = 'range:min and max values must be defined as integers';
var validation = {
  async: false,
  compile: function compile(args) {
    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);
    var min = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);
    var max = indicative_utils_1.cast(args[1], 'float', INVALID_TYPE);
    return [min, max];
  },
  validate: function validate(data, field, _ref, config) {
    var _ref2 = _slicedToArray(_ref, 2),
        min = _ref2[0],
        max = _ref2[1];

    var fieldValue = indicative_utils_1.getValue(data, field);
    return indicative_utils_1.skippable(fieldValue, field, config) || fieldValue >= min && fieldValue <= max;
  }
};
exports["default"] = validation;