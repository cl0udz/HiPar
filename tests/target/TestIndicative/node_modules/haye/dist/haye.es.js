"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function Pipe(e, n) {
  n.add();

  for (var r = e.length, t = 0, u = "name"; t < r;) {
    var o = e[t++],
        a = o.charCodeAt(0);
    58 === a || 44 === a ? (u = "arg", n.shiftValue()) : 124 === a ? (u = "name", n.add()) : "arg" === u ? n.appendValue(o) : n.appendKey(o, a);
  }

  return n.toJSON();
}

function Qs(e, n) {
  n.add();

  for (var r = e.length, t = 0, u = "name", o = !1; t < r;) {
    var a = e[t++],
        s = a.charCodeAt(0);
    91 === s ? o = !0 : 93 === s ? o = !1 : 61 === s || 44 === s && o ? (u = "arg", n.shiftValue()) : 44 === s ? (u = "name", n.add()) : "arg" === u ? n.appendValue(a) : n.appendKey(a, s);
  }

  return n.toJSON();
}

function ArrayPresenter() {
  return {
    nodes: [],
    currentNode: null,
    add: function add() {
      this.currentNode = {
        name: "",
        args: []
      }, this.nodes.push(this.currentNode);
    },
    appendKey: function appendKey(e, n) {
      32 !== n && (this.currentNode.name += e);
    },
    appendValue: function appendValue(e) {
      this.currentNode.args[this.currentNode.args.length - 1] += e;
    },
    shiftValue: function shiftValue() {
      this.currentNode.args.push("");
    },
    toJSON: function toJSON() {
      return this.nodes;
    }
  };
}

function JsonPresenter() {
  return {
    nodes: [],
    currentNode: null,
    add: function add() {
      this.currentNode = {
        name: "",
        args: []
      }, this.nodes.push(this.currentNode);
    },
    appendKey: function appendKey(e, n) {
      32 !== n && (this.currentNode.name += e);
    },
    appendValue: function appendValue(e) {
      this.currentNode.args[this.currentNode.args.length - 1] += e;
    },
    shiftValue: function shiftValue() {
      this.currentNode.args.push("");
    },
    toJSON: function toJSON() {
      return this.nodes.reduce(function (e, n) {
        return e[n.name] = n.args, e;
      }, {});
    }
  };
}

var index = {
  fromPipe: function fromPipe(e) {
    return {
      toArray: function toArray() {
        return Pipe(e, new ArrayPresenter());
      },
      toJSON: function toJSON() {
        return Pipe(e, new JsonPresenter());
      }
    };
  },
  fromQS: function fromQS(e) {
    return {
      toArray: function toArray() {
        return Qs(e, new ArrayPresenter());
      },
      toJSON: function toJSON() {
        return Qs(e, new JsonPresenter());
      }
    };
  }
};
var _default = index;
exports["default"] = _default;