"use strict";

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validations = {
  above: function above(_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        minValue = _ref2[0];

    return {
      name: 'above',
      args: [minValue]
    };
  },
  accepted: function accepted() {
    return {
      name: 'accepted',
      args: []
    };
  },
  alpha: function alpha() {
    return {
      name: 'alpha',
      args: []
    };
  },
  alphaNumeric: function alphaNumeric() {
    return {
      name: 'alphaNumeric',
      args: []
    };
  },
  array: function array() {
    return {
      name: 'array',
      args: []
    };
  },
  "boolean": function _boolean() {
    return {
      name: 'boolean',
      args: []
    };
  },
  confirmed: function confirmed() {
    return {
      name: 'confirmed',
      args: []
    };
  },
  different: function different(args) {
    return {
      name: 'different',
      args: args || []
    };
  },
  email: function email() {
    return {
      name: 'email',
      args: []
    };
  },
  endsWith: function endsWith(args) {
    return {
      name: 'endsWith',
      args: args || []
    };
  },
  equals: function equals(args) {
    return {
      name: 'equals',
      args: args || []
    };
  },
  "in": function _in(args) {
    return {
      name: 'in',
      args: args || []
    };
  },
  includes: function includes(args) {
    return {
      name: 'includes',
      args: args || []
    };
  },
  integer: function integer() {
    return {
      name: 'integer',
      args: []
    };
  },
  "float": function _float() {
    return {
      name: 'float',
      args: []
    };
  },
  ip: function ip() {
    return {
      name: 'ip',
      args: []
    };
  },
  ipv4: function ipv4() {
    return {
      name: 'ipv4',
      args: []
    };
  },
  ipv6: function ipv6() {
    return {
      name: 'ipv6',
      args: []
    };
  },
  json: function json() {
    return {
      name: 'json',
      args: []
    };
  },
  max: function max(args) {
    return {
      name: 'max',
      args: args || []
    };
  },
  min: function min(args) {
    return {
      name: 'min',
      args: args || []
    };
  },
  notEquals: function notEquals(args) {
    return {
      name: 'notEquals',
      args: args || []
    };
  },
  notIn: function notIn(args) {
    return {
      name: 'notIn',
      args: args || []
    };
  },
  number: function number() {
    return {
      name: 'number',
      args: []
    };
  },
  object: function object() {
    return {
      name: 'object',
      args: []
    };
  },
  range: function range(args) {
    return {
      name: 'range',
      args: args || []
    };
  },
  regex: function regex(args) {
    return {
      name: 'regex',
      args: args || []
    };
  },
  required: function required() {
    return {
      name: 'required',
      args: []
    };
  },
  requiredIf: function requiredIf(args) {
    return {
      name: 'requiredIf',
      args: args || []
    };
  },
  requiredWhen: function requiredWhen(args) {
    return {
      name: 'requiredWhen',
      args: args || []
    };
  },
  requiredWithAll: function requiredWithAll(args) {
    return {
      name: 'requiredWithAll',
      args: args || []
    };
  },
  requiredWithAny: function requiredWithAny(args) {
    return {
      name: 'requiredWithAny',
      args: args || []
    };
  },
  requiredWithoutAll: function requiredWithoutAll(args) {
    return {
      name: 'requiredWithoutAll',
      args: args || []
    };
  },
  requiredWithoutAny: function requiredWithoutAny(args) {
    return {
      name: 'requiredWithoutAny',
      args: args || []
    };
  },
  same: function same(args) {
    return {
      name: 'same',
      args: args || []
    };
  },
  startsWith: function startsWith(args) {
    return {
      name: 'startsWith',
      args: args || []
    };
  },
  string: function string() {
    return {
      name: 'string',
      args: []
    };
  },
  subset: function subset(args) {
    return {
      name: 'subset',
      args: args || []
    };
  },
  under: function under(args) {
    return {
      name: 'under',
      args: args || []
    };
  },
  url: function url() {
    return {
      name: 'url',
      args: []
    };
  },
  after: function after(args) {
    return {
      name: 'after',
      args: args || []
    };
  },
  before: function before(args) {
    return {
      name: 'before',
      args: args || []
    };
  },
  date: function date() {
    return {
      name: 'date',
      args: []
    };
  },
  dateFormat: function dateFormat(args) {
    return {
      name: 'dateFormat',
      args: args || []
    };
  },
  beforeOffsetOf: function beforeOffsetOf(args) {
    return {
      name: 'beforeOffsetOf',
      args: args || []
    };
  },
  afterOffsetOf: function afterOffsetOf(args) {
    return {
      name: 'afterOffsetOf',
      args: args || []
    };
  }
};