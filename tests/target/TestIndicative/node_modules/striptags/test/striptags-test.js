'use strict';
/* global describe, it */

var assert = require('assert');

var fs = require('fs');

var vm = require('vm');

var striptags = require('../');

describe('striptags', function () {
  describe('#module', function () {
    var path = require.resolve('../');

    var src = fs.readFileSync(path);
    var script = new vm.Script(src);
    it('should define a Node module', function () {
      var module = {
        exports: {}
      };
      script.runInNewContext({
        module: module
      });
      assert.equal(module.exports.toString(), striptags.toString());
    });
    it('should define an AMD module', function () {
      var module = null;

      var define = function define(module_factory) {
        module = module_factory();
      };

      define.amd = true;
      script.runInNewContext({
        define: define
      });
      assert.equal(module.toString(), striptags.toString());
    });
    it('should define a browser global', function () {
      var global = {};
      script.runInNewContext(global);
      assert.notEqual(global.striptags, null);
    });
  });
  describe('with no optional parameters', function () {
    it('should not strip invalid tags', function () {
      var text = 'lorem ipsum < a> < div>';
      assert.equal(striptags(text), text);
    });
    it('should remove simple HTML tags', function () {
      var html = '<a href="">lorem <strong>ipsum</strong></a>',
          text = 'lorem ipsum';
      assert.equal(striptags(html), text);
    });
    it('should remove comments', function () {
      var html = '<!-- lorem -- ipsum -- --> dolor sit amet',
          text = ' dolor sit amet';
      assert.equal(striptags(html), text);
    });
    it('should strip tags within comments', function () {
      var html = '<!-- <strong>lorem ipsum</strong> --> dolor sit',
          text = ' dolor sit';
      assert.equal(striptags(html), text);
    });
    it('should not fail with nested quotes', function () {
      var html = '<article attr="foo \'bar\'">lorem</article> ipsum',
          text = 'lorem ipsum';
      assert.equal(striptags(html), text);
    });
  });
  describe('#allowed_tags', function () {
    it('should parse a string', function () {
      var html = '<strong>lorem ipsum</strong>',
          allowed_tags = '<strong>';
      assert.equal(striptags(html, allowed_tags), html);
    });
    it('should take an array', function () {
      var html = '<strong>lorem <em>ipsum</em></strong>',
          allowed_tags = ['strong', 'em'];
      assert.equal(striptags(html, allowed_tags), html);
    });
  });
  describe('with allowable_tags parameter', function () {
    it('should leave attributes when allowing HTML', function () {
      var html = '<a href="https://example.com">lorem ipsum</a>',
          allowed_tags = '<a>';
      assert.equal(striptags(html, allowed_tags), html);
    });
    it('should strip extra < within tags', function () {
      var html = '<div<>>lorem ipsum</div>',
          text = '<div>lorem ipsum</div>',
          allowed_tags = '<div>';
      assert.equal(striptags(html, allowed_tags), text);
    });
    it('should strip <> within quotes', function () {
      var html = '<a href="<script>">lorem ipsum</a>',
          text = '<a href="script">lorem ipsum</a>',
          allowed_tags = '<a>';
      assert.equal(striptags(html, allowed_tags), text);
    });
  });
  describe('with tag_replacement parameter', function () {
    it('should replace tags with that parameter', function () {
      var html = 'Line One<br>Line Two',
          allowed_tags = [],
          tag_replacement = '\n',
          text = 'Line One\nLine Two';
      assert.equal(striptags(html, allowed_tags, tag_replacement), text);
    });
  });
  describe('#streaming_mode', function () {
    it('should strip streamed HTML', function () {
      var striptags_stream = striptags.init_streaming_mode();
      var part_one = striptags_stream('lorem ipsum <stro');
      var part_two = striptags_stream('ng>dolor sit <');
      var part_three = striptags_stream(' amet');
      assert.equal(part_one, 'lorem ipsum ');
      assert.equal(part_two, 'dolor sit ');
      assert.equal(part_three, '< amet');
    });
    it('should work with allowable_tags', function () {
      var striptags_stream = striptags.init_streaming_mode(['strong']);
      var part_one = striptags_stream('lorem ipsum <stro');
      var part_two = striptags_stream('ng>dolor sit <');
      var part_three = striptags_stream(' amet');
      assert.equal(part_one, 'lorem ipsum ');
      assert.equal(part_two, '<strong>dolor sit ');
      assert.equal(part_three, '< amet');
    });
  });
});