"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.joi = t() : e.joi = t();
}(window, function () {
  return function (e) {
    var t = {};

    function r(s) {
      if (t[s]) return t[s].exports;
      var n = t[s] = {
        i: s,
        l: !1,
        exports: {}
      };
      return e[s].call(n.exports, n, n.exports, r), n.l = !0, n.exports;
    }

    return r.m = e, r.c = t, r.d = function (e, t, s) {
      r.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: s
      });
    }, r.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, r.t = function (e, t) {
      if (1 & t && (e = r(e)), 8 & t) return e;
      if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
      var s = Object.create(null);
      if (r.r(s), Object.defineProperty(s, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e) for (var n in e) {
        r.d(s, n, function (t) {
          return e[t];
        }.bind(null, n));
      }
      return s;
    }, r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e["default"];
      } : function () {
        return e;
      };
      return r.d(t, "a", t), t;
    }, r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, r.p = "", r(r.s = 12);
  }([function (e, t, r) {
    "use strict";

    var s = r(13);

    e.exports = function (e) {
      if (!e) {
        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) {
          r[n - 1] = arguments[n];
        }

        if (1 === r.length && r[0] instanceof Error) throw r[0];
        throw new s(r);
      }
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(13),
        o = r(28);
    var a, i;
    var l = {
      isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/
    };
    t.version = o.version, t.defaults = {
      abortEarly: !0,
      allowUnknown: !1,
      cache: !0,
      context: null,
      convert: !0,
      dateFormat: "iso",
      errors: {
        escapeHtml: !1,
        label: "path",
        language: null,
        render: !0,
        stack: !1,
        wrapArrays: !0
      },
      externals: !0,
      messages: {},
      nonEnumerables: !1,
      noDefaults: !1,
      presence: "optional",
      skipFunctions: !1,
      stripUnknown: !1,
      warnings: !1
    }, t.symbols = {
      any: Symbol["for"]("@hapi/joi/schema"),
      arraySingle: Symbol("arraySingle"),
      deepDefault: Symbol("deepDefault"),
      literal: Symbol("literal"),
      override: Symbol("override"),
      prefs: Symbol("prefs"),
      ref: Symbol("ref"),
      values: Symbol("values"),
      template: Symbol("template")
    }, t.assertOptions = function (e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Options";
      s(e && "object" == _typeof(e) && !Array.isArray(e), "Options must be of type object");
      var n = Object.keys(e).filter(function (e) {
        return !t.includes(e);
      });
      s(0 === n.length, "".concat(r, " contain unknown keys: ").concat(n));
    }, t.checkPreferences = function (e) {
      var t = (i = i || r(16)).preferences.validate(e);
      if (t.error) throw new n([t.error.details[0].message]);
    }, t.compare = function (e, t, r) {
      switch (r) {
        case "=":
          return e === t;

        case ">":
          return e > t;

        case "<":
          return e < t;

        case ">=":
          return e >= t;

        case "<=":
          return e <= t;
      }
    }, t["default"] = function (e, t) {
      return void 0 === e ? t : e;
    }, t.isIsoDate = function (e) {
      return l.isoDate.test(e);
    }, t.isNumber = function (e) {
      return "number" == typeof e && !isNaN(e);
    }, t.isResolvable = function (e) {
      return !!e && (e[t.symbols.ref] || e[t.symbols.template]);
    }, t.isSchema = function (e) {
      var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      var n = e && e[t.symbols.any];
      return !!n && (s(r.legacy || n.version === t.version, "Cannot mix different versions of joi schemas"), !0);
    }, t.isValues = function (e) {
      return e[t.symbols.values];
    }, t.limit = function (e) {
      return Number.isSafeInteger(e) && e >= 0;
    }, t.preferences = function (e, s) {
      a = a || r(9), e = e || {}, s = s || {};
      var n = Object.assign({}, e, s);
      return s.errors && e.errors && (n.errors = Object.assign({}, e.errors, s.errors)), s.messages && (n.messages = a.compile(s.messages, e.messages)), delete n[t.symbols.prefs], n;
    }, t.tryWithPath = function (e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

      try {
        return e();
      } catch (e) {
        throw void 0 !== e.path ? e.path = t + "." + e.path : e.path = t, r.append && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
      }
    }, t.validateArg = function (e, r, s) {
      var n = s.assert,
          o = s.message;

      if (t.isSchema(n)) {
        var _t = n.validate(e);

        if (!_t.error) return;
        return _t.error.message;
      }

      if (!n(e)) return r ? "".concat(r, " ").concat(o) : o;
    }, t.verifyFlat = function (e, t) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = e[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _r = _step.value;
          s(!Array.isArray(_r), "Method no longer accepts array arguments:", t);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(14),
        n = r(10),
        o = {
      needsProtoHack: new Set([s.set, s.map, s.weakSet, s.weakMap])
    };
    e.exports = o.clone = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
      if ("object" != _typeof(e) || null === e) return e;
      var a = o.clone,
          i = r;

      if (t.shallow) {
        if (!0 !== t.shallow) return o.cloneWithShallow(e, t);

        a = function a(e) {
          return e;
        };
      } else {
        var _t2 = (i = i || new Map()).get(e);

        if (_t2) return _t2;
      }

      var l = s.getInternalProto(e);
      var c;

      switch (l) {
        case s.buffer:
          return !1;

        case s.date:
          return new Date(e.getTime());

        case s.regex:
          return new RegExp(e);

        case s.array:
          c = [];
          break;

        default:
          if (!1 !== t.prototype) {
            var _t3 = Object.getPrototypeOf(e);

            if (_t3 && _t3.isImmutable) return e;
            o.needsProtoHack.has(l) ? (c = new _t3.constructor(), _t3 !== l && Object.setPrototypeOf(c, _t3)) : c = Object.create(_t3);
          } else c = o.needsProtoHack.has(l) ? new l.constructor() : {};

      }

      if (i && i.set(e, c), l === s.set) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = e[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _r2 = _step2.value;
            c.add(a(_r2, t, i));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } else if (l === s.map) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = e[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                _r3 = _step3$value[0],
                _s = _step3$value[1];

            c.set(_r3, a(_s, t, i));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      var u = n.keys(e, t);

      for (var _r4 = 0; _r4 < u.length; ++_r4) {
        var _n2 = u[_r4];
        if (l === s.array && "length" === _n2) continue;

        var _o = Object.getOwnPropertyDescriptor(e, _n2);

        _o && (_o.get || _o.set) ? Object.defineProperty(c, _n2, _o) : Object.defineProperty(c, _n2, {
          enumerable: !_o || _o.enumerable,
          writable: !0,
          configurable: !0,
          value: a(e[_n2], t, i)
        });
      }

      return l === s.array && (c.length = e.length), c;
    }, o.cloneWithShallow = function (e, t) {
      var r = t.shallow;
      (t = Object.assign({}, t)).shallow = !1;
      var s = n.store(e, r),
          a = o.clone(e, t);
      return n.restore(a, e, s), a;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(32),
        o = r(1),
        a = r(9);
    e.exports = n.extend({
      type: "any",
      flags: {
        only: {
          "default": !1
        }
      },
      terms: {
        alterations: {
          init: null
        },
        examples: {
          init: null
        },
        externals: {
          init: null
        },
        metas: {
          init: []
        },
        notes: {
          init: []
        },
        shared: {
          init: null
        },
        tags: {
          init: []
        },
        whens: {
          init: null
        }
      },
      rules: {
        custom: {
          method: function method(e, t) {
            return s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this.$_addRule({
              name: "custom",
              args: {
                method: e,
                description: t
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.method;

            try {
              return s(e, t);
            } catch (e) {
              return t.error("any.custom", {
                error: e
              });
            }
          },
          args: ["method", "description"],
          multi: !0
        },
        messages: {
          method: function method(e) {
            return this.prefs({
              messages: e
            });
          }
        },
        shared: {
          method: function method(e) {
            s(o.isSchema(e) && e._flags.id, "Schema must be a schema with an id");
            var t = this.clone();
            return t.$_terms.shared = t.$_terms.shared || [], t.$_terms.shared.push(e), t.$_mutateRegister(e), t;
          }
        },
        warning: {
          method: function method(e, t) {
            return s(e && "string" == typeof e, "Invalid warning code"), this.$_addRule({
              name: "warning",
              args: {
                code: e,
                local: t
              },
              warn: !0
            });
          },
          validate: function validate(e, t, r) {
            var s = r.code,
                n = r.local;
            return t.error(s, n);
          },
          args: ["code", "local"],
          multi: !0
        }
      },
      modifiers: {
        keep: function keep(e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          e.keep = t;
        },
        message: function message(e, t) {
          e.message = a.compile(t);
        },
        warn: function warn(e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          e.warn = t;
        }
      },
      manifest: {
        build: function build(e, t) {
          for (var _r5 in t) {
            var _s2 = t[_r5];

            if (["examples", "externals", "metas", "notes", "tags"].includes(_r5)) {
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = _s2[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var _t4 = _step4.value;
                  e = e[_r5.slice(0, -1)](_t4);
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }
            } else if ("alterations" !== _r5) {
              if ("whens" !== _r5) {
                if ("shared" === _r5) {
                  var _iteratorNormalCompletion5 = true;
                  var _didIteratorError5 = false;
                  var _iteratorError5 = undefined;

                  try {
                    for (var _iterator5 = _s2[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                      var _t5 = _step5.value;
                      e = e.shared(_t5);
                    }
                  } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                        _iterator5["return"]();
                      }
                    } finally {
                      if (_didIteratorError5) {
                        throw _iteratorError5;
                      }
                    }
                  }
                }
              } else {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                  for (var _iterator6 = _s2[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var _t6 = _step6.value;
                    var _r6 = _t6.ref,
                        _s3 = _t6.is,
                        _n3 = _t6.not,
                        _o2 = _t6.then,
                        _a = _t6.otherwise,
                        i = _t6.concat;
                    e = i ? e.concat(i) : _r6 ? e.when(_r6, {
                      is: _s3,
                      not: _n3,
                      then: _o2,
                      otherwise: _a,
                      "switch": _t6["switch"],
                      "break": _t6["break"]
                    }) : e.when(_s3, {
                      then: _o2,
                      otherwise: _a,
                      "break": _t6["break"]
                    });
                  }
                } catch (err) {
                  _didIteratorError6 = true;
                  _iteratorError6 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                      _iterator6["return"]();
                    }
                  } finally {
                    if (_didIteratorError6) {
                      throw _iteratorError6;
                    }
                  }
                }
              }
            } else {
              var _t7 = {};
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = _s2[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var _e2 = _step7.value;
                  var _r7 = _e2.target,
                      _s4 = _e2.adjuster;
                  _t7[_r7] = _s4;
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }

              e = e.alter(_t7);
            }
          }

          return e;
        }
      },
      messages: {
        "any.custom": '"{{#label}}" failed custom validation because {{#error.message}}',
        "any.default": '"{{#label}}" threw an error when running default method',
        "any.failover": '"{{#label}}" threw an error when running failover method',
        "any.invalid": '"{{#label}}" contains an invalid value',
        "any.only": '"{{#label}}" must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',
        "any.ref": '"{{#label}}" {{#arg}} references "{{#ref}}" which {{#reason}}',
        "any.required": '"{{#label}}" is required',
        "any.unknown": '"{{#label}}" is not allowed'
      }
    });
  }, function (e, t, r) {
    "use strict";

    var s = r(2),
        n = r(1),
        o = r(6),
        a = {
      annotations: Symbol("annotations")
    };
    t.Report =
    /*#__PURE__*/
    function () {
      function _class(e, r, s, n, o, a, i) {
        _classCallCheck(this, _class);

        if (this.code = e, this.flags = n, this.messages = o, this.path = a.path, this.prefs = i, this.state = a, this.value = r, this.message = null, this.template = null, this.local = s || {}, this.local.label = t.label(this.flags, this.state, this.prefs, this.messages), void 0 === this.value || this.local.hasOwnProperty("value") || (this.local.value = this.value), this.path.length) {
          var _e3 = this.path[this.path.length - 1];
          "object" != _typeof(_e3) && (this.local.key = _e3);
        }
      }

      _createClass(_class, [{
        key: "_setTemplate",
        value: function _setTemplate(e) {
          if (this.template = e, !this.flags.label && 0 === this.path.length) {
            var _e4 = this._template(this.template, "root");

            _e4 && (this.local.label = _e4);
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          if (this.message) return this.message;
          var e = this.code;
          if (!this.prefs.errors.render) return this.code;

          var t = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);

          return void 0 === t ? 'Error code "'.concat(e, '" is not defined, your custom type is missing the correct messages definition') : (this.message = t.render(this.value, this.state, this.prefs, this.local, {
            errors: this.prefs.errors,
            messages: [this.prefs.messages, this.messages]
          }), this.prefs.errors.label || (this.message = this.message.replace(/^"" /, "").trim()), this.message);
        }
      }, {
        key: "_template",
        value: function _template(e, r) {
          return t.template(this.value, e, r || this.code, this.state, this.prefs);
        }
      }]);

      return _class;
    }(), t.path = function (e) {
      var t = "";
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = e[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var _r8 = _step8.value;
          "object" != _typeof(_r8) && ("string" == typeof _r8 ? (t && (t += "."), t += _r8) : t += "[".concat(_r8, "]"));
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return t;
    }, t.template = function (e, t, r, s, a) {
      if (!t) return;
      if (o.isTemplate(t)) return "root" !== r ? t : null;
      var i = a.errors.language;
      return n.isResolvable(i) && (i = i.resolve(e, s, a)), i && t[i] && void 0 !== t[i][r] ? t[i][r] : t[r];
    }, t.label = function (e, r, s, n) {
      if (e.label) return e.label;
      if (!s.errors.label) return "";
      var o = r.path;
      return "key" === s.errors.label && r.path.length > 1 && (o = r.path.slice(-1)), t.path(o) || t.template(null, s.messages, "root", r, s) || n && t.template(null, n, "root", r, s) || "value";
    }, t.process = function (e, r, s) {
      if (!e) return null;

      var _t$details = t.details(e),
          n = _t$details.override,
          o = _t$details.message,
          a = _t$details.details;

      if (n) return n;
      if (s.errors.stack) return new t.ValidationError(o, a, r);
      var i = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      var l = new t.ValidationError(o, a, r);
      return Error.stackTraceLimit = i, l;
    }, t.details = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          r = [];
      var s = [];
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = e[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var _n4 = _step9.value;

          if (_n4 instanceof Error) {
            if (!1 !== t.override) return {
              override: _n4
            };

            var _e6 = _n4.toString();

            r.push(_e6), s.push({
              message: _e6,
              type: "override",
              context: {
                error: _n4
              }
            });
            continue;
          }

          var _e5 = _n4.toString();

          r.push(_e5), s.push({
            message: _e5,
            path: _n4.path.filter(function (e) {
              return "object" != _typeof(e);
            }),
            type: _n4.code,
            context: _n4.local
          });
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
            _iterator9["return"]();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      return r.length > 1 && (r = _toConsumableArray(new Set(r))), {
        message: r.join(". "),
        details: s
      };
    }, t.ValidationError =
    /*#__PURE__*/
    function (_Error) {
      _inherits(_class2, _Error);

      function _class2(e, t, r) {
        var _this;

        _classCallCheck(this, _class2);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, e)), _this._original = r, _this.details = t;
        return _this;
      }

      _createClass(_class2, [{
        key: "annotate",
        value: function annotate(e) {
          if (!this._original || "object" != _typeof(this._original)) return this.details[0].message;
          var t = e ? "" : "[31m",
              r = e ? "" : "[41m",
              o = e ? "" : "[0m",
              i = s(this._original);

          for (var _e7 = this.details.length - 1; _e7 >= 0; --_e7) {
            var _t8 = _e7 + 1,
                _r9 = this.details[_e7],
                _s5 = _r9.path;

            var _o3 = i;

            for (var _e8 = 0;; ++_e8) {
              var _i2 = _s5[_e8];

              if (n.isSchema(_o3) && (_o3 = _o3.clone()), !(_e8 + 1 < _s5.length && "string" != typeof _o3[_i2])) {
                var _e9 = _o3[a.annotations] || {
                  errors: {},
                  missing: {}
                };

                _o3[a.annotations] = _e9;

                var _s6 = _i2 || _r9.context.key;

                void 0 !== _o3[_i2] ? (_e9.errors[_s6] = _e9.errors[_s6] || [], _e9.errors[_s6].push(_t8)) : _e9.missing[_s6] = _t8;
                break;
              }

              _o3 = _o3[_i2];
            }
          }

          var l = /_\$key\$_([, \d]+)_\$end\$_"/g,
              c = /"_\$miss\$_([^|]+)\|(\d+)_\$end\$_": "__missing__"/g,
              u = /\s*"_\$idx\$_([, \d]+)_\$end\$_",?\n(.*)/g,
              f = /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)]"/g;
          var h = a.safeStringify(i, 2).replace(l, function (e, r) {
            return '" '.concat(t, "[").concat(r, "]").concat(o);
          }).replace(c, function (e, s, n) {
            return "".concat(r, '"').concat(s, '"').concat(o).concat(t, " [").concat(n, "]: -- missing --").concat(o);
          }).replace(u, function (e, r, s) {
            return "\n".concat(s, " ").concat(t, "[").concat(r, "]").concat(o);
          }).replace(f, function (e, t) {
            return t;
          });
          h = "".concat(h, "\n").concat(t);

          for (var _e10 = 0; _e10 < this.details.length; ++_e10) {
            var _t9 = _e10 + 1;

            h = "".concat(h, "\n[").concat(_t9, "] ").concat(this.details[_e10].message);
          }

          return h += o;
        }
      }]);

      return _class2;
    }(_wrapNativeSuper(Error)), t.ValidationError.prototype.isJoi = !0, t.ValidationError.prototype.name = "ValidationError", a.safeStringify = function (e, t) {
      return JSON.stringify(e, a.serializer(), t);
    }, a.serializer = function () {
      var e = [],
          t = [],
          r = function r(_r10, s) {
        return t[0] === s ? "[Circular ~]" : "[Circular ~." + e.slice(0, t.indexOf(s)).join(".") + "]";
      };

      return function (s, n) {
        if (t.length > 0) {
          var _o4 = t.indexOf(this);

          ~_o4 ? (t.length = _o4 + 1, e.length = _o4 + 1, e[_o4] = s) : (t.push(this), e.push(s)), ~t.indexOf(n) && (n = r.call(this, s, n));
        } else t.push(n);

        if (n) {
          var _e11 = n[a.annotations];

          if (_e11) {
            if (Array.isArray(n)) {
              var _t10 = [];

              for (var _r11 = 0; _r11 < n.length; ++_r11) {
                _e11.errors[_r11] && _t10.push("_$idx$_".concat(_e11.errors[_r11].sort().join(", "), "_$end$_")), _t10.push(n[_r11]);
              }

              n = _t10;
            } else {
              for (var _t11 in _e11.errors) {
                n["".concat(_t11, "_$key$_").concat(_e11.errors[_t11].sort().join(", "), "_$end$_")] = n[_t11], n[_t11] = void 0;
              }

              for (var _t12 in _e11.missing) {
                n["_$miss$_".concat(_t12, "|").concat(_e11.missing[_t12], "_$end$_")] = "__missing__";
              }
            }

            return n;
          }
        }

        return n === 1 / 0 || n === -1 / 0 || Number.isNaN(n) || "function" == typeof n || "symbol" == _typeof(n) ? "[" + n.toString() + "]" : n;
      };
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(8),
        a = r(1);
    var i;
    var l = {
      symbol: Symbol("ref"),
      defaults: {
        adjust: null,
        "in": !1,
        iterables: null,
        map: null,
        separator: ".",
        type: "value"
      }
    };
    t.create = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      s("string" == typeof e, "Invalid reference key:", e), a.assertOptions(t, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "separator"]), s(!t.prefix || "object" == _typeof(t.prefix), "options.prefix must be of type object");
      var r = Object.assign({}, l.defaults, t);
      delete r.prefix;
      var n = r.separator,
          o = l.context(e, n, t.prefix);
      if (r.type = o.type, e = o.key, "value" === r.type) if (o.root && (s(!n || e[0] !== n, "Cannot specify relative path with root prefix"), r.ancestor = "root", e || (e = null)), n && n === e) e = null, r.ancestor = 0;else if (void 0 !== r.ancestor) s(!n || !e || e[0] !== n, "Cannot combine prefix with ancestor option");else {
        var _l$ancestor = l.ancestor(e, n),
            _l$ancestor2 = _slicedToArray(_l$ancestor, 2),
            _t13 = _l$ancestor2[0],
            _s7 = _l$ancestor2[1];

        _s7 && "" === (e = e.slice(_s7)) && (e = null), r.ancestor = _t13;
      }
      return r.path = n ? null === e ? [] : e.split(n) : [e], new l.Ref(r);
    }, t["in"] = function (e) {
      var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return t.create(e, Object.assign({}, r, {
        "in": !0
      }));
    }, t.isRef = function (e) {
      return !!e && !!e[a.symbols.ref];
    }, l.Ref =
    /*#__PURE__*/
    function () {
      function _class3(e) {
        _classCallCheck(this, _class3);

        s("object" == _typeof(e), "Invalid reference construction"), a.assertOptions(e, ["adjust", "ancestor", "in", "iterables", "map", "path", "separator", "type", "depth", "key", "root", "display"]), s([!1, void 0].includes(e.separator) || "string" == typeof e.separator && 1 === e.separator.length, "Invalid separator"), s(!e.adjust || "function" == typeof e.adjust, "options.adjust must be a function"), s(!e.map || Array.isArray(e.map), "options.map must be an array"), s(!e.map || !e.adjust, "Cannot set both map and adjust options"), Object.assign(this, l.defaults, e), s("value" === this.type || void 0 === this.ancestor, "Non-value references cannot reference ancestors"), Array.isArray(this.map) && (this.map = new Map(this.map)), this.depth = this.path.length, this.key = this.path.length ? this.path.join(this.separator) : null, this.root = this.path[0], this.updateDisplay();
      }

      _createClass(_class3, [{
        key: "resolve",
        value: function resolve(e, t, r, n) {
          var o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};
          return s(!this["in"] || o["in"], "Invalid in() reference usage"), "global" === this.type ? this._resolve(r.context, t, o) : "local" === this.type ? this._resolve(n, t, o) : this.ancestor ? "root" === this.ancestor ? this._resolve(t.ancestors[t.ancestors.length - 1], t, o) : (s(this.ancestor <= t.ancestors.length, "Invalid reference exceeds the schema root:", this.display), this._resolve(t.ancestors[this.ancestor - 1], t, o)) : this._resolve(e, t, o);
        }
      }, {
        key: "_resolve",
        value: function _resolve(e, t, r) {
          var s;

          if ("value" === this.type && t.mainstay.shadow && !1 !== r.shadow && (s = t.mainstay.shadow.get(this.absolute(t))), void 0 === s && (s = o(e, this.path, {
            iterables: this.iterables,
            functions: !0
          })), this.adjust && (s = this.adjust(s)), this.map) {
            var _e12 = this.map.get(s);

            void 0 !== _e12 && (s = _e12);
          }

          return t.mainstay && t.mainstay.tracer.resolve(t, this, s), s;
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.display;
        }
      }, {
        key: "absolute",
        value: function absolute(e) {
          return [].concat(_toConsumableArray(e.path.slice(0, -this.ancestor)), _toConsumableArray(this.path));
        }
      }, {
        key: "clone",
        value: function clone() {
          return new l.Ref(this);
        }
      }, {
        key: "describe",
        value: function describe() {
          var e = {
            path: this.path
          };
          "value" !== this.type && (e.type = this.type), "." !== this.separator && (e.separator = this.separator), "value" === this.type && 1 !== this.ancestor && (e.ancestor = this.ancestor), this.map && (e.map = _toConsumableArray(this.map));

          for (var _i3 = 0, _arr2 = ["adjust", "iterables"]; _i3 < _arr2.length; _i3++) {
            var _t14 = _arr2[_i3];
            null !== this[_t14] && (e[_t14] = this[_t14]);
          }

          return !1 !== this["in"] && (e["in"] = !0), {
            ref: e
          };
        }
      }, {
        key: "updateDisplay",
        value: function updateDisplay() {
          var e = null !== this.key ? this.key : "";
          if ("value" !== this.type) return void (this.display = "ref:".concat(this.type, ":").concat(e));
          if (!this.separator) return void (this.display = "ref:".concat(e));
          if (!this.ancestor) return void (this.display = "ref:".concat(this.separator).concat(e));
          if ("root" === this.ancestor) return void (this.display = "ref:root:".concat(e));
          if (1 === this.ancestor) return void (this.display = "ref:".concat(e || ".."));
          var t = new Array(this.ancestor + 1).fill(this.separator).join("");
          this.display = "ref:".concat(t).concat(e || "");
        }
      }]);

      return _class3;
    }(), l.Ref.prototype[a.symbols.ref] = !0, t.build = function (e) {
      return "value" === (e = Object.assign({}, l.defaults, e)).type && void 0 === e.ancestor && (e.ancestor = 1), new l.Ref(e);
    }, l.context = function (e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      e = e.trim();
      var s = void 0 === r.global ? "$" : r.global;
      if (s !== t && e.startsWith(s)) return {
        key: e.slice(s.length),
        type: "global"
      };
      var n = void 0 === r.local ? "#" : r.local;
      if (n !== t && e.startsWith(n)) return {
        key: e.slice(n.length),
        type: "local"
      };
      var o = void 0 === r.root ? "/" : r.root;
      return o !== t && e.startsWith(o) ? {
        key: e.slice(o.length),
        type: "value",
        root: !0
      } : {
        key: e,
        type: "value"
      };
    }, l.ancestor = function (e, t) {
      if (!t) return [1, 0];
      if (e[0] !== t) return [1, 0];
      if (e[1] !== t) return [0, 1];
      var r = 2;

      for (; e[r] === t;) {
        ++r;
      }

      return [r - 1, r];
    }, t.toSibling = 0, t.toParent = 1, t.Manager =
    /*#__PURE__*/
    function () {
      function _class4() {
        _classCallCheck(this, _class4);

        this.refs = [];
      }

      _createClass(_class4, [{
        key: "register",
        value: function register(e, s) {
          if (e) if (s = void 0 === s ? t.toParent : s, Array.isArray(e)) {
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = e[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var _t15 = _step10.value;
                this.register(_t15, s);
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                  _iterator10["return"]();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          } else if (a.isSchema(e)) {
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
              for (var _iterator11 = e._refs.refs[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                var _t16 = _step11.value;
                _t16.ancestor - s >= 0 && this.refs.push({
                  ancestor: _t16.ancestor - s,
                  root: _t16.root
                });
              }
            } catch (err) {
              _didIteratorError11 = true;
              _iteratorError11 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                  _iterator11["return"]();
                }
              } finally {
                if (_didIteratorError11) {
                  throw _iteratorError11;
                }
              }
            }
          } else t.isRef(e) && "value" === e.type && e.ancestor - s >= 0 && this.refs.push({
            ancestor: e.ancestor - s,
            root: e.root
          }), (i = i || r(6)).isTemplate(e) && this.register(e.refs(), s);
        }
      }, {
        key: "clone",
        value: function clone() {
          var e = new t.Manager();
          return e.refs = n(this.refs), e;
        }
      }, {
        key: "reset",
        value: function reset() {
          this.refs = [];
        }
      }, {
        key: "roots",
        value: function roots() {
          return this.refs.filter(function (e) {
            return !e.ancestor;
          }).map(function (e) {
            return e.root;
          });
        }
      }, {
        key: "length",
        get: function get() {
          return this.refs.length;
        }
      }]);

      return _class4;
    }();
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(29),
        a = r(30),
        i = r(1),
        l = r(4),
        c = r(5),
        u = {
      symbol: Symbol("template"),
      opens: new Array(1e3).join("\0"),
      closes: new Array(1e3).join(""),
      dateFormat: {
        date: Date.prototype.toDateString,
        iso: Date.prototype.toISOString,
        string: Date.prototype.toString,
        time: Date.prototype.toTimeString,
        utc: Date.prototype.toUTCString
      }
    };
    e.exports = u.Template =
    /*#__PURE__*/
    function () {
      function _class5(e, t) {
        _classCallCheck(this, _class5);

        s("string" == typeof e, "Template source must be a string"), s(!e.includes("\0") && !e.includes(""), "Template source cannot contain reserved control characters"), this.source = e, this.rendered = e, this._template = null, this._settings = n(t), this._parse();
      }

      _createClass(_class5, [{
        key: "_parse",
        value: function _parse() {
          if (!this.source.includes("{")) return;
          var e = u.encode(this.source),
              t = u.split(e);
          var r = !1;
          var s = [],
              n = t.shift();
          n && s.push(n);
          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = t[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var _e13 = _step12.value;

              var _t17 = "{" !== _e13[0],
                  _n5 = _t17 ? "}" : "}}",
                  _o5 = _e13.indexOf(_n5);

              if (-1 === _o5 || "{" === _e13[1]) {
                s.push("{".concat(u.decode(_e13)));
                continue;
              }

              var _a2 = _e13.slice(_t17 ? 0 : 1, _o5),
                  _i4 = this._ref(u.decode(_a2), _t17);

              s.push(_i4), "string" != typeof _i4 && (r = !0);

              var _l = _e13.slice(_o5 + _n5.length);

              _l && s.push(u.decode(_l));
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                _iterator12["return"]();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }

          r ? this._template = s : this.rendered = s.join("");
        }
      }, {
        key: "describe",
        value: function describe() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          if (!this._settings && e.compact) return this.source;
          var t = {
            template: this.source
          };
          return this._settings && (t.options = this._settings), t;
        }
      }, {
        key: "isDynamic",
        value: function isDynamic() {
          return !!this._template;
        }
      }, {
        key: "refs",
        value: function refs() {
          if (!this._template) return;
          var e = [];
          var _iteratorNormalCompletion13 = true;
          var _didIteratorError13 = false;
          var _iteratorError13 = undefined;

          try {
            for (var _iterator13 = this._template[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
              var _t18 = _step13.value;
              "string" != typeof _t18 && e.push.apply(e, _toConsumableArray(_t18.refs));
            }
          } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                _iterator13["return"]();
              }
            } finally {
              if (_didIteratorError13) {
                throw _iteratorError13;
              }
            }
          }

          return e;
        }
      }, {
        key: "resolve",
        value: function resolve(e, t, r, s) {
          return this._template && 1 === this._template.length ? this._part(this._template[0], e, t, r, s, {}) : this.render(e, t, r, s);
        }
      }, {
        key: "_part",
        value: function _part(e) {
          var _e$ref;

          for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++) {
            r[s - 1] = arguments[s];
          }

          return e.ref ? (_e$ref = e.ref).resolve.apply(_e$ref, r) : e.formula.evaluate(r);
        }
      }, {
        key: "render",
        value: function render(e, t, r, s) {
          var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};
          if (!this.isDynamic()) return this.rendered;
          var a = [];
          var _iteratorNormalCompletion14 = true;
          var _didIteratorError14 = false;
          var _iteratorError14 = undefined;

          try {
            for (var _iterator14 = this._template[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
              var _i5 = _step14.value;
              if ("string" == typeof _i5) a.push(_i5);else {
                var _l2 = this._part(_i5, e, t, r, s, n),
                    _c = u.stringify(_l2, r, n.errors);

                if (void 0 !== _c) {
                  var _e14 = _i5.raw || !1 === (n.errors && n.errors.escapeHtml) ? _c : o(_c);

                  a.push(_e14);
                }
              }
            }
          } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                _iterator14["return"]();
              }
            } finally {
              if (_didIteratorError14) {
                throw _iteratorError14;
              }
            }
          }

          return a.join("");
        }
      }, {
        key: "_ref",
        value: function _ref(e, t) {
          var _this2 = this;

          var r = [],
              s = function s(e) {
            var t = c.create(e, _this2._settings);
            return r.push(t), function (e) {
              return t.resolve.apply(t, _toConsumableArray(e));
            };
          };

          try {
            var n = new a(e, {
              reference: s,
              functions: u.functions,
              constants: u.constants
            });
          } catch (t) {
            throw t.message = 'Invalid template variable "'.concat(e, '" fails due to: ').concat(t.message), t;
          }

          return n.single ? "reference" === n.single.type ? {
            ref: r[0],
            raw: t,
            refs: r
          } : u.stringify(n.single.value) : {
            formula: n,
            raw: t,
            refs: r
          };
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.source;
        }
      }], [{
        key: "date",
        value: function date(e, t) {
          return u.dateFormat[t.dateFormat].call(e);
        }
      }, {
        key: "build",
        value: function build(e) {
          return new u.Template(e.template, e.options);
        }
      }, {
        key: "isTemplate",
        value: function isTemplate(e) {
          return !!e && !!e[i.symbols.template];
        }
      }]);

      return _class5;
    }(), u.Template.prototype[i.symbols.template] = !0, u.Template.prototype.isImmutable = !0, u.encode = function (e) {
      return e.replace(/\\(\{+)/g, function (e, t) {
        return u.opens.slice(0, t.length);
      }).replace(/\\(\}+)/g, function (e, t) {
        return u.closes.slice(0, t.length);
      });
    }, u.decode = function (e) {
      return e.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
    }, u.split = function (e) {
      var t = [];
      var r = "";

      for (var _s8 = 0; _s8 < e.length; ++_s8) {
        var _n6 = e[_s8];

        if ("{" === _n6) {
          var _n7 = "";

          for (; _s8 + 1 < e.length && "{" === e[_s8 + 1];) {
            _n7 += "{", ++_s8;
          }

          t.push(r), r = _n7;
        } else r += _n6;
      }

      return t.push(r), t;
    }, u.stringify = function (e, t, r) {
      var s = _typeof(e);

      if (null === e) return "null";
      if ("string" === s) return e;
      if ("number" === s || "function" === s || "symbol" === s) return e.toString();
      if ("object" !== s) return JSON.stringify(e);
      if (e instanceof Date) return u.Template.date(e, t);

      if (e instanceof Map) {
        var _t19 = [];
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
          for (var _iterator15 = e.entries()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
            var _step15$value = _slicedToArray(_step15.value, 2),
                _r12 = _step15$value[0],
                _s9 = _step15$value[1];

            _t19.push("".concat(_r12.toString(), " -> ").concat(_s9.toString()));
          }
        } catch (err) {
          _didIteratorError15 = true;
          _iteratorError15 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
              _iterator15["return"]();
            }
          } finally {
            if (_didIteratorError15) {
              throw _iteratorError15;
            }
          }
        }

        e = _t19;
      }

      if (!Array.isArray(e)) return e.toString();
      var n = "";
      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = e[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var _s10 = _step16.value;
          n = n + (n.length ? ", " : "") + u.stringify(_s10, t, r);
        }
      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
            _iterator16["return"]();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }

      return r.wrapArrays ? "[" + n + "]" : n;
    }, u.constants = {
      "true": !0,
      "false": !1,
      "null": null,
      second: 1e3,
      minute: 6e4,
      hour: 36e5,
      day: 864e5
    }, u.functions = {
      "if": function _if(e, t, r) {
        return e ? t : r;
      },
      msg: function msg(e) {
        var _this3 = _slicedToArray(this, 5),
            t = _this3[0],
            r = _this3[1],
            s = _this3[2],
            n = _this3[3],
            o = _this3[4],
            a = o.messages;

        if (!a) return "";
        var i = l.template(t, a[0], e, r, s) || l.template(t, a[1], e, r, s);
        return i ? i.render(t, r, s, n, o) : "";
      },
      number: function number(e) {
        return "number" == typeof e ? e : "string" == typeof e ? parseFloat(e) : "boolean" == typeof e ? e ? 1 : 0 : e instanceof Date ? e.getTime() : null;
      }
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(1),
        o = r(5),
        a = {};
    t.schema = function (e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      n.assertOptions(r, ["appendPath", "override"]);

      try {
        return a.schema(e, t, r);
      } catch (e) {
        throw r.appendPath && void 0 !== e.path && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
      }
    }, a.schema = function (e, t, r) {
      s(void 0 !== t, "Invalid undefined schema"), Array.isArray(t) && (s(t.length, "Invalid empty array schema"), 1 === t.length && (t = t[0]));

      var o = function o(t) {
        for (var s = arguments.length, n = new Array(s > 1 ? s - 1 : 0), o = 1; o < s; o++) {
          n[o - 1] = arguments[o];
        }

        return !1 !== r.override ? t.valid.apply(t, [e.override].concat(n)) : t.valid.apply(t, n);
      };

      if (a.simple(t)) return o(e, t);
      if ("function" == typeof t) return e.custom(t);
      if (s("object" == _typeof(t), "Invalid schema content:", _typeof(t)), n.isResolvable(t)) return o(e, t);
      if (n.isSchema(t)) return t;

      if (Array.isArray(t)) {
        var _iteratorNormalCompletion17 = true;
        var _didIteratorError17 = false;
        var _iteratorError17 = undefined;

        try {
          for (var _iterator17 = t[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var _e$alternatives;

            var _r13 = _step17.value;
            if (!a.simple(_r13)) return (_e$alternatives = e.alternatives())["try"].apply(_e$alternatives, _toConsumableArray(t));
          }
        } catch (err) {
          _didIteratorError17 = true;
          _iteratorError17 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
              _iterator17["return"]();
            }
          } finally {
            if (_didIteratorError17) {
              throw _iteratorError17;
            }
          }
        }

        return o.apply(void 0, [e].concat(_toConsumableArray(t)));
      }

      return t instanceof RegExp ? e.string().regex(t) : t instanceof Date ? o(e.date(), t) : (s(Object.getPrototypeOf(t) === Object.getPrototypeOf({}), "Schema can only contain plain objects"), e.object().keys(t));
    }, t.ref = function (e, t) {
      return o.isRef(e) ? e : o.create(e, t);
    }, t.compile = function (e, r) {
      var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      n.assertOptions(o, ["legacy"]);
      var i = r && r[n.symbols.any];
      if (i) return s(o.legacy || i.version === n.version, "Cannot mix different versions of joi schemas"), r;
      if ("object" != _typeof(r) || !o.legacy) return t.schema(e, r, {
        appendPath: !0
      });
      var l = a.walk(r);
      return l ? l.compile(l.root, r) : t.schema(e, r, {
        appendPath: !0
      });
    }, a.walk = function (e) {
      if ("object" != _typeof(e)) return null;

      if (Array.isArray(e)) {
        var _iteratorNormalCompletion18 = true;
        var _didIteratorError18 = false;
        var _iteratorError18 = undefined;

        try {
          for (var _iterator18 = e[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
            var _t20 = _step18.value;

            var _e15 = a.walk(_t20);

            if (_e15) return _e15;
          }
        } catch (err) {
          _didIteratorError18 = true;
          _iteratorError18 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
              _iterator18["return"]();
            }
          } finally {
            if (_didIteratorError18) {
              throw _iteratorError18;
            }
          }
        }

        return null;
      }

      var t = e[n.symbols.any];
      if (t) return {
        root: e[t.root],
        compile: t.compile
      };
      s(Object.getPrototypeOf(e) === Object.getPrototypeOf({}), "Schema can only contain plain objects");

      for (var _t21 in e) {
        var _r14 = a.walk(e[_t21]);

        if (_r14) return _r14;
      }

      return null;
    }, a.simple = function (e) {
      return null === e || ["boolean", "string", "number"].includes(_typeof(e));
    }, t.when = function (e, r, i) {
      if (void 0 === i && (s(r && "object" == _typeof(r), "Missing options"), i = r, r = o.create(".")), Array.isArray(i) && (i = {
        "switch": i
      }), n.assertOptions(i, ["is", "not", "then", "otherwise", "switch", "break"]), n.isSchema(r)) return s(void 0 === i.is, '"is" can not be used with a schema condition'), s(void 0 === i.not, '"not" can not be used with a schema condition'), s(void 0 === i["switch"], '"switch" can not be used with a schema condition'), a.condition(e, {
        is: r,
        then: i.then,
        otherwise: i.otherwise,
        "break": i["break"]
      });

      if (s(o.isRef(r) || "string" == typeof r, "Invalid condition:", r), s(void 0 === i.not || void 0 === i.is, 'Cannot combine "is" with "not"'), void 0 === i["switch"]) {
        var _l3 = i;
        void 0 !== i.not && (_l3 = {
          is: i.not,
          then: i.otherwise,
          otherwise: i.then,
          "break": i["break"]
        });
        var c = void 0 !== _l3.is ? e.$_compile(_l3.is) : e.$_root.invalid(null, !1, 0, "").required();
        return s(void 0 !== _l3.then || void 0 !== _l3.otherwise, 'options must have at least one of "then", "otherwise", or "switch"'), s(void 0 === _l3["break"] || void 0 === _l3.then || void 0 === _l3.otherwise, "Cannot specify then, otherwise, and break all together"), void 0 === i.is || o.isRef(i.is) || n.isSchema(i.is) || (c = c.required()), a.condition(e, {
          ref: t.ref(r),
          is: c,
          then: _l3.then,
          otherwise: _l3.otherwise,
          "break": _l3["break"]
        });
      }

      s(Array.isArray(i["switch"]), '"switch" must be an array'), s(void 0 === i.is, 'Cannot combine "switch" with "is"'), s(void 0 === i.not, 'Cannot combine "switch" with "not"'), s(void 0 === i.then, 'Cannot combine "switch" with "then"');
      var l = {
        ref: t.ref(r),
        "switch": [],
        "break": i["break"]
      };

      for (var _t22 = 0; _t22 < i["switch"].length; ++_t22) {
        var _r15 = i["switch"][_t22],
            _a3 = _t22 === i["switch"].length - 1;

        n.assertOptions(_r15, _a3 ? ["is", "then", "otherwise"] : ["is", "then"]), s(void 0 !== _r15.is, 'Switch statement missing "is"'), s(void 0 !== _r15.then, 'Switch statement missing "then"');
        var _c2 = {
          is: e.$_compile(_r15.is),
          then: e.$_compile(_r15.then)
        };

        if (o.isRef(_r15.is) || n.isSchema(_r15.is) || (_c2.is = _c2.is.required()), _a3) {
          s(void 0 === i.otherwise || void 0 === _r15.otherwise, 'Cannot specify "otherwise" inside and outside a "switch"');

          var _t23 = void 0 !== i.otherwise ? i.otherwise : _r15.otherwise;

          void 0 !== _t23 && (s(void 0 === l["break"], "Cannot specify both otherwise and break"), _c2.otherwise = e.$_compile(_t23));
        }

        l["switch"].push(_c2);
      }

      return l;
    }, a.condition = function (e, t) {
      for (var _i6 = 0, _arr3 = ["then", "otherwise"]; _i6 < _arr3.length; _i6++) {
        var _r16 = _arr3[_i6];
        void 0 === t[_r16] ? delete t[_r16] : t[_r16] = e.$_compile(t[_r16]);
      }

      return t;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = {};
    e.exports = function (e, t, r) {
      if (!1 === t || null == t) return e;
      "string" == typeof (r = r || {}) && (r = {
        separator: r
      });
      var o = Array.isArray(t);
      s(!o || !r.separator, "Separator option no valid for array-based chain");
      var a = o ? t : t.split(r.separator || ".");
      var i = e;

      for (var _e16 = 0; _e16 < a.length; ++_e16) {
        var _o6 = a[_e16];
        var l = r.iterables && n.iterables(i);

        if (Array.isArray(i) || "set" === l) {
          var _e17 = Number(_o6);

          Number.isInteger(_e17) && (_o6 = _e17 < 0 ? i.length + _e17 : _e17);
        }

        if (!i || "function" == typeof i && !1 === r.functions || !l && void 0 === i[_o6]) {
          s(!r.strict || _e16 + 1 === a.length, "Missing segment", _o6, "in reach path ", t), s("object" == _typeof(i) || !0 === r.functions || "function" != typeof i, "Invalid segment", _o6, "in reach path ", t), i = r["default"];
          break;
        }

        i = l ? "set" === l ? _toConsumableArray(i)[_o6] : i.get(_o6) : i[_o6];
      }

      return i;
    }, n.iterables = function (e) {
      return e instanceof Set ? "set" : e instanceof Map ? "map" : void 0;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(6);
    t.compile = function (e, t) {
      if ("string" == typeof e) return s(!t, "Cannot set single message string"), new o(e);
      if (o.isTemplate(e)) return s(!t, "Cannot set single message template"), e;
      s("object" == _typeof(e) && !Array.isArray(e), "Invalid message options"), t = t ? n(t) : {};

      for (var _r17 in e) {
        var _n8 = e[_r17];

        if ("root" === _r17 || o.isTemplate(_n8)) {
          t[_r17] = _n8;
          continue;
        }

        if ("string" == typeof _n8) {
          t[_r17] = new o(_n8);
          continue;
        }

        s("object" == _typeof(_n8) && !Array.isArray(_n8), "Invalid message for", _r17);
        var a = _r17;

        for (_r17 in t[a] = t[a] || {}, _n8) {
          var _e18 = _n8[_r17];
          "root" === _r17 || o.isTemplate(_e18) ? t[a][_r17] = _e18 : (s("string" == typeof _e18, "Invalid message for", _r17, "in", a), t[a][_r17] = new o(_e18));
        }
      }

      return t;
    }, t.decompile = function (e) {
      var t = {};

      for (var _r18 in e) {
        var _s11 = e[_r18];

        if ("root" === _r18) {
          t[_r18] = _s11;
          continue;
        }

        if (o.isTemplate(_s11)) {
          t[_r18] = _s11.describe({
            compact: !0
          });
          continue;
        }

        var _n9 = _r18;

        for (_r18 in t[_n9] = {}, _s11) {
          var _e19 = _s11[_r18];
          "root" !== _r18 ? t[_n9][_r18] = _e19.describe({
            compact: !0
          }) : t[_n9][_r18] = _e19;
        }
      }

      return t;
    }, t.merge = function (e, r) {
      if (!e) return t.compile(r);
      if (!r) return e;
      if ("string" == typeof r) return new o(r);
      if (o.isTemplate(r)) return r;
      var a = n(e);

      for (var _e20 in r) {
        var _t24 = r[_e20];

        if ("root" === _e20 || o.isTemplate(_t24)) {
          a[_e20] = _t24;
          continue;
        }

        if ("string" == typeof _t24) {
          a[_e20] = new o(_t24);
          continue;
        }

        s("object" == _typeof(_t24) && !Array.isArray(_t24), "Invalid message for", _e20);
        var _n10 = _e20;

        for (_e20 in a[_n10] = a[_n10] || {}, _t24) {
          var _r19 = _t24[_e20];
          "root" === _e20 || o.isTemplate(_r19) ? a[_n10][_e20] = _r19 : (s("string" == typeof _r19, "Invalid message for", _e20, "in", _n10), a[_n10][_e20] = new o(_r19));
        }
      }

      return a;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(8),
        n = {};
    t.keys = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return !1 !== t.symbols ? Reflect.ownKeys(e) : Object.getOwnPropertyNames(e);
    }, t.store = function (e, t) {
      var r = new Map();

      for (var o = 0; o < t.length; ++o) {
        var a = t[o],
            i = s(e, a);
        "object" != _typeof(i) && "function" != typeof i || (r.set(a, i), n.reachSet(e, a, void 0));
      }

      return r;
    }, t.restore = function (e, t, r) {
      var _iteratorNormalCompletion19 = true;
      var _didIteratorError19 = false;
      var _iteratorError19 = undefined;

      try {
        for (var _iterator19 = r[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
          var _step19$value = _slicedToArray(_step19.value, 2),
              _s12 = _step19$value[0],
              o = _step19$value[1];

          n.reachSet(e, _s12, o), n.reachSet(t, _s12, o);
        }
      } catch (err) {
        _didIteratorError19 = true;
        _iteratorError19 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
            _iterator19["return"]();
          }
        } finally {
          if (_didIteratorError19) {
            throw _iteratorError19;
          }
        }
      }
    }, n.reachSet = function (e, t, r) {
      var s = Array.isArray(t) ? t : t.split(".");
      var n = e;

      for (var _e21 = 0; _e21 < s.length; ++_e21) {
        var _t25 = s[_e21];
        _e21 + 1 === s.length && (n[_t25] = r), n = n[_t25];
      }
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(14),
        n = {
      mismatched: null
    };
    e.exports = function (e, t, r) {
      return r = Object.assign({
        prototype: !0
      }, r), !!n.isDeepEqual(e, t, r, []);
    }, n.isDeepEqual = function (e, t, r, o) {
      if (e === t) return 0 !== e || 1 / e == 1 / t;

      var a = _typeof(e);

      if (a !== _typeof(t)) return !1;
      if (null === e || null === t) return !1;

      if ("function" === a) {
        if (!r.deepFunction || e.toString() !== t.toString()) return !1;
      } else if ("object" !== a) return e != e && t != t;

      var i = n.getSharedType(e, t, !!r.prototype);

      switch (i) {
        case s.buffer:
          return !1;

        case s.promise:
          return e === t;

        case s.regex:
          return e.toString() === t.toString();

        case n.mismatched:
          return !1;
      }

      for (var _r20 = o.length - 1; _r20 >= 0; --_r20) {
        if (o[_r20].isSame(e, t)) return !0;
      }

      o.push(new n.SeenEntry(e, t));

      try {
        return !!n.isDeepEqualObj(i, e, t, r, o);
      } finally {
        o.pop();
      }
    }, n.getSharedType = function (e, t, r) {
      if (r) return Object.getPrototypeOf(e) !== Object.getPrototypeOf(t) ? n.mismatched : s.getInternalProto(e);
      var o = s.getInternalProto(e);
      return o !== s.getInternalProto(t) ? n.mismatched : o;
    }, n.valueOf = function (e) {
      var t = e.valueOf;
      if (void 0 === t) return e;

      try {
        return t.call(e);
      } catch (e) {
        return e;
      }
    }, n.hasOwnEnumerableProperty = function (e, t) {
      return Object.prototype.propertyIsEnumerable.call(e, t);
    }, n.isSetSimpleEqual = function (e, t) {
      var _iteratorNormalCompletion20 = true;
      var _didIteratorError20 = false;
      var _iteratorError20 = undefined;

      try {
        for (var _iterator20 = e[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
          var _r21 = _step20.value;
          if (!t.has(_r21)) return !1;
        }
      } catch (err) {
        _didIteratorError20 = true;
        _iteratorError20 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
            _iterator20["return"]();
          }
        } finally {
          if (_didIteratorError20) {
            throw _iteratorError20;
          }
        }
      }

      return !0;
    }, n.isDeepEqualObj = function (e, t, r, o, a) {
      var i = n.isDeepEqual,
          l = n.valueOf,
          c = n.hasOwnEnumerableProperty,
          u = Object.keys,
          f = Object.getOwnPropertySymbols;

      if (e === s.array) {
        if (!o.part) {
          if (t.length !== r.length) return !1;

          for (var _e22 = 0; _e22 < t.length; ++_e22) {
            if (!i(t[_e22], r[_e22], o, a)) return !1;
          }

          return !0;
        }

        var _iteratorNormalCompletion21 = true;
        var _didIteratorError21 = false;
        var _iteratorError21 = undefined;

        try {
          for (var _iterator21 = t[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
            var _e23 = _step21.value;
            var _iteratorNormalCompletion22 = true;
            var _didIteratorError22 = false;
            var _iteratorError22 = undefined;

            try {
              for (var _iterator22 = r[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                var _t26 = _step22.value;
                if (i(_e23, _t26, o, a)) return !0;
              }
            } catch (err) {
              _didIteratorError22 = true;
              _iteratorError22 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
                  _iterator22["return"]();
                }
              } finally {
                if (_didIteratorError22) {
                  throw _iteratorError22;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError21 = true;
          _iteratorError21 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
              _iterator21["return"]();
            }
          } finally {
            if (_didIteratorError21) {
              throw _iteratorError21;
            }
          }
        }
      } else if (e === s.set) {
        if (t.size !== r.size) return !1;

        if (!n.isSetSimpleEqual(t, r)) {
          var _e24 = new Set(r);

          var _iteratorNormalCompletion23 = true;
          var _didIteratorError23 = false;
          var _iteratorError23 = undefined;

          try {
            for (var _iterator23 = t[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
              var _r22 = _step23.value;
              if (_e24["delete"](_r22)) continue;

              var _t27 = !1;

              var _iteratorNormalCompletion24 = true;
              var _didIteratorError24 = false;
              var _iteratorError24 = undefined;

              try {
                for (var _iterator24 = _e24[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                  var _s13 = _step24.value;

                  if (i(_r22, _s13, o, a)) {
                    _e24["delete"](_s13), _t27 = !0;
                    break;
                  }
                }
              } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
                    _iterator24["return"]();
                  }
                } finally {
                  if (_didIteratorError24) {
                    throw _iteratorError24;
                  }
                }
              }

              if (!_t27) return !1;
            }
          } catch (err) {
            _didIteratorError23 = true;
            _iteratorError23 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
                _iterator23["return"]();
              }
            } finally {
              if (_didIteratorError23) {
                throw _iteratorError23;
              }
            }
          }
        }
      } else if (e === s.map) {
        if (t.size !== r.size) return !1;
        var _iteratorNormalCompletion25 = true;
        var _didIteratorError25 = false;
        var _iteratorError25 = undefined;

        try {
          for (var _iterator25 = t[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
            var _step25$value = _slicedToArray(_step25.value, 2),
                _e25 = _step25$value[0],
                _s14 = _step25$value[1];

            if (void 0 === _s14 && !r.has(_e25)) return !1;
            if (!i(_s14, r.get(_e25), o, a)) return !1;
          }
        } catch (err) {
          _didIteratorError25 = true;
          _iteratorError25 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion25 && _iterator25["return"] != null) {
              _iterator25["return"]();
            }
          } finally {
            if (_didIteratorError25) {
              throw _iteratorError25;
            }
          }
        }
      } else if (e === s.error && (t.name !== r.name || t.message !== r.message)) return !1;

      var h = l(t),
          m = l(r);
      if ((t !== h || r !== m) && !i(h, m, o, a)) return !1;
      var d = u(t);
      if (!o.part && d.length !== u(r).length && !o.skip) return !1;
      var p = 0;
      var _iteratorNormalCompletion26 = true;
      var _didIteratorError26 = false;
      var _iteratorError26 = undefined;

      try {
        for (var _iterator26 = d[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
          var _e28 = _step26.value;
          if (o.skip && o.skip.includes(_e28)) void 0 === r[_e28] && ++p;else {
            if (!c(r, _e28)) return !1;
            if (!i(t[_e28], r[_e28], o, a)) return !1;
          }
        }
      } catch (err) {
        _didIteratorError26 = true;
        _iteratorError26 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion26 && _iterator26["return"] != null) {
            _iterator26["return"]();
          }
        } finally {
          if (_didIteratorError26) {
            throw _iteratorError26;
          }
        }
      }

      if (!o.part && d.length - p !== u(r).length) return !1;

      if (!1 !== o.symbols) {
        var _e26 = f(t),
            _s15 = new Set(f(r));

        var _iteratorNormalCompletion27 = true;
        var _didIteratorError27 = false;
        var _iteratorError27 = undefined;

        try {
          for (var _iterator27 = _e26[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
            var _n11 = _step27.value;
            if (!o.skip || !o.skip.includes(_n11)) if (c(t, _n11)) {
              if (!c(r, _n11)) return !1;
              if (!i(t[_n11], r[_n11], o, a)) return !1;
            } else if (c(r, _n11)) return !1;

            _s15["delete"](_n11);
          }
        } catch (err) {
          _didIteratorError27 = true;
          _iteratorError27 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion27 && _iterator27["return"] != null) {
              _iterator27["return"]();
            }
          } finally {
            if (_didIteratorError27) {
              throw _iteratorError27;
            }
          }
        }

        var _iteratorNormalCompletion28 = true;
        var _didIteratorError28 = false;
        var _iteratorError28 = undefined;

        try {
          for (var _iterator28 = _s15[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
            var _e27 = _step28.value;
            if (c(r, _e27)) return !1;
          }
        } catch (err) {
          _didIteratorError28 = true;
          _iteratorError28 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion28 && _iterator28["return"] != null) {
              _iterator28["return"]();
            }
          } finally {
            if (_didIteratorError28) {
              throw _iteratorError28;
            }
          }
        }
      }

      return !0;
    }, n.SeenEntry =
    /*#__PURE__*/
    function () {
      function _class6(e, t) {
        _classCallCheck(this, _class6);

        this.obj = e, this.ref = t;
      }

      _createClass(_class6, [{
        key: "isSame",
        value: function isSame(e, t) {
          return this.obj === e && this.ref === t;
        }
      }]);

      return _class6;
    }();
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(15),
        a = r(1),
        i = r(7),
        l = r(4),
        c = r(17),
        u = r(18),
        f = r(5),
        h = r(6),
        m = r(19);
    var d;
    var p = {
      types: {
        alternatives: r(31),
        any: r(3),
        array: r(37),
        "boolean": r(38),
        date: r(39),
        "function": r(40),
        link: r(43),
        number: r(44),
        object: r(45),
        string: r(46),
        symbol: r(50)
      }
    };
    p.root = function () {
      var e = {
        _types: new Set(Object.keys(p.types))
      };
      var _iteratorNormalCompletion29 = true;
      var _didIteratorError29 = false;
      var _iteratorError29 = undefined;

      try {
        var _loop = function _loop() {
          var t = _step29.value;

          e[t] = function () {
            for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) {
              r[n] = arguments[n];
            }

            return s(!r.length || ["alternatives", "link", "object"].includes(t), "The", t, "type does not allow arguments"), p.generate(this, p.types[t], r);
          };
        };

        for (var _iterator29 = e._types[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError29 = true;
        _iteratorError29 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion29 && _iterator29["return"] != null) {
            _iterator29["return"]();
          }
        } finally {
          if (_didIteratorError29) {
            throw _iteratorError29;
          }
        }
      }

      var _loop2 = function _loop2() {
        var t = _arr4[_i7];

        e[t] = function () {
          var _this$any;

          return (_this$any = this.any())[t].apply(_this$any, arguments);
        };
      };

      for (var _i7 = 0, _arr4 = ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"]; _i7 < _arr4.length; _i7++) {
        _loop2();
      }

      return Object.assign(e, p.methods), e.alt = e.alternatives, e.bool = e["boolean"], e.func = e["function"], e.x = e.expression, m.setup && m.setup(e), e;
    }, p.methods = {
      ValidationError: l.ValidationError,
      version: a.version,
      cache: o.provider,
      assert: function assert(e, t) {
        for (var r = arguments.length, s = new Array(r > 2 ? r - 2 : 0), n = 2; n < r; n++) {
          s[n - 2] = arguments[n];
        }

        p.assert(e, t, !0, s);
      },
      attempt: function attempt(e, t) {
        for (var r = arguments.length, s = new Array(r > 2 ? r - 2 : 0), n = 2; n < r; n++) {
          s[n - 2] = arguments[n];
        }

        return p.assert(e, t, !1, s);
      },
      build: function build(e) {
        return s("function" == typeof u.build, "Manifest functionality disabled"), u.build(this, e);
      },
      checkPreferences: function checkPreferences(e) {
        a.checkPreferences(e);
      },
      compile: function compile(e, t) {
        return i.compile(this, e, t);
      },
      defaults: function defaults(e) {
        s("function" == typeof e, "modifier must be a function");
        var t = Object.assign({}, this);
        var _iteratorNormalCompletion30 = true;
        var _didIteratorError30 = false;
        var _iteratorError30 = undefined;

        try {
          var _loop3 = function _loop3() {
            var r = _step30.value;
            var n = e(t[r]());
            s(a.isSchema(n), "modifier must return a valid schema object"), t[r] = function () {
              for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
                t[r] = arguments[r];
              }

              return p.generate(this, n, t);
            };
          };

          for (var _iterator30 = t._types[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
            _loop3();
          }
        } catch (err) {
          _didIteratorError30 = true;
          _iteratorError30 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion30 && _iterator30["return"] != null) {
              _iterator30["return"]();
            }
          } finally {
            if (_didIteratorError30) {
              throw _iteratorError30;
            }
          }
        }

        return t;
      },
      expression: function expression() {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
          t[r] = arguments[r];
        }

        return _construct(h, t);
      },
      extend: function extend() {
        var _this4 = this;

        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {
          t[n] = arguments[n];
        }

        a.verifyFlat(t, "extend"), d = d || r(16), s(t.length, "You need to provide at least one extension"), this.assert(t, d.extensions);
        var o = Object.assign({}, this);
        o._types = new Set(o._types);

        var _loop4 = function _loop4() {
          var e = _t28[_i8];
          "function" == typeof e && (e = e(o)), _this4.assert(e, d.extension), s(void 0 === o[e.type] || o._types.has(e.type), "Cannot override name", e.type);

          var t = e.base || _this4.any(),
              r = c.type(t, e);

          o._types.add(e.type), o[e.type] = function () {
            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) {
              t[s] = arguments[s];
            }

            return p.generate(this, r, t);
          };
        };

        for (var _i8 = 0, _t28 = t; _i8 < _t28.length; _i8++) {
          _loop4();
        }

        return o;
      },
      isExpression: h.isTemplate,
      isRef: f.isRef,
      isSchema: a.isSchema,
      "in": function _in() {
        return f["in"].apply(f, arguments);
      },
      override: a.symbols.override,
      ref: function ref() {
        return f.create.apply(f, arguments);
      },
      types: function types() {
        var e = {};
        var _iteratorNormalCompletion31 = true;
        var _didIteratorError31 = false;
        var _iteratorError31 = undefined;

        try {
          for (var _iterator31 = this._types[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
            var _t29 = _step31.value;
            e[_t29] = this[_t29]();
          }
        } catch (err) {
          _didIteratorError31 = true;
          _iteratorError31 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion31 && _iterator31["return"] != null) {
              _iterator31["return"]();
            }
          } finally {
            if (_didIteratorError31) {
              throw _iteratorError31;
            }
          }
        }

        return e;
      }
    }, p.assert = function (e, t, r, s) {
      var o = s[0] instanceof Error || "string" == typeof s[0] ? s[0] : null,
          i = o ? s[1] : s[0],
          c = t.validate(e, a.preferences({
        errors: {
          stack: !0
        }
      }, i || {}));
      var u = c.error;
      if (!u) return c.value;
      if (o instanceof Error) throw o;
      var f = (r = r && "function" == typeof u.annotate) ? u.annotate() : u.message;
      throw u instanceof l.ValidationError == !1 && (u = n(u)), u.message = o ? "".concat(o, " ").concat(f) : f, u;
    }, p.generate = function (e, t, r) {
      var _t$_definition;

      return s(e, "Must be invoked on a Joi instance."), t.$_root = e, t._definition.args && r.length ? (_t$_definition = t._definition).args.apply(_t$_definition, [t].concat(_toConsumableArray(r))) : t;
    }, e.exports = p.root();
  }, function (e, t, r) {
    "use strict";

    var s = r(27);

    e.exports =
    /*#__PURE__*/
    function (_Error2) {
      _inherits(_class7, _Error2);

      function _class7(e) {
        var _this5;

        _classCallCheck(this, _class7);

        _this5 = _possibleConstructorReturn(this, _getPrototypeOf(_class7).call(this, e.filter(function (e) {
          return "" !== e;
        }).map(function (e) {
          return "string" == typeof e ? e : e instanceof Error ? e.message : s(e);
        }).join(" ") || "Unknown error")), "function" == typeof Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(_this5), t.assert);
        return _this5;
      }

      return _class7;
    }(_wrapNativeSuper(Error));
  }, function (e, t, r) {
    "use strict";

    var s = {};
    t = e.exports = {
      array: Array.prototype,
      buffer: !1,
      date: Date.prototype,
      error: Error.prototype,
      generic: Object.prototype,
      map: Map.prototype,
      promise: Promise.prototype,
      regex: RegExp.prototype,
      set: Set.prototype,
      weakMap: WeakMap.prototype,
      weakSet: WeakSet.prototype
    }, s.typeMap = new Map([["[object Error]", t.error], ["[object Map]", t.map], ["[object Promise]", t.promise], ["[object Set]", t.set], ["[object WeakMap]", t.weakMap], ["[object WeakSet]", t.weakSet]]), t.getInternalProto = function (e) {
      if (Array.isArray(e)) return t.array;
      if (e instanceof Date) return t.date;
      if (e instanceof RegExp) return t.regex;
      if (e instanceof Error) return t.error;
      var r = Object.prototype.toString.call(e);
      return s.typeMap.get(r) || t.generic;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(1),
        a = {
      max: 1e3,
      supported: new Set(["undefined", "boolean", "number", "string"])
    };
    t.provider = {
      provision: function provision(e) {
        return new a.Cache(e);
      }
    }, a.Cache =
    /*#__PURE__*/
    function () {
      function _class8() {
        _classCallCheck(this, _class8);

        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        o.assertOptions(e, ["max"]), s(void 0 === e.max || e.max && e.max > 0 && isFinite(e.max), "Invalid max cache size"), this._max = e.max || a.max, this._map = new Map(), this._list = new a.List();
      }

      _createClass(_class8, [{
        key: "set",
        value: function set(e, t) {
          if (null !== e && !a.supported.has(_typeof(e))) return;

          var r = this._map.get(e);

          if (r) return r.value = t, void this._list.first(r);
          r = this._list.unshift({
            key: e,
            value: t
          }), this._map.set(e, r), this._compact();
        }
      }, {
        key: "get",
        value: function get(e) {
          var t = this._map.get(e);

          if (t) return this._list.first(t), n(t.value);
        }
      }, {
        key: "_compact",
        value: function _compact() {
          if (this._map.size > this._max) {
            var _e29 = this._list.pop();

            this._map["delete"](_e29.key);
          }
        }
      }, {
        key: "length",
        get: function get() {
          return this._map.size;
        }
      }]);

      return _class8;
    }(), a.List =
    /*#__PURE__*/
    function () {
      function _class9() {
        _classCallCheck(this, _class9);

        this.tail = null, this.head = null;
      }

      _createClass(_class9, [{
        key: "unshift",
        value: function unshift(e) {
          return e.next = null, e.prev = this.head, this.head && (this.head.next = e), this.head = e, this.tail || (this.tail = e), e;
        }
      }, {
        key: "first",
        value: function first(e) {
          e !== this.head && (this._remove(e), this.unshift(e));
        }
      }, {
        key: "pop",
        value: function pop() {
          return this._remove(this.tail);
        }
      }, {
        key: "_remove",
        value: function _remove(e) {
          var t = e.next,
              r = e.prev;
          return t.prev = r, r && (r.next = t), e === this.tail && (this.tail = t), e.prev = null, e.next = null, e;
        }
      }]);

      return _class9;
    }();
  }, function (e, t, r) {
    "use strict";

    var s = r(12),
        n = {};
    t.preferences = s.object({
      allowUnknown: s["boolean"](),
      abortEarly: s["boolean"](),
      cache: s["boolean"](),
      context: s.object(),
      convert: s["boolean"](),
      dateFormat: s.valid("date", "iso", "string", "time", "utc"),
      debug: s["boolean"](),
      errors: {
        escapeHtml: s["boolean"](),
        label: s.valid("path", "key", !1),
        language: [s.string(), s.object().ref()],
        render: s["boolean"](),
        stack: s["boolean"](),
        wrapArrays: s["boolean"]()
      },
      externals: s["boolean"](),
      messages: s.object(),
      noDefaults: s["boolean"](),
      nonEnumerables: s["boolean"](),
      presence: s.valid("required", "optional", "forbidden"),
      skipFunctions: s["boolean"](),
      stripUnknown: s.object({
        arrays: s["boolean"](),
        objects: s["boolean"]()
      }).or("arrays", "objects").allow(!0, !1),
      warnings: s["boolean"]()
    }).strict(), n.nameRx = /^[a-zA-Z0-9]+$/, n.rule = s.object({
      alias: s.array().items(s.string().pattern(n.nameRx)).single(),
      args: s.array().items(s.string(), s.object({
        name: s.string().pattern(n.nameRx).required(),
        ref: s["boolean"](),
        assert: s.alternatives([s["function"](), s.object().schema()]).conditional("ref", {
          is: !0,
          then: s.required()
        }),
        normalize: s["function"](),
        message: s.string().when("assert", {
          is: s["function"](),
          then: s.required()
        })
      })),
      convert: s["boolean"](),
      manifest: s["boolean"](),
      method: s["function"]().allow(!1),
      multi: s["boolean"](),
      validate: s["function"]()
    }), t.extension = s.object({
      type: s.string().required(),
      args: s["function"](),
      base: s.object().schema(),
      coerce: [s["function"]().maxArity(3), s.object({
        method: s["function"]().maxArity(3).required(),
        from: s.array().items(s.string()).single()
      })],
      flags: s.object().pattern(n.nameRx, s.object({
        setter: s.string(),
        "default": s.any()
      })),
      manifest: {
        build: s["function"]().arity(2)
      },
      messages: [s.object(), s.string()],
      modifiers: s.object().pattern(n.nameRx, s["function"]().minArity(1).maxArity(2)),
      overrides: s.object().pattern(n.nameRx, s["function"]()),
      prepare: s["function"]().maxArity(3),
      rebuild: s["function"]().arity(1),
      rules: s.object().pattern(n.nameRx, n.rule),
      terms: s.object().pattern(n.nameRx, s.object({
        init: s.array().allow(null).required(),
        manifest: s.object().pattern(/.+/, [s.valid("schema", "single"), s.object({
          mapped: s.object({
            from: s.string().required(),
            to: s.string().required()
          }).required()
        })])
      })),
      validate: s["function"]().maxArity(3)
    }).strict(), t.extensions = s.array().items(s.object(), s["function"]().arity(1)).strict(), n.desc = {
      buffer: s.object({
        buffer: s.string()
      }),
      func: s.object({
        "function": s["function"]().required(),
        options: {
          literal: !0
        }
      }),
      override: s.object({
        override: !0
      }),
      ref: s.object({
        ref: s.object({
          type: s.valid("value", "global", "local"),
          path: s.array().required(),
          separator: s.string().length(1).allow(!1),
          ancestor: s.number().min(0).integer().allow("root"),
          map: s.array().items(s.array().length(2)).min(1),
          adjust: s["function"](),
          iterables: s["boolean"](),
          "in": s["boolean"]()
        }).required()
      }),
      regex: s.object({
        regex: s.string().min(3)
      }),
      special: s.object({
        special: s.valid("deep").required()
      }),
      template: s.object({
        template: s.string().required(),
        options: s.object()
      }),
      value: s.object({
        value: s.alternatives([s.object(), s.array()]).required()
      })
    }, n.desc.entity = s.alternatives([s.array().items(s.link("...")), s["boolean"](), s["function"](), s.number(), s.string(), n.desc.buffer, n.desc.func, n.desc.ref, n.desc.regex, n.desc.special, n.desc.template, n.desc.value, s.link("/")]), n.desc.values = s.array().items(null, s["boolean"](), s["function"](), s.number().allow(1 / 0, -1 / 0), s.string().allow(""), s.symbol(), n.desc.buffer, n.desc.func, n.desc.override, n.desc.ref, n.desc.regex, n.desc.template, n.desc.value), n.desc.messages = s.object().pattern(/.+/, [s.string(), n.desc.template, s.object().pattern(/.+/, [s.string(), n.desc.template])]), t.description = s.object({
      type: s.string().required(),
      flags: s.object({
        cast: s.string(),
        "default": s.any(),
        description: s.string(),
        empty: s.link("/"),
        failover: n.desc.entity,
        id: s.string(),
        label: s.string(),
        only: !0,
        presence: ["optional", "required", "forbidden"],
        result: ["raw", "strip"],
        strip: s["boolean"](),
        unit: s.string()
      }).unknown(),
      preferences: {
        allowUnknown: s["boolean"](),
        abortEarly: s["boolean"](),
        cache: s["boolean"](),
        convert: s["boolean"](),
        dateFormat: ["date", "iso", "string", "time", "utc"],
        errors: {
          escapeHtml: s["boolean"](),
          label: ["path", "key"],
          language: [s.string(), n.desc.ref],
          wrapArrays: s["boolean"]()
        },
        externals: s["boolean"](),
        messages: n.desc.messages,
        noDefaults: s["boolean"](),
        nonEnumerables: s["boolean"](),
        presence: ["required", "optional", "forbidden"],
        skipFunctions: s["boolean"](),
        stripUnknown: s.object({
          arrays: s["boolean"](),
          objects: s["boolean"]()
        }).or("arrays", "objects").allow(!0, !1),
        warnings: s["boolean"]()
      },
      allow: n.desc.values,
      invalid: n.desc.values,
      rules: s.array().min(1).items({
        name: s.string().required(),
        args: s.object().min(1),
        keep: s["boolean"](),
        message: [s.string(), n.desc.messages],
        warn: s["boolean"]()
      }),
      keys: s.object().pattern(/.*/, s.link("/")),
      link: n.desc.ref
    }).pattern(/^[a-z]\w*$/, s.any());
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(1),
        a = r(9),
        i = {};
    t.type = function (e, t) {
      var r = Object.getPrototypeOf(e),
          l = n(r),
          c = e._assign(Object.create(l)),
          u = Object.assign({}, t);

      delete u.base, l._definition = u;
      var f = r._definition || {};
      u.messages = a.merge(f.messages, u.messages), u.properties = Object.assign({}, f.properties, u.properties), c.type = u.type, u.flags = Object.assign({}, f.flags, u.flags);
      var h = Object.assign({}, f.terms);
      if (u.terms) for (var _e30 in u.terms) {
        var _t30 = u.terms[_e30];
        s(void 0 === c.$_terms[_e30], "Invalid term override for", u.type, _e30), c.$_terms[_e30] = _t30.init, h[_e30] = _t30;
      }
      u.terms = h, u.args || (u.args = f.args), u.prepare = i.prepare(u.prepare, f.prepare), u.coerce && ("function" == typeof u.coerce && (u.coerce = {
        method: u.coerce
      }), u.coerce.from && !Array.isArray(u.coerce.from) && (u.coerce = {
        method: u.coerce.method,
        from: [].concat(u.coerce.from)
      })), u.coerce = i.coerce(u.coerce, f.coerce), u.validate = i.validate(u.validate, f.validate);
      var m = Object.assign({}, f.rules);

      if (u.rules) {
        var _loop5 = function _loop5(_e31) {
          var t = u.rules[_e31];
          s("object" == _typeof(t), "Invalid rule definition for", u.type, _e31);
          var r = t.method;

          if (void 0 === r && (r = function r() {
            return this.$_addRule(_e31);
          }), r && (s(!l[_e31], "Rule conflict in", u.type, _e31), l[_e31] = r), s(!m[_e31], "Rule conflict in", u.type, _e31), m[_e31] = t, t.alias) {
            var _e32 = [].concat(t.alias);

            var _iteratorNormalCompletion32 = true;
            var _didIteratorError32 = false;
            var _iteratorError32 = undefined;

            try {
              for (var _iterator32 = _e32[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                var _r23 = _step32.value;
                l[_r23] = t.method;
              }
            } catch (err) {
              _didIteratorError32 = true;
              _iteratorError32 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion32 && _iterator32["return"] != null) {
                  _iterator32["return"]();
                }
              } finally {
                if (_didIteratorError32) {
                  throw _iteratorError32;
                }
              }
            }
          }

          t.args && (t.argsByName = new Map(), t.args = t.args.map(function (e) {
            return "string" == typeof e && (e = {
              name: e
            }), s(!t.argsByName.has(e.name), "Duplicated argument name", e.name), o.isSchema(e.assert) && (e.assert = e.assert.strict().label(e.name)), t.argsByName.set(e.name, e), e;
          }));
        };

        for (var _e31 in u.rules) {
          _loop5(_e31);
        }
      }

      u.rules = m;
      var d = Object.assign({}, f.modifiers);

      if (u.modifiers) {
        var _loop6 = function _loop6(_e33) {
          s(!l[_e33], "Rule conflict in", u.type, _e33);
          var t = u.modifiers[_e33];
          s("function" == typeof t, "Invalid modifier definition for", u.type, _e33);

          var r = function r(t) {
            return this.rule(_defineProperty({}, _e33, t));
          };

          l[_e33] = r, d[_e33] = t;
        };

        for (var _e33 in u.modifiers) {
          _loop6(_e33);
        }
      }

      if (u.modifiers = d, u.overrides) {
        l._super = r, c.$_super = {};

        for (var _e34 in u.overrides) {
          s(r[_e34], "Cannot override missing", _e34), c.$_super[_e34] = r[_e34].bind(c);
        }

        Object.assign(l, u.overrides);
      }

      u.cast = Object.assign({}, f.cast, u.cast);
      var p = Object.assign({}, f.manifest, u.manifest);
      return p.build = i.build(u.manifest && u.manifest.build, f.manifest && f.manifest.build), u.manifest = p, u.rebuild = i.rebuild(u.rebuild, f.rebuild), c;
    }, i.build = function (e, t) {
      return e && t ? function (r, s) {
        return t(e(r, s), s);
      } : e || t;
    }, i.coerce = function (e, t) {
      return e && t ? {
        from: e.from && t.from ? _toConsumableArray(new Set([].concat(_toConsumableArray(e.from), _toConsumableArray(t.from)))) : null,
        method: function method(r, s) {
          var n;

          if ((!t.from || t.from.includes(_typeof(r))) && (n = t.method(r, s))) {
            if (n.errors || void 0 === n.value) return n;
            r = n.value;
          }

          if (!e.from || e.from.includes(_typeof(r))) {
            var _t31 = e.method(r, s);

            if (_t31) return _t31;
          }

          return n;
        }
      } : e || t;
    }, i.prepare = function (e, t) {
      return e && t ? function (r, s) {
        var n = e(r, s);

        if (n) {
          if (n.errors || void 0 === n.value) return n;
          r = n.value;
        }

        return t(r, s) || n;
      } : e || t;
    }, i.rebuild = function (e, t) {
      return e && t ? function (r) {
        t(r), e(r);
      } : e || t;
    }, i.validate = function (e, t) {
      return e && t ? function (r, s) {
        var n = t(r, s);

        if (n) {
          if (n.errors && (!Array.isArray(n.errors) || n.errors.length)) return n;
          r = n.value;
        }

        return e(r, s) || n;
      } : e || t;
    };
  }, function (e, t) {}, function (e, t) {}, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(10),
        a = {};

    e.exports = a.merge = function (e, t, r) {
      if (s(e && "object" == _typeof(e), "Invalid target value: must be an object"), s(null == t || "object" == _typeof(t), "Invalid source value: must be null, undefined, or an object"), !t) return e;

      if (r = Object.assign({
        nullOverride: !0,
        mergeArrays: !0
      }, r), Array.isArray(t)) {
        s(Array.isArray(e), "Cannot merge array onto an object"), r.mergeArrays || (e.length = 0);

        for (var _s16 = 0; _s16 < t.length; ++_s16) {
          e.push(n(t[_s16], {
            symbols: r.symbols
          }));
        }

        return e;
      }

      var i = o.keys(t, r);

      for (var _s17 = 0; _s17 < i.length; ++_s17) {
        var _o7 = i[_s17];
        if ("__proto__" === _o7 || !Object.prototype.propertyIsEnumerable.call(t, _o7)) continue;
        var l = t[_o7];
        l && "object" == _typeof(l) ? !e[_o7] || "object" != _typeof(e[_o7]) || Array.isArray(e[_o7]) !== Array.isArray(l) || l instanceof Date || l instanceof RegExp ? e[_o7] = n(l, {
          symbols: r.symbols
        }) : a.merge(e[_o7], l, r) : null != l ? e[_o7] = l : r.nullOverride && (e[_o7] = l);
      }

      return e;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(11),
        o = r(1),
        a = {};
    e.exports = a.Values =
    /*#__PURE__*/
    function () {
      function _class10(e, t) {
        _classCallCheck(this, _class10);

        this._values = new Set(e), this._refs = new Set(t), this._lowercase = a.lowercases(e), this._override = !1;
      }

      _createClass(_class10, [{
        key: "add",
        value: function add(e, t) {
          o.isResolvable(e) ? this._refs.has(e) || (this._refs.add(e), t && t.register(e)) : this.has(e, null, null, !1) || (this._values.add(e), "string" == typeof e && this._lowercase.set(e.toLowerCase(), e));
        }
      }, {
        key: "remove",
        value: function remove(e) {
          o.isResolvable(e) ? this._refs["delete"](e) : (this._values["delete"](e), "string" == typeof e && this._lowercase["delete"](e.toLowerCase()));
        }
      }, {
        key: "has",
        value: function has(e, t, r, s) {
          return !!this.get(e, t, r, s);
        }
      }, {
        key: "get",
        value: function get(e, t, r, s) {
          if (!this.length) return !1;
          if (this._values.has(e)) return {
            value: e
          };

          if ("string" == typeof e && e && s) {
            var _t32 = this._lowercase.get(e.toLowerCase());

            if (_t32) return {
              value: _t32
            };
          }

          if (!this._refs.size && "object" != _typeof(e)) return !1;

          if ("object" == _typeof(e)) {
            var _iteratorNormalCompletion33 = true;
            var _didIteratorError33 = false;
            var _iteratorError33 = undefined;

            try {
              for (var _iterator33 = this._values[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var _t33 = _step33.value;
                if (n(_t33, e)) return {
                  value: _t33
                };
              }
            } catch (err) {
              _didIteratorError33 = true;
              _iteratorError33 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion33 && _iterator33["return"] != null) {
                  _iterator33["return"]();
                }
              } finally {
                if (_didIteratorError33) {
                  throw _iteratorError33;
                }
              }
            }
          }

          if (t) {
            var _iteratorNormalCompletion34 = true;
            var _didIteratorError34 = false;
            var _iteratorError34 = undefined;

            try {
              for (var _iterator34 = this._refs[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                var _o8 = _step34.value;

                var _a4 = _o8.resolve(e, t, r, null, {
                  "in": !0
                });

                if (void 0 === _a4) continue;
                var i = _o8["in"] && "object" == _typeof(_a4) ? Array.isArray(_a4) ? _a4 : Object.keys(_a4) : [_a4];
                var _iteratorNormalCompletion35 = true;
                var _didIteratorError35 = false;
                var _iteratorError35 = undefined;

                try {
                  for (var _iterator35 = i[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                    var _t34 = _step35.value;
                    if (_typeof(_t34) == _typeof(e)) if (s && e && "string" == typeof e) {
                      if (_t34.toLowerCase() === e.toLowerCase()) return {
                        value: _t34,
                        ref: _o8
                      };
                    } else if (n(_t34, e)) return {
                      value: _t34,
                      ref: _o8
                    };
                  }
                } catch (err) {
                  _didIteratorError35 = true;
                  _iteratorError35 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion35 && _iterator35["return"] != null) {
                      _iterator35["return"]();
                    }
                  } finally {
                    if (_didIteratorError35) {
                      throw _iteratorError35;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError34 = true;
              _iteratorError34 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion34 && _iterator34["return"] != null) {
                  _iterator34["return"]();
                }
              } finally {
                if (_didIteratorError34) {
                  throw _iteratorError34;
                }
              }
            }
          }

          return !1;
        }
      }, {
        key: "override",
        value: function override() {
          this._override = !0;
        }
      }, {
        key: "values",
        value: function values(e) {
          if (e && e.display) {
            var _e35 = [];

            for (var _i9 = 0, _arr5 = [].concat(_toConsumableArray(this._values), _toConsumableArray(this._refs)); _i9 < _arr5.length; _i9++) {
              var _t35 = _arr5[_i9];
              void 0 !== _t35 && _e35.push(_t35);
            }

            return _e35;
          }

          return Array.from([].concat(_toConsumableArray(this._values), _toConsumableArray(this._refs)));
        }
      }, {
        key: "clone",
        value: function clone() {
          var e = new a.Values(this._values, this._refs);
          return e._override = this._override, e;
        }
      }, {
        key: "concat",
        value: function concat(e) {
          s(!e._override, "Cannot concat override set of values");
          var t = new a.Values([].concat(_toConsumableArray(this._values), _toConsumableArray(e._values)), [].concat(_toConsumableArray(this._refs), _toConsumableArray(e._refs)));
          return t._override = this._override, t;
        }
      }, {
        key: "describe",
        value: function describe() {
          var e = [];
          this._override && e.push({
            override: !0
          });
          var _iteratorNormalCompletion36 = true;
          var _didIteratorError36 = false;
          var _iteratorError36 = undefined;

          try {
            for (var _iterator36 = this._values.values()[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
              var _t36 = _step36.value;
              e.push(_t36 && "object" == _typeof(_t36) ? {
                value: _t36
              } : _t36);
            }
          } catch (err) {
            _didIteratorError36 = true;
            _iteratorError36 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion36 && _iterator36["return"] != null) {
                _iterator36["return"]();
              }
            } finally {
              if (_didIteratorError36) {
                throw _iteratorError36;
              }
            }
          }

          var _iteratorNormalCompletion37 = true;
          var _didIteratorError37 = false;
          var _iteratorError37 = undefined;

          try {
            for (var _iterator37 = this._refs.values()[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
              var _t37 = _step37.value;
              e.push(_t37.describe());
            }
          } catch (err) {
            _didIteratorError37 = true;
            _iteratorError37 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion37 && _iterator37["return"] != null) {
                _iterator37["return"]();
              }
            } finally {
              if (_didIteratorError37) {
                throw _iteratorError37;
              }
            }
          }

          return e;
        }
      }, {
        key: "length",
        get: function get() {
          return this._values.size + this._refs.size;
        }
      }], [{
        key: "merge",
        value: function merge(e, t, r) {
          if (e = e || new a.Values(), t) {
            if (t._override) return t.clone();

            for (var _i10 = 0, _arr6 = [].concat(_toConsumableArray(t._values), _toConsumableArray(t._refs)); _i10 < _arr6.length; _i10++) {
              var _r24 = _arr6[_i10];
              e.add(_r24);
            }
          }

          if (r) {
            for (var _i11 = 0, _arr7 = [].concat(_toConsumableArray(r._values), _toConsumableArray(r._refs)); _i11 < _arr7.length; _i11++) {
              var _t38 = _arr7[_i11];
              e.remove(_t38);
            }
          }

          return e.length ? e : null;
        }
      }]);

      return _class10;
    }(), a.Values.prototype[o.symbols.values] = !0, a.Values.prototype.slice = a.Values.prototype.clone, a.lowercases = function (e) {
      var t = new Map();

      if (e) {
        var _iteratorNormalCompletion38 = true;
        var _didIteratorError38 = false;
        var _iteratorError38 = undefined;

        try {
          for (var _iterator38 = e[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
            var _r25 = _step38.value;
            "string" == typeof _r25 && t.set(_r25.toLowerCase(), _r25);
          }
        } catch (err) {
          _didIteratorError38 = true;
          _iteratorError38 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion38 && _iterator38["return"] != null) {
              _iterator38["return"]();
            }
          } finally {
            if (_didIteratorError38) {
              throw _iteratorError38;
            }
          }
        }
      }

      return t;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(41),
        n = r(0),
        o = r(2),
        a = r(42),
        i = r(3),
        l = r(1),
        c = r(7),
        u = r(4),
        f = r(5),
        h = r(6),
        m = {
      renameDefaults: {
        alias: !1,
        multiple: !1,
        override: !1
      }
    };
    e.exports = i.extend({
      type: "_keys",
      properties: {
        "typeof": "object"
      },
      flags: {
        unknown: {
          "default": !1
        }
      },
      terms: {
        dependencies: {
          init: null
        },
        keys: {
          init: null,
          manifest: {
            mapped: {
              from: "schema",
              to: "key"
            }
          }
        },
        patterns: {
          init: null
        },
        renames: {
          init: null
        }
      },
      args: function args(e, t) {
        return e.keys(t);
      },
      validate: function validate(e, t) {
        var r = t.schema,
            s = t.error,
            n = t.state,
            o = t.prefs;
        if (!e || _typeof(e) !== r.$_property("typeof") || Array.isArray(e)) return {
          value: e,
          errors: s("object.base", {
            type: r.$_property("typeof")
          })
        };
        if (!(r.$_terms.renames || r.$_terms.dependencies || r.$_terms.keys || r.$_terms.patterns || r.$_terms.externals)) return;
        e = m.clone(e, o);
        var a = [];
        if (r.$_terms.renames && !m.rename(r, e, n, o, a)) return {
          value: e,
          errors: a
        };
        if (!r.$_terms.keys && !r.$_terms.patterns && !r.$_terms.dependencies) return {
          value: e,
          errors: a
        };
        var i = new Set(Object.keys(e));

        if (r.$_terms.keys) {
          var _t39 = [e].concat(_toConsumableArray(n.ancestors));

          var _iteratorNormalCompletion39 = true;
          var _didIteratorError39 = false;
          var _iteratorError39 = undefined;

          try {
            for (var _iterator39 = r.$_terms.keys[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {
              var _s18 = _step39.value;
              var _r26 = _s18.key,
                  _l4 = e[_r26];
              i["delete"](_r26);

              var _c3 = n.localize([].concat(_toConsumableArray(n.path), [_r26]), _t39, _s18),
                  _u = _s18.schema.$_validate(_l4, _c3, o);

              if (_u.errors) {
                if (o.abortEarly) return {
                  value: e,
                  errors: _u.errors
                };
                a.push.apply(a, _toConsumableArray(_u.errors));
              } else "strip" === _s18.schema._flags.result || void 0 === _u.value && void 0 !== _l4 ? delete e[_r26] : void 0 !== _u.value && (e[_r26] = _u.value);
            }
          } catch (err) {
            _didIteratorError39 = true;
            _iteratorError39 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion39 && _iterator39["return"] != null) {
                _iterator39["return"]();
              }
            } finally {
              if (_didIteratorError39) {
                throw _iteratorError39;
              }
            }
          }
        }

        if (i.size) {
          var _t40 = m.unknown(r, e, i, a, n, o);

          if (_t40) return _t40;
        }

        if (r.$_terms.dependencies) {
          var _iteratorNormalCompletion40 = true;
          var _didIteratorError40 = false;
          var _iteratorError40 = undefined;

          try {
            for (var _iterator40 = r.$_terms.dependencies[Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {
              var _t41 = _step40.value;
              if (_t41.key && void 0 === _t41.key.resolve(e, n, o, null, {
                shadow: !1
              })) continue;

              var _s19 = m.dependencies[_t41.rel](r, _t41, e, n, o);

              if (_s19) {
                var _t42 = r.$_createError(_s19.code, e, _s19.context, n, o);

                if (o.abortEarly) return {
                  value: e,
                  errors: _t42
                };
                a.push(_t42);
              }
            }
          } catch (err) {
            _didIteratorError40 = true;
            _iteratorError40 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion40 && _iterator40["return"] != null) {
                _iterator40["return"]();
              }
            } finally {
              if (_didIteratorError40) {
                throw _iteratorError40;
              }
            }
          }
        }

        return {
          value: e,
          errors: a
        };
      },
      rules: {
        and: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return l.verifyFlat(t, "and"), m.dependency(this, "and", null, t);
          }
        },
        append: {
          method: function method(e) {
            return null == e || 0 === Object.keys(e).length ? this : this.keys(e);
          }
        },
        assert: {
          method: function method(e, t, r) {
            h.isTemplate(e) || (e = c.ref(e)), n(void 0 === r || "string" == typeof r, "Message must be a string"), t = this.$_compile(t, {
              appendPath: !0
            });
            var s = this.$_addRule({
              name: "assert",
              args: {
                subject: e,
                schema: t,
                message: r
              }
            });
            return s.$_mutateRegister(e), s.$_mutateRegister(t), s;
          },
          validate: function validate(e, t, r) {
            var s = t.error,
                n = t.prefs,
                o = t.state,
                a = r.subject,
                i = r.schema,
                l = r.message;
            var c = a.resolve(e, o, n),
                u = f.isRef(a) ? a.absolute(o) : [];
            return i.$_match(c, o.localize(u, [e].concat(_toConsumableArray(o.ancestors)), i), n) ? e : s("object.assert", {
              subject: a,
              message: l
            });
          },
          args: ["subject", "schema", "message"],
          multi: !0
        },
        instance: {
          method: function method(e, t) {
            return n("function" == typeof e, "constructor must be a function"), t = t || e.name, this.$_addRule({
              name: "instance",
              args: {
                constructor: e,
                name: t
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.constructor,
                n = r.name;
            return e instanceof s ? e : t.error("object.instance", {
              type: n,
              value: e
            });
          },
          args: ["constructor", "name"]
        },
        keys: {
          method: function method(e) {
            var _this6 = this;

            n(void 0 === e || "object" == _typeof(e), "Object schema must be a valid object"), n(!l.isSchema(e), "Object schema cannot be a joi schema");
            var t = this.clone();
            if (e) {
              if (Object.keys(e).length) {
                t.$_terms.keys = t.$_terms.keys ? t.$_terms.keys.filter(function (t) {
                  return !e.hasOwnProperty(t.key);
                }) : [];

                var _loop7 = function _loop7(_r27) {
                  l.tryWithPath(function () {
                    return t.$_terms.keys.push({
                      key: _r27,
                      schema: _this6.$_compile(e[_r27])
                    });
                  }, _r27);
                };

                for (var _r27 in e) {
                  _loop7(_r27);
                }
              } else t.$_terms.keys = [];
            } else t.$_terms.keys = null;
            return t.$_mutateRebuild();
          }
        },
        length: {
          method: function method(e) {
            return this.$_addRule({
              name: "length",
              args: {
                limit: e
              },
              operator: "="
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.limit,
                o = s.name,
                a = s.operator,
                i = s.args;
            return l.compare(Object.keys(e).length, n, a) ? e : t.error("object." + o, {
              limit: i.limit,
              value: e
            });
          },
          args: [{
            name: "limit",
            ref: !0,
            assert: l.limit,
            message: "must be a positive integer"
          }]
        },
        max: {
          method: function method(e) {
            return this.$_addRule({
              name: "max",
              method: "length",
              args: {
                limit: e
              },
              operator: "<="
            });
          }
        },
        min: {
          method: function method(e) {
            return this.$_addRule({
              name: "min",
              method: "length",
              args: {
                limit: e
              },
              operator: ">="
            });
          }
        },
        nand: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return l.verifyFlat(t, "nand"), m.dependency(this, "nand", null, t);
          }
        },
        or: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return l.verifyFlat(t, "or"), m.dependency(this, "or", null, t);
          }
        },
        oxor: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return m.dependency(this, "oxor", null, t);
          }
        },
        pattern: {
          method: function method(e, t) {
            var _a5;

            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            var s = e instanceof RegExp;
            s || (e = this.$_compile(e, {
              appendPath: !0
            })), n(void 0 !== t, "Invalid rule"), l.assertOptions(r, ["fallthrough", "matches"]), s && n(!e.flags.includes("g") && !e.flags.includes("y"), "pattern should not use global or sticky mode"), t = this.$_compile(t, {
              appendPath: !0
            });
            var o = this.clone();
            o.$_terms.patterns = o.$_terms.patterns || [];
            var a = (_a5 = {}, _defineProperty(_a5, s ? "regex" : "schema", e), _defineProperty(_a5, "rule", t), _a5);
            return r.matches && (a.matches = this.$_compile(r.matches), "array" !== a.matches.type && (a.matches = a.matches.$_root.array().items(a.matches)), o.$_mutateRegister(a.matches)), r.fallthrough && (a.fallthrough = !0), o.$_terms.patterns.push(a), o.$_mutateRegister(t), o;
          }
        },
        ref: {
          method: function method() {
            return this.$_addRule("ref");
          },
          validate: function validate(e, t) {
            return f.isRef(e) ? e : t.error("object.refType", {
              value: e
            });
          }
        },
        rename: {
          method: function method(e, t) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            n("string" == typeof e || e instanceof RegExp, "Rename missing the from argument"), n("string" == typeof t || t instanceof h, "Invalid rename to argument"), n(t !== e, "Cannot rename key to same name:", e), l.assertOptions(r, ["alias", "ignoreUndefined", "override", "multiple"]);
            var o = this.clone();
            o.$_terms.renames = o.$_terms.renames || [];
            var _iteratorNormalCompletion41 = true;
            var _didIteratorError41 = false;
            var _iteratorError41 = undefined;

            try {
              for (var _iterator41 = o.$_terms.renames[Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {
                var _t43 = _step41.value;
                n(_t43.from !== e, "Cannot rename the same key multiple times");
              }
            } catch (err) {
              _didIteratorError41 = true;
              _iteratorError41 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion41 && _iterator41["return"] != null) {
                  _iterator41["return"]();
                }
              } finally {
                if (_didIteratorError41) {
                  throw _iteratorError41;
                }
              }
            }

            return t instanceof h && o.$_mutateRegister(t), o.$_terms.renames.push({
              from: e,
              to: t,
              options: s(m.renameDefaults, r)
            }), o;
          }
        },
        schema: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "any";
            return this.$_addRule({
              name: "schema",
              args: {
                type: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.type;
            return !l.isSchema(e) || "any" !== s && e.type !== s ? t.error("object.schema", {
              type: s
            }) : e;
          }
        },
        unknown: {
          method: function method(e) {
            return this.$_setFlag("unknown", !1 !== e);
          }
        },
        "with": {
          method: function method(e, t) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            return m.dependency(this, "with", e, t, r);
          }
        },
        without: {
          method: function method(e, t) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            return m.dependency(this, "without", e, t, r);
          }
        },
        xor: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return l.verifyFlat(t, "xor"), m.dependency(this, "xor", null, t);
          }
        }
      },
      overrides: {
        "default": function _default(e, t) {
          return void 0 === e && (e = l.symbols.deepDefault), this.$_super["default"](e, t);
        }
      },
      rebuild: function rebuild(e) {
        if (e.$_terms.keys) {
          (function () {
            var t = new a();
            var _iteratorNormalCompletion42 = true;
            var _didIteratorError42 = false;
            var _iteratorError42 = undefined;

            try {
              var _loop8 = function _loop8() {
                var r = _step42.value;
                l.tryWithPath(function () {
                  return t.add(r, {
                    after: r.schema.$_rootReferences(),
                    group: r.key
                  });
                }, r.key);
              };

              for (var _iterator42 = e.$_terms.keys[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {
                _loop8();
              }
            } catch (err) {
              _didIteratorError42 = true;
              _iteratorError42 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion42 && _iterator42["return"] != null) {
                  _iterator42["return"]();
                }
              } finally {
                if (_didIteratorError42) {
                  throw _iteratorError42;
                }
              }
            }

            e.$_terms.keys = _construct(m.Keys, _toConsumableArray(t.nodes));
          })();
        }
      },
      manifest: {
        build: function build(e, t) {
          if (t.keys && (e = e.keys(t.keys)), t.dependencies) {
            var _iteratorNormalCompletion43 = true;
            var _didIteratorError43 = false;
            var _iteratorError43 = undefined;

            try {
              for (var _iterator43 = t.dependencies[Symbol.iterator](), _step43; !(_iteratorNormalCompletion43 = (_step43 = _iterator43.next()).done); _iteratorNormalCompletion43 = true) {
                var _r28 = _step43.value;

                var _t44 = _r28.rel,
                    _r28$key = _r28.key,
                    _s20 = _r28$key === void 0 ? null : _r28$key,
                    _n12 = _r28.peers,
                    _o9 = _r28.options;

                e = m.dependency(e, _t44, _s20, _n12, _o9);
              }
            } catch (err) {
              _didIteratorError43 = true;
              _iteratorError43 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion43 && _iterator43["return"] != null) {
                  _iterator43["return"]();
                }
              } finally {
                if (_didIteratorError43) {
                  throw _iteratorError43;
                }
              }
            }
          }

          if (t.patterns) {
            var _iteratorNormalCompletion44 = true;
            var _didIteratorError44 = false;
            var _iteratorError44 = undefined;

            try {
              for (var _iterator44 = t.patterns[Symbol.iterator](), _step44; !(_iteratorNormalCompletion44 = (_step44 = _iterator44.next()).done); _iteratorNormalCompletion44 = true) {
                var _r29 = _step44.value;
                var _t45 = _r29.regex,
                    _s21 = _r29.schema,
                    _n13 = _r29.rule,
                    _o10 = _r29.fallthrough,
                    _a6 = _r29.matches;
                e = e.pattern(_t45 || _s21, _n13, {
                  fallthrough: _o10,
                  matches: _a6
                });
              }
            } catch (err) {
              _didIteratorError44 = true;
              _iteratorError44 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion44 && _iterator44["return"] != null) {
                  _iterator44["return"]();
                }
              } finally {
                if (_didIteratorError44) {
                  throw _iteratorError44;
                }
              }
            }
          }

          if (t.renames) {
            var _iteratorNormalCompletion45 = true;
            var _didIteratorError45 = false;
            var _iteratorError45 = undefined;

            try {
              for (var _iterator45 = t.renames[Symbol.iterator](), _step45; !(_iteratorNormalCompletion45 = (_step45 = _iterator45.next()).done); _iteratorNormalCompletion45 = true) {
                var _r30 = _step45.value;
                var _t46 = _r30.from,
                    _s22 = _r30.to,
                    _n14 = _r30.options;
                e = e.rename(_t46, _s22, _n14);
              }
            } catch (err) {
              _didIteratorError45 = true;
              _iteratorError45 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion45 && _iterator45["return"] != null) {
                  _iterator45["return"]();
                }
              } finally {
                if (_didIteratorError45) {
                  throw _iteratorError45;
                }
              }
            }
          }

          return e;
        }
      },
      messages: {
        "object.and": '"{{#label}}" contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}',
        "object.assert": '"{{#label}}" is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',
        "object.base": '"{{#label}}" must be of type {{#type}}',
        "object.instance": '"{{#label}}" must be an instance of "{{#type}}"',
        "object.length": '"{{#label}}" must have {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.max": '"{{#label}}" must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.min": '"{{#label}}" must have at least {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.missing": '"{{#label}}" must contain at least one of {{#peersWithLabels}}',
        "object.nand": '"{{#mainWithLabel}}" must not exist simultaneously with {{#peersWithLabels}}',
        "object.oxor": '"{{#label}}" contains a conflict between optional exclusive peers {{#peersWithLabels}}',
        "object.pattern.match": '"{{#label}}" keys failed to match pattern requirements',
        "object.refType": '"{{#label}}" must be a Joi reference',
        "object.rename.multiple": '"{{#label}}" cannot rename "{{#from}}" because multiple renames are disabled and another key was already renamed to "{{#to}}"',
        "object.rename.override": '"{{#label}}" cannot rename "{{#from}}" because override is disabled and target "{{#to}}" exists',
        "object.schema": '"{{#label}}" must be a Joi schema of {{#type}} type',
        "object.unknown": '"{{#label}}" is not allowed',
        "object.with": '"{{#mainWithLabel}}" missing required peer "{{#peerWithLabel}}"',
        "object.without": '"{{#mainWithLabel}}" conflict with forbidden peer "{{#peerWithLabel}}"',
        "object.xor": '"{{#label}}" contains a conflict between exclusive peers {{#peersWithLabels}}'
      }
    }), m.clone = function (e, t) {
      if ("object" == _typeof(e)) {
        if (t.nonEnumerables) return o(e, {
          shallow: !0
        });

        var _r31 = Object.create(Object.getPrototypeOf(e));

        return Object.assign(_r31, e), _r31;
      }

      var r = function r() {
        for (var t = arguments.length, r = new Array(t), s = 0; s < t; s++) {
          r[s] = arguments[s];
        }

        return e.apply(this, r);
      };

      return r.prototype = o(e.prototype), Object.defineProperty(r, "name", {
        value: e.name,
        writable: !1
      }), Object.defineProperty(r, "length", {
        value: e.length,
        writable: !1
      }), Object.assign(r, e), r;
    }, m.dependency = function (e, t, r, s, o) {
      n(null === r || "string" == typeof r, t, "key must be a strings"), o || (o = s.length > 1 && "object" == _typeof(s[s.length - 1]) ? s.pop() : {}), l.assertOptions(o, ["separator"]), s = [].concat(s);
      var a = l["default"](o.separator, "."),
          i = [];
      var _iteratorNormalCompletion46 = true;
      var _didIteratorError46 = false;
      var _iteratorError46 = undefined;

      try {
        for (var _iterator46 = s[Symbol.iterator](), _step46; !(_iteratorNormalCompletion46 = (_step46 = _iterator46.next()).done); _iteratorNormalCompletion46 = true) {
          var _e36 = _step46.value;
          n("string" == typeof _e36, t, "peers must be a string or a reference"), i.push(c.ref(_e36, {
            separator: a,
            ancestor: 0
          }));
        }
      } catch (err) {
        _didIteratorError46 = true;
        _iteratorError46 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion46 && _iterator46["return"] != null) {
            _iterator46["return"]();
          }
        } finally {
          if (_didIteratorError46) {
            throw _iteratorError46;
          }
        }
      }

      null !== r && (r = c.ref(r, {
        separator: a,
        ancestor: 0
      }));
      var u = e.clone();
      return u.$_terms.dependencies = u.$_terms.dependencies || [], u.$_terms.dependencies.push(new m.Dependency(t, r, i, s)), u;
    }, m.dependencies = {
      and: function and(e, t, r, s, n) {
        var o = [],
            a = [],
            i = t.peers.length;
        var _iteratorNormalCompletion47 = true;
        var _didIteratorError47 = false;
        var _iteratorError47 = undefined;

        try {
          for (var _iterator47 = t.peers[Symbol.iterator](), _step47; !(_iteratorNormalCompletion47 = (_step47 = _iterator47.next()).done); _iteratorNormalCompletion47 = true) {
            var _e37 = _step47.value;
            void 0 === _e37.resolve(r, s, n, null, {
              shadow: !1
            }) ? o.push(_e37.key) : a.push(_e37.key);
          }
        } catch (err) {
          _didIteratorError47 = true;
          _iteratorError47 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion47 && _iterator47["return"] != null) {
              _iterator47["return"]();
            }
          } finally {
            if (_didIteratorError47) {
              throw _iteratorError47;
            }
          }
        }

        if (o.length !== i && a.length !== i) return {
          code: "object.and",
          context: {
            present: a,
            presentWithLabels: m.keysToLabels(e, a),
            missing: o,
            missingWithLabels: m.keysToLabels(e, o)
          }
        };
      },
      nand: function nand(e, t, r, s, n) {
        var o = [];
        var _iteratorNormalCompletion48 = true;
        var _didIteratorError48 = false;
        var _iteratorError48 = undefined;

        try {
          for (var _iterator48 = t.peers[Symbol.iterator](), _step48; !(_iteratorNormalCompletion48 = (_step48 = _iterator48.next()).done); _iteratorNormalCompletion48 = true) {
            var _e38 = _step48.value;
            void 0 !== _e38.resolve(r, s, n, null, {
              shadow: !1
            }) && o.push(_e38.key);
          }
        } catch (err) {
          _didIteratorError48 = true;
          _iteratorError48 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion48 && _iterator48["return"] != null) {
              _iterator48["return"]();
            }
          } finally {
            if (_didIteratorError48) {
              throw _iteratorError48;
            }
          }
        }

        if (o.length !== t.peers.length) return;
        var a = t.paths[0],
            i = t.paths.slice(1);
        return {
          code: "object.nand",
          context: {
            main: a,
            mainWithLabel: m.keysToLabels(e, a),
            peers: i,
            peersWithLabels: m.keysToLabels(e, i)
          }
        };
      },
      or: function or(e, t, r, s, n) {
        var _iteratorNormalCompletion49 = true;
        var _didIteratorError49 = false;
        var _iteratorError49 = undefined;

        try {
          for (var _iterator49 = t.peers[Symbol.iterator](), _step49; !(_iteratorNormalCompletion49 = (_step49 = _iterator49.next()).done); _iteratorNormalCompletion49 = true) {
            var _e39 = _step49.value;
            if (void 0 !== _e39.resolve(r, s, n, null, {
              shadow: !1
            })) return;
          }
        } catch (err) {
          _didIteratorError49 = true;
          _iteratorError49 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion49 && _iterator49["return"] != null) {
              _iterator49["return"]();
            }
          } finally {
            if (_didIteratorError49) {
              throw _iteratorError49;
            }
          }
        }

        return {
          code: "object.missing",
          context: {
            peers: t.paths,
            peersWithLabels: m.keysToLabels(e, t.paths)
          }
        };
      },
      oxor: function oxor(e, t, r, s, n) {
        var o = [];
        var _iteratorNormalCompletion50 = true;
        var _didIteratorError50 = false;
        var _iteratorError50 = undefined;

        try {
          for (var _iterator50 = t.peers[Symbol.iterator](), _step50; !(_iteratorNormalCompletion50 = (_step50 = _iterator50.next()).done); _iteratorNormalCompletion50 = true) {
            var _e40 = _step50.value;
            void 0 !== _e40.resolve(r, s, n, null, {
              shadow: !1
            }) && o.push(_e40.key);
          }
        } catch (err) {
          _didIteratorError50 = true;
          _iteratorError50 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion50 && _iterator50["return"] != null) {
              _iterator50["return"]();
            }
          } finally {
            if (_didIteratorError50) {
              throw _iteratorError50;
            }
          }
        }

        if (!o.length || 1 === o.length) return;
        var a = {
          peers: t.paths,
          peersWithLabels: m.keysToLabels(e, t.paths)
        };
        return a.present = o, a.presentWithLabels = m.keysToLabels(e, o), {
          code: "object.oxor",
          context: a
        };
      },
      "with": function _with(e, t, r, s, n) {
        var _iteratorNormalCompletion51 = true;
        var _didIteratorError51 = false;
        var _iteratorError51 = undefined;

        try {
          for (var _iterator51 = t.peers[Symbol.iterator](), _step51; !(_iteratorNormalCompletion51 = (_step51 = _iterator51.next()).done); _iteratorNormalCompletion51 = true) {
            var _o11 = _step51.value;
            if (void 0 === _o11.resolve(r, s, n, null, {
              shadow: !1
            })) return {
              code: "object.with",
              context: {
                main: t.key.key,
                mainWithLabel: m.keysToLabels(e, t.key.key),
                peer: _o11.key,
                peerWithLabel: m.keysToLabels(e, _o11.key)
              }
            };
          }
        } catch (err) {
          _didIteratorError51 = true;
          _iteratorError51 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion51 && _iterator51["return"] != null) {
              _iterator51["return"]();
            }
          } finally {
            if (_didIteratorError51) {
              throw _iteratorError51;
            }
          }
        }
      },
      without: function without(e, t, r, s, n) {
        var _iteratorNormalCompletion52 = true;
        var _didIteratorError52 = false;
        var _iteratorError52 = undefined;

        try {
          for (var _iterator52 = t.peers[Symbol.iterator](), _step52; !(_iteratorNormalCompletion52 = (_step52 = _iterator52.next()).done); _iteratorNormalCompletion52 = true) {
            var _o12 = _step52.value;
            if (void 0 !== _o12.resolve(r, s, n, null, {
              shadow: !1
            })) return {
              code: "object.without",
              context: {
                main: t.key.key,
                mainWithLabel: m.keysToLabels(e, t.key.key),
                peer: _o12.key,
                peerWithLabel: m.keysToLabels(e, _o12.key)
              }
            };
          }
        } catch (err) {
          _didIteratorError52 = true;
          _iteratorError52 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion52 && _iterator52["return"] != null) {
              _iterator52["return"]();
            }
          } finally {
            if (_didIteratorError52) {
              throw _iteratorError52;
            }
          }
        }
      },
      xor: function xor(e, t, r, s, n) {
        var o = [];
        var _iteratorNormalCompletion53 = true;
        var _didIteratorError53 = false;
        var _iteratorError53 = undefined;

        try {
          for (var _iterator53 = t.peers[Symbol.iterator](), _step53; !(_iteratorNormalCompletion53 = (_step53 = _iterator53.next()).done); _iteratorNormalCompletion53 = true) {
            var _e41 = _step53.value;
            void 0 !== _e41.resolve(r, s, n, null, {
              shadow: !1
            }) && o.push(_e41.key);
          }
        } catch (err) {
          _didIteratorError53 = true;
          _iteratorError53 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion53 && _iterator53["return"] != null) {
              _iterator53["return"]();
            }
          } finally {
            if (_didIteratorError53) {
              throw _iteratorError53;
            }
          }
        }

        if (1 === o.length) return;
        var a = {
          peers: t.paths,
          peersWithLabels: m.keysToLabels(e, t.paths)
        };
        return 0 === o.length ? {
          code: "object.missing",
          context: a
        } : (a.present = o, a.presentWithLabels = m.keysToLabels(e, o), {
          code: "object.xor",
          context: a
        });
      }
    }, m.keysToLabels = function (e, t) {
      return Array.isArray(t) ? t.map(function (t) {
        return e.$_mapLabels(t);
      }) : e.$_mapLabels(t);
    }, m.rename = function (e, t, r, s, n) {
      var o = {};
      var _iteratorNormalCompletion54 = true;
      var _didIteratorError54 = false;
      var _iteratorError54 = undefined;

      try {
        for (var _iterator54 = e.$_terms.renames[Symbol.iterator](), _step54; !(_iteratorNormalCompletion54 = (_step54 = _iterator54.next()).done); _iteratorNormalCompletion54 = true) {
          var _a7 = _step54.value;

          var _i12 = [],
              _l5 = "string" != typeof _a7.from;

          if (_l5) for (var _e42 in t) {
            if (void 0 === t[_e42] && _a7.options.ignoreUndefined) continue;
            if (_e42 === _a7.to) continue;

            var _r32 = _a7.from.exec(_e42);

            _r32 && _i12.push({
              from: _e42,
              to: _a7.to,
              match: _r32
            });
          } else !Object.prototype.hasOwnProperty.call(t, _a7.from) || void 0 === t[_a7.from] && _a7.options.ignoreUndefined || _i12.push(_a7);

          for (var _i14 = 0, _i13 = _i12; _i14 < _i13.length; _i14++) {
            var _c4 = _i13[_i14];
            var _i15 = _c4.from;
            var _u2 = _c4.to;

            if (_u2 instanceof h && (_u2 = _u2.render(t, r, s, _c4.match)), _i15 !== _u2) {
              if (!_a7.options.multiple && o[_u2] && (n.push(e.$_createError("object.rename.multiple", t, {
                from: _i15,
                to: _u2,
                pattern: _l5
              }, r, s)), s.abortEarly)) return !1;
              if (Object.prototype.hasOwnProperty.call(t, _u2) && !_a7.options.override && !o[_u2] && (n.push(e.$_createError("object.rename.override", t, {
                from: _i15,
                to: _u2,
                pattern: _l5
              }, r, s)), s.abortEarly)) return !1;
              void 0 === t[_i15] ? delete t[_u2] : t[_u2] = t[_i15], o[_u2] = !0, _a7.options.alias || delete t[_i15];
            }
          }
        }
      } catch (err) {
        _didIteratorError54 = true;
        _iteratorError54 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion54 && _iterator54["return"] != null) {
            _iterator54["return"]();
          }
        } finally {
          if (_didIteratorError54) {
            throw _iteratorError54;
          }
        }
      }

      return !0;
    }, m.unknown = function (e, t, r, s, n, o) {
      if (e.$_terms.patterns) {
        var _a8 = !1;

        var _i16 = e.$_terms.patterns.map(function (e) {
          if (e.matches) return _a8 = !0, [];
        }),
            _l6 = [t].concat(_toConsumableArray(n.ancestors));

        var _iteratorNormalCompletion55 = true;
        var _didIteratorError55 = false;
        var _iteratorError55 = undefined;

        try {
          for (var _iterator55 = r[Symbol.iterator](), _step55; !(_iteratorNormalCompletion55 = (_step55 = _iterator55.next()).done); _iteratorNormalCompletion55 = true) {
            var _a10 = _step55.value;

            var _c6 = t[_a10],
                _u3 = [].concat(_toConsumableArray(n.path), [_a10]);

            for (var _f2 = 0; _f2 < e.$_terms.patterns.length; ++_f2) {
              var _h2 = e.$_terms.patterns[_f2];

              if (_h2.regex) {
                var _e43 = _h2.regex.test(_a10);

                if (n.mainstay.tracer.debug(n, "rule", "pattern.".concat(_f2), _e43 ? "pass" : "error"), !_e43) continue;
              } else if (!_h2.schema.$_match(_a10, n.nest(_h2.schema, "pattern.".concat(_f2)), o)) continue;

              r["delete"](_a10);

              var _m = n.localize(_u3, _l6, {
                schema: _h2.rule,
                key: _a10
              }),
                  d = _h2.rule.$_validate(_c6, _m, o);

              if (d.errors) {
                if (o.abortEarly) return {
                  value: t,
                  errors: d.errors
                };
                s.push.apply(s, _toConsumableArray(d.errors));
              }

              if (_h2.matches && _i16[_f2].push(_a10), t[_a10] = d.value, !_h2.fallthrough) break;
            }
          }
        } catch (err) {
          _didIteratorError55 = true;
          _iteratorError55 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion55 && _iterator55["return"] != null) {
              _iterator55["return"]();
            }
          } finally {
            if (_didIteratorError55) {
              throw _iteratorError55;
            }
          }
        }

        if (_a8) for (var _r33 = 0; _r33 < _i16.length; ++_r33) {
          var _a9 = _i16[_r33];
          if (!_a9) continue;

          var _c5 = e.$_terms.patterns[_r33].matches,
              _f = n.localize(n.path, _l6, _c5),
              _h = _c5.$_validate(_a9, _f, o);

          if (_h.errors) {
            var _r34 = u.details(_h.errors, {
              override: !1
            });

            _r34.matches = _a9;

            var _i17 = e.$_createError("object.pattern.match", t, _r34, n, o);

            if (o.abortEarly) return {
              value: t,
              errors: _i17
            };
            s.push(_i17);
          }
        }
      }

      if (!r.size || !e.$_terms.keys && !e.$_terms.patterns) return;

      if (o.stripUnknown && !e._flags.unknown || o.skipFunctions) {
        var _e44 = !!o.stripUnknown && (!0 === o.stripUnknown || !!o.stripUnknown.objects);

        var _iteratorNormalCompletion56 = true;
        var _didIteratorError56 = false;
        var _iteratorError56 = undefined;

        try {
          for (var _iterator56 = r[Symbol.iterator](), _step56; !(_iteratorNormalCompletion56 = (_step56 = _iterator56.next()).done); _iteratorNormalCompletion56 = true) {
            var _s23 = _step56.value;
            _e44 ? (delete t[_s23], r["delete"](_s23)) : "function" == typeof t[_s23] && r["delete"](_s23);
          }
        } catch (err) {
          _didIteratorError56 = true;
          _iteratorError56 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion56 && _iterator56["return"] != null) {
              _iterator56["return"]();
            }
          } finally {
            if (_didIteratorError56) {
              throw _iteratorError56;
            }
          }
        }
      }

      if (!l["default"](e._flags.unknown, o.allowUnknown)) {
        var _iteratorNormalCompletion57 = true;
        var _didIteratorError57 = false;
        var _iteratorError57 = undefined;

        try {
          for (var _iterator57 = r[Symbol.iterator](), _step57; !(_iteratorNormalCompletion57 = (_step57 = _iterator57.next()).done); _iteratorNormalCompletion57 = true) {
            var _a11 = _step57.value;

            var _r35 = n.localize([].concat(_toConsumableArray(n.path), [_a11]), []),
                _i18 = e.$_createError("object.unknown", t[_a11], {
              child: _a11
            }, _r35, o, {
              flags: !1
            });

            if (o.abortEarly) return {
              value: t,
              errors: _i18
            };
            s.push(_i18);
          }
        } catch (err) {
          _didIteratorError57 = true;
          _iteratorError57 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion57 && _iterator57["return"] != null) {
              _iterator57["return"]();
            }
          } finally {
            if (_didIteratorError57) {
              throw _iteratorError57;
            }
          }
        }
      }
    }, m.Dependency =
    /*#__PURE__*/
    function () {
      function _class11(e, t, r, s) {
        _classCallCheck(this, _class11);

        this.rel = e, this.key = t, this.peers = r, this.paths = s;
      }

      _createClass(_class11, [{
        key: "describe",
        value: function describe() {
          var e = {
            rel: this.rel,
            peers: this.paths
          };
          return null !== this.key && (e.key = this.key.key), "." !== this.peers[0].separator && (e.options = {
            separator: this.peers[0].separator
          }), e;
        }
      }]);

      return _class11;
    }(), m.Keys =
    /*#__PURE__*/
    function (_Array) {
      _inherits(_class12, _Array);

      function _class12() {
        _classCallCheck(this, _class12);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class12).apply(this, arguments));
      }

      _createClass(_class12, [{
        key: "concat",
        value: function concat(e) {
          var t = this.slice(),
              r = new Map();

          for (var _e45 = 0; _e45 < t.length; ++_e45) {
            r.set(t[_e45].key, _e45);
          }

          var _iteratorNormalCompletion58 = true;
          var _didIteratorError58 = false;
          var _iteratorError58 = undefined;

          try {
            for (var _iterator58 = e[Symbol.iterator](), _step58; !(_iteratorNormalCompletion58 = (_step58 = _iterator58.next()).done); _iteratorNormalCompletion58 = true) {
              var _s24 = _step58.value;

              var _e46 = _s24.key,
                  _n15 = r.get(_e46);

              void 0 !== _n15 ? t[_n15] = {
                key: _e46,
                schema: t[_n15].schema.concat(_s24.schema)
              } : t.push(_s24);
            }
          } catch (err) {
            _didIteratorError58 = true;
            _iteratorError58 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion58 && _iterator58["return"] != null) {
                _iterator58["return"]();
              }
            } finally {
              if (_didIteratorError58) {
                throw _iteratorError58;
              }
            }
          }

          return t;
        }
      }]);

      return _class12;
    }(_wrapNativeSuper(Array));
  }, function (e, t, r) {
    "use strict";

    var s = {
      minDomainSegments: 2,
      nonAsciiRx: /[^\x00-\x7f]/,
      domainControlRx: /[\x00-\x20]/,
      tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
      domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
      URL: r(24).URL || URL
    };
    t.analyze = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      if ("string" != typeof e) throw new Error("Invalid input: domain must be a string");
      if (!e) return {
        error: "Domain must be a non-empty string"
      };
      if (e.length > 256) return {
        error: "Domain too long"
      };
      var r = !s.nonAsciiRx.test(e);

      if (!r) {
        if (!1 === t.allowUnicode) return {
          error: "Domain contains forbidden Unicode characters"
        };
        e = e.normalize("NFC");
      }

      if (s.domainControlRx.test(e)) return {
        error: "Domain contains invalid character"
      };
      e = s.punycode(e);
      var n = t.minDomainSegments || s.minDomainSegments,
          o = e.split(".");
      if (o.length < n) return {
        error: "Domain lacks the minimum required number of segments"
      };
      var a = t.tlds;

      if (a) {
        var _e47 = o[o.length - 1].toLowerCase();

        if (a.deny && a.deny.has(_e47) || a.allow && !a.allow.has(_e47)) return {
          error: "Domain uses forbidden TLD"
        };
      }

      for (var _e48 = 0; _e48 < o.length; ++_e48) {
        var _t47 = o[_e48];
        if (!_t47.length) return {
          error: "Domain contains empty dot-separated segment"
        };
        if (_t47.length > 63) return {
          error: "Domain contains dot-separated segment that is too long"
        };

        if (_e48 < o.length - 1) {
          if (!s.domainSegmentRx.test(_t47)) return {
            error: "Domain contains invalid character"
          };
        } else if (!s.tldSegmentRx.test(_t47)) return {
          error: "Domain contains invalid tld character"
        };
      }
    }, t.isValid = function (e, r) {
      return !t.analyze(e, r);
    }, s.punycode = function (e) {
      try {
        return new s.URL("http://".concat(e)).host;
      } catch (t) {
        return e;
      }
    };
  }, function (e, t) {}, function (e, t, r) {
    "use strict";

    e.exports = function (e) {
      return e.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(25),
        o = {
      generate: function generate() {
        var e = {},
            t = "!\\$&'\\(\\)\\*\\+,;=",
            r = "\\w-\\.~%\\dA-Fa-f" + t + ":@",
            s = "[" + r + "]",
            n = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
        e.ipv4address = "(?:" + n + "\\.){3}" + n;
        var o = "[\\dA-Fa-f]{1,4}",
            a = "(?:" + o + ":" + o + "|" + e.ipv4address + ")",
            i = "(?:" + o + ":){6}" + a,
            l = "::(?:" + o + ":){5}" + a,
            c = "(?:" + o + ")?::(?:" + o + ":){4}" + a,
            u = "(?:(?:" + o + ":){0,1}" + o + ")?::(?:" + o + ":){3}" + a,
            f = "(?:(?:" + o + ":){0,2}" + o + ")?::(?:" + o + ":){2}" + a,
            h = "(?:(?:" + o + ":){0,3}" + o + ")?::" + o + ":" + a,
            m = "(?:(?:" + o + ":){0,4}" + o + ")?::" + a;
        e.ipv4Cidr = "\\d|[1-2]\\d|3[0-2]", e.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])", e.ipv6address = "(?:" + i + "|" + l + "|" + c + "|" + u + "|" + f + "|" + h + "|" + m + "|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)", e.ipvFuture = "v[\\dA-Fa-f]+\\.[\\w-\\.~" + t + ":]+", e.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*", e.schemeRegex = new RegExp(e.scheme);

        var d = "[\\w-\\.~%\\dA-Fa-f" + t + ":]*",
            p = "(?:" + ("\\[(?:" + e.ipv6address + "|" + e.ipvFuture + ")\\]") + "|" + e.ipv4address + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})",
            g = "(?:" + d + "@)?" + p + "(?::\\d*)?",
            y = "(?:" + d + "@)?(" + p + ")(?::\\d*)?",
            b = s + "*",
            v = s + "+",
            _ = "(?:\\/" + b + ")*",
            w = "\\/(?:" + v + _ + ")?",
            $ = v + _;

        return e.hierPart = "(?:(?:\\/\\/" + g + _ + ")|" + w + "|" + $ + "|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))", e.hierPartCapture = "(?:(?:\\/\\/" + y + _ + ")|" + w + "|" + $ + ")", e.relativeRef = "(?:(?:\\/\\/" + g + _ + ")|" + w + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*|)", e.query = "[" + r + "\\/\\?]*(?=#|$)", e.queryWithSquareBrackets = "[" + r + "\\[\\]\\/\\?]*(?=#|$)", e.fragment = "[" + r + "\\/\\?]*", e;
      }
    };
    e.exports = t = o.rfc3986 = o.generate(), o.createRegex = function (e) {
      var t = o.rfc3986,
          r = "(?:\\?" + (e.allowQuerySquareBrackets ? t.queryWithSquareBrackets : t.query) + ")?(?:#" + t.fragment + ")?$";
      if (e.relativeOnly) return new RegExp("^" + t.relativeRef + r);
      var a = "";

      if (e.scheme) {
        s(e.scheme instanceof RegExp || "string" == typeof e.scheme || Array.isArray(e.scheme), "scheme must be a RegExp, String, or Array");

        var _r36 = [].concat(e.scheme);

        s(_r36.length >= 1, "scheme must have at least 1 scheme specified");
        var _o13 = [];

        for (var _e49 = 0; _e49 < _r36.length; ++_e49) {
          var _a12 = _r36[_e49];
          s(_a12 instanceof RegExp || "string" == typeof _a12, "scheme at position " + _e49 + " must be a RegExp or String"), _a12 instanceof RegExp ? _o13.push(_a12.source.toString()) : (s(t.schemeRegex.test(_a12), "scheme at position " + _e49 + " must be a valid scheme"), _o13.push(n(_a12)));
        }

        a = _o13.join("|");
      }

      var i = "(?:" + (a ? "(?:" + a + ")" : t.scheme) + ":" + (e.domain ? t.hierPartCapture : t.hierPart) + ")",
          l = e.allowRelative ? "(?:" + i + "|" + t.relativeRef + ")" : i,
          c = new RegExp("^" + l + r);
      return c.scheme = a, c;
    }, o.uriRegex = o.createRegex({}), t.createRegex = function () {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return e.scheme || e.allowRelative || e.relativeOnly || e.allowQuerySquareBrackets || e.domain ? o.createRegex(e) : o.uriRegex;
    };
  }, function (e, t, r) {
    "use strict";

    e.exports = function () {
      try {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
          t[r] = arguments[r];
        }

        return JSON.stringify.apply(null, t);
      } catch (e) {
        return "[Cannot display object: " + e.message + "]";
      }
    };
  }, function (e) {
    e.exports = JSON.parse('{"version":"16.1.7"}');
  }, function (e, t, r) {
    "use strict";

    var s = {};
    e.exports = function (e) {
      if (!e) return "";
      var t = "";

      for (var _r37 = 0; _r37 < e.length; ++_r37) {
        var n = e.charCodeAt(_r37);
        s.isSafe(n) ? t += e[_r37] : t += s.escapeHtmlChar(n);
      }

      return t;
    }, s.escapeHtmlChar = function (e) {
      var t = s.namedHtml[e];
      if (void 0 !== t) return t;
      if (e >= 256) return "&#" + e + ";";
      var r = e.toString(16).padStart(2, "0");
      return "&#x".concat(r, ";");
    }, s.isSafe = function (e) {
      return void 0 !== s.safeCharCodes[e];
    }, s.namedHtml = {
      38: "&amp;",
      60: "&lt;",
      62: "&gt;",
      34: "&quot;",
      160: "&nbsp;",
      162: "&cent;",
      163: "&pound;",
      164: "&curren;",
      169: "&copy;",
      174: "&reg;"
    }, s.safeCharCodes = function () {
      var e = {};

      for (var _t48 = 32; _t48 < 123; ++_t48) {
        (_t48 >= 97 || _t48 >= 65 && _t48 <= 90 || _t48 >= 48 && _t48 <= 57 || 32 === _t48 || 46 === _t48 || 44 === _t48 || 45 === _t48 || 58 === _t48 || 95 === _t48) && (e[_t48] = null);
      }

      return e;
    }();
  }, function (e, t, r) {
    "use strict";

    var s = {
      operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"],
      operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"],
      operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]],
      operatorsPrefix: ["!", "n"],
      literals: {
        '"': '"',
        "`": "`",
        "'": "'",
        "[": "]"
      },
      numberRx: /^(?:[0-9]*\.?[0-9]*){1}$/,
      tokenRx: /^[\w\$\#\.\@\:\{\}]+$/,
      symbol: Symbol("formula"),
      settings: Symbol("settings")
    };
    e.exports = s.Formula =
    /*#__PURE__*/
    function () {
      function _class13(e) {
        var _Object$assign;

        _classCallCheck(this, _class13);

        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (!t[s.settings] && t.constants) for (var _e50 in t.constants) {
          var _r38 = t.constants[_e50];
          if (null !== _r38 && !["boolean", "number", "string"].includes(_typeof(_r38))) throw new Error("Formula constant ".concat(_e50, " contains invalid ").concat(_typeof(_r38), " value type"));
        }
        this.settings = t[s.settings] ? t : Object.assign((_Object$assign = {}, _defineProperty(_Object$assign, s.settings, !0), _defineProperty(_Object$assign, "constants", {}), _defineProperty(_Object$assign, "functions", {}), _Object$assign), t), this.single = null, this._parts = null, this._parse(e);
      }

      _createClass(_class13, [{
        key: "_parse",
        value: function _parse(e) {
          var _this7 = this;

          var t = [],
              r = "",
              n = 0,
              o = !1;

          var a = function a(e) {
            if (n) throw new Error("Formula missing closing parenthesis");
            var a = t.length ? t[t.length - 1] : null;

            if (o || r || e) {
              if (a && "reference" === a.type && ")" === e) return a.type = "function", a.value = _this7._subFormula(r, a.value), void (r = "");

              if (")" === e) {
                var _e51 = new s.Formula(r, _this7.settings);

                t.push({
                  type: "segment",
                  value: _e51
                });
              } else if (o) {
                if ("]" === o) return t.push({
                  type: "reference",
                  value: r
                }), void (r = "");
                t.push({
                  type: "literal",
                  value: r
                });
              } else if (s.operatorCharacters.includes(r)) a && "operator" === a.type && s.operators.includes(a.value + r) ? a.value += r : t.push({
                type: "operator",
                value: r
              });else if (r.match(s.numberRx)) t.push({
                type: "constant",
                value: parseFloat(r)
              });else if (void 0 !== _this7.settings.constants[r]) t.push({
                type: "constant",
                value: _this7.settings.constants[r]
              });else {
                if (!r.match(s.tokenRx)) throw new Error("Formula contains invalid token: ".concat(r));
                t.push({
                  type: "reference",
                  value: r
                });
              }

              r = "";
            }
          };

          var _iteratorNormalCompletion59 = true;
          var _didIteratorError59 = false;
          var _iteratorError59 = undefined;

          try {
            for (var _iterator59 = e[Symbol.iterator](), _step59; !(_iteratorNormalCompletion59 = (_step59 = _iterator59.next()).done); _iteratorNormalCompletion59 = true) {
              var _t49 = _step59.value;
              o ? _t49 === o ? (a(), o = !1) : r += _t49 : n ? "(" === _t49 ? (r += _t49, ++n) : ")" === _t49 ? --n ? r += _t49 : a(_t49) : r += _t49 : _t49 in s.literals ? o = s.literals[_t49] : "(" === _t49 ? (a(), ++n) : s.operatorCharacters.includes(_t49) ? (a(), r = _t49, a()) : " " !== _t49 ? r += _t49 : a();
            }
          } catch (err) {
            _didIteratorError59 = true;
            _iteratorError59 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion59 && _iterator59["return"] != null) {
                _iterator59["return"]();
              }
            } finally {
              if (_didIteratorError59) {
                throw _iteratorError59;
              }
            }
          }

          a(), t = t.map(function (e, r) {
            return "operator" !== e.type || "-" !== e.value || r && "operator" !== t[r - 1].type ? e : {
              type: "operator",
              value: "n"
            };
          });
          var i = !1;
          var _iteratorNormalCompletion60 = true;
          var _didIteratorError60 = false;
          var _iteratorError60 = undefined;

          try {
            for (var _iterator60 = t[Symbol.iterator](), _step60; !(_iteratorNormalCompletion60 = (_step60 = _iterator60.next()).done); _iteratorNormalCompletion60 = true) {
              var _e52 = _step60.value;

              if ("operator" === _e52.type) {
                if (s.operatorsPrefix.includes(_e52.value)) continue;
                if (!i) throw new Error("Formula contains an operator in invalid position");
                if (!s.operators.includes(_e52.value)) throw new Error("Formula contains an unknown operator ".concat(_e52.value));
              } else if (i) throw new Error("Formula missing expected operator");

              i = !i;
            }
          } catch (err) {
            _didIteratorError60 = true;
            _iteratorError60 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion60 && _iterator60["return"] != null) {
                _iterator60["return"]();
              }
            } finally {
              if (_didIteratorError60) {
                throw _iteratorError60;
              }
            }
          }

          if (!i) throw new Error("Formula contains invalid trailing operator");
          1 === t.length && ["reference", "literal", "constant"].includes(t[0].type) && (this.single = {
            type: "reference" === t[0].type ? "reference" : "value",
            value: t[0].value
          }), this._parts = t.map(function (e) {
            if ("operator" === e.type) return s.operatorsPrefix.includes(e.value) ? e : e.value;
            if ("reference" !== e.type) return e.value;
            if (_this7.settings.tokenRx && !_this7.settings.tokenRx.test(e.value)) throw new Error("Formula contains invalid reference ".concat(e.value));
            return _this7.settings.reference ? _this7.settings.reference(e.value) : s.reference(e.value);
          });
        }
      }, {
        key: "_subFormula",
        value: function _subFormula(e, t) {
          var _this8 = this;

          var r = this.settings.functions[t];
          if ("function" != typeof r) throw new Error("Formula contains unknown function ".concat(t));
          var n = [];

          if (e) {
            var _r39 = "",
                o = 0,
                a = !1;

            var i = function i() {
              if (!_r39) throw new Error("Formula contains function ".concat(t, " with invalid arguments ").concat(e));
              n.push(_r39), _r39 = "";
            };

            for (var _t50 = 0; _t50 < e.length; ++_t50) {
              var _n16 = e[_t50];
              a ? (_r39 += _n16, _n16 === a && (a = !1)) : _n16 in s.literals && !o ? (_r39 += _n16, a = s.literals[_n16]) : "," !== _n16 || o ? (_r39 += _n16, "(" === _n16 ? ++o : ")" === _n16 && --o) : i();
            }

            i();
          }

          return n = n.map(function (e) {
            return new s.Formula(e, _this8.settings);
          }), function (e) {
            var t = [];
            var _iteratorNormalCompletion61 = true;
            var _didIteratorError61 = false;
            var _iteratorError61 = undefined;

            try {
              for (var _iterator61 = n[Symbol.iterator](), _step61; !(_iteratorNormalCompletion61 = (_step61 = _iterator61.next()).done); _iteratorNormalCompletion61 = true) {
                var _r40 = _step61.value;
                t.push(_r40.evaluate(e));
              }
            } catch (err) {
              _didIteratorError61 = true;
              _iteratorError61 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion61 && _iterator61["return"] != null) {
                  _iterator61["return"]();
                }
              } finally {
                if (_didIteratorError61) {
                  throw _iteratorError61;
                }
              }
            }

            return r.call.apply(r, [e].concat(t));
          };
        }
      }, {
        key: "evaluate",
        value: function evaluate(e) {
          var t = this._parts.slice();

          for (var _r41 = t.length - 2; _r41 >= 0; --_r41) {
            var n = t[_r41];

            if (n && "operator" === n.type) {
              var o = t[_r41 + 1];
              t.splice(_r41 + 1, 1);
              var a = s.evaluate(o, e);
              t[_r41] = s.single(n.value, a);
            }
          }

          return s.operatorsOrder.forEach(function (r) {
            for (var _n17 = 1; _n17 < t.length - 1;) {
              if (r.includes(t[_n17])) {
                var _r42 = t[_n17],
                    _o14 = s.evaluate(t[_n17 - 1], e),
                    _a13 = s.evaluate(t[_n17 + 1], e);

                t.splice(_n17, 2);
                var i = s.calculate(_r42, _o14, _a13);
                t[_n17 - 1] = 0 === i ? 0 : i;
              } else _n17 += 2;
            }
          }), s.evaluate(t[0], e);
        }
      }]);

      return _class13;
    }(), s.Formula.prototype[s.symbol] = !0, s.reference = function (e) {
      return function (t) {
        return t && void 0 !== t[e] ? t[e] : null;
      };
    }, s.evaluate = function (e, t) {
      return null === e ? null : "function" == typeof e ? e(t) : e[s.symbol] ? e.evaluate(t) : e;
    }, s.single = function (e, t) {
      if ("!" === e) return !t;
      var r = -t;
      return 0 === r ? 0 : r;
    }, s.calculate = function (e, t, r) {
      if ("??" === e) return s.exists(t) ? t : r;

      if ("string" == typeof t || "string" == typeof r) {
        if ("+" === e) return (t = s.exists(t) ? t : "") + (r = s.exists(r) ? r : "");
      } else switch (e) {
        case "^":
          return Math.pow(t, r);

        case "*":
          return t * r;

        case "/":
          return t / r;

        case "%":
          return t % r;

        case "+":
          return t + r;

        case "-":
          return t - r;
      }

      switch (e) {
        case "<":
          return t < r;

        case "<=":
          return t <= r;

        case ">":
          return t > r;

        case ">=":
          return t >= r;

        case "==":
          return t === r;

        case "!=":
          return t !== r;

        case "&&":
          return t && r;

        case "||":
          return t || r;
      }

      return null;
    }, s.exists = function (e) {
      return null != e;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = r(1),
        a = r(7),
        i = r(4),
        l = r(5),
        c = {};
    e.exports = n.extend({
      type: "alternatives",
      flags: {
        match: {
          "default": "any"
        }
      },
      terms: {
        matches: {
          init: [],
          register: l.toSibling
        }
      },
      args: function args(e) {
        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++) {
          r[s - 1] = arguments[s];
        }

        return 1 === r.length && Array.isArray(r[0]) ? e["try"].apply(e, _toConsumableArray(r[0])) : e["try"].apply(e, r);
      },
      validate: function validate(e, t) {
        var r = t.schema,
            s = t.error,
            n = t.state,
            o = t.prefs;

        if (r._flags.match) {
          var _t51,
              _a14 = 0;

          for (var _s25 = 0; _s25 < r.$_terms.matches.length; ++_s25) {
            var _i19 = r.$_terms.matches[_s25],
                _l7 = n.nest(_i19.schema, "match.".concat(_s25));

            _l7.snapshot();

            var _c7 = _i19.schema.$_validate(e, _l7, o);

            _c7.errors ? _l7.restore() : (++_a14, _t51 = _c7.value);
          }

          return _a14 ? "one" === r._flags.match ? 1 === _a14 ? {
            value: _t51
          } : {
            errors: s("alternatives.one")
          } : _a14 === r.$_terms.matches.length ? {
            value: e
          } : {
            errors: s("alternatives.all")
          } : {
            errors: s("alternatives.any")
          };
        }

        var a = [];

        for (var _t52 = 0; _t52 < r.$_terms.matches.length; ++_t52) {
          var _s26 = r.$_terms.matches[_t52];

          if (_s26.schema) {
            var _r43 = n.nest(_s26.schema, "match.".concat(_t52));

            _r43.snapshot();

            var _i21 = _s26.schema.$_validate(e, _r43, o);

            if (!_i21.errors) return _i21;
            _r43.restore(), a.push({
              schema: _s26.schema,
              reports: _i21.errors
            });
            continue;
          }

          var _i20 = _s26.ref ? _s26.ref.resolve(e, n, o) : e,
              _l8 = _s26.is ? [_s26] : _s26["switch"];

          for (var _r44 = 0; _r44 < _l8.length; ++_r44) {
            var _a15 = _l8[_r44],
                _c8 = _a15.is,
                u = _a15.then,
                f = _a15.otherwise,
                h = "match.".concat(_t52).concat(_s26["switch"] ? "." + _r44 : "");

            if (_c8.$_match(_i20, n.nest(_c8, "".concat(h, ".is")), o)) {
              if (u) return u.$_validate(e, n.nest(u, "".concat(h, ".then")), o);
            } else if (f) return f.$_validate(e, n.nest(f, "".concat(h, ".otherwise")), o);
          }
        }

        return c.errors(a, t);
      },
      rules: {
        conditional: {
          method: function method(e, t) {
            s(!this._flags._endedSwitch, "Unreachable condition"), s(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule"), s(void 0 === t["break"], "Cannot use break option with alternatives conditional");
            var r = this.clone(),
                n = a.when(r, e, t),
                o = n.is ? [n] : n["switch"];
            var _iteratorNormalCompletion62 = true;
            var _didIteratorError62 = false;
            var _iteratorError62 = undefined;

            try {
              for (var _iterator62 = o[Symbol.iterator](), _step62; !(_iteratorNormalCompletion62 = (_step62 = _iterator62.next()).done); _iteratorNormalCompletion62 = true) {
                var _e53 = _step62.value;

                if (_e53.then && _e53.otherwise) {
                  r.$_setFlag("_endedSwitch", !0, {
                    clone: !1
                  });
                  break;
                }
              }
            } catch (err) {
              _didIteratorError62 = true;
              _iteratorError62 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion62 && _iterator62["return"] != null) {
                  _iterator62["return"]();
                }
              } finally {
                if (_didIteratorError62) {
                  throw _iteratorError62;
                }
              }
            }

            return r.$_terms.matches.push(n), r.$_mutateRebuild();
          }
        },
        match: {
          method: function method(e) {
            if (s(["any", "one", "all"].includes(e), "Invalid alternatives match mode", e), "any" !== e) {
              var _iteratorNormalCompletion63 = true;
              var _didIteratorError63 = false;
              var _iteratorError63 = undefined;

              try {
                for (var _iterator63 = this.$_terms.matches[Symbol.iterator](), _step63; !(_iteratorNormalCompletion63 = (_step63 = _iterator63.next()).done); _iteratorNormalCompletion63 = true) {
                  var _t53 = _step63.value;
                  s(_t53.schema, "Cannot combine match mode", e, "with conditional rules");
                }
              } catch (err) {
                _didIteratorError63 = true;
                _iteratorError63 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion63 && _iterator63["return"] != null) {
                    _iterator63["return"]();
                  }
                } finally {
                  if (_didIteratorError63) {
                    throw _iteratorError63;
                  }
                }
              }
            }

            return this.$_setFlag("match", e);
          }
        },
        "try": {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            s(t.length, "Missing alternative schemas"), o.verifyFlat(t, "try"), s(!this._flags._endedSwitch, "Unreachable condition");
            var n = this.clone();

            for (var _i22 = 0, _t54 = t; _i22 < _t54.length; _i22++) {
              var _e54 = _t54[_i22];
              n.$_terms.matches.push({
                schema: n.$_compile(_e54)
              });
            }

            return n.$_mutateRebuild();
          }
        }
      },
      overrides: {
        label: function label(e) {
          return this.$_super.label(e).$_modify({
            each: function each(t, r) {
              return "is" !== r.path[0] ? t.label(e) : void 0;
            },
            ref: !1
          });
        }
      },
      rebuild: function rebuild(e) {
        e.$_modify({
          each: function each(t) {
            o.isSchema(t) && "array" === t.type && e.$_setFlag("_arrayItems", !0, {
              clone: !1
            });
          }
        });
      },
      manifest: {
        build: function build(e, t) {
          if (t.matches) {
            var _iteratorNormalCompletion64 = true;
            var _didIteratorError64 = false;
            var _iteratorError64 = undefined;

            try {
              for (var _iterator64 = t.matches[Symbol.iterator](), _step64; !(_iteratorNormalCompletion64 = (_step64 = _iterator64.next()).done); _iteratorNormalCompletion64 = true) {
                var _r45 = _step64.value;
                var _t55 = _r45.schema,
                    _s27 = _r45.ref,
                    _n18 = _r45.is,
                    _o15 = _r45.not,
                    _a16 = _r45.then,
                    _i23 = _r45.otherwise;
                e = _t55 ? e["try"](_t55) : _s27 ? e.conditional(_s27, {
                  is: _n18,
                  then: _a16,
                  not: _o15,
                  otherwise: _i23,
                  "switch": _r45["switch"]
                }) : e.conditional(_n18, {
                  then: _a16,
                  otherwise: _i23
                });
              }
            } catch (err) {
              _didIteratorError64 = true;
              _iteratorError64 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion64 && _iterator64["return"] != null) {
                  _iterator64["return"]();
                }
              } finally {
                if (_didIteratorError64) {
                  throw _iteratorError64;
                }
              }
            }
          }

          return e;
        }
      },
      messages: {
        "alternatives.all": '"{{#label}}" does not match all of the required types',
        "alternatives.any": '"{{#label}}" does not match any of the allowed types',
        "alternatives.match": '"{{#label}}" does not match any of the allowed types',
        "alternatives.one": '"{{#label}}" matches more than one allowed type',
        "alternatives.types": '"{{#label}}" must be one of {{#types}}'
      }
    }), c.errors = function (e, t) {
      var r = t.error,
          s = t.state;
      if (!e.length) return {
        errors: r("alternatives.any")
      };
      if (1 === e.length) return {
        errors: e[0].reports
      };
      var n = new Set(),
          o = [];
      var _iteratorNormalCompletion65 = true;
      var _didIteratorError65 = false;
      var _iteratorError65 = undefined;

      try {
        for (var _iterator65 = e[Symbol.iterator](), _step65; !(_iteratorNormalCompletion65 = (_step65 = _iterator65.next()).done); _iteratorNormalCompletion65 = true) {
          var _t56 = _step65.value;
          var _a17 = _t56.reports,
              _l9 = _t56.schema;
          if (_a17.length > 1) return c.unmatched(e, r);
          var u = _a17[0];
          if (u instanceof i.Report == !1) return c.unmatched(e, r);

          if (u.state.path.length !== s.path.length) {
            o.push({
              type: _l9.type,
              report: u
            });
            continue;
          }

          if ("any.only" === u.code) {
            var _iteratorNormalCompletion66 = true;
            var _didIteratorError66 = false;
            var _iteratorError66 = undefined;

            try {
              for (var _iterator66 = u.local.valids[Symbol.iterator](), _step66; !(_iteratorNormalCompletion66 = (_step66 = _iterator66.next()).done); _iteratorNormalCompletion66 = true) {
                var _e55 = _step66.value;
                n.add(_e55);
              }
            } catch (err) {
              _didIteratorError66 = true;
              _iteratorError66 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion66 && _iterator66["return"] != null) {
                  _iterator66["return"]();
                }
              } finally {
                if (_didIteratorError66) {
                  throw _iteratorError66;
                }
              }
            }

            continue;
          }

          var _u$code$split = u.code.split("."),
              _u$code$split2 = _slicedToArray(_u$code$split, 2),
              f = _u$code$split2[0],
              h = _u$code$split2[1];

          "base" === h ? n.add(f) : o.push({
            type: _l9.type,
            report: u
          });
        }
      } catch (err) {
        _didIteratorError65 = true;
        _iteratorError65 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion65 && _iterator65["return"] != null) {
            _iterator65["return"]();
          }
        } finally {
          if (_didIteratorError65) {
            throw _iteratorError65;
          }
        }
      }

      return o.length ? 1 === o.length ? {
        errors: o[0].report
      } : c.unmatched(e, r) : {
        errors: r("alternatives.types", {
          types: _toConsumableArray(n)
        })
      };
    }, c.unmatched = function (e, t) {
      var r = [];
      var _iteratorNormalCompletion67 = true;
      var _didIteratorError67 = false;
      var _iteratorError67 = undefined;

      try {
        for (var _iterator67 = e[Symbol.iterator](), _step67; !(_iteratorNormalCompletion67 = (_step67 = _iterator67.next()).done); _iteratorNormalCompletion67 = true) {
          var _t57 = _step67.value;
          r.push.apply(r, _toConsumableArray(_t57.reports));
        }
      } catch (err) {
        _didIteratorError67 = true;
        _iteratorError67 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion67 && _iterator67["return"] != null) {
            _iterator67["return"]();
          }
        } finally {
          if (_didIteratorError67) {
            throw _iteratorError67;
          }
        }
      }

      return {
        errors: t("alternatives.match", i.details(r, {
          override: !1
        }))
      };
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(11),
        a = r(20),
        i = r(15),
        l = r(1),
        c = r(7),
        u = r(4),
        f = r(17),
        h = r(18),
        m = r(9),
        d = r(33),
        p = r(5),
        g = r(19),
        y = r(34),
        b = r(21),
        v = {
      Base:
      /*#__PURE__*/
      function () {
        function Base(e) {
          _classCallCheck(this, Base);

          this.type = e, this.$_root = null, this._definition = {}, this._ids = new d.Ids(), this._preferences = null, this._refs = new p.Manager(), this._cache = null, this._valids = null, this._invalids = null, this._flags = {}, this._rules = [], this._singleRules = new Map(), this.$_terms = {}, this.$_temp = {
            ruleset: null,
            whens: {}
          };
        }

        _createClass(Base, [{
          key: "describe",
          value: function describe() {
            return s("function" == typeof h.describe, "Manifest functionality disabled"), h.describe(this);
          }
        }, {
          key: "allow",
          value: function allow() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return this._values(t, "_valids");
          }
        }, {
          key: "alter",
          value: function alter(e) {
            s(e && "object" == _typeof(e) && !Array.isArray(e), "Invalid targets argument"), s(!this._inRuleset(), "Cannot set alterations inside a ruleset");
            var t = this.clone();
            t.$_terms.alterations = t.$_terms.alterations || [];

            for (var _r46 in e) {
              var _n19 = e[_r46];
              s("function" == typeof _n19, "Alteration adjuster for", _r46, "must be a function"), t.$_terms.alterations.push({
                target: _r46,
                adjuster: _n19
              });
            }

            return t.$_temp.ruleset = !1, t;
          }
        }, {
          key: "cast",
          value: function cast(e) {
            return s(!1 === e || "string" == typeof e, "Invalid to value"), s(!1 === e || this._definition.cast[e], "Type", this.type, "does not support casting to", e), this.$_setFlag("cast", !1 === e ? void 0 : e);
          }
        }, {
          key: "default",
          value: function _default(e, t) {
            return this._default("default", e, t);
          }
        }, {
          key: "description",
          value: function description(e) {
            return s(e && "string" == typeof e, "Description must be a non-empty string"), this.$_setFlag("description", e);
          }
        }, {
          key: "empty",
          value: function empty(e) {
            var t = this.clone();
            return void 0 !== e && (e = t.$_compile(e, {
              override: !1
            })), t.$_setFlag("empty", e, {
              clone: !1
            });
          }
        }, {
          key: "error",
          value: function error(e) {
            return s(e, "Missing error"), s(e instanceof Error || "function" == typeof e, "Must provide a valid Error object or a function"), this.$_setFlag("error", e);
          }
        }, {
          key: "example",
          value: function example(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            return s(void 0 !== e, "Missing example"), l.assertOptions(t, ["override"]), this._inner("examples", e, {
              single: !0,
              override: t.override
            });
          }
        }, {
          key: "external",
          value: function external(e, t) {
            return "object" == _typeof(e) && (s(!t, "Cannot combine options with description"), t = e.description, e = e.method), s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this._inner("externals", {
              method: e,
              description: t
            }, {
              single: !0
            });
          }
        }, {
          key: "failover",
          value: function failover(e, t) {
            return this._default("failover", e, t);
          }
        }, {
          key: "forbidden",
          value: function forbidden() {
            return this.presence("forbidden");
          }
        }, {
          key: "id",
          value: function id(e) {
            return e ? (s("string" == typeof e, "id must be a non-empty string"), s(/^[^\.]+$/.test(e), "id cannot contain period character"), this.$_setFlag("id", e)) : this.$_setFlag("id", void 0);
          }
        }, {
          key: "invalid",
          value: function invalid() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            return this._values(t, "_invalids");
          }
        }, {
          key: "label",
          value: function label(e) {
            return s(e && "string" == typeof e, "Label name must be a non-empty string"), this.$_setFlag("label", e);
          }
        }, {
          key: "meta",
          value: function meta(e) {
            return s(void 0 !== e, "Meta cannot be undefined"), this._inner("metas", e, {
              single: !0
            });
          }
        }, {
          key: "note",
          value: function note() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            s(t.length, "Missing notes");

            for (var _i24 = 0, _t58 = t; _i24 < _t58.length; _i24++) {
              var _e56 = _t58[_i24];
              s(_e56 && "string" == typeof _e56, "Notes must be non-empty strings");
            }

            return this._inner("notes", t);
          }
        }, {
          key: "only",
          value: function only() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return s("boolean" == typeof e, "Invalid mode:", e), this.$_setFlag("only", e);
          }
        }, {
          key: "optional",
          value: function optional() {
            return this.presence("optional");
          }
        }, {
          key: "prefs",
          value: function prefs(e) {
            s(e, "Missing preferences"), s(void 0 === e.context, "Cannot override context"), s(void 0 === e.externals, "Cannot override externals"), s(void 0 === e.warnings, "Cannot override warnings"), s(void 0 === e.debug, "Cannot override debug"), l.checkPreferences(e);
            var t = this.clone();
            return t._preferences = l.preferences(t._preferences, e), t;
          }
        }, {
          key: "presence",
          value: function presence(e) {
            return s(["optional", "required", "forbidden"].includes(e), "Unknown presence mode", e), this.$_setFlag("presence", e);
          }
        }, {
          key: "raw",
          value: function raw() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return this.$_setFlag("result", e ? "raw" : void 0);
          }
        }, {
          key: "result",
          value: function result(e) {
            return s(["raw", "strip"].includes(e), "Unknown result mode", e), this.$_setFlag("result", e);
          }
        }, {
          key: "required",
          value: function required() {
            return this.presence("required");
          }
        }, {
          key: "strict",
          value: function strict(e) {
            var t = this.clone(),
                r = void 0 !== e && !e;
            return t._preferences = l.preferences(t._preferences, {
              convert: r
            }), t;
          }
        }, {
          key: "strip",
          value: function strip() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return this.$_setFlag("result", e ? "strip" : void 0);
          }
        }, {
          key: "tag",
          value: function tag() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            s(t.length, "Missing tags");

            for (var _i25 = 0, _t59 = t; _i25 < _t59.length; _i25++) {
              var _e57 = _t59[_i25];
              s(_e57 && "string" == typeof _e57, "Tags must be non-empty strings");
            }

            return this._inner("tags", t);
          }
        }, {
          key: "unit",
          value: function unit(e) {
            return s(e && "string" == typeof e, "Unit name must be a non-empty string"), this.$_setFlag("unit", e);
          }
        }, {
          key: "valid",
          value: function valid() {
            var e = this.allow.apply(this, arguments);
            return e.$_setFlag("only", !!e._valids, {
              clone: !1
            }), e;
          }
        }, {
          key: "when",
          value: function when(e, t) {
            var r = this.clone();
            r.$_terms.whens || (r.$_terms.whens = []);
            var n = c.when(r, e, t);

            if (!["any", "link"].includes(r.type)) {
              var _e58 = n.is ? [n] : n["switch"];

              var _iteratorNormalCompletion68 = true;
              var _didIteratorError68 = false;
              var _iteratorError68 = undefined;

              try {
                for (var _iterator68 = _e58[Symbol.iterator](), _step68; !(_iteratorNormalCompletion68 = (_step68 = _iterator68.next()).done); _iteratorNormalCompletion68 = true) {
                  var _t60 = _step68.value;
                  s(!_t60.then || "any" === _t60.then.type || _t60.then.type === r.type, "Cannot combine", r.type, "with", _t60.then && _t60.then.type), s(!_t60.otherwise || "any" === _t60.otherwise.type || _t60.otherwise.type === r.type, "Cannot combine", r.type, "with", _t60.otherwise && _t60.otherwise.type);
                }
              } catch (err) {
                _didIteratorError68 = true;
                _iteratorError68 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion68 && _iterator68["return"] != null) {
                    _iterator68["return"]();
                  }
                } finally {
                  if (_didIteratorError68) {
                    throw _iteratorError68;
                  }
                }
              }
            }

            return r.$_terms.whens.push(n), r.$_mutateRebuild();
          }
        }, {
          key: "cache",
          value: function cache(e) {
            s(!this._inRuleset(), "Cannot set caching inside a ruleset"), s(!this._cache, "Cannot override schema cache");
            var t = this.clone();
            return t._cache = e || i.provider.provision(), t.$_temp.ruleset = !1, t;
          }
        }, {
          key: "clone",
          value: function clone() {
            var e = Object.create(Object.getPrototypeOf(this));
            return this._assign(e);
          }
        }, {
          key: "concat",
          value: function concat(e) {
            s(l.isSchema(e), "Invalid schema object"), s("any" === this.type || "any" === e.type || e.type === this.type, "Cannot merge type", this.type, "with another type:", e.type), s(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset"), s(!e._inRuleset(), "Cannot concatenate a schema with open ruleset");
            var t = this.clone();

            if ("any" === this.type && "any" !== e.type) {
              var _r47 = e.clone();

              for (var _i26 = 0, _Object$keys = Object.keys(t); _i26 < _Object$keys.length; _i26++) {
                var _e59 = _Object$keys[_i26];
                "type" !== _e59 && (_r47[_e59] = t[_e59]);
              }

              t = _r47;
            }

            t._ids.concat(e._ids), t._refs.register(e, p.toSibling), t._preferences = t._preferences ? l.preferences(t._preferences, e._preferences) : e._preferences, t._valids = b.merge(t._valids, e._valids, e._invalids), t._invalids = b.merge(t._invalids, e._invalids, e._valids);
            var _iteratorNormalCompletion69 = true;
            var _didIteratorError69 = false;
            var _iteratorError69 = undefined;

            try {
              var _loop9 = function _loop9() {
                var r = _step69.value;
                t._singleRules.has(r) && (t._rules = t._rules.filter(function (e) {
                  return e.keep || e.name !== r;
                }), t._singleRules["delete"](r));
              };

              for (var _iterator69 = e._singleRules.keys()[Symbol.iterator](), _step69; !(_iteratorNormalCompletion69 = (_step69 = _iterator69.next()).done); _iteratorNormalCompletion69 = true) {
                _loop9();
              }
            } catch (err) {
              _didIteratorError69 = true;
              _iteratorError69 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion69 && _iterator69["return"] != null) {
                  _iterator69["return"]();
                }
              } finally {
                if (_didIteratorError69) {
                  throw _iteratorError69;
                }
              }
            }

            var _iteratorNormalCompletion70 = true;
            var _didIteratorError70 = false;
            var _iteratorError70 = undefined;

            try {
              for (var _iterator70 = e._rules[Symbol.iterator](), _step70; !(_iteratorNormalCompletion70 = (_step70 = _iterator70.next()).done); _iteratorNormalCompletion70 = true) {
                var _r51 = _step70.value;
                e._definition.rules[_r51.method].multi || t._singleRules.set(_r51.name, _r51), t._rules.push(_r51);
              }
            } catch (err) {
              _didIteratorError70 = true;
              _iteratorError70 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion70 && _iterator70["return"] != null) {
                  _iterator70["return"]();
                }
              } finally {
                if (_didIteratorError70) {
                  throw _iteratorError70;
                }
              }
            }

            if (t._flags.empty && e._flags.empty) {
              t._flags.empty = t._flags.empty.concat(e._flags.empty);

              var _r48 = Object.assign({}, e._flags);

              delete _r48.empty, a(t._flags, _r48);
            } else if (e._flags.empty) {
              t._flags.empty = e._flags.empty;

              var _r49 = Object.assign({}, e._flags);

              delete _r49.empty, a(t._flags, _r49);
            } else a(t._flags, e._flags);

            for (var _r50 in e.$_terms) {
              var _s28 = e.$_terms[_r50];
              _s28 ? t.$_terms[_r50] ? t.$_terms[_r50] = t.$_terms[_r50].concat(_s28) : t.$_terms[_r50] = _s28.slice() : t.$_terms[_r50] || (t.$_terms[_r50] = _s28);
            }

            return this.$_root._tracer && this.$_root._tracer._combine(t, [this, e]), t.$_mutateRebuild();
          }
        }, {
          key: "extend",
          value: function extend(e) {
            return s(!e.base, "Cannot extend type with another base"), f.type(this, e);
          }
        }, {
          key: "extract",
          value: function extract(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.reach(e);
          }
        }, {
          key: "fork",
          value: function fork(e, t) {
            s(!this._inRuleset(), "Cannot fork inside a ruleset");
            var r = this;
            var _iteratorNormalCompletion71 = true;
            var _didIteratorError71 = false;
            var _iteratorError71 = undefined;

            try {
              for (var _iterator71 = [].concat(e)[Symbol.iterator](), _step71; !(_iteratorNormalCompletion71 = (_step71 = _iterator71.next()).done); _iteratorNormalCompletion71 = true) {
                var _s29 = _step71.value;
                _s29 = Array.isArray(_s29) ? _s29 : _s29.split("."), r = r._ids.fork(_s29, t, r);
              }
            } catch (err) {
              _didIteratorError71 = true;
              _iteratorError71 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion71 && _iterator71["return"] != null) {
                  _iterator71["return"]();
                }
              } finally {
                if (_didIteratorError71) {
                  throw _iteratorError71;
                }
              }
            }

            return r.$_temp.ruleset = !1, r;
          }
        }, {
          key: "rule",
          value: function rule(e) {
            var t = this._definition;
            l.assertOptions(e, Object.keys(t.modifiers)), s(!1 !== this.$_temp.ruleset, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
            var r = null === this.$_temp.ruleset ? this._rules.length - 1 : this.$_temp.ruleset;
            s(r >= 0 && r < this._rules.length, "Cannot apply rules to empty ruleset");
            var o = this.clone();

            for (var _a18 = r; _a18 < o._rules.length; ++_a18) {
              var _r52 = o._rules[_a18],
                  _i27 = n(_r52);

              for (var _n20 in e) {
                t.modifiers[_n20](_i27, e[_n20]), s(_i27.name === _r52.name, "Cannot change rule name");
              }

              o._rules[_a18] = _i27, o._singleRules.get(_i27.name) === _r52 && o._singleRules.set(_i27.name, _i27);
            }

            return o.$_temp.ruleset = !1, o.$_mutateRebuild();
          }
        }, {
          key: "tailor",
          value: function tailor(e) {
            e = [].concat(e), s(!this._inRuleset(), "Cannot tailor inside a ruleset");
            var t = this;

            if (this.$_terms.alterations) {
              var _iteratorNormalCompletion72 = true;
              var _didIteratorError72 = false;
              var _iteratorError72 = undefined;

              try {
                for (var _iterator72 = this.$_terms.alterations[Symbol.iterator](), _step72; !(_iteratorNormalCompletion72 = (_step72 = _iterator72.next()).done); _iteratorNormalCompletion72 = true) {
                  var _r53 = _step72.value;
                  var _n21 = _r53.target,
                      _o16 = _r53.adjuster;
                  e.includes(_n21) && (t = _o16(t), s(l.isSchema(t), "Alteration adjuster for", _n21, "failed to return a schema object"));
                }
              } catch (err) {
                _didIteratorError72 = true;
                _iteratorError72 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion72 && _iterator72["return"] != null) {
                    _iterator72["return"]();
                  }
                } finally {
                  if (_didIteratorError72) {
                    throw _iteratorError72;
                  }
                }
              }
            }

            return (t = t.$_modify({
              each: function each(t) {
                return t.tailor(e);
              },
              ref: !1
            })).$_temp.ruleset = !1, t.$_mutateRebuild();
          }
        }, {
          key: "tracer",
          value: function tracer() {
            return g.location ? g.location(this) : this;
          }
        }, {
          key: "validate",
          value: function validate(e, t) {
            return y.entry(e, this, t);
          }
        }, {
          key: "validateAsync",
          value: function validateAsync(e, t) {
            return y.entryAsync(e, this, t);
          }
        }, {
          key: "$_addRule",
          value: function $_addRule(e) {
            "string" == typeof e && (e = {
              name: e
            }), s(e && "object" == _typeof(e), "Invalid options"), s(e.name && "string" == typeof e.name, "Invalid rule name");

            for (var _t61 in e) {
              s("_" !== _t61[0], "Cannot set private rule properties");
            }

            var t = Object.assign({}, e);
            t._resolve = [], t.method = t.method || t.name;
            var r = this._definition.rules[t.method],
                n = t.args;
            s(r, "Unknown rule", t.method);
            var o = this.clone();

            if (n) {
              s(1 === Object.keys(n).length || Object.keys(n).length === this._definition.rules[t.name].args.length, "Invalid rule definition for", this.type, t.name);

              for (var _e60 in n) {
                var _a19 = n[_e60];

                if (void 0 !== _a19) {
                  if (r.argsByName) {
                    var _i28 = r.argsByName.get(_e60);

                    if (_i28.ref && l.isResolvable(_a19)) t._resolve.push(_e60), o.$_mutateRegister(_a19);else if (_i28.normalize && (_a19 = _i28.normalize(_a19), n[_e60] = _a19), _i28.assert) {
                      var _t62 = l.validateArg(_a19, _e60, _i28);

                      s(!_t62, _t62, "or reference");
                    }
                  }

                  n[_e60] = _a19;
                } else delete n[_e60];
              }
            }

            return r.multi || (o._ruleRemove(t.name, {
              clone: !1
            }), o._singleRules.set(t.name, t)), !1 === o.$_temp.ruleset && (o.$_temp.ruleset = null), r.priority ? o._rules.unshift(t) : o._rules.push(t), o;
          }
        }, {
          key: "$_compile",
          value: function $_compile(e, t) {
            return c.schema(this.$_root, e, t);
          }
        }, {
          key: "$_createError",
          value: function $_createError(e, t, r, s, n) {
            var o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {};
            var a = !1 !== o.flags ? this._flags : {},
                i = o.messages ? m.merge(this._definition.messages, o.messages) : this._definition.messages;
            return new u.Report(e, t, r, a, i, s, n);
          }
        }, {
          key: "$_getFlag",
          value: function $_getFlag(e) {
            return this._flags[e];
          }
        }, {
          key: "$_getRule",
          value: function $_getRule(e) {
            return this._singleRules.get(e);
          }
        }, {
          key: "$_mapLabels",
          value: function $_mapLabels(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.labels(e);
          }
        }, {
          key: "$_match",
          value: function $_match(e, t, r, s) {
            (r = Object.assign({}, r)).abortEarly = !0, r._externals = !1, t.snapshot();
            var n = !y.validate(e, this, t, r, s).errors;
            return t.restore(), n;
          }
        }, {
          key: "$_modify",
          value: function $_modify(e) {
            return l.assertOptions(e, ["each", "once", "ref", "schema"]), d.schema(this, e) || this;
          }
        }, {
          key: "$_mutateRebuild",
          value: function $_mutateRebuild() {
            var _this9 = this;

            s(!this._inRuleset(), "Cannot add this rule inside a ruleset"), this._refs.reset(), this._ids.reset();
            return this.$_modify({
              each: function each(e, t) {
                var r = t.source,
                    s = t.name,
                    n = t.path,
                    o = t.key;
                var a = _this9._definition[r][s] && _this9._definition[r][s].register;
                !1 !== a && _this9.$_mutateRegister(e, {
                  family: a,
                  key: o
                });
              }
            }), this._definition.rebuild && this._definition.rebuild(this), this.$_temp.ruleset = !1, this;
          }
        }, {
          key: "$_mutateRegister",
          value: function $_mutateRegister(e) {
            var _ref2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                t = _ref2.family,
                r = _ref2.key;

            this._refs.register(e, t), this._ids.register(e, {
              key: r
            });
          }
        }, {
          key: "$_property",
          value: function $_property(e) {
            return this._definition.properties[e];
          }
        }, {
          key: "$_reach",
          value: function $_reach(e) {
            return this._ids.reach(e);
          }
        }, {
          key: "$_rootReferences",
          value: function $_rootReferences() {
            return this._refs.roots();
          }
        }, {
          key: "$_setFlag",
          value: function $_setFlag(e, t) {
            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            s("_" === e[0] || !this._inRuleset(), "Cannot set flag inside a ruleset");
            var n = this._definition.flags[e] || {};
            if (o(t, n["default"]) && (t = void 0), o(t, this._flags[e])) return this;
            var a = !1 !== r.clone ? this.clone() : this;
            return void 0 !== t ? (a._flags[e] = t, a.$_mutateRegister(t)) : delete a._flags[e], "_" !== e[0] && (a.$_temp.ruleset = !1), a;
          }
        }, {
          key: "$_validate",
          value: function $_validate(e, t, r) {
            return y.validate(e, this, t, r);
          }
        }, {
          key: "_assign",
          value: function _assign(e) {
            e.type = this.type, e.$_root = this.$_root, e.$_temp = Object.assign({}, this.$_temp), e.$_temp.whens = {}, e._ids = this._ids.clone(), e._preferences = this._preferences, e._valids = this._valids && this._valids.clone(), e._invalids = this._invalids && this._invalids.clone(), e._rules = this._rules.slice(), e._singleRules = n(this._singleRules, {
              shallow: !0
            }), e._refs = this._refs.clone(), e._flags = Object.assign({}, this._flags), e._cache = null, e.$_terms = {};

            for (var _t63 in this.$_terms) {
              e.$_terms[_t63] = this.$_terms[_t63] ? this.$_terms[_t63].slice() : null;
            }

            e.$_super = {};

            for (var _t64 in this.$_super) {
              e.$_super[_t64] = this._super[_t64].bind(e);
            }

            return e;
          }
        }, {
          key: "_default",
          value: function _default(e, t) {
            var _t65;

            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            return l.assertOptions(r, "literal"), s(void 0 !== t, "Missing", e, "value"), s("function" == typeof t || !r.literal, "Only function value supports literal option"), "function" == typeof t && r.literal && (t = (_t65 = {}, _defineProperty(_t65, l.symbols.literal, !0), _defineProperty(_t65, "literal", t), _t65)), this.$_setFlag(e, t);
          }
        }, {
          key: "_generate",
          value: function _generate(e, t, r) {
            if (!this.$_terms.whens) return {
              schema: this
            };
            var s = [],
                n = [];

            for (var _o17 = 0; _o17 < this.$_terms.whens.length; ++_o17) {
              var _a20 = this.$_terms.whens[_o17];

              if (_a20.concat) {
                s.push(_a20.concat), n.push("".concat(_o17, ".concat"));
                continue;
              }

              var _i29 = _a20.ref ? _a20.ref.resolve(e, t, r) : e,
                  _l10 = _a20.is ? [_a20] : _a20["switch"],
                  _c9 = n.length;

              for (var _c10 = 0; _c10 < _l10.length; ++_c10) {
                var _l10$_c = _l10[_c10],
                    _u4 = _l10$_c.is,
                    _f3 = _l10$_c.then,
                    _h3 = _l10$_c.otherwise,
                    _m2 = "".concat(_o17).concat(_a20["switch"] ? "." + _c10 : "");

                if (_u4.$_match(_i29, t.nest(_u4, "".concat(_m2, ".is")), r)) {
                  if (_f3) {
                    var _o18 = t.localize([].concat(_toConsumableArray(t.path), ["".concat(_m2, ".then")]), t.ancestors, t.schemas),
                        _f3$_generate = _f3._generate(e, _o18, r),
                        _a21 = _f3$_generate.schema,
                        _i30 = _f3$_generate.id;

                    s.push(_a21), n.push("".concat(_m2, ".then").concat(_i30 ? "(".concat(_i30, ")") : ""));
                    break;
                  }
                } else if (_h3) {
                  var _o19 = t.localize([].concat(_toConsumableArray(t.path), ["".concat(_m2, ".otherwise")]), t.ancestors, t.schemas),
                      _h3$_generate = _h3._generate(e, _o19, r),
                      _a22 = _h3$_generate.schema,
                      _i31 = _h3$_generate.id;

                  s.push(_a22), n.push("".concat(_m2, ".otherwise").concat(_i31 ? "(".concat(_i31, ")") : ""));
                  break;
                }
              }

              if (_a20["break"] && n.length > _c9) break;
            }

            var o = n.join(", ");
            if (t.mainstay.tracer.debug(t, "rule", "when", o), !o) return {
              schema: this
            };
            if (!t.mainstay.tracer.active && this.$_temp.whens[o]) return {
              schema: this.$_temp.whens[o],
              id: o
            };
            var a = this;
            this._definition.generate && (a = this._definition.generate(this, e, t, r));

            for (var _i32 = 0, _s30 = s; _i32 < _s30.length; _i32++) {
              var _e61 = _s30[_i32];
              a = a.concat(_e61);
            }

            return this.$_root._tracer && this.$_root._tracer._combine(a, [this].concat(s)), this.$_temp.whens[o] = a, {
              schema: a,
              id: o
            };
          }
        }, {
          key: "_inner",
          value: function _inner(e, t) {
            var _n$$_terms$e;

            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            s(!this._inRuleset(), "Cannot set ".concat(e, " inside a ruleset"));
            var n = this.clone();
            return n.$_terms[e] && !r.override || (n.$_terms[e] = []), r.single ? n.$_terms[e].push(t) : (_n$$_terms$e = n.$_terms[e]).push.apply(_n$$_terms$e, _toConsumableArray(t)), n.$_temp.ruleset = !1, n;
          }
        }, {
          key: "_inRuleset",
          value: function _inRuleset() {
            return null !== this.$_temp.ruleset && !1 !== this.$_temp.ruleset;
          }
        }, {
          key: "_ruleRemove",
          value: function _ruleRemove(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (!this._singleRules.has(e)) return this;
            var r = !1 !== t.clone ? this.clone() : this;

            r._singleRules["delete"](e);

            var s = [];

            for (var _t66 = 0; _t66 < r._rules.length; ++_t66) {
              var _n22 = r._rules[_t66];
              _n22.name !== e || _n22.keep ? s.push(_n22) : r._inRuleset() && _t66 < r.$_temp.ruleset && --r.$_temp.ruleset;
            }

            return r._rules = s, r;
          }
        }, {
          key: "_values",
          value: function _values(e, t) {
            l.verifyFlat(e, t.slice(1, -1));
            var r = this.clone(),
                n = e[0] === l.symbols.override;
            if (n && (e = e.slice(1)), !r[t] && e.length ? r[t] = new b() : n && (r[t] = e.length ? new b() : null, r.$_mutateRebuild()), !r[t]) return r;
            n && r[t].override();
            var _iteratorNormalCompletion73 = true;
            var _didIteratorError73 = false;
            var _iteratorError73 = undefined;

            try {
              for (var _iterator73 = e[Symbol.iterator](), _step73; !(_iteratorNormalCompletion73 = (_step73 = _iterator73.next()).done); _iteratorNormalCompletion73 = true) {
                var _n23 = _step73.value;
                s(void 0 !== _n23, "Cannot call allow/valid/invalid with undefined"), s(_n23 !== l.symbols.override, "Override must be the first value");

                var _e62 = "_invalids" === t ? "_valids" : "_invalids";

                r[_e62] && (r[_e62].remove(_n23), r[_e62].length || (s("_valids" === t || !r._flags.only, "Setting invalid value", _n23, "leaves schema rejecting all values due to previous valid rule"), r[_e62] = null)), r[t].add(_n23, r._refs);
              }
            } catch (err) {
              _didIteratorError73 = true;
              _iteratorError73 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion73 && _iterator73["return"] != null) {
                  _iterator73["return"]();
                }
              } finally {
                if (_didIteratorError73) {
                  throw _iteratorError73;
                }
              }
            }

            return r;
          }
        }, {
          key: "ruleset",
          get: function get() {
            s(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
            var e = this.clone();
            return e.$_temp.ruleset = e._rules.length, e;
          }
        }, {
          key: "$",
          get: function get() {
            return this.ruleset;
          }
        }]);

        return Base;
      }()
    };
    v.Base.prototype.isImmutable = !0, v.Base.prototype[l.symbols.any] = {
      version: l.version,
      compile: c.compile,
      root: "$_root"
    }, v.Base.prototype.deny = v.Base.prototype.invalid, v.Base.prototype.disallow = v.Base.prototype.invalid, v.Base.prototype.equal = v.Base.prototype.valid, v.Base.prototype.exist = v.Base.prototype.required, v.Base.prototype.not = v.Base.prototype.invalid, v.Base.prototype.options = v.Base.prototype.prefs, v.Base.prototype.preferences = v.Base.prototype.prefs, e.exports = new v.Base();
  }, function (e, t, r) {
    "use strict";

    function s(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var s = Object.getOwnPropertySymbols(e);
        t && (s = s.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, s);
      }

      return r;
    }

    function n(e, t, r) {
      return t in e ? Object.defineProperty(e, t, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = r, e;
    }

    var o = r(0),
        a = r(1),
        i = r(5),
        l = {};
    t.Ids = l.Ids =
    /*#__PURE__*/
    function () {
      function _class14() {
        _classCallCheck(this, _class14);

        this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
      }

      _createClass(_class14, [{
        key: "clone",
        value: function clone() {
          var e = new l.Ids();
          return e._byId = new Map(this._byId), e._byKey = new Map(this._byKey), e._schemaChain = this._schemaChain, e;
        }
      }, {
        key: "concat",
        value: function concat(e) {
          e._schemaChain && (this._schemaChain = !0);
          var _iteratorNormalCompletion74 = true;
          var _didIteratorError74 = false;
          var _iteratorError74 = undefined;

          try {
            for (var _iterator74 = e._byId.entries()[Symbol.iterator](), _step74; !(_iteratorNormalCompletion74 = (_step74 = _iterator74.next()).done); _iteratorNormalCompletion74 = true) {
              var _step74$value = _slicedToArray(_step74.value, 2),
                  _t67 = _step74$value[0],
                  _r54 = _step74$value[1];

              o(!this._byKey.has(_t67), "Schema id conflicts with existing key:", _t67), this._byId.set(_t67, _r54);
            }
          } catch (err) {
            _didIteratorError74 = true;
            _iteratorError74 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion74 && _iterator74["return"] != null) {
                _iterator74["return"]();
              }
            } finally {
              if (_didIteratorError74) {
                throw _iteratorError74;
              }
            }
          }

          var _iteratorNormalCompletion75 = true;
          var _didIteratorError75 = false;
          var _iteratorError75 = undefined;

          try {
            for (var _iterator75 = e._byKey.entries()[Symbol.iterator](), _step75; !(_iteratorNormalCompletion75 = (_step75 = _iterator75.next()).done); _iteratorNormalCompletion75 = true) {
              var _step75$value = _slicedToArray(_step75.value, 2),
                  _t68 = _step75$value[0],
                  _r55 = _step75$value[1];

              o(!this._byId.has(_t68), "Schema key conflicts with existing id:", _t68), this._byKey.set(_t68, _r55);
            }
          } catch (err) {
            _didIteratorError75 = true;
            _iteratorError75 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion75 && _iterator75["return"] != null) {
                _iterator75["return"]();
              }
            } finally {
              if (_didIteratorError75) {
                throw _iteratorError75;
              }
            }
          }
        }
      }, {
        key: "fork",
        value: function fork(e, t, r) {
          var s = this._collect(e);

          s.push({
            schema: r
          });
          var n = s.shift();
          var i = {
            id: n.id,
            schema: t(n.schema)
          };
          o(a.isSchema(i.schema), "adjuster function failed to return a joi schema type");
          var _iteratorNormalCompletion76 = true;
          var _didIteratorError76 = false;
          var _iteratorError76 = undefined;

          try {
            for (var _iterator76 = s[Symbol.iterator](), _step76; !(_iteratorNormalCompletion76 = (_step76 = _iterator76.next()).done); _iteratorNormalCompletion76 = true) {
              var _e63 = _step76.value;
              i = {
                id: _e63.id,
                schema: l.fork(_e63.schema, i.id, i.schema)
              };
            }
          } catch (err) {
            _didIteratorError76 = true;
            _iteratorError76 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion76 && _iterator76["return"] != null) {
                _iterator76["return"]();
              }
            } finally {
              if (_didIteratorError76) {
                throw _iteratorError76;
              }
            }
          }

          return i.schema;
        }
      }, {
        key: "labels",
        value: function labels(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];

          var r = e[0],
              s = this._get(r);

          if (!s) return [].concat(_toConsumableArray(t), _toConsumableArray(e)).join(".");
          var n = e.slice(1);
          return t = [].concat(_toConsumableArray(t), [s.schema._flags.label || r]), n.length ? s.schema._ids.labels(n, t) : t.join(".");
        }
      }, {
        key: "reach",
        value: function reach(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];

          var r = e[0],
              s = this._get(r);

          o(s, "Schema does not contain path", [].concat(_toConsumableArray(t), _toConsumableArray(e)).join("."));
          var n = e.slice(1);
          return n.length ? s.schema._ids.reach(n, [].concat(_toConsumableArray(t), [r])) : s.schema;
        }
      }, {
        key: "register",
        value: function register(e) {
          var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              t = _ref3.key;

          if (!e || !a.isSchema(e)) return;
          (e.$_property("schemaChain") || e._ids._schemaChain) && (this._schemaChain = !0);
          var r = e._flags.id;

          if (r) {
            var _t69 = this._byId.get(r);

            o(!_t69 || _t69.schema === e, "Cannot add different schemas with the same id:", r), o(!this._byKey.has(r), "Schema id conflicts with existing key:", r), this._byId.set(r, {
              schema: e,
              id: r
            });
          }

          t && (o(!this._byKey.has(t), "Schema already contains key:", t), o(!this._byId.has(t), "Schema key conflicts with existing id:", t), this._byKey.set(t, {
            schema: e,
            id: t
          }));
        }
      }, {
        key: "reset",
        value: function reset() {
          this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
        }
      }, {
        key: "_collect",
        value: function _collect(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
              r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];

          var s = e[0],
              n = this._get(s);

          o(n, "Schema does not contain path", [].concat(_toConsumableArray(t), _toConsumableArray(e)).join(".")), r = [n].concat(_toConsumableArray(r));
          var a = e.slice(1);
          return a.length ? n.schema._ids._collect(a, [].concat(_toConsumableArray(t), [s]), r) : r;
        }
      }, {
        key: "_get",
        value: function _get(e) {
          return this._byId.get(e) || this._byKey.get(e);
        }
      }]);

      return _class14;
    }(), l.fork = function (e, r, s) {
      return t.schema(e, {
        each: function each(e, t) {
          var n = t.key;
          if (r === (e._flags.id || n)) return s;
        },
        ref: !1
      }).$_mutateRebuild();
    }, t.schema = function (e, t) {
      var r;

      for (var _s31 in e._flags) {
        if ("_" === _s31[0]) continue;

        var _n24 = l.scan(e._flags[_s31], {
          source: "flags",
          name: _s31
        }, t);

        void 0 !== _n24 && ((r = r || e.clone())._flags[_s31] = _n24);
      }

      for (var _s32 = 0; _s32 < e._rules.length; ++_s32) {
        var _n25 = e._rules[_s32],
            _o20 = l.scan(_n25.args, {
          source: "rules",
          name: _n25.name
        }, t);

        if (void 0 !== _o20) {
          r = r || e.clone();

          var _t70 = Object.assign({}, _n25);

          _t70.args = _o20, r._rules[_s32] = _t70, r._singleRules.get(_n25.name) === _n25 && r._singleRules.set(_n25.name, _t70);
        }
      }

      for (var _s33 in e.$_terms) {
        if ("_" === _s33[0]) continue;

        var _n26 = l.scan(e.$_terms[_s33], {
          source: "terms",
          name: _s33
        }, t);

        void 0 !== _n26 && ((r = r || e.clone()).$_terms[_s33] = _n26);
      }

      return r;
    }, l.scan = function (e, t, r, o, c) {
      var u = o || [];
      if (null === e || "object" != _typeof(e)) return;
      var f;

      if (Array.isArray(e)) {
        for (var _s34 = 0; _s34 < e.length; ++_s34) {
          var _n27 = "terms" === t.source && "keys" === t.name && e[_s34].key,
              _o21 = l.scan(e[_s34], t, r, [_s34].concat(_toConsumableArray(u)), _n27);

          void 0 !== _o21 && ((f = f || e.slice())[_s34] = _o21);
        }

        return f;
      }

      if (!1 !== r.schema && a.isSchema(e) || !1 !== r.ref && i.isRef(e)) {
        var _o22 = r.each(e, function (e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2 ? s(r, !0).forEach(function (t) {
              n(e, t, r[t]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(r).forEach(function (t) {
              Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
            });
          }

          return e;
        }({}, t, {
          path: u,
          key: c
        }));

        if (_o22 === e) return;
        return _o22;
      }

      for (var _s35 in e) {
        if ("_" === _s35[0]) continue;

        var _n28 = l.scan(e[_s35], t, r, [_s35].concat(_toConsumableArray(u)), c);

        void 0 !== _n28 && ((f = f || Object.assign({}, e))[_s35] = _n28);
      }

      return f;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(35),
        a = r(8),
        i = r(1),
        l = r(4),
        c = r(36),
        u = {
      result: Symbol("result")
    };
    t.entry = function (e, t, r) {
      var n = i.defaults;
      r && (s(void 0 === r.warnings, "Cannot override warnings preference in synchronous validation"), n = i.preferences(i.defaults, r));
      var o = u.entry(e, t, n);
      s(!o.mainstay.externals.length, "Schema with external rules must use validateAsync()");
      var a = {
        value: o.value
      };
      return o.error && (a.error = o.error), o.mainstay.warnings.length && (a.warning = l.details(o.mainstay.warnings)), o.mainstay.debug && (a.debug = o.mainstay.debug), a;
    }, t.entryAsync = function _callee(e, t, r) {
      var s, n, o, _e64, _iteratorNormalCompletion77, _didIteratorError77, _iteratorError77, _iterator77, _step77, _t71, _r56, _s36, _n29, _o23, _i33, _l11, _t72, c;

      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              s = i.defaults;
              r && (s = i.preferences(i.defaults, r));
              n = u.entry(e, t, s), o = n.mainstay;

              if (!n.error) {
                _context.next = 5;
                break;
              }

              throw o.debug && (n.error.debug = o.debug), n.error;

            case 5:
              if (!o.externals.length) {
                _context.next = 47;
                break;
              }

              _e64 = n.value;
              _iteratorNormalCompletion77 = true;
              _didIteratorError77 = false;
              _iteratorError77 = undefined;
              _context.prev = 10;
              _iterator77 = o.externals[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion77 = (_step77 = _iterator77.next()).done) {
                _context.next = 32;
                break;
              }

              _t71 = _step77.value;
              _r56 = _t71.method, _s36 = _t71.path, _n29 = _t71.label;
              _o23 = void 0, _i33 = void 0, _l11 = _e64;
              _s36.length && (_o23 = _s36[_s36.length - 1], _l11 = (_i33 = a(_e64, _s36.slice(0, -1)))[_o23]);
              _context.prev = 17;
              _context.next = 20;
              return regeneratorRuntime.awrap(_r56(_l11));

            case 20:
              _t72 = _context.sent;

              if (!(void 0 === _t72 || _t72 === _l11)) {
                _context.next = 23;
                break;
              }

              return _context.abrupt("continue", 29);

            case 23:
              _i33 ? _i33[_o23] = _t72 : _e64 = _t72;
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t0 = _context["catch"](17);
              throw _context.t0.message += " (".concat(_n29, ")"), _context.t0;

            case 29:
              _iteratorNormalCompletion77 = true;
              _context.next = 12;
              break;

            case 32:
              _context.next = 38;
              break;

            case 34:
              _context.prev = 34;
              _context.t1 = _context["catch"](10);
              _didIteratorError77 = true;
              _iteratorError77 = _context.t1;

            case 38:
              _context.prev = 38;
              _context.prev = 39;

              if (!_iteratorNormalCompletion77 && _iterator77["return"] != null) {
                _iterator77["return"]();
              }

            case 41:
              _context.prev = 41;

              if (!_didIteratorError77) {
                _context.next = 44;
                break;
              }

              throw _iteratorError77;

            case 44:
              return _context.finish(41);

            case 45:
              return _context.finish(38);

            case 46:
              n.value = _e64;

            case 47:
              if (!(!s.warnings && !s.debug)) {
                _context.next = 49;
                break;
              }

              return _context.abrupt("return", n.value);

            case 49:
              c = {
                value: n.value
              };
              return _context.abrupt("return", (o.warnings.length && (c.warning = l.details(o.warnings)), o.debug && (c.debug = o.debug), c));

            case 51:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[10, 34, 38, 46], [17, 26], [39,, 41, 45]]);
    }, u.entry = function (e, r, s) {
      var _u$tracer = u.tracer(r, s),
          n = _u$tracer.tracer,
          o = _u$tracer.cleanup,
          a = {
        externals: [],
        warnings: [],
        tracer: n,
        debug: s.debug ? [] : null,
        links: r._ids._schemaChain ? new Map() : null
      },
          i = r._ids._schemaChain ? [{
        schema: r
      }] : null,
          f = new c([], [], {
        mainstay: a,
        schemas: i
      }),
          h = t.validate(e, r, f, s);

      o && r.$_root.untrace();
      var m = l.process(h.errors, e, s);
      return {
        value: h.value,
        error: m,
        mainstay: a
      };
    }, u.tracer = function (e, t) {
      return e.$_root._tracer ? {
        tracer: e.$_root._tracer._register(e)
      } : t.debug ? (s(e.$_root.trace, "Debug mode not supported"), {
        tracer: e.$_root.trace()._register(e),
        cleanup: !0
      }) : {
        tracer: u.ignore
      };
    }, t.validate = function (e, t, r, s) {
      var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};

      if (t.$_terms.whens && (t = t._generate(e, r, s).schema), t._preferences && (s = u.prefs(t, s)), t._cache && s.cache) {
        var _s37 = t._cache.get(e);

        if (r.mainstay.tracer.debug(r, "validate", "cached", !!_s37), _s37) return _s37;
      }

      var o = function o(n, _o24, a) {
        return t.$_createError(n, e, _o24, a || r, s);
      },
          a = {
        original: e,
        prefs: s,
        schema: t,
        state: r,
        error: o,
        warn: function warn(e, t, s) {
          return r.mainstay.warnings.push(o(e, t, s));
        },
        message: function message(n, o) {
          return t.$_createError("custom", e, o, r, s, {
            messages: n
          });
        }
      };

      r.mainstay.tracer.entry(t, r);
      var l = t._definition;

      if (l.prepare && void 0 !== e && s.convert) {
        var _t73 = l.prepare(e, a);

        if (_t73) {
          if (r.mainstay.tracer.value(r, "prepare", e, _t73.value), _t73.errors) return u.finalize(_t73.value, [].concat(_t73.errors), a);
          e = _t73.value;
        }
      }

      if (l.coerce && void 0 !== e && s.convert && (!l.coerce.from || l.coerce.from.includes(_typeof(e)))) {
        var _t74 = l.coerce.method(e, a);

        if (_t74) {
          if (r.mainstay.tracer.value(r, "coerced", e, _t74.value), _t74.errors) return u.finalize(_t74.value, [].concat(_t74.errors), a);
          e = _t74.value;
        }
      }

      var c = t._flags.empty;
      c && c.$_match(u.trim(e, t), r.nest(c), i.defaults) && (r.mainstay.tracer.value(r, "empty", e, void 0), e = void 0);
      var f = n.presence || t._flags.presence || (t._flags._endedSwitch ? "ignore" : s.presence);

      if (void 0 === e) {
        if ("forbidden" === f) return u.finalize(e, null, a);
        if ("required" === f) return u.finalize(e, [t.$_createError("any.required", e, null, r, s)], a);

        if ("optional" === f) {
          if (t._flags["default"] !== i.symbols.deepDefault) return u.finalize(e, null, a);
          r.mainstay.tracer.value(r, "default", e, {}), e = {};
        }
      } else if ("forbidden" === f) return u.finalize(e, [t.$_createError("any.unknown", e, null, r, s)], a);

      var h = [];

      if (t._valids) {
        var _n30 = t._valids.get(e, r, s, t._flags.insensitive);

        if (_n30) return s.convert && (r.mainstay.tracer.value(r, "valids", e, _n30.value), e = _n30.value), r.mainstay.tracer.filter(t, r, "valid", _n30), u.finalize(e, null, a);

        if (t._flags.only) {
          var _n31 = t.$_createError("any.only", e, {
            valids: t._valids.values({
              display: !0
            })
          }, r, s);

          if (s.abortEarly) return u.finalize(e, [_n31], a);
          h.push(_n31);
        }
      }

      if (t._invalids) {
        var _n32 = t._invalids.get(e, r, s, t._flags.insensitive);

        if (_n32) {
          r.mainstay.tracer.filter(t, r, "invalid", _n32);

          var _o25 = t.$_createError("any.invalid", e, {
            invalids: t._invalids.values({
              display: !0
            })
          }, r, s);

          if (s.abortEarly) return u.finalize(e, [_o25], a);
          h.push(_o25);
        }
      }

      if (l.validate) {
        var _t75 = l.validate(e, a);

        if (_t75 && (r.mainstay.tracer.value(r, "base", e, _t75.value), e = _t75.value, _t75.errors)) {
          if (!Array.isArray(_t75.errors)) return h.push(_t75.errors), u.finalize(e, h, a);
          if (_t75.errors.length) return h.push.apply(h, _toConsumableArray(_t75.errors)), u.finalize(e, h, a);
        }
      }

      return t._rules.length ? u.rules(e, h, a) : u.finalize(e, h, a);
    }, u.rules = function (e, t, r) {
      var s = r.schema,
          n = r.state,
          o = r.prefs;
      var _iteratorNormalCompletion78 = true;
      var _didIteratorError78 = false;
      var _iteratorError78 = undefined;

      try {
        for (var _iterator78 = s._rules[Symbol.iterator](), _step78; !(_iteratorNormalCompletion78 = (_step78 = _iterator78.next()).done); _iteratorNormalCompletion78 = true) {
          var _a23 = _step78.value;
          var _l12 = s._definition.rules[_a23.method];

          if (_l12.convert && o.convert) {
            n.mainstay.tracer.log(s, n, "rule", _a23.name, "full");
            continue;
          }

          var _c11 = void 0,
              f = _a23.args;

          if (_a23._resolve.length) {
            f = Object.assign({}, f);
            var _iteratorNormalCompletion79 = true;
            var _didIteratorError79 = false;
            var _iteratorError79 = undefined;

            try {
              for (var _iterator79 = _a23._resolve[Symbol.iterator](), _step79; !(_iteratorNormalCompletion79 = (_step79 = _iterator79.next()).done); _iteratorNormalCompletion79 = true) {
                var _t76 = _step79.value;

                var _r57 = _l12.argsByName.get(_t76),
                    _a24 = f[_t76].resolve(e, n, o),
                    _u5 = _r57.normalize ? _r57.normalize(_a24) : _a24,
                    _h4 = i.validateArg(_u5, null, _r57);

                if (_h4) {
                  _c11 = s.$_createError("any.ref", _a24, {
                    arg: _t76,
                    ref: f[_t76],
                    reason: _h4
                  }, n, o);
                  break;
                }

                f[_t76] = _u5;
              }
            } catch (err) {
              _didIteratorError79 = true;
              _iteratorError79 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion79 && _iterator79["return"] != null) {
                  _iterator79["return"]();
                }
              } finally {
                if (_didIteratorError79) {
                  throw _iteratorError79;
                }
              }
            }
          }

          _c11 = _c11 || _l12.validate(e, r, f, _a23);
          var h = u.rule(_c11, _a23);

          if (h.errors) {
            if (n.mainstay.tracer.log(s, n, "rule", _a23.name, "error"), _a23.warn) {
              var _n$mainstay$warnings;

              (_n$mainstay$warnings = n.mainstay.warnings).push.apply(_n$mainstay$warnings, _toConsumableArray(h.errors));

              continue;
            }

            if (o.abortEarly) return u.finalize(e, h.errors, r);
            t.push.apply(t, _toConsumableArray(h.errors));
          } else n.mainstay.tracer.log(s, n, "rule", _a23.name, "pass"), n.mainstay.tracer.value(n, "rule", e, h.value, _a23.name), e = h.value;
        }
      } catch (err) {
        _didIteratorError78 = true;
        _iteratorError78 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion78 && _iterator78["return"] != null) {
            _iterator78["return"]();
          }
        } finally {
          if (_didIteratorError78) {
            throw _iteratorError78;
          }
        }
      }

      return u.finalize(e, t, r);
    }, u.rule = function (e, t) {
      return e instanceof l.Report ? (u.error(e, t), {
        errors: [e],
        value: null
      }) : Array.isArray(e) && (e[0] instanceof l.Report || e[0] instanceof Error) ? (e.forEach(function (e) {
        return u.error(e, t);
      }), {
        errors: e,
        value: null
      }) : {
        errors: null,
        value: e
      };
    }, u.error = function (e, t) {
      return t.message && e._setTemplate(t.message), e;
    }, u.finalize = function (e, t, r) {
      t = t || [];
      var n = r.schema,
          o = r.state,
          a = r.prefs;

      if (t.length) {
        var _s38 = u["default"]("failover", void 0, t, r);

        void 0 !== _s38 && (o.mainstay.tracer.value(o, "failover", e, _s38), e = _s38, t = []);
      }

      if (t.length && n._flags.error) if ("function" == typeof n._flags.error) {
        t = n._flags.error(t), Array.isArray(t) || (t = [t]);
        var _iteratorNormalCompletion80 = true;
        var _didIteratorError80 = false;
        var _iteratorError80 = undefined;

        try {
          for (var _iterator80 = t[Symbol.iterator](), _step80; !(_iteratorNormalCompletion80 = (_step80 = _iterator80.next()).done); _iteratorNormalCompletion80 = true) {
            var _e65 = _step80.value;
            s(_e65 instanceof Error || _e65 instanceof l.Report, "error() must return an Error object");
          }
        } catch (err) {
          _didIteratorError80 = true;
          _iteratorError80 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion80 && _iterator80["return"] != null) {
              _iterator80["return"]();
            }
          } finally {
            if (_didIteratorError80) {
              throw _iteratorError80;
            }
          }
        }
      } else t = [n._flags.error];

      if (void 0 === e) {
        var _s39 = u["default"]("default", e, t, r);

        o.mainstay.tracer.value(o, "default", e, _s39), e = _s39;
      }

      if (n._flags.cast && void 0 !== e) {
        var _t77 = n._definition.cast[n._flags.cast];

        if (_t77.from(e)) {
          var _s40 = _t77.to(e, r);

          o.mainstay.tracer.value(o, "cast", e, _s40, n._flags.cast), e = _s40;
        }
      }

      if (n.$_terms.externals && a.externals && !1 !== a._externals) {
        var _iteratorNormalCompletion81 = true;
        var _didIteratorError81 = false;
        var _iteratorError81 = undefined;

        try {
          for (var _iterator81 = n.$_terms.externals[Symbol.iterator](), _step81; !(_iteratorNormalCompletion81 = (_step81 = _iterator81.next()).done); _iteratorNormalCompletion81 = true) {
            var _e66 = _step81.value;
            var _t78 = _e66.method;
            o.mainstay.externals.push({
              method: _t78,
              path: o.path,
              label: l.label(n._flags, o, a)
            });
          }
        } catch (err) {
          _didIteratorError81 = true;
          _iteratorError81 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion81 && _iterator81["return"] != null) {
              _iterator81["return"]();
            }
          } finally {
            if (_didIteratorError81) {
              throw _iteratorError81;
            }
          }
        }
      }

      var i = {
        value: e,
        errors: t.length ? t : null
      };
      return n._flags.result && (i.value = "strip" === n._flags.result ? void 0 : r.original, o.mainstay.tracer.value(o, n._flags.result, e, i.value), o.shadow(e, n._flags.result)), n._cache && !1 !== a.cache && !n._refs.length && n._cache.set(r.original, i), i;
    }, u.prefs = function (e, t) {
      var r = t === i.defaults;
      return r && e._preferences[i.symbols.prefs] ? e._preferences[i.symbols.prefs] : (t = i.preferences(t, e._preferences), r && (e._preferences[i.symbols.prefs] = t), t);
    }, u["default"] = function (e, t, r, s) {
      var o = s.schema,
          a = s.state,
          l = s.prefs;
      var c = o._flags[e];
      if (l.noDefaults || void 0 === c) return t;
      if (a.mainstay.tracer.log(o, a, "rule", e, "full"), !c) return c;

      if ("function" == typeof c) {
        var _t79 = c.length > 0 ? [n(a.ancestors[0]), l] : [];

        try {
          return c.apply(void 0, _t79);
        } catch (t) {
          return void r.push(o.$_createError("any.".concat(e), null, {
            error: t
          }, a, l));
        }
      }

      return "object" != _typeof(c) ? c : c[i.symbols.literal] ? c.literal : i.isResolvable(c) ? c.resolve(t, a, l) : n(c);
    }, u.trim = function (e, t) {
      if ("string" != typeof e) return e;
      var r = t.$_getRule("trim");
      return r && r.args.enabled ? e.trim() : e;
    }, u.ignore = {
      active: !1,
      debug: o,
      entry: o,
      filter: o,
      log: o,
      resolve: o,
      value: o
    };
  }, function (e, t, r) {
    "use strict";

    e.exports = function () {};
  }, function (e, t, r) {
    "use strict";

    var s = r(2),
        n = r(8),
        o = r(1),
        a = {
      value: Symbol("value")
    };
    e.exports = a.State =
    /*#__PURE__*/
    function () {
      function _class15(e, t, r) {
        _classCallCheck(this, _class15);

        this.path = e, this.ancestors = t, this.mainstay = r.mainstay, this.schemas = r.schemas, this.debug = null;
      }

      _createClass(_class15, [{
        key: "localize",
        value: function localize(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
              r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
          var s = new a.State(e, t, this);
          return r && s.schemas && (s.schemas = [a.schemas(r)].concat(_toConsumableArray(s.schemas))), s;
        }
      }, {
        key: "nest",
        value: function nest(e, t) {
          var r = new a.State(this.path, this.ancestors, this);
          return r.schemas = r.schemas && [a.schemas(e)].concat(_toConsumableArray(r.schemas)), r.debug = t, r;
        }
      }, {
        key: "shadow",
        value: function shadow(e, t) {
          this.mainstay.shadow = this.mainstay.shadow || new a.Shadow(), this.mainstay.shadow.set(this.path, e, t);
        }
      }, {
        key: "snapshot",
        value: function snapshot() {
          this.mainstay.shadow && (this._snapshot = s(this.mainstay.shadow.node(this.path)));
        }
      }, {
        key: "restore",
        value: function restore() {
          this.mainstay.shadow && (this.mainstay.shadow.override(this.path, this._snapshot), this._snapshot = void 0);
        }
      }]);

      return _class15;
    }(), a.schemas = function (e) {
      return o.isSchema(e) ? {
        schema: e
      } : e;
    }, a.Shadow =
    /*#__PURE__*/
    function () {
      function _class16() {
        _classCallCheck(this, _class16);

        this._values = null;
      }

      _createClass(_class16, [{
        key: "set",
        value: function set(e, t, r) {
          if (!e.length) return;
          if ("strip" === r && "number" == typeof e[e.length - 1]) return;
          this._values = this._values || new Map();
          var s = this._values;

          for (var _t80 = 0; _t80 < e.length; ++_t80) {
            var _r58 = e[_t80];

            var _n33 = s.get(_r58);

            _n33 || (_n33 = new Map(), s.set(_r58, _n33)), s = _n33;
          }

          s[a.value] = t;
        }
      }, {
        key: "get",
        value: function get(e) {
          var t = this.node(e);
          if (t) return t[a.value];
        }
      }, {
        key: "node",
        value: function node(e) {
          if (this._values) return n(this._values, e, {
            iterables: !0
          });
        }
      }, {
        key: "override",
        value: function override(e, t) {
          if (!this._values) return;
          var r = e.slice(0, -1),
              s = e[e.length - 1],
              o = n(this._values, r, {
            iterables: !0
          });
          t ? o.set(s, t) : o && o["delete"](s);
        }
      }]);

      return _class16;
    }();
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(11),
        o = r(8),
        a = r(3),
        i = r(1),
        l = r(7),
        c = {};
    e.exports = a.extend({
      type: "array",
      flags: {
        single: {
          "default": !1
        },
        sparse: {
          "default": !1
        }
      },
      terms: {
        items: {
          init: [],
          manifest: "schema"
        },
        ordered: {
          init: [],
          manifest: "schema"
        },
        _exclusions: {
          init: []
        },
        _inclusions: {
          init: []
        },
        _requireds: {
          init: []
        }
      },
      coerce: {
        from: "object",
        method: function method(e, t) {
          var r = t.schema,
              s = t.state,
              n = t.prefs;
          if (!Array.isArray(e)) return;
          var o = r.$_getRule("sort");
          return o ? c.sort(r, e, o.args.options, s, n) : void 0;
        }
      },
      validate: function validate(e, t) {
        var r = t.schema,
            s = t.error;

        if (!Array.isArray(e)) {
          if (r._flags.single) {
            var _t81 = [e];
            return _t81[i.symbols.arraySingle] = !0, {
              value: _t81
            };
          }

          return {
            errors: s("array.base")
          };
        }

        if (r.$_getRule("items") || r.$_terms.externals) return {
          value: e.slice()
        };
      },
      rules: {
        has: {
          method: function method(e) {
            e = this.$_compile(e, {
              appendPath: !0
            });
            var t = this.$_addRule({
              name: "has",
              args: {
                schema: e
              }
            });
            return t.$_mutateRegister(e), t;
          },
          validate: function validate(e, t, r) {
            var s = t.state,
                n = t.prefs,
                o = t.error,
                a = r.schema;
            var i = [e].concat(_toConsumableArray(s.ancestors));

            for (var _t82 = 0; _t82 < e.length; ++_t82) {
              var _r59 = s.localize([].concat(_toConsumableArray(s.path), [_t82]), i, a);

              if (a.$_match(e[_t82], _r59, n)) return e;
            }

            var l = a._flags.label;
            return l ? o("array.hasKnown", {
              patternLabel: l
            }) : o("array.hasUnknown", null);
          },
          multi: !0
        },
        items: {
          method: function method() {
            var _this10 = this;

            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            i.verifyFlat(t, "items");
            var s = this.$_addRule("items");

            var _loop10 = function _loop10(_e67) {
              var r = i.tryWithPath(function () {
                return _this10.$_compile(t[_e67]);
              }, _e67, {
                append: !0
              });
              s.$_terms.items.push(r);
            };

            for (var _e67 = 0; _e67 < t.length; ++_e67) {
              _loop10(_e67);
            }

            return s.$_mutateRebuild();
          },
          validate: function validate(e, t) {
            var r = t.schema,
                s = t.error,
                n = t.state,
                o = t.prefs;

            var a = r.$_terms._requireds.slice(),
                l = r.$_terms.ordered.slice(),
                u = [].concat(_toConsumableArray(r.$_terms._inclusions), _toConsumableArray(a)),
                f = !e[i.symbols.arraySingle];

            delete e[i.symbols.arraySingle];
            var h = [];
            var m = e.length;

            for (var _t83 = 0; _t83 < m; ++_t83) {
              var _i34 = e[_t83];
              var d = !1,
                  p = !1;
              var g = f ? _t83 : new Number(_t83),
                  y = [].concat(_toConsumableArray(n.path), [g]);

              if (!r._flags.sparse && void 0 === _i34) {
                if (h.push(s("array.sparse", {
                  key: g,
                  path: y,
                  pos: _t83,
                  value: void 0
                }, n.localize(y))), o.abortEarly) return h;
                l.shift();
                continue;
              }

              var b = [e].concat(_toConsumableArray(n.ancestors));
              var _iteratorNormalCompletion82 = true;
              var _didIteratorError82 = false;
              var _iteratorError82 = undefined;

              try {
                for (var _iterator82 = r.$_terms._exclusions[Symbol.iterator](), _step82; !(_iteratorNormalCompletion82 = (_step82 = _iterator82.next()).done); _iteratorNormalCompletion82 = true) {
                  var _e68 = _step82.value;

                  if (_e68.$_match(_i34, n.localize(y, b, _e68), o, {
                    presence: "ignore"
                  })) {
                    if (h.push(s("array.excludes", {
                      pos: _t83,
                      value: _i34
                    }, n.localize(y))), o.abortEarly) return h;
                    d = !0, l.shift();
                    break;
                  }
                }
              } catch (err) {
                _didIteratorError82 = true;
                _iteratorError82 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion82 && _iterator82["return"] != null) {
                    _iterator82["return"]();
                  }
                } finally {
                  if (_didIteratorError82) {
                    throw _iteratorError82;
                  }
                }
              }

              if (d) continue;

              if (r.$_terms.ordered.length) {
                if (l.length) {
                  var _a25 = l.shift(),
                      _u6 = _a25.$_validate(_i34, n.localize(y, b, _a25), o);

                  if (_u6.errors) {
                    if (h.push.apply(h, _toConsumableArray(_u6.errors)), o.abortEarly) return h;
                  } else if ("strip" === _a25._flags.result) c.fastSplice(e, _t83), --_t83, --m;else {
                    if (!r._flags.sparse && void 0 === _u6.value) {
                      if (h.push(s("array.sparse", {
                        key: g,
                        path: y,
                        pos: _t83,
                        value: void 0
                      }, n.localize(y))), o.abortEarly) return h;
                      continue;
                    }

                    e[_t83] = _u6.value;
                  }

                  continue;
                }

                if (!r.$_terms.items.length) {
                  if (h.push(s("array.orderedLength", {
                    pos: _t83,
                    limit: r.$_terms.ordered.length
                  })), o.abortEarly) return h;
                  break;
                }
              }

              var v = [];
              var _ = a.length;

              for (var _l13 = 0; _l13 < _; ++_l13) {
                var _u7 = n.localize(y, b, a[_l13]);

                _u7.snapshot();

                var _f4 = a[_l13].$_validate(_i34, _u7, o);

                if (v[_l13] = _f4, !_f4.errors) {
                  if (e[_t83] = _f4.value, p = !0, c.fastSplice(a, _l13), --_l13, --_, !r._flags.sparse && void 0 === _f4.value && (h.push(s("array.sparse", {
                    key: g,
                    path: y,
                    pos: _t83,
                    value: void 0
                  }, n.localize(y))), o.abortEarly)) return h;
                  break;
                }

                _u7.restore();
              }

              if (p) continue;
              var w = o.stripUnknown && !!o.stripUnknown.arrays || !1;
              _ = u.length;
              var _iteratorNormalCompletion83 = true;
              var _didIteratorError83 = false;
              var _iteratorError83 = undefined;

              try {
                for (var _iterator83 = u[Symbol.iterator](), _step83; !(_iteratorNormalCompletion83 = (_step83 = _iterator83.next()).done); _iteratorNormalCompletion83 = true) {
                  var _l14 = _step83.value;

                  var _u8 = void 0;

                  var _f5 = a.indexOf(_l14);

                  if (-1 !== _f5) _u8 = v[_f5];else {
                    var _a26 = n.localize(y, b, _l14);

                    if (_a26.snapshot(), !(_u8 = _l14.$_validate(_i34, _a26, o)).errors) {
                      "strip" === _l14._flags.result ? (c.fastSplice(e, _t83), --_t83, --m) : r._flags.sparse || void 0 !== _u8.value ? e[_t83] = _u8.value : (h.push(s("array.sparse", {
                        key: g,
                        path: y,
                        pos: _t83,
                        value: void 0
                      }, n.localize(y))), d = !0), p = !0;
                      break;
                    }

                    _a26.restore();
                  }

                  if (1 === _) {
                    if (w) {
                      c.fastSplice(e, _t83), --_t83, --m, p = !0;
                      break;
                    }

                    if (h.push.apply(h, _toConsumableArray(_u8.errors)), o.abortEarly) return h;
                    d = !0;
                    break;
                  }
                }
              } catch (err) {
                _didIteratorError83 = true;
                _iteratorError83 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion83 && _iterator83["return"] != null) {
                    _iterator83["return"]();
                  }
                } finally {
                  if (_didIteratorError83) {
                    throw _iteratorError83;
                  }
                }
              }

              if (!d && r.$_terms._inclusions.length && !p) {
                if (w) {
                  c.fastSplice(e, _t83), --_t83, --m;
                  continue;
                }

                if (h.push(s("array.includes", {
                  pos: _t83,
                  value: _i34
                }, n.localize(y))), o.abortEarly) return h;
              }
            }

            return a.length && c.fillMissedErrors(r, h, a, e, n, o), l.length && c.fillOrderedErrors(r, h, l, e, n, o), h.length ? h : e;
          },
          priority: !0,
          manifest: !1
        },
        length: {
          method: function method(e) {
            return this.$_addRule({
              name: "length",
              args: {
                limit: e
              },
              operator: "="
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.limit,
                o = s.name,
                a = s.operator,
                l = s.args;
            return i.compare(e.length, n, a) ? e : t.error("array." + o, {
              limit: l.limit,
              value: e
            });
          },
          args: [{
            name: "limit",
            ref: !0,
            assert: i.limit,
            message: "must be a positive integer"
          }]
        },
        max: {
          method: function method(e) {
            return this.$_addRule({
              name: "max",
              method: "length",
              args: {
                limit: e
              },
              operator: "<="
            });
          }
        },
        min: {
          method: function method(e) {
            return this.$_addRule({
              name: "min",
              method: "length",
              args: {
                limit: e
              },
              operator: ">="
            });
          }
        },
        ordered: {
          method: function method() {
            var _this11 = this;

            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            i.verifyFlat(t, "ordered");
            var s = this.$_addRule("items");

            var _loop11 = function _loop11(_e69) {
              var r = i.tryWithPath(function () {
                return _this11.$_compile(t[_e69]);
              }, _e69, {
                append: !0
              });
              c.validateSingle(r, s), s.$_mutateRegister(r), s.$_terms.ordered.push(r);
            };

            for (var _e69 = 0; _e69 < t.length; ++_e69) {
              _loop11(_e69);
            }

            return s.$_mutateRebuild();
          }
        },
        single: {
          method: function method(e) {
            var t = void 0 === e || !!e;
            return s(!t || !this._flags._arrayItems, "Cannot specify single rule when array has array items"), this.$_setFlag("single", t);
          }
        },
        sort: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            i.assertOptions(e, ["by", "order"]);
            var t = {
              order: e.order || "ascending"
            };
            return e.by && (t.by = l.ref(e.by, {
              ancestor: 0
            }), s(!t.by.ancestor, "Cannot sort by ancestor")), this.$_addRule({
              name: "sort",
              args: {
                options: t
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = t.error,
                n = t.state,
                o = t.prefs,
                a = t.schema,
                i = r.options;

            var _c$sort = c.sort(a, e, i, n, o),
                l = _c$sort.value,
                u = _c$sort.errors;

            if (u) return u;

            for (var _t84 = 0; _t84 < e.length; ++_t84) {
              if (e[_t84] !== l[_t84]) return s("array.sort", {
                order: i.order,
                by: i.by ? i.by.key : "value"
              });
            }

            return e;
          },
          convert: !0
        },
        sparse: {
          method: function method(e) {
            var t = void 0 === e || !!e;
            return this._flags.sparse === t ? this : (t ? this.clone() : this.$_addRule("items")).$_setFlag("sparse", t, {
              clone: !1
            });
          }
        },
        unique: {
          method: function method(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            s(!e || "function" == typeof e || "string" == typeof e, "comparator must be a function or a string"), i.assertOptions(t, ["ignoreUndefined", "separator"]);
            var r = {
              name: "unique",
              args: {
                options: t,
                comparator: e
              }
            };
            if (e) if ("string" == typeof e) {
              var _s41 = i["default"](t.separator, ".");

              r.path = _s41 ? e.split(_s41) : [e];
            } else r.comparator = e;
            return this.$_addRule(r);
          },
          validate: function validate(e, t, r, a) {
            var i = t.state,
                l = t.error,
                c = t.schema,
                u = r.comparator,
                f = r.options,
                h = a.comparator,
                m = a.path;
            var d = {
              string: Object.create(null),
              number: Object.create(null),
              undefined: Object.create(null),
              "boolean": Object.create(null),
              object: new Map(),
              "function": new Map(),
              custom: new Map()
            },
                p = h || n,
                g = f.ignoreUndefined;

            for (var _t85 = 0; _t85 < e.length; ++_t85) {
              var _r60 = m ? o(e[_t85], m) : e[_t85],
                  _n34 = h ? d.custom : d[_typeof(_r60)];

              if (s(_n34, "Failed to find unique map container for type", _typeof(_r60)), _n34 instanceof Map) {
                var _s42 = _n34.entries();

                var _o26 = void 0;

                for (; !(_o26 = _s42.next()).done;) {
                  if (p(_o26.value[0], _r60)) {
                    var _r61 = i.localize([].concat(_toConsumableArray(i.path), [_t85]), [e].concat(_toConsumableArray(i.ancestors))),
                        _s43 = {
                      pos: _t85,
                      value: e[_t85],
                      dupePos: _o26.value[1],
                      dupeValue: e[_o26.value[1]]
                    };

                    return m && (_s43.path = u), l("array.unique", _s43, _r61);
                  }
                }

                _n34.set(_r60, _t85);
              } else {
                if ((!g || void 0 !== _r60) && void 0 !== _n34[_r60]) {
                  var _s44 = {
                    pos: _t85,
                    value: e[_t85],
                    dupePos: _n34[_r60],
                    dupeValue: e[_n34[_r60]]
                  };
                  return m && (_s44.path = u), l("array.unique", _s44, i.localize([].concat(_toConsumableArray(i.path), [_t85]), [e].concat(_toConsumableArray(i.ancestors))));
                }

                _n34[_r60] = _t85;
              }
            }

            return e;
          },
          args: ["comparator", "options"],
          multi: !0
        }
      },
      cast: {
        set: {
          from: Array.isArray,
          to: function to(e, t) {
            return new Set(e);
          }
        }
      },
      rebuild: function rebuild(e) {
        e.$_terms._inclusions = [], e.$_terms._exclusions = [], e.$_terms._requireds = [];
        var _iteratorNormalCompletion84 = true;
        var _didIteratorError84 = false;
        var _iteratorError84 = undefined;

        try {
          for (var _iterator84 = e.$_terms.items[Symbol.iterator](), _step84; !(_iteratorNormalCompletion84 = (_step84 = _iterator84.next()).done); _iteratorNormalCompletion84 = true) {
            var _t86 = _step84.value;
            c.validateSingle(_t86, e), "required" === _t86._flags.presence ? e.$_terms._requireds.push(_t86) : "forbidden" === _t86._flags.presence ? e.$_terms._exclusions.push(_t86) : e.$_terms._inclusions.push(_t86);
          }
        } catch (err) {
          _didIteratorError84 = true;
          _iteratorError84 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion84 && _iterator84["return"] != null) {
              _iterator84["return"]();
            }
          } finally {
            if (_didIteratorError84) {
              throw _iteratorError84;
            }
          }
        }

        var _iteratorNormalCompletion85 = true;
        var _didIteratorError85 = false;
        var _iteratorError85 = undefined;

        try {
          for (var _iterator85 = e.$_terms.ordered[Symbol.iterator](), _step85; !(_iteratorNormalCompletion85 = (_step85 = _iterator85.next()).done); _iteratorNormalCompletion85 = true) {
            var _t87 = _step85.value;
            c.validateSingle(_t87, e);
          }
        } catch (err) {
          _didIteratorError85 = true;
          _iteratorError85 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion85 && _iterator85["return"] != null) {
              _iterator85["return"]();
            }
          } finally {
            if (_didIteratorError85) {
              throw _iteratorError85;
            }
          }
        }
      },
      manifest: {
        build: function build(e, t) {
          var _e70, _e71;

          return t.items && (e = (_e70 = e).items.apply(_e70, _toConsumableArray(t.items))), t.ordered && (e = (_e71 = e).ordered.apply(_e71, _toConsumableArray(t.ordered))), e;
        }
      },
      messages: {
        "array.base": '"{{#label}}" must be an array',
        "array.excludes": '"{{#label}}" contains an excluded value',
        "array.hasKnown": '"{{#label}}" does not contain at least one required match for type "{#patternLabel}"',
        "array.hasUnknown": '"{{#label}}" does not contain at least one required match',
        "array.includes": '"{{#label}}" does not match any of the allowed types',
        "array.includesRequiredBoth": '"{{#label}}" does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)',
        "array.includesRequiredKnowns": '"{{#label}}" does not contain {{#knownMisses}}',
        "array.includesRequiredUnknowns": '"{{#label}}" does not contain {{#unknownMisses}} required value(s)',
        "array.length": '"{{#label}}" must contain {{#limit}} items',
        "array.max": '"{{#label}}" must contain less than or equal to {{#limit}} items',
        "array.min": '"{{#label}}" must contain at least {{#limit}} items',
        "array.orderedLength": '"{{#label}}" must contain at most {{#limit}} items',
        "array.sort": '"{{#label}}" must be sorted in {#order} order by {{#by}}',
        "array.sort.mismatching": '"{{#label}}" cannot be sorted due to mismatching types',
        "array.sort.unsupported": '"{{#label}}" cannot be sorted due to unsupported type {#type}',
        "array.sparse": '"{{#label}}" must not be a sparse array item',
        "array.unique": '"{{#label}}" contains a duplicate value'
      }
    }), c.fillMissedErrors = function (e, t, r, s, n, o) {
      var a = [];
      var i = 0;
      var _iteratorNormalCompletion86 = true;
      var _didIteratorError86 = false;
      var _iteratorError86 = undefined;

      try {
        for (var _iterator86 = r[Symbol.iterator](), _step86; !(_iteratorNormalCompletion86 = (_step86 = _iterator86.next()).done); _iteratorNormalCompletion86 = true) {
          var _e72 = _step86.value;
          var _t88 = _e72._flags.label;
          _t88 ? a.push(_t88) : ++i;
        }
      } catch (err) {
        _didIteratorError86 = true;
        _iteratorError86 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion86 && _iterator86["return"] != null) {
            _iterator86["return"]();
          }
        } finally {
          if (_didIteratorError86) {
            throw _iteratorError86;
          }
        }
      }

      a.length ? i ? t.push(e.$_createError("array.includesRequiredBoth", s, {
        knownMisses: a,
        unknownMisses: i
      }, n, o)) : t.push(e.$_createError("array.includesRequiredKnowns", s, {
        knownMisses: a
      }, n, o)) : t.push(e.$_createError("array.includesRequiredUnknowns", s, {
        unknownMisses: i
      }, n, o));
    }, c.fillOrderedErrors = function (e, t, r, s, n, o) {
      var a = [];
      var _iteratorNormalCompletion87 = true;
      var _didIteratorError87 = false;
      var _iteratorError87 = undefined;

      try {
        for (var _iterator87 = r[Symbol.iterator](), _step87; !(_iteratorNormalCompletion87 = (_step87 = _iterator87.next()).done); _iteratorNormalCompletion87 = true) {
          var _e73 = _step87.value;
          "required" === _e73._flags.presence && a.push(_e73);
        }
      } catch (err) {
        _didIteratorError87 = true;
        _iteratorError87 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion87 && _iterator87["return"] != null) {
            _iterator87["return"]();
          }
        } finally {
          if (_didIteratorError87) {
            throw _iteratorError87;
          }
        }
      }

      a.length && c.fillMissedErrors(e, t, a, s, n, o);
    }, c.fastSplice = function (e, t) {
      var r = t;

      for (; r < e.length;) {
        e[r++] = e[r];
      }

      --e.length;
    }, c.validateSingle = function (e, t) {
      ("array" === e.type || e._flags._arrayItems) && (s(!t._flags.single, "Cannot specify array item with single rule enabled"), t.$_setFlag("_arrayItems", !0, {
        clone: !1
      }));
    }, c.sort = function (e, t, r, s, n) {
      var o = "ascending" === r.order ? 1 : -1,
          a = -1 * o,
          i = o,
          l = function l(_l15, u) {
        var f = c.compare(_l15, u, a, i);
        if (null !== f) return f;
        if (r.by && (_l15 = r.by.resolve(_l15, s, n), u = r.by.resolve(u, s, n)), null !== (f = c.compare(_l15, u, a, i))) return f;

        var h = _typeof(_l15);

        if (h !== _typeof(u)) throw e.$_createError("array.sort.mismatching", t, null, s, n);
        if ("number" !== h && "string" !== h) throw e.$_createError("array.sort.unsupported", t, {
          type: h
        }, s, n);
        return "number" === h ? (_l15 - u) * o : _l15 < u ? a : i;
      };

      try {
        return {
          value: t.slice().sort(l)
        };
      } catch (e) {
        return {
          errors: e
        };
      }
    }, c.compare = function (e, t, r, s) {
      return e === t ? 0 : void 0 === e ? 1 : void 0 === t ? -1 : null === e ? s : null === t ? r : null;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = r(1),
        a = r(21),
        i = {
      isBool: function isBool(e) {
        return "boolean" == typeof e;
      }
    };
    e.exports = n.extend({
      type: "boolean",
      flags: {
        sensitive: {
          "default": !1
        }
      },
      terms: {
        falsy: {
          init: null,
          manifest: "values"
        },
        truthy: {
          init: null,
          manifest: "values"
        }
      },
      coerce: function coerce(e, t) {
        var r = t.schema;

        if ("boolean" != typeof e) {
          if ("string" == typeof e) {
            var _t89 = r._flags.sensitive ? e : e.toLowerCase();

            e = "true" === _t89 || "false" !== _t89 && e;
          }

          return "boolean" != typeof e && (e = r.$_terms.truthy && r.$_terms.truthy.has(e, null, null, !r._flags.sensitive) || (!r.$_terms.falsy || !r.$_terms.falsy.has(e, null, null, !r._flags.sensitive)) && e), {
            value: e
          };
        }
      },
      validate: function validate(e, t) {
        var r = t.error;
        if ("boolean" != typeof e) return {
          value: e,
          errors: r("boolean.base")
        };
      },
      rules: {
        truthy: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            o.verifyFlat(t, "truthy");
            var n = this.clone();
            n.$_terms.truthy = n.$_terms.truthy || new a();

            for (var _e74 = 0; _e74 < t.length; ++_e74) {
              var _r62 = t[_e74];
              s(void 0 !== _r62, "Cannot call truthy with undefined"), n.$_terms.truthy.add(_r62);
            }

            return n;
          }
        },
        falsy: {
          method: function method() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
              t[r] = arguments[r];
            }

            o.verifyFlat(t, "falsy");
            var n = this.clone();
            n.$_terms.falsy = n.$_terms.falsy || new a();

            for (var _e75 = 0; _e75 < t.length; ++_e75) {
              var _r63 = t[_e75];
              s(void 0 !== _r63, "Cannot call falsy with undefined"), n.$_terms.falsy.add(_r63);
            }

            return n;
          }
        },
        sensitive: {
          method: function method() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return this.$_setFlag("sensitive", e);
          }
        }
      },
      cast: {
        number: {
          from: i.isBool,
          to: function to(e, t) {
            return e ? 1 : 0;
          }
        },
        string: {
          from: i.isBool,
          to: function to(e, t) {
            return e ? "true" : "false";
          }
        }
      },
      manifest: {
        build: function build(e, t) {
          var _e76, _e77;

          return t.truthy && (e = (_e76 = e).truthy.apply(_e76, _toConsumableArray(t.truthy))), t.falsy && (e = (_e77 = e).falsy.apply(_e77, _toConsumableArray(t.falsy))), e;
        }
      },
      messages: {
        "boolean.base": '"{{#label}}" must be a boolean'
      }
    });
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = r(1),
        a = r(6),
        i = {
      isDate: function isDate(e) {
        return e instanceof Date;
      }
    };
    e.exports = n.extend({
      type: "date",
      coerce: {
        from: ["number", "string"],
        method: function method(e, t) {
          var r = t.schema;
          return {
            value: i.parse(e, r._flags.format) || e
          };
        }
      },
      validate: function validate(e, t) {
        var r = t.schema,
            s = t.error,
            n = t.prefs;
        if (e instanceof Date && !isNaN(e.getTime())) return;
        var o = r._flags.format;
        return n.convert && o && "string" == typeof e ? {
          value: e,
          errors: s("date.format", {
            format: o
          })
        } : {
          value: e,
          errors: s("date.base")
        };
      },
      rules: {
        compare: {
          method: !1,
          validate: function validate(e, t, r, s) {
            var n = r.date,
                a = s.name,
                i = s.operator,
                l = s.args;
            var c = "now" === n ? Date.now() : n.getTime();
            return o.compare(e.getTime(), c, i) ? e : t.error("date." + a, {
              limit: l.date,
              value: e
            });
          },
          args: [{
            name: "date",
            ref: !0,
            normalize: function normalize(e) {
              return "now" === e ? e : i.parse(e);
            },
            assert: function assert(e) {
              return null !== e;
            },
            message: "must have a valid date format"
          }]
        },
        format: {
          method: function method(e) {
            return s(["iso", "javascript", "unix"].includes(e), "Unknown date format", e), this.$_setFlag("format", e);
          }
        },
        greater: {
          method: function method(e) {
            return this.$_addRule({
              name: "greater",
              method: "compare",
              args: {
                date: e
              },
              operator: ">"
            });
          }
        },
        iso: {
          method: function method() {
            return this.format("iso");
          }
        },
        less: {
          method: function method(e) {
            return this.$_addRule({
              name: "less",
              method: "compare",
              args: {
                date: e
              },
              operator: "<"
            });
          }
        },
        max: {
          method: function method(e) {
            return this.$_addRule({
              name: "max",
              method: "compare",
              args: {
                date: e
              },
              operator: "<="
            });
          }
        },
        min: {
          method: function method(e) {
            return this.$_addRule({
              name: "min",
              method: "compare",
              args: {
                date: e
              },
              operator: ">="
            });
          }
        },
        timestamp: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "javascript";
            return s(["javascript", "unix"].includes(e), '"type" must be one of "javascript, unix"'), this.format(e);
          }
        }
      },
      cast: {
        number: {
          from: i.isDate,
          to: function to(e, t) {
            return e.getTime();
          }
        },
        string: {
          from: i.isDate,
          to: function to(e, t) {
            var r = t.prefs;
            return a.date(e, r);
          }
        }
      },
      messages: {
        "date.base": '"{{#label}}" must be a valid date',
        "date.format": '"{{#label}}" must be in {msg("date.format." + #format) || #format} format',
        "date.greater": '"{{#label}}" must be greater than "{{#limit}}"',
        "date.less": '"{{#label}}" must be less than "{{#limit}}"',
        "date.max": '"{{#label}}" must be less than or equal to "{{#limit}}"',
        "date.min": '"{{#label}}" must be larger than or equal to "{{#limit}}"',
        "date.format.iso": "ISO 8601 date",
        "date.format.javascript": "timestamp or number of milliseconds",
        "date.format.unix": "timestamp or number of seconds"
      }
    }), i.parse = function (e, t) {
      if (e instanceof Date) return e;
      if ("string" != typeof e && (isNaN(e) || !isFinite(e))) return null;
      if (/^\s*$/.test(e)) return null;
      if ("iso" === t) return o.isIsoDate(e) ? i.date(e.toString()) : null;
      var r = e;

      if ("string" == typeof e && /^[+-]?\d+(\.\d+)?$/.test(e) && (e = parseFloat(e)), t) {
        if ("javascript" === t) return i.date(1 * e);
        if ("unix" === t) return i.date(1e3 * e);
        if ("string" == typeof r) return null;
      }

      return i.date(e);
    }, i.date = function (e) {
      var t = new Date(e);
      return isNaN(t.getTime()) ? null : t;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(22);
    e.exports = n.extend({
      type: "function",
      properties: {
        "typeof": "function"
      },
      rules: {
        arity: {
          method: function method(e) {
            return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
              name: "arity",
              args: {
                n: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.n;
            return e.length === s ? e : t.error("function.arity", {
              n: s
            });
          }
        },
        "class": {
          method: function method() {
            return this.$_addRule("class");
          },
          validate: function validate(e, t) {
            return /^\s*class\s/.test(e.toString()) ? e : t.error("function.class", {
              value: e
            });
          }
        },
        minArity: {
          method: function method(e) {
            return s(Number.isSafeInteger(e) && e > 0, "n must be a strict positive integer"), this.$_addRule({
              name: "minArity",
              args: {
                n: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.n;
            return e.length >= s ? e : t.error("function.minArity", {
              n: s
            });
          }
        },
        maxArity: {
          method: function method(e) {
            return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
              name: "maxArity",
              args: {
                n: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.n;
            return e.length <= s ? e : t.error("function.maxArity", {
              n: s
            });
          }
        }
      },
      messages: {
        "function.arity": '"{{#label}}" must have an arity of {{#n}}',
        "function.class": '"{{#label}}" must be a class',
        "function.maxArity": '"{{#label}}" must have an arity lesser or equal to {{#n}}',
        "function.minArity": '"{{#label}}" must have an arity greater or equal to {{#n}}'
      }
    });
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(2),
        o = r(20),
        a = r(10),
        i = {};
    e.exports = function (e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      if (s(e && "object" == _typeof(e), "Invalid defaults value: must be an object"), s(!t || !0 === t || "object" == _typeof(t), "Invalid source value: must be true, falsy or an object"), s("object" == _typeof(r), "Invalid options: must be an object"), !t) return null;
      if (r.shallow) return i.applyToDefaultsWithShallow(e, t, r);
      var a = n(e);
      if (!0 === t) return a;
      var l = void 0 !== r.nullOverride && r.nullOverride;
      return o(a, t, {
        nullOverride: l,
        mergeArrays: !1
      });
    }, i.applyToDefaultsWithShallow = function (e, t, r) {
      var i = r.shallow;
      s(Array.isArray(i), "Invalid keys"), (r = Object.assign({}, r)).shallow = !1;
      var l = n(e, {
        shallow: i
      });
      if (!0 === t) return l;
      var c = a.store(t, i);
      return o(l, t, {
        mergeArrays: !1,
        nullOverride: !1
      }), a.restore(l, t, c), l;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = {};
    e.exports =
    /*#__PURE__*/
    function () {
      function _class17() {
        _classCallCheck(this, _class17);

        this._items = [], this.nodes = [];
      }

      _createClass(_class17, [{
        key: "add",
        value: function add(e, t) {
          var r = [].concat((t = t || {}).before || []),
              n = [].concat(t.after || []),
              o = t.group || "?",
              a = t.sort || 0;
          s(!r.includes(o), "Item cannot come before itself: ".concat(o)), s(!r.includes("?"), "Item cannot come before unassociated items"), s(!n.includes(o), "Item cannot come after itself: ".concat(o)), s(!n.includes("?"), "Item cannot come after unassociated items"), Array.isArray(e) || (e = [e]);
          var _iteratorNormalCompletion88 = true;
          var _didIteratorError88 = false;
          var _iteratorError88 = undefined;

          try {
            for (var _iterator88 = e[Symbol.iterator](), _step88; !(_iteratorNormalCompletion88 = (_step88 = _iterator88.next()).done); _iteratorNormalCompletion88 = true) {
              var _t90 = _step88.value;
              var _e78 = {
                seq: this._items.length,
                sort: a,
                before: r,
                after: n,
                group: o,
                node: _t90
              };

              this._items.push(_e78);
            }
          } catch (err) {
            _didIteratorError88 = true;
            _iteratorError88 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion88 && _iterator88["return"] != null) {
                _iterator88["return"]();
              }
            } finally {
              if (_didIteratorError88) {
                throw _iteratorError88;
              }
            }
          }

          var i = this._sort();

          return s(i, "item", "?" !== o ? "added into group ".concat(o) : "", "created a dependencies error"), this.nodes;
        }
      }, {
        key: "merge",
        value: function merge(e) {
          Array.isArray(e) || (e = [e]);
          var _iteratorNormalCompletion89 = true;
          var _didIteratorError89 = false;
          var _iteratorError89 = undefined;

          try {
            for (var _iterator89 = e[Symbol.iterator](), _step89; !(_iteratorNormalCompletion89 = (_step89 = _iterator89.next()).done); _iteratorNormalCompletion89 = true) {
              var _t91 = _step89.value;

              if (_t91) {
                var _iteratorNormalCompletion90 = true;
                var _didIteratorError90 = false;
                var _iteratorError90 = undefined;

                try {
                  for (var _iterator90 = _t91._items[Symbol.iterator](), _step90; !(_iteratorNormalCompletion90 = (_step90 = _iterator90.next()).done); _iteratorNormalCompletion90 = true) {
                    var _e80 = _step90.value;

                    this._items.push(Object.assign({}, _e80));
                  }
                } catch (err) {
                  _didIteratorError90 = true;
                  _iteratorError90 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion90 && _iterator90["return"] != null) {
                      _iterator90["return"]();
                    }
                  } finally {
                    if (_didIteratorError90) {
                      throw _iteratorError90;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError89 = true;
            _iteratorError89 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion89 && _iterator89["return"] != null) {
                _iterator89["return"]();
              }
            } finally {
              if (_didIteratorError89) {
                throw _iteratorError89;
              }
            }
          }

          this._items.sort(n.mergeSort);

          for (var _e79 = 0; _e79 < this._items.length; ++_e79) {
            this._items[_e79].seq = _e79;
          }

          var t = this._sort();

          return s(t, "merge created a dependencies error"), this.nodes;
        }
      }, {
        key: "_sort",
        value: function _sort() {
          var e = {},
              t = Object.create(null),
              r = Object.create(null);
          var _iteratorNormalCompletion91 = true;
          var _didIteratorError91 = false;
          var _iteratorError91 = undefined;

          try {
            for (var _iterator91 = this._items[Symbol.iterator](), _step91; !(_iteratorNormalCompletion91 = (_step91 = _iterator91.next()).done); _iteratorNormalCompletion91 = true) {
              var _s47 = _step91.value;
              var _n37 = _s47.seq,
                  _o30 = _s47.group;
              r[_o30] = r[_o30] || [], r[_o30].push(_n37), e[_n37] = _s47.before;
              var _iteratorNormalCompletion95 = true;
              var _didIteratorError95 = false;
              var _iteratorError95 = undefined;

              try {
                for (var _iterator95 = _s47.after[Symbol.iterator](), _step95; !(_iteratorNormalCompletion95 = (_step95 = _iterator95.next()).done); _iteratorNormalCompletion95 = true) {
                  var _e84 = _step95.value;
                  t[_e84] = t[_e84] || [], t[_e84].push(_n37);
                }
              } catch (err) {
                _didIteratorError95 = true;
                _iteratorError95 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion95 && _iterator95["return"] != null) {
                    _iterator95["return"]();
                  }
                } finally {
                  if (_didIteratorError95) {
                    throw _iteratorError95;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError91 = true;
            _iteratorError91 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion91 && _iterator91["return"] != null) {
                _iterator91["return"]();
              }
            } finally {
              if (_didIteratorError91) {
                throw _iteratorError91;
              }
            }
          }

          for (var _t92 in e) {
            var _s45 = [];

            for (var _n35 in e[_t92]) {
              var _o27 = e[_t92][_n35];
              r[_o27] = r[_o27] || [], _s45.push.apply(_s45, _toConsumableArray(r[_o27]));
            }

            e[_t92] = _s45;
          }

          for (var _s46 in t) {
            if (r[_s46]) {
              var _iteratorNormalCompletion92 = true;
              var _didIteratorError92 = false;
              var _iteratorError92 = undefined;

              try {
                for (var _iterator92 = r[_s46][Symbol.iterator](), _step92; !(_iteratorNormalCompletion92 = (_step92 = _iterator92.next()).done); _iteratorNormalCompletion92 = true) {
                  var _e$_n;

                  var _n36 = _step92.value;

                  (_e$_n = e[_n36]).push.apply(_e$_n, _toConsumableArray(t[_s46]));
                }
              } catch (err) {
                _didIteratorError92 = true;
                _iteratorError92 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion92 && _iterator92["return"] != null) {
                    _iterator92["return"]();
                  }
                } finally {
                  if (_didIteratorError92) {
                    throw _iteratorError92;
                  }
                }
              }
            }
          }

          var s = {};

          for (var _t93 in e) {
            var _r64 = e[_t93];
            var _iteratorNormalCompletion93 = true;
            var _didIteratorError93 = false;
            var _iteratorError93 = undefined;

            try {
              for (var _iterator93 = _r64[Symbol.iterator](), _step93; !(_iteratorNormalCompletion93 = (_step93 = _iterator93.next()).done); _iteratorNormalCompletion93 = true) {
                var _e81 = _step93.value;
                s[_e81] = s[_e81] || [], s[_e81].push(_t93);
              }
            } catch (err) {
              _didIteratorError93 = true;
              _iteratorError93 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion93 && _iterator93["return"] != null) {
                  _iterator93["return"]();
                }
              } finally {
                if (_didIteratorError93) {
                  throw _iteratorError93;
                }
              }
            }
          }

          var n = {},
              o = [];

          for (var _e82 = 0; _e82 < this._items.length; ++_e82) {
            var _t94 = _e82;

            if (s[_e82]) {
              _t94 = null;

              for (var _e83 = 0; _e83 < this._items.length; ++_e83) {
                if (!0 === n[_e83]) continue;
                s[_e83] || (s[_e83] = []);
                var _r65 = s[_e83].length;
                var _o28 = 0;

                for (var _t95 = 0; _t95 < _r65; ++_t95) {
                  n[s[_e83][_t95]] && ++_o28;
                }

                if (_o28 === _r65) {
                  _t94 = _e83;
                  break;
                }
              }
            }

            null !== _t94 && (n[_t94] = !0, o.push(_t94));
          }

          if (o.length !== this._items.length) return !1;
          var a = {};
          var _iteratorNormalCompletion94 = true;
          var _didIteratorError94 = false;
          var _iteratorError94 = undefined;

          try {
            for (var _iterator94 = this._items[Symbol.iterator](), _step94; !(_iteratorNormalCompletion94 = (_step94 = _iterator94.next()).done); _iteratorNormalCompletion94 = true) {
              var _e85 = _step94.value;
              a[_e85.seq] = _e85;
            }
          } catch (err) {
            _didIteratorError94 = true;
            _iteratorError94 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion94 && _iterator94["return"] != null) {
                _iterator94["return"]();
              }
            } finally {
              if (_didIteratorError94) {
                throw _iteratorError94;
              }
            }
          }

          this._items = [], this.nodes = [];

          for (var _i35 = 0, _o29 = o; _i35 < _o29.length; _i35++) {
            var _e86 = _o29[_i35];
            var _t96 = a[_e86];
            this.nodes.push(_t96.node), this._items.push(_t96);
          }

          return !0;
        }
      }]);

      return _class17;
    }(), n.mergeSort = function (e, t) {
      return e.sort === t.sort ? 0 : e.sort < t.sort ? -1 : 1;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = r(1),
        a = r(7),
        i = r(4),
        l = {};
    e.exports = n.extend({
      type: "link",
      properties: {
        schemaChain: !0
      },
      terms: {
        link: {
          init: null,
          manifest: "single",
          register: !1
        }
      },
      args: function args(e, t) {
        return e.ref(t);
      },
      validate: function validate(e, t) {
        var r = t.schema,
            n = t.state,
            o = t.prefs;
        s(r.$_terms.link, "Uninitialized link schema");
        var a = l.generate(r, e, n, o),
            i = r.$_terms.link[0].ref;
        return a.$_validate(e, n.nest(a, "link:".concat(i.display, ":").concat(a.type)), o);
      },
      generate: function generate(e, t, r, s) {
        return l.generate(e, t, r, s);
      },
      rules: {
        ref: {
          method: function method(e) {
            s(!this.$_terms.link, "Cannot reinitialize schema"), e = a.ref(e), s("value" === e.type || "local" === e.type, "Invalid reference type:", e.type), s("local" === e.type || "root" === e.ancestor || e.ancestor > 0, "Link cannot reference itself");
            var t = this.clone();
            return t.$_terms.link = [{
              ref: e
            }], t;
          }
        },
        relative: {
          method: function method() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return this.$_setFlag("relative", e);
          }
        }
      },
      overrides: {
        concat: function concat(e) {
          s(this.$_terms.link, "Uninitialized link schema"), s(o.isSchema(e), "Invalid schema object"), s("link" !== e.type, "Cannot merge type link with another link");
          var t = this.clone();
          return t.$_terms.whens || (t.$_terms.whens = []), t.$_terms.whens.push({
            concat: e
          }), t.$_mutateRebuild();
        }
      },
      manifest: {
        build: function build(e, t) {
          return s(t.link, "Invalid link description missing link"), e.ref(t.link);
        }
      }
    }), l.generate = function (e, t, r, s) {
      var n = r.mainstay.links.get(e);
      if (n) return n._generate(t, r, s).schema;

      var o = e.$_terms.link[0].ref,
          _l$perspective = l.perspective(o, r),
          a = _l$perspective.perspective,
          i = _l$perspective.path;

      l.assert(a, "which is outside of schema boundaries", o, e, r, s);

      try {
        n = i.length ? a.$_reach(i) : a;
      } catch (t) {
        l.assert(!1, "to non-existing schema", o, e, r, s);
      }

      return l.assert("link" !== n.type, "which is another link", o, e, r, s), e._flags.relative || r.mainstay.links.set(e, n), n._generate(t, r, s).schema;
    }, l.perspective = function (e, t) {
      if ("local" === e.type) {
        var _iteratorNormalCompletion96 = true;
        var _didIteratorError96 = false;
        var _iteratorError96 = undefined;

        try {
          for (var _iterator96 = t.schemas[Symbol.iterator](), _step96; !(_iteratorNormalCompletion96 = (_step96 = _iterator96.next()).done); _iteratorNormalCompletion96 = true) {
            var _r66 = _step96.value;
            var _t97 = _r66.schema,
                _s48 = _r66.key;
            if ((_t97._flags.id || _s48) === e.path[0]) return {
              perspective: _t97,
              path: e.path.slice(1)
            };

            if (_t97.$_terms.shared) {
              var _iteratorNormalCompletion97 = true;
              var _didIteratorError97 = false;
              var _iteratorError97 = undefined;

              try {
                for (var _iterator97 = _t97.$_terms.shared[Symbol.iterator](), _step97; !(_iteratorNormalCompletion97 = (_step97 = _iterator97.next()).done); _iteratorNormalCompletion97 = true) {
                  var _r67 = _step97.value;
                  if (_r67._flags.id === e.path[0]) return {
                    perspective: _r67,
                    path: e.path.slice(1)
                  };
                }
              } catch (err) {
                _didIteratorError97 = true;
                _iteratorError97 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion97 && _iterator97["return"] != null) {
                    _iterator97["return"]();
                  }
                } finally {
                  if (_didIteratorError97) {
                    throw _iteratorError97;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError96 = true;
          _iteratorError96 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion96 && _iterator96["return"] != null) {
              _iterator96["return"]();
            }
          } finally {
            if (_didIteratorError96) {
              throw _iteratorError96;
            }
          }
        }

        return {
          perspective: null,
          path: null
        };
      }

      return "root" === e.ancestor ? {
        perspective: t.schemas[t.schemas.length - 1].schema,
        path: e.path
      } : {
        perspective: t.schemas[e.ancestor] && t.schemas[e.ancestor].schema,
        path: e.path
      };
    }, l.assert = function (e, t, r, n, o, a) {
      e || s(!1, '"'.concat(i.label(n._flags, o, a), '" contains link reference "').concat(r.display, '" ').concat(t));
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = r(1),
        a = {
      numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,
      precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
    };
    e.exports = n.extend({
      type: "number",
      flags: {
        unsafe: {
          "default": !1
        }
      },
      coerce: {
        from: "string",
        method: function method(e, t) {
          var r = t.schema,
              s = t.error;
          var n = e.match(a.numberRx);
          if (!n) return;
          e = e.trim();
          var o = {
            value: parseFloat(e)
          };
          if (0 === o.value && (o.value = 0), !r._flags.unsafe) if (e.match(/e/i)) {
            if (a.normalizeExponent("".concat(o.value / Math.pow(10, n[1]), "e").concat(n[1])) !== a.normalizeExponent(e)) return o.errors = s("number.unsafe"), o;
          } else {
            var _t98 = o.value.toString();

            if (_t98.match(/e/i)) return o;
            if (_t98 !== a.normalizeDecimal(e)) return o.errors = s("number.unsafe"), o;
          }
          return o;
        }
      },
      validate: function validate(e, t) {
        var r = t.schema,
            s = t.error,
            n = t.prefs;
        if (e === 1 / 0 || e === -1 / 0) return {
          value: e,
          errors: s("number.infinity")
        };
        if (!o.isNumber(e)) return {
          value: e,
          errors: s("number.base")
        };
        var a = {
          value: e
        };

        if (0 === a.value && (a.value = 0), n.convert) {
          var _e87 = r.$_getRule("precision");

          if (_e87) {
            var _t99 = Math.pow(10, _e87.args.limit);

            a.value = Math.round(a.value * _t99) / _t99;
          }
        }

        return !r._flags.unsafe && (e > Number.MAX_SAFE_INTEGER || e < Number.MIN_SAFE_INTEGER) && (a.errors = s("number.unsafe")), a;
      },
      rules: {
        compare: {
          method: !1,
          validate: function validate(e, t, r, s) {
            var n = r.limit,
                a = s.name,
                i = s.operator,
                l = s.args;
            return o.compare(e, n, i) ? e : t.error("number." + a, {
              limit: l.limit,
              value: e
            });
          },
          args: [{
            name: "limit",
            ref: !0,
            assert: o.isNumber,
            message: "must be a number"
          }]
        },
        greater: {
          method: function method(e) {
            return this.$_addRule({
              name: "greater",
              method: "compare",
              args: {
                limit: e
              },
              operator: ">"
            });
          }
        },
        integer: {
          method: function method() {
            return this.$_addRule("integer");
          },
          validate: function validate(e, t) {
            return Math.trunc(e) - e == 0 ? e : t.error("number.integer");
          }
        },
        less: {
          method: function method(e) {
            return this.$_addRule({
              name: "less",
              method: "compare",
              args: {
                limit: e
              },
              operator: "<"
            });
          }
        },
        max: {
          method: function method(e) {
            return this.$_addRule({
              name: "max",
              method: "compare",
              args: {
                limit: e
              },
              operator: "<="
            });
          }
        },
        min: {
          method: function method(e) {
            return this.$_addRule({
              name: "min",
              method: "compare",
              args: {
                limit: e
              },
              operator: ">="
            });
          }
        },
        multiple: {
          method: function method(e) {
            return this.$_addRule({
              name: "multiple",
              args: {
                base: e
              }
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.base;
            return e % n == 0 ? e : t.error("number.multiple", {
              multiple: s.args.base,
              value: e
            });
          },
          args: [{
            name: "base",
            ref: !0,
            assert: function assert(e) {
              return "number" == typeof e && isFinite(e) && e > 0;
            },
            message: "must be a positive number"
          }],
          multi: !0
        },
        negative: {
          method: function method() {
            return this.sign("negative");
          }
        },
        port: {
          method: function method() {
            return this.$_addRule("port");
          },
          validate: function validate(e, t) {
            return Number.isSafeInteger(e) && e >= 0 && e <= 65535 ? e : t.error("number.port");
          }
        },
        positive: {
          method: function method() {
            return this.sign("positive");
          }
        },
        precision: {
          method: function method(e) {
            return s(Number.isSafeInteger(e), "limit must be an integer"), this.$_addRule({
              name: "precision",
              args: {
                limit: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.limit;
            var n = e.toString().match(a.precisionRx);
            return Math.max((n[1] ? n[1].length : 0) - (n[2] ? parseInt(n[2], 10) : 0), 0) <= s ? e : t.error("number.precision", {
              limit: s,
              value: e
            });
          },
          convert: !0
        },
        sign: {
          method: function method(e) {
            return s(["negative", "positive"].includes(e), "Invalid sign", e), this.$_addRule({
              name: "sign",
              args: {
                sign: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.sign;
            return "negative" === s && e < 0 || "positive" === s && e > 0 ? e : t.error("number.".concat(s));
          }
        },
        unsafe: {
          method: function method() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return s("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("unsafe", e);
          }
        }
      },
      cast: {
        string: {
          from: function from(e) {
            return "number" == typeof e;
          },
          to: function to(e, t) {
            return e.toString();
          }
        }
      },
      messages: {
        "number.base": '"{{#label}}" must be a number',
        "number.greater": '"{{#label}}" must be greater than {{#limit}}',
        "number.infinity": '"{{#label}}" cannot be infinity',
        "number.integer": '"{{#label}}" must be an integer',
        "number.less": '"{{#label}}" must be less than {{#limit}}',
        "number.max": '"{{#label}}" must be less than or equal to {{#limit}}',
        "number.min": '"{{#label}}" must be larger than or equal to {{#limit}}',
        "number.multiple": '"{{#label}}" must be a multiple of {{#multiple}}',
        "number.negative": '"{{#label}}" must be a negative number',
        "number.port": '"{{#label}}" must be a valid port',
        "number.positive": '"{{#label}}" must be a positive number',
        "number.precision": '"{{#label}}" must have no more than {{#limit}} decimal places',
        "number.unsafe": '"{{#label}}" must be a safe number'
      }
    }), a.normalizeExponent = function (e) {
      return e.replace(/E/, "e").replace(/\.(\d*[1-9])?0+e/, ".$1e").replace(/\.e/, "e").replace(/e\+/, "e").replace(/^\+/, "").replace(/^(-?)0+([1-9])/, "$1$2");
    }, a.normalizeDecimal = function (e) {
      return (e = e.replace(/^\+/, "").replace(/\.0+$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([1-9])/, "$1$2")).includes(".") && e.endsWith("0") && (e = e.replace(/0+$/, "")), "-0" === e ? "0" : e;
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(22);
    e.exports = s.extend({
      type: "object",
      cast: {
        map: {
          from: function from(e) {
            return e && "object" == _typeof(e);
          },
          to: function to(e, t) {
            return new Map(Object.entries(e));
          }
        }
      }
    });
  }, function (e, t, r) {
    "use strict";

    function s(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var s = Object.getOwnPropertySymbols(e);
        t && (s = s.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, s);
      }

      return r;
    }

    function n(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {};
        t % 2 ? s(r, !0).forEach(function (t) {
          o(e, t, r[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(r).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
        });
      }

      return e;
    }

    function o(e, t, r) {
      return t in e ? Object.defineProperty(e, t, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = r, e;
    }

    var a = r(0),
        i = r(23),
        l = r(47),
        c = r(25),
        u = r(48),
        f = r(3),
        h = r(1),
        m = r(49),
        d = r(26),
        p = {
      tlds: u instanceof Set && {
        tlds: {
          allow: u,
          deny: null
        }
      },
      base64Regex: {
        "true": {
          "true": /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,
          "false": /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
        },
        "false": {
          "true": /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,
          "false": /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/
        }
      },
      dataUriRegex: {
        format: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,
        base64: {
          "true": /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/,
          "false": /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/
        }
      },
      hexRegex: /^[a-f0-9]+$/i,
      hostRegex: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/,
      ipRegex: m.createIpRegex(["ipv4", "ipv6", "ipvfuture"], "optional"),
      isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,
      guidBrackets: {
        "{": "}",
        "[": "]",
        "(": ")",
        "": ""
      },
      guidVersions: {
        uuidv1: "1",
        uuidv2: "2",
        uuidv3: "3",
        uuidv4: "4",
        uuidv5: "5"
      },
      cidrPresences: ["required", "optional", "forbidden"],
      normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"]
    };
    e.exports = f.extend({
      type: "string",
      flags: {
        insensitive: {
          "default": !1
        },
        truncate: {
          "default": !1
        }
      },
      terms: {
        replacements: {
          init: null
        }
      },
      coerce: {
        from: "string",
        method: function method(e, t) {
          var r = t.schema,
              s = t.state,
              n = t.prefs;
          var o = r.$_getRule("normalize");
          o && (e = e.normalize(o.args.form));
          var a = r.$_getRule("case");
          a && (e = "upper" === a.args.direction ? e.toLocaleUpperCase() : e.toLocaleLowerCase());
          var i = r.$_getRule("trim");

          if (i && i.args.enabled && (e = e.trim()), r.$_terms.replacements) {
            var _iteratorNormalCompletion98 = true;
            var _didIteratorError98 = false;
            var _iteratorError98 = undefined;

            try {
              for (var _iterator98 = r.$_terms.replacements[Symbol.iterator](), _step98; !(_iteratorNormalCompletion98 = (_step98 = _iterator98.next()).done); _iteratorNormalCompletion98 = true) {
                var _t100 = _step98.value;
                e = e.replace(_t100.pattern, _t100.replacement);
              }
            } catch (err) {
              _didIteratorError98 = true;
              _iteratorError98 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion98 && _iterator98["return"] != null) {
                  _iterator98["return"]();
                }
              } finally {
                if (_didIteratorError98) {
                  throw _iteratorError98;
                }
              }
            }
          }

          var l = r.$_getRule("hex");

          if (l && l.args.options.byteAligned && e.length % 2 != 0 && (e = "0".concat(e)), r.$_getRule("isoDate")) {
            var _t101 = p.isoDate(e);

            _t101 && (e = _t101);
          }

          if (r._flags.truncate) {
            var _t102 = r.$_getRule("max");

            if (_t102) {
              var _o31 = _t102.args.limit;
              if (h.isResolvable(_o31) && (_o31 = _o31.resolve(e, s, n), !h.limit(_o31))) return {
                value: e,
                errors: r.$_createError("any.ref", _o31, {
                  ref: _t102.args.limit,
                  arg: "limit",
                  reason: "must be a positive integer"
                }, s, n)
              };
              e = e.slice(0, _o31);
            }
          }

          return {
            value: e
          };
        }
      },
      validate: function validate(e, t) {
        var r = t.error;
        return "string" != typeof e ? {
          value: e,
          errors: r("string.base")
        } : "" === e ? {
          value: e,
          errors: r("string.empty")
        } : void 0;
      },
      rules: {
        alphanum: {
          method: function method() {
            return this.$_addRule("alphanum");
          },
          validate: function validate(e, t) {
            return /^[a-zA-Z0-9]+$/.test(e) ? e : t.error("string.alphanum");
          }
        },
        base64: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return h.assertOptions(e, ["paddingRequired", "urlSafe"]), e = n({
              urlSafe: !1,
              paddingRequired: !0
            }, e), a("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), a("boolean" == typeof e.urlSafe, "urlSafe must be boolean"), this.$_addRule({
              name: "base64",
              args: {
                options: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.options;
            return p.base64Regex[s.paddingRequired][s.urlSafe].test(e) ? e : t.error("string.base64");
          }
        },
        "case": {
          method: function method(e) {
            return a(["lower", "upper"].includes(e), "Invalid case:", e), this.$_addRule({
              name: "case",
              args: {
                direction: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.direction;
            return "lower" === s && e === e.toLocaleLowerCase() || "upper" === s && e === e.toLocaleUpperCase() ? e : t.error("string.".concat(s, "case"));
          },
          convert: !0
        },
        creditCard: {
          method: function method() {
            return this.$_addRule("creditCard");
          },
          validate: function validate(e, t) {
            var r = e.length,
                s = 0,
                n = 1;

            for (; r--;) {
              var _t103 = e.charAt(r) * n;

              s += _t103 - 9 * (_t103 > 9), n ^= 3;
            }

            return s > 0 && s % 10 == 0 ? e : t.error("string.creditCard");
          }
        },
        dataUri: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return h.assertOptions(e, ["paddingRequired"]), e = n({
              paddingRequired: !0
            }, e), a("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), this.$_addRule({
              name: "dataUri",
              args: {
                options: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.options;
            var n = e.match(p.dataUriRegex.format);

            if (n) {
              if (!n[2]) return e;
              if ("base64" !== n[2]) return e;
              if (p.dataUriRegex.base64[s.paddingRequired].test(n[3])) return e;
            }

            return t.error("string.dataUri");
          }
        },
        domain: {
          method: function method(e) {
            e && h.assertOptions(e, ["allowUnicode", "minDomainSegments", "tlds"]);
            var t = p.addressOptions(e);
            return this.$_addRule({
              name: "domain",
              args: {
                options: e
              },
              address: t
            });
          },
          validate: function validate(e, t, r, s) {
            var n = s.address;
            return i.isValid(e, n) ? e : t.error("string.domain");
          }
        },
        email: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            h.assertOptions(e, ["allowUnicode", "ignoreLength", "minDomainSegments", "multiple", "separator", "tlds"]), a(void 0 === e.multiple || "boolean" == typeof e.multiple, "multiple option must be an boolean");
            var t = p.addressOptions(e),
                r = new RegExp("\\s*[".concat(e.separator ? c(e.separator) : ",", "]\\s*"));
            return this.$_addRule({
              name: "email",
              args: {
                options: e
              },
              regex: r,
              address: t
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.options,
                o = s.regex,
                a = s.address;
            var i = n.multiple ? e.split(o) : [e],
                c = [];
            var _iteratorNormalCompletion99 = true;
            var _didIteratorError99 = false;
            var _iteratorError99 = undefined;

            try {
              for (var _iterator99 = i[Symbol.iterator](), _step99; !(_iteratorNormalCompletion99 = (_step99 = _iterator99.next()).done); _iteratorNormalCompletion99 = true) {
                var _e88 = _step99.value;
                l.isValid(_e88, a) || c.push(_e88);
              }
            } catch (err) {
              _didIteratorError99 = true;
              _iteratorError99 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion99 && _iterator99["return"] != null) {
                  _iterator99["return"]();
                }
              } finally {
                if (_didIteratorError99) {
                  throw _iteratorError99;
                }
              }
            }

            return c.length ? t.error("string.email", {
              value: e,
              invalids: c
            }) : e;
          }
        },
        guid: {
          alias: "uuid",
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            h.assertOptions(e, ["version"]);
            var t = "";

            if (e.version) {
              var _r68 = [].concat(e.version);

              a(_r68.length >= 1, "version must have at least 1 valid version specified");

              var _s49 = new Set();

              for (var _e89 = 0; _e89 < _r68.length; ++_e89) {
                var _n38 = _r68[_e89];
                a("string" == typeof _n38, "version at position " + _e89 + " must be a string");

                var _o32 = p.guidVersions[_n38.toLowerCase()];

                a(_o32, "version at position " + _e89 + " must be one of " + Object.keys(p.guidVersions).join(", ")), a(!_s49.has(_o32), "version at position " + _e89 + " must not be a duplicate"), t += _o32, _s49.add(_o32);
              }
            }

            var r = new RegExp("^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[".concat(t || "0-9A-F", "][0-9A-F]{3}\\2?[").concat(t ? "89AB" : "0-9A-F", "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"), "i");
            return this.$_addRule({
              name: "guid",
              args: {
                options: e
              },
              regex: r
            });
          },
          validate: function validate(e, t, r, s) {
            var n = s.regex;
            var o = n.exec(e);
            return o ? p.guidBrackets[o[1]] !== o[o.length - 1] ? t.error("string.guid") : e : t.error("string.guid");
          }
        },
        hex: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return h.assertOptions(e, ["byteAligned"]), e = n({
              byteAligned: !1
            }, e), a("boolean" == typeof e.byteAligned, "byteAligned must be boolean"), this.$_addRule({
              name: "hex",
              args: {
                options: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.options;
            return p.hexRegex.test(e) ? s.byteAligned && e.length % 2 != 0 ? t.error("string.hexAlign") : e : t.error("string.hex");
          }
        },
        hostname: {
          method: function method() {
            return this.$_addRule("hostname");
          },
          validate: function validate(e, t) {
            return e.length <= 255 && p.hostRegex.test(e) || p.ipRegex.test(e) ? e : t.error("string.hostname");
          }
        },
        insensitive: {
          method: function method() {
            return this.$_setFlag("insensitive", !0);
          }
        },
        ip: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            h.assertOptions(e, ["cidr", "version"]), e = Object.assign({}, e);
            var t,
                r = p.ipRegex;

            if (e.cidr ? (a("string" == typeof e.cidr, "cidr must be a string"), e.cidr = e.cidr.toLowerCase(), a(p.cidrPresences.includes(e.cidr), "cidr must be one of " + p.cidrPresences.join(", ")), e.version || "optional" === e.cidr || (r = m.createIpRegex(["ipv4", "ipv6", "ipvfuture"], e.cidr))) : e.cidr = "optional", e.version) {
              Array.isArray(e.version) || (e.version = [e.version]), a(e.version.length >= 1, "version must have at least 1 version specified"), t = [];

              for (var _r69 = 0; _r69 < e.version.length; ++_r69) {
                var _s50 = e.version[_r69];
                a("string" == typeof _s50, "version at position " + _r69 + " must be a string"), _s50 = _s50.toLowerCase(), a(m.versions[_s50], "version at position " + _r69 + " must be one of " + Object.keys(m.versions).join(", ")), t.push(_s50);
              }

              t = Array.from(new Set(t)), r = m.createIpRegex(t, e.cidr);
            }

            return this.$_addRule({
              name: "ip",
              args: {
                options: e
              },
              versions: t,
              regex: r
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.options,
                o = s.versions,
                a = s.regex;
            return a.test(e) ? e : o ? t.error("string.ipVersion", {
              value: e,
              cidr: n.cidr,
              version: o
            }) : t.error("string.ip", {
              value: e,
              cidr: n.cidr
            });
          }
        },
        isoDate: {
          method: function method() {
            return this.$_addRule("isoDate");
          },
          validate: function validate(e, t) {
            var r = t.error;
            return p.isoDate(e) ? e : r("string.isoDate");
          }
        },
        isoDuration: {
          method: function method() {
            return this.$_addRule("isoDuration");
          },
          validate: function validate(e, t) {
            return p.isoDurationRegex.test(e) ? e : t.error("string.isoDuration");
          }
        },
        length: {
          method: function method(e, t) {
            return p.length(this, "length", e, "=", t);
          },
          validate: function validate(e, t, r, s) {
            var n = r.limit,
                o = r.encoding,
                a = s.name,
                i = s.operator,
                l = s.args;
            var c = !o && e.length;
            return h.compare(c, n, i) ? e : t.error("string." + a, {
              limit: l.limit,
              value: e,
              encoding: o
            });
          },
          args: [{
            name: "limit",
            ref: !0,
            assert: h.limit,
            message: "must be a positive integer"
          }, "encoding"]
        },
        lowercase: {
          method: function method() {
            return this["case"]("lower");
          }
        },
        max: {
          method: function method(e, t) {
            return p.length(this, "max", e, "<=", t);
          },
          args: ["limit", "encoding"]
        },
        min: {
          method: function method(e, t) {
            return p.length(this, "min", e, ">=", t);
          },
          args: ["limit", "encoding"]
        },
        normalize: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "NFC";
            return a(p.normalizationForms.includes(e), "normalization form must be one of " + p.normalizationForms.join(", ")), this.$_addRule({
              name: "normalize",
              args: {
                form: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = t.error,
                n = r.form;
            return e === e.normalize(n) ? e : s("string.normalize", {
              value: e,
              form: n
            });
          },
          convert: !0
        },
        pattern: {
          alias: "regex",
          method: function method(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            a(e instanceof RegExp, "regex must be a RegExp"), a(!e.flags.includes("g") && !e.flags.includes("y"), "regex should not use global or sticky mode"), "string" == typeof t && (t = {
              name: t
            }), h.assertOptions(t, ["invert", "name"]);
            var r = ["string.pattern", t.invert ? ".invert" : "", t.name ? ".name" : ".base"].join("");
            return this.$_addRule({
              name: "pattern",
              args: {
                regex: e,
                options: t
              },
              errorCode: r
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.regex,
                o = r.options,
                a = s.errorCode;
            return n.test(e) ^ o.invert ? e : t.error(a, {
              name: o.name,
              regex: n,
              value: e
            });
          },
          args: ["regex", "options"],
          multi: !0
        },
        replace: {
          method: function method(e, t) {
            "string" == typeof e && (e = new RegExp(c(e), "g")), a(e instanceof RegExp, "pattern must be a RegExp"), a("string" == typeof t, "replacement must be a String");
            var r = this.clone();
            return r.$_terms.replacements || (r.$_terms.replacements = []), r.$_terms.replacements.push({
              pattern: e,
              replacement: t
            }), r;
          }
        },
        token: {
          method: function method() {
            return this.$_addRule("token");
          },
          validate: function validate(e, t) {
            return /^\w+$/.test(e) ? e : t.error("string.token");
          }
        },
        trim: {
          method: function method() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return a("boolean" == typeof e, "enabled must be a boolean"), this.$_addRule({
              name: "trim",
              args: {
                enabled: e
              }
            });
          },
          validate: function validate(e, t, r) {
            var s = r.enabled;
            return s && e !== e.trim() ? t.error("string.trim") : e;
          },
          convert: !0
        },
        truncate: {
          method: function method() {
            var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            return a("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("truncate", e);
          }
        },
        uppercase: {
          method: function method() {
            return this["case"]("upper");
          }
        },
        uri: {
          method: function method() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            h.assertOptions(e, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme"]);
            var t = Object.keys(e).filter(function (e) {
              return !["scheme", "allowRelative", "relativeOnly", "allowQuerySquareBrackets", "domain"].includes(e);
            });
            a(0 === t.length, "options contain unknown keys: ".concat(t)), e.domain && h.assertOptions(e.domain, ["allowUnicode", "minDomainSegments", "tlds"]);
            var r = d.createRegex(e),
                s = e.domain ? p.addressOptions(e.domain) : null;
            return this.$_addRule({
              name: "uri",
              args: {
                options: e
              },
              regex: r,
              domain: s
            });
          },
          validate: function validate(e, t, r, s) {
            var n = r.options,
                o = s.regex,
                a = s.domain;
            if (["http:/", "https:/"].includes(e)) return t.error("string.uri");
            var l = o.exec(e);
            return l ? a && !i.isValid(l[1], a) ? t.error("string.domain", {
              value: l[1]
            }) : e : n.relativeOnly ? t.error("string.uriRelativeOnly") : n.scheme ? t.error("string.uriCustomScheme", {
              scheme: o.scheme,
              value: e
            }) : t.error("string.uri");
          }
        }
      },
      manifest: {
        build: function build(e, t) {
          if (t.replacements) {
            var _iteratorNormalCompletion100 = true;
            var _didIteratorError100 = false;
            var _iteratorError100 = undefined;

            try {
              for (var _iterator100 = t.replacements[Symbol.iterator](), _step100; !(_iteratorNormalCompletion100 = (_step100 = _iterator100.next()).done); _iteratorNormalCompletion100 = true) {
                var _r70 = _step100.value;
                var _t104 = _r70.pattern,
                    _s51 = _r70.replacement;
                e = e.replace(_t104, _s51);
              }
            } catch (err) {
              _didIteratorError100 = true;
              _iteratorError100 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion100 && _iterator100["return"] != null) {
                  _iterator100["return"]();
                }
              } finally {
                if (_didIteratorError100) {
                  throw _iteratorError100;
                }
              }
            }
          }

          return e;
        }
      },
      messages: {
        "string.alphanum": '"{{#label}}" must only contain alpha-numeric characters',
        "string.base": '"{{#label}}" must be a string',
        "string.base64": '"{{#label}}" must be a valid base64 string',
        "string.creditCard": '"{{#label}}" must be a credit card',
        "string.dataUri": '"{{#label}}" must be a valid dataUri string',
        "string.domain": '"{{#label}}" must contain a valid domain name',
        "string.email": '"{{#label}}" must be a valid email',
        "string.empty": '"{{#label}}" is not allowed to be empty',
        "string.guid": '"{{#label}}" must be a valid GUID',
        "string.hex": '"{{#label}}" must only contain hexadecimal characters',
        "string.hexAlign": '"{{#label}}" hex decoded representation must be byte aligned',
        "string.hostname": '"{{#label}}" must be a valid hostname',
        "string.ip": '"{{#label}}" must be a valid ip address with a {{#cidr}} CIDR',
        "string.ipVersion": '"{{#label}}" must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR',
        "string.isoDate": '"{{#label}}" must be in iso format',
        "string.isoDuration": '"{{#label}}" must be a valid ISO 8601 duration',
        "string.length": '"{{#label}}" length must be {{#limit}} characters long',
        "string.lowercase": '"{{#label}}" must only contain lowercase characters',
        "string.max": '"{{#label}}" length must be less than or equal to {{#limit}} characters long',
        "string.min": '"{{#label}}" length must be at least {{#limit}} characters long',
        "string.normalize": '"{{#label}}" must be unicode normalized in the {{#form}} form',
        "string.token": '"{{#label}}" must only contain alpha-numeric and underscore characters',
        "string.pattern.base": '"{{#label}}" with value "{[.]}" fails to match the required pattern: {{#regex}}',
        "string.pattern.name": '"{{#label}}" with value "{[.]}" fails to match the {{#name}} pattern',
        "string.pattern.invert.base": '"{{#label}}" with value "{[.]}" matches the inverted pattern: {{#regex}}',
        "string.pattern.invert.name": '"{{#label}}" with value "{[.]}" matches the inverted {{#name}} pattern',
        "string.trim": '"{{#label}}" must not have leading or trailing whitespace',
        "string.uri": '"{{#label}}" must be a valid uri',
        "string.uriCustomScheme": '"{{#label}}" must be a valid uri with a scheme matching the {{#scheme}} pattern',
        "string.uriRelativeOnly": '"{{#label}}" must be a valid relative uri',
        "string.uppercase": '"{{#label}}" must only contain uppercase characters'
      }
    }), p.addressOptions = function (e) {
      if (!e) return e;
      if (a(void 0 === e.minDomainSegments || Number.isSafeInteger(e.minDomainSegments) && e.minDomainSegments > 0, "minDomainSegments must be a positive integer"), !1 === e.tlds) return e;
      if (!0 === e.tlds || void 0 === e.tlds) return a(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds);
      a("object" == _typeof(e.tlds), "tlds must be true, false, or an object");
      var t = e.tlds.deny;
      if (t) return Array.isArray(t) && (e = Object.assign({}, e, {
        tlds: {
          deny: new Set(t)
        }
      })), a(e.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean"), a(!e.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists"), e;
      var r = e.tlds.allow;
      return r ? !0 === r ? (a(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds)) : (Array.isArray(r) && (e = Object.assign({}, e, {
        tlds: {
          allow: new Set(r)
        }
      })), a(e.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean"), e) : e;
    }, p.isoDate = function (e) {
      if (!h.isIsoDate(e)) return null;
      var t = new Date(e);
      return isNaN(t.getTime()) ? null : t.toISOString();
    }, p.length = function (e, t, r, s, n) {
      return a(!n || !1, "Invalid encoding:", n), e.$_addRule({
        name: t,
        method: "length",
        args: {
          limit: r,
          encoding: n
        },
        operator: s
      });
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(24),
        n = r(23),
        o = {
      nonAsciiRx: /[^\x00-\x7f]/,
      encoder: new (s.TextEncoder || TextEncoder)()
    };
    t.analyze = function (e, t) {
      return o.email(e, t);
    }, t.isValid = function (e, t) {
      return !o.email(e, t);
    }, o.email = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      if ("string" != typeof e) throw new Error("Invalid input: email must be a string");
      if (!e) return {
        error: "Address must be a non-empty string"
      };
      var r = !o.nonAsciiRx.test(e);

      if (!r) {
        if (!1 === t.allowUnicode) return {
          error: "Address contains forbidden Unicode characters"
        };
        e = e.normalize("NFC");
      }

      var s = e.split("@");
      if (2 !== s.length) return {
        error: s.length > 2 ? "Address cannot contain more than one @ character" : "Address must contain one @ character"
      };

      var _s52 = _slicedToArray(s, 2),
          a = _s52[0],
          i = _s52[1];

      if (!a) return {
        error: "Address local part cannot be empty"
      };

      if (!t.ignoreLength) {
        if (e.length > 254) return {
          error: "Address too long"
        };
        if (o.encoder.encode(a).length > 64) return {
          error: "Address local part too long"
        };
      }

      return o.local(a, r) || n.analyze(i, t);
    }, o.local = function (e, t) {
      var r = e.split(".");
      var _iteratorNormalCompletion101 = true;
      var _didIteratorError101 = false;
      var _iteratorError101 = undefined;

      try {
        for (var _iterator101 = r[Symbol.iterator](), _step101; !(_iteratorNormalCompletion101 = (_step101 = _iterator101.next()).done); _iteratorNormalCompletion101 = true) {
          var _e90 = _step101.value;
          if (!_e90.length) return {
            error: "Address local part contains empty dot-separated segment"
          };

          if (t) {
            if (!o.atextRx.test(_e90)) return {
              error: "Address local part contains invalid character"
            };
          } else {
            var _iteratorNormalCompletion102 = true;
            var _didIteratorError102 = false;
            var _iteratorError102 = undefined;

            try {
              for (var _iterator102 = _e90[Symbol.iterator](), _step102; !(_iteratorNormalCompletion102 = (_step102 = _iterator102.next()).done); _iteratorNormalCompletion102 = true) {
                var _t105 = _step102.value;
                if (o.atextRx.test(_t105)) continue;

                var _e91 = o.binary(_t105);

                if (!o.atomRx.test(_e91)) return {
                  error: "Address local part contains invalid character"
                };
              }
            } catch (err) {
              _didIteratorError102 = true;
              _iteratorError102 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion102 && _iterator102["return"] != null) {
                  _iterator102["return"]();
                }
              } finally {
                if (_didIteratorError102) {
                  throw _iteratorError102;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError101 = true;
        _iteratorError101 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion101 && _iterator101["return"] != null) {
            _iterator101["return"]();
          }
        } finally {
          if (_didIteratorError101) {
            throw _iteratorError101;
          }
        }
      }
    }, o.binary = function (e) {
      return Array.from(o.encoder.encode(e)).map(function (e) {
        return String.fromCharCode(e);
      }).join("");
    }, o.atextRx = /^[\w!#\$%&'\*\+\-\/=\?\^`\{\|\}~]+$/, o.atomRx = new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])", "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})", "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"));
  }, function (e, t) {}, function (e, t, r) {
    "use strict";

    var s = r(26);
    t.cidrs = {
      ipv4: {
        required: "\\/(?:" + s.ipv4Cidr + ")",
        optional: "(?:\\/(?:" + s.ipv4Cidr + "))?",
        forbidden: ""
      },
      ipv6: {
        required: "\\/" + s.ipv6Cidr,
        optional: "(?:\\/" + s.ipv6Cidr + ")?",
        forbidden: ""
      },
      ipvfuture: {
        required: "\\/" + s.ipv6Cidr,
        optional: "(?:\\/" + s.ipv6Cidr + ")?",
        forbidden: ""
      }
    }, t.versions = {
      ipv4: s.ipv4address,
      ipv6: s.ipv6address,
      ipvfuture: s.ipvFuture
    }, t.createIpRegex = function (e, r) {
      var s = e.map(function (e) {
        return t.versions[e] + t.cidrs[e][r];
      });
      return new RegExp("^(?:" + s.join("|") + ")$");
    };
  }, function (e, t, r) {
    "use strict";

    var s = r(0),
        n = r(3),
        o = {};
    o.Map =
    /*#__PURE__*/
    function (_Map) {
      _inherits(_class18, _Map);

      function _class18() {
        _classCallCheck(this, _class18);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class18).apply(this, arguments));
      }

      _createClass(_class18, [{
        key: "slice",
        value: function slice() {
          return new o.Map(this);
        }
      }]);

      return _class18;
    }(_wrapNativeSuper(Map)), e.exports = n.extend({
      type: "symbol",
      terms: {
        map: {
          init: new o.Map()
        }
      },
      coerce: {
        method: function method(e, t) {
          var r = t.schema,
              s = t.error;
          var n = r.$_terms.map.get(e);
          return n && (e = n), r._flags.only && "symbol" != _typeof(e) ? {
            value: e,
            errors: s("symbol.map", {
              map: r.$_terms.map
            })
          } : {
            value: e
          };
        }
      },
      validate: function validate(e, t) {
        var r = t.error;
        if ("symbol" != _typeof(e)) return {
          value: e,
          errors: r("symbol.base")
        };
      },
      rules: {
        map: {
          method: function method(e) {
            e && !e[Symbol.iterator] && "object" == _typeof(e) && (e = Object.entries(e)), s(e && e[Symbol.iterator], "Iterable must be an iterable or object");
            var t = this.clone(),
                r = [];
            var _iteratorNormalCompletion103 = true;
            var _didIteratorError103 = false;
            var _iteratorError103 = undefined;

            try {
              for (var _iterator103 = e[Symbol.iterator](), _step103; !(_iteratorNormalCompletion103 = (_step103 = _iterator103.next()).done); _iteratorNormalCompletion103 = true) {
                var _n39 = _step103.value;
                s(_n39 && _n39[Symbol.iterator], "Entry must be an iterable");

                var _n40 = _slicedToArray(_n39, 2),
                    _e92 = _n40[0],
                    _o33 = _n40[1];

                s("object" != _typeof(_e92) && "function" != typeof _e92 && "symbol" != _typeof(_e92), "Key must not be of type object, function, or Symbol"), s("symbol" == _typeof(_o33), "Value must be a Symbol"), t.$_terms.map.set(_e92, _o33), r.push(_o33);
              }
            } catch (err) {
              _didIteratorError103 = true;
              _iteratorError103 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion103 && _iterator103["return"] != null) {
                  _iterator103["return"]();
                }
              } finally {
                if (_didIteratorError103) {
                  throw _iteratorError103;
                }
              }
            }

            return t.valid.apply(t, r);
          }
        }
      },
      manifest: {
        build: function build(e, t) {
          return t.map && (e = e.map(t.map)), e;
        }
      },
      messages: {
        "symbol.base": '"{{#label}}" must be a symbol',
        "symbol.map": '"{{#label}}" must be one of {{#map}}'
      }
    });
  }]);
});