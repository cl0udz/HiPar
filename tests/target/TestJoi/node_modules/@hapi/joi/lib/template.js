'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Assert = require('@hapi/hoek/lib/assert');

var Clone = require('@hapi/hoek/lib/clone');

var EscapeHtml = require('@hapi/hoek/lib/escapeHtml');

var Formula = require('@hapi/formula');

var Common = require('./common');

var Errors = require('./errors');

var Ref = require('./ref');

var internals = {
  symbol: Symbol('template'),
  opens: new Array(1000).join('\u0000'),
  closes: new Array(1000).join('\u0001'),
  dateFormat: {
    date: Date.prototype.toDateString,
    iso: Date.prototype.toISOString,
    string: Date.prototype.toString,
    time: Date.prototype.toTimeString,
    utc: Date.prototype.toUTCString
  }
};
module.exports = exports = internals.Template = class {
  constructor(source, options) {
    Assert(typeof source === 'string', 'Template source must be a string');
    Assert(!source.includes('\u0000') && !source.includes('\u0001'), 'Template source cannot contain reserved control characters');
    this.source = source;
    this.rendered = source;
    this._template = null;
    this._settings = Clone(options);

    this._parse();
  }

  _parse() {
    // 'text {raw} {{ref}} \\{{ignore}} {{ignore\\}} {{ignore {{ignore}'
    if (!this.source.includes('{')) {
      return;
    } // Encode escaped \\{{{{{


    var encoded = internals.encode(this.source); // Split on first { in each set

    var parts = internals.split(encoded); // Process parts

    var refs = false;
    var processed = [];
    var head = parts.shift();

    if (head) {
      processed.push(head);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var part = _step.value;
        var raw = part[0] !== '{';
        var ender = raw ? '}' : '}}';
        var end = part.indexOf(ender);

        if (end === -1 || // Ignore non-matching closing
        part[1] === '{') {
          // Ignore more than two {
          processed.push(`{${internals.decode(part)}`);
          continue;
        }

        var variable = part.slice(raw ? 0 : 1, end);

        var dynamic = this._ref(internals.decode(variable), raw);

        processed.push(dynamic);

        if (typeof dynamic !== 'string') {
          refs = true;
        }

        var rest = part.slice(end + ender.length);

        if (rest) {
          processed.push(internals.decode(rest));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!refs) {
      this.rendered = processed.join('');
      return;
    }

    this._template = processed;
  }

  static date(date, prefs) {
    return internals.dateFormat[prefs.dateFormat].call(date);
  }

  describe() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!this._settings && options.compact) {
      return this.source;
    }

    var desc = {
      template: this.source
    };

    if (this._settings) {
      desc.options = this._settings;
    }

    return desc;
  }

  static build(desc) {
    return new internals.Template(desc.template, desc.options);
  }

  isDynamic() {
    return !!this._template;
  }

  static isTemplate(template) {
    return template ? !!template[Common.symbols.template] : false;
  }

  refs() {
    if (!this._template) {
      return;
    }

    var refs = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this._template[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var part = _step2.value;

        if (typeof part !== 'string') {
          refs.push(...part.refs);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return refs;
  }

  resolve(value, state, prefs, local) {
    if (this._template && this._template.length === 1) {
      return this._part(this._template[0],
      /* context -> [*/
      value, state, prefs, local, {}
      /*] */
      );
    }

    return this.render(value, state, prefs, local);
  }

  _part(part) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (part.ref) {
      return part.ref.resolve(...args);
    }

    return part.formula.evaluate(args);
  }

  render(value, state, prefs, local) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    if (!this.isDynamic()) {
      return this.rendered;
    }

    var parts = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this._template[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var part = _step3.value;

        if (typeof part === 'string') {
          parts.push(part);
        } else {
          var rendered = this._part(part,
          /* context -> [*/
          value, state, prefs, local, options
          /*] */
          );

          var string = internals.stringify(rendered, prefs, options.errors);

          if (string !== undefined) {
            var result = part.raw || (options.errors && options.errors.escapeHtml) === false ? string : EscapeHtml(string);
            parts.push(result);
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return parts.join('');
  }

  _ref(content, raw) {
    var _this = this;

    var refs = [];

    var reference = function reference(variable) {
      var ref = Ref.create(variable, _this._settings);
      refs.push(ref);
      return function (context) {
        return ref.resolve(...context);
      };
    };

    try {
      var formula = new Formula(content, {
        reference,
        functions: internals.functions,
        constants: internals.constants
      });
    } catch (err) {
      err.message = `Invalid template variable "${content}" fails due to: ${err.message}`;
      throw err;
    }

    if (formula.single) {
      if (formula.single.type === 'reference') {
        return {
          ref: refs[0],
          raw,
          refs
        };
      }

      return internals.stringify(formula.single.value);
    }

    return {
      formula,
      raw,
      refs
    };
  }

  toString() {
    return this.source;
  }

};
internals.Template.prototype[Common.symbols.template] = true;
internals.Template.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects

internals.encode = function (string) {
  return string.replace(/\\(\{+)/g, function ($0, $1) {
    return internals.opens.slice(0, $1.length);
  }).replace(/\\(\}+)/g, function ($0, $1) {
    return internals.closes.slice(0, $1.length);
  });
};

internals.decode = function (string) {
  return string.replace(/\u0000/g, '{').replace(/\u0001/g, '}');
};

internals.split = function (string) {
  var parts = [];
  var current = '';

  for (var i = 0; i < string.length; ++i) {
    var char = string[i];

    if (char === '{') {
      var next = '';

      while (i + 1 < string.length && string[i + 1] === '{') {
        next += '{';
        ++i;
      }

      parts.push(current);
      current = next;
    } else {
      current += char;
    }
  }

  parts.push(current);
  return parts;
};

internals.stringify = function (value, prefs, options) {
  var type = typeof value;

  if (value === null) {
    return 'null';
  }

  if (type === 'string') {
    return value;
  }

  if (type === 'number' || type === 'function' || type === 'symbol') {
    return value.toString();
  }

  if (type !== 'object') {
    return JSON.stringify(value);
  }

  if (value instanceof Date) {
    return internals.Template.date(value, prefs);
  }

  if (value instanceof Map) {
    var pairs = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = value.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _step4$value = _slicedToArray(_step4.value, 2),
            key = _step4$value[0],
            sym = _step4$value[1];

        pairs.push(`${key.toString()} -> ${sym.toString()}`);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    value = pairs;
  }

  if (!Array.isArray(value)) {
    return value.toString();
  }

  var partial = '';
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var item = _step5.value;
      partial = partial + (partial.length ? ', ' : '') + internals.stringify(item, prefs, options);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return options.wrapArrays ? '[' + partial + ']' : partial;
};

internals.constants = {
  true: true,
  false: false,
  null: null,
  second: 1000,
  minute: 60 * 1000,
  hour: 60 * 60 * 1000,
  day: 24 * 60 * 60 * 1000
};
internals.functions = {
  if(condition, then, otherwise) {
    return condition ? then : otherwise;
  },

  msg(code) {
    var _this2 = _slicedToArray(this, 5),
        value = _this2[0],
        state = _this2[1],
        prefs = _this2[2],
        local = _this2[3],
        options = _this2[4];

    var messages = options.messages;

    if (!messages) {
      return '';
    }

    var template = Errors.template(value, messages[0], code, state, prefs) || Errors.template(value, messages[1], code, state, prefs);

    if (!template) {
      return '';
    }

    return template.render(value, state, prefs, local, options);
  },

  number(value) {
    if (typeof value === 'number') {
      return value;
    }

    if (typeof value === 'string') {
      return parseFloat(value);
    }

    if (typeof value === 'boolean') {
      return value ? 1 : 0;
    }

    if (value instanceof Date) {
      return value.getTime();
    }

    return null;
  }

};