'use strict';

var Assert = require('@hapi/hoek/lib/assert');

var Keys = require('./keys');

var internals = {};
module.exports = Keys.extend({
  type: 'function',
  properties: {
    "typeof": 'function'
  },
  rules: {
    arity: {
      method: function method(n) {
        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
        return this.$_addRule({
          name: 'arity',
          args: {
            n: n
          }
        });
      },
      validate: function validate(value, helpers, _ref) {
        var n = _ref.n;

        if (value.length === n) {
          return value;
        }

        return helpers.error('function.arity', {
          n: n
        });
      }
    },
    "class": {
      method: function method() {
        return this.$_addRule('class');
      },
      validate: function validate(value, helpers) {
        if (/^\s*class\s/.test(value.toString())) {
          return value;
        }

        return helpers.error('function.class', {
          value: value
        });
      }
    },
    minArity: {
      method: function method(n) {
        Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');
        return this.$_addRule({
          name: 'minArity',
          args: {
            n: n
          }
        });
      },
      validate: function validate(value, helpers, _ref2) {
        var n = _ref2.n;

        if (value.length >= n) {
          return value;
        }

        return helpers.error('function.minArity', {
          n: n
        });
      }
    },
    maxArity: {
      method: function method(n) {
        Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
        return this.$_addRule({
          name: 'maxArity',
          args: {
            n: n
          }
        });
      },
      validate: function validate(value, helpers, _ref3) {
        var n = _ref3.n;

        if (value.length <= n) {
          return value;
        }

        return helpers.error('function.maxArity', {
          n: n
        });
      }
    }
  },
  messages: {
    'function.arity': '"{{#label}}" must have an arity of {{#n}}',
    'function.class': '"{{#label}}" must be a class',
    'function.maxArity': '"{{#label}}" must have an arity lesser or equal to {{#n}}',
    'function.minArity': '"{{#label}}" must have an arity greater or equal to {{#n}}'
  }
});