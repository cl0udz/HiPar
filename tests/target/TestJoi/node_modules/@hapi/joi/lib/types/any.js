'use strict';

var Assert = require('@hapi/hoek/lib/assert');

var Base = require('../base');

var Common = require('../common');

var Messages = require('../messages');

var internals = {};
module.exports = Base.extend({
  type: 'any',
  flags: {
    only: {
      "default": false
    }
  },
  terms: {
    alterations: {
      init: null
    },
    examples: {
      init: null
    },
    externals: {
      init: null
    },
    metas: {
      init: []
    },
    notes: {
      init: []
    },
    shared: {
      init: null
    },
    tags: {
      init: []
    },
    whens: {
      init: null
    }
  },
  rules: {
    custom: {
      method: function method(_method, description) {
        Assert(typeof _method === 'function', 'Method must be a function');
        Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');
        return this.$_addRule({
          name: 'custom',
          args: {
            method: _method,
            description: description
          }
        });
      },
      validate: function validate(value, helpers, _ref) {
        var method = _ref.method;

        try {
          return method(value, helpers);
        } catch (err) {
          return helpers.error('any.custom', {
            error: err
          });
        }
      },
      args: ['method', 'description'],
      multi: true
    },
    messages: {
      method: function method(messages) {
        return this.prefs({
          messages: messages
        });
      }
    },
    shared: {
      method: function method(schema) {
        Assert(Common.isSchema(schema) && schema._flags.id, 'Schema must be a schema with an id');
        var obj = this.clone();
        obj.$_terms.shared = obj.$_terms.shared || [];
        obj.$_terms.shared.push(schema);
        obj.$_mutateRegister(schema);
        return obj;
      }
    },
    warning: {
      method: function method(code, local) {
        Assert(code && typeof code === 'string', 'Invalid warning code');
        return this.$_addRule({
          name: 'warning',
          args: {
            code: code,
            local: local
          },
          warn: true
        });
      },
      validate: function validate(value, helpers, _ref2) {
        var code = _ref2.code,
            local = _ref2.local;
        return helpers.error(code, local);
      },
      args: ['code', 'local'],
      multi: true
    }
  },
  modifiers: {
    keep: function keep(rule) {
      var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      rule.keep = enabled;
    },
    message: function message(rule, _message) {
      rule.message = Messages.compile(_message);
    },
    warn: function warn(rule) {
      var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      rule.warn = enabled;
    }
  },
  manifest: {
    build: function build(obj, desc) {
      for (var key in desc) {
        var values = desc[key];

        if (['examples', 'externals', 'metas', 'notes', 'tags'].includes(key)) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              obj = obj[key.slice(0, -1)](value);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          continue;
        }

        if (key === 'alterations') {
          var alter = {};
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _step2.value,
                  target = _step2$value.target,
                  adjuster = _step2$value.adjuster;
              alter[target] = adjuster;
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          obj = obj.alter(alter);
          continue;
        }

        if (key === 'whens') {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _value = _step3.value;
              var ref = _value.ref,
                  is = _value.is,
                  not = _value.not,
                  then = _value.then,
                  otherwise = _value.otherwise,
                  concat = _value.concat;

              if (concat) {
                obj = obj.concat(concat);
              } else if (ref) {
                obj = obj.when(ref, {
                  is: is,
                  not: not,
                  then: then,
                  otherwise: otherwise,
                  "switch": _value["switch"],
                  "break": _value["break"]
                });
              } else {
                obj = obj.when(is, {
                  then: then,
                  otherwise: otherwise,
                  "break": _value["break"]
                });
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          continue;
        }

        if (key === 'shared') {
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = values[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var _value2 = _step4.value;
              obj = obj.shared(_value2);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        }
      }

      return obj;
    }
  },
  messages: {
    'any.custom': '"{{#label}}" failed custom validation because {{#error.message}}',
    'any.default': '"{{#label}}" threw an error when running default method',
    'any.failover': '"{{#label}}" threw an error when running failover method',
    'any.invalid': '"{{#label}}" contains an invalid value',
    'any.only': '"{{#label}}" must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',
    'any.ref': '"{{#label}}" {{#arg}} references "{{#ref}}" which {{#reason}}',
    'any.required': '"{{#label}}" is required',
    'any.unknown': '"{{#label}}" is not allowed'
  }
});