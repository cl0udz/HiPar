'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.map");

require("core-js/modules/es.object.entries");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Assert = require('@hapi/hoek/lib/assert');

var Any = require('./any');

var internals = {};
internals.Map = class extends Map {
  slice() {
    return new internals.Map(this);
  }

};
module.exports = Any.extend({
  type: 'symbol',
  terms: {
    map: {
      init: new internals.Map()
    }
  },
  coerce: {
    method(value, _ref) {
      var schema = _ref.schema,
          error = _ref.error;
      var lookup = schema.$_terms.map.get(value);

      if (lookup) {
        value = lookup;
      }

      if (!schema._flags.only || typeof value === 'symbol') {
        return {
          value
        };
      }

      return {
        value,
        errors: error('symbol.map', {
          map: schema.$_terms.map
        })
      };
    }

  },

  validate(value, _ref2) {
    var error = _ref2.error;

    if (typeof value !== 'symbol') {
      return {
        value,
        errors: error('symbol.base')
      };
    }
  },

  rules: {
    map: {
      method(iterable) {
        if (iterable && !iterable[Symbol.iterator] && typeof iterable === 'object') {
          iterable = Object.entries(iterable);
        }

        Assert(iterable && iterable[Symbol.iterator], 'Iterable must be an iterable or object');
        var obj = this.clone();
        var symbols = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;
            Assert(entry && entry[Symbol.iterator], 'Entry must be an iterable');

            var _entry = _slicedToArray(entry, 2),
                key = _entry[0],
                value = _entry[1];

            Assert(typeof key !== 'object' && typeof key !== 'function' && typeof key !== 'symbol', 'Key must not be of type object, function, or Symbol');
            Assert(typeof value === 'symbol', 'Value must be a Symbol');
            obj.$_terms.map.set(key, value);
            symbols.push(value);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return obj.valid(...symbols);
      }

    }
  },
  manifest: {
    build(obj, desc) {
      if (desc.map) {
        obj = obj.map(desc.map);
      }

      return obj;
    }

  },
  messages: {
    'symbol.base': '"{{#label}}" must be a symbol',
    'symbol.map': '"{{#label}}" must be one of {{#map}}'
  }
});