'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var Assert = require('@hapi/hoek/lib/assert');

var Any = require('./any');

var Common = require('../common');

var Values = require('../values');

var internals = {};

internals.isBool = function (value) {
  return typeof value === 'boolean';
};

module.exports = Any.extend({
  type: 'boolean',
  flags: {
    sensitive: {
      "default": false
    }
  },
  terms: {
    falsy: {
      init: null,
      manifest: 'values'
    },
    truthy: {
      init: null,
      manifest: 'values'
    }
  },
  coerce: function coerce(value, _ref) {
    var schema = _ref.schema;

    if (typeof value === 'boolean') {
      return;
    }

    if (typeof value === 'string') {
      var normalized = schema._flags.sensitive ? value : value.toLowerCase();
      value = normalized === 'true' ? true : normalized === 'false' ? false : value;
    }

    if (typeof value !== 'boolean') {
      value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) || (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);
    }

    return {
      value: value
    };
  },
  validate: function validate(value, _ref2) {
    var error = _ref2.error;

    if (typeof value !== 'boolean') {
      return {
        value: value,
        errors: error('boolean.base')
      };
    }
  },
  rules: {
    truthy: {
      method: function method() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }

        Common.verifyFlat(values, 'truthy');
        var obj = this.clone();
        obj.$_terms.truthy = obj.$_terms.truthy || new Values();

        for (var i = 0; i < values.length; ++i) {
          var value = values[i];
          Assert(value !== undefined, 'Cannot call truthy with undefined');
          obj.$_terms.truthy.add(value);
        }

        return obj;
      }
    },
    falsy: {
      method: function method() {
        for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          values[_key2] = arguments[_key2];
        }

        Common.verifyFlat(values, 'falsy');
        var obj = this.clone();
        obj.$_terms.falsy = obj.$_terms.falsy || new Values();

        for (var i = 0; i < values.length; ++i) {
          var value = values[i];
          Assert(value !== undefined, 'Cannot call falsy with undefined');
          obj.$_terms.falsy.add(value);
        }

        return obj;
      }
    },
    sensitive: {
      method: function method() {
        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return this.$_setFlag('sensitive', enabled);
      }
    }
  },
  cast: {
    number: {
      from: internals.isBool,
      to: function to(value, helpers) {
        return value ? 1 : 0;
      }
    },
    string: {
      from: internals.isBool,
      to: function to(value, helpers) {
        return value ? 'true' : 'false';
      }
    }
  },
  manifest: {
    build: function build(obj, desc) {
      if (desc.truthy) {
        var _obj;

        obj = (_obj = obj).truthy.apply(_obj, _toConsumableArray(desc.truthy));
      }

      if (desc.falsy) {
        var _obj2;

        obj = (_obj2 = obj).falsy.apply(_obj2, _toConsumableArray(desc.falsy));
      }

      return obj;
    }
  },
  messages: {
    'boolean.base': '"{{#label}}" must be a boolean'
  }
});