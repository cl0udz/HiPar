'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

var Assert = require('@hapi/hoek/lib/assert');

var DeepEqual = require('@hapi/hoek/lib/deepEqual');

var Common = require('./common');

var internals = {};
module.exports = internals.Values = class {
  constructor(values, refs) {
    this._values = new Set(values);
    this._refs = new Set(refs);
    this._lowercase = internals.lowercases(values);
    this._override = false;
  }

  get length() {
    return this._values.size + this._refs.size;
  }

  add(value, refs) {
    // Reference
    if (Common.isResolvable(value)) {
      if (!this._refs.has(value)) {
        this._refs.add(value);

        if (refs) {
          // Skipped in a merge
          refs.register(value);
        }
      }

      return;
    } // Value


    if (!this.has(value, null, null, false)) {
      this._values.add(value);

      if (typeof value === 'string') {
        this._lowercase.set(value.toLowerCase(), value);
      }
    }
  }

  static merge(target, source, remove) {
    target = target || new internals.Values();

    if (source) {
      if (source._override) {
        return source.clone();
      }

      for (var _i = 0, _arr = [...source._values, ...source._refs]; _i < _arr.length; _i++) {
        var item = _arr[_i];
        target.add(item);
      }
    }

    if (remove) {
      for (var _i2 = 0, _arr2 = [...remove._values, ...remove._refs]; _i2 < _arr2.length; _i2++) {
        var _item = _arr2[_i2];
        target.remove(_item);
      }
    }

    return target.length ? target : null;
  }

  remove(value) {
    // Reference
    if (Common.isResolvable(value)) {
      this._refs.delete(value);

      return;
    } // Value


    this._values.delete(value);

    if (typeof value === 'string') {
      this._lowercase.delete(value.toLowerCase());
    }
  }

  has(value, state, prefs, insensitive) {
    return !!this.get(value, state, prefs, insensitive);
  }

  get(value, state, prefs, insensitive) {
    if (!this.length) {
      return false;
    } // Simple match


    if (this._values.has(value)) {
      return {
        value
      };
    } // Case insensitive string match


    if (typeof value === 'string' && value && insensitive) {
      var found = this._lowercase.get(value.toLowerCase());

      if (found) {
        return {
          value: found
        };
      }
    }

    if (!this._refs.size && typeof value !== 'object') {
      return false;
    } // Objects


    if (typeof value === 'object') {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (DeepEqual(item, value)) {
            return {
              value: item
            };
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } // References


    if (state) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this._refs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ref = _step2.value;
          var resolved = ref.resolve(value, state, prefs, null, {
            in: true
          });

          if (resolved === undefined) {
            continue;
          }

          var items = !ref.in || typeof resolved !== 'object' ? [resolved] : Array.isArray(resolved) ? resolved : Object.keys(resolved);
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = items[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _item2 = _step3.value;

              if (typeof _item2 !== typeof value) {
                continue;
              }

              if (insensitive && value && typeof value === 'string') {
                if (_item2.toLowerCase() === value.toLowerCase()) {
                  return {
                    value: _item2,
                    ref
                  };
                }
              } else {
                if (DeepEqual(_item2, value)) {
                  return {
                    value: _item2,
                    ref
                  };
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  }

  override() {
    this._override = true;
  }

  values(options) {
    if (options && options.display) {
      var values = [];

      for (var _i3 = 0, _arr3 = [...this._values, ...this._refs]; _i3 < _arr3.length; _i3++) {
        var item = _arr3[_i3];

        if (item !== undefined) {
          values.push(item);
        }
      }

      return values;
    }

    return Array.from([...this._values, ...this._refs]);
  }

  clone() {
    var set = new internals.Values(this._values, this._refs);
    set._override = this._override;
    return set;
  }

  concat(source) {
    Assert(!source._override, 'Cannot concat override set of values');
    var set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);
    set._override = this._override;
    return set;
  }

  describe() {
    var normalized = [];

    if (this._override) {
      normalized.push({
        override: true
      });
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = this._values.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var value = _step4.value;
        normalized.push(value && typeof value === 'object' ? {
          value
        } : value);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = this._refs.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _value = _step5.value;
        normalized.push(_value.describe());
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return normalized;
  }

};
internals.Values.prototype[Common.symbols.values] = true; // Aliases

internals.Values.prototype.slice = internals.Values.prototype.clone; // Helpers

internals.lowercases = function (from) {
  var map = new Map();

  if (from) {
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = from[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var value = _step6.value;

        if (typeof value === 'string') {
          map.set(value.toLowerCase(), value);
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  }

  return map;
};