'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.map");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.set");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DeepEqual = require('@hapi/hoek/lib/deepEqual');

var Pinpoint = require('@hapi/pinpoint');

var Errors = require('./errors');

var internals = {
  codes: {
    error: 1,
    pass: 2,
    full: 3
  },
  labels: {
    0: 'never used',
    1: 'always error',
    2: 'always pass'
  }
};

exports.setup = function (root) {
  var trace = function trace() {
    root._tracer = root._tracer || new internals.Tracer();
    return root._tracer;
  };

  root.trace = trace;
  root[Symbol.for('@hapi/lab/coverage/initialize')] = trace;

  root.untrace = function () {
    root._tracer = null;
  };
};

exports.location = function (schema) {
  return schema.$_setFlag('_tracerLocation', Pinpoint.location(2)); // base.tracer(), caller
};

internals.Tracer = class {
  constructor() {
    this.name = 'Joi';
    this._schemas = new Map();
  }

  _register(schema) {
    var existing = this._schemas.get(schema);

    if (existing) {
      return existing.store;
    }

    var store = new internals.Store(schema);

    var _ref = schema._flags._tracerLocation || Pinpoint.location(5),
        filename = _ref.filename,
        line = _ref.line; // internals.tracer(), internals.entry(), exports.entry(), validate(), caller


    this._schemas.set(schema, {
      filename,
      line,
      store
    });

    return store;
  }

  _combine(merged, sources) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this._schemas.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var store = _step.value.store;

        store._combine(merged, sources);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  report(file) {
    var coverage = []; // Process each registered schema

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this._schemas.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = _step2.value,
            filename = _step2$value.filename,
            line = _step2$value.line,
            store = _step2$value.store;

        if (file && file !== filename) {
          continue;
        } // Process sub schemas of the registered root


        var missing = [];
        var skipped = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = store._sources.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                schema = _step3$value[0],
                log = _step3$value[1];

            // Check if sub schema parent skipped
            if (internals.sub(log.paths, skipped)) {
              continue;
            } // Check if sub schema reached


            if (!log.entry) {
              missing.push({
                status: 'never reached',
                paths: [...log.paths]
              });
              skipped.push(...log.paths);
              continue;
            } // Check values


            for (var _i2 = 0, _arr2 = ['valid', 'invalid']; _i2 < _arr2.length; _i2++) {
              var type = _arr2[_i2];
              var set = schema[`_${type}s`];

              if (!set) {
                continue;
              }

              var values = new Set(set._values);
              var refs = new Set(set._refs);
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = log[type][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var _step5$value = _step5.value,
                      value = _step5$value.value,
                      ref = _step5$value.ref;
                  values.delete(value);
                  refs.delete(ref);
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              if (values.size || refs.size) {
                missing.push({
                  status: [...values, ...[...refs].map(function (ref) {
                    return ref.display;
                  })],
                  rule: `${type}s`
                });
              }
            } // Check rules status


            var rules = schema._rules.map(function (rule) {
              return rule.name;
            });

            for (var _i3 = 0, _arr3 = ['default', 'failover']; _i3 < _arr3.length; _i3++) {
              var _type = _arr3[_i3];

              if (schema._flags[_type] !== undefined) {
                rules.push(_type);
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = rules[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var name = _step4.value;
                var status = internals.labels[log.rule[name] || 0];

                if (status) {
                  var report = {
                    rule: name,
                    status
                  };

                  if (log.paths.size) {
                    report.paths = [...log.paths];
                  }

                  missing.push(report);
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (missing.length) {
          coverage.push({
            filename,
            line,
            missing,
            severity: 'error',
            message: `Schema missing tests for ${missing.map(internals.message).join(', ')}`
          });
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return coverage.length ? coverage : null;
  }

};
internals.Store = class {
  constructor(schema) {
    this.active = true;
    this._sources = new Map(); // schema -> { paths, entry, rule, valid, invalid }

    this._combos = new Map(); // merged -> [sources]

    this._scan(schema);
  }

  debug(state, source, name, result) {
    state.mainstay.debug && state.mainstay.debug.push({
      type: source,
      name,
      result,
      path: state.path
    });
  }

  entry(schema, state) {
    internals.debug(state, {
      type: 'entry'
    });

    this._record(schema, function (log) {
      log.entry = true;
    });
  }

  filter(schema, state, source, value) {
    internals.debug(state, _objectSpread({
      type: source
    }, value));

    this._record(schema, function (log) {
      log[source].add(value);
    });
  }

  log(schema, state, source, name, result) {
    internals.debug(state, {
      type: source,
      name,
      result: result === 'full' ? 'pass' : result
    });

    this._record(schema, function (log) {
      log[source][name] = log[source][name] || 0;
      log[source][name] |= internals.codes[result];
    });
  }

  resolve(state, ref, to) {
    if (!state.mainstay.debug) {
      return;
    }

    var log = {
      type: 'resolve',
      ref: ref.display,
      to,
      path: state.path
    };
    state.mainstay.debug.push(log);
  }

  value(state, by, from, to, name) {
    if (!state.mainstay.debug || DeepEqual(from, to)) {
      return;
    }

    var log = {
      type: 'value',
      by,
      from,
      to,
      path: state.path
    };

    if (name) {
      log.name = name;
    }

    state.mainstay.debug.push(log);
  }

  _record(schema, each) {
    var log = this._sources.get(schema);

    if (log) {
      each(log);
      return;
    }

    var sources = this._combos.get(schema);

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = sources[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var source = _step6.value;

        this._record(source, each);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  }

  _scan(schema, _path) {
    var _this = this;

    var path = _path || [];

    var log = this._sources.get(schema);

    if (!log) {
      log = {
        paths: new Set(),
        entry: false,
        rule: {},
        valid: new Set(),
        invalid: new Set()
      };

      this._sources.set(schema, log);
    }

    if (path.length) {
      log.paths.add(path);
    }

    var each = function each(sub, source) {
      var subId = internals.id(sub, source);

      _this._scan(sub, path.concat(subId));
    };

    schema.$_modify({
      each,
      ref: false
    });
  }

  _combine(merged, sources) {
    this._combos.set(merged, sources);
  }

};

internals.message = function (item) {
  var path = item.paths ? Errors.path(item.paths[0]) + (item.rule ? ':' : '') : '';
  return `${path}${item.rule || ''} (${item.status})`;
};

internals.id = function (schema, _ref2) {
  var source = _ref2.source,
      name = _ref2.name,
      path = _ref2.path,
      key = _ref2.key;

  if (schema._flags.id) {
    return schema._flags.id;
  }

  if (key) {
    return key;
  }

  name = `@${name}`;

  if (source === 'terms') {
    return [name, path[Math.min(path.length - 1, 1)]];
  }

  return name;
};

internals.sub = function (paths, skipped) {
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = paths[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var path = _step7.value;
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = skipped[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var skip = _step8.value;

          if (DeepEqual(path.slice(0, skip.length), skip)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  return false;
};

internals.debug = function (state, event) {
  if (state.mainstay.debug) {
    event.path = state.debug ? [...state.path, state.debug] : state.path;
    state.mainstay.debug.push(event);
  }
};