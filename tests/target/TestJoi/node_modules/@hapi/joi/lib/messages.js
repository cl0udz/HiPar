'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Assert = require('@hapi/hoek/lib/assert');

var Clone = require('@hapi/hoek/lib/clone');

var Template = require('./template');

var internals = {};

exports.compile = function (messages, target) {
  // Single value string ('plain error message', 'template {error} message')
  if (typeof messages === 'string') {
    Assert(!target, 'Cannot set single message string');
    return new Template(messages);
  } // Single value template


  if (Template.isTemplate(messages)) {
    Assert(!target, 'Cannot set single message template');
    return messages;
  } // By error code { 'number.min': <string | template> }


  Assert(_typeof(messages) === 'object' && !Array.isArray(messages), 'Invalid message options');
  target = target ? Clone(target) : {};

  for (var code in messages) {
    var message = messages[code];

    if (code === 'root' || Template.isTemplate(message)) {
      target[code] = message;
      continue;
    }

    if (typeof message === 'string') {
      target[code] = new Template(message);
      continue;
    } // By language { english: { 'number.min': <string | template> } }


    Assert(_typeof(message) === 'object' && !Array.isArray(message), 'Invalid message for', code);
    var language = code;
    target[language] = target[language] || {};

    for (code in message) {
      var localized = message[code];

      if (code === 'root' || Template.isTemplate(localized)) {
        target[language][code] = localized;
        continue;
      }

      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);
      target[language][code] = new Template(localized);
    }
  }

  return target;
};

exports.decompile = function (messages) {
  // By error code { 'number.min': <string | template> }
  var target = {};

  for (var code in messages) {
    var message = messages[code];

    if (code === 'root') {
      target[code] = message;
      continue;
    }

    if (Template.isTemplate(message)) {
      target[code] = message.describe({
        compact: true
      });
      continue;
    } // By language { english: { 'number.min': <string | template> } }


    var language = code;
    target[language] = {};

    for (code in message) {
      var localized = message[code];

      if (code === 'root') {
        target[language][code] = localized;
        continue;
      }

      target[language][code] = localized.describe({
        compact: true
      });
    }
  }

  return target;
};

exports.merge = function (base, extended) {
  if (!base) {
    return exports.compile(extended);
  }

  if (!extended) {
    return base;
  } // Single value string


  if (typeof extended === 'string') {
    return new Template(extended);
  } // Single value template


  if (Template.isTemplate(extended)) {
    return extended;
  } // By error code { 'number.min': <string | template> }


  var target = Clone(base);

  for (var code in extended) {
    var message = extended[code];

    if (code === 'root' || Template.isTemplate(message)) {
      target[code] = message;
      continue;
    }

    if (typeof message === 'string') {
      target[code] = new Template(message);
      continue;
    } // By language { english: { 'number.min': <string | template> } }


    Assert(_typeof(message) === 'object' && !Array.isArray(message), 'Invalid message for', code);
    var language = code;
    target[language] = target[language] || {};

    for (code in message) {
      var localized = message[code];

      if (code === 'root' || Template.isTemplate(localized)) {
        target[language][code] = localized;
        continue;
      }

      Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);
      target[language][code] = new Template(localized);
    }
  }

  return target;
};