'use strict';

require("core-js/modules/es.object.assign");

var Assert = require('./assert');

var Clone = require('./clone');

var Merge = require('./merge');

var Utils = require('./utils');

var internals = {};

module.exports = function (defaults, source) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
  Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');
  Assert(typeof options === 'object', 'Invalid options: must be an object');

  if (!source) {
    // If no source, return null
    return null;
  }

  if (options.shallow) {
    return internals.applyToDefaultsWithShallow(defaults, source, options);
  }

  var copy = Clone(defaults);

  if (source === true) {
    // If source is set to true, use defaults
    return copy;
  }

  var nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;
  return Merge(copy, source, {
    nullOverride,
    mergeArrays: false
  });
};

internals.applyToDefaultsWithShallow = function (defaults, source, options) {
  var keys = options.shallow;
  Assert(Array.isArray(keys), 'Invalid keys');
  options = Object.assign({}, options);
  options.shallow = false;
  var copy = Clone(defaults, {
    shallow: keys
  });

  if (source === true) {
    // If source is set to true, use defaults
    return copy;
  }

  var storage = Utils.store(source, keys); // Move shallow copy items to storage

  Merge(copy, source, {
    mergeArrays: false,
    nullOverride: false
  }); // Deep copy the rest

  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore

  return copy;
};