'use strict';

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.split");

var Assert = require('./assert');

var internals = {};

module.exports = function (obj, chain, options) {
  if (chain === false || chain === null || chain === undefined) {
    return obj;
  }

  options = options || {};

  if (typeof options === 'string') {
    options = {
      separator: options
    };
  }

  var isChainArray = Array.isArray(chain);
  Assert(!isChainArray || !options.separator, 'Separator option no valid for array-based chain');
  var path = isChainArray ? chain : chain.split(options.separator || '.');
  var ref = obj;

  for (var i = 0; i < path.length; ++i) {
    var key = path[i];
    var type = options.iterables && internals.iterables(ref);

    if (Array.isArray(ref) || type === 'set') {
      var number = Number(key);

      if (Number.isInteger(number)) {
        key = number < 0 ? ref.length + number : number;
      }
    }

    if (!ref || typeof ref === 'function' && options.functions === false || // Defaults to true
    !type && ref[key] === undefined) {
      Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
      Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
      ref = options.default;
      break;
    }

    if (!type) {
      ref = ref[key];
    } else if (type === 'set') {
      ref = [...ref][key];
    } else {
      // type === 'map'
      ref = ref.get(key);
    }
  }

  return ref;
};

internals.iterables = function (ref) {
  if (ref instanceof Set) {
    return 'set';
  }

  if (ref instanceof Map) {
    return 'map';
  }
};