'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

var isPlainObject = require('is-plain-obj');

module.exports = function (object) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!isPlainObject(object)) {
    throw new TypeError('Expected a plain object');
  }

  var deep = options.deep;
  var seenInput = [];
  var seenOutput = [];

  var sortKeys = function sortKeys(object) {
    var seenIndex = seenInput.indexOf(object);

    if (seenIndex !== -1) {
      return seenOutput[seenIndex];
    }

    var result = {};
    var keys = Object.keys(object).sort(options.compare);
    seenInput.push(object);
    seenOutput.push(result);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;
        var value = object[key];

        if (deep && Array.isArray(value)) {
          result[key] = value.map(function (arrayValue) {
            return isPlainObject(arrayValue) ? sortKeys(arrayValue) : arrayValue;
          });
          continue;
        }

        result[key] = deep && isPlainObject(value) ? sortKeys(value) : value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  };

  return sortKeys(object);
};