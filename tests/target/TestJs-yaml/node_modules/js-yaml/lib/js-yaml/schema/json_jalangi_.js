J$.iids = {"9":[9,1,9,13],"17":[9,1,9,14],"25":[12,14,12,21],"33":[12,22,12,33],"41":[12,14,12,34],"49":[12,14,12,34],"57":[12,14,12,34],"65":[15,1,15,7],"73":[15,22,15,28],"81":[17,5,17,12],"89":[17,13,17,25],"97":[17,5,17,26],"105":[16,12,18,4],"113":[20,5,20,12],"121":[20,13,20,27],"129":[20,5,20,28],"137":[21,5,21,12],"145":[21,13,21,27],"153":[21,5,21,28],"161":[22,5,22,12],"169":[22,13,22,26],"177":[22,5,22,27],"185":[23,5,23,12],"193":[23,13,23,28],"201":[23,5,23,29],"209":[19,13,24,4],"217":[15,29,25,2],"225":[15,18,25,3],"233":[15,1,25,3],"241":[15,1,25,4],"249":[1,1,26,1],"257":[1,1,26,1],"265":[1,1,26,1],"273":[1,1,26,1],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/json.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/json_jalangi_.js","code":"// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\n'use strict';\n\n\nvar Schema = require('../schema');\n\n\nmodule.exports = new Schema({\n  include: [\n    require('./failsafe')\n  ],\n  implicit: [\n    require('../type/null'),\n    require('../type/bool'),\n    require('../type/int'),\n    require('../type/float')\n  ]\n});\n"};
jalangiLabel84:
    while (true) {
        try {
            J$.Se(249, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/json_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/json.js');
            J$.N(257, 'Schema', Schema, 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var Schema = J$.X1(57, J$.W(49, 'Schema', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../schema', 21, false)), Schema, 3));
            J$.X1(241, J$.P(233, J$.R(65, 'module', module, 2), 'exports', J$.F(225, J$.R(73, 'Schema', Schema, 1), 1)(J$.T(217, {
                include: J$.T(105, [J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './failsafe', 21, false))], 10, false),
                implicit: J$.T(209, [
                    J$.F(129, J$.R(113, 'require', require, 2), 0)(J$.T(121, '../type/null', 21, false)),
                    J$.F(153, J$.R(137, 'require', require, 2), 0)(J$.T(145, '../type/bool', 21, false)),
                    J$.F(177, J$.R(161, 'require', require, 2), 0)(J$.T(169, '../type/int', 21, false)),
                    J$.F(201, J$.R(185, 'require', require, 2), 0)(J$.T(193, '../type/float', 21, false))
                ], 10, false)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(265, J$e);
        } finally {
            if (J$.Sr(273)) {
                J$.L();
                continue jalangiLabel84;
            } else {
                J$.L();
                break jalangiLabel84;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
