J$.iids = {"9":[10,14,10,21],"17":[10,22,10,33],"25":[10,14,10,34],"33":[10,14,10,34],"41":[10,14,10,34],"49":[13,1,13,7],"57":[13,22,13,28],"65":[15,3,15,10],"73":[15,11,15,19],"81":[15,3,15,20],"89":[14,12,15,21],"97":[18,3,18,10],"105":[18,11,18,30],"113":[18,3,18,31],"121":[19,3,19,10],"129":[19,11,19,26],"137":[19,3,19,27],"145":[17,13,19,28],"153":[22,3,22,10],"161":[22,11,22,27],"169":[22,3,22,28],"177":[23,3,23,10],"185":[23,11,23,25],"193":[23,3,23,26],"201":[24,3,24,10],"209":[24,11,24,26],"217":[24,3,24,27],"225":[25,3,25,10],"233":[25,11,25,24],"241":[25,3,25,25],"249":[21,13,25,26],"257":[13,29,25,28],"265":[13,18,25,29],"273":[13,1,25,29],"281":[13,1,25,30],"289":[1,1,25,30],"297":[1,1,25,30],"305":[1,1,25,30],"313":[1,1,25,30],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe_jalangi_.js","code":"// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\n'use strict';\n\n\nvar Schema = require('../schema');\n\n\nmodule.exports = new Schema({\n  include: [\n    require('./core')\n  ],\n  implicit: [\n    require('../type/timestamp'),\n    require('../type/merge')\n  ],\n  explicit: [\n    require('../type/binary'),\n    require('../type/omap'),\n    require('../type/pairs'),\n    require('../type/set')\n  ]\n});\n"};
jalangiLabel65:
    while (true) {
        try {
            J$.Se(289, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js');
            J$.N(297, 'Schema', Schema, 0);
            var Schema = J$.X1(41, J$.W(33, 'Schema', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, '../schema', 21, false)), Schema, 3));
            J$.X1(281, J$.P(273, J$.R(49, 'module', module, 2), 'exports', J$.F(265, J$.R(57, 'Schema', Schema, 1), 1)(J$.T(257, {
                include: J$.T(89, [J$.F(81, J$.R(65, 'require', require, 2), 0)(J$.T(73, './core', 21, false))], 10, false),
                implicit: J$.T(145, [
                    J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, '../type/timestamp', 21, false)),
                    J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../type/merge', 21, false))
                ], 10, false),
                explicit: J$.T(249, [
                    J$.F(169, J$.R(153, 'require', require, 2), 0)(J$.T(161, '../type/binary', 21, false)),
                    J$.F(193, J$.R(177, 'require', require, 2), 0)(J$.T(185, '../type/omap', 21, false)),
                    J$.F(217, J$.R(201, 'require', require, 2), 0)(J$.T(209, '../type/pairs', 21, false)),
                    J$.F(241, J$.R(225, 'require', require, 2), 0)(J$.T(233, '../type/set', 21, false))
                ], 10, false)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(305, J$e);
        } finally {
            if (J$.Sr(313)) {
                J$.L();
                continue jalangiLabel65;
            } else {
                J$.L();
                break jalangiLabel65;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
