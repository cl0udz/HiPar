J$.iids = {"9":[8,1,8,13],"17":[8,1,8,14],"25":[11,14,11,21],"33":[11,22,11,33],"41":[11,14,11,34],"49":[11,14,11,34],"57":[11,14,11,34],"65":[14,1,14,7],"73":[14,22,14,28],"81":[16,5,16,12],"89":[16,13,16,21],"97":[16,5,16,22],"105":[15,12,17,4],"113":[19,5,19,12],"121":[19,13,19,32],"129":[19,5,19,33],"137":[20,5,20,12],"145":[20,13,20,28],"153":[20,5,20,29],"161":[18,13,21,4],"169":[23,5,23,12],"177":[23,13,23,29],"185":[23,5,23,30],"193":[24,5,24,12],"201":[24,13,24,27],"209":[24,5,24,28],"217":[25,5,25,12],"225":[25,13,25,28],"233":[25,5,25,29],"241":[26,5,26,12],"249":[26,13,26,26],"257":[26,5,26,27],"265":[22,13,27,4],"273":[14,29,28,2],"281":[14,18,28,3],"289":[14,1,28,3],"297":[14,1,28,4],"305":[1,1,29,1],"313":[1,1,29,1],"321":[1,1,29,1],"329":[1,1,29,1],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe_jalangi_.js","code":"// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\n'use strict';\n\n\nvar Schema = require('../schema');\n\n\nmodule.exports = new Schema({\n  include: [\n    require('./core')\n  ],\n  implicit: [\n    require('../type/timestamp'),\n    require('../type/merge')\n  ],\n  explicit: [\n    require('../type/binary'),\n    require('../type/omap'),\n    require('../type/pairs'),\n    require('../type/set')\n  ]\n});\n"};
jalangiLabel61:
    while (true) {
        try {
            J$.Se(305, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js');
            J$.N(313, 'Schema', Schema, 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var Schema = J$.X1(57, J$.W(49, 'Schema', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../schema', 21, false)), Schema, 3));
            J$.X1(297, J$.P(289, J$.R(65, 'module', module, 2), 'exports', J$.F(281, J$.R(73, 'Schema', Schema, 1), 1)(J$.T(273, {
                include: J$.T(105, [J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './core', 21, false))], 10, false),
                implicit: J$.T(161, [
                    J$.F(129, J$.R(113, 'require', require, 2), 0)(J$.T(121, '../type/timestamp', 21, false)),
                    J$.F(153, J$.R(137, 'require', require, 2), 0)(J$.T(145, '../type/merge', 21, false))
                ], 10, false),
                explicit: J$.T(265, [
                    J$.F(185, J$.R(169, 'require', require, 2), 0)(J$.T(177, '../type/binary', 21, false)),
                    J$.F(209, J$.R(193, 'require', require, 2), 0)(J$.T(201, '../type/omap', 21, false)),
                    J$.F(233, J$.R(217, 'require', require, 2), 0)(J$.T(225, '../type/pairs', 21, false)),
                    J$.F(257, J$.R(241, 'require', require, 2), 0)(J$.T(249, '../type/set', 21, false))
                ], 10, false)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(321, J$e);
        } finally {
            if (J$.Sr(329)) {
                J$.L();
                continue jalangiLabel61;
            } else {
                J$.L();
                break jalangiLabel61;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
