J$.iids = {"8":[19,11,19,89],"9":[1,1,1,13],"10":[19,11,19,47],"16":[19,11,19,89],"17":[1,1,1,14],"18":[19,51,19,89],"24":[45,46,45,60],"25":[5,21,5,28],"26":[28,39,28,41],"32":[53,19,53,44],"33":[5,29,5,39],"34":[28,12,28,41],"40":[54,19,54,44],"41":[5,21,5,40],"42":[45,46,45,60],"48":[55,19,55,44],"49":[5,21,5,40],"50":[45,71,45,72],"56":[58,9,58,52],"57":[5,21,5,40],"58":[58,26,58,52],"64":[58,9,58,52],"65":[6,21,6,28],"66":[93,49,93,73],"72":[75,11,75,27],"73":[6,29,6,42],"74":[93,7,93,77],"80":[76,10,76,11],"81":[6,21,6,43],"82":[97,45,97,65],"88":[81,10,81,11],"89":[6,21,6,43],"90":[97,7,97,69],"96":[93,7,93,77],"97":[6,21,6,43],"104":[97,7,97,69],"105":[7,21,7,28],"113":[7,29,7,37],"121":[7,21,7,38],"129":[7,21,7,38],"137":[7,21,7,38],"145":[11,17,11,19],"153":[11,17,11,19],"161":[11,17,11,19],"169":[13,3,13,9],"177":[13,3,13,17],"185":[14,14,14,25],"193":[14,26,14,40],"201":[14,42,14,46],"209":[14,48,14,54],"217":[14,14,14,55],"225":[14,14,14,55],"233":[14,5,14,56],"241":[13,26,15,4],"249":[13,26,15,4],"257":[13,26,15,4],"265":[13,26,15,4],"273":[13,3,15,5],"275":[13,3,13,25],"281":[13,3,15,6],"289":[17,3,17,9],"297":[17,10,17,14],"305":[17,3,17,15],"313":[18,5,18,11],"321":[19,11,19,23],"329":[19,11,19,27],"337":[19,32,19,43],"345":[19,32,19,47],"353":[19,51,19,63],"361":[19,51,19,68],"369":[19,73,19,84],"377":[19,73,19,89],"385":[20,9,20,16],"393":[20,22,20,35],"401":[20,9,20,36],"403":[20,9,20,21],"409":[20,9,20,37],"417":[18,20,22,6],"425":[18,20,22,6],"433":[18,20,22,6],"441":[18,20,22,6],"449":[18,20,22,6],"457":[18,5,22,7],"459":[18,5,18,19],"465":[18,5,22,8],"473":[24,5,24,11],"481":[24,17,24,28],"489":[24,5,24,29],"491":[24,5,24,16],"497":[24,5,24,30],"505":[17,24,25,4],"513":[17,24,25,4],"521":[17,24,25,4],"529":[17,24,25,4],"537":[17,3,25,5],"539":[17,3,17,23],"545":[17,3,25,6],"553":[27,10,27,16],"561":[28,12,28,19],"569":[28,28,28,33],"577":[28,12,28,34],"579":[28,12,28,27],"585":[28,40,28,41],"593":[28,12,28,41],"601":[28,5,28,42],"609":[27,24,29,4],"617":[27,24,29,4],"625":[27,24,29,4],"633":[27,24,29,4],"641":[27,24,29,4],"649":[27,10,29,5],"651":[27,10,27,23],"657":[27,10,29,5],"665":[27,3,29,6],"673":[10,1,30,2],"681":[10,1,30,2],"689":[10,1,30,2],"697":[10,1,30,2],"705":[10,1,30,2],"713":[10,1,30,2],"721":[35,17,35,19],"729":[36,19,36,21],"737":[37,18,37,20],"745":[38,19,38,21],"753":[34,16,39,8],"761":[34,16,39,8],"769":[34,16,39,8],"777":[42,5,42,11],"785":[42,12,42,16],"793":[42,12,42,21],"801":[42,5,42,22],"809":[42,23,42,27],"817":[42,23,42,31],"825":[42,35,42,41],"833":[42,42,42,52],"841":[42,35,42,53],"849":[42,54,42,58],"857":[42,54,42,62],"865":[42,66,42,70],"873":[42,35,42,70],"881":[42,5,42,70],"889":[42,5,42,71],"897":[41,3,43,4],"905":[41,3,43,4],"913":[41,3,43,4],"921":[45,16,45,17],"929":[45,16,45,17],"937":[45,28,45,37],"945":[45,28,45,44],"953":[45,28,45,44],"961":[45,8,45,17],"969":[45,46,45,51],"977":[45,54,45,60],"985":[45,71,45,72],"993":[45,62,45,67],"1001":[45,62,45,72],"1009":[46,5,46,14],"1017":[46,15,46,20],"1025":[46,5,46,21],"1033":[46,30,46,41],"1041":[46,5,46,42],"1043":[46,5,46,29],"1049":[46,5,46,43],"1057":[48,10,48,16],"1065":[48,10,48,16],"1073":[48,3,48,17],"1081":[33,1,49,2],"1089":[33,1,49,2],"1097":[33,1,49,2],"1105":[33,1,49,2],"1113":[33,1,49,2],"1121":[41,3,43,4],"1129":[33,1,49,2],"1137":[53,3,53,7],"1145":[53,19,53,29],"1153":[53,19,53,37],"1161":[53,42,53,44],"1169":[53,3,53,44],"1177":[53,3,53,45],"1185":[54,3,54,7],"1193":[54,19,54,29],"1201":[54,19,54,38],"1209":[54,42,54,44],"1217":[54,3,54,44],"1225":[54,3,54,45],"1233":[55,3,55,7],"1241":[55,19,55,29],"1249":[55,19,55,38],"1257":[55,42,55,44],"1265":[55,3,55,44],"1273":[55,3,55,45],"1281":[57,3,57,7],"1289":[57,3,57,16],"1297":[58,9,58,13],"1305":[58,9,58,22],"1313":[58,26,58,30],"1321":[58,26,58,39],"1329":[58,44,58,52],"1337":[59,17,59,30],"1345":[59,31,59,144],"1353":[59,13,59,145],"1361":[59,13,59,145],"1369":[59,7,59,146],"1377":[57,25,61,4],"1385":[57,25,61,4],"1393":[57,25,61,4],"1401":[57,25,61,4],"1409":[57,3,61,5],"1411":[57,3,57,24],"1417":[57,3,61,6],"1425":[63,3,63,7],"1433":[63,27,63,38],"1441":[63,39,63,43],"1449":[63,45,63,55],"1457":[63,57,63,59],"1465":[63,27,63,60],"1473":[63,3,63,60],"1481":[63,3,63,61],"1489":[64,3,64,7],"1497":[64,27,64,38],"1505":[64,39,64,43],"1513":[64,45,64,55],"1521":[64,57,64,59],"1529":[64,27,64,60],"1537":[64,3,64,60],"1545":[64,3,64,61],"1553":[65,3,65,7],"1561":[65,27,65,37],"1569":[65,38,65,42],"1577":[65,38,65,59],"1585":[65,61,65,65],"1593":[65,61,65,82],"1601":[65,27,65,83],"1609":[65,3,65,83],"1617":[65,3,65,84],"1625":[52,1,66,2],"1633":[52,1,66,2],"1641":[52,1,66,2],"1649":[69,1,69,7],"1657":[69,18,69,22],"1665":[69,1,69,22],"1673":[69,1,69,23],"1681":[72,1,72,7],"1689":[75,11,75,20],"1697":[75,11,75,27],"1705":[77,17,77,23],"1713":[77,17,77,31],"1721":[77,17,77,31],"1729":[77,7,77,32],"1737":[78,15,78,24],"1745":[78,25,78,26],"1753":[78,15,78,27],"1761":[78,15,78,27],"1769":[78,7,78,28],"1777":[76,10,76,11],"1785":[82,17,82,26],"1793":[82,27,82,28],"1801":[82,17,82,29],"1809":[82,17,82,29],"1817":[82,7,82,30],"1825":[83,15,83,24],"1833":[83,25,83,26],"1841":[83,15,83,27],"1849":[83,15,83,27],"1857":[83,7,83,28],"1865":[81,10,81,11],"1873":[87,17,87,30],"1881":[87,31,87,85],"1889":[87,13,87,86],"1897":[87,13,87,86],"1905":[87,7,87,87],"1913":[90,13,90,19],"1921":[90,28,90,35],"1929":[90,13,90,36],"1931":[90,13,90,27],"1937":[90,13,90,36],"1945":[90,3,90,37],"1953":[91,11,91,17],"1961":[91,26,91,31],"1969":[91,11,91,32],"1971":[91,11,91,25],"1977":[91,11,91,32],"1985":[91,3,91,33],"1993":[93,8,93,15],"2001":[93,49,93,55],"2009":[93,67,93,73],"2017":[93,49,93,73],"2025":[93,42,93,74],"2033":[93,22,93,76],"2041":[93,22,93,76],"2049":[93,22,93,76],"2057":[93,22,93,76],"2065":[93,8,93,77],"2067":[93,8,93,21],"2073":[94,15,94,28],"2081":[94,29,94,120],"2089":[94,11,94,121],"2097":[94,11,94,121],"2105":[94,5,94,122],"2113":[97,8,97,13],"2121":[97,45,97,49],"2129":[97,61,97,65],"2137":[97,45,97,65],"2145":[97,38,97,66],"2153":[97,20,97,68],"2161":[97,20,97,68],"2169":[97,20,97,68],"2177":[97,20,97,68],"2185":[97,8,97,69],"2187":[97,8,97,19],"2193":[98,15,98,28],"2201":[98,29,98,113],"2209":[98,11,98,114],"2217":[98,11,98,114],"2225":[98,5,98,115],"2233":[101,14,101,20],"2241":[102,14,102,21],"2249":[103,15,103,20],"2257":[101,21,104,4],"2265":[101,10,104,5],"2273":[101,10,104,5],"2281":[101,3,104,6],"2289":[72,17,105,2],"2297":[72,17,105,2],"2305":[72,17,105,2],"2313":[72,17,105,2],"2321":[72,17,105,2],"2329":[72,17,105,2],"2337":[72,1,105,2],"2345":[72,1,105,3],"2353":[108,1,108,7],"2361":[108,18,108,24],"2369":[108,1,108,24],"2377":[108,1,108,25],"2385":[1,1,109,1],"2393":[1,1,109,1],"2401":[1,1,109,1],"2409":[1,1,109,1],"2417":[10,1,30,2],"2425":[1,1,109,1],"2433":[33,1,49,2],"2441":[1,1,109,1],"2449":[52,1,66,2],"2457":[1,1,109,1],"2465":[13,26,15,4],"2473":[13,26,15,4],"2481":[19,7,21,8],"2489":[18,20,22,6],"2497":[18,20,22,6],"2505":[17,24,25,4],"2513":[17,24,25,4],"2521":[27,24,29,4],"2529":[27,24,29,4],"2537":[10,1,30,2],"2545":[10,1,30,2],"2553":[41,3,43,4],"2561":[41,3,43,4],"2569":[45,3,47,4],"2577":[45,3,47,4],"2585":[45,3,47,4],"2593":[33,1,49,2],"2601":[33,1,49,2],"2609":[58,5,60,6],"2617":[57,25,61,4],"2625":[57,25,61,4],"2633":[52,1,66,2],"2641":[52,1,66,2],"2649":[75,11,75,27],"2657":[76,10,76,11],"2665":[81,10,81,11],"2673":[93,22,93,76],"2681":[93,22,93,76],"2689":[93,3,95,4],"2697":[97,20,97,68],"2705":[97,20,97,68],"2713":[97,3,99,4],"2721":[72,17,105,2],"2729":[72,17,105,2],"2737":[1,1,109,1],"2745":[1,1,109,1],"nBranches":26,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema_jalangi_.js","code":"'use strict';\n\n/*eslint-disable max-len*/\n\nvar common        = require('./common');\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n\n    result.push(currentType);\n  });\n\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {}\n      }, index, length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  this.include  = definition.include  || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\n\nSchema.DEFAULT = null;\n\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) { return type instanceof Type; })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\n\nmodule.exports = Schema;\n"};
jalangiLabel74:
    while (true) {
        try {
            J$.Se(2385, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema.js');
            function compileList(schema, name, result) {
                jalangiLabel66:
                    while (true) {
                        try {
                            J$.Fe(673, arguments.callee, this, arguments);
                            arguments = J$.N(681, 'arguments', arguments, 4);
                            schema = J$.N(689, 'schema', schema, 4);
                            name = J$.N(697, 'name', name, 4);
                            result = J$.N(705, 'result', result, 4);
                            J$.N(713, 'exclude', exclude, 0);
                            var exclude = J$.X1(161, J$.W(153, 'exclude', J$.T(145, [], 10, false), exclude, 1));
                            J$.X1(281, J$.M(273, J$.G(177, J$.R(169, 'schema', schema, 0), 'include', 0), 'forEach', 0)(J$.T(265, function (includedSchema) {
                                jalangiLabel62:
                                    while (true) {
                                        try {
                                            J$.Fe(241, arguments.callee, this, arguments);
                                            arguments = J$.N(249, 'arguments', arguments, 4);
                                            includedSchema = J$.N(257, 'includedSchema', includedSchema, 4);
                                            J$.X1(233, result = J$.W(225, 'result', J$.F(217, J$.R(185, 'compileList', compileList, 1), 0)(J$.R(193, 'includedSchema', includedSchema, 0), J$.R(201, 'name', name, 0), J$.R(209, 'result', result, 0)), result, 0));
                                        } catch (J$e) {
                                            J$.Ex(2465, J$e);
                                        } finally {
                                            if (J$.Fr(2473))
                                                continue jalangiLabel62;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 241)));
                            J$.X1(545, J$.M(537, J$.G(305, J$.R(289, 'schema', schema, 0), J$.R(297, 'name', name, 0), 4), 'forEach', 0)(J$.T(529, function (currentType) {
                                jalangiLabel64:
                                    while (true) {
                                        try {
                                            J$.Fe(505, arguments.callee, this, arguments);
                                            arguments = J$.N(513, 'arguments', arguments, 4);
                                            currentType = J$.N(521, 'currentType', currentType, 4);
                                            J$.X1(465, J$.M(457, J$.R(313, 'result', result, 0), 'forEach', 0)(J$.T(449, function (previousType, previousIndex) {
                                                jalangiLabel63:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(417, arguments.callee, this, arguments);
                                                            arguments = J$.N(425, 'arguments', arguments, 4);
                                                            previousType = J$.N(433, 'previousType', previousType, 4);
                                                            previousIndex = J$.N(441, 'previousIndex', previousIndex, 4);
                                                            if (J$.X1(2481, J$.C(16, J$.C(8, J$.B(10, '===', J$.G(329, J$.R(321, 'previousType', previousType, 0), 'tag', 0), J$.G(345, J$.R(337, 'currentType', currentType, 0), 'tag', 0), 0)) ? J$.B(18, '===', J$.G(361, J$.R(353, 'previousType', previousType, 0), 'kind', 0), J$.G(377, J$.R(369, 'currentType', currentType, 0), 'kind', 0), 0) : J$._()))) {
                                                                J$.X1(409, J$.M(401, J$.R(385, 'exclude', exclude, 0), 'push', 0)(J$.R(393, 'previousIndex', previousIndex, 0)));
                                                            }
                                                        } catch (J$e) {
                                                            J$.Ex(2489, J$e);
                                                        } finally {
                                                            if (J$.Fr(2497))
                                                                continue jalangiLabel63;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 417)));
                                            J$.X1(497, J$.M(489, J$.R(473, 'result', result, 0), 'push', 0)(J$.R(481, 'currentType', currentType, 0)));
                                        } catch (J$e) {
                                            J$.Ex(2505, J$e);
                                        } finally {
                                            if (J$.Fr(2513))
                                                continue jalangiLabel64;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 505)));
                            return J$.X1(665, J$.Rt(657, J$.M(649, J$.R(553, 'result', result, 0), 'filter', 0)(J$.T(641, function (type, index) {
                                jalangiLabel65:
                                    while (true) {
                                        try {
                                            J$.Fe(609, arguments.callee, this, arguments);
                                            arguments = J$.N(617, 'arguments', arguments, 4);
                                            type = J$.N(625, 'type', type, 4);
                                            index = J$.N(633, 'index', index, 4);
                                            return J$.X1(601, J$.Rt(593, J$.B(34, '===', J$.M(577, J$.R(561, 'exclude', exclude, 0), 'indexOf', 0)(J$.R(569, 'index', index, 0)), J$.U(26, '-', J$.T(585, 1, 22, false)), 0)));
                                        } catch (J$e) {
                                            J$.Ex(2521, J$e);
                                        } finally {
                                            if (J$.Fr(2529))
                                                continue jalangiLabel65;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 609))));
                        } catch (J$e) {
                            J$.Ex(2537, J$e);
                        } finally {
                            if (J$.Fr(2545))
                                continue jalangiLabel66;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileMap() {
                jalangiLabel68:
                    while (true) {
                        try {
                            J$.Fe(1081, arguments.callee, this, arguments);
                            function collectType(type) {
                                jalangiLabel67:
                                    while (true) {
                                        try {
                                            J$.Fe(897, arguments.callee, this, arguments);
                                            arguments = J$.N(905, 'arguments', arguments, 4);
                                            type = J$.N(913, 'type', type, 4);
                                            J$.X1(889, J$.P(881, J$.G(801, J$.R(777, 'result', result, 0), J$.G(793, J$.R(785, 'type', type, 0), 'kind', 0), 4), J$.G(817, J$.R(809, 'type', type, 0), 'tag', 0), J$.P(873, J$.G(841, J$.R(825, 'result', result, 0), J$.T(833, 'fallback', 21, false), 4), J$.G(857, J$.R(849, 'type', type, 0), 'tag', 0), J$.R(865, 'type', type, 0), 2), 2));
                                        } catch (J$e) {
                                            J$.Ex(2553, J$e);
                                        } finally {
                                            if (J$.Fr(2561))
                                                continue jalangiLabel67;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1089, 'arguments', arguments, 4);
                            J$.N(1097, 'result', result, 0);
                            J$.N(1105, 'index', index, 0);
                            J$.N(1113, 'length', length, 0);
                            collectType = J$.N(1129, 'collectType', J$.T(1121, collectType, 12, false, 897), 0);
                            var result = J$.X1(769, J$.W(761, 'result', J$.T(753, {
                                    scalar: J$.T(721, {}, 11, false),
                                    sequence: J$.T(729, {}, 11, false),
                                    mapping: J$.T(737, {}, 11, false),
                                    fallback: J$.T(745, {}, 11, false)
                                }, 11, false), result, 1)), index, length;
                            for (J$.X1(2577, (J$.X1(961, index = J$.W(929, 'index', J$.T(921, 0, 22, false), index, 0)), length = J$.W(953, 'length', J$.G(945, J$.R(937, 'arguments', arguments, 2), 'length', 0), length, 0))); J$.X1(2569, J$.C(24, J$.B(42, '<', J$.R(969, 'index', index, 0), J$.R(977, 'length', length, 0), 0))); J$.X1(2585, index = J$.W(1001, 'index', J$.B(50, '+', J$.R(993, 'index', index, 0), J$.T(985, 1, 22, false), 0), index, 0))) {
                                J$.X1(1049, J$.M(1041, J$.G(1025, J$.R(1009, 'arguments', arguments, 2), J$.R(1017, 'index', index, 0), 4), 'forEach', 0)(J$.R(1033, 'collectType', collectType, 0)));
                            }
                            return J$.X1(1073, J$.Rt(1065, J$.R(1057, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(2593, J$e);
                        } finally {
                            if (J$.Fr(2601))
                                continue jalangiLabel68;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Schema(definition) {
                jalangiLabel70:
                    while (true) {
                        try {
                            J$.Fe(1625, arguments.callee, this, arguments);
                            arguments = J$.N(1633, 'arguments', arguments, 4);
                            definition = J$.N(1641, 'definition', definition, 4);
                            J$.X1(1177, J$.P(1169, J$.R(1137, 'this', this, 0), 'include', J$.C(32, J$.G(1153, J$.R(1145, 'definition', definition, 0), 'include', 0)) ? J$._() : J$.T(1161, [], 10, false), 0));
                            J$.X1(1225, J$.P(1217, J$.R(1185, 'this', this, 0), 'implicit', J$.C(40, J$.G(1201, J$.R(1193, 'definition', definition, 0), 'implicit', 0)) ? J$._() : J$.T(1209, [], 10, false), 0));
                            J$.X1(1273, J$.P(1265, J$.R(1233, 'this', this, 0), 'explicit', J$.C(48, J$.G(1249, J$.R(1241, 'definition', definition, 0), 'explicit', 0)) ? J$._() : J$.T(1257, [], 10, false), 0));
                            J$.X1(1417, J$.M(1409, J$.G(1289, J$.R(1281, 'this', this, 0), 'implicit', 0), 'forEach', 0)(J$.T(1401, function (type) {
                                jalangiLabel69:
                                    while (true) {
                                        try {
                                            J$.Fe(1377, arguments.callee, this, arguments);
                                            arguments = J$.N(1385, 'arguments', arguments, 4);
                                            type = J$.N(1393, 'type', type, 4);
                                            if (J$.X1(2609, J$.C(64, J$.C(56, J$.G(1305, J$.R(1297, 'type', type, 0), 'loadKind', 0)) ? J$.B(58, '!==', J$.G(1321, J$.R(1313, 'type', type, 0), 'loadKind', 0), J$.T(1329, 'scalar', 21, false), 0) : J$._()))) {
                                                throw J$.X1(1369, J$.Th(1361, J$.F(1353, J$.R(1337, 'YAMLException', YAMLException, 1), 1)(J$.T(1345, 'There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.', 21, false))));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2617, J$e);
                                        } finally {
                                            if (J$.Fr(2625))
                                                continue jalangiLabel69;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1377)));
                            J$.X1(1481, J$.P(1473, J$.R(1425, 'this', this, 0), 'compiledImplicit', J$.F(1465, J$.R(1433, 'compileList', compileList, 1), 0)(J$.R(1441, 'this', this, 0), J$.T(1449, 'implicit', 21, false), J$.T(1457, [], 10, false)), 0));
                            J$.X1(1545, J$.P(1537, J$.R(1489, 'this', this, 0), 'compiledExplicit', J$.F(1529, J$.R(1497, 'compileList', compileList, 1), 0)(J$.R(1505, 'this', this, 0), J$.T(1513, 'explicit', 21, false), J$.T(1521, [], 10, false)), 0));
                            J$.X1(1617, J$.P(1609, J$.R(1553, 'this', this, 0), 'compiledTypeMap', J$.F(1601, J$.R(1561, 'compileMap', compileMap, 1), 0)(J$.G(1577, J$.R(1569, 'this', this, 0), 'compiledImplicit', 0), J$.G(1593, J$.R(1585, 'this', this, 0), 'compiledExplicit', 0)), 0));
                        } catch (J$e) {
                            J$.Ex(2633, J$e);
                        } finally {
                            if (J$.Fr(2641))
                                continue jalangiLabel70;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2393, 'common', common, 0);
            J$.N(2401, 'YAMLException', YAMLException, 0);
            J$.N(2409, 'Type', Type, 0);
            compileList = J$.N(2425, 'compileList', J$.T(2417, compileList, 12, false, 673), 0);
            compileMap = J$.N(2441, 'compileMap', J$.T(2433, compileMap, 12, false, 1081), 0);
            Schema = J$.N(2457, 'Schema', J$.T(2449, Schema, 12, false, 1625), 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var common = J$.X1(57, J$.W(49, 'common', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, './common', 21, false)), common, 3));
            var YAMLException = J$.X1(97, J$.W(89, 'YAMLException', J$.F(81, J$.R(65, 'require', require, 2), 0)(J$.T(73, './exception', 21, false)), YAMLException, 3));
            var Type = J$.X1(137, J$.W(129, 'Type', J$.F(121, J$.R(105, 'require', require, 2), 0)(J$.T(113, './type', 21, false)), Type, 3));
            J$.X1(1673, J$.P(1665, J$.R(1649, 'Schema', Schema, 1), 'DEFAULT', J$.T(1657, null, 25, false), 0));
            J$.X1(2345, J$.P(2337, J$.R(1681, 'Schema', Schema, 1), 'create', J$.T(2329, function createSchema() {
                jalangiLabel73:
                    while (true) {
                        try {
                            J$.Fe(2289, arguments.callee, this, arguments);
                            arguments = J$.N(2297, 'arguments', arguments, 4);
                            createSchema = J$.N(2305, 'createSchema', createSchema, 0);
                            J$.N(2313, 'schemas', schemas, 0);
                            J$.N(2321, 'types', types, 0);
                            var schemas, types;
                            switch (J$.X1(2649, J$.C1(72, J$.G(1697, J$.R(1689, 'arguments', arguments, 2), 'length', 0)))) {
                            case J$.X1(2657, J$.C2(80, J$.T(1777, 1, 22, false))):
                                J$.X1(1729, schemas = J$.W(1721, 'schemas', J$.G(1713, J$.R(1705, 'Schema', Schema, 1), 'DEFAULT', 0), schemas, 0));
                                J$.X1(1769, types = J$.W(1761, 'types', J$.G(1753, J$.R(1737, 'arguments', arguments, 2), J$.T(1745, 0, 22, false), 4), types, 0));
                                break;
                            case J$.X1(2665, J$.C2(88, J$.T(1865, 2, 22, false))):
                                J$.X1(1817, schemas = J$.W(1809, 'schemas', J$.G(1801, J$.R(1785, 'arguments', arguments, 2), J$.T(1793, 0, 22, false), 4), schemas, 0));
                                J$.X1(1857, types = J$.W(1849, 'types', J$.G(1841, J$.R(1825, 'arguments', arguments, 2), J$.T(1833, 1, 22, false), 4), types, 0));
                                break;
                            default:
                                throw J$.X1(1905, J$.Th(1897, J$.F(1889, J$.R(1873, 'YAMLException', YAMLException, 1), 1)(J$.T(1881, 'Wrong number of arguments for Schema.create function', 21, false))));
                            }
                            J$.X1(1945, schemas = J$.W(1937, 'schemas', J$.M(1929, J$.R(1913, 'common', common, 1), 'toArray', 0)(J$.R(1921, 'schemas', schemas, 0)), schemas, 0));
                            J$.X1(1985, types = J$.W(1977, 'types', J$.M(1969, J$.R(1953, 'common', common, 1), 'toArray', 0)(J$.R(1961, 'types', types, 0)), types, 0));
                            if (J$.X1(2689, J$.C(96, J$.U(74, '!', J$.M(2065, J$.R(1993, 'schemas', schemas, 0), 'every', 0)(J$.T(2057, function (schema) {
                                    jalangiLabel71:
                                        while (true) {
                                            try {
                                                J$.Fe(2033, arguments.callee, this, arguments);
                                                arguments = J$.N(2041, 'arguments', arguments, 4);
                                                schema = J$.N(2049, 'schema', schema, 4);
                                                return J$.X1(2025, J$.Rt(2017, J$.B(66, 'instanceof', J$.R(2001, 'schema', schema, 0), J$.R(2009, 'Schema', Schema, 1), 0)));
                                            } catch (J$e) {
                                                J$.Ex(2673, J$e);
                                            } finally {
                                                if (J$.Fr(2681))
                                                    continue jalangiLabel71;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 2033)))))) {
                                throw J$.X1(2105, J$.Th(2097, J$.F(2089, J$.R(2073, 'YAMLException', YAMLException, 1), 1)(J$.T(2081, 'Specified list of super schemas (or a single Schema object) contains a non-Schema object.', 21, false))));
                            }
                            if (J$.X1(2713, J$.C(104, J$.U(90, '!', J$.M(2185, J$.R(2113, 'types', types, 0), 'every', 0)(J$.T(2177, function (type) {
                                    jalangiLabel72:
                                        while (true) {
                                            try {
                                                J$.Fe(2153, arguments.callee, this, arguments);
                                                arguments = J$.N(2161, 'arguments', arguments, 4);
                                                type = J$.N(2169, 'type', type, 4);
                                                return J$.X1(2145, J$.Rt(2137, J$.B(82, 'instanceof', J$.R(2121, 'type', type, 0), J$.R(2129, 'Type', Type, 1), 0)));
                                            } catch (J$e) {
                                                J$.Ex(2697, J$e);
                                            } finally {
                                                if (J$.Fr(2705))
                                                    continue jalangiLabel72;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 2153)))))) {
                                throw J$.X1(2225, J$.Th(2217, J$.F(2209, J$.R(2193, 'YAMLException', YAMLException, 1), 1)(J$.T(2201, 'Specified list of YAML types (or a single Type object) contains a non-Type object.', 21, false))));
                            }
                            return J$.X1(2281, J$.Rt(2273, J$.F(2265, J$.R(2233, 'Schema', Schema, 1), 1)(J$.T(2257, {
                                include: J$.R(2241, 'schemas', schemas, 0),
                                explicit: J$.R(2249, 'types', types, 0)
                            }, 11, false))));
                        } catch (J$e) {
                            J$.Ex(2721, J$e);
                        } finally {
                            if (J$.Fr(2729))
                                continue jalangiLabel73;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2289), 0));
            J$.X1(2377, J$.P(2369, J$.R(2353, 'module', module, 2), 'exports', J$.R(2361, 'Schema', Schema, 1), 0));
        } catch (J$e) {
            J$.Ex(2737, J$e);
        } finally {
            if (J$.Sr(2745)) {
                J$.L();
                continue jalangiLabel74;
            } else {
                J$.L();
                break jalangiLabel74;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
