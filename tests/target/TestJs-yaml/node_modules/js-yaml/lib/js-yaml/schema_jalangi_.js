J$.iids = {"8":[18,11,18,89],"9":[4,14,4,21],"10":[18,11,18,47],"16":[18,11,18,89],"17":[4,22,4,32],"18":[18,51,18,89],"24":[44,46,44,60],"25":[4,14,4,33],"26":[27,39,27,41],"32":[52,18,52,42],"33":[4,14,4,33],"34":[27,12,27,41],"40":[53,19,53,44],"41":[4,14,4,33],"42":[44,46,44,60],"48":[54,19,54,44],"49":[5,21,5,28],"50":[44,71,44,72],"56":[57,9,57,52],"57":[5,29,5,42],"58":[57,26,57,52],"64":[57,9,57,52],"65":[5,21,5,43],"66":[92,48,92,72],"72":[74,11,74,27],"73":[5,21,5,43],"74":[92,7,92,75],"80":[75,10,75,11],"81":[5,21,5,43],"82":[96,44,96,64],"88":[80,10,80,11],"89":[6,12,6,19],"90":[96,7,96,67],"96":[92,7,92,75],"97":[6,20,6,28],"104":[96,7,96,67],"105":[6,12,6,29],"113":[6,12,6,29],"121":[6,12,6,29],"129":[10,17,10,19],"137":[10,17,10,19],"145":[10,17,10,19],"153":[12,3,12,9],"161":[12,3,12,17],"169":[13,14,13,25],"177":[13,26,13,40],"185":[13,42,13,46],"193":[13,48,13,54],"201":[13,14,13,55],"209":[13,14,13,55],"217":[13,5,13,56],"225":[12,26,14,4],"233":[12,26,14,4],"241":[12,26,14,4],"249":[12,26,14,4],"257":[12,3,14,5],"259":[12,3,12,25],"265":[12,3,14,6],"273":[16,3,16,9],"281":[16,10,16,14],"289":[16,3,16,15],"297":[17,5,17,11],"305":[18,11,18,23],"313":[18,11,18,27],"321":[18,32,18,43],"329":[18,32,18,47],"337":[18,51,18,63],"345":[18,51,18,68],"353":[18,73,18,84],"361":[18,73,18,89],"369":[19,9,19,16],"377":[19,22,19,35],"385":[19,9,19,36],"387":[19,9,19,21],"393":[19,9,19,37],"401":[17,20,21,6],"409":[17,20,21,6],"417":[17,20,21,6],"425":[17,20,21,6],"433":[17,20,21,6],"441":[17,5,21,7],"443":[17,5,17,19],"449":[17,5,21,8],"457":[23,5,23,11],"465":[23,17,23,28],"473":[23,5,23,29],"475":[23,5,23,16],"481":[23,5,23,30],"489":[16,24,24,4],"497":[16,24,24,4],"505":[16,24,24,4],"513":[16,24,24,4],"521":[16,3,24,5],"523":[16,3,16,23],"529":[16,3,24,6],"537":[26,10,26,16],"545":[27,12,27,19],"553":[27,28,27,33],"561":[27,12,27,34],"563":[27,12,27,27],"569":[27,40,27,41],"577":[27,12,27,41],"585":[27,5,27,42],"593":[26,24,28,4],"601":[26,24,28,4],"609":[26,24,28,4],"617":[26,24,28,4],"625":[26,24,28,4],"633":[26,10,28,5],"635":[26,10,26,23],"641":[26,10,28,5],"649":[26,3,28,6],"657":[9,1,29,2],"665":[9,1,29,2],"673":[9,1,29,2],"681":[9,1,29,2],"689":[9,1,29,2],"697":[9,1,29,2],"705":[34,13,34,15],"713":[35,15,35,17],"721":[36,14,36,16],"729":[37,15,37,17],"737":[33,16,37,19],"745":[33,16,37,19],"753":[33,16,37,19],"761":[41,5,41,11],"769":[41,12,41,16],"777":[41,12,41,21],"785":[41,5,41,22],"793":[41,23,41,27],"801":[41,23,41,31],"809":[41,35,41,41],"817":[41,42,41,52],"825":[41,35,41,53],"833":[41,54,41,58],"841":[41,54,41,62],"849":[41,66,41,70],"857":[41,35,41,70],"865":[41,5,41,70],"873":[41,5,41,71],"881":[40,3,42,4],"889":[40,3,42,4],"897":[40,3,42,4],"905":[44,16,44,17],"913":[44,16,44,17],"921":[44,28,44,37],"929":[44,28,44,44],"937":[44,28,44,44],"945":[44,8,44,17],"953":[44,46,44,51],"961":[44,54,44,60],"969":[44,71,44,72],"977":[44,62,44,67],"985":[44,62,44,72],"993":[45,5,45,14],"1001":[45,15,45,20],"1009":[45,5,45,21],"1017":[45,30,45,41],"1025":[45,5,45,42],"1027":[45,5,45,29],"1033":[45,5,45,43],"1041":[47,10,47,16],"1049":[47,10,47,16],"1057":[47,3,47,17],"1065":[32,1,48,2],"1073":[32,1,48,2],"1081":[32,1,48,2],"1089":[32,1,48,2],"1097":[32,1,48,2],"1105":[40,3,42,4],"1113":[32,1,48,2],"1121":[52,3,52,7],"1129":[52,18,52,28],"1137":[52,18,52,36],"1145":[52,40,52,42],"1153":[52,3,52,42],"1161":[52,3,52,43],"1169":[53,3,53,7],"1177":[53,19,53,29],"1185":[53,19,53,38],"1193":[53,42,53,44],"1201":[53,3,53,44],"1209":[53,3,53,45],"1217":[54,3,54,7],"1225":[54,19,54,29],"1233":[54,19,54,38],"1241":[54,42,54,44],"1249":[54,3,54,44],"1257":[54,3,54,45],"1265":[56,3,56,7],"1273":[56,3,56,16],"1281":[57,9,57,13],"1289":[57,9,57,22],"1297":[57,26,57,30],"1305":[57,26,57,39],"1313":[57,44,57,52],"1321":[58,17,58,30],"1329":[58,31,58,144],"1337":[58,13,58,145],"1345":[58,13,58,145],"1353":[58,7,58,146],"1361":[56,25,60,4],"1369":[56,25,60,4],"1377":[56,25,60,4],"1385":[56,25,60,4],"1393":[56,3,60,5],"1395":[56,3,56,24],"1401":[56,3,60,6],"1409":[62,3,62,7],"1417":[62,27,62,38],"1425":[62,39,62,43],"1433":[62,45,62,55],"1441":[62,57,62,59],"1449":[62,27,62,60],"1457":[62,3,62,60],"1465":[62,3,62,61],"1473":[63,3,63,7],"1481":[63,27,63,38],"1489":[63,39,63,43],"1497":[63,45,63,55],"1505":[63,57,63,59],"1513":[63,27,63,60],"1521":[63,3,63,60],"1529":[63,3,63,61],"1537":[64,3,64,7],"1545":[64,26,64,36],"1553":[64,37,64,41],"1561":[64,37,64,58],"1569":[64,60,64,64],"1577":[64,60,64,81],"1585":[64,26,64,82],"1593":[64,3,64,82],"1601":[64,3,64,83],"1609":[51,1,65,2],"1617":[51,1,65,2],"1625":[51,1,65,2],"1633":[68,1,68,7],"1641":[68,18,68,22],"1649":[68,1,68,22],"1657":[68,1,68,23],"1665":[71,1,71,7],"1673":[74,11,74,20],"1681":[74,11,74,27],"1689":[76,17,76,23],"1697":[76,17,76,31],"1705":[76,17,76,31],"1713":[76,7,76,32],"1721":[77,15,77,24],"1729":[77,25,77,26],"1737":[77,15,77,27],"1745":[77,15,77,27],"1753":[77,7,77,28],"1761":[75,10,75,11],"1769":[81,17,81,26],"1777":[81,27,81,28],"1785":[81,17,81,29],"1793":[81,17,81,29],"1801":[81,7,81,30],"1809":[82,15,82,24],"1817":[82,25,82,26],"1825":[82,15,82,27],"1833":[82,15,82,27],"1841":[82,7,82,28],"1849":[80,10,80,11],"1857":[86,17,86,30],"1865":[86,31,86,85],"1873":[86,13,86,86],"1881":[86,13,86,86],"1889":[86,7,86,87],"1897":[89,13,89,19],"1905":[89,28,89,35],"1913":[89,13,89,36],"1915":[89,13,89,27],"1921":[89,13,89,36],"1929":[89,3,89,37],"1937":[90,11,90,17],"1945":[90,26,90,31],"1953":[90,11,90,32],"1955":[90,11,90,25],"1961":[90,11,90,32],"1969":[90,3,90,33],"1977":[92,8,92,15],"1985":[92,48,92,54],"1993":[92,66,92,72],"2001":[92,48,92,72],"2009":[92,41,92,73],"2017":[92,22,92,74],"2025":[92,22,92,74],"2033":[92,22,92,74],"2041":[92,22,92,74],"2049":[92,8,92,75],"2051":[92,8,92,21],"2057":[93,15,93,28],"2065":[93,29,93,120],"2073":[93,11,93,121],"2081":[93,11,93,121],"2089":[93,5,93,122],"2097":[96,8,96,13],"2105":[96,44,96,48],"2113":[96,60,96,64],"2121":[96,44,96,64],"2129":[96,37,96,65],"2137":[96,20,96,66],"2145":[96,20,96,66],"2153":[96,20,96,66],"2161":[96,20,96,66],"2169":[96,8,96,67],"2171":[96,8,96,19],"2177":[97,15,97,28],"2185":[97,29,97,113],"2193":[97,11,97,114],"2201":[97,11,97,114],"2209":[97,5,97,115],"2217":[100,14,100,20],"2225":[101,14,101,21],"2233":[102,15,102,20],"2241":[100,21,102,22],"2249":[100,10,102,23],"2257":[100,10,102,23],"2265":[100,3,102,24],"2273":[71,17,104,2],"2281":[71,17,104,2],"2289":[71,17,104,2],"2297":[71,17,104,2],"2305":[71,17,104,2],"2313":[71,17,104,2],"2321":[71,1,104,2],"2329":[71,1,104,3],"2337":[107,1,107,7],"2345":[107,18,107,24],"2353":[107,1,107,24],"2361":[107,1,107,25],"2369":[1,1,107,25],"2377":[1,1,107,25],"2385":[1,1,107,25],"2393":[1,1,107,25],"2401":[9,1,29,2],"2409":[1,1,107,25],"2417":[32,1,48,2],"2425":[1,1,107,25],"2433":[51,1,65,2],"2441":[1,1,107,25],"2449":[12,26,14,4],"2457":[12,26,14,4],"2465":[18,7,20,8],"2473":[17,20,21,6],"2481":[17,20,21,6],"2489":[16,24,24,4],"2497":[16,24,24,4],"2505":[26,24,28,4],"2513":[26,24,28,4],"2521":[9,1,29,2],"2529":[9,1,29,2],"2537":[40,3,42,4],"2545":[40,3,42,4],"2553":[44,3,46,4],"2561":[44,3,46,4],"2569":[44,3,46,4],"2577":[32,1,48,2],"2585":[32,1,48,2],"2593":[57,5,59,6],"2601":[56,25,60,4],"2609":[56,25,60,4],"2617":[51,1,65,2],"2625":[51,1,65,2],"2633":[74,11,74,27],"2641":[75,10,75,11],"2649":[80,10,80,11],"2657":[92,22,92,74],"2665":[92,22,92,74],"2673":[92,3,94,4],"2681":[96,20,96,66],"2689":[96,20,96,66],"2697":[96,3,98,4],"2705":[71,17,104,2],"2713":[71,17,104,2],"2721":[1,1,107,25],"2729":[1,1,107,25],"nBranches":26,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema_jalangi_.js","code":"'use strict';\n\n/*eslint-disable max-len*/\n\nvar common        = require('./common');\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n\n    result.push(currentType);\n  });\n\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {}\n      }, index, length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  this.include  = definition.include  || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\n\nSchema.DEFAULT = null;\n\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) { return type instanceof Type; })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\n\nmodule.exports = Schema;\n"};
jalangiLabel78:
    while (true) {
        try {
            J$.Se(2369, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/schema.js');
            function compileList(schema, name, result) {
                jalangiLabel70:
                    while (true) {
                        try {
                            J$.Fe(657, arguments.callee, this, arguments);
                            arguments = J$.N(665, 'arguments', arguments, 4);
                            schema = J$.N(673, 'schema', schema, 4);
                            name = J$.N(681, 'name', name, 4);
                            result = J$.N(689, 'result', result, 4);
                            J$.N(697, 'exclude', exclude, 0);
                            var exclude = J$.X1(145, J$.W(137, 'exclude', J$.T(129, [], 10, false), exclude, 1));
                            J$.X1(265, J$.M(257, J$.G(161, J$.R(153, 'schema', schema, 0), 'include', 0), 'forEach', 0)(J$.T(249, function (includedSchema) {
                                jalangiLabel66:
                                    while (true) {
                                        try {
                                            J$.Fe(225, arguments.callee, this, arguments);
                                            arguments = J$.N(233, 'arguments', arguments, 4);
                                            includedSchema = J$.N(241, 'includedSchema', includedSchema, 4);
                                            J$.X1(217, result = J$.W(209, 'result', J$.F(201, J$.R(169, 'compileList', compileList, 1), 0)(J$.R(177, 'includedSchema', includedSchema, 0), J$.R(185, 'name', name, 0), J$.R(193, 'result', result, 0)), result, 0));
                                        } catch (J$e) {
                                            J$.Ex(2449, J$e);
                                        } finally {
                                            if (J$.Fr(2457))
                                                continue jalangiLabel66;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 225)));
                            J$.X1(529, J$.M(521, J$.G(289, J$.R(273, 'schema', schema, 0), J$.R(281, 'name', name, 0), 4), 'forEach', 0)(J$.T(513, function (currentType) {
                                jalangiLabel68:
                                    while (true) {
                                        try {
                                            J$.Fe(489, arguments.callee, this, arguments);
                                            arguments = J$.N(497, 'arguments', arguments, 4);
                                            currentType = J$.N(505, 'currentType', currentType, 4);
                                            J$.X1(449, J$.M(441, J$.R(297, 'result', result, 0), 'forEach', 0)(J$.T(433, function (previousType, previousIndex) {
                                                jalangiLabel67:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(401, arguments.callee, this, arguments);
                                                            arguments = J$.N(409, 'arguments', arguments, 4);
                                                            previousType = J$.N(417, 'previousType', previousType, 4);
                                                            previousIndex = J$.N(425, 'previousIndex', previousIndex, 4);
                                                            if (J$.X1(2465, J$.C(16, J$.C(8, J$.B(10, '===', J$.G(313, J$.R(305, 'previousType', previousType, 0), 'tag', 0), J$.G(329, J$.R(321, 'currentType', currentType, 0), 'tag', 0), 0)) ? J$.B(18, '===', J$.G(345, J$.R(337, 'previousType', previousType, 0), 'kind', 0), J$.G(361, J$.R(353, 'currentType', currentType, 0), 'kind', 0), 0) : J$._()))) {
                                                                J$.X1(393, J$.M(385, J$.R(369, 'exclude', exclude, 0), 'push', 0)(J$.R(377, 'previousIndex', previousIndex, 0)));
                                                            }
                                                        } catch (J$e) {
                                                            J$.Ex(2473, J$e);
                                                        } finally {
                                                            if (J$.Fr(2481))
                                                                continue jalangiLabel67;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 401)));
                                            J$.X1(481, J$.M(473, J$.R(457, 'result', result, 0), 'push', 0)(J$.R(465, 'currentType', currentType, 0)));
                                        } catch (J$e) {
                                            J$.Ex(2489, J$e);
                                        } finally {
                                            if (J$.Fr(2497))
                                                continue jalangiLabel68;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 489)));
                            return J$.X1(649, J$.Rt(641, J$.M(633, J$.R(537, 'result', result, 0), 'filter', 0)(J$.T(625, function (type, index) {
                                jalangiLabel69:
                                    while (true) {
                                        try {
                                            J$.Fe(593, arguments.callee, this, arguments);
                                            arguments = J$.N(601, 'arguments', arguments, 4);
                                            type = J$.N(609, 'type', type, 4);
                                            index = J$.N(617, 'index', index, 4);
                                            return J$.X1(585, J$.Rt(577, J$.B(34, '===', J$.M(561, J$.R(545, 'exclude', exclude, 0), 'indexOf', 0)(J$.R(553, 'index', index, 0)), J$.U(26, '-', J$.T(569, 1, 22, false)), 0)));
                                        } catch (J$e) {
                                            J$.Ex(2505, J$e);
                                        } finally {
                                            if (J$.Fr(2513))
                                                continue jalangiLabel69;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 593))));
                        } catch (J$e) {
                            J$.Ex(2521, J$e);
                        } finally {
                            if (J$.Fr(2529))
                                continue jalangiLabel70;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function compileMap() {
                jalangiLabel72:
                    while (true) {
                        try {
                            J$.Fe(1065, arguments.callee, this, arguments);
                            function collectType(type) {
                                jalangiLabel71:
                                    while (true) {
                                        try {
                                            J$.Fe(881, arguments.callee, this, arguments);
                                            arguments = J$.N(889, 'arguments', arguments, 4);
                                            type = J$.N(897, 'type', type, 4);
                                            J$.X1(873, J$.P(865, J$.G(785, J$.R(761, 'result', result, 0), J$.G(777, J$.R(769, 'type', type, 0), 'kind', 0), 4), J$.G(801, J$.R(793, 'type', type, 0), 'tag', 0), J$.P(857, J$.G(825, J$.R(809, 'result', result, 0), J$.T(817, 'fallback', 21, false), 4), J$.G(841, J$.R(833, 'type', type, 0), 'tag', 0), J$.R(849, 'type', type, 0), 2), 2));
                                        } catch (J$e) {
                                            J$.Ex(2537, J$e);
                                        } finally {
                                            if (J$.Fr(2545))
                                                continue jalangiLabel71;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1073, 'arguments', arguments, 4);
                            J$.N(1081, 'result', result, 0);
                            J$.N(1089, 'index', index, 0);
                            J$.N(1097, 'length', length, 0);
                            collectType = J$.N(1113, 'collectType', J$.T(1105, collectType, 12, false, 881), 0);
                            var result = J$.X1(753, J$.W(745, 'result', J$.T(737, {
                                    scalar: J$.T(705, {}, 11, false),
                                    sequence: J$.T(713, {}, 11, false),
                                    mapping: J$.T(721, {}, 11, false),
                                    fallback: J$.T(729, {}, 11, false)
                                }, 11, false), result, 1)), index, length;
                            for (J$.X1(2561, (J$.X1(945, index = J$.W(913, 'index', J$.T(905, 0, 22, false), index, 0)), length = J$.W(937, 'length', J$.G(929, J$.R(921, 'arguments', arguments, 2), 'length', 0), length, 0))); J$.X1(2553, J$.C(24, J$.B(42, '<', J$.R(953, 'index', index, 0), J$.R(961, 'length', length, 0), 0))); J$.X1(2569, index = J$.W(985, 'index', J$.B(50, '+', J$.R(977, 'index', index, 0), J$.T(969, 1, 22, false), 0), index, 0))) {
                                J$.X1(1033, J$.M(1025, J$.G(1009, J$.R(993, 'arguments', arguments, 2), J$.R(1001, 'index', index, 0), 4), 'forEach', 0)(J$.R(1017, 'collectType', collectType, 0)));
                            }
                            return J$.X1(1057, J$.Rt(1049, J$.R(1041, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(2577, J$e);
                        } finally {
                            if (J$.Fr(2585))
                                continue jalangiLabel72;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Schema(definition) {
                jalangiLabel74:
                    while (true) {
                        try {
                            J$.Fe(1609, arguments.callee, this, arguments);
                            arguments = J$.N(1617, 'arguments', arguments, 4);
                            definition = J$.N(1625, 'definition', definition, 4);
                            J$.X1(1161, J$.P(1153, J$.R(1121, 'this', this, 0), 'include', J$.C(32, J$.G(1137, J$.R(1129, 'definition', definition, 0), 'include', 0)) ? J$._() : J$.T(1145, [], 10, false), 0));
                            J$.X1(1209, J$.P(1201, J$.R(1169, 'this', this, 0), 'implicit', J$.C(40, J$.G(1185, J$.R(1177, 'definition', definition, 0), 'implicit', 0)) ? J$._() : J$.T(1193, [], 10, false), 0));
                            J$.X1(1257, J$.P(1249, J$.R(1217, 'this', this, 0), 'explicit', J$.C(48, J$.G(1233, J$.R(1225, 'definition', definition, 0), 'explicit', 0)) ? J$._() : J$.T(1241, [], 10, false), 0));
                            J$.X1(1401, J$.M(1393, J$.G(1273, J$.R(1265, 'this', this, 0), 'implicit', 0), 'forEach', 0)(J$.T(1385, function (type) {
                                jalangiLabel73:
                                    while (true) {
                                        try {
                                            J$.Fe(1361, arguments.callee, this, arguments);
                                            arguments = J$.N(1369, 'arguments', arguments, 4);
                                            type = J$.N(1377, 'type', type, 4);
                                            if (J$.X1(2593, J$.C(64, J$.C(56, J$.G(1289, J$.R(1281, 'type', type, 0), 'loadKind', 0)) ? J$.B(58, '!==', J$.G(1305, J$.R(1297, 'type', type, 0), 'loadKind', 0), J$.T(1313, 'scalar', 21, false), 0) : J$._()))) {
                                                throw J$.X1(1353, J$.Th(1345, J$.F(1337, J$.R(1321, 'YAMLException', YAMLException, 1), 1)(J$.T(1329, 'There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.', 21, false))));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2601, J$e);
                                        } finally {
                                            if (J$.Fr(2609))
                                                continue jalangiLabel73;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1361)));
                            J$.X1(1465, J$.P(1457, J$.R(1409, 'this', this, 0), 'compiledImplicit', J$.F(1449, J$.R(1417, 'compileList', compileList, 1), 0)(J$.R(1425, 'this', this, 0), J$.T(1433, 'implicit', 21, false), J$.T(1441, [], 10, false)), 0));
                            J$.X1(1529, J$.P(1521, J$.R(1473, 'this', this, 0), 'compiledExplicit', J$.F(1513, J$.R(1481, 'compileList', compileList, 1), 0)(J$.R(1489, 'this', this, 0), J$.T(1497, 'explicit', 21, false), J$.T(1505, [], 10, false)), 0));
                            J$.X1(1601, J$.P(1593, J$.R(1537, 'this', this, 0), 'compiledTypeMap', J$.F(1585, J$.R(1545, 'compileMap', compileMap, 1), 0)(J$.G(1561, J$.R(1553, 'this', this, 0), 'compiledImplicit', 0), J$.G(1577, J$.R(1569, 'this', this, 0), 'compiledExplicit', 0)), 0));
                        } catch (J$e) {
                            J$.Ex(2617, J$e);
                        } finally {
                            if (J$.Fr(2625))
                                continue jalangiLabel74;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2377, 'common', common, 0);
            J$.N(2385, 'YAMLException', YAMLException, 0);
            J$.N(2393, 'Type', Type, 0);
            compileList = J$.N(2409, 'compileList', J$.T(2401, compileList, 12, false, 657), 0);
            compileMap = J$.N(2425, 'compileMap', J$.T(2417, compileMap, 12, false, 1065), 0);
            Schema = J$.N(2441, 'Schema', J$.T(2433, Schema, 12, false, 1609), 0);
            var common = J$.X1(41, J$.W(33, 'common', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, './common', 21, false)), common, 3));
            var YAMLException = J$.X1(81, J$.W(73, 'YAMLException', J$.F(65, J$.R(49, 'require', require, 2), 0)(J$.T(57, './exception', 21, false)), YAMLException, 3));
            var Type = J$.X1(121, J$.W(113, 'Type', J$.F(105, J$.R(89, 'require', require, 2), 0)(J$.T(97, './type', 21, false)), Type, 3));
            J$.X1(1657, J$.P(1649, J$.R(1633, 'Schema', Schema, 1), 'DEFAULT', J$.T(1641, null, 25, false), 0));
            J$.X1(2329, J$.P(2321, J$.R(1665, 'Schema', Schema, 1), 'create', J$.T(2313, function createSchema() {
                jalangiLabel77:
                    while (true) {
                        try {
                            J$.Fe(2273, arguments.callee, this, arguments);
                            arguments = J$.N(2281, 'arguments', arguments, 4);
                            createSchema = J$.N(2289, 'createSchema', createSchema, 0);
                            J$.N(2297, 'schemas', schemas, 0);
                            J$.N(2305, 'types', types, 0);
                            var schemas, types;
                            switch (J$.X1(2633, J$.C1(72, J$.G(1681, J$.R(1673, 'arguments', arguments, 2), 'length', 0)))) {
                            case J$.X1(2641, J$.C2(80, J$.T(1761, 1, 22, false))):
                                J$.X1(1713, schemas = J$.W(1705, 'schemas', J$.G(1697, J$.R(1689, 'Schema', Schema, 1), 'DEFAULT', 0), schemas, 0));
                                J$.X1(1753, types = J$.W(1745, 'types', J$.G(1737, J$.R(1721, 'arguments', arguments, 2), J$.T(1729, 0, 22, false), 4), types, 0));
                                break;
                            case J$.X1(2649, J$.C2(88, J$.T(1849, 2, 22, false))):
                                J$.X1(1801, schemas = J$.W(1793, 'schemas', J$.G(1785, J$.R(1769, 'arguments', arguments, 2), J$.T(1777, 0, 22, false), 4), schemas, 0));
                                J$.X1(1841, types = J$.W(1833, 'types', J$.G(1825, J$.R(1809, 'arguments', arguments, 2), J$.T(1817, 1, 22, false), 4), types, 0));
                                break;
                            default:
                                throw J$.X1(1889, J$.Th(1881, J$.F(1873, J$.R(1857, 'YAMLException', YAMLException, 1), 1)(J$.T(1865, 'Wrong number of arguments for Schema.create function', 21, false))));
                            }
                            J$.X1(1929, schemas = J$.W(1921, 'schemas', J$.M(1913, J$.R(1897, 'common', common, 1), 'toArray', 0)(J$.R(1905, 'schemas', schemas, 0)), schemas, 0));
                            J$.X1(1969, types = J$.W(1961, 'types', J$.M(1953, J$.R(1937, 'common', common, 1), 'toArray', 0)(J$.R(1945, 'types', types, 0)), types, 0));
                            if (J$.X1(2673, J$.C(96, J$.U(74, '!', J$.M(2049, J$.R(1977, 'schemas', schemas, 0), 'every', 0)(J$.T(2041, function (schema) {
                                    jalangiLabel75:
                                        while (true) {
                                            try {
                                                J$.Fe(2017, arguments.callee, this, arguments);
                                                arguments = J$.N(2025, 'arguments', arguments, 4);
                                                schema = J$.N(2033, 'schema', schema, 4);
                                                return J$.X1(2009, J$.Rt(2001, J$.B(66, 'instanceof', J$.R(1985, 'schema', schema, 0), J$.R(1993, 'Schema', Schema, 1), 0)));
                                            } catch (J$e) {
                                                J$.Ex(2657, J$e);
                                            } finally {
                                                if (J$.Fr(2665))
                                                    continue jalangiLabel75;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 2017)))))) {
                                throw J$.X1(2089, J$.Th(2081, J$.F(2073, J$.R(2057, 'YAMLException', YAMLException, 1), 1)(J$.T(2065, 'Specified list of super schemas (or a single Schema object) contains a non-Schema object.', 21, false))));
                            }
                            if (J$.X1(2697, J$.C(104, J$.U(90, '!', J$.M(2169, J$.R(2097, 'types', types, 0), 'every', 0)(J$.T(2161, function (type) {
                                    jalangiLabel76:
                                        while (true) {
                                            try {
                                                J$.Fe(2137, arguments.callee, this, arguments);
                                                arguments = J$.N(2145, 'arguments', arguments, 4);
                                                type = J$.N(2153, 'type', type, 4);
                                                return J$.X1(2129, J$.Rt(2121, J$.B(82, 'instanceof', J$.R(2105, 'type', type, 0), J$.R(2113, 'Type', Type, 1), 0)));
                                            } catch (J$e) {
                                                J$.Ex(2681, J$e);
                                            } finally {
                                                if (J$.Fr(2689))
                                                    continue jalangiLabel76;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 2137)))))) {
                                throw J$.X1(2209, J$.Th(2201, J$.F(2193, J$.R(2177, 'YAMLException', YAMLException, 1), 1)(J$.T(2185, 'Specified list of YAML types (or a single Type object) contains a non-Type object.', 21, false))));
                            }
                            return J$.X1(2265, J$.Rt(2257, J$.F(2249, J$.R(2217, 'Schema', Schema, 1), 1)(J$.T(2241, {
                                include: J$.R(2225, 'schemas', schemas, 0),
                                explicit: J$.R(2233, 'types', types, 0)
                            }, 11, false))));
                        } catch (J$e) {
                            J$.Ex(2705, J$e);
                        } finally {
                            if (J$.Fr(2713))
                                continue jalangiLabel77;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2273), 0));
            J$.X1(2361, J$.P(2353, J$.R(2337, 'module', module, 2), 'exports', J$.R(2345, 'Schema', Schema, 1), 0));
        } catch (J$e) {
            J$.Ex(2721, J$e);
        } finally {
            if (J$.Sr(2729)) {
                J$.L();
                continue jalangiLabel78;
            } else {
                J$.L();
                break jalangiLabel78;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
