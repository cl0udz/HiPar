J$.iids = {"8":[20,7,20,20],"9":[8,18,8,25],"10":[20,7,20,20],"16":[29,9,29,18],"17":[8,18,8,25],"18":[25,17,25,26],"24":[32,9,32,17],"25":[8,18,8,25],"26":[25,28,25,33],"32":[25,17,25,26],"33":[9,16,9,24],"40":[52,9,52,29],"41":[9,25,9,33],"42":[25,28,25,33],"48":[52,9,52,29],"49":[9,16,9,34],"50":[29,9,29,18],"56":[51,17,51,26],"57":[9,16,9,41],"58":[32,9,32,17],"64":[72,14,72,29],"65":[9,16,9,41],"66":[34,15,34,16],"72":[69,14,69,29],"73":[9,3,9,42],"74":[38,10,38,20],"80":[65,7,65,21],"81":[10,3,10,16],"82":[38,10,38,26],"88":[79,12,79,27],"89":[12,12,12,19],"90":[51,17,51,26],"96":[77,7,77,17],"97":[12,20,12,29],"98":[51,28,51,33],"104":[93,9,93,29],"105":[12,12,12,30],"112":[93,9,93,29],"113":[12,12,12,30],"114":[51,28,51,33],"120":[92,17,92,26],"121":[12,12,12,30],"122":[52,9,52,16],"128":[117,14,117,24],"129":[16,18,16,89],"130":[52,9,52,22],"136":[112,14,112,24],"137":[16,18,16,89],"138":[53,19,53,29],"144":[107,7,107,17],"145":[16,18,16,89],"146":[53,19,53,36],"152":[128,10,128,51],"153":[20,7,20,11],"154":[54,19,54,28],"161":[20,16,20,20],"162":[54,19,54,35],"169":[20,29,20,34],"170":[55,19,55,30],"177":[20,29,20,34],"178":[58,12,58,21],"185":[20,22,20,35],"186":[58,12,58,54],"193":[22,25,22,26],"194":[63,14,63,21],"201":[22,33,22,37],"202":[63,14,63,25],"209":[22,33,22,44],"210":[65,7,65,21],"217":[22,51,22,61],"218":[66,17,66,27],"225":[22,25,22,26],"226":[66,17,66,34],"233":[22,25,22,26],"234":[67,17,67,26],"241":[22,33,22,44],"242":[67,17,67,33],"249":[22,33,22,44],"250":[68,17,68,28],"257":[22,51,22,61],"258":[69,14,69,29],"265":[22,51,22,61],"266":[70,17,70,27],"273":[25,14,25,15],"274":[70,17,70,34],"281":[25,14,25,15],"282":[71,17,71,26],"289":[25,17,25,20],"290":[71,17,71,33],"297":[25,23,25,26],"298":[72,14,72,29],"306":[73,17,73,26],"313":[25,28,25,31],"314":[73,17,73,33],"321":[25,28,25,33],"322":[92,17,92,26],"330":[92,28,92,33],"337":[26,12,26,15],"345":[26,24,26,28],"346":[92,28,92,33],"353":[26,36,26,39],"354":[93,9,93,16],"361":[26,24,26,40],"362":[93,9,93,22],"363":[26,24,26,35],"369":[26,12,26,41],"370":[94,21,94,31],"371":[26,12,26,23],"377":[26,12,26,41],"378":[94,21,94,38],"385":[26,5,26,42],"386":[94,17,94,39],"393":[29,9,29,13],"394":[95,21,95,31],"401":[29,16,29,18],"402":[95,21,95,38],"409":[32,9,32,13],"410":[95,17,95,39],"417":[32,16,32,17],"418":[96,21,96,30],"425":[32,26,32,31],"426":[96,21,96,37],"433":[32,26,32,31],"434":[96,17,96,38],"441":[32,19,32,32],"442":[97,21,97,32],"449":[34,15,34,16],"450":[97,17,97,33],"457":[34,5,34,11],"458":[100,13,100,22],"465":[34,5,34,16],"466":[100,12,100,37],"473":[34,5,34,17],"474":[105,10,105,17],"481":[38,10,38,16],"482":[107,7,107,17],"489":[38,19,38,20],"490":[108,19,108,29],"497":[38,25,38,26],"498":[108,19,108,36],"505":[38,10,38,26],"506":[108,15,108,37],"513":[38,3,38,27],"514":[109,19,109,29],"521":[19,1,39,2],"522":[109,19,109,36],"529":[19,1,39,2],"530":[109,15,109,37],"537":[19,1,39,2],"538":[110,19,110,28],"545":[19,1,39,2],"546":[110,19,110,35],"553":[19,1,39,2],"554":[110,15,110,36],"561":[19,1,39,2],"562":[111,19,111,30],"569":[19,1,39,2],"570":[111,15,111,31],"577":[19,1,39,2],"578":[112,14,112,24],"585":[43,11,43,15],"586":[113,19,113,29],"593":[43,24,43,34],"594":[113,19,113,36],"601":[43,36,43,38],"602":[113,15,113,37],"609":[43,11,43,39],"610":[114,19,114,28],"611":[43,11,43,23],"617":[44,9,44,14],"618":[114,19,114,35],"625":[44,9,44,21],"626":[114,15,114,36],"633":[45,9,45,19],"634":[115,19,115,28],"641":[46,10,46,11],"642":[115,19,115,35],"649":[47,12,47,14],"650":[115,15,115,36],"657":[43,11,43,39],"658":[116,15,116,22],"665":[43,11,43,39],"666":[117,14,117,24],"673":[44,9,44,21],"674":[118,19,118,28],"681":[44,9,44,21],"682":[118,19,118,35],"689":[45,9,45,19],"690":[118,15,118,36],"697":[45,9,45,19],"698":[119,19,119,28],"705":[46,10,46,11],"706":[119,19,119,35],"713":[46,10,46,11],"714":[119,15,119,36],"721":[47,12,47,14],"722":[120,15,120,22],"729":[47,12,47,14],"730":[121,15,121,22],"737":[51,14,51,15],"745":[51,14,51,15],"753":[51,17,51,20],"761":[51,23,51,26],"777":[51,28,51,31],"785":[51,28,51,33],"801":[52,9,52,12],"809":[52,15,52,16],"817":[52,21,52,22],"825":[52,26,52,29],"833":[53,7,53,13],"841":[53,19,53,23],"849":[53,27,53,29],"857":[53,32,53,36],"865":[53,7,53,37],"867":[53,7,53,18],"873":[53,7,53,38],"881":[54,7,54,13],"889":[54,19,54,23],"897":[54,27,54,28],"905":[54,31,54,35],"913":[54,7,54,36],"915":[54,7,54,18],"921":[54,7,54,37],"929":[55,7,55,13],"937":[55,19,55,23],"945":[55,26,55,30],"953":[55,7,55,31],"955":[55,7,55,18],"961":[55,7,55,32],"969":[58,12,58,16],"977":[58,20,58,21],"985":[58,24,58,27],"993":[58,36,58,41],"1001":[58,49,58,52],"1009":[58,36,58,53],"1011":[58,36,58,48],"1017":[58,24,58,54],"1019":[58,24,58,35],"1025":[58,12,58,54],"1033":[58,5,58,55],"1041":[63,14,63,17],"1049":[63,20,63,21],"1057":[63,24,63,25],"1065":[63,14,63,25],"1073":[63,3,63,26],"1081":[65,7,65,15],"1089":[65,20,65,21],"1097":[66,5,66,11],"1105":[66,17,66,21],"1113":[66,25,66,27],"1121":[66,30,66,34],"1129":[66,5,66,35],"1131":[66,5,66,16],"1137":[66,5,66,36],"1145":[67,5,67,11],"1153":[67,17,67,21],"1161":[67,25,67,26],"1169":[67,29,67,33],"1177":[67,5,67,34],"1179":[67,5,67,16],"1185":[67,5,67,35],"1193":[68,5,68,11],"1201":[68,17,68,21],"1209":[68,24,68,28],"1217":[68,5,68,29],"1219":[68,5,68,16],"1225":[68,5,68,30],"1233":[69,14,69,22],"1241":[69,27,69,29],"1249":[70,5,70,11],"1257":[70,17,70,21],"1265":[70,25,70,27],"1273":[70,30,70,34],"1281":[70,5,70,35],"1283":[70,5,70,16],"1289":[70,5,70,36],"1297":[71,5,71,11],"1305":[71,17,71,21],"1313":[71,25,71,26],"1321":[71,29,71,33],"1329":[71,5,71,34],"1331":[71,5,71,16],"1337":[71,5,71,35],"1345":[72,14,72,22],"1353":[72,27,72,29],"1361":[73,5,73,11],"1369":[73,17,73,21],"1377":[73,25,73,26],"1385":[73,29,73,33],"1393":[73,5,73,34],"1395":[73,5,73,16],"1401":[73,5,73,35],"1409":[77,7,77,17],"1417":[79,12,79,22],"1425":[79,12,79,27],"1433":[79,30,79,40],"1441":[79,46,79,52],"1449":[79,30,79,53],"1451":[79,30,79,45],"1457":[79,60,79,70],"1465":[79,71,79,77],"1473":[79,56,79,78],"1481":[79,12,79,78],"1489":[79,5,79,79],"1497":[82,10,82,16],"1505":[82,10,82,16],"1513":[82,3,82,17],"1521":[41,1,83,2],"1529":[41,1,83,2],"1537":[41,1,83,2],"1545":[41,1,83,2],"1553":[41,1,83,2],"1561":[41,1,83,2],"1569":[41,1,83,2],"1577":[41,1,83,2],"1585":[41,1,83,2],"1593":[41,1,83,2],"1601":[86,16,86,18],"1609":[86,26,86,27],"1617":[87,9,87,15],"1625":[87,9,87,22],"1633":[88,9,88,19],"1641":[86,16,86,18],"1649":[86,16,86,18],"1657":[86,26,86,27],"1665":[86,26,86,27],"1673":[87,9,87,22],"1681":[87,9,87,22],"1689":[88,9,88,19],"1697":[88,9,88,19],"1705":[92,14,92,15],"1713":[92,14,92,15],"1721":[92,17,92,20],"1729":[92,23,92,26],"1745":[92,28,92,31],"1753":[92,28,92,33],"1769":[93,9,93,12],"1777":[93,15,93,16],"1785":[93,21,93,22],"1793":[93,26,93,29],"1801":[94,17,94,20],"1809":[94,21,94,25],"1817":[94,29,94,31],"1825":[94,34,94,38],"1833":[94,17,94,39],"1841":[94,7,94,13],"1849":[94,7,94,39],"1857":[94,7,94,40],"1865":[95,17,95,20],"1873":[95,21,95,25],"1881":[95,29,95,31],"1889":[95,34,95,38],"1897":[95,17,95,39],"1905":[95,7,95,13],"1913":[95,7,95,39],"1921":[95,7,95,40],"1929":[96,17,96,20],"1937":[96,21,96,25],"1945":[96,29,96,30],"1953":[96,33,96,37],"1961":[96,17,96,38],"1969":[96,7,96,13],"1977":[96,7,96,38],"1985":[96,7,96,39],"1993":[97,17,97,20],"2001":[97,21,97,25],"2009":[97,28,97,32],"2017":[97,17,97,33],"2025":[97,7,97,13],"2033":[97,7,97,33],"2041":[97,7,97,34],"2049":[100,13,100,17],"2057":[100,21,100,22],"2065":[100,26,100,32],"2073":[100,33,100,36],"2081":[100,26,100,37],"2089":[100,12,100,37],"2097":[100,5,100,38],"2105":[105,10,105,13],"2113":[105,16,105,17],"2121":[105,10,105,17],"2129":[105,3,105,18],"2137":[107,7,107,11],"2145":[107,16,107,17],"2153":[108,15,108,18],"2161":[108,19,108,23],"2169":[108,27,108,29],"2177":[108,32,108,36],"2185":[108,15,108,37],"2193":[108,5,108,11],"2201":[108,5,108,37],"2209":[108,5,108,38],"2217":[109,15,109,18],"2225":[109,19,109,23],"2233":[109,27,109,29],"2241":[109,32,109,36],"2249":[109,15,109,37],"2257":[109,5,109,11],"2265":[109,5,109,37],"2273":[109,5,109,38],"2281":[110,15,110,18],"2289":[110,19,110,23],"2297":[110,27,110,28],"2305":[110,31,110,35],"2313":[110,15,110,36],"2321":[110,5,110,11],"2329":[110,5,110,36],"2337":[110,5,110,37],"2345":[111,15,111,18],"2353":[111,19,111,23],"2361":[111,26,111,30],"2369":[111,15,111,31],"2377":[111,5,111,11],"2385":[111,5,111,31],"2393":[111,5,111,32],"2401":[112,14,112,18],"2409":[112,23,112,24],"2417":[113,15,113,18],"2425":[113,19,113,23],"2433":[113,27,113,29],"2441":[113,32,113,36],"2449":[113,15,113,37],"2457":[113,5,113,11],"2465":[113,5,113,37],"2473":[113,5,113,38],"2481":[114,15,114,18],"2489":[114,19,114,23],"2497":[114,27,114,28],"2505":[114,31,114,35],"2513":[114,15,114,36],"2521":[114,5,114,11],"2529":[114,5,114,36],"2537":[114,5,114,37],"2545":[115,15,115,18],"2553":[115,19,115,23],"2561":[115,27,115,28],"2569":[115,31,115,35],"2577":[115,15,115,36],"2585":[115,5,115,11],"2593":[115,5,115,36],"2601":[115,5,115,37],"2609":[116,15,116,18],"2617":[116,19,116,21],"2625":[116,15,116,22],"2633":[116,5,116,11],"2641":[116,5,116,22],"2649":[116,5,116,23],"2657":[117,14,117,18],"2665":[117,23,117,24],"2673":[118,15,118,18],"2681":[118,19,118,23],"2689":[118,27,118,28],"2697":[118,31,118,35],"2705":[118,15,118,36],"2713":[118,5,118,11],"2721":[118,5,118,36],"2729":[118,5,118,37],"2737":[119,15,119,18],"2745":[119,19,119,23],"2753":[119,27,119,28],"2761":[119,31,119,35],"2769":[119,15,119,36],"2777":[119,5,119,11],"2785":[119,5,119,36],"2793":[119,5,119,37],"2801":[120,15,120,18],"2809":[120,19,120,21],"2817":[120,15,120,22],"2825":[120,5,120,11],"2833":[120,5,120,22],"2841":[120,5,120,23],"2849":[121,15,121,18],"2857":[121,19,121,21],"2865":[121,15,121,22],"2873":[121,5,121,11],"2881":[121,5,121,22],"2889":[121,5,121,23],"2897":[124,10,124,16],"2905":[124,10,124,16],"2913":[124,3,124,17],"2921":[85,1,125,2],"2929":[85,1,125,2],"2937":[85,1,125,2],"2945":[85,1,125,2],"2953":[85,1,125,2],"2961":[85,1,125,2],"2969":[85,1,125,2],"2977":[85,1,125,2],"2985":[85,1,125,2],"2993":[128,10,128,20],"3001":[128,24,128,34],"3009":[128,44,128,50],"3017":[128,24,128,51],"3019":[128,24,128,43],"3025":[128,10,128,51],"3033":[128,3,128,52],"3041":[127,1,129,2],"3049":[127,1,129,2],"3057":[127,1,129,2],"3065":[131,1,131,7],"3073":[131,22,131,26],"3081":[131,27,131,53],"3089":[132,9,132,17],"3097":[133,12,133,29],"3105":[134,14,134,33],"3113":[135,14,135,22],"3121":[136,14,136,33],"3129":[131,55,136,35],"3137":[131,18,136,36],"3145":[131,1,136,36],"3153":[131,1,136,37],"3161":[1,1,136,37],"3169":[1,1,136,37],"3177":[1,1,136,37],"3185":[1,1,136,37],"3193":[1,1,136,37],"3201":[19,1,39,2],"3209":[1,1,136,37],"3217":[41,1,83,2],"3225":[1,1,136,37],"3233":[85,1,125,2],"3241":[1,1,136,37],"3249":[127,1,129,2],"3257":[1,1,136,37],"3265":[20,3,20,35],"3273":[29,5,29,29],"3281":[32,5,32,32],"3289":[25,3,35,4],"3297":[25,3,35,4],"3305":[25,3,35,4],"3313":[19,1,39,2],"3321":[19,1,39,2],"3329":[52,5,56,6],"3337":[51,3,59,4],"3345":[51,3,59,4],"3353":[51,3,59,4],"3361":[72,10,74,4],"3369":[69,10,74,4],"3377":[65,3,74,4],"3385":[79,12,79,78],"3393":[77,3,80,4],"3401":[41,1,83,2],"3409":[41,1,83,2],"3417":[93,5,98,6],"3425":[92,3,101,4],"3433":[92,3,101,4],"3441":[92,3,101,4],"3449":[117,10,122,4],"3457":[112,10,122,4],"3465":[107,3,122,4],"3473":[85,1,125,2],"3481":[85,1,125,2],"3489":[127,1,129,2],"3497":[127,1,129,2],"3505":[1,1,136,37],"3513":[1,1,136,37],"nBranches":38,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/binary.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/binary_jalangi_.js","code":"'use strict';\n\n/*eslint-disable no-bitwise*/\n\nvar NodeBuffer;\n\ntry {\n  // A trick for browserified version, to not include `Buffer` shim\n  var _require = require;\n  NodeBuffer = _require('buffer').Buffer;\n} catch (__) {}\n\nvar Type       = require('../type');\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  // Wrap into Buffer for NodeJS and leave Array for browser\n  if (NodeBuffer) {\n    // Support node 6.+ Buffer API when available\n    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n  }\n\n  return result;\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n"};
jalangiLabel141:
    while (true) {
        try {
            J$.Se(3161, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/binary_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/binary.js');
            function resolveYamlBinary(data) {
                jalangiLabel137:
                    while (true) {
                        try {
                            J$.Fe(521, arguments.callee, this, arguments);
                            arguments = J$.N(529, 'arguments', arguments, 4);
                            data = J$.N(537, 'data', data, 4);
                            J$.N(545, 'code', code, 0);
                            J$.N(553, 'idx', idx, 0);
                            J$.N(561, 'bitlen', bitlen, 0);
                            J$.N(569, 'max', max, 0);
                            J$.N(577, 'map', map, 0);
                            if (J$.X1(3265, J$.C(8, J$.B(10, '===', J$.R(153, 'data', data, 0), J$.T(161, null, 25, false), 0))))
                                return J$.X1(185, J$.Rt(177, J$.T(169, false, 23, false)));
                            var code, idx, bitlen = J$.X1(233, J$.W(225, 'bitlen', J$.T(193, 0, 22, false), bitlen, 1)), max = J$.X1(249, J$.W(241, 'max', J$.G(209, J$.R(201, 'data', data, 0), 'length', 0), max, 1)), map = J$.X1(265, J$.W(257, 'map', J$.R(217, 'BASE64_MAP', BASE64_MAP, 1), map, 1));
                            for (J$.X1(3297, idx = J$.W(281, 'idx', J$.T(273, 0, 22, false), idx, 0)); J$.X1(3289, J$.C(32, J$.B(18, '<', J$.R(289, 'idx', idx, 0), J$.R(297, 'max', max, 0), 0))); J$.X1(3305, J$.B(42, '-', idx = J$.W(321, 'idx', J$.B(34, '+', J$.U(26, '+', J$.R(313, 'idx', idx, 0)), J$.T(305, 1, 22, false), 0), idx, 0), J$.T(329, 1, 22, false), 0))) {
                                J$.X1(385, code = J$.W(377, 'code', J$.M(369, J$.R(337, 'map', map, 0), 'indexOf', 0)(J$.M(361, J$.R(345, 'data', data, 0), 'charAt', 0)(J$.R(353, 'idx', idx, 0))), code, 0));
                                if (J$.X1(3273, J$.C(16, J$.B(50, '>', J$.R(393, 'code', code, 0), J$.T(401, 64, 22, false), 0))))
                                    continue;
                                if (J$.X1(3281, J$.C(24, J$.B(58, '<', J$.R(409, 'code', code, 0), J$.T(417, 0, 22, false), 0))))
                                    return J$.X1(441, J$.Rt(433, J$.T(425, false, 23, false)));
                                J$.X1(473, bitlen = J$.W(465, 'bitlen', J$.B(66, '+', J$.R(457, 'bitlen', bitlen, 0), J$.T(449, 6, 22, false), 0), bitlen, 0));
                            }
                            return J$.X1(513, J$.Rt(505, J$.B(82, '===', J$.B(74, '%', J$.R(481, 'bitlen', bitlen, 0), J$.T(489, 8, 22, false), 0), J$.T(497, 0, 22, false), 0)));
                        } catch (J$e) {
                            J$.Ex(3313, J$e);
                        } finally {
                            if (J$.Fr(3321))
                                continue jalangiLabel137;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructYamlBinary(data) {
                jalangiLabel138:
                    while (true) {
                        try {
                            J$.Fe(1521, arguments.callee, this, arguments);
                            arguments = J$.N(1529, 'arguments', arguments, 4);
                            data = J$.N(1537, 'data', data, 4);
                            J$.N(1545, 'idx', idx, 0);
                            J$.N(1553, 'tailbits', tailbits, 0);
                            J$.N(1561, 'input', input, 0);
                            J$.N(1569, 'max', max, 0);
                            J$.N(1577, 'map', map, 0);
                            J$.N(1585, 'bits', bits, 0);
                            J$.N(1593, 'result', result, 0);
                            var idx, tailbits, input = J$.X1(665, J$.W(657, 'input', J$.M(609, J$.R(585, 'data', data, 0), 'replace', 0)(J$.T(593, /[\r\n=]/g, 14, false), J$.T(601, '', 21, false)), input, 1)), max = J$.X1(681, J$.W(673, 'max', J$.G(625, J$.R(617, 'input', input, 0), 'length', 0), max, 1)), map = J$.X1(697, J$.W(689, 'map', J$.R(633, 'BASE64_MAP', BASE64_MAP, 1), map, 1)), bits = J$.X1(713, J$.W(705, 'bits', J$.T(641, 0, 22, false), bits, 1)), result = J$.X1(729, J$.W(721, 'result', J$.T(649, [], 10, false), result, 1));
                            for (J$.X1(3345, idx = J$.W(745, 'idx', J$.T(737, 0, 22, false), idx, 0)); J$.X1(3337, J$.C(56, J$.B(90, '<', J$.R(753, 'idx', idx, 0), J$.R(761, 'max', max, 0), 0))); J$.X1(3353, J$.B(114, '-', idx = J$.W(785, 'idx', J$.B(106, '+', J$.U(98, '+', J$.R(777, 'idx', idx, 0)), J$.T(769, 1, 22, false), 0), idx, 0), J$.T(793, 1, 22, false), 0))) {
                                if (J$.X1(3329, J$.C(48, J$.C(40, J$.B(130, '===', J$.B(122, '%', J$.R(801, 'idx', idx, 0), J$.T(809, 4, 22, false), 0), J$.T(817, 0, 22, false), 0)) ? J$.R(825, 'idx', idx, 0) : J$._()))) {
                                    J$.X1(873, J$.M(865, J$.R(833, 'result', result, 0), 'push', 0)(J$.B(146, '&', J$.B(138, '>>', J$.R(841, 'bits', bits, 0), J$.T(849, 16, 22, false), 0), J$.T(857, 0xFF, 22, false), 0)));
                                    J$.X1(921, J$.M(913, J$.R(881, 'result', result, 0), 'push', 0)(J$.B(162, '&', J$.B(154, '>>', J$.R(889, 'bits', bits, 0), J$.T(897, 8, 22, false), 0), J$.T(905, 0xFF, 22, false), 0)));
                                    J$.X1(961, J$.M(953, J$.R(929, 'result', result, 0), 'push', 0)(J$.B(170, '&', J$.R(937, 'bits', bits, 0), J$.T(945, 0xFF, 22, false), 0)));
                                }
                                J$.X1(1033, bits = J$.W(1025, 'bits', J$.B(186, '|', J$.B(178, '<<', J$.R(969, 'bits', bits, 0), J$.T(977, 6, 22, false), 0), J$.M(1017, J$.R(985, 'map', map, 0), 'indexOf', 0)(J$.M(1009, J$.R(993, 'input', input, 0), 'charAt', 0)(J$.R(1001, 'idx', idx, 0))), 0), bits, 0));
                            }
                            J$.X1(1073, tailbits = J$.W(1065, 'tailbits', J$.B(202, '*', J$.B(194, '%', J$.R(1041, 'max', max, 0), J$.T(1049, 4, 22, false), 0), J$.T(1057, 6, 22, false), 0), tailbits, 0));
                            if (J$.X1(3377, J$.C(80, J$.B(210, '===', J$.R(1081, 'tailbits', tailbits, 0), J$.T(1089, 0, 22, false), 0)))) {
                                J$.X1(1137, J$.M(1129, J$.R(1097, 'result', result, 0), 'push', 0)(J$.B(226, '&', J$.B(218, '>>', J$.R(1105, 'bits', bits, 0), J$.T(1113, 16, 22, false), 0), J$.T(1121, 0xFF, 22, false), 0)));
                                J$.X1(1185, J$.M(1177, J$.R(1145, 'result', result, 0), 'push', 0)(J$.B(242, '&', J$.B(234, '>>', J$.R(1153, 'bits', bits, 0), J$.T(1161, 8, 22, false), 0), J$.T(1169, 0xFF, 22, false), 0)));
                                J$.X1(1225, J$.M(1217, J$.R(1193, 'result', result, 0), 'push', 0)(J$.B(250, '&', J$.R(1201, 'bits', bits, 0), J$.T(1209, 0xFF, 22, false), 0)));
                            } else if (J$.X1(3369, J$.C(72, J$.B(258, '===', J$.R(1233, 'tailbits', tailbits, 0), J$.T(1241, 18, 22, false), 0)))) {
                                J$.X1(1289, J$.M(1281, J$.R(1249, 'result', result, 0), 'push', 0)(J$.B(274, '&', J$.B(266, '>>', J$.R(1257, 'bits', bits, 0), J$.T(1265, 10, 22, false), 0), J$.T(1273, 0xFF, 22, false), 0)));
                                J$.X1(1337, J$.M(1329, J$.R(1297, 'result', result, 0), 'push', 0)(J$.B(290, '&', J$.B(282, '>>', J$.R(1305, 'bits', bits, 0), J$.T(1313, 2, 22, false), 0), J$.T(1321, 0xFF, 22, false), 0)));
                            } else if (J$.X1(3361, J$.C(64, J$.B(298, '===', J$.R(1345, 'tailbits', tailbits, 0), J$.T(1353, 12, 22, false), 0)))) {
                                J$.X1(1401, J$.M(1393, J$.R(1361, 'result', result, 0), 'push', 0)(J$.B(314, '&', J$.B(306, '>>', J$.R(1369, 'bits', bits, 0), J$.T(1377, 4, 22, false), 0), J$.T(1385, 0xFF, 22, false), 0)));
                            }
                            if (J$.X1(3393, J$.C(96, J$.R(1409, 'NodeBuffer', NodeBuffer, 1)))) {
                                return J$.X1(1489, J$.Rt(1481, J$.X1(3385, J$.C(88, J$.G(1425, J$.R(1417, 'NodeBuffer', NodeBuffer, 1), 'from', 0))) ? J$.M(1449, J$.R(1433, 'NodeBuffer', NodeBuffer, 1), 'from', 0)(J$.R(1441, 'result', result, 0)) : J$.F(1473, J$.R(1457, 'NodeBuffer', NodeBuffer, 1), 1)(J$.R(1465, 'result', result, 0))));
                            }
                            return J$.X1(1513, J$.Rt(1505, J$.R(1497, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(3401, J$e);
                        } finally {
                            if (J$.Fr(3409))
                                continue jalangiLabel138;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function representYamlBinary(object) {
                jalangiLabel139:
                    while (true) {
                        try {
                            J$.Fe(2921, arguments.callee, this, arguments);
                            arguments = J$.N(2929, 'arguments', arguments, 4);
                            object = J$.N(2937, 'object', object, 4);
                            J$.N(2945, 'result', result, 0);
                            J$.N(2953, 'bits', bits, 0);
                            J$.N(2961, 'idx', idx, 0);
                            J$.N(2969, 'tail', tail, 0);
                            J$.N(2977, 'max', max, 0);
                            J$.N(2985, 'map', map, 0);
                            var result = J$.X1(1649, J$.W(1641, 'result', J$.T(1601, '', 21, false), result, 1)), bits = J$.X1(1665, J$.W(1657, 'bits', J$.T(1609, 0, 22, false), bits, 1)), idx, tail, max = J$.X1(1681, J$.W(1673, 'max', J$.G(1625, J$.R(1617, 'object', object, 0), 'length', 0), max, 1)), map = J$.X1(1697, J$.W(1689, 'map', J$.R(1633, 'BASE64_MAP', BASE64_MAP, 1), map, 1));
                            for (J$.X1(3433, idx = J$.W(1713, 'idx', J$.T(1705, 0, 22, false), idx, 0)); J$.X1(3425, J$.C(120, J$.B(322, '<', J$.R(1721, 'idx', idx, 0), J$.R(1729, 'max', max, 0), 0))); J$.X1(3441, J$.B(346, '-', idx = J$.W(1753, 'idx', J$.B(338, '+', J$.U(330, '+', J$.R(1745, 'idx', idx, 0)), J$.T(1737, 1, 22, false), 0), idx, 0), J$.T(1761, 1, 22, false), 0))) {
                                if (J$.X1(3417, J$.C(112, J$.C(104, J$.B(362, '===', J$.B(354, '%', J$.R(1769, 'idx', idx, 0), J$.T(1777, 3, 22, false), 0), J$.T(1785, 0, 22, false), 0)) ? J$.R(1793, 'idx', idx, 0) : J$._()))) {
                                    J$.X1(1857, result = J$.W(1849, 'result', J$.B(386, '+', J$.R(1841, 'result', result, 0), J$.G(1833, J$.R(1801, 'map', map, 0), J$.B(378, '&', J$.B(370, '>>', J$.R(1809, 'bits', bits, 0), J$.T(1817, 18, 22, false), 0), J$.T(1825, 0x3F, 22, false), 0), 4), 0), result, 0));
                                    J$.X1(1921, result = J$.W(1913, 'result', J$.B(410, '+', J$.R(1905, 'result', result, 0), J$.G(1897, J$.R(1865, 'map', map, 0), J$.B(402, '&', J$.B(394, '>>', J$.R(1873, 'bits', bits, 0), J$.T(1881, 12, 22, false), 0), J$.T(1889, 0x3F, 22, false), 0), 4), 0), result, 0));
                                    J$.X1(1985, result = J$.W(1977, 'result', J$.B(434, '+', J$.R(1969, 'result', result, 0), J$.G(1961, J$.R(1929, 'map', map, 0), J$.B(426, '&', J$.B(418, '>>', J$.R(1937, 'bits', bits, 0), J$.T(1945, 6, 22, false), 0), J$.T(1953, 0x3F, 22, false), 0), 4), 0), result, 0));
                                    J$.X1(2041, result = J$.W(2033, 'result', J$.B(450, '+', J$.R(2025, 'result', result, 0), J$.G(2017, J$.R(1993, 'map', map, 0), J$.B(442, '&', J$.R(2001, 'bits', bits, 0), J$.T(2009, 0x3F, 22, false), 0), 4), 0), result, 0));
                                }
                                J$.X1(2097, bits = J$.W(2089, 'bits', J$.B(466, '+', J$.B(458, '<<', J$.R(2049, 'bits', bits, 0), J$.T(2057, 8, 22, false), 0), J$.G(2081, J$.R(2065, 'object', object, 0), J$.R(2073, 'idx', idx, 0), 4), 0), bits, 0));
                            }
                            J$.X1(2129, tail = J$.W(2121, 'tail', J$.B(474, '%', J$.R(2105, 'max', max, 0), J$.T(2113, 3, 22, false), 0), tail, 0));
                            if (J$.X1(3465, J$.C(144, J$.B(482, '===', J$.R(2137, 'tail', tail, 0), J$.T(2145, 0, 22, false), 0)))) {
                                J$.X1(2209, result = J$.W(2201, 'result', J$.B(506, '+', J$.R(2193, 'result', result, 0), J$.G(2185, J$.R(2153, 'map', map, 0), J$.B(498, '&', J$.B(490, '>>', J$.R(2161, 'bits', bits, 0), J$.T(2169, 18, 22, false), 0), J$.T(2177, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2273, result = J$.W(2265, 'result', J$.B(530, '+', J$.R(2257, 'result', result, 0), J$.G(2249, J$.R(2217, 'map', map, 0), J$.B(522, '&', J$.B(514, '>>', J$.R(2225, 'bits', bits, 0), J$.T(2233, 12, 22, false), 0), J$.T(2241, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2337, result = J$.W(2329, 'result', J$.B(554, '+', J$.R(2321, 'result', result, 0), J$.G(2313, J$.R(2281, 'map', map, 0), J$.B(546, '&', J$.B(538, '>>', J$.R(2289, 'bits', bits, 0), J$.T(2297, 6, 22, false), 0), J$.T(2305, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2393, result = J$.W(2385, 'result', J$.B(570, '+', J$.R(2377, 'result', result, 0), J$.G(2369, J$.R(2345, 'map', map, 0), J$.B(562, '&', J$.R(2353, 'bits', bits, 0), J$.T(2361, 0x3F, 22, false), 0), 4), 0), result, 0));
                            } else if (J$.X1(3457, J$.C(136, J$.B(578, '===', J$.R(2401, 'tail', tail, 0), J$.T(2409, 2, 22, false), 0)))) {
                                J$.X1(2473, result = J$.W(2465, 'result', J$.B(602, '+', J$.R(2457, 'result', result, 0), J$.G(2449, J$.R(2417, 'map', map, 0), J$.B(594, '&', J$.B(586, '>>', J$.R(2425, 'bits', bits, 0), J$.T(2433, 10, 22, false), 0), J$.T(2441, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2537, result = J$.W(2529, 'result', J$.B(626, '+', J$.R(2521, 'result', result, 0), J$.G(2513, J$.R(2481, 'map', map, 0), J$.B(618, '&', J$.B(610, '>>', J$.R(2489, 'bits', bits, 0), J$.T(2497, 4, 22, false), 0), J$.T(2505, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2601, result = J$.W(2593, 'result', J$.B(650, '+', J$.R(2585, 'result', result, 0), J$.G(2577, J$.R(2545, 'map', map, 0), J$.B(642, '&', J$.B(634, '<<', J$.R(2553, 'bits', bits, 0), J$.T(2561, 2, 22, false), 0), J$.T(2569, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2649, result = J$.W(2641, 'result', J$.B(658, '+', J$.R(2633, 'result', result, 0), J$.G(2625, J$.R(2609, 'map', map, 0), J$.T(2617, 64, 22, false), 4), 0), result, 0));
                            } else if (J$.X1(3449, J$.C(128, J$.B(666, '===', J$.R(2657, 'tail', tail, 0), J$.T(2665, 1, 22, false), 0)))) {
                                J$.X1(2729, result = J$.W(2721, 'result', J$.B(690, '+', J$.R(2713, 'result', result, 0), J$.G(2705, J$.R(2673, 'map', map, 0), J$.B(682, '&', J$.B(674, '>>', J$.R(2681, 'bits', bits, 0), J$.T(2689, 2, 22, false), 0), J$.T(2697, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2793, result = J$.W(2785, 'result', J$.B(714, '+', J$.R(2777, 'result', result, 0), J$.G(2769, J$.R(2737, 'map', map, 0), J$.B(706, '&', J$.B(698, '<<', J$.R(2745, 'bits', bits, 0), J$.T(2753, 4, 22, false), 0), J$.T(2761, 0x3F, 22, false), 0), 4), 0), result, 0));
                                J$.X1(2841, result = J$.W(2833, 'result', J$.B(722, '+', J$.R(2825, 'result', result, 0), J$.G(2817, J$.R(2801, 'map', map, 0), J$.T(2809, 64, 22, false), 4), 0), result, 0));
                                J$.X1(2889, result = J$.W(2881, 'result', J$.B(730, '+', J$.R(2873, 'result', result, 0), J$.G(2865, J$.R(2849, 'map', map, 0), J$.T(2857, 64, 22, false), 4), 0), result, 0));
                            }
                            return J$.X1(2913, J$.Rt(2905, J$.R(2897, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(3473, J$e);
                        } finally {
                            if (J$.Fr(3481))
                                continue jalangiLabel139;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isBinary(object) {
                jalangiLabel140:
                    while (true) {
                        try {
                            J$.Fe(3041, arguments.callee, this, arguments);
                            arguments = J$.N(3049, 'arguments', arguments, 4);
                            object = J$.N(3057, 'object', object, 4);
                            return J$.X1(3033, J$.Rt(3025, J$.C(152, J$.R(2993, 'NodeBuffer', NodeBuffer, 1)) ? J$.M(3017, J$.R(3001, 'NodeBuffer', NodeBuffer, 1), 'isBuffer', 0)(J$.R(3009, 'object', object, 0)) : J$._()));
                        } catch (J$e) {
                            J$.Ex(3489, J$e);
                        } finally {
                            if (J$.Fr(3497))
                                continue jalangiLabel140;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3169, 'NodeBuffer', NodeBuffer, 0);
            J$.N(3177, '_require', _require, 0);
            J$.N(3185, 'Type', Type, 0);
            J$.N(3193, 'BASE64_MAP', BASE64_MAP, 0);
            resolveYamlBinary = J$.N(3209, 'resolveYamlBinary', J$.T(3201, resolveYamlBinary, 12, false, 521), 0);
            constructYamlBinary = J$.N(3225, 'constructYamlBinary', J$.T(3217, constructYamlBinary, 12, false, 1521), 0);
            representYamlBinary = J$.N(3241, 'representYamlBinary', J$.T(3233, representYamlBinary, 12, false, 2921), 0);
            isBinary = J$.N(3257, 'isBinary', J$.T(3249, isBinary, 12, false, 3041), 0);
            var NodeBuffer;
            try {
                var _require = J$.X1(25, J$.W(17, '_require', J$.R(9, 'require', require, 2), _require, 3));
                J$.X1(73, NodeBuffer = J$.W(65, 'NodeBuffer', J$.G(57, J$.F(49, J$.R(33, '_require', _require, 1), 0)(J$.T(41, 'buffer', 21, false)), 'Buffer', 0), NodeBuffer, 2));
            } catch (__) {
                __ = J$.N(81, '__', __, 1);
            }
            var Type = J$.X1(121, J$.W(113, 'Type', J$.F(105, J$.R(89, 'require', require, 2), 0)(J$.T(97, '../type', 21, false)), Type, 3));
            var BASE64_MAP = J$.X1(145, J$.W(137, 'BASE64_MAP', J$.T(129, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r', 21, false), BASE64_MAP, 3));
            J$.X1(3153, J$.P(3145, J$.R(3065, 'module', module, 2), 'exports', J$.F(3137, J$.R(3073, 'Type', Type, 1), 1)(J$.T(3081, 'tag:yaml.org,2002:binary', 21, false), J$.T(3129, {
                kind: J$.T(3089, 'scalar', 21, false),
                resolve: J$.R(3097, 'resolveYamlBinary', resolveYamlBinary, 1),
                construct: J$.R(3105, 'constructYamlBinary', constructYamlBinary, 1),
                predicate: J$.R(3113, 'isBinary', isBinary, 1),
                represent: J$.R(3121, 'representYamlBinary', representYamlBinary, 1)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(3505, J$e);
        } finally {
            if (J$.Sr(3513)) {
                J$.L();
                continue jalangiLabel141;
            } else {
                J$.L();
                break jalangiLabel141;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
