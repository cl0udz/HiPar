J$.iids = {"8":[23,7,23,20],"9":[1,1,1,13],"10":[6,3,7,18],"16":[24,7,24,43],"17":[1,1,1,14],"18":[6,3,8,19],"24":[25,7,25,48],"25":[3,12,3,19],"26":[11,3,12,19],"32":[34,7,34,21],"33":[3,20,3,29],"34":[11,3,13,19],"40":[36,7,36,21],"41":[3,12,3,30],"42":[11,3,14,21],"48":[44,7,44,16],"49":[3,12,3,30],"50":[11,3,15,18],"56":[56,12,56,31],"57":[3,12,3,30],"58":[11,3,16,18],"64":[54,7,54,15],"65":[5,28,5,34],"66":[11,3,17,18],"72":[66,19,66,33],"73":[6,3,6,28],"74":[11,3,18,21],"80":[68,9,68,25],"81":[7,3,7,18],"82":[11,3,19,37],"88":[64,7,64,15],"89":[8,3,8,19],"90":[11,3,20,27],"96":[73,7,73,12],"97":[5,24,8,20],"98":[23,7,23,20],"105":[5,24,8,20],"106":[24,7,24,43],"113":[5,24,8,20],"114":[25,7,25,48],"121":[10,33,10,39],"122":[34,7,34,21],"129":[11,3,11,28],"130":[36,7,36,21],"137":[12,3,12,19],"138":[40,10,40,21],"145":[13,3,13,19],"146":[41,11,41,22],"153":[14,3,14,21],"154":[41,11,41,26],"161":[15,3,15,18],"162":[42,9,42,20],"169":[16,3,16,18],"170":[44,7,44,16],"177":[17,3,17,18],"178":[50,10,50,21],"185":[18,3,18,21],"186":[51,12,51,23],"193":[19,3,19,37],"194":[52,12,52,23],"201":[20,3,20,27],"202":[56,12,56,31],"209":[10,29,20,28],"210":[57,19,57,22],"217":[10,29,20,28],"218":[59,16,59,25],"225":[10,29,20,28],"226":[65,15,65,27],"233":[23,7,23,11],"234":[66,17,66,34],"241":[23,16,23,20],"242":[67,14,67,26],"249":[23,29,23,34],"250":[67,14,67,38],"257":[23,29,23,34],"258":[67,13,67,47],"265":[23,22,23,35],"266":[68,9,68,25],"273":[24,7,24,23],"274":[68,35,68,41],"281":[24,29,24,33],"282":[73,27,73,49],"289":[24,7,24,34],"291":[24,7,24,28],"297":[24,39,24,43],"305":[24,52,24,56],"313":[24,52,24,56],"321":[24,45,24,57],"329":[25,7,25,28],"337":[25,34,25,38],"345":[25,7,25,39],"347":[25,7,25,33],"353":[25,44,25,48],"361":[25,57,25,61],"369":[25,57,25,61],"377":[25,50,25,62],"385":[26,10,26,15],"393":[26,10,26,15],"401":[26,3,26,16],"409":[22,1,27,2],"417":[22,1,27,2],"425":[22,1,27,2],"433":[30,65,30,66],"441":[31,15,31,19],"449":[30,65,30,66],"457":[30,65,30,66],"465":[31,15,31,19],"473":[31,15,31,19],"481":[33,11,33,27],"489":[33,33,33,37],"497":[33,11,33,38],"499":[33,11,33,32],"505":[33,11,33,38],"513":[33,3,33,39],"521":[34,7,34,12],"529":[34,17,34,21],"537":[34,31,34,52],"545":[34,58,34,62],"553":[34,31,34,63],"555":[34,31,34,57],"561":[34,31,34,63],"569":[34,23,34,64],"577":[36,7,36,12],"585":[36,17,36,21],"593":[36,33,36,38],"601":[36,39,36,59],"609":[36,29,36,60],"617":[36,29,36,60],"625":[36,23,36,61],"633":[40,12,40,17],"641":[40,18,40,19],"649":[40,12,40,20],"657":[40,10,40,21],"665":[40,3,40,22],"673":[41,13,41,18],"681":[41,19,41,20],"689":[41,13,41,21],"697":[41,25,41,26],"705":[41,11,41,26],"713":[41,3,41,27],"721":[42,11,42,16],"729":[42,17,42,18],"737":[42,11,42,19],"745":[42,9,42,20],"753":[42,3,42,21],"761":[44,8,44,13],"769":[44,14,44,15],"777":[44,8,44,16],"785":[45,16,45,20],"793":[45,21,45,25],"801":[45,30,45,34],"809":[45,36,45,41],"817":[45,43,45,46],"825":[45,21,45,47],"827":[45,21,45,29],"833":[45,12,45,48],"841":[45,12,45,48],"849":[45,5,45,49],"857":[50,12,50,17],"865":[50,18,50,19],"873":[50,12,50,20],"881":[50,10,50,21],"889":[50,3,50,22],"897":[51,14,51,19],"905":[51,20,51,21],"913":[51,14,51,22],"921":[51,12,51,23],"929":[51,3,51,24],"937":[52,14,52,19],"945":[52,20,52,21],"953":[52,14,52,22],"961":[52,12,52,23],"969":[52,3,52,24],"977":[54,7,54,12],"985":[54,13,54,14],"993":[54,7,54,15],"1001":[55,16,55,21],"1009":[55,22,55,23],"1017":[55,16,55,24],"1025":[55,31,55,32],"1033":[55,34,55,35],"1041":[55,16,55,36],"1043":[55,16,55,30],"1049":[55,16,55,36],"1057":[55,5,55,37],"1065":[56,12,56,20],"1073":[56,12,56,27],"1081":[56,30,56,31],"1089":[57,19,57,22],"1097":[57,7,57,15],"1105":[57,7,57,22],"1113":[57,7,57,23],"1121":[59,17,59,25],"1129":[59,16,59,25],"1137":[59,5,59,26],"1145":[64,7,64,12],"1153":[64,13,64,14],"1161":[64,7,64,15],"1169":[65,17,65,22],"1177":[65,23,65,25],"1185":[65,17,65,26],"1193":[65,15,65,27],"1201":[65,5,65,28],"1209":[66,19,66,24],"1217":[66,25,66,27],"1225":[66,19,66,28],"1233":[66,32,66,33],"1241":[66,17,66,34],"1249":[66,5,66,35],"1257":[67,14,67,21],"1265":[67,24,67,26],"1273":[67,29,67,38],"1281":[67,42,67,47],"1289":[67,13,67,47],"1297":[67,5,67,48],"1305":[68,9,68,14],"1313":[68,15,68,16],"1321":[68,9,68,17],"1329":[68,22,68,25],"1337":[68,36,68,41],"1345":[68,35,68,41],"1353":[68,27,68,42],"1361":[71,14,71,18],"1369":[71,19,71,23],"1377":[71,28,71,32],"1385":[71,34,71,39],"1393":[71,41,71,44],"1401":[71,46,71,50],"1409":[71,52,71,58],"1417":[71,60,71,66],"1425":[71,68,71,76],"1433":[71,19,71,77],"1435":[71,19,71,27],"1441":[71,10,71,78],"1449":[71,10,71,78],"1457":[71,3,71,79],"1465":[73,7,73,12],"1473":[73,14,73,18],"1481":[73,27,73,31],"1489":[73,27,73,41],"1491":[73,27,73,39],"1497":[73,44,73,49],"1505":[73,14,73,50],"1507":[73,14,73,26],"1513":[73,14,73,51],"1521":[75,10,75,14],"1529":[75,10,75,14],"1537":[75,3,75,15],"1545":[29,1,76,2],"1553":[29,1,76,2],"1561":[29,1,76,2],"1569":[29,1,76,2],"1577":[29,1,76,2],"1585":[29,1,76,2],"1593":[29,1,76,2],"1601":[29,1,76,2],"1609":[29,1,76,2],"1617":[29,1,76,2],"1625":[29,1,76,2],"1633":[29,1,76,2],"1641":[29,1,76,2],"1649":[29,1,76,2],"1657":[29,1,76,2],"1665":[79,10,79,16],"1673":[79,10,79,30],"1675":[79,10,79,28],"1681":[79,10,79,30],"1689":[79,3,79,31],"1697":[78,1,80,2],"1705":[78,1,80,2],"1713":[78,1,80,2],"1721":[82,1,82,7],"1729":[82,22,82,26],"1737":[82,27,82,56],"1745":[83,9,83,17],"1753":[84,12,84,32],"1761":[85,14,85,36],"1769":[86,15,86,19],"1777":[87,14,87,36],"1785":[82,58,88,2],"1793":[82,18,88,3],"1801":[82,1,88,3],"1809":[82,1,88,4],"1817":[1,1,89,1],"1825":[1,1,89,1],"1833":[1,1,89,1],"1841":[1,1,89,1],"1849":[22,1,27,2],"1857":[1,1,89,1],"1865":[29,1,76,2],"1873":[1,1,89,1],"1881":[78,1,80,2],"1889":[1,1,89,1],"1897":[23,3,23,35],"1905":[24,3,24,57],"1913":[25,3,25,62],"1921":[22,1,27,2],"1929":[22,1,27,2],"1937":[34,3,34,64],"1945":[36,3,36,61],"1953":[44,3,46,4],"1961":[56,5,58,6],"1969":[54,3,60,4],"1977":[68,5,68,42],"1985":[64,3,69,4],"1993":[73,3,73,51],"2001":[29,1,76,2],"2009":[29,1,76,2],"2017":[78,1,80,2],"2025":[78,1,80,2],"2033":[1,1,89,1],"2041":[1,1,89,1],"nBranches":24,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/timestamp.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/timestamp_jalangi_.js","code":"'use strict';\n\nvar Type = require('../type');\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n"};
jalangiLabel130:
    while (true) {
        try {
            J$.Se(1817, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/timestamp_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/timestamp.js');
            function resolveYamlTimestamp(data) {
                jalangiLabel127:
                    while (true) {
                        try {
                            J$.Fe(409, arguments.callee, this, arguments);
                            arguments = J$.N(417, 'arguments', arguments, 4);
                            data = J$.N(425, 'data', data, 4);
                            if (J$.X1(1897, J$.C(8, J$.B(98, '===', J$.R(233, 'data', data, 0), J$.T(241, null, 25, false), 0))))
                                return J$.X1(265, J$.Rt(257, J$.T(249, false, 23, false)));
                            if (J$.X1(1905, J$.C(16, J$.B(106, '!==', J$.M(289, J$.R(273, 'YAML_DATE_REGEXP', YAML_DATE_REGEXP, 1), 'exec', 0)(J$.R(281, 'data', data, 0)), J$.T(297, null, 25, false), 0))))
                                return J$.X1(321, J$.Rt(313, J$.T(305, true, 23, false)));
                            if (J$.X1(1913, J$.C(24, J$.B(114, '!==', J$.M(345, J$.R(329, 'YAML_TIMESTAMP_REGEXP', YAML_TIMESTAMP_REGEXP, 1), 'exec', 0)(J$.R(337, 'data', data, 0)), J$.T(353, null, 25, false), 0))))
                                return J$.X1(377, J$.Rt(369, J$.T(361, true, 23, false)));
                            return J$.X1(401, J$.Rt(393, J$.T(385, false, 23, false)));
                        } catch (J$e) {
                            J$.Ex(1921, J$e);
                        } finally {
                            if (J$.Fr(1929))
                                continue jalangiLabel127;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function constructYamlTimestamp(data) {
                jalangiLabel128:
                    while (true) {
                        try {
                            J$.Fe(1545, arguments.callee, this, arguments);
                            arguments = J$.N(1553, 'arguments', arguments, 4);
                            data = J$.N(1561, 'data', data, 4);
                            J$.N(1569, 'match', match, 0);
                            J$.N(1577, 'year', year, 0);
                            J$.N(1585, 'month', month, 0);
                            J$.N(1593, 'day', day, 0);
                            J$.N(1601, 'hour', hour, 0);
                            J$.N(1609, 'minute', minute, 0);
                            J$.N(1617, 'second', second, 0);
                            J$.N(1625, 'fraction', fraction, 0);
                            J$.N(1633, 'delta', delta, 0);
                            J$.N(1641, 'tz_hour', tz_hour, 0);
                            J$.N(1649, 'tz_minute', tz_minute, 0);
                            J$.N(1657, 'date', date, 0);
                            var match, year, month, day, hour, minute, second, fraction = J$.X1(457, J$.W(449, 'fraction', J$.T(433, 0, 22, false), fraction, 1)), delta = J$.X1(473, J$.W(465, 'delta', J$.T(441, null, 25, false), delta, 1)), tz_hour, tz_minute, date;
                            J$.X1(513, match = J$.W(505, 'match', J$.M(497, J$.R(481, 'YAML_DATE_REGEXP', YAML_DATE_REGEXP, 1), 'exec', 0)(J$.R(489, 'data', data, 0)), match, 0));
                            if (J$.X1(1937, J$.C(32, J$.B(122, '===', J$.R(521, 'match', match, 0), J$.T(529, null, 25, false), 0))))
                                J$.X1(569, match = J$.W(561, 'match', J$.M(553, J$.R(537, 'YAML_TIMESTAMP_REGEXP', YAML_TIMESTAMP_REGEXP, 1), 'exec', 0)(J$.R(545, 'data', data, 0)), match, 0));
                            if (J$.X1(1945, J$.C(40, J$.B(130, '===', J$.R(577, 'match', match, 0), J$.T(585, null, 25, false), 0))))
                                throw J$.X1(625, J$.Th(617, J$.F(609, J$.R(593, 'Error', Error, 2), 1)(J$.T(601, 'Date resolve error', 21, false))));
                            J$.X1(665, year = J$.W(657, 'year', J$.U(138, '+', J$.G(649, J$.R(633, 'match', match, 0), J$.T(641, 1, 22, false), 4)), year, 0));
                            J$.X1(713, month = J$.W(705, 'month', J$.B(154, '-', J$.U(146, '+', J$.G(689, J$.R(673, 'match', match, 0), J$.T(681, 2, 22, false), 4)), J$.T(697, 1, 22, false), 0), month, 0));
                            J$.X1(753, day = J$.W(745, 'day', J$.U(162, '+', J$.G(737, J$.R(721, 'match', match, 0), J$.T(729, 3, 22, false), 4)), day, 0));
                            if (J$.X1(1953, J$.C(48, J$.U(170, '!', J$.G(777, J$.R(761, 'match', match, 0), J$.T(769, 4, 22, false), 4))))) {
                                return J$.X1(849, J$.Rt(841, J$.F(833, J$.R(785, 'Date', Date, 2), 1)(J$.M(825, J$.R(793, 'Date', Date, 2), 'UTC', 0)(J$.R(801, 'year', year, 0), J$.R(809, 'month', month, 0), J$.R(817, 'day', day, 0)))));
                            }
                            J$.X1(889, hour = J$.W(881, 'hour', J$.U(178, '+', J$.G(873, J$.R(857, 'match', match, 0), J$.T(865, 4, 22, false), 4)), hour, 0));
                            J$.X1(929, minute = J$.W(921, 'minute', J$.U(186, '+', J$.G(913, J$.R(897, 'match', match, 0), J$.T(905, 5, 22, false), 4)), minute, 0));
                            J$.X1(969, second = J$.W(961, 'second', J$.U(194, '+', J$.G(953, J$.R(937, 'match', match, 0), J$.T(945, 6, 22, false), 4)), second, 0));
                            if (J$.X1(1969, J$.C(64, J$.G(993, J$.R(977, 'match', match, 0), J$.T(985, 7, 22, false), 4)))) {
                                J$.X1(1057, fraction = J$.W(1049, 'fraction', J$.M(1041, J$.G(1017, J$.R(1001, 'match', match, 0), J$.T(1009, 7, 22, false), 4), 'slice', 0)(J$.T(1025, 0, 22, false), J$.T(1033, 3, 22, false)), fraction, 0));
                                while (J$.X1(1961, J$.C(56, J$.B(202, '<', J$.G(1073, J$.R(1065, 'fraction', fraction, 0), 'length', 0), J$.T(1081, 3, 22, false), 0)))) {
                                    J$.X1(1113, fraction = J$.W(1105, 'fraction', J$.B(210, '+', J$.R(1097, 'fraction', fraction, 0), J$.T(1089, '0', 21, false), 0), fraction, 0));
                                }
                                J$.X1(1137, fraction = J$.W(1129, 'fraction', J$.U(218, '+', J$.R(1121, 'fraction', fraction, 0)), fraction, 0));
                            }
                            if (J$.X1(1985, J$.C(88, J$.G(1161, J$.R(1145, 'match', match, 0), J$.T(1153, 9, 22, false), 4)))) {
                                J$.X1(1201, tz_hour = J$.W(1193, 'tz_hour', J$.U(226, '+', J$.G(1185, J$.R(1169, 'match', match, 0), J$.T(1177, 10, 22, false), 4)), tz_hour, 0));
                                J$.X1(1249, tz_minute = J$.W(1241, 'tz_minute', J$.U(234, '+', J$.C(72, J$.G(1225, J$.R(1209, 'match', match, 0), J$.T(1217, 11, 22, false), 4)) ? J$._() : J$.T(1233, 0, 22, false)), tz_minute, 0));
                                J$.X1(1297, delta = J$.W(1289, 'delta', J$.B(258, '*', J$.B(250, '+', J$.B(242, '*', J$.R(1257, 'tz_hour', tz_hour, 0), J$.T(1265, 60, 22, false), 0), J$.R(1273, 'tz_minute', tz_minute, 0), 0), J$.T(1281, 60000, 22, false), 0), delta, 0));
                                if (J$.X1(1977, J$.C(80, J$.B(266, '===', J$.G(1321, J$.R(1305, 'match', match, 0), J$.T(1313, 9, 22, false), 4), J$.T(1329, '-', 21, false), 0))))
                                    J$.X1(1353, delta = J$.W(1345, 'delta', J$.U(274, '-', J$.R(1337, 'delta', delta, 0)), delta, 0));
                            }
                            J$.X1(1457, date = J$.W(1449, 'date', J$.F(1441, J$.R(1361, 'Date', Date, 2), 1)(J$.M(1433, J$.R(1369, 'Date', Date, 2), 'UTC', 0)(J$.R(1377, 'year', year, 0), J$.R(1385, 'month', month, 0), J$.R(1393, 'day', day, 0), J$.R(1401, 'hour', hour, 0), J$.R(1409, 'minute', minute, 0), J$.R(1417, 'second', second, 0), J$.R(1425, 'fraction', fraction, 0))), date, 0));
                            if (J$.X1(1993, J$.C(96, J$.R(1465, 'delta', delta, 0))))
                                J$.X1(1513, J$.M(1505, J$.R(1473, 'date', date, 0), 'setTime', 0)(J$.B(282, '-', J$.M(1489, J$.R(1481, 'date', date, 0), 'getTime', 0)(), J$.R(1497, 'delta', delta, 0), 0)));
                            return J$.X1(1537, J$.Rt(1529, J$.R(1521, 'date', date, 0)));
                        } catch (J$e) {
                            J$.Ex(2001, J$e);
                        } finally {
                            if (J$.Fr(2009))
                                continue jalangiLabel128;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function representYamlTimestamp(object) {
                jalangiLabel129:
                    while (true) {
                        try {
                            J$.Fe(1697, arguments.callee, this, arguments);
                            arguments = J$.N(1705, 'arguments', arguments, 4);
                            object = J$.N(1713, 'object', object, 4);
                            return J$.X1(1689, J$.Rt(1681, J$.M(1673, J$.R(1665, 'object', object, 0), 'toISOString', 0)()));
                        } catch (J$e) {
                            J$.Ex(2017, J$e);
                        } finally {
                            if (J$.Fr(2025))
                                continue jalangiLabel129;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1825, 'Type', Type, 0);
            J$.N(1833, 'YAML_DATE_REGEXP', YAML_DATE_REGEXP, 0);
            J$.N(1841, 'YAML_TIMESTAMP_REGEXP', YAML_TIMESTAMP_REGEXP, 0);
            resolveYamlTimestamp = J$.N(1857, 'resolveYamlTimestamp', J$.T(1849, resolveYamlTimestamp, 12, false, 409), 0);
            constructYamlTimestamp = J$.N(1873, 'constructYamlTimestamp', J$.T(1865, constructYamlTimestamp, 12, false, 1545), 0);
            representYamlTimestamp = J$.N(1889, 'representYamlTimestamp', J$.T(1881, representYamlTimestamp, 12, false, 1697), 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var Type = J$.X1(57, J$.W(49, 'Type', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../type', 21, false)), Type, 3));
            var YAML_DATE_REGEXP = J$.X1(113, J$.W(105, 'YAML_DATE_REGEXP', J$.F(97, J$.R(65, 'RegExp', RegExp, 2), 1)(J$.B(18, '+', J$.B(10, '+', J$.T(73, '^([0-9][0-9][0-9][0-9])', 21, false), J$.T(81, '-([0-9][0-9])', 21, false), 0), J$.T(89, '-([0-9][0-9])$', 21, false), 0)), YAML_DATE_REGEXP, 3));
            var YAML_TIMESTAMP_REGEXP = J$.X1(225, J$.W(217, 'YAML_TIMESTAMP_REGEXP', J$.F(209, J$.R(121, 'RegExp', RegExp, 2), 1)(J$.B(90, '+', J$.B(82, '+', J$.B(74, '+', J$.B(66, '+', J$.B(58, '+', J$.B(50, '+', J$.B(42, '+', J$.B(34, '+', J$.B(26, '+', J$.T(129, '^([0-9][0-9][0-9][0-9])', 21, false), J$.T(137, '-([0-9][0-9]?)', 21, false), 0), J$.T(145, '-([0-9][0-9]?)', 21, false), 0), J$.T(153, '(?:[Tt]|[ \\t]+)', 21, false), 0), J$.T(161, '([0-9][0-9]?)', 21, false), 0), J$.T(169, ':([0-9][0-9])', 21, false), 0), J$.T(177, ':([0-9][0-9])', 21, false), 0), J$.T(185, '(?:\\.([0-9]*))?', 21, false), 0), J$.T(193, '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)', 21, false), 0), J$.T(201, '(?::([0-9][0-9]))?))?$', 21, false), 0)), YAML_TIMESTAMP_REGEXP, 3));
            J$.X1(1809, J$.P(1801, J$.R(1721, 'module', module, 2), 'exports', J$.F(1793, J$.R(1729, 'Type', Type, 1), 1)(J$.T(1737, 'tag:yaml.org,2002:timestamp', 21, false), J$.T(1785, {
                kind: J$.T(1745, 'scalar', 21, false),
                resolve: J$.R(1753, 'resolveYamlTimestamp', resolveYamlTimestamp, 1),
                construct: J$.R(1761, 'constructYamlTimestamp', constructYamlTimestamp, 1),
                instanceOf: J$.R(1769, 'Date', Date, 2),
                represent: J$.R(1777, 'representYamlTimestamp', representYamlTimestamp, 1)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(2033, J$e);
        } finally {
            if (J$.Sr(2041)) {
                J$.L();
                continue jalangiLabel130;
            } else {
                J$.L();
                break jalangiLabel130;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
