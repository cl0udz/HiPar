J$.iids = {"8":[6,10,6,40],"9":[1,1,1,13],"10":[6,10,6,23],"17":[1,1,1,14],"18":[6,27,6,40],"25":[3,12,3,19],"33":[3,20,3,29],"41":[3,12,3,30],"49":[3,12,3,30],"57":[3,12,3,30],"65":[6,10,6,14],"73":[6,19,6,23],"81":[6,27,6,31],"89":[6,36,6,40],"97":[6,10,6,40],"105":[6,3,6,41],"113":[5,1,7,2],"121":[5,1,7,2],"129":[5,1,7,2],"137":[9,1,9,7],"145":[9,22,9,26],"153":[9,27,9,52],"161":[10,9,10,17],"169":[11,12,11,28],"177":[9,54,12,2],"185":[9,18,12,3],"193":[9,1,12,3],"201":[9,1,12,4],"209":[1,1,13,1],"217":[1,1,13,1],"225":[5,1,7,2],"233":[1,1,13,1],"241":[5,1,7,2],"249":[5,1,7,2],"257":[1,1,13,1],"265":[1,1,13,1],"nBranches":2,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge_jalangi_.js","code":"'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n"};
jalangiLabel132:
    while (true) {
        try {
            J$.Se(209, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge.js');
            function resolveYamlMerge(data) {
                jalangiLabel131:
                    while (true) {
                        try {
                            J$.Fe(113, arguments.callee, this, arguments);
                            arguments = J$.N(121, 'arguments', arguments, 4);
                            data = J$.N(129, 'data', data, 4);
                            return J$.X1(105, J$.Rt(97, J$.C(8, J$.B(10, '===', J$.R(65, 'data', data, 0), J$.T(73, '<<', 21, false), 0)) ? J$._() : J$.B(18, '===', J$.R(81, 'data', data, 0), J$.T(89, null, 25, false), 0)));
                        } catch (J$e) {
                            J$.Ex(241, J$e);
                        } finally {
                            if (J$.Fr(249))
                                continue jalangiLabel131;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(217, 'Type', Type, 0);
            resolveYamlMerge = J$.N(233, 'resolveYamlMerge', J$.T(225, resolveYamlMerge, 12, false, 113), 0);
            J$.X1(17, J$.T(9, 'use strict', 21, false));
            var Type = J$.X1(57, J$.W(49, 'Type', J$.F(41, J$.R(25, 'require', require, 2), 0)(J$.T(33, '../type', 21, false)), Type, 3));
            J$.X1(201, J$.P(193, J$.R(137, 'module', module, 2), 'exports', J$.F(185, J$.R(145, 'Type', Type, 1), 1)(J$.T(153, 'tag:yaml.org,2002:merge', 21, false), J$.T(177, {
                kind: J$.T(161, 'scalar', 21, false),
                resolve: J$.R(169, 'resolveYamlMerge', resolveYamlMerge, 1)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(257, J$e);
        } finally {
            if (J$.Sr(265)) {
                J$.L();
                continue jalangiLabel132;
            } else {
                J$.L();
                break jalangiLabel132;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
