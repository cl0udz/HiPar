J$.iids = {"8":[5,10,5,40],"9":[2,12,2,19],"10":[5,10,5,23],"17":[2,20,2,29],"18":[5,27,5,40],"25":[2,12,2,30],"33":[2,12,2,30],"41":[2,12,2,30],"49":[5,10,5,14],"57":[5,19,5,23],"65":[5,27,5,31],"73":[5,36,5,40],"81":[5,10,5,40],"89":[5,3,5,41],"97":[4,1,6,2],"105":[4,1,6,2],"113":[4,1,6,2],"121":[8,1,8,7],"129":[8,22,8,26],"137":[8,27,8,52],"145":[9,9,9,17],"153":[10,12,10,28],"161":[8,54,10,30],"169":[8,18,10,31],"177":[8,1,10,31],"185":[8,1,10,32],"193":[1,1,10,32],"201":[1,1,10,32],"209":[4,1,6,2],"217":[1,1,10,32],"225":[4,1,6,2],"233":[4,1,6,2],"241":[1,1,10,32],"249":[1,1,10,32],"nBranches":2,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge_jalangi_.js","code":"'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n"};
jalangiLabel136:
    while (true) {
        try {
            J$.Se(193, '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestJs-yaml/node_modules/js-yaml/lib/js-yaml/type/merge.js');
            function resolveYamlMerge(data) {
                jalangiLabel135:
                    while (true) {
                        try {
                            J$.Fe(97, arguments.callee, this, arguments);
                            arguments = J$.N(105, 'arguments', arguments, 4);
                            data = J$.N(113, 'data', data, 4);
                            return J$.X1(89, J$.Rt(81, J$.C(8, J$.B(10, '===', J$.R(49, 'data', data, 0), J$.T(57, '<<', 21, false), 0)) ? J$._() : J$.B(18, '===', J$.R(65, 'data', data, 0), J$.T(73, null, 25, false), 0)));
                        } catch (J$e) {
                            J$.Ex(225, J$e);
                        } finally {
                            if (J$.Fr(233))
                                continue jalangiLabel135;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(201, 'Type', Type, 0);
            resolveYamlMerge = J$.N(217, 'resolveYamlMerge', J$.T(209, resolveYamlMerge, 12, false, 97), 0);
            var Type = J$.X1(41, J$.W(33, 'Type', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, '../type', 21, false)), Type, 3));
            J$.X1(185, J$.P(177, J$.R(121, 'module', module, 2), 'exports', J$.F(169, J$.R(129, 'Type', Type, 1), 1)(J$.T(137, 'tag:yaml.org,2002:merge', 21, false), J$.T(161, {
                kind: J$.T(145, 'scalar', 21, false),
                resolve: J$.R(153, 'resolveYamlMerge', resolveYamlMerge, 1)
            }, 11, false)), 0));
        } catch (J$e) {
            J$.Ex(241, J$e);
        } finally {
            if (J$.Sr(249)) {
                J$.L();
                continue jalangiLabel136;
            } else {
                J$.L();
                break jalangiLabel136;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
