"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.number.min-safe-integer");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.number.min-safe-integer");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("regenerator-runtime/runtime");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

Object.defineProperty(exports, "__esModule", {
  value: true
}); // Binary min-heap implementation used for priority queue.
// Implementation is stable, i.e. push time is considered for equal priorities

var Heap =
/*#__PURE__*/
function () {
  function Heap() {
    _classCallCheck(this, Heap);

    this.heap = [];
    this.pushCount = Number.MIN_SAFE_INTEGER;
  }

  _createClass(Heap, [{
    key: "empty",
    value: function empty() {
      this.heap = [];
      return this;
    }
  }, {
    key: "percUp",
    value: function percUp(index) {
      var p;

      while (index > 0 && smaller(this.heap[index], this.heap[p = parent(index)])) {
        var t = this.heap[index];
        this.heap[index] = this.heap[p];
        this.heap[p] = t;
        index = p;
      }
    }
  }, {
    key: "percDown",
    value: function percDown(index) {
      var l;

      while ((l = leftChi(index)) < this.heap.length) {
        if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) {
          l = l + 1;
        }

        if (smaller(this.heap[index], this.heap[l])) {
          break;
        }

        var t = this.heap[index];
        this.heap[index] = this.heap[l];
        this.heap[l] = t;
        index = l;
      }
    }
  }, {
    key: "push",
    value: function push(node) {
      node.pushCount = ++this.pushCount;
      this.heap.push(node);
      this.percUp(this.heap.length - 1);
    }
  }, {
    key: "unshift",
    value: function unshift(node) {
      return this.heap.push(node);
    }
  }, {
    key: "shift",
    value: function shift() {
      var _this$heap = _slicedToArray(this.heap, 1),
          top = _this$heap[0];

      this.heap[0] = this.heap[this.heap.length - 1];
      this.heap.pop();
      this.percDown(0);
      return top;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return _toConsumableArray(this);
    }
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var i;
      return regeneratorRuntime.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < this.heap.length)) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return this.heap[i].data;

            case 4:
              i++;
              _context.next = 1;
              break;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, value, this);
    })
  }, {
    key: "remove",
    value: function remove(testFn) {
      var j = 0;

      for (var i = 0; i < this.heap.length; i++) {
        if (!testFn(this.heap[i])) {
          this.heap[j] = this.heap[i];
          j++;
        }
      }

      this.heap.splice(j);

      for (var _i2 = parent(this.heap.length - 1); _i2 >= 0; _i2--) {
        this.percDown(_i2);
      }

      return this;
    }
  }, {
    key: "length",
    get: function get() {
      return this.heap.length;
    }
  }]);

  return Heap;
}();

exports["default"] = Heap;

function leftChi(i) {
  return (i << 1) + 1;
}

function parent(i) {
  return (i + 1 >> 1) - 1;
}

function smaller(x, y) {
  if (x.priority !== y.priority) {
    return x.priority < y.priority;
  } else {
    return x.pushCount < y.pushCount;
  }
}

module.exports = exports["default"];