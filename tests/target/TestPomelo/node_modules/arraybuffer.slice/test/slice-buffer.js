"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array-buffer.slice");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.copy-within");

require("core-js/modules/es.typed-array.every");

require("core-js/modules/es.typed-array.fill");

require("core-js/modules/es.typed-array.filter");

require("core-js/modules/es.typed-array.find");

require("core-js/modules/es.typed-array.find-index");

require("core-js/modules/es.typed-array.for-each");

require("core-js/modules/es.typed-array.includes");

require("core-js/modules/es.typed-array.index-of");

require("core-js/modules/es.typed-array.iterator");

require("core-js/modules/es.typed-array.join");

require("core-js/modules/es.typed-array.last-index-of");

require("core-js/modules/es.typed-array.map");

require("core-js/modules/es.typed-array.reduce");

require("core-js/modules/es.typed-array.reduce-right");

require("core-js/modules/es.typed-array.reverse");

require("core-js/modules/es.typed-array.set");

require("core-js/modules/es.typed-array.slice");

require("core-js/modules/es.typed-array.some");

require("core-js/modules/es.typed-array.sort");

require("core-js/modules/es.typed-array.subarray");

require("core-js/modules/es.typed-array.to-locale-string");

require("core-js/modules/es.typed-array.to-string");
/*
 * Test dependencies
 */


var sliceBuffer = require('../index.js');

var expect = require('expect.js');
/**
 * Tests
 */


describe('sliceBuffer', function () {
  describe('using standard slice', function () {
    it('should slice correctly with only start provided', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 3);
      var sabv = new Uint8Array(sliced);

      for (var i = 3, ii = 0; i < abv.length; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with start and end provided', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 3, 8);
      var sabv = new Uint8Array(sliced);

      for (var i = 3, ii = 0; i < 8; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative start', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = abv.length - 3, ii = 0; i < abv.length; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 0, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = 0, ii = 0; i < abv.length - 3; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative start and end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, -6, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = abv.length - 6, ii = 0; i < abv.length - 3; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with equal start and end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 1, 1);
      expect(sliced.byteLength).to.equal(0);
    });
    it('should slice correctly when end larger than buffer', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 0, 100);
      expect(new Uint8Array(sliced)).to.eql(abv);
    });
    it('shoud slice correctly when start larger than end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var sliced = sliceBuffer(abv.buffer, 6, 5);
      expect(sliced.byteLength).to.equal(0);
    });
  });
  describe('using fallback', function () {
    it('should slice correctly with only start provided', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 3);
      var sabv = new Uint8Array(sliced);

      for (var i = 3, ii = 0; i < abv.length; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with start and end provided', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 3, 8);
      var sabv = new Uint8Array(sliced);

      for (var i = 3, ii = 0; i < 8; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative start', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = abv.length - 3, ii = 0; i < abv.length; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 0, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = 0, ii = 0; i < abv.length - 3; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with negative start and end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, -6, -3);
      var sabv = new Uint8Array(sliced);

      for (var i = abv.length - 6, ii = 0; i < abv.length - 3; i++, ii++) {
        expect(abv[i]).to.equal(sabv[ii]);
      }
    });
    it('should slice correctly with equal start and end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 1, 1);
      expect(sliced.byteLength).to.equal(0);
    });
    it('should slice correctly when end larger than buffer', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 0, 100);
      var sabv = new Uint8Array(sliced);

      for (var i = 0; i < abv.length; i++) {
        expect(abv[i]).to.equal(sabv[i]);
      }
    });
    it('shoud slice correctly when start larger than end', function () {
      var abv = new Uint8Array(10);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = i;
      }

      var ab = abv.buffer;
      ab.slice = undefined;
      var sliced = sliceBuffer(ab, 6, 5);
      expect(sliced.byteLength).to.equal(0);
    });
  });
});