'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isFullwidthCodePoint = require('is-fullwidth-code-point');

var astralRegex = require('astral-regex');

var ansiStyles = require('ansi-styles');

var ESCAPES = ['\u001B', '\u009B'];
var END_CODE = 39;

var wrapAnsi = function wrapAnsi(code) {
  return `${ESCAPES[0]}[${code}m`;
};

module.exports = function (str, begin, end) {
  var arr = [...str.normalize()];
  end = typeof end === 'number' ? end : arr.length;
  var insideEscape = false;
  var escapeCode = null;
  var visible = 0;
  var output = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          i = _step$value[0],
          x = _step$value[1];

      var leftEscape = false;

      if (ESCAPES.includes(x)) {
        insideEscape = true;
        var code = /\d[^m]*/.exec(str.slice(i, i + 18));
        escapeCode = code === END_CODE ? null : code;
      } else if (insideEscape && x === 'm') {
        insideEscape = false;
        leftEscape = true;
      }

      if (!insideEscape && !leftEscape) {
        ++visible;
      }

      if (!astralRegex({
        exact: true
      }).test(x) && isFullwidthCodePoint(x.codePointAt())) {
        ++visible;
      }

      if (visible > begin && visible <= end) {
        output += x;
      } else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {
        output += wrapAnsi(escapeCode);
      } else if (visible >= end) {
        if (escapeCode !== null) {
          output += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);
        }

        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
};