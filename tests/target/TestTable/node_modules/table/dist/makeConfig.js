"use strict";

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.assign");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _cloneDeep2 = _interopRequireDefault(require("lodash/cloneDeep"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _times2 = _interopRequireDefault(require("lodash/times"));

var _getBorderCharacters = _interopRequireDefault(require("./getBorderCharacters"));

var _validateConfig = _interopRequireDefault(require("./validateConfig"));

var _calculateMaximumColumnWidthIndex = _interopRequireDefault(require("./calculateMaximumColumnWidthIndex"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Merges user provided border characters with the default border ("honeywell") characters.
 *
 * @param {Object} border
 * @returns {Object}
 */


var makeBorder = function makeBorder() {
  var border = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({}, (0, _getBorderCharacters["default"])('honeywell'), border);
};
/**
 * Creates a configuration for every column using default
 * values for the missing configuration properties.
 *
 * @param {Array[]} rows
 * @param {Object} columns
 * @param {Object} columnDefault
 * @returns {Object}
 */


var makeColumns = function makeColumns(rows) {
  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var columnDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var maximumColumnWidthIndex = (0, _calculateMaximumColumnWidthIndex["default"])(rows);
  (0, _times2["default"])(rows[0].length, function (index) {
    if ((0, _isUndefined2["default"])(columns[index])) {
      columns[index] = {};
    }

    columns[index] = Object.assign({
      alignment: 'left',
      paddingLeft: 1,
      paddingRight: 1,
      truncate: Infinity,
      width: maximumColumnWidthIndex[index],
      wrapWord: false
    }, columnDefault, columns[index]);
  });
  return columns;
};
/**
 * Makes a new configuration object out of the userConfig object
 * using default values for the missing configuration properties.
 *
 * @param {Array[]} rows
 * @param {Object} userConfig
 * @returns {Object}
 */


var makeConfig = function makeConfig(rows) {
  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  (0, _validateConfig["default"])('config.json', userConfig);
  var config = (0, _cloneDeep2["default"])(userConfig);
  config.border = makeBorder(config.border);
  config.columns = makeColumns(rows, config.columns, config.columnDefault);

  if (!config.drawHorizontalLine) {
    /**
         * @returns {boolean}
         */
    config.drawHorizontalLine = function () {
      return true;
    };
  }

  if (config.singleLine === undefined) {
    config.singleLine = false;
  }

  return config;
};

var _default = makeConfig;
exports["default"] = _default;