"use strict";
/**
 * json-strictify
 *
 * @version 6.3.0
 * @author Raphael Pigulla <pigulla@four66.com>
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util = tslib_1.__importStar(require("util"));
const CircularReferenceError_1 = tslib_1.__importDefault(require("./CircularReferenceError"));
const InvalidValueError_1 = tslib_1.__importDefault(require("./InvalidValueError"));
;
/**
 * Normalizes a user-specified replacer function.
 *
 * In short, JSON.stringify's "replacer" parameter can either be a function or an array containing the names of the
 * properties to be included. This method normalizes the latter case to the former so we can always treat the
 * "replacer" option as a function internally.
 *
 * For more information about the replacer function take a look at the documentation on
 * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter).
 */
function normalize_replacer(replacer) {
    if (typeof replacer === 'function') {
        return replacer;
    }
    if (Array.isArray(replacer)) {
        return function (key, value) {
            return (key !== '' && replacer.indexOf(key) === -1) ? undefined : value;
        };
    }
    // We can't easily normalize an "empty replacer" with the identity function because we later need to distinguish
    // between a "real" undefined (which is illegal) and an undefined returned by the replacer (which means "drop
    // that value").
    return null;
}
class JSONstrictify {
    constructor(replacer) {
        this.replacer = replacer;
    }
    /**
     * The drop-in replacement function for JSON.stringify.
     *
     * @throws {InvalidValueError}
     * @throws {CircularReferenceError}
     */
    static validate(value, replacer) {
        const normalized_replacer = normalize_replacer(replacer);
        const instance = new JSONstrictify(normalized_replacer);
        const initialData = normalized_replacer ? normalized_replacer.call(value, '', value) : value;
        instance.check(initialData, [], new Set());
    }
    /**
     * Recursively check if the given object can be serialized to JSON safely.
     *
     * @throws {InvalidValueError}
     * @throws {CircularReferenceError}
     */
    check_object(object, references, ancestors) {
        let actual;
        this.assert_no_cycle(object, references, ancestors);
        if (typeof object.toJSON === 'function') {
            actual = object.toJSON();
            return this.check(actual, references, ancestors);
        }
        for (const key in object) {
            actual = this.replacer ? this.replacer.call(object, key, object[key]) : object[key];
            if (!this.replacer || actual !== undefined) {
                this.check(actual, references.concat(key), ancestors.add(object));
            }
        }
    }
    /**
     * Recursively check if the given array can be serialized to JSON safely.
     *
     * @throws {InvalidValueError}
     * @throws {CircularReferenceError}
     */
    check_array(array, references, ancestors) {
        this.assert_no_cycle(array, references, ancestors);
        for (let i = 0; i < array.length; ++i) {
            const actual = this.replacer ? this.replacer.call(array, String(i), array[i]) : array[i];
            this.check(actual, references.concat(String(i)), ancestors.add(array));
        }
    }
    /**
     * Check if the given value is of a known, non-serializable type and provide a more specific, helpful error message.
     *
     * @throws {InvalidValueError}
     */
    check_common_types(value, references) {
        if (util.types.isNativeError(value)) {
            throw new InvalidValueError_1.default('An error object is not JSON-serializable', value, references);
        }
        else if (util.types.isRegExp(value)) {
            throw new InvalidValueError_1.default('A RegExp is not JSON-serializable', value, references);
        }
        else if (value === undefined) {
            throw new InvalidValueError_1.default('undefined is not JSON-serializable', value, references);
        }
        else if (typeof value === 'symbol') {
            throw new InvalidValueError_1.default('A symbol is not JSON-serializable', value, references);
        }
        else if (typeof value === 'function') {
            throw new InvalidValueError_1.default('A function is not JSON-serializable', value, references);
        }
        else if (typeof value === 'bigint') {
            throw new InvalidValueError_1.default('A BigInt is not JSON-serializable', value, references);
        }
        else if (typeof value === 'number' && !isFinite(value)) {
            // The value's string representation itself will actually be descriptive ("Infinity", "-Infinity" or "NaN").
            throw new InvalidValueError_1.default(`${value} is not JSON-serializable`, value, references);
        }
    }
    /**
     * Recursively check if the given value can be serialized to JSON safely.
     *
     * @throws {InvalidValueError}
     * @throws {CircularReferenceError}
     */
    check(value, references, ancestors) {
        // Check for the most common non-serializable types.
        this.check_common_types(value, references);
        // Primitive types are always okay (we've already checked for non-finite numbers).
        if (value === null || typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {
            return;
        }
        if (Array.isArray(value)) {
            // If an array, check its elements.
            return this.check_array(value, references, ancestors);
        }
        /* istanbul ignore else */
        if (typeof value === 'object') {
            // If an object, check its properties (we've already checked for null).
            return this.check_object(value, references, ancestors);
        }
        // This case will not occur in a regular Node.js or browser environment, but could happen if you run your
        // script in an engine like Rhino or Nashorn and try to serialize a host object.
        /* istanbul ignore next */
        throw new InvalidValueError_1.default('Invalid type', value, references);
    }
    /**
     * Check if the passed value is a circular reference, i.e. whether it is one of its own ancestors.
     *
     * @throws {CircularReferenceError}
     */
    assert_no_cycle(value, references, ancestors) {
        if (ancestors.has(value)) {
            throw new CircularReferenceError_1.default(references);
        }
    }
}
;
const native_impl = {
    [Symbol.toStringTag]: 'JSON',
    parse: JSON.parse,
    stringify: JSON.stringify,
    enabled(enabled = true) {
        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */
        return enabled ? strict_impl : native_impl;
    }
};
const strict_impl = {
    [Symbol.toStringTag]: 'JSON',
    parse: JSON.parse,
    stringify(value, replacer, space) {
        JSONstrictify.validate(value, replacer);
        // Overloading in TypeScript seems to be a bit wonky...
        return typeof replacer === 'function'
            ? JSON.stringify(value, replacer, space)
            : JSON.stringify(value, replacer, space);
    },
    enabled(enabled = true) {
        return enabled ? strict_impl : native_impl;
    }
};
/* istanbul ignore next */
exports.default = process.env.NODE_ENV === 'production' ? native_impl : strict_impl;
//# sourceMappingURL=data:application/json;base64,