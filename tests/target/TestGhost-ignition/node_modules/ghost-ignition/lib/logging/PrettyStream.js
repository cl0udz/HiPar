"use strict";

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.reduce.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.reflect.get.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var moment = require('moment'),
    Transform = require('stream').Transform,
    format = require('util').format,
    prettyjson = require('prettyjson'),
    each = require('lodash/each'),
    omit = require('lodash/omit'),
    get = require('lodash/get'),
    isArray = require('lodash/isArray'),
    isEmpty = require('lodash/isEmpty'),
    isObject = require('lodash/isObject'),
    isString = require('lodash/isString'),
    _private = {
  levelFromName: {
    10: 'trace',
    20: 'debug',
    30: 'info',
    40: 'warn',
    50: 'error',
    60: 'fatal'
  },
  colorForLevel: {
    10: 'grey',
    20: 'grey',
    30: 'cyan',
    40: 'magenta',
    50: 'red',
    60: 'inverse'
  },
  colors: {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }
};

function colorize(colors, value) {
  if (isArray(colors)) {
    return colors.reduce(function (acc, color) {
      return colorize(color, acc);
    }, value);
  } else {
    return '\x1B[' + _private.colors[colors][0] + 'm' + value + '\x1B[' + _private.colors[colors][1] + 'm';
  }
}

function statusCode(status) {
  var color = status >= 500 ? 'red' : status >= 400 ? 'yellow' : status >= 300 ? 'cyan' : status >= 200 ? 'green' : 0; // no color

  return colorize(color, status);
}

var PrettyStream =
/*#__PURE__*/
function (_Transform) {
  _inherits(PrettyStream, _Transform);

  function PrettyStream(options) {
    var _this;

    _classCallCheck(this, PrettyStream);

    options = options || {};
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrettyStream).call(this, options));
    _this.mode = options.mode || 'short';
    return _this;
  }

  _createClass(PrettyStream, [{
    key: "write",
    value: function write(data, enc, cb) {
      // Bunyan sometimes passes things as objects. Because of this, we need to make sure
      // the data is converted to JSON
      if (isObject(data) && !(data instanceof Buffer)) {
        data = JSON.stringify(data);
      }

      _get(_getPrototypeOf(PrettyStream.prototype), "write", this).call(this, data, enc, cb);
    }
  }, {
    key: "_transform",
    value: function _transform(data, enc, cb) {
      if (!isString(data)) {
        data = data.toString();
      } // Remove trailing newline if any


      data = data.replace(/\\n$/, '');

      try {
        data = JSON.parse(data);
      } catch (err) {
        cb(err); // If data is not JSON we don't want to continue processing as if it is

        return;
      }

      var output = '',
          time = moment(data.time).format('YYYY-MM-DD HH:mm:ss'),
          logLevel = _private.levelFromName[data.level].toUpperCase(),
          codes = _private.colors[_private.colorForLevel[data.level]],
          bodyPretty = '';

      logLevel = '\x1B[' + codes[0] + 'm' + logLevel + '\x1B[' + codes[1] + 'm';

      if (data.req) {
        output += format('[%s] %s "%s %s" %s %s\n', time, logLevel, data.req.method.toUpperCase(), get(data, 'req.originalUrl'), statusCode(get(data, 'res.statusCode')), get(data, 'res.responseTime'));
      } else if (data.msg === undefined) {
        output += format('[%s] %s\n', time, logLevel);
      } else {
        bodyPretty += data.msg;
        output += format('[%s] %s %s\n', time, logLevel, bodyPretty);
      }

      each(omit(data, ['time', 'level', 'name', 'hostname', 'pid', 'v', 'msg']), function (value, key) {
        // we always output errors for now
        if (isObject(value) && value.message && value.stack) {
          var error = '\n';

          if (value.errorType) {
            error += colorize(_private.colorForLevel[data.level], 'Type: ' + value.errorType) + '\n';
          }

          error += colorize(_private.colorForLevel[data.level], value.message) + '\n\n';

          if (value.context) {
            error += colorize('white', value.context) + '\n';
          }

          if (value.help) {
            error += colorize('yellow', value.help) + '\n';
          }

          if (value.context || value.help) {
            error += '\n';
          }

          if (value.id) {
            error += colorize(['white', 'bold'], 'Error ID:') + '\n';
            error += '    ' + colorize('grey', value.id) + '\n\n';
          }

          if (value.code) {
            error += colorize(['white', 'bold'], 'Error Code: ') + '\n';
            error += '    ' + colorize('grey', value.code) + '\n\n';
          }

          if (value.errorDetails) {
            var details = value.errorDetails;

            try {
              var jsonDetails = JSON.parse(value.errorDetails);
              details = isArray(jsonDetails) ? jsonDetails[0] : jsonDetails;
            } catch (err) {// no need for special handling as we default to unparsed 'errorDetails'
            }

            var pretty = prettyjson.render(details, {
              noColor: true
            }, 4);
            error += colorize(['white', 'bold'], 'Details:') + '\n';
            error += colorize('grey', pretty) + '\n\n';
          }

          if (value.stack && !value.hideStack) {
            error += colorize('grey', '----------------------------------------') + '\n\n';
            error += colorize('grey', value.stack) + '\n';
          }

          output += format('%s\n', colorize(_private.colorForLevel[data.level], error));
        } else if (isObject(value)) {
          bodyPretty += '\n' + colorize('yellow', key.toUpperCase()) + '\n';
          var sanitized = {};
          each(value, function (innerValue, innerKey) {
            if (!isEmpty(innerValue)) {
              sanitized[innerKey] = innerValue;
            }
          });
          bodyPretty += prettyjson.render(sanitized, {}) + '\n';
        } else {
          bodyPretty += prettyjson.render(value, {}) + '\n';
        }
      });

      if (this.mode !== 'short' && bodyPretty !== data.msg) {
        output += format('%s\n', colorize('grey', bodyPretty));
      }

      cb(null, output);
    }
  }]);

  return PrettyStream;
}(Transform);

module.exports = PrettyStream;