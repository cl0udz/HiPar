'use strict';

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

Object.defineProperty(exports, "__esModule", {
  value: true
}); // ASCII ESCAPE SEQUENCE http://www5c.biglobe.ne.jp/~ecb/assembler2/b_2.html

var levelToColor = {
  n: '[N]',
  // no color
  v: '[35m[V]',
  // purple
  d: '[34m[D]',
  // blue
  i: '[32m[I]',
  // green
  w: '[33m[W]',
  // yellow
  e: '[31m[E]' // red

};
/**
 * display colorful log. now, not support browser.
 *
 * format:
 * ``[LogLevel] [Time] [File] log text``
 *
 * format with tag:
 * ``[LogLevel] [Time] [File] [Tag] log text``
 *
 * log level and color:
 * - verbose: purple
 * - debug: blue
 * - info: green
 * - warning: yellow
 * - error: red
 *
 * @example
 * import Logger from 'color-logger'
 *
 * // simple usage
 * Logger.v('verbose log');
 *
 * // tag usage
 * let logger = new Logger('MyTag');
 * logger.d('debug log');
 */

var ColorLogger =
/*#__PURE__*/
function () {
  /**
   * create instance.
   */
  function ColorLogger() {
    _classCallCheck(this, ColorLogger);

    this._allLogs = [];
  }
  /**
   * log information.
   * @return {string} - file name and line number.
   * @private
   */


  _createClass(ColorLogger, [{
    key: "_getInfo",
    value: function _getInfo() {
      var info;

      try {
        throw new Error();
      } catch (e) {
        var lines = e.stack.split('\n');
        var line = lines[4];
        var matched = line.match(/([\w\d\-_.]*:\d+:\d+)/);
        info = matched[1];
      }

      return info;
    }
    /**
     * clear all logs.
     */

  }, {
    key: "clearAllLogs",
    value: function clearAllLogs() {
      this._allLogs = [];
    }
    /**
     * all logs
     * @type {String[]}
     */

  }, {
    key: "_output",

    /**
     * display log.
     * @param {string} level - log level. v, d, i, w, e.
     * @param {...*} msg - log message.
     * @returns {string} - formatted log message.
     * @private
     */
    value: function _output(level) {
      var text = [];

      for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        msg[_key - 1] = arguments[_key];
      }

      for (var _i = 0, _msg = msg; _i < _msg.length; _i++) {
        var m = _msg[_i];

        if (_typeof(m) === 'object') {
          text.push(JSON.stringify(m, null, 2));
        } else {
          text.push(m);
        }
      }

      var color = levelToColor[level];

      var info = this._getInfo();

      var d = new Date();
      var month = d.getMonth() + 1;
      if (month < 10) month = "0".concat(month);
      var date = d.getDate();
      if (date < 10) date = "0".concat(date);
      var hour = d.getHours();
      if (hour < 10) hour = "0".concat(hour);
      var minutes = d.getMinutes();
      if (minutes < 10) minutes = "0".concat(minutes);
      var sec = d.getSeconds();
      if (sec < 10) sec = "0".concat(sec);
      var now = "".concat(d.getFullYear(), "-").concat(month, "-").concat(date, "T").concat(hour, ":").concat(minutes, ":").concat(sec, ".").concat(d.getMilliseconds(), "Z");
      var log = "".concat(color, " [").concat(now, "] [").concat(info, "] ").concat(text.join(' '), "\x1B[0m");
      var offColorLog = "[".concat(level.toUpperCase(), "] [").concat(now, "] [").concat(info, "] ").concat(text.join(' '));

      this._allLogs.push(offColorLog);

      if (this._allLogs.length > 10000) this._allLogs.shift();
      if (this._debug) console.log(log);
      return log;
    }
    /**
     * display verbose(purple) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "v",
    value: function v() {
      for (var _len2 = arguments.length, msg = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        msg[_key2] = arguments[_key2];
      }

      return this._output.apply(this, ['v'].concat(msg));
    }
    /**
     * display debug(blue) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "d",
    value: function d() {
      for (var _len3 = arguments.length, msg = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        msg[_key3] = arguments[_key3];
      }

      return this._output.apply(this, ['d'].concat(msg));
    }
    /**
     * display normal(no color) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "n",
    value: function n() {
      for (var _len4 = arguments.length, msg = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        msg[_key4] = arguments[_key4];
      }

      return this._output.apply(this, ['n'].concat(msg));
    }
    /**
     * display info(green) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "i",
    value: function i() {
      for (var _len5 = arguments.length, msg = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        msg[_key5] = arguments[_key5];
      }

      return this._output.apply(this, ['i'].concat(msg));
    }
    /**
     * display warning(yellow) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "w",
    value: function w() {
      for (var _len6 = arguments.length, msg = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        msg[_key6] = arguments[_key6];
      }

      return this._output.apply(this, ['w'].concat(msg));
    }
    /**
     * display warning(red) log.
     * @param {...*} msg - log message.
     * @returns {string} formatted log message.
     */

  }, {
    key: "e",
    value: function e() {
      for (var _len7 = arguments.length, msg = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        msg[_key7] = arguments[_key7];
      }

      return this._output.apply(this, ['e'].concat(msg));
    }
  }, {
    key: "allLogs",
    get: function get() {
      return [].concat(this._allLogs);
    }
    /**
     * if false, not display log. default is true.
     */

  }, {
    key: "debug",
    set: function set(v) {
      this._debug = v;
    }
  }]);

  return ColorLogger;
}();

exports.ColorLogger = ColorLogger;
var logger = new ColorLogger();
logger.debug = true;
exports["default"] = logger;