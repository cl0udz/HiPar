"use strict";

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.number.is-integer.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.number.is-integer.js");

var _require = require('../../src'),
    Rule = _require.Rule;

test('adding a custom rule', function () {
  Rule.addCustom('customInteger', {
    min: function min(val, _min) {
      return val - _min > 0;
    },
    max: function max(val, _max) {
      return val - _max < 0;
    },
    equal: function equal(val, _equal) {
      return val === _equal;
    },
    type: function type(val) {
      return Number.isInteger(val) && val > 0 && val < 100;
    }
  });
  var customInteger = new Rule({
    type: 'customInteger',
    min: 10
  }, null);
  expect(customInteger.test(11)).toBe(true);
  expect(customInteger.test(200)).toBe(false);
});
test('throwing when type not exist', function () {
  expect(function () {
    var customInteger = new Rule({
      type: 'something',
      min: 10
    }, null);
    customInteger.test(11);
  }).toThrow();
});
test('throwing when type is undefined', function () {
  expect(function () {
    var customInteger = new Rule({
      min: 10
    }, null);
    customInteger.test(11);
  }).toThrow();
});