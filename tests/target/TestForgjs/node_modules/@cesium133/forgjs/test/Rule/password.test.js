"use strict";

var _require = require('../../src'),
    Rule = _require.Rule;

test('type test not password is false', function () {
  var passwordRule = new Rule({
    type: 'password'
  }, null);
  expect(passwordRule.test([])).toBe(false);
});
test('number', function () {
  var passwordRule = new Rule({
    type: 'password',
    numbers: 5
  }, null);
  expect(passwordRule.test('Aa6z6666')).toBe(true);
});
test('uppercase', function () {
  var passwordRule = new Rule({
    type: 'password',
    uppercase: 5
  }, null);
  expect(passwordRule.test('@_6b6ddcdA')).toBe(false);
});
test('matcesOneOf', function () {
  var passwordRule = new Rule({
    type: 'password',
    matchesOneOf: ['@', '_', '-']
  }, null);
  expect(passwordRule.test('AAbd_AdcdAA')).toBe(true);
});
test('matcesOneOf without mach', function () {
  var passwordRule = new Rule({
    type: 'password',
    matchesOneOf: ['@', '_', '-']
  }, null);
  expect(passwordRule.test('AAbdAdcdAA')).toBe(false);
});
test('matchesAllOf', function () {
  var passwordRule = new Rule({
    type: 'password',
    matchesAllOf: ['@', '_', '-']
  }, null);
  expect(passwordRule.test('A@_-AbdAdcdAA')).toBe(true);
});
test('matchesAllOf false', function () {
  var passwordRule = new Rule({
    type: 'password',
    matchesAllOf: ['@', '_', '-']
  }, null);
  expect(passwordRule.test('A@-AbdAdcdAA')).toBe(false);
});
test('specialChars false', function () {
  var passwordRule = new Rule({
    type: 'password',
    specialChars: 2
  }, null);
  expect(passwordRule.test('A@AbdAdcdAA')).toBe(false);
});
test('good password', function () {
  var passwordRule = new Rule({
    type: 'password',
    minLength: 8,
    uppercase: 1,
    numbers: 1,
    matchesOneOf: ['@', '_', '-', '.', '!']
  }, null);
  expect(passwordRule.test('@_-bddcd6A')).toBe(true);
});