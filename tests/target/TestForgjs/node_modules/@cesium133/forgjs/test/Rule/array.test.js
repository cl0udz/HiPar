"use strict";

var _require = require('../../src'),
    Rule = _require.Rule,
    Validator = _require.Validator;

test('returns true when its an array', function () {
  var arrayRule = new Rule({
    type: 'array'
  }, null);
  expect(arrayRule.test([])).toBe(true); // eslint-disable-next-line

  expect(arrayRule.test(new Array())).toBe(true);
});
test('returns true when aray is not empty', function () {
  var elemntsRule = new Rule({
    type: 'int'
  });
  var arrayRule = new Rule({
    type: 'array',
    of: elemntsRule,
    notEmpty: true
  }, null);
  expect(arrayRule.test([])).toBe(false);
});
test('returns true when all elems verify the rule', function () {
  var elemntsRule = new Rule({
    type: 'string',
    maxLength: 2
  });
  var arrayRule = new Rule({
    type: 'array',
    of: elemntsRule
  }, null);
  expect(arrayRule.test(['1', '2', '1'])).toBe(true);
});
test('returns true when array contains 3 elems', function () {
  var arrayRule = new Rule({
    type: 'array',
    length: 3
  }, null);
  expect(arrayRule.test(['1', '2', '1'])).toBe(true);
});
test('returns false when array contains elements that dont match', function () {
  var arrayRule = new Rule({
    type: 'array',
    of: new Rule('int')
  }, null);
  expect(arrayRule.test(['1', '2', '1'])).toBe(false);
});
test('returns true when elements verify the validator', function () {
  var users = new Validator({
    name: new Rule('string'),
    age: new Rule('int')
  });
  var arrayRule = new Rule({
    type: 'array',
    of: users
  });
  expect(arrayRule.test([{
    name: 'Meee',
    age: 23
  }])).toBe(true);
});
test('returns true when array is one of validator', function () {
  var arrayRule = new Rule({
    type: 'array',
    oneOf: [[{
      name: 'Meee',
      age: 23
    }], [{
      name: 'haaa',
      age: 27
    }]]
  });
  expect(arrayRule.test([{
    name: 'Meee',
    age: 23
  }])).toBe(true);
});