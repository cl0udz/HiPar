"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var _require = require('./util'),
    traverse = _require.traverse,
    getValFromPath = _require.getValFromPath;

var _require2 = require('../const'),
    unexpectedFiled = _require2.unexpectedFiled;

var _require3 = require('../util'),
    flattenObject = _require3.flattenObject,
    arrayContainsAll = _require3.arrayContainsAll;

var Validator =
/*#__PURE__*/
function () {
  function Validator(o) {
    _classCallCheck(this, Validator);

    this.rules = o;
  }

  _createClass(Validator, [{
    key: "test",
    value: function test(o) {
      var ret = true;
      var keysOfRules = Object.keys(flattenObject(this.rules));
      var keysOfObject = Object.keys(flattenObject(o));

      if (!arrayContainsAll(keysOfObject, keysOfRules)) {
        return false;
      }

      traverse(this.rules, function (rule, path) {
        if (rule.test(getValFromPath(path, o), o) === false) {
          ret = false;
        }
      });
      return ret;
    }
  }, {
    key: "testAll",
    value: function testAll(arr) {
      for (var i = 0; i < arr.length; i += 1) {
        if (this.test(arr[i]) === false) {
          return i;
        }
      }

      return -1;
    }
  }, {
    key: "getErrors",
    value: function getErrors(o) {
      var errors = [];
      var keysOfRules = Object.keys(flattenObject(this.rules));
      var keysOfObject = Object.keys(flattenObject(o));

      if (!arrayContainsAll(keysOfObject, keysOfRules)) {
        var undeclaredFiledes = keysOfObject.filter(function (i) {
          return keysOfRules.indexOf(i) < 0;
        });
        undeclaredFiledes = undeclaredFiledes.map(unexpectedFiled);
        errors = [].concat(_toConsumableArray(errors), _toConsumableArray(undeclaredFiledes));
      }

      traverse(this.rules, function (rule, path) {
        if (rule.test(getValFromPath(path, o), o, path) === false) {
          errors = [].concat(_toConsumableArray(errors), _toConsumableArray(rule.errorCollector.get()));
        }
      });
      return errors;
    }
  }]);

  return Validator;
}();

module.exports = Validator;