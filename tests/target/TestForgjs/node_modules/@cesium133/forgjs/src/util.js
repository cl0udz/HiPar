"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.every.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.number.is-integer.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.every.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.number.is-integer.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/web.dom-collections.iterator.js");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var isArray = function isArray(arr) {
  return Array.isArray(arr);
};

var isString = function isString(str) {
  return typeof str === 'string' || str instanceof String;
};

var isInt = function isInt(val) {
  return Number.isInteger(val);
};

var isFunction = function isFunction(func) {
  return func !== null && typeof func === 'function';
};
/**
 * Regex that validates if a string is a valid url
 */


var URL_REGEX = /^\(?(?:(http|https|ftp):\/\/)?(?:((?:[^\W\s]|\.|-|[:]{1})+)@{1})?((?:www.)?(?:[^\W\s]|\.|-)+[\.][^\W\s]{2,4}|localhost(?=\/)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::(\d*))?([\/]?[^\s\?]*[\/]{1})*(?:\/?([^\s\n\?\[\]\{\}\#]*(?:(?=\.)){1}|[^\s\n\?\[\]\{\}\.\#]*)?([\.]{1}[^\s\?\#]*)?)?(?:\?{1}([^\s\n\#\[\]]*))?([\#][^\s\n]*)?\)?/; // eslint-disable-line

var isObject = function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
};

var AND = function AND(v1, v2) {
  return v1 && v2;
};

var OR = function OR(v1, v2) {
  return v1 || v2;
};
/**
 * Checks if two bojects are loosly equal
 * @param {any} a first object
 * @param {any} b second object
 *
 * @return {boolean}
 */


var looseEqual = function looseEqual(a, b) {
  if (a === b) return true;
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  var isArrayA = isArray(a);
  var isArrayB = isArray(b);
  var ret = false;

  if (isArrayA && isArrayB) {
    ret = a.length === b.length && a.every(function (e, i) {
      return looseEqual(e, b[i]);
    });
  }

  if (a instanceof Date && b instanceof Date) {
    ret = a.getTime() === b.getTime();
  }

  if (isObjectA && isObjectB) {
    var keysA = Object.keys(a);
    var keysB = Object.keys(b);
    ret = keysA.length === keysB.length && keysA.every(function (key) {
      return looseEqual(a[key], b[key]);
    });
  }

  return ret;
};

function mapFirstArgument(f, map) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var arg = args;
    arg[0] = map(arg[0]);
    return f.apply(void 0, arg);
  };
}

function mergeRule(rule1, rule2, mapFunction) {
  var keys = Object.keys(rule2);
  var mappedCopy = {};
  keys.forEach(function (key) {
    mappedCopy[key] = mapFirstArgument(rule2[key], mapFunction);
  });
  return _objectSpread({}, rule1, {}, mappedCopy, {
    type: function type(val) {
      return rule1.type(val) && rule2.type(mapFunction(val));
    }
  });
}

function flattenObject(ob) {
  var toReturn = {};
  /* eslint-disable */

  for (var i in ob) {
    if (ob[i] && ob[i].constructor === Object) {
      var flatObject = flattenObject(ob[i]);

      for (var x in flatObject) {
        toReturn["".concat(i, ".").concat(x)] = flatObject[x];
      }
    } else {
      toReturn[i] = ob[i];
    }
  }
  /* eslint-enable */


  return toReturn;
}

function arrayContainsAll(a, b) {
  for (var i = 0; i < a.length; i += 1) {
    var contains = false;

    for (var j = 0; j < b.length; j += 1) {
      if (a[i] === b[j]) {
        contains = true;
      }
    }

    if (contains === false) {
      return false;
    }
  }

  return true;
}

module.exports = {
  isArray: isArray,
  isString: isString,
  isFunction: isFunction,
  isObject: isObject,
  URL_REGEX: URL_REGEX,
  looseEqual: looseEqual,
  AND: AND,
  OR: OR,
  isInt: isInt,
  mapFirstArgument: mapFirstArgument,
  mergeRule: mergeRule,
  flattenObject: flattenObject,
  arrayContainsAll: arrayContainsAll
};