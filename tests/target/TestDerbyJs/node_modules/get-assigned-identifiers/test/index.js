"use strict";

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

require("core-js/modules/es.array.map");

require("core-js/modules/es.function.name");

var test = require('tape');

var assert = require('assert');

var parse = require('acorn').parse;

var getAssignedIdentifiers = require('../');

function getName(node) {
  assert.equal(node.type, 'Identifier', 'Returned node must be an Identifier');
  return node.name;
}

test('example', function (t) {
  t.plan(1);
  var ast = parse("\n    var { a, b: [ c,, ...x ], d } = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'c', 'x', 'd']);
});
test('simple identifiers', function (t) {
  t.plan(1);
  var ast = parse("\n    var xyz = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['xyz']);
});
test('array destructuring', function (t) {
  t.plan(1);
  var ast = parse("\n    var [a, b, c] = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b', 'c']);
});
test('array destructuring with rest element', function (t) {
  t.plan(1);
  var ast = parse("\n    var [a, b, ...rest] = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b', 'rest']);
});
test('array destructuring with holes', function (t) {
  t.plan(1);
  var ast = parse("\n    var [a, b,,,,,, boop] = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b', 'boop']);
});
test('nested array destructuring', function (t) {
  t.plan(1);
  var ast = parse("\n    var [a, [[[b]], ...c], boop] = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b', 'c', 'boop']);
});
test('object destructuring', function (t) {
  t.plan(1);
  var ast = parse("\n    var {a, b} = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b']);
});
test('object destructuring with different names', function (t) {
  t.plan(1);
  var ast = parse("\n    var {a: b, b: lol} = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['b', 'lol']);
});
test('nested object destructuring', function (t) {
  t.plan(1);
  var ast = parse("\n    var {a: {b}, b: lol, c: {\n      d, e: { f: g }\n    }} = whatever()\n  ");
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['b', 'lol', 'd', 'g']);
});
test('object rest destructuring', function (t) {
  t.plan(1);
  var ast = parse("\n    var {a, ...b} = whatever()\n  ", {
    ecmaVersion: 9
  });
  var node = ast.body[0].declarations[0].id;
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['a', 'b']);
});
test('import declarations', function (t) {
  t.plan(2);
  var ast = parse("\n    import x, { y, z as a } from 'module'\n  ", {
    sourceType: 'module'
  });
  var node = ast.body[0];
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['x', 'y', 'a']);
  ast = parse("\n    import * as ns from 'module'\n  ", {
    sourceType: 'module'
  });
  node = ast.body[0];
  t.deepEqual(getAssignedIdentifiers(node).map(getName), ['ns']);
});