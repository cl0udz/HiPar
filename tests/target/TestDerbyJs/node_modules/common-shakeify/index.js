'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof10(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof10 = function _typeof10(obj) { return typeof obj; }; } else { _typeof10 = function _typeof10(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof10(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof9(obj) {
  if (typeof Symbol === "function" && _typeof10(Symbol.iterator) === "symbol") {
    _typeof9 = function _typeof9(obj) {
      return _typeof10(obj);
    };
  } else {
    _typeof9 = function _typeof9(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof10(obj);
    };
  }

  return _typeof9(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof8(obj) {
  if (typeof Symbol === "function" && _typeof9(Symbol.iterator) === "symbol") {
    _typeof8 = function _typeof8(obj) {
      return _typeof9(obj);
    };
  } else {
    _typeof8 = function _typeof8(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof9(obj);
    };
  }

  return _typeof8(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof7(obj) {
  if (typeof Symbol === "function" && _typeof8(Symbol.iterator) === "symbol") {
    _typeof7 = function _typeof7(obj) {
      return _typeof8(obj);
    };
  } else {
    _typeof7 = function _typeof7(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof8(obj);
    };
  }

  return _typeof7(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof6(obj) {
  if (typeof Symbol === "function" && _typeof7(Symbol.iterator) === "symbol") {
    _typeof6 = function _typeof6(obj) {
      return _typeof7(obj);
    };
  } else {
    _typeof6 = function _typeof6(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof7(obj);
    };
  }

  return _typeof6(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof5(obj) {
  if (typeof Symbol === "function" && _typeof6(Symbol.iterator) === "symbol") {
    _typeof5 = function _typeof5(obj) {
      return _typeof6(obj);
    };
  } else {
    _typeof5 = function _typeof5(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof6(obj);
    };
  }

  return _typeof5(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof4(obj) {
  if (typeof Symbol === "function" && _typeof5(Symbol.iterator) === "symbol") {
    _typeof4 = function _typeof4(obj) {
      return _typeof5(obj);
    };
  } else {
    _typeof4 = function _typeof4(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof5(obj);
    };
  }

  return _typeof4(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) {
  if (typeof Symbol === "function" && _typeof4(Symbol.iterator) === "symbol") {
    _typeof3 = function _typeof3(obj) {
      return _typeof4(obj);
    };
  } else {
    _typeof3 = function _typeof3(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof4(obj);
    };
  }

  return _typeof3(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

var relative = require('path').relative;

var Analyzer = require('@goto-bus-stop/common-shake').Analyzer;

var transformAst = require('transform-ast');

var wrapComment = require('wrap-comment');

var through = require('through2');

var convertSourceMap = require('convert-source-map');

module.exports = function commonShake(b, opts) {
  if (_typeof(b) !== 'object') {
    throw new Error('common-shakeify: must be used as a plugin, not a transform');
  }

  var basedir = b._options.basedir || process.cwd();
  var seen = {};
  opts = Object.assign({
    verbose: false,
    onExportDelete: function onExportDelete(path, name) {
      if (opts.verbose || opts.v) {
        console.warn('common-shake: removed', "`".concat(name, "`"), 'in', relative(basedir, path));
      }
    },
    onModuleBailout: function onModuleBailout(resource, reasons) {
      if (opts.verbose || opts.v) {
        reasons.forEach(function (reason) {
          if (seen[resource.resource + reason.reason]) return;
          seen[resource.resource + reason.reason] = true;
          var loc = reason.loc.start;
          var source = reason.source || resource.resource;
          console.warn('common-shake: bailed out: ', reason.reason, 'in', "".concat(relative(basedir, source), ":").concat(loc.line, ":").concat(loc.column));
        });
      }
    },
    onGlobalBailout: function onGlobalBailout(reasons) {
      if (opts.verbose || opts.v) {
        reasons.forEach(function (reason) {
          var loc = reason.loc.start;
          console.warn('common-shake: GLOBAL BAILOUT:', reason.reason, 'in', "".concat(relative(basedir, reason.source), ":").concat(loc.line, ":").concat(loc.column));
        });
      }
    }
  }, opts);
  opts.sourceMap = !!b._options.debug;
  opts.fullPaths = !!b._options.fullPaths;
  addHooks();
  b.on('reset', addHooks);

  function addHooks() {
    b.pipeline.get('label').unshift(createStream(opts));
  }
};

function createStream(opts) {
  var analyzer = new Analyzer();
  var rows = new Map();
  var strings = new Map();
  var duplicates = new Map();
  return through.obj(onfile, onend);

  function onfile(row, enc, next) {
    var index = opts.fullPaths ? row.file : row.index;
    var source = row.source;

    if (row.dedupe) {
      // For modules that were deduped, attach the duplicates to the original row,
      // and pass the original source to the analyzer.
      // Later on, we'll merge the used declarations together, so everything still
      // works if dependencies of different copies of the deduped module use
      // different parts of that module.
      var deduped = rows.get(row.dedupeIndex);

      if (deduped) {
        addDuplicate(deduped, row);
        source = deduped.source;
      } else {
        return next(new Error("Could not redupe module ".concat(row.file)));
      }
    }

    var ast;
    var string = transformAst(source, {
      locations: true,
      ecmaVersion: 9,
      inputFilename: row.file
    }, function (node) {
      if (node.type === 'Program') ast = node;
    });
    analyzer.run(ast, index);
    var deps = opts.fullPaths ? row.deps : row.indexDeps;
    Object.keys(deps).forEach(function (name) {
      if (deps[name]) {
        analyzer.resolve(index, name, deps[name]);
      }
    });

    if (row.entry) {
      analyzer.getModule(index).forceExport();
    }

    rows.set(index, row);
    strings.set(index, string);
    next();
  }

  function onend(next) {
    var _this = this;

    if (!analyzer.isSuccess()) {
      opts.onGlobalBailout(analyzer.bailouts);
      rows.forEach(function (row) {
        _this.push(row);
      });
      next();
      return;
    }

    analyzer.modules.forEach(function (module, key) {
      var string = strings.get(key);
      var row = rows.get(key);
      var dupes = getDuplicates(row); // If this module was a duplicate of another module,
      // the original module will have been rewritten already.

      if (row.dedupe) {
        _this.push(row);

        return;
      }

      if (module.bailouts) {
        opts.onModuleBailout(module, module.bailouts);

        _this.push(row);

        return;
      }

      module.getDeclarations().forEach(function (decl) {
        if (!isUsed(decl.name)) {
          if (opts.onExportDelete(row.sourceFile || row.file, decl.name) !== false) {
            remove(string, decl.ast);
          }
        }
      });
      var transformed = string.toString();

      if (opts.sourceMap) {
        row.source = transformed + '\n' + convertSourceMap.fromObject(string.map).toComment();
      } else {
        row.source = transformed;
      }

      _this.push(row); // Check if a name was used in this module, or
      // in any of this module's deduped versions.


      function isUsed(name) {
        if (module.isUsed(name)) {
          return true;
        }

        if (dupes.length > 0) {
          return dupes.some(function (dupe) {
            var m = analyzer.modules.get(dupe.index);
            return m && m.isUsed(name);
          });
        }

        return false;
      }
    });
    next();
  }

  function remove(string, node) {
    if (node.type === 'AssignmentExpression') {
      var prefix = commentify("".concat(node.left.getSource(), " =")) + ' '; // Anonymous function and class expressions are parsed as statements if they
      // are the first thing in a statement, which can happen if the `exports.xyz`
      // assignment happened inside a SequenceExpression (usually after minification).
      // eg: `exports.a=function(){},exports.b=function(){}`
      // Here if `exports.a` is removed we need to make sure the `function(){}` is still
      // an expression, by prepending `void 0,` to result in:
      // `void 0,function(){},exports.b=function(){}`

      var isPossiblyAmbiguousExpression = node.right.type === 'FunctionExpression' || node.right.type === 'ClassExpression';

      if (isPossiblyAmbiguousExpression && node.parent.type === 'SequenceExpression' || // without this, `exports.a = exports.b = xyz` eliminating exports.a becomes `void exports.b = xyz`
      // which is invalid.
      node.right.type === 'AssignmentExpression' || // Don't output a statement containing only `void () => {}`
      node.right.type === 'ArrowFunctionExpression') {
        // ignore alias assignment expression `exports.a = exports.b = exports.c`
        // unless the last argument is noname function
        var isAliasAssignment = node.right.type === 'AssignmentExpression' && node.right.left.type === 'MemberExpression' && node.right.left.object.name === 'exports';
        var isFunction = isAliasAssignment && node.right.right.type === 'FunctionExpression';
        var isClass = isAliasAssignment && node.right.right.type === 'ClassExpression';

        if (!isAliasAssignment || isFunction || isClass) {
          prefix += 'void 0, ';
        }
      } // Make sure we can't accidentally continue a previous statement.
      // eg in `exports.a = [0]` the `[0]` could continue a previous statement if that
      // did not have a semicolon. By putting `void ` in front we force a new statement.
      else if (node.parent.type === 'ExpressionStatement') {
          prefix += 'void ';
        } // Acorn silently strips parens, and node.right.start might be after one
      // or more parenthesis that we need to keep. Eg, exports.a = (1+1)


      if (node.right.end !== node.end) {
        // Replace entire expression. node.start - node.end will wrap the entire expression.
        string.overwrite(node.start, node.end, prefix + '(' + node.right.getSource() + ')');
      } else {
        string.overwrite(node.start, node.right.start, prefix);
      }

      return;
    } else if (node.type === 'Property') {
      // We may have to also overwrite a comma here, eg in `module.exports = {a, b, c}`
      // where `a` and `b` are unused. Else we would end up with `{,, c}`.
      var match = string.original.slice(node.end).match(/^\s*,/);

      if (match) {
        string.overwrite(node.start, node.end + match[0].length, commentify(node.getSource()));
        return;
      }
    }

    node.edit.update(commentify(node.getSource()));
  }

  function commentify(str) {
    return wrapComment("common-shake removed: ".concat(str));
  }

  function addDuplicate(row, dupe) {
    if (!duplicates.has(row)) {
      duplicates.set(row, [dupe]);
    } else {
      duplicates.get(row).push(dupe);
    }
  }

  function getDuplicates(row) {
    return duplicates.get(row) || [];
  }
}