"use strict";

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

(function () {
  var _$dep_3 = {};
  "use strict";

  Object.defineProperty(_$dep_3, "__esModule", {
    value: true
  });
  _$dep_3["default"] = whatever;

  function whatever(xyz) {
    return xyz.toUpperCase();
  }

  var trailingNewlineRegex = /\n[\s]+$/;
  var leadingNewlineRegex = /^\n[\s]+/;
  var trailingSpaceRegex = /[\s]+$/;
  var leadingSpaceRegex = /^[\s]+/;
  var multiSpaceRegex = /[\n\s]+/g;
  var TEXT_TAGS = ['a', 'abbr', 'b', 'bdi', 'bdo', 'br', 'cite', 'data', 'dfn', 'em', 'i', 'kbd', 'mark', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'amp', 'small', 'span', 'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr'];
  var VERBATIM_TAGS = ['code', 'pre', 'textarea'];

  var _$appendChild_1 = function appendChild(el, childs) {
    if (!Array.isArray(childs)) return;
    var nodeName = el.nodeName.toLowerCase();
    var hadText = false;
    var value, leader;

    for (var i = 0, len = childs.length; i < len; i++) {
      var node = childs[i];

      if (Array.isArray(node)) {
        appendChild(el, node);
        continue;
      }

      if (typeof node === 'number' || typeof node === 'boolean' || typeof node === 'function' || node instanceof Date || node instanceof RegExp) {
        node = node.toString();
      }

      var lastChild = el.childNodes[el.childNodes.length - 1]; // Iterate over text nodes

      if (typeof node === 'string') {
        hadText = true; // If we already had text, append to the existing text

        if (lastChild && lastChild.nodeName === '#text') {
          lastChild.nodeValue += node; // We didn't have a text node yet, create one
        } else {
          node = document.createTextNode(node);
          el.appendChild(node);
          lastChild = node;
        } // If this is the last of the child nodes, make sure we close it out
        // right


        if (i === len - 1) {
          hadText = false; // Trim the child text nodes if the current node isn't a
          // node where whitespace matters.

          if (TEXT_TAGS.indexOf(nodeName) === -1 && VERBATIM_TAGS.indexOf(nodeName) === -1) {
            value = lastChild.nodeValue.replace(leadingNewlineRegex, '').replace(trailingSpaceRegex, '').replace(trailingNewlineRegex, '').replace(multiSpaceRegex, ' ');

            if (value === '') {
              el.removeChild(lastChild);
            } else {
              lastChild.nodeValue = value;
            }
          } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
            // The very first node in the list should not have leading
            // whitespace. Sibling text nodes should have whitespace if there
            // was any.
            leader = i === 0 ? '' : ' ';
            value = lastChild.nodeValue.replace(leadingNewlineRegex, leader).replace(leadingSpaceRegex, ' ').replace(trailingSpaceRegex, '').replace(trailingNewlineRegex, '').replace(multiSpaceRegex, ' ');
            lastChild.nodeValue = value;
          }
        } // Iterate over DOM nodes

      } else if (node && node.nodeType) {
        // If the last node was a text node, make sure it is properly closed out
        if (hadText) {
          hadText = false; // Trim the child text nodes if the current node isn't a
          // text node or a code node

          if (TEXT_TAGS.indexOf(nodeName) === -1 && VERBATIM_TAGS.indexOf(nodeName) === -1) {
            value = lastChild.nodeValue.replace(leadingNewlineRegex, '').replace(trailingNewlineRegex, '').replace(multiSpaceRegex, ' '); // Remove empty text nodes, append otherwise

            if (value === '') {
              el.removeChild(lastChild);
            } else {
              lastChild.nodeValue = value;
            } // Trim the child nodes if the current node is not a node
            // where all whitespace must be preserved

          } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
            value = lastChild.nodeValue.replace(leadingSpaceRegex, ' ').replace(leadingNewlineRegex, '').replace(trailingNewlineRegex, '').replace(multiSpaceRegex, ' ');
            lastChild.nodeValue = value;
          }
        } // Store the last nodename


        var _nodeName = node.nodeName;
        if (_nodeName) nodeName = _nodeName.toLowerCase(); // Append the node to the DOM

        el.appendChild(node);
      }
    }
  };

  var _$app_2 = {};
  "use strict";

  var _dep = _interopRequireDefault(_$dep_3);

  var _athelas, _f, _f2, _w_, _db, _pl3Ns, _flex, _ttu, _f3, _f4, _pv, _mw;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  document.body.appendChild((_mw = document.createElement("section"), _mw.setAttribute("class", "mw7 center"), _$appendChild_1(_mw, ["\n\t ", (_athelas = document.createElement("h2"), _athelas.setAttribute("class", "athelas ph3 ph0-l"), _$appendChild_1(_athelas, ["News"]), _athelas), "\n\t ", (_pv = document.createElement("article"), _pv.setAttribute("class", "pv4 bt bb b--black-10 ph3 ph0-l"), _$appendChild_1(_pv, ["\n\t\t", (_flex = document.createElement("div"), _flex.setAttribute("class", "flex flex-column flex-row-ns"), _$appendChild_1(_flex, ["\n\t\t  ", (_w_ = document.createElement("div"), _w_.setAttribute("class", "w-100 w-60-ns pr3-ns order-2 order-1-ns"), _$appendChild_1(_w_, ["\n\t\t\t ", (_f = document.createElement("h1"), _f.setAttribute("class", "f3 athelas mt0 lh-title"), _$appendChild_1(_f, [(0, _dep["default"])('title')]), _f), "\n\t\t\t ", (_f2 = document.createElement("p"), _f2.setAttribute("class", "f5 f4-l lh-copy athelas"), _$appendChild_1(_f2, ["\n\t\t\t\t", (0, _dep["default"])('excerpt'), "\n\t\t\t "]), _f2), "\n\t\t  "]), _w_), "\n\t\t  ", (_pl3Ns = document.createElement("div"), _pl3Ns.setAttribute("class", "pl3-ns order-1 order-2-ns mb4 mb0-ns w-100 w-40-ns"), _$appendChild_1(_pl3Ns, ["\n\t\t\t ", (_db = document.createElement("img"), _db.setAttribute("src", "http://mrmrs.github.io/photos/cpu.jpg"), _db.setAttribute("alt", "Photo of a dimly lit room with a computer interface terminal."), _db.setAttribute("class", "db"), _db), "\n\t\t  "]), _pl3Ns), "\n\t\t"]), _flex), "\n\t\t", (_f3 = document.createElement("p"), _f3.setAttribute("class", "f6 lh-copy gray mv0"), _$appendChild_1(_f3, ["By ", (_ttu = document.createElement("span"), _ttu.setAttribute("class", "ttu"), _$appendChild_1(_ttu, [(0, _dep["default"])('author')]), _ttu)]), _f3), "\n\t\t", (_f4 = document.createElement("time"), _f4.setAttribute("class", "f6 db gray"), _$appendChild_1(_f4, [(0, _dep["default"])('timestamp')]), _f4), "\n\t "]), _pv), "\n  "]), _mw));
})();