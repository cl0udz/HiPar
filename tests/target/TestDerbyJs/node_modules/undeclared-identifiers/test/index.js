"use strict";

var test = require('tape');

var acorn = require('acorn-node');

var find = require('../');

test('undeclared variables', function (t) {
  t.deepEqual(find("\n    var a, b\n    a, b, c\n  "), {
    identifiers: ['c'],
    properties: []
  });
  t.end();
});
test('pass in a parsed ast', function (t) {
  t.deepEqual(find(acorn.parse("\n    var a, b\n    a, b, c\n  ")), {
    identifiers: ['c'],
    properties: []
  });
  t.end();
});
test('undeclared properties', function (t) {
  t.deepEqual(find("\n    var a, b\n    a, b, c, d.e\n  "), {
    identifiers: ['c', 'd'],
    properties: ['d.e']
  });
  t.end();
});
test('wildcard use of undeclared name', function (t) {
  t.deepEqual(find("\n    function func () {}\n    new A()\n    A.from()\n    func(b)\n    C.from()\n  ", {
    wildcard: true
  }), {
    identifiers: ['A', 'b', 'C'],
    properties: ['A.*', 'A.from', 'b.*', 'C.from']
  });
  t.end();
});
test('wildcard use of undeclared name (different order)', function (t) {
  t.deepEqual(find("\n    A.from()\n    new A()\n  ", {
    wildcard: true
  }), {
    identifiers: ['A'],
    properties: ['A.from', 'A.*']
  });
  t.end();
});
test('function names', function (t) {
  t.deepEqual(find("\n    function x () {\n      return x\n    }\n    x()\n  "), {
    identifiers: [],
    properties: []
  });
  t.deepEqual(find("\n    function x () {\n      return x\n    }\n    y()\n  "), {
    identifiers: ['y'],
    properties: []
  });
  t.end();
});
test('class names', function (t) {
  t.deepEqual(find("\n    class X {}\n    new X()\n  "), {
    identifiers: [],
    properties: []
  });
  t.deepEqual(find("\n    class X extends Y {}\n    new X()\n  "), {
    identifiers: ['Y'],
    properties: []
  });
  t.deepEqual(find("\n    class Y {}\n    class X extends Y {}\n    new X()\n  "), {
    identifiers: [],
    properties: []
  });
  t.end();
});
test('class methods', function (t) {
  t.deepEqual(find("\n    class X {\n      constructor() { u }\n      bar() { v }\n      static foo() { w }\n    }\n  "), {
    identifiers: ['u', 'v', 'w'],
    properties: []
  });
  t.end();
});
test('super', function (t) {
  t.deepEqual(find("\n    class X extends Y {\n      constructor() { super() }\n    }\n  "), {
    identifiers: ['Y'],
    properties: []
  });
  t.deepEqual(find("\n    class X {\n      foo() { super.foo }\n    }\n  "), {
    identifiers: [],
    properties: []
  });
  t.end();
});
test('scope', function (t) {
  t.deepEqual(find("\n    function y () {\n      function x () {\n        return x\n      }\n    }\n    x(y(x.y))\n  "), {
    identifiers: ['x'],
    properties: ['x.y']
  });
  t.end();
});
test('block scope', function (t) {
  t.deepEqual(find("\n    var x\n    { var y; let z }\n    x, y, z\n  "), {
    identifiers: ['z'],
    properties: []
  });
  t.end();
});
test('function parameters', function (t) {
  t.deepEqual(find("\n    function a (a1, a2) { a, a1, a2, a3 }\n    ;(function b (b1, b2) { b, b1, b2, b3 })\n    ;((c1, c2) => { c1, c2, c3 })\n  "), {
    identifiers: ['a3', 'b3', 'c3'],
    properties: []
  });
  t.deepEqual(find("\n    function a (a1, a2) { }\n    a, a1, a2\n  "), {
    identifiers: ['a1', 'a2'],
    properties: []
  });
  t.end();
});
test('assignment', function (t) {
  t.deepEqual(find("\n    var a\n    b = 2\n    b.c = 3\n  "), {
    identifiers: ['b'],
    properties: ['b.c']
  });
  t.end();
});
test('catch', function (t) {
  t.deepEqual(find("\n    try { var a } catch (err) { err }\n    try { let b } catch (orr) { orr }\n    a, b\n  "), {
    identifiers: ['b'],
    properties: []
  });
  t.end();
});
test('object prototype names', function (t) {
  t.deepEqual(find("\n    var propertyIsEnumerable, hasOwnProperty\n    isPrototypeOf\n  "), {
    identifiers: ['isPrototypeOf'],
    properties: []
  });
  t.end();
});
test('labels', function (t) {
  t.deepEqual(find("\n    a: a;\n    b: a;\n    c: a;\n  "), {
    identifiers: ['a'],
    properties: []
  });
  t.end();
});
test('property keys', function (t) {
  t.deepEqual(find("\n    ({ a: a,\n    b: a, [d]: a,\n    c: a, })\n  "), {
    identifiers: ['a', 'd'],
    properties: []
  });
  t.end();
});
test('string property access', function (t) {
  t.deepEqual(find("\n    Buffer[\"isBuffer\"]\n  "), {
    identifiers: ['Buffer'],
    properties: ['Buffer.isBuffer']
  });
  t.end();
});