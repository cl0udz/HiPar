"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof10(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof10 = function _typeof10(obj) { return typeof obj; }; } else { _typeof10 = function _typeof10(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof10(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof9(obj) {
  if (typeof Symbol === "function" && _typeof10(Symbol.iterator) === "symbol") {
    _typeof9 = function _typeof9(obj) {
      return _typeof10(obj);
    };
  } else {
    _typeof9 = function _typeof9(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof10(obj);
    };
  }

  return _typeof9(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof8(obj) {
  if (typeof Symbol === "function" && _typeof9(Symbol.iterator) === "symbol") {
    _typeof8 = function _typeof8(obj) {
      return _typeof9(obj);
    };
  } else {
    _typeof8 = function _typeof8(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof9(obj);
    };
  }

  return _typeof8(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof7(obj) {
  if (typeof Symbol === "function" && _typeof8(Symbol.iterator) === "symbol") {
    _typeof7 = function _typeof7(obj) {
      return _typeof8(obj);
    };
  } else {
    _typeof7 = function _typeof7(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof8(obj);
    };
  }

  return _typeof7(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof6(obj) {
  if (typeof Symbol === "function" && _typeof7(Symbol.iterator) === "symbol") {
    _typeof6 = function _typeof6(obj) {
      return _typeof7(obj);
    };
  } else {
    _typeof6 = function _typeof6(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof7(obj);
    };
  }

  return _typeof6(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof5(obj) {
  if (typeof Symbol === "function" && _typeof6(Symbol.iterator) === "symbol") {
    _typeof5 = function _typeof5(obj) {
      return _typeof6(obj);
    };
  } else {
    _typeof5 = function _typeof5(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof6(obj);
    };
  }

  return _typeof5(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof4(obj) {
  if (typeof Symbol === "function" && _typeof5(Symbol.iterator) === "symbol") {
    _typeof4 = function _typeof4(obj) {
      return _typeof5(obj);
    };
  } else {
    _typeof4 = function _typeof4(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof5(obj);
    };
  }

  return _typeof4(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof3(obj) {
  if (typeof Symbol === "function" && _typeof4(Symbol.iterator) === "symbol") {
    _typeof3 = function _typeof3(obj) {
      return _typeof4(obj);
    };
  } else {
    _typeof3 = function _typeof3(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof4(obj);
    };
  }

  return _typeof3(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
} // CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/LICENSE


(function (mod) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object") // CommonJS
    mod(require("../../lib/codemirror"));else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);else // Plain browser env
    mod(CodeMirror);
})(function (CodeMirror) {
  "use strict";

  CodeMirror.defineMode("apl", function () {
    var builtInOps = {
      ".": "innerProduct",
      "\\": "scan",
      "/": "reduce",
      "⌿": "reduce1Axis",
      "⍀": "scan1Axis",
      "¨": "each",
      "⍣": "power"
    };
    var builtInFuncs = {
      "+": ["conjugate", "add"],
      "−": ["negate", "subtract"],
      "×": ["signOf", "multiply"],
      "÷": ["reciprocal", "divide"],
      "⌈": ["ceiling", "greaterOf"],
      "⌊": ["floor", "lesserOf"],
      "∣": ["absolute", "residue"],
      "⍳": ["indexGenerate", "indexOf"],
      "?": ["roll", "deal"],
      "⋆": ["exponentiate", "toThePowerOf"],
      "⍟": ["naturalLog", "logToTheBase"],
      "○": ["piTimes", "circularFuncs"],
      "!": ["factorial", "binomial"],
      "⌹": ["matrixInverse", "matrixDivide"],
      "<": [null, "lessThan"],
      "≤": [null, "lessThanOrEqual"],
      "=": [null, "equals"],
      ">": [null, "greaterThan"],
      "≥": [null, "greaterThanOrEqual"],
      "≠": [null, "notEqual"],
      "≡": ["depth", "match"],
      "≢": [null, "notMatch"],
      "∈": ["enlist", "membership"],
      "⍷": [null, "find"],
      "∪": ["unique", "union"],
      "∩": [null, "intersection"],
      "∼": ["not", "without"],
      "∨": [null, "or"],
      "∧": [null, "and"],
      "⍱": [null, "nor"],
      "⍲": [null, "nand"],
      "⍴": ["shapeOf", "reshape"],
      ",": ["ravel", "catenate"],
      "⍪": [null, "firstAxisCatenate"],
      "⌽": ["reverse", "rotate"],
      "⊖": ["axis1Reverse", "axis1Rotate"],
      "⍉": ["transpose", null],
      "↑": ["first", "take"],
      "↓": [null, "drop"],
      "⊂": ["enclose", "partitionWithAxis"],
      "⊃": ["diclose", "pick"],
      "⌷": [null, "index"],
      "⍋": ["gradeUp", null],
      "⍒": ["gradeDown", null],
      "⊤": ["encode", null],
      "⊥": ["decode", null],
      "⍕": ["format", "formatByExample"],
      "⍎": ["execute", null],
      "⊣": ["stop", "left"],
      "⊢": ["pass", "right"]
    };
    var isOperator = /[\.\/⌿⍀¨⍣]/;
    var isNiladic = /⍬/;
    var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
    var isArrow = /←/;
    var isComment = /[⍝#].*$/;

    var stringEater = function stringEater(type) {
      var prev;
      prev = false;
      return function (c) {
        prev = c;

        if (c === type) {
          return prev === "\\";
        }

        return true;
      };
    };

    return {
      startState: function startState() {
        return {
          prev: false,
          func: false,
          op: false,
          string: false,
          escape: false
        };
      },
      token: function token(stream, state) {
        var ch, funcName;

        if (stream.eatSpace()) {
          return null;
        }

        ch = stream.next();

        if (ch === '"' || ch === "'") {
          stream.eatWhile(stringEater(ch));
          stream.next();
          state.prev = true;
          return "string";
        }

        if (/[\[{\(]/.test(ch)) {
          state.prev = false;
          return null;
        }

        if (/[\]}\)]/.test(ch)) {
          state.prev = true;
          return null;
        }

        if (isNiladic.test(ch)) {
          state.prev = false;
          return "niladic";
        }

        if (/[¯\d]/.test(ch)) {
          if (state.func) {
            state.func = false;
            state.prev = false;
          } else {
            state.prev = true;
          }

          stream.eatWhile(/[\w\.]/);
          return "number";
        }

        if (isOperator.test(ch)) {
          return "operator apl-" + builtInOps[ch];
        }

        if (isArrow.test(ch)) {
          return "apl-arrow";
        }

        if (isFunction.test(ch)) {
          funcName = "apl-";

          if (builtInFuncs[ch] != null) {
            if (state.prev) {
              funcName += builtInFuncs[ch][1];
            } else {
              funcName += builtInFuncs[ch][0];
            }
          }

          state.func = true;
          state.prev = false;
          return "function " + funcName;
        }

        if (isComment.test(ch)) {
          stream.skipToEnd();
          return "comment";
        }

        if (ch === "∘" && stream.peek() === ".") {
          stream.next();
          return "function jot-dot";
        }

        stream.eatWhile(/[\w\$_]/);
        state.prev = true;
        return "keyword";
      }
    };
  });
  CodeMirror.defineMIME("text/apl", "apl");
});