"use strict";

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addLineWidget = addLineWidget;
exports.LineWidget = void 0;

var _operations = require("../display/operations.js");

var _scrolling = require("../display/scrolling.js");

var _view_tracking = require("../display/view_tracking.js");

var _spans = require("../line/spans.js");

var _utils_line = require("../line/utils_line.js");

var _widgets = require("../measurement/widgets.js");

var _changes = require("./changes.js");

var _event = require("../util/event.js");

var _operation_group = require("../util/operation_group.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var LineWidget =
/*#__PURE__*/
function () {
  function LineWidget(doc, node, options) {
    _classCallCheck(this, LineWidget);

    if (options) for (var opt in options) {
      if (options.hasOwnProperty(opt)) this[opt] = options[opt];
    }
    this.doc = doc;
    this.node = node;
  }

  _createClass(LineWidget, [{
    key: "clear",
    value: function clear() {
      var cm = this.doc.cm,
          ws = this.line.widgets,
          line = this.line,
          no = (0, _utils_line.lineNo)(line);
      if (no == null || !ws) return;

      for (var i = 0; i < ws.length; ++i) {
        if (ws[i] == this) ws.splice(i--, 1);
      }

      if (!ws.length) line.widgets = null;
      var height = (0, _widgets.widgetHeight)(this);
      (0, _utils_line.updateLineHeight)(line, Math.max(0, line.height - height));

      if (cm) {
        (0, _operations.runInOp)(cm, function () {
          adjustScrollWhenAboveVisible(cm, line, -height);
          (0, _view_tracking.regLineChange)(cm, no, "widget");
        });
        (0, _operation_group.signalLater)(cm, "lineWidgetCleared", cm, this, no);
      }
    }
  }, {
    key: "changed",
    value: function changed() {
      var _this = this;

      var oldH = this.height,
          cm = this.doc.cm,
          line = this.line;
      this.height = null;
      var diff = (0, _widgets.widgetHeight)(this) - oldH;
      if (!diff) return;
      if (!(0, _spans.lineIsHidden)(this.doc, line)) (0, _utils_line.updateLineHeight)(line, line.height + diff);

      if (cm) {
        (0, _operations.runInOp)(cm, function () {
          cm.curOp.forceUpdate = true;
          adjustScrollWhenAboveVisible(cm, line, diff);
          (0, _operation_group.signalLater)(cm, "lineWidgetChanged", cm, _this, (0, _utils_line.lineNo)(line));
        });
      }
    }
  }]);

  return LineWidget;
}();

exports.LineWidget = LineWidget;
(0, _event.eventMixin)(LineWidget);

function adjustScrollWhenAboveVisible(cm, line, diff) {
  if ((0, _spans.heightAtLine)(line) < (cm.curOp && cm.curOp.scrollTop || cm.doc.scrollTop)) (0, _scrolling.addToScrollTop)(cm, diff);
}

function addLineWidget(doc, handle, node, options) {
  var widget = new LineWidget(doc, node, options);
  var cm = doc.cm;
  if (cm && widget.noHScroll) cm.display.alignWidgets = true;
  (0, _changes.changeLine)(doc, handle, "widget", function (line) {
    var widgets = line.widgets || (line.widgets = []);
    if (widget.insertAt == null) widgets.push(widget);else widgets.splice(Math.min(widgets.length - 1, Math.max(0, widget.insertAt)), 0, widget);
    widget.line = line;

    if (cm && !(0, _spans.lineIsHidden)(doc, line)) {
      var aboveVisible = (0, _spans.heightAtLine)(line) < doc.scrollTop;
      (0, _utils_line.updateLineHeight)(line, line.height + (0, _widgets.widgetHeight)(widget));
      if (aboveVisible) (0, _scrolling.addToScrollTop)(cm, widget.height);
      cm.curOp.forceUpdate = true;
    }

    return true;
  });
  if (cm) (0, _operation_group.signalLater)(cm, "lineWidgetAdded", cm, widget, typeof handle == "number" ? handle : (0, _utils_line.lineNo)(handle));
  return widget;
}