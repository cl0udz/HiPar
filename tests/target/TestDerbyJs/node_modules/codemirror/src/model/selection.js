"use strict";

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.string.anchor");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeSelection = normalizeSelection;
exports.simpleSelection = simpleSelection;
exports.Range = exports.Selection = void 0;

var _pos = require("../line/pos.js");

var _misc = require("../util/misc.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Selection =
/*#__PURE__*/
function () {
  function Selection(ranges, primIndex) {
    _classCallCheck(this, Selection);

    this.ranges = ranges;
    this.primIndex = primIndex;
  }

  _createClass(Selection, [{
    key: "primary",
    value: function primary() {
      return this.ranges[this.primIndex];
    }
  }, {
    key: "equals",
    value: function equals(other) {
      if (other == this) return true;
      if (other.primIndex != this.primIndex || other.ranges.length != this.ranges.length) return false;

      for (var i = 0; i < this.ranges.length; i++) {
        var here = this.ranges[i],
            there = other.ranges[i];
        if (!(0, _pos.equalCursorPos)(here.anchor, there.anchor) || !(0, _pos.equalCursorPos)(here.head, there.head)) return false;
      }

      return true;
    }
  }, {
    key: "deepCopy",
    value: function deepCopy() {
      var out = [];

      for (var i = 0; i < this.ranges.length; i++) {
        out[i] = new Range((0, _pos.copyPos)(this.ranges[i].anchor), (0, _pos.copyPos)(this.ranges[i].head));
      }

      return new Selection(out, this.primIndex);
    }
  }, {
    key: "somethingSelected",
    value: function somethingSelected() {
      for (var i = 0; i < this.ranges.length; i++) {
        if (!this.ranges[i].empty()) return true;
      }

      return false;
    }
  }, {
    key: "contains",
    value: function contains(pos, end) {
      if (!end) end = pos;

      for (var i = 0; i < this.ranges.length; i++) {
        var range = this.ranges[i];
        if ((0, _pos.cmp)(end, range.from()) >= 0 && (0, _pos.cmp)(pos, range.to()) <= 0) return i;
      }

      return -1;
    }
  }]);

  return Selection;
}();

exports.Selection = Selection;

var Range =
/*#__PURE__*/
function () {
  function Range(anchor, head) {
    _classCallCheck(this, Range);

    this.anchor = anchor;
    this.head = head;
  }

  _createClass(Range, [{
    key: "from",
    value: function from() {
      return (0, _pos.minPos)(this.anchor, this.head);
    }
  }, {
    key: "to",
    value: function to() {
      return (0, _pos.maxPos)(this.anchor, this.head);
    }
  }, {
    key: "empty",
    value: function empty() {
      return this.head.line == this.anchor.line && this.head.ch == this.anchor.ch;
    }
  }]);

  return Range;
}(); // Take an unsorted, potentially overlapping set of ranges, and
// build a selection out of it. 'Consumes' ranges array (modifying
// it).


exports.Range = Range;

function normalizeSelection(cm, ranges, primIndex) {
  var mayTouch = cm && cm.options.selectionsMayTouch;
  var prim = ranges[primIndex];
  ranges.sort(function (a, b) {
    return (0, _pos.cmp)(a.from(), b.from());
  });
  primIndex = (0, _misc.indexOf)(ranges, prim);

  for (var i = 1; i < ranges.length; i++) {
    var cur = ranges[i],
        prev = ranges[i - 1];
    var diff = (0, _pos.cmp)(prev.to(), cur.from());

    if (mayTouch && !cur.empty() ? diff > 0 : diff >= 0) {
      var from = (0, _pos.minPos)(prev.from(), cur.from()),
          to = (0, _pos.maxPos)(prev.to(), cur.to());
      var inv = prev.empty() ? cur.from() == cur.head : prev.from() == prev.head;
      if (i <= primIndex) --primIndex;
      ranges.splice(--i, 2, new Range(inv ? to : from, inv ? from : to));
    }
  }

  return new Selection(ranges, primIndex);
}

function simpleSelection(anchor, head) {
  return new Selection([new Range(anchor, head || anchor)], 0);
}