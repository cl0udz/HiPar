"use strict";

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _misc = require("./misc.js");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var StringStream =
/*#__PURE__*/
function () {
  function StringStream(string, tabSize, lineOracle) {
    _classCallCheck(this, StringStream);

    this.pos = this.start = 0;
    this.string = string;
    this.tabSize = tabSize || 8;
    this.lastColumnPos = this.lastColumnValue = 0;
    this.lineStart = 0;
    this.lineOracle = lineOracle;
  }

  _createClass(StringStream, [{
    key: "eol",
    value: function eol() {
      return this.pos >= this.string.length;
    }
  }, {
    key: "sol",
    value: function sol() {
      return this.pos == this.lineStart;
    }
  }, {
    key: "peek",
    value: function peek() {
      return this.string.charAt(this.pos) || undefined;
    }
  }, {
    key: "next",
    value: function next() {
      if (this.pos < this.string.length) return this.string.charAt(this.pos++);
    }
  }, {
    key: "eat",
    value: function eat(match) {
      var ch = this.string.charAt(this.pos);
      var ok;
      if (typeof match == "string") ok = ch == match;else ok = ch && (match.test ? match.test(ch) : match(ch));

      if (ok) {
        ++this.pos;
        return ch;
      }
    }
  }, {
    key: "eatWhile",
    value: function eatWhile(match) {
      var start = this.pos;

      while (this.eat(match)) {}

      return this.pos > start;
    }
  }, {
    key: "eatSpace",
    value: function eatSpace() {
      var start = this.pos;

      while (/[\s\u00a0]/.test(this.string.charAt(this.pos))) {
        ++this.pos;
      }

      return this.pos > start;
    }
  }, {
    key: "skipToEnd",
    value: function skipToEnd() {
      this.pos = this.string.length;
    }
  }, {
    key: "skipTo",
    value: function skipTo(ch) {
      var found = this.string.indexOf(ch, this.pos);

      if (found > -1) {
        this.pos = found;
        return true;
      }
    }
  }, {
    key: "backUp",
    value: function backUp(n) {
      this.pos -= n;
    }
  }, {
    key: "column",
    value: function column() {
      if (this.lastColumnPos < this.start) {
        this.lastColumnValue = (0, _misc.countColumn)(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
        this.lastColumnPos = this.start;
      }

      return this.lastColumnValue - (this.lineStart ? (0, _misc.countColumn)(this.string, this.lineStart, this.tabSize) : 0);
    }
  }, {
    key: "indentation",
    value: function indentation() {
      return (0, _misc.countColumn)(this.string, null, this.tabSize) - (this.lineStart ? (0, _misc.countColumn)(this.string, this.lineStart, this.tabSize) : 0);
    }
  }, {
    key: "match",
    value: function match(pattern, consume, caseInsensitive) {
      if (typeof pattern == "string") {
        var cased = function cased(str) {
          return caseInsensitive ? str.toLowerCase() : str;
        };

        var substr = this.string.substr(this.pos, pattern.length);

        if (cased(substr) == cased(pattern)) {
          if (consume !== false) this.pos += pattern.length;
          return true;
        }
      } else {
        var match = this.string.slice(this.pos).match(pattern);
        if (match && match.index > 0) return null;
        if (match && consume !== false) this.pos += match[0].length;
        return match;
      }
    }
  }, {
    key: "current",
    value: function current() {
      return this.string.slice(this.start, this.pos);
    }
  }, {
    key: "hideFirstChars",
    value: function hideFirstChars(n, inner) {
      this.lineStart += n;

      try {
        return inner();
      } finally {
        this.lineStart -= n;
      }
    }
  }, {
    key: "lookAhead",
    value: function lookAhead(n) {
      var oracle = this.lineOracle;
      return oracle && oracle.lookAhead(n);
    }
  }, {
    key: "baseToken",
    value: function baseToken() {
      var oracle = this.lineOracle;
      return oracle && oracle.baseToken(this.pos);
    }
  }]);

  return StringStream;
}();

var _default = StringStream;
exports["default"] = _default;