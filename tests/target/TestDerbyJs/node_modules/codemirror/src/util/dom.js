"use strict";

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classTest = classTest;
exports.removeChildren = removeChildren;
exports.removeChildrenAndAdd = removeChildrenAndAdd;
exports.elt = elt;
exports.eltP = eltP;
exports.contains = contains;
exports.activeElt = activeElt;
exports.addClass = addClass;
exports.joinClasses = joinClasses;
exports.selectInput = exports.range = exports.rmClass = void 0;

var _browser = require("./browser.js");

function classTest(cls) {
  return new RegExp("(^|\\s)" + cls + "(?:$|\\s)\\s*");
}

var rmClass = function rmClass(node, cls) {
  var current = node.className;
  var match = classTest(cls).exec(current);

  if (match) {
    var after = current.slice(match.index + match[0].length);
    node.className = current.slice(0, match.index) + (after ? match[1] + after : "");
  }
};

exports.rmClass = rmClass;

function removeChildren(e) {
  for (var count = e.childNodes.length; count > 0; --count) {
    e.removeChild(e.firstChild);
  }

  return e;
}

function removeChildrenAndAdd(parent, e) {
  return removeChildren(parent).appendChild(e);
}

function elt(tag, content, className, style) {
  var e = document.createElement(tag);
  if (className) e.className = className;
  if (style) e.style.cssText = style;
  if (typeof content == "string") e.appendChild(document.createTextNode(content));else if (content) for (var i = 0; i < content.length; ++i) {
    e.appendChild(content[i]);
  }
  return e;
} // wrapper for elt, which removes the elt from the accessibility tree


function eltP(tag, content, className, style) {
  var e = elt(tag, content, className, style);
  e.setAttribute("role", "presentation");
  return e;
}

var range;
exports.range = range;
if (document.createRange) exports.range = range = function range(node, start, end, endNode) {
  var r = document.createRange();
  r.setEnd(endNode || node, end);
  r.setStart(node, start);
  return r;
};else exports.range = range = function range(node, start, end) {
  var r = document.body.createTextRange();

  try {
    r.moveToElementText(node.parentNode);
  } catch (e) {
    return r;
  }

  r.collapse(true);
  r.moveEnd("character", end);
  r.moveStart("character", start);
  return r;
};

function contains(parent, child) {
  if (child.nodeType == 3) // Android browser always returns false when child is a textnode
    child = child.parentNode;
  if (parent.contains) return parent.contains(child);

  do {
    if (child.nodeType == 11) child = child.host;
    if (child == parent) return true;
  } while (child = child.parentNode);
}

function activeElt() {
  // IE and Edge may throw an "Unspecified Error" when accessing document.activeElement.
  // IE < 10 will throw when accessed while the page is loading or in an iframe.
  // IE > 9 and Edge will throw when accessed in an iframe if document.body is unavailable.
  var activeElement;

  try {
    activeElement = document.activeElement;
  } catch (e) {
    activeElement = document.body || null;
  }

  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement) {
    activeElement = activeElement.shadowRoot.activeElement;
  }

  return activeElement;
}

function addClass(node, cls) {
  var current = node.className;
  if (!classTest(cls).test(current)) node.className += (current ? " " : "") + cls;
}

function joinClasses(a, b) {
  var as = a.split(" ");

  for (var i = 0; i < as.length; i++) {
    if (as[i] && !classTest(as[i]).test(b)) b += " " + as[i];
  }

  return b;
}

var selectInput = function selectInput(node) {
  node.select();
};

exports.selectInput = selectInput;
if (_browser.ios) // Mobile Safari apparently has a bug where select() is broken.
  exports.selectInput = selectInput = function selectInput(node) {
    node.selectionStart = 0;
    node.selectionEnd = node.value.length;
  };else if (_browser.ie) // Suppress mysterious IE10 errors
  exports.selectInput = selectInput = function selectInput(node) {
    try {
      node.select();
    } catch (_e) {}
  };