"use strict";

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.timers");

require("core-js/modules/web.timers");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureGlobalHandlers = ensureGlobalHandlers;

var _focus = require("../display/focus.js");

var _event = require("../util/event.js");

function forEachCodeMirror(f) {
  if (!document.getElementsByClassName) return;
  var byClass = document.getElementsByClassName("CodeMirror"),
      editors = [];

  for (var i = 0; i < byClass.length; i++) {
    var cm = byClass[i].CodeMirror;
    if (cm) editors.push(cm);
  }

  if (editors.length) editors[0].operation(function () {
    for (var _i = 0; _i < editors.length; _i++) {
      f(editors[_i]);
    }
  });
}

var globalsRegistered = false;

function ensureGlobalHandlers() {
  if (globalsRegistered) return;
  registerGlobalHandlers();
  globalsRegistered = true;
}

function registerGlobalHandlers() {
  // When the window resizes, we need to refresh active editors.
  var resizeTimer;
  (0, _event.on)(window, "resize", function () {
    if (resizeTimer == null) resizeTimer = setTimeout(function () {
      resizeTimer = null;
      forEachCodeMirror(onResize);
    }, 100);
  }); // When the window loses focus, we want to show the editor as blurred

  (0, _event.on)(window, "blur", function () {
    return forEachCodeMirror(_focus.onBlur);
  });
} // Called when the window resizes


function onResize(cm) {
  var d = cm.display; // Might be a text scaling operation, clear size caches.

  d.cachedCharWidth = d.cachedTextHeight = d.cachedPaddingH = null;
  d.scrollbarsClipped = false;
  cm.setSize();
}