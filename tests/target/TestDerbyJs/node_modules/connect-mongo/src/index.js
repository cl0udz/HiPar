'use strict';

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof10(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof10 = function _typeof10(obj) { return typeof obj; }; } else { _typeof10 = function _typeof10(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof10(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof9(obj) {
  if (typeof Symbol === "function" && _typeof10(Symbol.iterator) === "symbol") {
    _typeof9 = function _typeof9(obj) {
      return _typeof10(obj);
    };
  } else {
    _typeof9 = function _typeof9(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof10(obj);
    };
  }

  return _typeof9(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof8(obj) {
  if (typeof Symbol === "function" && _typeof9(Symbol.iterator) === "symbol") {
    _typeof8 = function _typeof8(obj) {
      return _typeof9(obj);
    };
  } else {
    _typeof8 = function _typeof8(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof9(obj);
    };
  }

  return _typeof8(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof7(obj) {
  if (typeof Symbol === "function" && _typeof8(Symbol.iterator) === "symbol") {
    _typeof7 = function _typeof7(obj) {
      return _typeof8(obj);
    };
  } else {
    _typeof7 = function _typeof7(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof8(obj);
    };
  }

  return _typeof7(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof6(obj) {
  if (typeof Symbol === "function" && _typeof7(Symbol.iterator) === "symbol") {
    _typeof6 = function _typeof6(obj) {
      return _typeof7(obj);
    };
  } else {
    _typeof6 = function _typeof6(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof7(obj);
    };
  }

  return _typeof6(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof5(obj) {
  if (typeof Symbol === "function" && _typeof6(Symbol.iterator) === "symbol") {
    _typeof5 = function _typeof5(obj) {
      return _typeof6(obj);
    };
  } else {
    _typeof5 = function _typeof5(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof6(obj);
    };
  }

  return _typeof5(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof4(obj) {
  if (typeof Symbol === "function" && _typeof5(Symbol.iterator) === "symbol") {
    _typeof4 = function _typeof4(obj) {
      return _typeof5(obj);
    };
  } else {
    _typeof4 = function _typeof4(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof5(obj);
    };
  }

  return _typeof4(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof3(obj) {
  if (typeof Symbol === "function" && _typeof4(Symbol.iterator) === "symbol") {
    _typeof3 = function _typeof3(obj) {
      return _typeof4(obj);
    };
  } else {
    _typeof3 = function _typeof3(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof4(obj);
    };
  }

  return _typeof3(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof2(obj) {
  if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return _typeof3(obj);
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof3(obj);
    };
  }

  return _typeof2(obj);
}

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/web.timers");

require("core-js/modules/web.url.to-json");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var MongoClient = require('mongodb');

var _require = require('./helper'),
    mergeMongoOptions = _require.mergeMongoOptions;

function withCallback(promise, cb) {
  // Assume that cb is a function - type checks and handling type errors
  // can be done by caller
  if (cb) {
    promise.then(function (res) {
      return cb(null, res);
    })["catch"](cb);
  }

  return promise;
}

function defaultSerializeFunction(session) {
  // Copy each property of the session to a new object
  var obj = {};
  var prop;

  for (prop in session) {
    if (prop === 'cookie') {
      // Convert the cookie instance to an object, if possible
      // This gets rid of the duplicate object under session.cookie.data property
      obj.cookie = session.cookie.toJSON ? session.cookie.toJSON() : session.cookie;
    } else {
      obj[prop] = session[prop];
    }
  }

  return obj;
}

function computeTransformFunctions(options) {
  if (options.serialize || options.unserialize) {
    return {
      serialize: options.serialize || defaultSerializeFunction,
      unserialize: options.unserialize || function (x) {
        return x;
      }
    };
  }

  if (options.stringify === false) {
    return {
      serialize: defaultSerializeFunction,
      unserialize: function unserialize(x) {
        return x;
      }
    };
  } // Default case


  return {
    serialize: JSON.stringify,
    unserialize: JSON.parse
  };
}

module.exports = function (connect) {
  var Store = connect.Store || connect.session.Store;
  var MemoryStore = connect.MemoryStore || connect.session.MemoryStore;

  var MongoStore =
  /*#__PURE__*/
  function (_Store) {
    _inherits(MongoStore, _Store);

    function MongoStore(options) {
      var _this;

      _classCallCheck(this, MongoStore);

      options = options || {};
      /* Fallback */

      if (options.fallbackMemory && MemoryStore) {
        return _possibleConstructorReturn(_this, new MemoryStore());
      }

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoStore).call(this, options));
      /* Use crypto? */

      if (options.secret) {
        try {
          _this.Crypto = require('./crypto.js');

          _this.Crypto.init(options);

          delete options.secret;
        } catch (error) {
          throw error;
        }
      }
      /* Options */


      _this.ttl = options.ttl || 1209600; // 14 days

      _this.collectionName = options.collection || 'sessions';
      _this.autoRemove = options.autoRemove || 'native';
      _this.autoRemoveInterval = options.autoRemoveInterval || 10; // Minutes

      _this.writeOperationOptions = options.writeOperationOptions || {};
      _this.transformFunctions = computeTransformFunctions(options);
      _this.options = options;

      _this.changeState('init');

      var newConnectionCallback = function newConnectionCallback(err, client) {
        if (err) {
          _this.connectionFailed(err);
        } else {
          _this.handleNewConnectionAsync(client, options.dbName);
        }
      };

      if (options.url) {
        // New native connection using url + mongoOptions
        var _mongoOptions = mergeMongoOptions(options.mongoOptions);

        MongoClient.connect(options.url, _mongoOptions, newConnectionCallback);
      } else if (options.mongooseConnection) {
        // Re-use existing or upcoming mongoose connection
        if (options.mongooseConnection.readyState === 1) {
          _this.handleNewConnectionAsync(options.mongooseConnection);
        } else {
          options.mongooseConnection.once('open', function () {
            return _this.handleNewConnectionAsync(options.mongooseConnection);
          });
        }
      } else if (options.client) {
        if (options.client.isConnected()) {
          _this.handleNewConnectionAsync(options.client, options.dbName);
        } else {
          options.client.once('open', function () {
            return _this.handleNewConnectionAsync(options.client, options.dbName);
          });
        }
      } else if (options.clientPromise) {
        options.clientPromise.then(function (client) {
          return _this.handleNewConnectionAsync(client, options.dbName);
        })["catch"](function (err) {
          return _this.connectionFailed(err);
        });
      } else {
        throw new Error('Connection strategy not found');
      }

      _this.changeState('connecting');

      return _this;
    }

    _createClass(MongoStore, [{
      key: "connectionFailed",
      value: function connectionFailed(err) {
        this.changeState('disconnected');
        throw err;
      }
    }, {
      key: "handleNewConnectionAsync",
      value: function handleNewConnectionAsync(client, dbName) {
        var _this2 = this;

        this.client = client; // If dbName === undefined, client.db(dbName) will return
        // the same value that client.db() would return.

        this.db = typeof client.db !== 'function' ? client.db : client.db(dbName);
        return this.setCollection(this.db.collection(this.collectionName)).setAutoRemoveAsync().then(function () {
          return _this2.changeState('connected');
        });
      }
    }, {
      key: "setAutoRemoveAsync",
      value: function setAutoRemoveAsync() {
        var _this3 = this;

        var removeQuery = function removeQuery() {
          return {
            expires: {
              $lt: new Date()
            }
          };
        };

        switch (this.autoRemove) {
          case 'native':
            return this.collection.createIndex({
              expires: 1
            }, Object.assign({
              expireAfterSeconds: 0
            }, this.writeOperationOptions));

          case 'interval':
            this.timer = setInterval(function () {
              return _this3.collection.deleteMany(removeQuery(), Object.assign({}, _this3.writeOperationOptions, {
                w: 0,
                j: false
              }));
            }, this.autoRemoveInterval * 1000 * 60);
            this.timer.unref();
            return Promise.resolve();

          default:
            return Promise.resolve();
        }
      }
    }, {
      key: "changeState",
      value: function changeState(newState) {
        if (newState !== this.state) {
          this.state = newState;
          this.emit(newState);
        }
      }
    }, {
      key: "setCollection",
      value: function setCollection(collection) {
        if (this.timer) {
          clearInterval(this.timer);
        }

        this.collectionReadyPromise = undefined;
        this.collection = collection;
        return this;
      }
    }, {
      key: "collectionReady",
      value: function collectionReady() {
        var _this4 = this;

        var promise = this.collectionReadyPromise;

        if (!promise) {
          promise = new Promise(function (resolve, reject) {
            if (_this4.state === 'connected') {
              return resolve(_this4.collection);
            }

            if (_this4.state === 'connecting') {
              return _this4.once('connected', function () {
                return resolve(_this4.collection);
              });
            }

            reject(new Error('Not connected'));
          });
          this.collectionReadyPromise = promise;
        }

        return promise;
      }
    }, {
      key: "computeStorageId",
      value: function computeStorageId(sessionId) {
        if (this.options.transformId && typeof this.options.transformId === 'function') {
          return this.options.transformId(sessionId);
        }

        return sessionId;
      }
      /* Public API */

    }, {
      key: "get",
      value: function get(sid, callback) {
        var _this5 = this;

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.findOne({
            _id: _this5.computeStorageId(sid),
            $or: [{
              expires: {
                $exists: false
              }
            }, {
              expires: {
                $gt: new Date()
              }
            }]
          });
        }).then(function (session) {
          if (session) {
            if (_this5.Crypto) {
              var tmpSession = _this5.transformFunctions.unserialize(session.session);

              session.session = _this5.Crypto.get(tmpSession);
            }

            var s = _this5.transformFunctions.unserialize(session.session);

            if (_this5.options.touchAfter > 0 && session.lastModified) {
              s.lastModified = session.lastModified;
            }

            _this5.emit('get', sid);

            return s;
          }
        }), callback);
      }
    }, {
      key: "set",
      value: function set(sid, session, callback) {
        var _this6 = this; // Removing the lastModified prop from the session object before update


        if (this.options.touchAfter > 0 && session && session.lastModified) {
          delete session.lastModified;
        }

        var s;

        if (this.Crypto) {
          try {
            session = this.Crypto.set(session);
          } catch (error) {
            return withCallback(Promise.reject(error), callback);
          }
        }

        try {
          s = {
            _id: this.computeStorageId(sid),
            session: this.transformFunctions.serialize(session)
          };
        } catch (err) {
          return withCallback(Promise.reject(err), callback);
        }

        if (session && session.cookie && session.cookie.expires) {
          s.expires = new Date(session.cookie.expires);
        } else {
          // If there's no expiration date specified, it is
          // browser-session cookie or there is no cookie at all,
          // as per the connect docs.
          //
          // So we set the expiration to two-weeks from now
          // - as is common practice in the industry (e.g Django) -
          // or the default specified in the options.
          s.expires = new Date(Date.now() + this.ttl * 1000);
        }

        if (this.options.touchAfter > 0) {
          s.lastModified = new Date();
        }

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.updateOne({
            _id: _this6.computeStorageId(sid)
          }, {
            $set: s
          }, Object.assign({
            upsert: true
          }, _this6.writeOperationOptions));
        }).then(function (rawResponse) {
          if (rawResponse.result) {
            rawResponse = rawResponse.result;
          }

          if (rawResponse && rawResponse.upserted) {
            _this6.emit('create', sid);
          } else {
            _this6.emit('update', sid);
          }

          _this6.emit('set', sid);
        }), callback);
      }
    }, {
      key: "touch",
      value: function touch(sid, session, callback) {
        var _this7 = this;

        var updateFields = {};
        var touchAfter = this.options.touchAfter * 1000;
        var lastModified = session.lastModified ? session.lastModified.getTime() : 0;
        var currentDate = new Date(); // If the given options has a touchAfter property, check if the
        // current timestamp - lastModified timestamp is bigger than
        // the specified, if it's not, don't touch the session

        if (touchAfter > 0 && lastModified > 0) {
          var timeElapsed = currentDate.getTime() - session.lastModified;

          if (timeElapsed < touchAfter) {
            return withCallback(Promise.resolve(), callback);
          }

          updateFields.lastModified = currentDate;
        }

        if (session && session.cookie && session.cookie.expires) {
          updateFields.expires = new Date(session.cookie.expires);
        } else {
          updateFields.expires = new Date(Date.now() + this.ttl * 1000);
        }

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.updateOne({
            _id: _this7.computeStorageId(sid)
          }, {
            $set: updateFields
          }, _this7.writeOperationOptions);
        }).then(function (result) {
          if (result.nModified === 0) {
            throw new Error('Unable to find the session to touch');
          } else {
            _this7.emit('touch', sid, session);
          }
        }), callback);
      }
    }, {
      key: "all",
      value: function all(callback) {
        var _this8 = this;

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.find({
            $or: [{
              expires: {
                $exists: false
              }
            }, {
              expires: {
                $gt: new Date()
              }
            }]
          });
        }).then(function (sessions) {
          return new Promise(function (resolve, reject) {
            var results = [];
            sessions.forEach(function (session) {
              return results.push(_this8.transformFunctions.unserialize(session.session));
            }, function (err) {
              if (err) {
                reject(err);
              }

              _this8.emit('all', results);

              resolve(results);
            });
          });
        }), callback);
      }
    }, {
      key: "destroy",
      value: function destroy(sid, callback) {
        var _this9 = this;

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.deleteOne({
            _id: _this9.computeStorageId(sid)
          }, _this9.writeOperationOptions);
        }).then(function () {
          return _this9.emit('destroy', sid);
        }), callback);
      }
    }, {
      key: "length",
      value: function length(callback) {
        return withCallback(this.collectionReady().then(function (collection) {
          return collection.countDocuments({});
        }), callback);
      }
    }, {
      key: "clear",
      value: function clear(callback) {
        var _this10 = this;

        return withCallback(this.collectionReady().then(function (collection) {
          return collection.drop(_this10.writeOperationOptions);
        }), callback);
      }
    }, {
      key: "close",
      value: function close() {
        if (this.client) {
          return this.client.close();
        }
      }
    }]);

    return MongoStore;
  }(Store);

  return MongoStore;
};