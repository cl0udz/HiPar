'use strict';

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

var debug = require('debug')('common-shake:module');

function Module(resource) {
  this.resource = resource;
  this.sideEffects = true;
  this.bailouts = false;
  this.issuers = new Set();
  this.uses = new Map();
  this.declarations = [];
  this.requireNodes = new Map();
  this.dependentUses = [];
  this.pendingUses = [];
  this.computing = false;
  this.forced = false;
}

module.exports = Module; // Public API

Module.prototype.addRequire = function addRequire(name, node) {
  if (!this.requireNodes.has(name)) {
    this.requireNodes.set(name, []);
  }

  this.requireNodes.get(name).push(node);
};

Module.prototype.forceExport = function forceExport() {
  this.forced = true;
};

Module.prototype.isUsed = function isUsed(name, dependentStack) {
  this.compute();
  if (this.bailouts || this.forced) return true; // Detect loops

  if (this.computing) {
    var pending = this.pendingUses.some(function (use) {
      return use.property === name;
    });
    if (pending) return true;
    var dependent = this.dependentUses.find(function (use) {
      return use.property === name;
    }); // Make sure we don't hang on recursive dependencies, `exports.a`
    // calling `exports.b` and vice versa.

    if (dependent && (dependentStack === undefined || dependentStack.indexOf(dependent.property) === -1)) {
      if (dependentStack === undefined) {
        dependentStack = [dependent.dependency];
      } else {
        dependentStack.push(dependent.dependency);
      }

      var result = dependent.from.isUsed(dependent.dependency, dependentStack);
      dependentStack.pop();
      return result;
    }
  }

  return this.uses.has(name);
};

Module.prototype.getInfo = function getInfo() {
  this.compute();
  return {
    removeImport: !this.sideEffects && this.uses.size === 0,
    bailouts: this.bailouts,
    declarations: this.declarations.map(function (decl) {
      return decl.name;
    }),
    uses: Array.from(this.uses.keys())
  };
};

Module.prototype.getDeclarations = function getDeclarations() {
  return this.declarations.slice();
}; // Private API


Module.prototype.bailout = function bailout(reason, loc, source, level) {
  var bail = {
    reason: reason,
    loc: loc,
    source: source || null,
    level: level || 'warning'
  };
  if (this.bailouts) this.bailouts.push(bail);else this.bailouts = [bail];
  this.sealed = false;
};

Module.prototype.use = function use(property, from, recursive, dependency) {
  if (dependency !== undefined) {
    debug('dependent use this=%j property=%j from=%j dependency=%j', this.resource, property, from.resource, dependency);
    this.dependentUses.push({
      property: property,
      from: from,
      dependency: dependency
    });
    return;
  }

  if (recursive !== false) {
    debug('pending use this=%j property=%j from=%j recursive=%j', this.resource, property, from.resource, recursive);
    this.pendingUses.push({
      property: property,
      from: from,
      recursive: recursive
    });
    return;
  }

  debug('use this=%j property=%j from=%j recursive=%j', this.resource, property, from.resource, recursive);
  if (this.uses.has(property)) this.uses.get(property).add(from);else this.uses.set(property, new Set([from]));
};

Module.prototype.seal = function seal() {
  this.sealed = true;
};

Module.prototype.declare = function declare(property) {
  this.declarations.push(property);
  return !this.sealed;
};

Module.prototype.multiDeclare = function multiDeclare(declarations) {
  var success = this.declarations.length === 0 && !this.sealed;
  this.seal();

  for (var i = 0; i < declarations.length; i++) {
    this.declarations.push(declarations[i]);
  }

  return success;
};

Module.prototype.mergeFrom = function mergeFrom(unresolved) {
  var _this = this;

  if (unresolved.bailouts) {
    unresolved.bailouts.forEach(function (b) {
      _this.bailout(b.reason, b.loc, b.source, b.level);
    });
  }

  unresolved.uses.forEach(function (from, property) {
    from.forEach(function (resource) {
      return _this.use(property, resource, false);
    });
  });
  unresolved.declarations.forEach(function (declaration) {
    return _this.declare(declaration);
  });
  this.pendingUses = this.pendingUses.concat(unresolved.pendingUses);
  this.dependentUses = this.dependentUses.concat(unresolved.dependentUses);
  unresolved.clear();
};

Module.prototype.addIssuer = function addIssuer(issuer) {
  this.issuers.add(issuer);
};

Module.prototype.clear = function clear() {
  this.uses = null;
  this.declarations = null;
  this.pendingUses = null;
  this.dependentUses = null;
};

Module.prototype.compute = function compute() {
  var _this2 = this; // Already computed or cleared


  if (this.pendingUses === null) return;
  if (this.computing) return;
  this.computing = true;
  debug('compute this=%j pending=%d dependent=%d', this.resource, this.pendingUses.length, this.dependentUses.length); // Do several passes until it will stabilize
  // TODO(indutny): what is complexity of this? Exponential?

  var before;

  do {
    before = this.pendingUses.length; // NOTE: it is important to overwrite this, since recursive lookups will
    // get to it.

    this.pendingUses = this.pendingUses.filter(function (use) {
      return use.from.isUsed(use.recursive);
    });
    debug('compute pass this=%j before=%d after=%d', this.resource, before, this.pendingUses.length);
  } while (this.pendingUses.length !== before);

  do {
    before = this.dependentUses.length;
    this.dependentUses = this.dependentUses.filter(function (use) {
      return use.from.isUsed(use.dependency);
    });
    debug('compute pass (dependent) this=%j before=%d after=%d', this.resource, before, this.dependentUses.length);
  } while (this.dependentUses.length !== before);

  this.pendingUses.forEach(function (use) {
    return _this2.use(use.property, use.from, false);
  });
  this.dependentUses.forEach(function (use) {
    debug('dependent mark used from=%j property=%j', use.from.resource, use.property);

    _this2.use(use.property, use.from, false);
  });
  this.pendingUses = null;
  this.dependentUses = null;
  this.computing = false;
};