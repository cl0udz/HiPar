"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

require("regenerator-runtime/runtime");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var get = require('lodash/get');

var filters = require('./filters');

var RequiredSymbol = Symbol();
var NotRequiredSymbol = Symbol();
var OptionalSymbol = Symbol();

var Field =
/*#__PURE__*/
function () {
  function Field(name, label) {
    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    _classCallCheck(this, Field);

    this.name = name;
    this.label = label;
    this.prefix = prefix;
    this.isArray = false;
    this.isContainer = false;
    this.isRequired = false;
    this.isOptional = false;
    this.isFile = false;
    this.splitSeparator = null;
    this.stack = [];
    this.children = [];
  }

  _createClass(Field, [{
    key: "add",
    value: function add(fn) {
      // remove duplicate required filters (caused by chaining)
      if (fn === filters.required) {
        var index = this.stack.indexOf(filters.required);
        index !== -1 && this.stack.splice(index, 1);
      }

      this.stack.push(fn);
      return this;
    }
  }, {
    key: "addError",
    value: function addError(stack, e) {
      stack.push(e.message.replace('%s', this.label || this.name));
      return stack;
    }
  }, {
    key: "array",
    value: function array() {
      this.isArray = true;
      return this;
    }
  }, {
    key: "container",
    value: function container(children) {
      this.isContainer = true;
      this.children = children;
      return this;
    }
  }, {
    key: "split",
    value: function split() {
      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ',';
      this.isArray = true;
      this.splitSeparator = separator;
      return this;
    }
  }, {
    key: "file",
    value: function file() {
      this.isFile = true;
      return this;
    }
  }, {
    key: "validateArray",
    value: function validateArray(value, result, ctx, options) {
      var _this = this;

      var errors;
      return regeneratorRuntime.async(function validateArray$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              errors = [];

              if (!(this.isRequired && !value.length)) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return", {
                value: value,
                errors: this.addError([], new Error('%s is required.'))
              });

            case 3:
              _context2.next = 5;
              return regeneratorRuntime.awrap(Promise.all(value.map(function _callee(value, i) {
                var validateFn, _ref, itemValue, itemErrors;

                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        validateFn = _this.isContainer ? 'validateContainer' : 'validateField';
                        _context.next = 3;
                        return regeneratorRuntime.awrap(_this[validateFn](value, result, ctx, options));

                      case 3:
                        _ref = _context.sent;
                        itemValue = _ref.value;
                        itemErrors = _ref.errors;

                        if (Field.hasError(itemErrors)) {
                          errors[i] = itemErrors;
                        }

                        return _context.abrupt("return", itemValue);

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              })));

            case 5:
              value = _context2.sent;
              return _context2.abrupt("return", {
                value: value,
                errors: errors
              });

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "validateContainer",
    value: function validateContainer(value, result, ctx, options) {
      var errors, newValue, containerResult;
      return regeneratorRuntime.async(function validateContainer$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              errors = {};
              newValue = {}; // create custom result object container so all value lookups are related to this container

              containerResult = result.createContainer();
              _context4.next = 5;
              return regeneratorRuntime.awrap(Promise.all(this.children.map(function _callee2(item) {
                var validation, _ref2, itemValue, itemErrors;

                return regeneratorRuntime.async(function _callee2$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        validation = item.validate(value, containerResult, ctx, options); // store validation promise so other fields can get the value

                        containerResult.addField(item, validation);
                        _context3.next = 4;
                        return regeneratorRuntime.awrap(validation);

                      case 4:
                        _ref2 = _context3.sent;
                        itemValue = _ref2.value;
                        itemErrors = _ref2.errors;

                        if (itemValue !== undefined) {
                          newValue[item.name] = itemValue;
                          containerResult.addField(item, itemValue, itemErrors);
                        } else {
                          containerResult.removeField(item);
                        }

                        if (Field.hasError(itemErrors)) {
                          errors[item.name] = itemErrors;
                        }

                      case 9:
                      case "end":
                        return _context3.stop();
                    }
                  }
                });
              })));

            case 5:
              return _context4.abrupt("return", {
                value: newValue,
                errors: errors
              });

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "validateField",
    value: function validateField(value, result, ctx, options) {
      var errors, isRequired, notRequired, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, fn, ret;

      return regeneratorRuntime.async(function validateField$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              errors = [];
              isRequired = this.isRequired;
              notRequired = false; // return undefined if is optional and value not defined

              if (!(this.isOptional && value === undefined)) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("return", {
                value: value,
                errors: errors
              });

            case 5:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context5.prev = 8;
              _iterator = this.stack[Symbol.iterator]();

            case 10:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context5.next = 40;
                break;
              }

              fn = _step.value;
              _context5.prev = 12;
              _context5.next = 15;
              return regeneratorRuntime.awrap(fn(value, result, ctx, this));

            case 15:
              ret = _context5.sent;

              if (!(ret === RequiredSymbol)) {
                _context5.next = 20;
                break;
              }

              if (!notRequired) {
                isRequired = true;
              }

              _context5.next = 30;
              break;

            case 20:
              if (!(ret === NotRequiredSymbol)) {
                _context5.next = 25;
                break;
              }

              isRequired = false;
              notRequired = true; // return undefined if is optionalIf() and value not defined

              _context5.next = 30;
              break;

            case 25:
              if (!(ret === OptionalSymbol && value === undefined)) {
                _context5.next = 29;
                break;
              }

              return _context5.abrupt("return", {
                value: value,
                errors: errors
              });

            case 29:
              if (ret !== undefined) {
                value = ret;
              }

            case 30:
              _context5.next = 37;
              break;

            case 32:
              _context5.prev = 32;
              _context5.t0 = _context5["catch"](12);
              (isRequired || !filters.isEmpty(value)) && this.addError(errors, _context5.t0);

              if (!(options.breakOnRequired && fn === filters.required)) {
                _context5.next = 37;
                break;
              }

              return _context5.abrupt("break", 40);

            case 37:
              _iteratorNormalCompletion = true;
              _context5.next = 10;
              break;

            case 40:
              _context5.next = 46;
              break;

            case 42:
              _context5.prev = 42;
              _context5.t1 = _context5["catch"](8);
              _didIteratorError = true;
              _iteratorError = _context5.t1;

            case 46:
              _context5.prev = 46;
              _context5.prev = 47;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 49:
              _context5.prev = 49;

              if (!_didIteratorError) {
                _context5.next = 52;
                break;
              }

              throw _iteratorError;

            case 52:
              return _context5.finish(49);

            case 53:
              return _context5.finish(46);

            case 54:
              // return empty string or null if value is undefined, otherwise the field would be
              // removed from object
              if (value === undefined) {
                value = this.isFile ? null : '';
              }

              return _context5.abrupt("return", {
                value: value,
                errors: errors
              });

            case 56:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[8, 42, 46, 54], [12, 32], [47,, 49, 53]]);
    }
  }, {
    key: "validate",
    value: function validate(source, result, ctx, options) {
      var errors, value;
      return regeneratorRuntime.async(function validate$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              errors = [];
              value = get(this.isFile ? source.__files : source, this.path);

              if (this.isArray && !value) {
                // try to load data from name[] key
                value = get(this.isFile ? source.__files : source, this.path + '[]');
              }

              if (this.splitSeparator !== null) {
                value = filters.isEmpty(value) ? [] : String(value).split(this.splitSeparator);
              } // validate source value type


              if (!(Array.isArray(value) && !this.isArray)) {
                _context6.next = 9;
                break;
              }

              this.addError(errors, new Error('%s is not valid.'));
              return _context6.abrupt("return", {
                value: value,
                errors: errors
              });

            case 9:
              if (!(this.isArray && !Array.isArray(value))) {
                _context6.next = 16;
                break;
              }

              if (!options.autoConvertToArray) {
                _context6.next = 14;
                break;
              }

              value = filters.isEmpty(value) ? [] : [value];
              _context6.next = 16;
              break;

            case 14:
              this.addError(errors, new Error('%s is not valid.'));
              return _context6.abrupt("return", {
                value: value,
                errors: errors
              });

            case 16:
              if (!this.isArray) {
                _context6.next = 22;
                break;
              }

              _context6.next = 19;
              return regeneratorRuntime.awrap(this.validateArray(value, result, ctx, options));

            case 19:
              return _context6.abrupt("return", _context6.sent);

            case 22:
              if (!this.isContainer) {
                _context6.next = 28;
                break;
              }

              _context6.next = 25;
              return regeneratorRuntime.awrap(this.validateContainer(value, result, ctx, options));

            case 25:
              return _context6.abrupt("return", _context6.sent);

            case 28:
              _context6.next = 30;
              return regeneratorRuntime.awrap(this.validateField(value, result, ctx, options));

            case 30:
              return _context6.abrupt("return", _context6.sent);

            case 31:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "required",
    value: function required() {
      this.isRequired = true;
      return this.add(filters.required);
    }
  }, {
    key: "requiredIf",
    value: function requiredIf(name, requiredValue) {
      var _this2 = this;

      return this.add(function _callee3(value, result, ctx) {
        var compareValue, isRequired;
        return regeneratorRuntime.async(function _callee3$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(typeof name === 'string')) {
                  _context7.next = 10;
                  break;
                }

                _context7.next = 3;
                return regeneratorRuntime.awrap(result.getValue(_this2.prefix ? _this2.prefix + '.' + name : name));

              case 3:
                compareValue = _context7.sent;
                isRequired = false;

                if (requiredValue === undefined) {
                  isRequired = !filters.isEmpty(compareValue);
                } else if (Array.isArray(requiredValue)) {
                  isRequired = requiredValue.indexOf(compareValue) !== -1;
                } else {
                  isRequired = compareValue === requiredValue;
                }

                if (!isRequired) {
                  _context7.next = 8;
                  break;
                }

                return _context7.abrupt("return", RequiredSymbol);

              case 8:
                _context7.next = 15;
                break;

              case 10:
                if (!(typeof name === 'function')) {
                  _context7.next = 15;
                  break;
                }

                _context7.next = 13;
                return regeneratorRuntime.awrap(name(value, result, ctx, _this2));

              case 13:
                if (!_context7.sent) {
                  _context7.next = 15;
                  break;
                }

                return _context7.abrupt("return", RequiredSymbol);

              case 15:
                return _context7.abrupt("return", NotRequiredSymbol);

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        });
      }).add(filters.required);
    }
  }, {
    key: "optional",
    value: function optional() {
      this.isOptional = true;
      return this;
    }
  }, {
    key: "optionalIf",
    value: function optionalIf(name, requiredValue) {
      var _this3 = this;

      return this.add(function _callee4(value, result, ctx) {
        var compareValue, isOptional;
        return regeneratorRuntime.async(function _callee4$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(typeof name === 'string')) {
                  _context8.next = 10;
                  break;
                }

                _context8.next = 3;
                return regeneratorRuntime.awrap(result.getValue(_this3.prefix ? _this3.prefix + '.' + name : name));

              case 3:
                compareValue = _context8.sent;
                isOptional = false;

                if (isOptional === undefined) {
                  isOptional = !filters.isEmpty(compareValue);
                } else if (Array.isArray(requiredValue)) {
                  isOptional = requiredValue.indexOf(compareValue) !== -1;
                } else {
                  isOptional = compareValue === requiredValue;
                }

                if (!isOptional) {
                  _context8.next = 8;
                  break;
                }

                return _context8.abrupt("return", OptionalSymbol);

              case 8:
                _context8.next = 15;
                break;

              case 10:
                if (!(typeof name === 'function')) {
                  _context8.next = 15;
                  break;
                }

                _context8.next = 13;
                return regeneratorRuntime.awrap(name(value, result, ctx, _this3));

              case 13:
                if (!_context8.sent) {
                  _context8.next = 15;
                  break;
                }

                return _context8.abrupt("return", OptionalSymbol);

              case 15:
              case "end":
                return _context8.stop();
            }
          }
        });
      });
    }
  }, {
    key: "patch",
    value: function patch() {
      return this.add(function _callee5(value, result, ctx) {
        return regeneratorRuntime.async(function _callee5$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(ctx.method === 'PATCH')) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return", OptionalSymbol);

              case 2:
              case "end":
                return _context9.stop();
            }
          }
        });
      });
    }
  }, {
    key: "bool",
    value: function bool(value) {
      this.isRequired = true;
      this.add(filters.bool);

      if (value === true || value === false) {
        this.equal(value);
      }

      return this;
    }
  }, {
    key: "toggle",
    value: function toggle(value) {
      this.isRequired = true;
      this.add(filters.toggle);

      if (value === 1 || value === 0) {
        this.equal(value);
      }

      return this;
    }
  }, {
    key: "equal",
    value: function equal(compare) {
      return this.add(function (value) {
        if (value !== compare) {
          throw new Error('%s is incorrect.');
        }
      });
    }
  }, {
    key: "default",
    value: function _default(defaultValue) {
      return this.add(function (value) {
        if (filters.isEmpty(value)) {
          return defaultValue;
        }
      });
    }
  }, {
    key: "custom",
    value: function custom(fn) {
      return this.add(fn);
    }
  }, {
    key: "path",
    get: function get() {
      return this.prefix ? this.prefix + '.' + this.name : this.name;
    }
  }]);

  return Field;
}();

var extend = ['nullable', 'email', 'number', 'uppercase', 'lowercase', 'trim', 'truncate', 'range', 'length', 'minLength', 'maxLength', 'int', 'float', 'id', 'select', 'min', 'max'];
extend.forEach(function (name) {
  Field.prototype[name] = function () {
    var _filters$name;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.length ? this.add((_filters$name = filters[name]).bind.apply(_filters$name, [null].concat(args))) : this.add(filters[name]);
  };
});
var fileExtend = ['mime', 'size'];
fileExtend.forEach(function (name) {
  Field.prototype[name] = function () {
    var _filters$files$name;

    if (!this.isFile) {
      throw new Error('This filter can be used only for file field.');
    }

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return args.length ? this.add((_filters$files$name = filters.files[name]).bind.apply(_filters$files$name, [null].concat(args))) : this.add(filters.files[name]);
  };
});

Field.hasError = function (errors) {
  if (Array.isArray(errors)) {
    return errors.length !== 0;
  } else {
    return errors && _typeof(errors) === 'object' && Object.keys(errors).length !== 0;
  }
};

module.exports = Field;