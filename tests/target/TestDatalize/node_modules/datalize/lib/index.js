"use strict";

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.reflect.construct");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.reflect.construct");

require("core-js/modules/es.regexp.to-string");

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var Data = require('./data');

var Field = require('./field');

var globalOptions = {};

var datalize = function datalize(fields) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var data = new Data(fields, Object.assign({}, globalOptions, options));
  return data.validate.bind(data);
};

datalize.params = function (fields) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return datalize(fields, Object.assign({
    type: Data.Types.params
  }, options));
};

datalize.query = function (fields) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return datalize(fields, Object.assign({
    type: Data.Types.query
  }, options));
};

datalize.field = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _construct(Field, args);
};

datalize.set = function (name, value) {
  globalOptions[name] = value;
};

datalize.Data = Data;
datalize.Field = Field;
datalize.Types = Data.Types;
datalize.Error = Data.Error;
module.exports = datalize;