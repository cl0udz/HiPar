"use strict";

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var get = require('lodash/get');

var set = require('lodash/set');

var unset = require('lodash/unset');

var Field = require('./field');

var Result =
/*#__PURE__*/
function () {
  function Result() {
    _classCallCheck(this, Result);

    Object.defineProperties(this, {
      errors: {
        value: {},
        enumerable: false
      }
    });
  }

  _createClass(Result, [{
    key: "addField",
    value: function addField(field, value, errors) {
      set(this, field.path, value);

      if (!Field.hasError(errors)) {
        return;
      }

      set(this.errors, field.path, errors);
    }
  }, {
    key: "removeField",
    value: function removeField(field) {
      unset(this, field.path);
    }
  }, {
    key: "getValue",
    value: function getValue(name) {
      var value;
      return regeneratorRuntime.async(function getValue$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = get(this, name);

              if (!(value instanceof Promise)) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(value);

            case 4:
              value = _context.sent.value;

            case 5:
              return _context.abrupt("return", value);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createContainer",
    value: function createContainer() {
      return new Result();
    }
  }, {
    key: "isValid",
    get: function get() {
      return Object.keys(this.errors).length === 0;
    }
  }]);

  return Result;
}();

module.exports = Result;