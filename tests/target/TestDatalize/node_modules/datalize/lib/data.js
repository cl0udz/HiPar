"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.reflect.construct");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.reflect.construct");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("regenerator-runtime/runtime");

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var Result = require('./result');

var Types = {
  form: 'form',
  params: 'params',
  query: 'query'
};
var Provider = {
  express: Symbol(),
  koa: Symbol(),
  raw: Symbol(),
  other: Symbol()
};

var DataError =
/*#__PURE__*/
function (_Error) {
  _inherits(DataError, _Error);

  function DataError(errors) {
    var _this;

    _classCallCheck(this, DataError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataError).call(this));
    _this.errors = errors;
    return _this;
  }

  _createClass(DataError, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        errors: this.errors
      };
    }
  }]);

  return DataError;
}(_wrapNativeSuper(Error));

var Data =
/*#__PURE__*/
function () {
  function Data(fields) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Data);

    if (!Array.isArray(fields)) {
      throw new Error('Fields must be an array.');
    }

    if (!options || _typeof(options) !== 'object') {
      throw new Error('Options must be an object.');
    }

    this.fields = fields;
    this.options = Object.assign({
      type: Types.form,
      breakOnRequired: true,
      autoValidate: false,
      autoConvertToArray: true,
      error: DataError
    }, options);
  }

  _createClass(Data, [{
    key: "getSource",
    value: function getSource(req, ctx) {
      switch (this.options.type) {
        case Types.form:
          {
            var source = req.body || {};
            source.__files = _typeof(req.files) === 'object' && req.files ? req.files : {};
            return source;
          }

        case Types.params:
          {
            return req.params || ctx.params || {};
          }

        case Types.query:
          {
            return req.query || {};
          }
      }
    }
  }, {
    key: "validate",
    value: function validate(req, res, next) {
      var _this2 = this;

      var ctx, provider, source, result;
      return regeneratorRuntime.async(function validate$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              ctx = req;

              if (!(!res && !next)) {
                _context2.next = 5;
                break;
              }

              provider = Provider.raw;
              _context2.next = 23;
              break;

            case 5:
              if (!(req.req && req.res)) {
                _context2.next = 12;
                break;
              }

              provider = Provider.koa;
              next = res;
              req = ctx.request;
              res = ctx.response;
              _context2.next = 23;
              break;

            case 12:
              if (!(res && next)) {
                _context2.next = 16;
                break;
              }

              provider = Provider.express;
              _context2.next = 23;
              break;

            case 16:
              if (!(typeof res === 'function')) {
                _context2.next = 22;
                break;
              }

              provider = Provider.other;
              next = res;
              res = null;
              _context2.next = 23;
              break;

            case 22:
              throw Error('Invalid data provider.');

            case 23:
              source = provider === Provider.raw ? req : this.getSource(req, ctx);
              result = new Result();
              _context2.next = 27;
              return regeneratorRuntime.awrap(Promise.all(this.fields.map(function _callee(field) {
                var validation, _ref, value, errors;

                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        validation = field.validate(source, result, ctx, _this2.options); // store validation promise so other fields can get the value

                        result.addField(field, validation);
                        _context.next = 4;
                        return regeneratorRuntime.awrap(validation);

                      case 4:
                        _ref = _context.sent;
                        value = _ref.value;
                        errors = _ref.errors;

                        if (value !== undefined) {
                          result.addField(field, value, errors);
                        } else {
                          result.removeField(field);
                        }

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              })));

            case 27:
              if (provider !== Provider.raw) {
                ctx[this.name] = result;
              }

              if (!(this.options.autoValidate && !result.isValid)) {
                _context2.next = 34;
                break;
              }

              if (!(provider === Provider.express)) {
                _context2.next = 33;
                break;
              }

              return _context2.abrupt("return", next(new this.options.error(result.errors)));

            case 33:
              throw new this.options.error(result.errors);

            case 34:
              if (!(provider === Provider.raw)) {
                _context2.next = 36;
                break;
              }

              return _context2.abrupt("return", result);

            case 36:
              _context2.next = 38;
              return regeneratorRuntime.awrap(next());

            case 38:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "name",
    get: function get() {
      if (this.options.type === Types.form) {
        return 'form';
      } else {
        return 'data';
      }
    }
  }]);

  return Data;
}();

Data.Types = Types;
Data.Error = DataError;
module.exports = Data;