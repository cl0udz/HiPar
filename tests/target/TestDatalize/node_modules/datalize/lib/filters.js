"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.string.trim");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.trim");

require("regenerator-runtime/runtime");

var isEmpty = function isEmpty(value) {
  return value === undefined || value === null || value === '';
};

var isTrue = function isTrue(value) {
  return value === true || value === 1 || value === '1' || value === 'true';
};

var isFalse = function isFalse(value) {
  return value === false || value === 0 || value === '0' || value === 'false';
};

var toString = function toString(value) {
  return isEmpty(value) ? '' : String(value);
};

var normalizeParam = function normalizeParam(param, value, result, ctx) {
  return regeneratorRuntime.async(function normalizeParam$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof param === 'function')) {
            _context.next = 4;
            break;
          }

          _context.next = 3;
          return regeneratorRuntime.awrap(param(value, result, ctx));

        case 3:
          return _context.abrupt("return", _context.sent);

        case 4:
          if (!(typeof param === 'string')) {
            _context.next = 8;
            break;
          }

          _context.next = 7;
          return regeneratorRuntime.awrap(result.getValue(param));

        case 7:
          return _context.abrupt("return", _context.sent);

        case 8:
          return _context.abrupt("return", param);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  });
};

var required = function required(value) {
  if (isEmpty(value)) {
    throw new Error('%s is required.');
  }
};

var nullable = function nullable(value) {
  if (isEmpty(value)) {
    return null;
  }

  return value;
};

var number = function number(value) {
  var newValue = Number(value);

  if (isEmpty(value) || isNaN(newValue)) {
    throw new Error('%s is not a number.');
  }

  return newValue;
};

var bool = function bool(value) {
  if (isTrue(value)) {
    return true;
  } else if (isFalse(value) || isEmpty(value)) {
    return false;
  } else {
    throw new Error('%s is not valid.');
  }
};

var toggle = function toggle(value) {
  if (isTrue(value)) {
    return 1;
  } else if (isFalse(value) || isEmpty(value)) {
    return 0;
  } else {
    throw new Error('%s is not valid.');
  }
};

var email = function email(value) {
  value = toString(value);

  if (!/^[\-0-9a-zA-Z\.\+_]+@[\-0-9a-zA-Z\.\+_]+\.[a-zA-Z]{2,}$/.test(value)) {
    throw new Error('%s is not a valid address.');
  }
};

var uppercase = function uppercase(value) {
  return toString(value).toUpperCase();
};

var lowercase = function lowercase(value) {
  return toString(value).toLowerCase();
};

var trim = function trim(value) {
  return toString(value).trim();
};

var truncate = function truncate(length, value) {
  value = toString(value);

  if (value.length <= length) {
    return value;
  }

  return value.substr(0, length);
};

var range = function range(min, max, value, result, ctx) {
  return regeneratorRuntime.async(function range$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          value = number(value);
          _context2.next = 3;
          return regeneratorRuntime.awrap(normalizeParam(min, value, result, ctx));

        case 3:
          min = _context2.sent;
          _context2.next = 6;
          return regeneratorRuntime.awrap(normalizeParam(max, value, result, ctx));

        case 6:
          max = _context2.sent;

          if (!(typeof min !== 'number' || typeof max !== 'number')) {
            _context2.next = 9;
            break;
          }

          return _context2.abrupt("return");

        case 9:
          if (!(value < min || value > max)) {
            _context2.next = 11;
            break;
          }

          throw new Error("%s must be between ".concat(min, " and ").concat(max, "."));

        case 11:
          return _context2.abrupt("return", value);

        case 12:
        case "end":
          return _context2.stop();
      }
    }
  });
};

var min = function min(_min, value, result, ctx) {
  return regeneratorRuntime.async(function min$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          value = number(value);
          _context3.next = 3;
          return regeneratorRuntime.awrap(normalizeParam(_min, value, result, ctx));

        case 3:
          _min = _context3.sent;

          if (!(typeof _min !== 'number')) {
            _context3.next = 6;
            break;
          }

          return _context3.abrupt("return");

        case 6:
          if (!(value < _min)) {
            _context3.next = 8;
            break;
          }

          throw new Error("%s must at least ".concat(_min, "."));

        case 8:
          return _context3.abrupt("return", value);

        case 9:
        case "end":
          return _context3.stop();
      }
    }
  });
};

var max = function max(_max, value, result) {
  return regeneratorRuntime.async(function max$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          value = number(value);
          _context4.next = 3;
          return regeneratorRuntime.awrap(normalizeParam(_max, value, result, ctx));

        case 3:
          _max = _context4.sent;

          if (!(typeof _max !== 'number')) {
            _context4.next = 6;
            break;
          }

          return _context4.abrupt("return");

        case 6:
          if (!(value < _max)) {
            _context4.next = 8;
            break;
          }

          throw new Error("%s must at most ".concat(_max, "."));

        case 8:
          return _context4.abrupt("return", value);

        case 9:
        case "end":
          return _context4.stop();
      }
    }
  });
};

var length = function length(min, max, value) {
  value = toString(value);

  if (value.length < min || value.length > max) {
    throw new Error("%s must be between ".concat(min, " and ").concat(max, " characters long."));
  }
};

var minLength = function minLength(min, value) {
  value = toString(value);

  if (value.length < min) {
    throw new Error("%s must be at least ".concat(min, " characters long."));
  }
};

var maxLength = function maxLength(max, value) {
  value = toString(value);

  if (value.length > max) {
    throw new Error("%s must be at most ".concat(max, " characters long."));
  }
};

var _int = function _int(value) {
  value = number(value);

  if (value % 1 !== 0) {
    throw new Error("%s is not an integer.");
  }

  return value;
};

var _float = function _float(value) {
  return number(value);
};

var id = function id(value) {
  value = _int(value);

  if (value < 1) {
    throw new Error("%s is not valid.");
  }

  return value;
};

var select = function select(options, value) {
  if (Array.isArray(value)) {
    var filtered = value.filter(function (item) {
      return options.indexOf(item) !== -1;
    }).length;

    if (filtered !== value.length) {
      throw new Error('%s contains invalid options.');
    }
  } else if (options.indexOf(value) === -1) {
    throw new Error('%s is not valid.');
  }
};

var files = {
  mime: function mime(types, value) {
    var mime = value ? value.type || value.mimetype : null;

    if (types.indexOf(mime) === -1) {
      throw new Error('%s has invalid file format.');
    }
  },
  size: function size(limit, value) {
    var size = value ? value.size : null;

    if (typeof size !== 'number' || size > limit) {
      throw new Error('%s is too large.');
    }
  }
};
module.exports = {
  isEmpty: isEmpty,
  isTrue: isTrue,
  isFalse: isFalse,
  required: required,
  nullable: nullable,
  number: number,
  bool: bool,
  toggle: toggle,
  email: email,
  uppercase: uppercase,
  lowercase: lowercase,
  trim: trim,
  truncate: truncate,
  range: range,
  length: length,
  minLength: minLength,
  maxLength: maxLength,
  "int": _int,
  "float": _float,
  id: id,
  select: select,
  min: min,
  max: max,
  files: files
};