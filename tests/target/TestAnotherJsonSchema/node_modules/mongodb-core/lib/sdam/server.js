'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EventEmitter = require('events');

var MongoError = require('../error').MongoError;

var Pool = require('../connection/pool');

var relayEvents = require('../utils').relayEvents;

var calculateDurationInMs = require('../utils').calculateDurationInMs;

var Query = require('../connection/commands').Query;

var TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support');

var ThreeTwoWireProtocolSupport = require('../wireprotocol/3_2_support');

var BSON = require('../connection/utils').retrieveBSON();

var createClientInfo = require('../topologies/shared').createClientInfo;

var Logger = require('../connection/logger');

var ServerDescription = require('./server_description').ServerDescription;

var ReadPreference = require('../topologies/read_preference');

var monitorServer = require('./monitoring').monitorServer;
/**
 *
 * @fires Server#serverHeartbeatStarted
 * @fires Server#serverHeartbeatSucceeded
 * @fires Server#serverHeartbeatFailed
 */


var Server =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Server, _EventEmitter);

  /**
   * Create a server
   *
   * @param {ServerDescription} description
   * @param {Object} options
   */
  function Server(description, options) {
    var _this;

    _classCallCheck(this, Server);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Server).call(this));
    _this.s = {
      // the server description
      description: description,
      // a saved copy of the incoming options
      options: options,
      // the server logger
      logger: Logger('Server', options),
      // the bson parser
      bson: options.bson || new BSON(),
      // client metadata for the initial handshake
      clientInfo: createClientInfo(options),
      // state variable to determine if there is an active server check in progress
      monitoring: false,
      // the connection pool
      pool: null
    };
    return _this;
  }

  _createClass(Server, [{
    key: "connect",

    /**
     * Initiate server connect
     *
     * @param {Array} [options.auth] Array of auth options to apply on connect
     */
    value: function connect(options) {
      options = options || {}; // do not allow connect to be called on anything that's not disconnected

      if (this.s.pool && !this.s.pool.isDisconnected() && !this.s.pool.isDestroyed()) {
        throw new MongoError("Server instance in invalid state ".concat(this.s.pool.state));
      } // create a pool


      this.s.pool = new Pool(this, Object.assign(this.s.options, options, {
        bson: this.s.bson
      })); // Set up listeners

      this.s.pool.on('connect', connectEventHandler(this));
      this.s.pool.on('close', closeEventHandler(this)); // this.s.pool.on('error', errorEventHandler(this));
      // this.s.pool.on('timeout', timeoutEventHandler(this));
      // this.s.pool.on('parseError', errorEventHandler(this));
      // this.s.pool.on('reconnect', reconnectEventHandler(this));
      // this.s.pool.on('reconnectFailed', errorEventHandler(this));
      // relay all command monitoring events

      relayEvents(this.s.pool, this, ['commandStarted', 'commandSucceeded', 'commandFailed']); // If auth settings have been provided, use them

      if (options.auth) {
        this.s.pool.connect.apply(this.s.pool, options.auth);
        return;
      }

      this.s.pool.connect();
    }
    /**
     * Destroy the server connection
     *
     * @param {Boolean} [options.emitClose=false] Emit close event on destroy
     * @param {Boolean} [options.emitDestroy=false] Emit destroy event on destroy
     * @param {Boolean} [options.force=false] Force destroy the pool
     */

  }, {
    key: "destroy",
    value: function destroy(callback) {
      if (typeof callback === 'function') {
        callback(null, null);
      }
    }
    /**
     * Immediately schedule monitoring of this server. If there already an attempt being made
     * this will be a no-op.
     */

  }, {
    key: "monitor",
    value: function monitor() {
      if (this.s.monitoring) return;
      if (this.s.monitorId) clearTimeout(this.s.monitorId);
      monitorServer(this);
    }
    /**
     * Execute a command
     *
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {object} cmd The command hash
     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {opResultCallback} callback A callback function
     */

  }, {
    key: "command",
    value: function command(ns, cmd, options, callback) {
      if (typeof options === 'function') {
        callback = options, options = {}, options = options || {};
      }

      var error = basicReadValidations(this, options);

      if (error) {
        return callback(error, null);
      } // Clone the options


      options = Object.assign({}, options, {
        wireProtocolCommand: false
      }); // Debug log

      if (this.s.logger.isDebug()) {
        this.s.logger.debug("executing command [".concat(JSON.stringify({
          ns: ns,
          cmd: cmd,
          options: options
        }), "] against ").concat(this.name));
      } // Check if we have collation support


      if (this.description.maxWireVersion < 5 && cmd.collation) {
        callback(new MongoError("server ".concat(this.name, " does not support collation")));
        return;
      } // Are we executing against a specific topology


      var topology = options.topology || {}; // Create the query object

      var query = this.s.wireProtocolHandler.command(this.s.bson, ns, cmd, {}, topology, options); // Set slave OK of the query

      query.slaveOk = options.readPreference ? options.readPreference.slaveOk() : false; // write options

      var writeOptions = {
        raw: typeof options.raw === 'boolean' ? options.raw : false,
        promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,
        promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,
        promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,
        command: true,
        monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,
        fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,
        requestId: query.requestId,
        socketTimeout: typeof options.socketTimeout === 'number' ? options.socketTimeout : null,
        session: options.session || null
      }; // write the operation to the pool

      this.s.pool.write(query, writeOptions, callback);
    }
    /**
     * Insert one or more documents
     * @method
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {array} ops An array of documents to insert
     * @param {boolean} [options.ordered=true] Execute in order or out of order
     * @param {object} [options.writeConcern={}] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {opResultCallback} callback A callback function
     */

  }, {
    key: "insert",
    value: function insert(ns, ops, options, callback) {
      executeWriteOperation({
        server: this,
        op: 'insert',
        ns: ns,
        ops: ops
      }, options, callback);
    }
    /**
     * Perform one or more update operations
     * @method
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {array} ops An array of updates
     * @param {boolean} [options.ordered=true] Execute in order or out of order
     * @param {object} [options.writeConcern={}] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {opResultCallback} callback A callback function
     */

  }, {
    key: "update",
    value: function update(ns, ops, options, callback) {
      executeWriteOperation({
        server: this,
        op: 'update',
        ns: ns,
        ops: ops
      }, options, callback);
    }
    /**
     * Perform one or more remove operations
     * @method
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {array} ops An array of removes
     * @param {boolean} [options.ordered=true] Execute in order or out of order
     * @param {object} [options.writeConcern={}] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {opResultCallback} callback A callback function
     */

  }, {
    key: "remove",
    value: function remove(ns, ops, options, callback) {
      executeWriteOperation({
        server: this,
        op: 'remove',
        ns: ns,
        ops: ops
      }, options, callback);
    }
  }, {
    key: "description",
    get: function get() {
      return this.s.description;
    }
  }, {
    key: "name",
    get: function get() {
      return this.s.description.address;
    }
  }]);

  return Server;
}(EventEmitter);

function basicWriteValidations(server) {
  if (!server.s.pool) {
    return new MongoError('server instance is not connected');
  }

  if (server.s.pool.isDestroyed()) {
    return new MongoError('server instance pool was destroyed');
  }

  return null;
}

function basicReadValidations(server, options) {
  var error = basicWriteValidations(server, options);

  if (error) {
    return error;
  }

  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {
    return new MongoError('readPreference must be an instance of ReadPreference');
  }
}

function executeWriteOperation(args, options, callback) {
  if (typeof options === 'function') callback = options, options = {};
  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.

  var server = args.server;
  var op = args.op;
  var ns = args.ns;
  var ops = Array.isArray(args.ops) ? args.ops : [args.ops];
  var error = basicWriteValidations(server, options);

  if (error) {
    callback(error, null);
    return;
  } // Check if we have collation support


  if (server.description.maxWireVersion < 5 && options.collation) {
    callback(new MongoError("server ".concat(this.name, " does not support collation")));
    return;
  } // Execute write


  return server.s.wireProtocolHandler[op](server.s.pool, ns, server.s.bson, ops, options, callback);
}

function saslSupportedMechs(options) {
  if (!options) {
    return {};
  }

  var authArray = options.auth || [];
  var authMechanism = authArray[0] || options.authMechanism;
  var authSource = authArray[1] || options.authSource || options.dbName || 'admin';
  var user = authArray[2] || options.user;

  if (typeof authMechanism === 'string' && authMechanism.toUpperCase() !== 'DEFAULT') {
    return {};
  }

  if (!user) {
    return {};
  }

  return {
    saslSupportedMechs: "".concat(authSource, ".").concat(user)
  };
}

function extractIsMasterError(err, result) {
  if (err) return err;

  if (result && result.result && result.result.ok === 0) {
    return new MongoError(result.result);
  }
}

function executeServerHandshake(server, callback) {
  // construct an `ismaster` query
  var compressors = server.s.options.compression && server.s.options.compression.compressors ? server.s.options.compression.compressors : [];
  var queryOptions = {
    numberToSkip: 0,
    numberToReturn: -1,
    checkKeys: false,
    slaveOk: true
  };
  var query = new Query(server.s.bson, 'admin.$cmd', Object.assign({
    ismaster: true,
    client: server.s.clientInfo,
    compression: compressors
  }, saslSupportedMechs(server.s.options)), queryOptions); // execute the query

  server.s.pool.write(query, {
    socketTimeout: server.s.options.connectionTimeout || 2000
  }, callback);
}

function configureWireProtocolHandler(ismaster) {
  // 3.2 wire protocol handler
  if (ismaster.maxWireVersion >= 4) {
    return new ThreeTwoWireProtocolSupport();
  } // default to 2.6 wire protocol handler


  return new TwoSixWireProtocolSupport();
}

function connectEventHandler(server) {
  return function () {
    // log information of received information if in info mode
    // if (server.s.logger.isInfo()) {
    //   var object = err instanceof MongoError ? JSON.stringify(err) : {};
    //   server.s.logger.info(`server ${server.name} fired event ${event} out with message ${object}`);
    // }
    // begin initial server handshake
    var start = process.hrtime();
    executeServerHandshake(server, function (err, response) {
      // Set initial lastIsMasterMS - is this needed?
      server.s.lastIsMasterMS = calculateDurationInMs(start);
      var serverError = extractIsMasterError(err, response);

      if (serverError) {
        server.emit('error', serverError);
        return;
      } // extract the ismaster from the server response


      var isMaster = response.result; // compression negotation

      if (isMaster && isMaster.compression) {
        var localCompressionInfo = server.s.options.compression;
        var localCompressors = localCompressionInfo.compressors;

        for (var i = 0; i < localCompressors.length; i++) {
          if (isMaster.compression.indexOf(localCompressors[i]) > -1) {
            server.s.pool.options.agreedCompressor = localCompressors[i];
            break;
          }
        }

        if (localCompressionInfo.zlibCompressionLevel) {
          server.s.pool.options.zlibCompressionLevel = localCompressionInfo.zlibCompressionLevel;
        }
      } // configure the wire protocol handler


      server.s.wireProtocolHandler = configureWireProtocolHandler(isMaster); // log the connection event if requested

      if (server.s.logger.isInfo()) {
        server.s.logger.info("server ".concat(server.name, " connected with ismaster [").concat(JSON.stringify(isMaster), "]"));
      } // emit an event indicating that our description has changed


      server.emit('descriptionReceived', new ServerDescription(server.description.address, isMaster)); // emit a connect event

      server.emit('connect', isMaster);
    });
  };
}

function closeEventHandler(server) {
  return function () {
    server.emit('close');
  };
}

module.exports = Server;