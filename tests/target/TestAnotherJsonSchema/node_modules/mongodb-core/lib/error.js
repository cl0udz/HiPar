'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');
/**
 * Creates a new MongoError
 *
 * @augments Error
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @property {string} stack The error call stack
 */

var MongoError =
/*#__PURE__*/
function (_Error) {
  _inherits(MongoError, _Error);

  function MongoError(message) {
    var _this;

    _classCallCheck(this, MongoError);

    if (message instanceof Error) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message));
      _this.stack = message.stack;
    } else {
      if (typeof message === 'string') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message));
      } else {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoError).call(this, message.message || message.errmsg || message.$err || 'n/a'));

        for (var name in message) {
          _this[name] = message[name];
        }
      }

      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    }

    _this.name = 'MongoError';
    _this[mongoErrorContextSymbol] = _this[mongoErrorContextSymbol] || {};
    return _possibleConstructorReturn(_this);
  }
  /**
   * Creates a new MongoError object
   *
   * @param {Error|string|object} options The options used to create the error.
   * @return {MongoError} A MongoError instance
   * @deprecated Use `new MongoError()` instead.
   */


  _createClass(MongoError, null, [{
    key: "create",
    value: function create(options) {
      return new MongoError(options);
    }
  }]);

  return MongoError;
}(_wrapNativeSuper(Error));
/**
 * Creates a new MongoNetworkError
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 * @property {string} stack The error call stack
 */


var MongoNetworkError =
/*#__PURE__*/
function (_MongoError) {
  _inherits(MongoNetworkError, _MongoError);

  function MongoNetworkError(message) {
    var _this2;

    _classCallCheck(this, MongoNetworkError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MongoNetworkError).call(this, message));
    _this2.name = 'MongoNetworkError'; // This is added as part of the transactions specification

    _this2.errorLabels = ['TransientTransactionError'];
    return _this2;
  }

  return MongoNetworkError;
}(MongoError);
/**
 * An error used when attempting to parse a value (like a connection string)
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 */


var MongoParseError =
/*#__PURE__*/
function (_MongoError2) {
  _inherits(MongoParseError, _MongoError2);

  function MongoParseError(message) {
    var _this3;

    _classCallCheck(this, MongoParseError);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MongoParseError).call(this, message));
    _this3.name = 'MongoParseError';
    return _this3;
  }

  return MongoParseError;
}(MongoError);
/**
 * An error signifying a timeout event
 *
 * @param {Error|string|object} message The error message
 * @property {string} message The error message
 */


var MongoTimeoutError =
/*#__PURE__*/
function (_MongoError3) {
  _inherits(MongoTimeoutError, _MongoError3);

  function MongoTimeoutError(message) {
    var _this4;

    _classCallCheck(this, MongoTimeoutError);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(MongoTimeoutError).call(this, message));
    _this4.name = 'MongoTimeoutError';
    return _this4;
  }

  return MongoTimeoutError;
}(MongoError);
/**
 * An error thrown when the server reports a writeConcernError
 *
 * @param {Error|string|object} message The error message
 * @param {object} result The result document (provided if ok: 1)
 * @property {string} message The error message
 * @property {object} [result] The result document (provided if ok: 1)
 */


var MongoWriteConcernError =
/*#__PURE__*/
function (_MongoError4) {
  _inherits(MongoWriteConcernError, _MongoError4);

  function MongoWriteConcernError(message, result) {
    var _this5;

    _classCallCheck(this, MongoWriteConcernError);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(MongoWriteConcernError).call(this, message));
    _this5.name = 'MongoWriteConcernError';

    if (result != null) {
      _this5.result = result;
    }

    return _this5;
  }

  return MongoWriteConcernError;
}(MongoError); // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms


var RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable
7, // HostNotFound
89, // NetworkTimeout
91, // ShutdownInProgress
189, // PrimarySteppedDown
9001, // SocketException
10107, // NotMaster
11600, // InterruptedAtShutdown
11602, // InterruptedDueToReplStateChange
13435, // NotMasterNoSlaveOk
13436 // NotMasterOrSecondary
]);
/**
 * Determines whether an error is something the driver should attempt to retry
 *
 * @param {MongoError|Error} error
 */

function isRetryableError(error) {
  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);
}

module.exports = {
  MongoError: MongoError,
  MongoNetworkError: MongoNetworkError,
  MongoParseError: MongoParseError,
  MongoTimeoutError: MongoTimeoutError,
  MongoWriteConcernError: MongoWriteConcernError,
  mongoErrorContextSymbol: mongoErrorContextSymbol,
  isRetryableError: isRetryableError
};