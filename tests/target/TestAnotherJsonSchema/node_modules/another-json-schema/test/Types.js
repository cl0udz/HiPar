"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var AJS = require('..');

var assert = require('assert');

var UserSchema = AJS('User', {
  uid: {
    type: AJS.Types.ObjectId
  },
  string: {
    type: AJS.Types.String
  },
  number: {
    type: AJS.Types.Number
  },
  date: {
    type: AJS.Types.Date
  },
  buffer: {
    type: AJS.Types.Buffer
  },
  "boolean": {
    type: AJS.Types.Boolean
  },
  mixed: {
    type: AJS.Types.Mixed
  }
});
describe('Types', function () {
  it('ObjectId', function () {
    var user = UserSchema.validate({
      uid: 'xxx'
    });
    assert.deepEqual(user.valid, false);
    user = UserSchema.validate({
      uid: '111111111111111111111111'
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(user.result.uid.toString(), '111111111111111111111111');
  });
  it('String', function () {
    var user = UserSchema.validate({
      string: 111
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(user.result.string, '111');
  });
  it('Number', function () {
    var user = UserSchema.validate({
      number: 1.2
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(user.result.number, 1.2);
    user = UserSchema.validate({
      number: 'haha'
    });
    assert.deepEqual(user.valid, false);
  });
  it('Date', function () {
    var user = UserSchema.validate({
      date: '2018-04-13'
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(_typeof(user.result.date), 'object');
    assert.deepEqual(user.result.date, new Date('2018-04-13'));
    user = UserSchema.validate({
      date: 'haha'
    });
    assert.deepEqual(user.valid, false);
  });
  it('Buffer', function () {
    var user = UserSchema.validate({
      buffer: '123'
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(Buffer.isBuffer(user.result.buffer), true);
    assert.deepEqual(user.result.buffer.toString(), '123');
    user = UserSchema.validate({
      buffer: Buffer.from('123')
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(Buffer.isBuffer(user.result.buffer), true);
    assert.deepEqual(user.result.buffer.toString(), '123');
    user = UserSchema.validate({
      buffer: 1
    });
    assert.deepEqual(user.valid, false);
  });
  it('Boolean', function () {
    var user = UserSchema.validate({
      "boolean": 1
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(user.result["boolean"], true);
  });
  it('Mixed', function () {
    var user = UserSchema.validate({
      mixed: {
        names: ['tom', 'xp']
      }
    });
    assert.deepEqual(user.valid, true);
    assert.deepEqual(user.result.mixed, {
      names: ['tom', 'xp']
    });
  });
});