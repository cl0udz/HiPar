"use strict";

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.map");

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.map"); // Import.


var fs = require('fs');

var jcopy = require('jcopy');

var Record = require('./record'); // Constants.


var FILE_ENCODING = 'utf8';
var EMPTY_RECORDS = [];
var EMPTY_DATA_STRUCTURE = {
  records: []
};
var ERROR_INCORRECT_FILTER_TYPE = 'Filter should be a function.';
/**
 * Data.
 */

var Data =
/*#__PURE__*/
function () {
  /**
   * Data constructor.
   * @param {string} filePath - File path.
   */
  function Data(filePath) {
    _classCallCheck(this, Data);

    this.filePath = filePath;
    this.fileRecords = [];

    this._createFileIfNotExist();

    this._loadFileRecords();
  }
  /**
   * Get data.
   * @param {function} [filter] - Filter function.
   * @return {Array}
   */


  _createClass(Data, [{
    key: "get",
    value: function get(filter) {
      this._throwErrorIfIncorrectFilter(filter);

      var normalizedFilter = this._normalizeFilter(filter);

      var allData = this._getAllData();

      var data = allData.filter(normalizedFilter);
      return data;
    }
    /**
     * Add data.
     * @param {object} data - Data.
     */

  }, {
    key: "add",
    value: function add(data) {
      var record = new Record(data);
      this.fileRecords.push(record);

      this._saveFileRecords();
    }
    /**
     * Update data.
     * @param {function} filter - Filter function.
     * @param {object} data - Data.
     */

  }, {
    key: "update",
    value: function update(filter, data) {
      this._throwErrorIfIncorrectFilter(filter);

      var normalizedFilter = this._normalizeFilter(filter);

      var allData = this._getAllData();

      for (var i = 0; i < allData.length; i++) {
        if (normalizedFilter(allData[i])) {
          this.fileRecords[i] = new Record(data);
        }
      }

      this._saveFileRecords();
    }
    /**
     * Remove data.
     * @param {function} filter - Filter function.
     */

  }, {
    key: "remove",
    value: function remove(filter) {
      this._throwErrorIfIncorrectFilter(filter);

      var normalizedFilter = this._normalizeFilter(filter);

      this.fileRecords = this.fileRecords.filter(function (v) {
        return !normalizedFilter(v.data);
      });

      this._saveFileRecords();
    }
    /**
     * Get all data.
     * @private
     * @return {Array}
     */

  }, {
    key: "_getAllData",
    value: function _getAllData() {
      var records = jcopy(this.fileRecords);
      var allData = records.map(function (v) {
        return v.data;
      });
      return allData;
    }
    /**
     * Throw error if incorrect filter.
     * @param {function} [filter] - Filter function.
     */

  }, {
    key: "_throwErrorIfIncorrectFilter",
    value: function _throwErrorIfIncorrectFilter(filter) {
      var isCorrectFilter = this._isCorrectFilter(filter);

      if (!isCorrectFilter) {
        throw new TypeError(ERROR_INCORRECT_FILTER_TYPE);
      }
    }
    /**
     * Is correct filter.
     * @private
     * @param {function} [filter] - Filter function.
     * @return {boolean}
     */

  }, {
    key: "_isCorrectFilter",
    value: function _isCorrectFilter(filter) {
      if (typeof filter !== 'function' && typeof filter !== 'undefined') {
        return false;
      }

      return true;
    }
    /**
     * Normalize filter.
     * @param {function} [filter] - Filter function.
     * @return {function}
     */

  }, {
    key: "_normalizeFilter",
    value: function _normalizeFilter(filter) {
      var normalizedFilter = typeof filter === 'undefined' ? function () {
        return true;
      } : filter;
      return normalizedFilter;
    }
    /**
     * Save file records.
     * @private
     */

  }, {
    key: "_saveFileRecords",
    value: function _saveFileRecords() {
      var fileContent = this._createFileContent();

      fs.writeFileSync(this.filePath, fileContent, {
        encoding: FILE_ENCODING
      });
    }
    /**
     * Load file records.
     * @private
     */

  }, {
    key: "_loadFileRecords",
    value: function _loadFileRecords() {
      this.fileRecords = this._getFileRecords();
    }
    /**
     * Create file records.
     * @param {Array} recordsData - Records data.
     */

  }, {
    key: "_createFileRecords",
    value: function _createFileRecords(recordsData) {
      var records = recordsData.map(function (v) {
        return new Record(v);
      });
      return records;
    }
    /**
     * Get file records.
     * @private
     * @return {Array}
     */

  }, {
    key: "_getFileRecords",
    value: function _getFileRecords() {
      var emptyRecords = this._getEmptyRecords();

      var fileContentObject = this._getFileContentObject();

      var fileRecords = fileContentObject.records || emptyRecords;
      return fileRecords;
    }
    /**
     * Create file content object.
     * @private
     * @return {object}
     */

  }, {
    key: "_createFileContentObject",
    value: function _createFileContentObject() {
      var fileContentObject = this._getEmptyDataStructure();

      fileContentObject.records = this.fileRecords;
      return fileContentObject;
    }
    /**
     * Get file content object.
     * @private
     * @return {object}
     */

  }, {
    key: "_getFileContentObject",
    value: function _getFileContentObject() {
      var fileContent = this._getFileContent();

      var fileContentObject = JSON.parse(fileContent);
      return fileContentObject;
    }
    /**
     * Create file content.
     * @private
     * @return {string}
     */

  }, {
    key: "_createFileContent",
    value: function _createFileContent() {
      var dataStructure = this._getEmptyDataStructure();

      dataStructure.records = this.fileRecords;
      var fileContent = JSON.stringify(dataStructure);
      return fileContent;
    }
    /**
     * Get file content.
     * @private
     * @return {string}
     */

  }, {
    key: "_getFileContent",
    value: function _getFileContent() {
      var fileContent = fs.readFileSync(this.filePath, {
        encoding: FILE_ENCODING
      });
      return fileContent;
    }
    /**
     * Create file if not exist.
     * @private
     */

  }, {
    key: "_createFileIfNotExist",
    value: function _createFileIfNotExist() {
      if (!fs.existsSync(this.filePath)) {
        this._dropFileRecords();
      }
    }
    /**
     * Drop file records.
     * @private
     */

  }, {
    key: "_dropFileRecords",
    value: function _dropFileRecords() {
      var emptyDataStructure = this._getEmptyDataStructure();

      fs.writeFileSync(this.filePath, JSON.stringify(emptyDataStructure), {
        encoding: FILE_ENCODING
      });
    }
    /**
     * Get empty data structure.
     * @private
     * @return {object}
     */

  }, {
    key: "_getEmptyDataStructure",
    value: function _getEmptyDataStructure() {
      var emptyDataStructure = jcopy(EMPTY_DATA_STRUCTURE);
      return emptyDataStructure;
    }
    /**
     * Get empty records.
     * @private
     * @return {Array}
     */

  }, {
    key: "_getEmptyRecords",
    value: function _getEmptyRecords() {
      var emptyRecords = jcopy(EMPTY_RECORDS);
      return emptyRecords;
    }
  }]);

  return Data;
}(); // Export.


module.exports = Data;