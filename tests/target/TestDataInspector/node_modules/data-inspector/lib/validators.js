"use strict";

require("core-js/modules/es.array.reduce");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

var get = require('get-value');

var moment = require('moment');

var utils = require('./utils');

var validators = {
  required: function required(schema, field, rule) {
    return !rule ? true : !!get(schema, field);
  },
  type: function type(schema, field, rule) {
    return utils.checkType(get(schema, field), rule);
  },
  pattern: function pattern(schema, field, rule) {
    return utils.match(get(schema, field), rule);
  },
  exactLength: function exactLength(schema, field, rule) {
    return utils.equal(get(schema, field).length, rule);
  },
  minLength: function minLength(schema, field, rule) {
    return utils.greaterOrEqualThan(get(schema, field).length, rule);
  },
  maxLength: function maxLength(schema, field, rule) {
    return utils.lessOrEqualThan(get(schema, field).length, rule);
  },
  lengthBetween: function lengthBetween(schema, field, rule) {
    return validators.minLength(schema, field, rule[0]) && validators.maxLength(schema, field, rule[1]);
  },
  lessThan: function lessThan(schema, field, rule) {
    return get(schema, field) < rule;
  },
  lessOrEqualThan: function lessOrEqualThan(schema, field, rule) {
    return get(schema, field) <= rule;
  },
  greaterThan: function greaterThan(schema, field, rule) {
    return get(schema, field) > rule;
  },
  greaterOrEqualThan: function greaterOrEqualThan(schema, field, rule) {
    return get(schema, field) >= rule;
  },
  equal: function equal(schema, field, rule) {
    return get(schema, field) === rule;
  },
  notEqual: function notEqual(schema, field, rule) {
    return get(schema, field) !== rule;
  },
  accepted: function accepted(schema, field) {
    return !utils.notIn(get(schema, field), ['yes', 'on', 1, true]);
  },
  afterDate: function afterDate(schema, field, rule) {
    return moment(get(schema, field)).isAfter(rule);
  },
  beforeDate: function beforeDate(schema, field, rule) {
    return moment(get(schema, field)).isBefore(rule);
  },
  equalDate: function equalDate(schema, field, rule) {
    return moment(get(schema, field)).isSame(rule);
  },
  equalOrBeforeDate: function equalOrBeforeDate(schema, field, rule) {
    return moment(get(schema, field)).isSameOrBefore(rule);
  },
  equalOrAfterDate: function equalOrAfterDate(schema, field, rule) {
    return moment(get(schema, field)).isSameOrAfter(rule);
  },
  betweenDates: function betweenDates(schema, field, rule) {
    return moment(get(schema, field)).isBetween(rule[0], rule[1]);
  },
  alpha: function alpha(schema, field) {
    return utils.match(get(schema, field), /^[a-z]+$/i);
  },
  alphaDash: function alphaDash(schema, field) {
    return utils.match(get(schema, field), /^[\w\-]+$/);
  },
  alphaNumeric: function alphaNumeric(schema, field) {
    return utils.match(get(schema, field), /^[a-z0-9]+$/i);
  },
  email: function email(schema, field) {
    return utils.match(get(schema, field), /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i);
  },
  url: function url(schema, field) {
    return utils.match(get(schema, field), /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/);
  },
  ip: function ip(schema, field) {
    return utils.match(get(schema, field), /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/);
  },
  between: function between(schema, field, rule) {
    return utils.greaterThan(get(schema, field), rule[0]) && utils.lessThan(get(schema, field), rule[1]);
  },
  betweenStrict: function betweenStrict(schema, field, rule) {
    return utils.greaterOrEqualThan(get(schema, field), rule[0]) && utils.lessOrEqualThan(get(schema, field), rule[1]);
  },
  digits: function digits(schema, field, rule) {
    return utils.checkType(get(schema, field), 'number') && new String(get(schema, field)).length === rule;
  },
  distinct: function distinct(schema, field, rule) {
    return utils.distinct(get(schema, field), rule);
  },
  "in": function _in(schema, field, rule) {
    return !utils.notIn(get(schema, field), rule);
  },
  notIn: function notIn(schema, field, rule) {
    return utils.notIn(get(schema, field), rule);
  },
  requiredWith: function requiredWith(schema, field, rule) {
    return rule.reduce(function (prev, curr) {
      return prev || !!schema[curr];
    }, false) ? !!get(schema, field) : true;
  },
  requiredWithout: function requiredWithout(schema, field, rule) {
    return rule.reduce(function (prev, curr) {
      return prev && !!schema[curr];
    }, true) ? true : !!get(schema, field);
  },
  requiredIf: function requiredIf(schema, field, rule) {
    return rule(schema) === true ? validators.required(schema, field, true) : true;
  }
};
module.exports = validators;