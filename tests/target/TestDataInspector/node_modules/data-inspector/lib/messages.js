"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.join");

module.exports = {
  required: function required(attribute) {
    return "The attribute `".concat(attribute, "` is required");
  },
  type: function type(attribute, value) {
    return "The attribute `".concat(attribute, "` must be of type ").concat(value);
  },
  pattern: function pattern(attribute) {
    return "The attribute `".concat(attribute, "` is invalid");
  },
  exactLength: function exactLength(attribute, value) {
    return "The attribute `".concat(attribute, "` must have the exact length of ").concat(value);
  },
  minLength: function minLength(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a minimum length of ").concat(value);
  },
  maxLength: function maxLength(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a maximum length of ").concat(value);
  },
  lengthBetween: function lengthBetween(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a length between ").concat(value[0], " and ").concat(value[1]);
  },
  lessThan: function lessThan(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value less than ").concat(value);
  },
  lessOrEqualThan: function lessOrEqualThan(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value less than or equal ").concat(value);
  },
  greaterThan: function greaterThan(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value greater than ").concat(value);
  },
  greaterOrEqualThan: function greaterOrEqualThan(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value greater than or equal ").concat(value);
  },
  equal: function equal(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value equal ").concat(value);
  },
  notEqual: function notEqual(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value different than ").concat(value);
  },
  accepted: function accepted(attribute) {
    return "The attribute `".concat(attribute, "` must be accepted");
  },
  afterDate: function afterDate(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date after ").concat(value);
  },
  beforeDate: function beforeDate(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date before ").concat(value);
  },
  equalDate: function equalDate(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date equal ").concat(value);
  },
  equalOrBeforeDate: function equalOrBeforeDate(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date before or equal ").concat(value);
  },
  equalOrAfterDate: function equalOrAfterDate(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date after or equal ").concat(value);
  },
  betweenDates: function betweenDates(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a date between ").concat(value[0], " and ").concat(value[1]);
  },
  alpha: function alpha(attribute) {
    return "The attribute `".concat(attribute, "` must be entirely alphabetic characters");
  },
  alphaDash: function alphaDash(attribute) {
    return "The attribute `".concat(attribute, "` may have alpha-numeric characters, as well as dashes and underscores");
  },
  alphaNumeric: function alphaNumeric(attribute) {
    return "The attribute `".concat(attribute, "` must be entirely alpha-numeric characters");
  },
  email: function email(attribute) {
    return "The attribute `".concat(attribute, "` must be formatted as an email address");
  },
  url: function url(attribute) {
    return "The attribute `".concat(attribute, "` must be formatted as an url");
  },
  ip: function ip(attribute) {
    return "The attribute `".concat(attribute, "` must be formatted as an IP address");
  },
  between: function between(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value between ").concat(value[0], " and ").concat(value[1]);
  },
  betweenStrict: function betweenStrict(attribute, value) {
    return "The attribute `".concat(attribute, "` must have a value between ").concat(value[0], " and ").concat(value[1], " inclusive");
  },
  digits: function digits(attribute, value) {
    return "The attribute `".concat(attribute, "` must be a number and its digits must have a length of ").concat(value);
  },
  distinct: function distinct(attribute) {
    return "All the values of the attribute `".concat(attribute, "` must be different");
  },
  "in": function _in(attribute, value) {
    return "The attribute `".concat(attribute, "` must be one of these: ").concat(value);
  },
  notIn: function notIn(attribute, value) {
    return "The attribute `".concat(attribute, "` must not be one of these: ").concat(value);
  },
  requiredWith: function requiredWith(attribute, value) {
    return "The attribute `".concat(attribute, "` must be present only if ").concat(value.join(' or '), " is present");
  },
  requiredWithout: function requiredWithout(attribute, value) {
    return "The attribute `".concat(attribute, "` must be present only if ").concat(value.join(' or '), " is not present");
  },
  requiredIf: function requiredIf(attribute) {
    return "The attribute `".concat(attribute, "` is required");
  }
};