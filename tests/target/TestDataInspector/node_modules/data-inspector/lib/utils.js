"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

var utils = {
  match: function match(value, pattern) {
    return new RegExp(pattern).test(value);
  },
  lessThan: function lessThan(value1, value) {
    return value1 < value;
  },
  lessOrEqualThan: function lessOrEqualThan(value1, value) {
    return value1 <= value;
  },
  greaterThan: function greaterThan(value1, value) {
    return value1 > value;
  },
  greaterOrEqualThan: function greaterOrEqualThan(value1, value) {
    return value1 >= value;
  },
  equal: function equal(value1, value) {
    return value1 === value;
  },
  notIn: function notIn(value, arr) {
    return !~arr.indexOf(value);
  },
  checkType: function checkType(value, type) {
    if (type === 'string') {
      return typeof value === 'string' || value instanceof String;
    } else if (type === 'array') {
      return Array.isArray(value);
    } else if (type === 'number') {
      return !isNaN(value);
    } else if (type === 'boolean') {
      return value === true || value === false;
    } else {
      return false;
    }
  },
  distinct: function distinct(entries, key) {
    if (!utils.checkType(entries, 'array')) {
      return false;
    }

    var foundValues = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var entry = _step.value;
        var value = key && typeof key === 'string' ? entry[key] : entry;

        if (~foundValues.indexOf(value)) {
          return false;
        }

        foundValues.push(value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  }
};
module.exports = utils;