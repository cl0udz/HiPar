"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var inflection = require('inflection');

var pathProxy = require('path-proxy');

var promisifyCall = require('promisify-call');

var Builder =
/*#__PURE__*/
function () {
  function Builder(baseObj, resources) {
    _classCallCheck(this, Builder);

    this.baseObj = baseObj;
    this.resources = resources;
  }

  _createClass(Builder, [{
    key: "build",
    value: function build() {
      var _this = this;

      Object.keys(this.resources).forEach(function (key) {
        // console.log('building ' + key);
        _this.buildResource(_this.resources[key]);
      });
    }
  }, {
    key: "buildResource",
    value: function buildResource(resource) {
      resource.links.forEach(this.buildAction, this);
    }
  }, {
    key: "buildAction",
    value: function buildAction(action) {
      var actionName = action.title;
      var properties = action.properties;
      var requiredProps = action.required; // HACKY special case for members bulk add and send MIME endpoints

      var path = action.href.replace(/\.json/gi, '').replace(/\.mime/gi, '');
      var constructor = pathProxy.pathProxy(this.baseObj, path);

      function impl(data, fn) {
        var requestPath = action.href;
        var pathParams = action.href.match(/{[^}]+}/g) || [];

        if (typeof data === 'function') {
          fn = data;
          data = undefined;
        }

        var err;

        if (this.params.length !== pathParams.length) {
          err = new Error("Invalid number of params in path (expected ".concat(pathParams.length, ", got ").concat(this.params.length, ")."));
          return fn(err);
        }

        this.params.forEach(function (param) {
          requestPath = requestPath.replace(/{[^}]+}/, param);
        }); // check required payload properties

        if (requiredProps && requiredProps.length > 0) {
          if (!data) {
            err = new Error('Missing parameters.');
          } else {
            for (var i = 0; i < requiredProps.length; i++) {
              var prop = requiredProps[i];

              if (typeof data[prop] === 'undefined') {
                err = new Error("Missing parameter '".concat(prop, "'"));
                break;
              }
            }
          }
        }

        if (err) {
          return fn(err);
        } // check payload property types


        for (var key in properties) {
          if (data && data[key]) {
            var type = properties[key].type;

            var dataType = _typeof(data[key]);

            if (Array.isArray(data[key])) {
              dataType = 'array';
            }

            if (Array.isArray(type)) {
              if (type.indexOf(dataType) === -1) {
                err = new Error("Invalid parameter type. ".concat(key, " must be of type: ").concat(type, "."));
                break;
              }
            } else if (dataType !== type) {
              err = new Error("Invalid parameter type. ".concat(key, " must be of type: ").concat(type, "."));
              break;
            }
          }
        }

        if (err) {
          return fn(err);
        }

        this.client = this.base;
        return this.client.request(action.method, requestPath, data, fn);
      }

      function promisifed(data, fn) {
        return promisifyCall(this, impl, data, fn);
      }

      constructor.prototype[getName(actionName)] = promisifed;
    }
  }]);

  return Builder;
}();

function getName(name) {
  name = name.toLowerCase();
  name = inflection.dasherize(name).replace(/-/g, '_');
  name = inflection.camelize(name, true);
  return name;
}

function build(baseObj, resources) {
  var b = new Builder(baseObj, resources);
  b.build();
}

exports.build = build;