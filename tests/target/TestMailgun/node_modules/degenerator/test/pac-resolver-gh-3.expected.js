"use strict";

require("regenerator-runtime/runtime.js");

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(FindProxyForURL),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(isHostInAnySubnet);

function FindProxyForURL(url, host) {
  return regeneratorRuntime.wrap(function FindProxyForURL$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return isHostInAnySubnet(host, ['10.1.2.0', '10.1.3.0'], '255.255.255.0');

        case 2:
          if (!_context.sent) {
            _context.next = 4;
            break;
          }

          return _context.abrupt("return", 'HTTPS proxy.example.com');

        case 4:
          _context.next = 6;
          return isHostInAnySubnet(host, ['10.2.2.0', '10.2.3.0'], '255.255.255.0');

        case 6:
          if (!_context.sent) {
            _context.next = 8;
            break;
          }

          return _context.abrupt("return", 'HTTPS proxy.example.com');

        case 8:
          return _context.abrupt("return", 'DIRECT');

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function isHostInAnySubnet(host, subnets, mask) {
  var subnets_length;
  return regeneratorRuntime.wrap(function isHostInAnySubnet$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          subnets_length = subnets.length;
          i = 0;

        case 2:
          if (!(i < subnets_length)) {
            _context2.next = 10;
            break;
          }

          _context2.next = 5;
          return isInNet(host, subnets[i], mask);

        case 5:
          if (!_context2.sent) {
            _context2.next = 7;
            break;
          }

          return _context2.abrupt("return", true);

        case 7:
          i++;
          _context2.next = 2;
          break;

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}