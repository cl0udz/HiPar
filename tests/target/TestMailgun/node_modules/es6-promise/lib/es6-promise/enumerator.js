"use strict";

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("./utils");

var _internal = require("./-internal");

var _then2 = _interopRequireDefault(require("./then"));

var _promise = _interopRequireDefault(require("./promise"));

var _resolve = _interopRequireDefault(require("./promise/resolve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

;

var Enumerator =
/*#__PURE__*/
function () {
  function Enumerator(Constructor, input) {
    _classCallCheck(this, Enumerator);

    this._instanceConstructor = Constructor;
    this.promise = new Constructor(_internal.noop);

    if (!this.promise[_internal.PROMISE_ID]) {
      (0, _internal.makePromise)(this.promise);
    }

    if ((0, _utils.isArray)(input)) {
      this.length = input.length;
      this._remaining = input.length;
      this._result = new Array(this.length);

      if (this.length === 0) {
        (0, _internal.fulfill)(this.promise, this._result);
      } else {
        this.length = this.length || 0;

        this._enumerate(input);

        if (this._remaining === 0) {
          (0, _internal.fulfill)(this.promise, this._result);
        }
      }
    } else {
      (0, _internal.reject)(this.promise, validationError());
    }
  }

  _createClass(Enumerator, [{
    key: "_enumerate",
    value: function _enumerate(input) {
      for (var i = 0; this._state === _internal.PENDING && i < input.length; i++) {
        this._eachEntry(input[i], i);
      }
    }
  }, {
    key: "_eachEntry",
    value: function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve = c.resolve;

      if (resolve === _resolve["default"]) {
        var _then;

        var error;
        var didError = false;

        try {
          _then = entry.then;
        } catch (e) {
          didError = true;
          error = e;
        }

        if (_then === _then2["default"] && entry._state !== _internal.PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === _promise["default"]) {
          var promise = new c(_internal.noop);

          if (didError) {
            (0, _internal.reject)(promise, error);
          } else {
            (0, _internal.handleMaybeThenable)(promise, entry, _then);
          }

          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve) {
            return resolve(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve(entry), i);
      }
    }
  }, {
    key: "_settledAt",
    value: function _settledAt(state, i, value) {
      var promise = this.promise;

      if (promise._state === _internal.PENDING) {
        this._remaining--;

        if (state === _internal.REJECTED) {
          (0, _internal.reject)(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        (0, _internal.fulfill)(promise, this._result);
      }
    }
  }, {
    key: "_willSettleAt",
    value: function _willSettleAt(promise, i) {
      var enumerator = this;
      (0, _internal.subscribe)(promise, undefined, function (value) {
        return enumerator._settledAt(_internal.FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(_internal.REJECTED, i, reason);
      });
    }
  }]);

  return Enumerator;
}();

exports["default"] = Enumerator;
;