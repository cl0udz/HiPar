"use strict";

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

;

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = __importDefault(require("./types"));

function default_1(fork) {
  var types = fork.use(types_1["default"]);
  var Type = types.Type;
  var builtin = types.builtInTypes;
  var isNumber = builtin.number; // An example of constructing a new type with arbitrary constraints from
  // an existing type.

  function geq(than) {
    return Type.from(function (value) {
      return isNumber.check(value) && value >= than;
    }, isNumber + " >= " + than);
  }

  ; // Default value-returning functions that may optionally be passed as a
  // third argument to Def.prototype.field.

  var defaults = {
    // Functions were used because (among other reasons) that's the most
    // elegant way to allow for the emptyArray one always to give a new
    // array instance.
    "null": function _null() {
      return null;
    },
    "emptyArray": function emptyArray() {
      return [];
    },
    "false": function _false() {
      return false;
    },
    "true": function _true() {
      return true;
    },
    "undefined": function undefined() {},
    "use strict": function useStrict() {
      return "use strict";
    }
  };
  var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin["boolean"], builtin["null"], builtin.undefined);
  var isPrimitive = Type.from(function (value) {
    if (value === null) return true;

    var type = _typeof(value);

    if (type === "object" || type === "function") {
      return false;
    }

    return true;
  }, naiveIsPrimitive.toString());
  return {
    geq: geq,
    defaults: defaults,
    isPrimitive: isPrimitive
  };
}

exports["default"] = default_1;
module.exports = exports["default"];