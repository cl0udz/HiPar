"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Module dependencies.
 */
var isIP = require('net').isIP;

var assert = require('assert');

var dnsResolve = require('../dnsResolve');

describe('dnsResolve(host)', function () {
  var tests = [["www.netscape.com", true], ["bogus.domain.foobar", false]];
  tests.forEach(function (test) {
    var expected = test.pop();

    if (expected) {
      it('should resolve an IPv4 address for "' + test.join('", "') + '"', function (done) {
        dnsResolve(test[0], function (err, res) {
          if (err) return done(err);
          assert.equal('string', _typeof(res));
          assert.equal(4, isIP(res));
          done();
        });
      });
    } else {
      it('should throw a not found Error for "' + test.join('", "') + '"', function (done) {
        dnsResolve(test[0], function (err, res) {
          assert(err);
          done();
        });
      });
    }
  });
});