"use strict";

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/web.timers.js");

require("regenerator-runtime/runtime.js");

var _ava = _interopRequireDefault(require("ava"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var promisifyCall = require('../');

function testFn(param, fn) {
  setTimeout(function () {
    if (param.toLowerCase() === 'error') {
      return fn(new Error(param));
    }

    return fn(null, param.toUpperCase());
  }, 50);
}

function uppercase(param, fn) {
  return promisifyCall.apply(void 0, [this, testFn].concat(Array.prototype.slice.call(arguments)));
}

function uppercase2(param, fn) {
  return promisifyCall(this, testFn, param, fn);
}

_ava["default"].cb('should properly return success value - callback', function (t) {
  uppercase('foo', function (err, res) {
    t.ifError(err);
    t.is(res, 'FOO');
    t.end();
  });
});

_ava["default"].cb('should properly return error value - callback', function (t) {
  uppercase('error', function (err, res) {
    t.truthy(err);
    t.falsy(res);
    t.end();
  });
});

_ava["default"].cb('should properly return success value - promised using then()', function (t) {
  uppercase('foo').then(function (res) {
    t.is(res, 'FOO');
    t.end();
  });
});

_ava["default"].cb('should properly return error value - promised using then()', function (t) {
  uppercase('error').then(function (res) {
    t.falsy(res);
  })["catch"](function (err) {
    t.truthy(err);
    t.end();
  });
});

(0, _ava["default"])('should properly return success value - promised', function _callee(t) {
  var res;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          t.plan(1);
          _context.next = 3;
          return regeneratorRuntime.awrap(uppercase('foo'));

        case 3:
          res = _context.sent;
          t.is(res, 'FOO');

        case 5:
        case "end":
          return _context.stop();
      }
    }
  });
});
(0, _ava["default"])('should properly return error value - promised', function _callee2(t) {
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          t["throws"](uppercase('error'));

        case 1:
        case "end":
          return _context2.stop();
      }
    }
  });
});

_ava["default"].cb('should properly return success value - callback - case 2', function (t) {
  uppercase2('foo', function (err, res) {
    t.ifError(err);
    t.is(res, 'FOO');
    t.end();
  });
});

_ava["default"].cb('should properly return error value - callback - explicit pass', function (t) {
  uppercase2('error', function (err, res) {
    t.truthy(err);
    t.falsy(res);
    t.end();
  });
});

_ava["default"].cb('should properly return success value - promised using then() - explicit pass', function (t) {
  uppercase2('foo').then(function (res) {
    t.is(res, 'FOO');
    t.end();
  });
});

_ava["default"].cb('should properly return error value - promised using then() - explicit pass', function (t) {
  uppercase2('error').then(function (res) {
    t.falsy(res);
  })["catch"](function (err) {
    t.truthy(err);
    t.end();
  });
});

(0, _ava["default"])('should properly return success value - promised - explicit pass', function _callee3(t) {
  var res;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          t.plan(1);
          _context3.next = 3;
          return regeneratorRuntime.awrap(uppercase2('foo'));

        case 3:
          res = _context3.sent;
          t.is(res, 'FOO');

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  });
});
(0, _ava["default"])('should properly return error value - promised - explicit pass', function _callee4(t) {
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          t["throws"](uppercase2('error'));

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  });
});