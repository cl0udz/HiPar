J$.iids = {"9":[2,1,2,7],"10":[23,42,23,81],"17":[2,23,2,30],"18":[24,10,24,53],"25":[2,32,2,44],"26":[24,10,24,88],"33":[3,10,3,14],"41":[2,46,3,16],"49":[2,1,3,17],"51":[2,1,2,22],"57":[2,1,3,18],"65":[5,1,5,8],"73":[5,9,5,18],"81":[5,22,5,53],"89":[5,1,5,53],"97":[5,1,5,54],"105":[6,30,6,35],"113":[6,30,6,35],"121":[6,30,6,35],"129":[20,18,20,22],"137":[20,23,20,32],"145":[20,23,20,42],"147":[20,23,20,40],"153":[20,14,20,43],"161":[20,14,20,43],"169":[20,14,20,43],"177":[21,28,21,32],"185":[21,28,21,52],"187":[21,28,21,50],"193":[21,28,21,52],"201":[21,28,21,52],"209":[22,3,22,7],"217":[22,19,22,20],"225":[22,22,22,23],"233":[22,3,22,24],"235":[22,3,22,18],"241":[22,3,22,25],"249":[23,42,23,46],"257":[23,42,23,56],"259":[23,42,23,54],"265":[23,59,23,81],"273":[23,42,23,81],"281":[23,42,23,81],"289":[24,10,24,28],"297":[24,31,24,53],"305":[24,56,24,88],"313":[24,10,24,88],"321":[24,3,24,89],"329":[19,1,25,2],"337":[19,1,25,2],"345":[19,1,25,2],"353":[19,1,25,2],"361":[19,1,25,2],"369":[19,1,25,2],"377":[27,1,27,7],"385":[27,18,27,25],"393":[27,26,27,35],"401":[27,18,27,36],"409":[27,1,27,36],"417":[27,1,27,37],"425":[1,1,27,37],"433":[1,1,27,37],"441":[19,1,25,2],"449":[1,1,27,37],"457":[19,1,25,2],"465":[19,1,25,2],"473":[1,1,27,37],"481":[1,1,27,37],"nBranches":0,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index_jalangi_.js","code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getTimezoneOffsetInMilliseconds;\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = date.getTimezoneOffset();\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}\n\nmodule.exports = exports[\"default\"];"};
jalangiLabel148:
    while (true) {
        try {
            J$.Se(425, '/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js');
            function getTimezoneOffsetInMilliseconds(dirtyDate) {
                jalangiLabel147:
                    while (true) {
                        try {
                            J$.Fe(329, arguments.callee, this, arguments);
                            arguments = J$.N(337, 'arguments', arguments, 4);
                            dirtyDate = J$.N(345, 'dirtyDate', dirtyDate, 4);
                            J$.N(353, 'date', date, 0);
                            J$.N(361, 'baseTimezoneOffset', baseTimezoneOffset, 0);
                            J$.N(369, 'millisecondsPartOfTimezoneOffset', millisecondsPartOfTimezoneOffset, 0);
                            var date = J$.X1(169, J$.W(161, 'date', J$.F(153, J$.R(129, 'Date', Date, 2), 1)(J$.M(145, J$.R(137, 'dirtyDate', dirtyDate, 0), 'getTime', 0)()), date, 1));
                            var baseTimezoneOffset = J$.X1(201, J$.W(193, 'baseTimezoneOffset', J$.M(185, J$.R(177, 'date', date, 0), 'getTimezoneOffset', 0)(), baseTimezoneOffset, 1));
                            J$.X1(241, J$.M(233, J$.R(209, 'date', date, 0), 'setSeconds', 0)(J$.T(217, 0, 22, false), J$.T(225, 0, 22, false)));
                            var millisecondsPartOfTimezoneOffset = J$.X1(281, J$.W(273, 'millisecondsPartOfTimezoneOffset', J$.B(10, '%', J$.M(257, J$.R(249, 'date', date, 0), 'getTime', 0)(), J$.R(265, 'MILLISECONDS_IN_MINUTE', MILLISECONDS_IN_MINUTE, 1), 0), millisecondsPartOfTimezoneOffset, 1));
                            return J$.X1(321, J$.Rt(313, J$.B(26, '+', J$.B(18, '*', J$.R(289, 'baseTimezoneOffset', baseTimezoneOffset, 0), J$.R(297, 'MILLISECONDS_IN_MINUTE', MILLISECONDS_IN_MINUTE, 1), 0), J$.R(305, 'millisecondsPartOfTimezoneOffset', millisecondsPartOfTimezoneOffset, 0), 0)));
                        } catch (J$e) {
                            J$.Ex(457, J$e);
                        } finally {
                            if (J$.Fr(465))
                                continue jalangiLabel147;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(433, 'MILLISECONDS_IN_MINUTE', MILLISECONDS_IN_MINUTE, 0);
            getTimezoneOffsetInMilliseconds = J$.N(449, 'getTimezoneOffsetInMilliseconds', J$.T(441, getTimezoneOffsetInMilliseconds, 12, false, 329), 0);
            J$.X1(57, J$.M(49, J$.R(9, 'Object', Object, 2), 'defineProperty', 0)(J$.R(17, 'exports', exports, 2), J$.T(25, "__esModule", 21, false), J$.T(41, {
                value: J$.T(33, true, 23, false)
            }, 11, false)));
            J$.X1(97, J$.P(89, J$.R(65, 'exports', exports, 2), J$.T(73, "default", 21, false), J$.R(81, 'getTimezoneOffsetInMilliseconds', getTimezoneOffsetInMilliseconds, 1), 2));
            var MILLISECONDS_IN_MINUTE = J$.X1(121, J$.W(113, 'MILLISECONDS_IN_MINUTE', J$.T(105, 60000, 22, false), MILLISECONDS_IN_MINUTE, 3));
            J$.X1(417, J$.P(409, J$.R(377, 'module', module, 2), 'exports', J$.G(401, J$.R(385, 'exports', exports, 2), J$.T(393, "default", 21, false), 4), 0));
        } catch (J$e) {
            J$.Ex(473, J$e);
        } finally {
            if (J$.Sr(481)) {
                J$.L();
                continue jalangiLabel148;
            } else {
                J$.L();
                break jalangiLabel148;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
