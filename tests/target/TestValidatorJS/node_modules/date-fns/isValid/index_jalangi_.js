J$.iids = {"8":[10,10,10,31],"9":[2,1,2,7],"10":[74,7,74,27],"16":[10,10,10,31],"17":[2,23,2,30],"18":[75,25,75,76],"24":[74,7,74,27],"25":[2,32,2,44],"26":[75,25,75,89],"33":[3,10,3,14],"34":[79,10,79,22],"41":[2,46,3,16],"49":[2,1,3,17],"51":[2,1,2,22],"57":[2,1,3,18],"65":[5,1,5,8],"73":[5,9,5,18],"81":[5,22,5,29],"89":[5,1,5,29],"97":[5,1,5,30],"105":[7,14,7,36],"113":[7,37,7,44],"121":[7,45,7,65],"129":[7,37,7,66],"137":[7,14,7,67],"145":[7,14,7,67],"153":[7,14,7,67],"161":[10,10,10,13],"169":[10,17,10,20],"177":[10,17,10,31],"185":[10,34,10,37],"193":[11,16,11,19],"201":[10,40,11,21],"209":[10,10,11,21],"217":[10,3,11,22],"225":[9,1,13,2],"233":[9,1,13,2],"241":[9,1,13,2],"249":[74,7,74,16],"257":[74,7,74,23],"265":[74,26,74,27],"273":[75,15,75,24],"281":[75,25,75,57],"289":[75,60,75,69],"297":[75,60,75,76],"305":[75,79,75,89],"313":[75,11,75,90],"321":[75,11,75,90],"329":[75,5,75,91],"337":[78,15,78,16],"345":[78,18,78,24],"353":[78,25,78,34],"361":[78,18,78,35],"369":[78,15,78,16],"377":[78,37,78,46],"385":[78,14,78,47],"393":[78,14,78,47],"401":[78,14,78,47],"409":[79,11,79,16],"417":[79,17,79,21],"425":[79,11,79,22],"433":[79,10,79,22],"441":[79,3,79,23],"449":[73,1,80,2],"457":[73,1,80,2],"465":[73,1,80,2],"473":[73,1,80,2],"481":[82,1,82,7],"489":[82,18,82,25],"497":[82,26,82,35],"505":[82,18,82,36],"513":[82,1,82,36],"521":[82,1,82,37],"529":[1,1,82,37],"537":[1,1,82,37],"545":[9,1,13,2],"553":[1,1,82,37],"561":[73,1,80,2],"569":[1,1,82,37],"577":[10,10,11,21],"585":[9,1,13,2],"593":[9,1,13,2],"601":[74,3,76,4],"609":[73,1,80,2],"617":[73,1,80,2],"625":[1,1,82,37],"633":[1,1,82,37],"nBranches":6,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/isValid/index.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/isValid/index_jalangi_.js","code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isValid;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\n\nfunction isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = (0, _index[\"default\"])(dirtyDate);\n  return !isNaN(date);\n}\n\nmodule.exports = exports[\"default\"];"};
jalangiLabel120:
    while (true) {
        try {
            J$.Se(529, '/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/isValid/index_jalangi_.js', '/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/date-fns/isValid/index.js');
            function _interopRequireDefault(obj) {
                jalangiLabel118:
                    while (true) {
                        try {
                            J$.Fe(225, arguments.callee, this, arguments);
                            arguments = J$.N(233, 'arguments', arguments, 4);
                            obj = J$.N(241, 'obj', obj, 4);
                            return J$.X1(217, J$.Rt(209, J$.X1(577, J$.C(16, J$.C(8, J$.R(161, 'obj', obj, 0)) ? J$.G(177, J$.R(169, 'obj', obj, 0), '__esModule', 0) : J$._())) ? J$.R(185, 'obj', obj, 0) : J$.T(201, {
                                "default": J$.R(193, 'obj', obj, 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(585, J$e);
                        } finally {
                            if (J$.Fr(593))
                                continue jalangiLabel118;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isValid(dirtyDate) {
                jalangiLabel119:
                    while (true) {
                        try {
                            J$.Fe(449, arguments.callee, this, arguments);
                            arguments = J$.N(457, 'arguments', arguments, 4);
                            dirtyDate = J$.N(465, 'dirtyDate', dirtyDate, 4);
                            J$.N(473, 'date', date, 0);
                            if (J$.X1(601, J$.C(24, J$.B(10, '<', J$.G(257, J$.R(249, 'arguments', arguments, 2), 'length', 0), J$.T(265, 1, 22, false), 0)))) {
                                throw J$.X1(329, J$.Th(321, J$.F(313, J$.R(273, 'TypeError', TypeError, 2), 1)(J$.B(26, '+', J$.B(18, '+', J$.T(281, '1 argument required, but only ', 21, false), J$.G(297, J$.R(289, 'arguments', arguments, 2), 'length', 0), 0), J$.T(305, ' present', 21, false), 0))));
                            }
                            var date = J$.X1(401, J$.W(393, 'date', J$.F(385, (J$.X1(369, J$.T(337, 0, 22, false)), J$.G(361, J$.R(345, '_index', _index, 1), J$.T(353, "default", 21, false), 4)), 0)(J$.R(377, 'dirtyDate', dirtyDate, 0)), date, 1));
                            return J$.X1(441, J$.Rt(433, J$.U(34, '!', J$.F(425, J$.R(409, 'isNaN', isNaN, 2), 0)(J$.R(417, 'date', date, 0)))));
                        } catch (J$e) {
                            J$.Ex(609, J$e);
                        } finally {
                            if (J$.Fr(617))
                                continue jalangiLabel119;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(537, '_index', _index, 0);
            _interopRequireDefault = J$.N(553, '_interopRequireDefault', J$.T(545, _interopRequireDefault, 12, false, 225), 0);
            isValid = J$.N(569, 'isValid', J$.T(561, isValid, 12, false, 449), 0);
            J$.X1(57, J$.M(49, J$.R(9, 'Object', Object, 2), 'defineProperty', 0)(J$.R(17, 'exports', exports, 2), J$.T(25, "__esModule", 21, false), J$.T(41, {
                value: J$.T(33, true, 23, false)
            }, 11, false)));
            J$.X1(97, J$.P(89, J$.R(65, 'exports', exports, 2), J$.T(73, "default", 21, false), J$.R(81, 'isValid', isValid, 1), 2));
            var _index = J$.X1(153, J$.W(145, '_index', J$.F(137, J$.R(105, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.F(129, J$.R(113, 'require', require, 2), 0)(J$.T(121, "../toDate/index.js", 21, false))), _index, 3));
            J$.X1(521, J$.P(513, J$.R(481, 'module', module, 2), 'exports', J$.G(505, J$.R(489, 'exports', exports, 2), J$.T(497, "default", 21, false), 4), 0));
        } catch (J$e) {
            J$.Ex(625, J$e);
        } finally {
            if (J$.Sr(633)) {
                J$.L();
                continue jalangiLabel120;
            } else {
                J$.L();
                break jalangiLabel120;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
