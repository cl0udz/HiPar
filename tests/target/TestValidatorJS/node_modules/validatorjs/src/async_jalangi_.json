{"8":[37,16,37,37],"9":[3,3,3,7],"10":[22,5,22,26],"16":[35,9,35,29],"17":[3,24,3,37],"18":[35,9,35,29],"24":[60,9,60,21],"25":[3,3,3,37],"26":[37,16,37,37],"32":[64,9,64,29],"33":[3,3,3,38],"34":[51,12,51,51],"41":[4,3,4,7],"42":[51,12,51,75],"49":[4,22,4,33],"50":[60,9,60,21],"57":[4,3,4,33],"58":[65,26,65,50],"65":[4,3,4,34],"73":[5,3,5,7],"81":[5,20,5,22],"89":[5,3,5,22],"97":[5,3,5,23],"105":[6,3,6,7],"113":[6,25,6,26],"121":[6,3,6,26],"129":[6,3,6,27],"137":[7,3,7,7],"145":[7,17,7,19],"153":[7,3,7,19],"161":[7,3,7,20],"169":[8,3,8,7],"177":[8,17,8,19],"185":[8,3,8,19],"193":[8,3,8,20],"201":[9,3,9,7],"209":[9,17,9,22],"217":[9,3,9,22],"225":[9,3,9,23],"233":[2,1,10,2],"241":[2,1,10,2],"249":[2,1,10,2],"257":[2,1,10,2],"265":[12,1,12,15],"273":[20,17,20,21],"281":[20,17,20,36],"289":[20,17,20,36],"297":[20,17,20,36],"305":[21,5,21,9],"313":[21,5,21,19],"321":[21,20,21,25],"329":[21,29,21,33],"337":[21,5,21,33],"345":[21,5,21,34],"353":[22,5,22,9],"369":[22,5,22,26],"371":[22,5,22,26],"385":[22,5,22,27],"393":[23,12,23,17],"401":[23,12,23,17],"409":[23,5,23,18],"417":[19,8,24,4],"425":[19,8,24,4],"433":[19,8,24,4],"441":[19,8,24,4],"449":[19,8,24,4],"457":[19,8,24,4],"465":[33,16,33,20],"473":[33,16,33,30],"481":[33,31,33,36],"489":[33,16,33,37],"497":[33,16,33,37],"505":[33,16,33,37],"513":[35,9,35,13],"521":[35,9,35,20],"529":[35,25,35,29],"537":[36,7,36,11],"545":[36,7,36,18],"553":[36,24,36,28],"561":[36,7,36,29],"563":[36,7,36,23],"569":[36,7,36,30],"577":[37,16,37,20],"585":[37,16,37,27],"593":[37,32,37,37],"601":[38,7,38,11],"609":[38,7,38,18],"617":[38,24,38,28],"625":[38,7,38,29],"627":[38,7,38,23],"633":[38,7,38,30],"641":[39,7,39,11],"649":[39,24,39,28],"657":[39,7,39,29],"659":[39,7,39,23],"665":[39,7,39,30],"673":[42,5,42,9],"681":[42,5,42,16],"683":[42,5,42,14],"689":[42,5,42,17],"697":[32,12,43,4],"705":[32,12,43,4],"713":[32,12,43,4],"721":[32,12,43,4],"729":[32,12,43,4],"737":[32,12,43,4],"745":[51,12,51,16],"753":[51,12,51,23],"761":[51,12,51,30],"769":[51,33,51,37],"777":[51,33,51,44],"785":[51,33,51,51],"793":[51,56,51,60],"801":[51,56,51,75],"809":[51,12,51,75],"817":[51,5,51,76],"825":[50,18,52,4],"833":[50,18,52,4],"841":[50,18,52,4],"849":[50,18,52,4],"857":[60,10,60,14],"865":[60,10,60,21],"873":[61,7,61,14],"881":[61,7,61,14],"889":[64,9,64,13],"897":[64,9,64,29],"899":[64,9,64,27],"905":[65,7,65,11],"913":[65,26,65,30],"921":[65,26,65,37],"929":[65,26,65,44],"937":[65,49,65,50],"945":[65,7,65,51],"947":[65,7,65,25],"953":[65,7,65,52],"961":[59,9,67,4],"969":[59,9,67,4],"977":[59,9,67,4],"985":[59,9,67,4],"993":[75,5,75,9],"1001":[75,19,75,23],"1009":[75,5,75,23],"1017":[75,5,75,24],"1025":[74,17,76,4],"1033":[74,17,76,4],"1041":[74,17,76,4],"1049":[74,17,76,4],"1057":[12,28,76,6],"1065":[12,1,76,6],"1073":[12,1,76,7],"1081":[78,1,78,7],"1089":[78,18,78,32],"1097":[78,1,78,32],"1105":[78,1,78,33],"1113":[1,1,78,33],"1121":[2,1,10,2],"1129":[1,1,78,33],"1137":[2,1,10,2],"1145":[2,1,10,2],"1153":[19,8,24,4],"1161":[19,8,24,4],"1169":[37,12,40,6],"1177":[35,5,40,6],"1185":[32,12,43,4],"1193":[32,12,43,4],"1201":[50,18,52,4],"1209":[50,18,52,4],"1217":[60,5,62,6],"1225":[64,5,66,6],"1233":[59,9,67,4],"1241":[59,9,67,4],"1249":[74,17,76,4],"1257":[74,17,76,4],"1265":[1,1,78,33],"1273":[1,1,78,33],"nBranches":8,"originalCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/validatorjs/src/async.js","instrumentedCodeFileName":"/home/james/nodejs/HiPar/tests/target/TestValidatorJS/node_modules/validatorjs/src/async_jalangi_.js","code":"\"use strict\";\n\nfunction AsyncResolvers(onFailedOne, onResolvedAll) {\n  this.onResolvedAll = onResolvedAll;\n  this.onFailedOne = onFailedOne;\n  this.resolvers = {};\n  this.resolversCount = 0;\n  this.passed = [];\n  this.failed = [];\n  this.firing = false;\n}\n\nAsyncResolvers.prototype = {\n  /**\n   * Add resolver\n   *\n   * @param {Rule} rule\n   * @return {integer}\n   */\n  add: function add(rule) {\n    var index = this.resolversCount;\n    this.resolvers[index] = rule;\n    this.resolversCount++;\n    return index;\n  },\n\n  /**\n   * Resolve given index\n   *\n   * @param  {integer} index\n   * @return {void}\n   */\n  resolve: function resolve(index) {\n    var rule = this.resolvers[index];\n\n    if (rule.passes === true) {\n      this.passed.push(rule);\n    } else if (rule.passes === false) {\n      this.failed.push(rule);\n      this.onFailedOne(rule);\n    }\n\n    this.fire();\n  },\n\n  /**\n   * Determine if all have been resolved\n   *\n   * @return {boolean}\n   */\n  isAllResolved: function isAllResolved() {\n    return this.passed.length + this.failed.length === this.resolversCount;\n  },\n\n  /**\n   * Attempt to fire final all resolved callback if completed\n   *\n   * @return {void}\n   */\n  fire: function fire() {\n    if (!this.firing) {\n      return;\n    }\n\n    if (this.isAllResolved()) {\n      this.onResolvedAll(this.failed.length === 0);\n    }\n  },\n\n  /**\n   * Enable firing\n   *\n   * @return {void}\n   */\n  enableFiring: function enableFiring() {\n    this.firing = true;\n  }\n};\nmodule.exports = AsyncResolvers;"}