'use strict';

module.exports = function applyPlugins(schema, plugins, options, cacheKey) {
  if (schema[cacheKey]) {
    return;
  }

  schema[cacheKey] = true;

  if (!options || !options.skipTopLevel) {
    for (var i = 0; i < plugins.length; ++i) {
      schema.plugin(plugins[i][0], plugins[i][1]);
    }
  }

  options = Object.assign({}, options);
  delete options.skipTopLevel;

  if (options.applyPluginsToChildSchemas !== false) {
    for (var _i = 0, _Object$keys = Object.keys(schema.paths); _i < _Object$keys.length; _i++) {
      var path = _Object$keys[_i];
      var type = schema.paths[path];

      if (type.schema != null) {
        applyPlugins(type.schema, plugins, options, cacheKey); // Recompile schema because plugins may have changed it, see gh-7572

        type.caster.prototype.$__setSchema(type.schema);
      }
    }
  }

  var discriminators = schema.discriminators;

  if (discriminators == null) {
    return;
  }

  var applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;
  var keys = Object.keys(discriminators);

  for (var _i2 = 0; _i2 < keys.length; ++_i2) {
    var discriminatorKey = keys[_i2];
    var discriminatorSchema = discriminators[discriminatorKey];
    applyPlugins(discriminatorSchema, plugins, {
      skipTopLevel: !applyPluginsToDiscriminators
    }, cacheKey);
  }
};