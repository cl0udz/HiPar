'use strict';

var get = require('../get');

var utils = require('../../utils');
/*!
 * Gather all indexes defined in the schema, including single nested,
 * document arrays, and embedded discriminators.
 */


module.exports = function getIndexes(schema) {
  var indexes = [];
  var schemaStack = new WeakMap();
  var indexTypes = schema.constructor.indexTypes;
  var indexByName = new Map();

  var collectIndexes = function collectIndexes(schema, prefix, baseSchema) {
    // Ignore infinitely nested schemas, if we've already seen this schema
    // along this path there must be a cycle
    if (schemaStack.has(schema)) {
      return;
    }

    schemaStack.set(schema, true);
    prefix = prefix || '';
    var keys = Object.keys(schema.paths);
    var length = keys.length;

    for (var i = 0; i < length; ++i) {
      var key = keys[i];
      var path = schema.paths[key];

      if (baseSchema != null && baseSchema.paths[key]) {
        // If looking at an embedded discriminator schema, don't look at paths
        // that the
        continue;
      }

      if (path.$isMongooseDocumentArray || path.$isSingleNested) {
        if (get(path, 'options.excludeIndexes') !== true && get(path, 'schemaOptions.excludeIndexes') !== true && get(path, 'schema.options.excludeIndexes') !== true) {
          collectIndexes(path.schema, prefix + key + '.');
        }

        if (path.schema.discriminators != null) {
          var discriminators = path.schema.discriminators;
          var discriminatorKeys = Object.keys(discriminators);

          for (var _i = 0, _discriminatorKeys = discriminatorKeys; _i < _discriminatorKeys.length; _i++) {
            var discriminatorKey = _discriminatorKeys[_i];
            collectIndexes(discriminators[discriminatorKey], prefix + key + '.', path.schema);
          }
        } // Retained to minimize risk of backwards breaking changes due to
        // gh-6113


        if (path.$isMongooseDocumentArray) {
          continue;
        }
      }

      var index = path._index || path.caster && path.caster._index;

      if (index !== false && index !== null && index !== undefined) {
        var field = {};
        var isObject = utils.isObject(index);
        var options = isObject ? index : {};
        var type = typeof index === 'string' ? index : isObject ? index.type : false;

        if (type && indexTypes.indexOf(type) !== -1) {
          field[prefix + key] = type;
        } else if (options.text) {
          field[prefix + key] = 'text';
          delete options.text;
        } else {
          field[prefix + key] = 1;
        }

        delete options.type;

        if (!('background' in options)) {
          options.background = true;
        }

        var indexName = options && options.name;

        if (typeof indexName === 'string') {
          if (indexByName.has(indexName)) {
            Object.assign(indexByName.get(indexName), field);
          } else {
            indexes.push([field, options]);
            indexByName.set(indexName, field);
          }
        } else {
          indexes.push([field, options]);
          indexByName.set(indexName, field);
        }
      }
    }

    schemaStack["delete"](schema);

    if (prefix) {
      fixSubIndexPaths(schema, prefix);
    } else {
      schema._indexes.forEach(function (index) {
        if (!('background' in index[1])) {
          index[1].background = true;
        }
      });

      indexes = indexes.concat(schema._indexes);
    }
  };

  collectIndexes(schema);
  return indexes;
  /*!
   * Checks for indexes added to subdocs using Schema.index().
   * These indexes need their paths prefixed properly.
   *
   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]
   */

  function fixSubIndexPaths(schema, prefix) {
    var subindexes = schema._indexes;
    var len = subindexes.length;

    for (var i = 0; i < len; ++i) {
      var indexObj = subindexes[i][0];
      var keys = Object.keys(indexObj);
      var klen = keys.length;
      var newindex = {}; // use forward iteration, order matters

      for (var j = 0; j < klen; ++j) {
        var key = keys[j];
        newindex[prefix + key] = indexObj[key];
      }

      indexes.push([newindex, subindexes[i][1]]);
    }
  }
};