'use strict';
/*!
 * Module dependencies
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var checkEmbeddedDiscriminatorKeyProjection = require('./helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection');

var get = require('./helpers/get');

var getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');

var isDefiningProjection = require('./helpers/projection/isDefiningProjection');

var utils = require('./utils');
/*!
 * Prepare a set of path options for query population.
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */


exports.preparePopulationOptions = function preparePopulationOptions(query, options) {
  var pop = utils.object.vals(query.options.populate); // lean options should trickle through all queries

  if (options.lean != null) {
    pop.filter(function (p) {
      return get(p, 'options.lean') == null;
    }).forEach(makeLean(options.lean));
  }

  return pop;
};
/*!
 * Prepare a set of path options for query population. This is the MongooseQuery
 * version
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */


exports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {
  var pop = utils.object.vals(query._mongooseOptions.populate); // lean options should trickle through all queries

  if (options.lean != null) {
    pop.filter(function (p) {
      return get(p, 'options.lean') == null;
    }).forEach(makeLean(options.lean));
  }

  var session = get(query, 'options.session', null);

  if (session != null) {
    pop.forEach(function (path) {
      if (path.options == null) {
        path.options = {
          session: session
        };
        return;
      }

      if (!('session' in path.options)) {
        path.options.session = session;
      }
    });
  }

  var projection = query._fieldsForExec();

  pop.forEach(function (p) {
    p._queryProjection = projection;
  });
  return pop;
};
/*!
 * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,
 * it returns an instance of the given model.
 *
 * @param {Model}  model
 * @param {Object} doc
 * @param {Object} fields
 *
 * @return {Document}
 */


exports.createModel = function createModel(model, doc, fields, userProvidedFields) {
  model.hooks.execPreSync('createModel', doc);
  var discriminatorMapping = model.schema ? model.schema.discriminatorMapping : null;
  var key = discriminatorMapping && discriminatorMapping.isRoot ? discriminatorMapping.key : null;
  var value = doc[key];

  if (key && value && model.discriminators) {
    var discriminator = model.discriminators[value] || getDiscriminatorByValue(model, value);

    if (discriminator) {
      var _fields = utils.clone(userProvidedFields);

      exports.applyPaths(_fields, discriminator.schema);
      return new discriminator(undefined, _fields, true);
    }
  }

  return new model(undefined, fields, {
    skipId: true,
    isNew: false,
    willInit: true
  });
};
/*!
 * ignore
 */


exports.applyPaths = function applyPaths(fields, schema) {
  // determine if query is selecting or excluding fields
  var exclude;
  var keys;
  var ki;
  var field;

  if (fields) {
    keys = Object.keys(fields);
    ki = keys.length;

    while (ki--) {
      if (keys[ki][0] === '+') {
        continue;
      }

      field = fields[keys[ki]]; // Skip `$meta` and `$slice`

      if (!isDefiningProjection(field)) {
        continue;
      }

      exclude = field === 0;
      break;
    }
  } // if selecting, apply default schematype select:true fields
  // if excluding, apply schematype select:false fields


  var selected = [];
  var excluded = [];
  var stack = [];

  var analyzePath = function analyzePath(path, type) {
    var plusPath = '+' + path;
    var hasPlusPath = fields && plusPath in fields;

    if (hasPlusPath) {
      // forced inclusion
      delete fields[plusPath];
    }

    if (typeof type.selected !== 'boolean') return;

    if (hasPlusPath) {
      // forced inclusion
      delete fields[plusPath]; // if there are other fields being included, add this one
      // if no other included fields, leave this out (implied inclusion)

      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {
        fields[path] = 1;
      }

      return;
    } // check for parent exclusions


    var pieces = path.split('.');
    var cur = '';

    for (var i = 0; i < pieces.length; ++i) {
      cur += cur.length ? '.' + pieces[i] : pieces[i];

      if (excluded.indexOf(cur) !== -1) {
        return;
      }
    } // Special case: if user has included a parent path of a discriminator key,
    // don't explicitly project in the discriminator key because that will
    // project out everything else under the parent path


    if (!exclude && get(type, 'options.$skipDiscriminatorCheck', false)) {
      var _cur = '';

      for (var _i = 0; _i < pieces.length; ++_i) {
        _cur += (_cur.length === 0 ? '' : '.') + pieces[_i];
        var projection = get(fields, _cur, false);

        if (projection && _typeof(projection) !== 'object') {
          return;
        }
      }
    }

    (type.selected ? selected : excluded).push(path);
    return path;
  };

  analyzeSchema(schema);

  switch (exclude) {
    case true:
      for (var i = 0; i < excluded.length; ++i) {
        fields[excluded[i]] = 0;
      }

      break;

    case false:
      if (schema && schema.paths['_id'] && schema.paths['_id'].options && schema.paths['_id'].options.select === false) {
        fields._id = 0;
      }

      for (var _i2 = 0; _i2 < selected.length; ++_i2) {
        fields[selected[_i2]] = 1;
      }

      break;

    case undefined:
      if (fields == null) {
        break;
      } // Any leftover plus paths must in the schema, so delete them (gh-7017)


      for (var _i3 = 0, _Object$keys = Object.keys(fields || {}); _i3 < _Object$keys.length; _i3++) {
        var key = _Object$keys[_i3];

        if (key.startsWith('+')) {
          delete fields[key];
        }
      } // user didn't specify fields, implies returning all fields.
      // only need to apply excluded fields and delete any plus paths


      for (var _i4 = 0; _i4 < excluded.length; ++_i4) {
        fields[excluded[_i4]] = 0;
      }

      break;
  }

  function analyzeSchema(schema, prefix) {
    prefix || (prefix = ''); // avoid recursion

    if (stack.indexOf(schema) !== -1) {
      return [];
    }

    stack.push(schema);
    var addedPaths = [];
    schema.eachPath(function (path, type) {
      if (prefix) path = prefix + '.' + path;
      var addedPath = analyzePath(path, type);

      if (addedPath != null) {
        addedPaths.push(addedPath);
      } // nested schemas


      if (type.schema) {
        var _addedPaths = analyzeSchema(type.schema, path); // Special case: if discriminator key is the only field that would
        // be projected in, remove it.


        if (exclude === false) {
          checkEmbeddedDiscriminatorKeyProjection(fields, path, type.schema, selected, _addedPaths);
        }
      }
    });
    stack.pop();
    return addedPaths;
  }
};
/*!
 * Set each path query option to lean
 *
 * @param {Object} option
 */


function makeLean(val) {
  return function (option) {
    option.options || (option.options = {});
    option.options.lean = val;
  };
}
/*!
 * Handle the `WriteOpResult` from the server
 */


exports.handleDeleteWriteOpResult = function handleDeleteWriteOpResult(callback) {
  return function _handleDeleteWriteOpResult(error, res) {
    if (error) {
      return callback(error);
    }

    var mongooseResult = Object.assign({}, res.result);

    if (get(res, 'result.n', null) != null) {
      mongooseResult.deletedCount = res.result.n;
    }

    if (res.deletedCount != null) {
      mongooseResult.deletedCount = res.deletedCount;
    }

    return callback(null, mongooseResult);
  };
};