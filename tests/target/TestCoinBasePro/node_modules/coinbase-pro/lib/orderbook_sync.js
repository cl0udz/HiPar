"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.match");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebsocketClient = require('./clients/websocket.js');

var AuthenticatedClient = require('./clients/authenticated.js');

var PublicClient = require('./clients/public.js');

var Orderbook = require('./orderbook.js');

var Utils = require('./utilities.js'); // Orderbook syncing


var OrderbookSync =
/*#__PURE__*/
function (_WebsocketClient) {
  _inherits(OrderbookSync, _WebsocketClient);

  function OrderbookSync(productIDs) {
    var _this;

    var apiURI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'https://api.pro.coinbase.com';
    var websocketURI = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'wss://ws-feed.pro.coinbase.com';
    var auth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, OrderbookSync);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrderbookSync).call(this, productIDs, websocketURI, auth));
    _this.apiURI = apiURI;
    _this.auth = Utils.checkAuth(auth);
    _this._queues = {}; // []

    _this._sequences = {}; // -1

    _this.books = {};

    if (_this.auth.secret) {
      _this._client = new AuthenticatedClient(_this.auth.key, _this.auth.secret, _this.auth.passphrase, _this.apiURI);
    } else {
      _this._client = new PublicClient(_this.apiURI);
    }

    _this.productIDs.forEach(_this._newProduct, _assertThisInitialized(_this));

    _this.on('message', _this.processMessage.bind(_assertThisInitialized(_this)));

    return _this;
  }

  _createClass(OrderbookSync, [{
    key: "_newProduct",
    value: function _newProduct(productID) {
      this._queues[productID] = [];
      this._sequences[productID] = -2;
      this.books[productID] = new Orderbook();
    }
  }, {
    key: "loadOrderbook",
    value: function loadOrderbook(productID) {
      var _this2 = this;

      if (!this.books[productID]) {
        return;
      }

      this.emit('sync', productID);
      this._queues[productID] = [];
      this._sequences[productID] = -1;

      var process = function process(data) {
        _this2.books[productID].state(data);

        _this2._sequences[productID] = data.sequence;

        _this2._queues[productID].forEach(_this2.processMessage, _this2);

        _this2._queues[productID] = [];

        _this2.emit('synced', productID);
      };

      var problems = function problems(err) {
        err = err && (err.message || err);

        _this2.emit('error', new Error('Failed to load orderbook: ' + err));
      };

      this._client.getProductOrderBook(productID, {
        level: 3
      }).then(process)["catch"](problems);
    } // subscriptions changed -- possible new products

  }, {
    key: "_newSubscription",
    value: function _newSubscription(data) {
      var _this3 = this;

      var channel = data.channels.find(function (c) {
        return c.name === 'full';
      });
      channel && channel.product_ids.filter(function (productID) {
        return !(productID in _this3.books);
      }).forEach(this._newProduct, this);
    }
  }, {
    key: "processMessage",
    value: function processMessage(data) {
      var type = data.type,
          product_id = data.product_id;

      if (type === 'subscriptions') {
        this._newSubscription(data);

        return;
      }

      if (this._sequences[product_id] < 0) {
        // Orderbook snapshot not loaded yet
        this._queues[product_id].push(data);
      }

      if (this._sequences[product_id] === -2) {
        // Start first sync
        this.loadOrderbook(product_id);
        return;
      }

      if (this._sequences[product_id] === -1) {
        // Resync is in process
        return;
      }

      if (data.sequence <= this._sequences[product_id]) {
        // Skip this one, since it was already processed
        return;
      }

      if (data.sequence !== this._sequences[product_id] + 1) {
        // Dropped a message, start a resync process
        this.loadOrderbook(product_id);
        return;
      }

      this._sequences[product_id] = data.sequence;
      var book = this.books[product_id];

      switch (type) {
        case 'open':
          book.add(data);
          break;

        case 'done':
          book.remove(data.order_id);
          break;

        case 'match':
          book.match(data);
          break;

        case 'change':
          book.change(data);
          break;
      }
    }
  }]);

  return OrderbookSync;
}(WebsocketClient);

module.exports = exports = OrderbookSync;