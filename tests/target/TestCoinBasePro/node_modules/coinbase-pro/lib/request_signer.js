'use strict';

require("core-js/modules/es.date.now");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.keys");

var crypto = require('crypto');

var querystring = require('querystring');

var Utils = require('./utilities.js');
/**
 Signs request messages for authenticated requests to Coinbase Pro
 * @param auth {object} hash containing key, secret and passphrase
 * @param method {string} The REST method to use
 * @param path {string} The request path, e.g. /products/BTC-USD/ticker
 * @param [options] {object} An optional object containing one of
 * @param options.body {object} A hash of body properties
 * @param options.qs {object} A hash of query string parameters
 * @returns {{key: string, signature: *, timestamp: number, passphrase: string}}
 */


module.exports.signRequest = function (auth, method, path) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  Utils.checkAuth(auth);
  var timestamp = Date.now() / 1000;
  var body = '';

  if (options.body) {
    body = JSON.stringify(options.body);
  } else if (options.qs && Object.keys(options.qs).length !== 0) {
    body = '?' + querystring.stringify(options.qs);
  }

  var what = timestamp + method.toUpperCase() + path + body;
  var key = Buffer.from(auth.secret, 'base64');
  var hmac = crypto.createHmac('sha256', key);
  var signature = hmac.update(what).digest('base64');
  return {
    key: auth.key,
    signature: signature,
    timestamp: timestamp,
    passphrase: auth.passphrase
  };
};