"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.splice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.parse-float");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('bintrees'),
    RBTree = _require.RBTree;

var BigNumber = require('bignumber.js');

var assert = require('assert');

var Orderbook =
/*#__PURE__*/
function () {
  function Orderbook() {
    _classCallCheck(this, Orderbook);

    this._ordersByID = {};
    this._bids = new RBTree(function (a, b) {
      return a.price.comparedTo(b.price);
    });
    this._asks = new RBTree(function (a, b) {
      return a.price.comparedTo(b.price);
    });
  }

  _createClass(Orderbook, [{
    key: "_getTree",
    value: function _getTree(side) {
      return side === 'buy' ? this._bids : this._asks;
    }
  }, {
    key: "state",
    value: function state(book) {
      var _this = this;

      if (book) {
        book.bids.forEach(function (order) {
          return _this.add({
            id: order[2],
            side: 'buy',
            price: BigNumber(order[0]),
            size: BigNumber(order[1])
          });
        });
        book.asks.forEach(function (order) {
          return _this.add({
            id: order[2],
            side: 'sell',
            price: BigNumber(order[0]),
            size: BigNumber(order[1])
          });
        });
      } else {
        book = {
          asks: [],
          bids: []
        };

        this._bids.reach(function (bid) {
          var _book$bids;

          return (_book$bids = book.bids).push.apply(_book$bids, _toConsumableArray(bid.orders));
        });

        this._asks.each(function (ask) {
          var _book$asks;

          return (_book$asks = book.asks).push.apply(_book$asks, _toConsumableArray(ask.orders));
        });

        return book;
      }
    }
  }, {
    key: "get",
    value: function get(orderId) {
      return this._ordersByID[orderId];
    }
  }, {
    key: "add",
    value: function add(order) {
      order = {
        id: order.order_id || order.id,
        side: order.side,
        price: BigNumber(order.price),
        size: BigNumber(order.size || order.remaining_size)
      };

      var tree = this._getTree(order.side);

      var node = tree.find({
        price: order.price
      });

      if (!node) {
        node = {
          price: order.price,
          orders: []
        };
        tree.insert(node);
      }

      node.orders.push(order);
      this._ordersByID[order.id] = order;
    }
  }, {
    key: "remove",
    value: function remove(orderId) {
      var order = this.get(orderId);

      if (!order) {
        return;
      }

      var tree = this._getTree(order.side);

      var node = tree.find({
        price: order.price
      });
      assert(node);
      var orders = node.orders;
      orders.splice(orders.indexOf(order), 1);

      if (orders.length === 0) {
        tree.remove(node);
      }

      delete this._ordersByID[order.id];
    }
  }, {
    key: "match",
    value: function match(_match) {
      var size = BigNumber(_match.size);
      var price = BigNumber(_match.price);

      var tree = this._getTree(_match.side);

      var node = tree.find({
        price: price
      });
      assert(node);
      var order = node.orders.find(function (order) {
        return order.id === _match.maker_order_id;
      });
      assert(order);
      order.size = order.size.minus(size);
      this._ordersByID[order.id] = order;
      assert(order.size >= 0);

      if (order.size.eq(0)) {
        this.remove(order.id);
      }
    }
  }, {
    key: "change",
    value: function change(_change) {
      // price of null indicates market order
      if (_change.price === null || _change.price === undefined) {
        return;
      }

      var size = BigNumber(_change.new_size);
      var price = BigNumber(_change.price);
      var order = this.get(_change.order_id);

      var tree = this._getTree(_change.side);

      var node = tree.find({
        price: price
      });

      if (!node || node.orders.indexOf(order) < 0) {
        return;
      }

      var nodeOrder = node.orders[node.orders.indexOf(order)];
      var newSize = parseFloat(order.size);
      var oldSize = parseFloat(_change.old_size);
      assert.equal(oldSize, newSize);
      nodeOrder.size = size;
      this._ordersByID[nodeOrder.id] = nodeOrder;
    }
  }]);

  return Orderbook;
}();

module.exports = exports = Orderbook;