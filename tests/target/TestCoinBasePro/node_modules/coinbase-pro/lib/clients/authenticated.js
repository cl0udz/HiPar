"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.reflect.get");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../../lib/request_signer'),
    signRequest = _require.signRequest;

var PublicClient = require('./public.js');

var AuthenticatedClient =
/*#__PURE__*/
function (_PublicClient) {
  _inherits(AuthenticatedClient, _PublicClient);

  function AuthenticatedClient(key, secret, passphrase, apiURI) {
    var _this;

    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    _classCallCheck(this, AuthenticatedClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthenticatedClient).call(this, apiURI, options));
    _this.key = key;
    _this.secret = secret;
    _this.passphrase = passphrase;
    return _this;
  }

  _createClass(AuthenticatedClient, [{
    key: "request",
    value: function request(method, uriParts) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;

      if (!callback && typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      this.addHeaders(opts, this._getSignature(method.toUpperCase(), this.makeRelativeURI(uriParts), opts));
      return _get(_getPrototypeOf(AuthenticatedClient.prototype), "request", this).call(this, method, uriParts, opts, callback);
    }
  }, {
    key: "_getSignature",
    value: function _getSignature(method, relativeURI, opts) {
      var sig = signRequest(this, method, relativeURI, opts);

      if (opts.body) {
        opts.body = JSON.stringify(opts.body);
      }

      return {
        'CB-ACCESS-KEY': sig.key,
        'CB-ACCESS-SIGN': sig.signature,
        'CB-ACCESS-TIMESTAMP': sig.timestamp,
        'CB-ACCESS-PASSPHRASE': sig.passphrase
      };
    }
  }, {
    key: "getCoinbaseAccounts",
    value: function getCoinbaseAccounts(callback) {
      return this.get(['coinbase-accounts'], callback);
    }
  }, {
    key: "getPaymentMethods",
    value: function getPaymentMethods(callback) {
      return this.get(['payment-methods'], callback);
    }
  }, {
    key: "getAccounts",
    value: function getAccounts(callback) {
      return this.get(['accounts'], callback);
    }
  }, {
    key: "getAccount",
    value: function getAccount(accountID, callback) {
      return this.get(['accounts', accountID], callback);
    }
  }, {
    key: "getAccountHistory",
    value: function getAccountHistory(accountID) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      return this.get(['accounts', accountID, 'ledger'], {
        qs: args
      }, callback);
    }
  }, {
    key: "getAccountTransfers",
    value: function getAccountTransfers(accountID) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      return this.get(['accounts', accountID, 'transfers'], {
        qs: args
      }, callback);
    }
  }, {
    key: "getAccountHolds",
    value: function getAccountHolds(accountID) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callback = arguments.length > 2 ? arguments[2] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      return this.get(['accounts', accountID, 'holds'], {
        qs: args
      }, callback);
    }
  }, {
    key: "placeOrder",
    value: function placeOrder(params, callback) {
      var requiredParams = ['side', 'product_id'];
      var needsSize = params.type !== 'market' && params.type !== 'stop';

      if (needsSize) {
        requiredParams.push('price', 'size');
      }

      this._requireParams(params, requiredParams);

      if (!needsSize && !params.size && !params.funds) {
        throw new Error('`opts` must include either `size` or `funds`');
      }

      if (params.side !== 'buy' && params.side !== 'sell') {
        throw new Error('`side` must be `buy` or `sell`');
      }

      return this.post(['orders'], {
        body: params
      }, callback);
    }
  }, {
    key: "buy",
    value: function buy(params, callback) {
      params.side = 'buy';
      return this.placeOrder(params, callback);
    }
  }, {
    key: "sell",
    value: function sell(params, callback) {
      params.side = 'sell';
      return this.placeOrder(params, callback);
    }
  }, {
    key: "getTrailingVolume",
    value: function getTrailingVolume(callback) {
      return this.get(['users', 'self', 'trailing-volume'], {}, callback);
    }
  }, {
    key: "cancelOrder",
    value: function cancelOrder(orderID, callback) {
      if (!orderID || typeof orderID === 'function') {
        var err = new Error('must provide an orderID or consider cancelOrders');

        if (typeof orderID === 'function') {
          orderID(err);
        }

        return Promise.reject(err);
      }

      return this["delete"](['orders', orderID], callback);
    }
  }, {
    key: "cancelOrders",
    value: function cancelOrders(callback) {
      return this["delete"](['orders'], callback);
    }
  }, {
    key: "cancelAllOrders",
    value: function cancelAllOrders() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      var opts = {
        qs: args
      };
      var totalDeletedOrders = [];

      var p = function deleteNext() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          _this2["delete"](['orders'], opts, function (err, response, data) {
            if (err) {
              reject(err);
            } else {
              resolve([response, data]);
            }
          });
        }).then(function (values) {
          var _values = _slicedToArray(values, 2),
              response = _values[0],
              data = _values[1];

          totalDeletedOrders.push.apply(totalDeletedOrders, _toConsumableArray(data));

          if (data.length) {
            return deleteNext.call(_this2);
          } else {
            return response;
          }
        }).then(function (response) {
          if (callback) {
            callback(undefined, response, totalDeletedOrders);
          }

          return totalDeletedOrders;
        })["catch"](function (err) {
          if (callback) {
            callback(err);
          }

          throw err;
        });
      }.call(this);

      if (callback) {
        p["catch"](function () {});
        return undefined;
      } else {
        return p;
      }
    }
  }, {
    key: "getOrders",
    value: function getOrders() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      return this.get(['orders'], {
        qs: args
      }, callback);
    }
  }, {
    key: "getOrder",
    value: function getOrder(orderID, callback) {
      if (!orderID || typeof orderID === 'function') {
        var err = new Error('must provide an orderID or consider getOrders');

        if (typeof orderID === 'function') {
          orderID(err);
        }

        return Promise.reject(err);
      }

      return this.get(['orders', orderID], callback);
    }
  }, {
    key: "getFills",
    value: function getFills() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (!callback && typeof args === 'function') {
        callback = args;
        args = {};
      }

      return this.get(['fills'], {
        qs: args
      }, callback);
    }
  }, {
    key: "getFundings",
    value: function getFundings(callback) {
      return this.get(['funding'], callback);
    }
  }, {
    key: "repay",
    value: function repay(params, callback) {
      this._requireParams(params, ['amount', 'currency']);

      return this.post(['funding/repay'], {
        body: params
      }, callback);
    }
  }, {
    key: "marginTransfer",
    value: function marginTransfer(params, callback) {
      this._requireParams(params, ['margin_profile_id', 'type', 'currency', 'amount']);

      return this.post(['profiles/margin-transfer'], {
        body: params
      }, callback);
    }
  }, {
    key: "closePosition",
    value: function closePosition(params, callback) {
      this._requireParams(params, ['repay_only']);

      return this.post(['position/close'], {
        body: params
      }, callback);
    }
  }, {
    key: "convert",
    value: function convert(params, callback) {
      this._requireParams(params, ['from', 'to', 'amount']);

      return this.post(['conversions'], {
        body: params
      }, callback);
    }
  }, {
    key: "deposit",
    value: function deposit(params, callback) {
      this._requireParams(params, ['amount', 'currency', 'coinbase_account_id']);

      return this.post(['deposits/coinbase-account'], {
        body: params
      }, callback);
    }
  }, {
    key: "depositPayment",
    value: function depositPayment(params, callback) {
      this._requireParams(params, ['amount', 'currency', 'payment_method_id']);

      return this.post(['deposits/payment-method'], {
        body: params
      }, callback);
    }
  }, {
    key: "depositCrypto",
    value: function depositCrypto(params, callback) {
      var _this3 = this;

      this._requireParams(params, ['currency']);

      return this.getCoinbaseAccounts().then(function (coinbaseAccounts) {
        var account = coinbaseAccounts.find(function (a) {
          return a.currency === params.currency;
        });
        return _this3.post(['coinbase-accounts', account.id, 'addresses'], callback);
      })["catch"](callback);
    }
  }, {
    key: "withdraw",
    value: function withdraw(params, callback) {
      this._requireParams(params, ['amount', 'currency', 'coinbase_account_id']);

      return this.post(['withdrawals/coinbase-account'], {
        body: params
      }, callback);
    }
  }, {
    key: "withdrawPayment",
    value: function withdrawPayment(params, callback) {
      this._requireParams(params, ['amount', 'currency', 'payment_method_id']);

      return this.post(['withdrawals/payment-method'], {
        body: params
      }, callback);
    }
  }, {
    key: "withdrawCrypto",
    value: function withdrawCrypto(body, callback) {
      this._requireParams(body, ['amount', 'currency', 'crypto_address']);

      return this.post(['withdrawals/crypto'], {
        body: body
      }, callback);
    }
  }, {
    key: "_requireParams",
    value: function _requireParams(params, required) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = required[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;

          if (params[param] === undefined) {
            throw new Error('`opts` must include param `' + param + '`');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: "createReport",
    value: function createReport(params, callback) {
      var required = ['type', 'start_date', 'end_date'];

      this._requireParams(params, required);

      if (params.type === 'fills') {
        required.push('product_id');

        this._requireParams(params, required);
      }

      if (params.type === 'account') {
        required.push('account_id');

        this._requireParams(params, required);
      }

      return this.post(['reports'], {
        body: params
      }, callback);
    }
  }, {
    key: "getReportStatus",
    value: function getReportStatus(reportId, callback) {
      return this.get(['reports', reportId], callback);
    }
  }]);

  return AuthenticatedClient;
}(PublicClient);

module.exports = exports = AuthenticatedClient;