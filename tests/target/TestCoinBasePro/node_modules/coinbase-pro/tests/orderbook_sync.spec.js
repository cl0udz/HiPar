"use strict";

var assert = require('assert');

var nock = require('nock');

var CoinbasePro = require('../index.js');

var testserver = require('./lib/ws_testserver');

var port = 56632;
var EXCHANGE_API_URL = 'https://api.pro.coinbase.com';
suite('OrderbookSync', function () {
  afterEach(function () {
    return nock.cleanAll();
  });
  test('not passes authentication details to websocket', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.strictEqual(msg.key, undefined);
        assert.strictEqual(msg.passphrase, undefined);
        server.close();
        done();
      });
    });
  });
  test('passes authentication details to websocket', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port, {
        key: 'suchkey',
        secret: 'suchsecret',
        passphrase: 'muchpassphrase'
      });
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.equal(msg.key, 'suchkey');
        assert.equal(msg.passphrase, 'muchpassphrase');
        server.close();
        done();
      });
    });
  });
  test('passes authentication details to websocket (via AuthenticationClient for backwards compatibility)', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port, new CoinbasePro.AuthenticatedClient('mykey', 'mysecret', 'mypassphrase'));
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.equal(msg.key, 'mykey');
        assert.equal(msg.passphrase, 'mypassphrase');
        server.close();
        done();
      });
    });
  });
  test('emits a message event', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port);
      orderbookSync.on('message', function (data) {
        assert.deepEqual(data, {
          test: true,
          product_id: 'BTC-USD'
        });
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        test: true,
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('emits a message event (with auth)', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port, {
        key: 'key',
        secret: 'secret',
        passphrase: 'pass'
      });
      orderbookSync.on('message', function (data) {
        assert.deepEqual(data, {
          test: true,
          product_id: 'BTC-USD'
        });
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        test: true,
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('emits an error event on error', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').replyWithError('whoops');
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port);
      orderbookSync.on('error', function (err) {
        assert.equal(err.message, 'Failed to load orderbook: whoops');
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('emits an error event on error (with auth)', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').replyWithError('whoops');
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync('BTC-USD', EXCHANGE_API_URL, 'ws://localhost:' + port, {
        key: 'key',
        secret: 'secret',
        passphrase: 'pass'
      });
      orderbookSync.on('error', function (err) {
        assert.equal(err.message, 'Failed to load orderbook: whoops');
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('builds specified books', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    nock(EXCHANGE_API_URL).get('/products/ETH-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync(['BTC-USD', 'ETH-USD'], EXCHANGE_API_URL, 'ws://localhost:' + port);
      orderbookSync.on('message', function (data) {
        var state = orderbookSync.books[data.product_id].state();
        assert.deepEqual(state, {
          asks: [],
          bids: []
        });
        assert.equal(orderbookSync.books['ETH-BTC'], undefined);
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        product_id: 'BTC-USD'
      }));
      socket.send(JSON.stringify({
        product_id: 'ETH-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('emits sync message', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync(['BTC-USD', 'ETH-USD'], EXCHANGE_API_URL, 'ws://localhost:' + port);
      orderbookSync.on('sync', function (productID) {
        assert.equal(productID, 'BTC-USD');
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('emits synced message', function (done) {
    nock(EXCHANGE_API_URL).get('/products/BTC-USD/book?level=3').reply(200, {
      asks: [],
      bids: []
    });
    var server = testserver(port, function () {
      var orderbookSync = new CoinbasePro.OrderbookSync(['BTC-USD', 'ETH-USD'], EXCHANGE_API_URL, 'ws://localhost:' + port);
      orderbookSync.on('synced', function (productID) {
        assert.equal(productID, 'BTC-USD');
      });
    });
    server.on('connection', function (socket) {
      socket.send(JSON.stringify({
        product_id: 'BTC-USD'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
});