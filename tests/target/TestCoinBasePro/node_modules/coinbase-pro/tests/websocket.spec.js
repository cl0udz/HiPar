"use strict";

require("core-js/modules/es.array.includes");

require("core-js/modules/es.string.includes");

var assert = require('assert');

var CoinbasePro = require('../index.js');

var testserver = require('./lib/ws_testserver');

var port = 56632;
suite('WebsocketClient', function () {
  test('connects to specified server', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient(['BTC-EUR'], 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
  test('subscribes to the default product (BTC-USD) and default channel (full) if undefined', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient(null, 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.deepEqual(msg.product_ids, ['BTC-USD']);
        assert.deepEqual(msg.channels, ['full', 'heartbeat']);
        server.close();
        done();
      });
    });
  });
  test('subscribes to the default product (BTC-USD) if empty string', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient('', 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.deepEqual(msg.product_ids, ['BTC-USD']);
        server.close();
        done();
      });
    });
  });
  test('subscribes to the default product (BTC-USD) if empty array passed', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient([], 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.deepEqual(msg.product_ids, ['BTC-USD']);
        server.close();
        done();
      });
    });
  });
  test('subscribes to the specified products', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient(['BTC-EUR'], 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.deepEqual(msg.product_ids, ['BTC-EUR']);
        server.close();
        done();
      });
    });
  });
  test('subscribes to the specified product (backward compatibility)', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient('ETH-USD', 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.deepEqual(msg.product_ids, ['ETH-USD']);
        server.close();
        done();
      });
    });
  });
  test('subscribes to additional products', function (done) {
    var client;
    var server = testserver(port, function () {
      client = new CoinbasePro.WebsocketClient([], 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.once('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        socket.on('message', function (data) {
          var msg = JSON.parse(data);
          assert.equal(msg.type, 'subscribe');
          assert.ok(msg.product_ids.includes('ETH-BTC'));
          assert.ok(msg.product_ids.includes('ETH-USD'));
          server.close();
          done();
        });
        client.subscribe({
          product_ids: ['ETH-BTC', 'ETH-USD']
        });
      });
    });
  });
  test('unsubscribes from product', function (done) {
    var client;
    var server = testserver(port, function () {
      client = new CoinbasePro.WebsocketClient(['BTC-USD'], 'ws://localhost:' + port);
    });
    server.on('connection', function (socket) {
      socket.once('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        socket.on('message', function (data) {
          var msg = JSON.parse(data);
          assert.equal(msg.type, 'unsubscribe');
          assert.deepEqual(msg.product_ids, ['BTC-USD']);
          assert.deepEqual(msg.channels, ['full']);
          server.close();
          done();
        });
        client.unsubscribe({
          product_ids: ['BTC-USD'],
          channels: ['full']
        });
      });
    });
  });
  test('subscribes to additional channels', function (done) {
    var client;
    var server = testserver(port, function () {
      client = new CoinbasePro.WebsocketClient(['BTC-USD'], 'ws://localhost:' + port, null, {
        channels: ['heartbeat']
      });
    });
    server.on('connection', function (socket) {
      socket.once('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        socket.on('message', function (data) {
          var msg = JSON.parse(data);
          assert.equal(msg.type, 'subscribe');
          assert.deepEqual(msg.channels, [{
            name: 'ticker',
            product_ids: ['LTC-USD']
          }]);
          server.close();
          done();
        });
        client.subscribe({
          channels: [{
            name: 'ticker',
            product_ids: ['LTC-USD']
          }]
        });
      });
    });
  });
  test('unsubscribes from channel', function (done) {
    var client;
    var server = testserver(port, function () {
      client = new CoinbasePro.WebsocketClient(['BTC-USD'], 'ws://localhost:' + port, null, {
        channels: ['ticker']
      });
    });
    server.on('connection', function (socket) {
      socket.once('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        socket.on('message', function (data) {
          var msg = JSON.parse(data);
          assert.equal(msg.type, 'unsubscribe');
          assert.deepEqual(msg.channels, ['ticker']);
          server.close();
          done();
        });
        client.unsubscribe({
          channels: ['ticker']
        });
      });
    });
  });
  test('passes authentication details through', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient('ETH-USD', 'ws://localhost:' + port, {
        key: 'suchkey',
        secret: 'suchsecret',
        passphrase: 'muchpassphrase'
      });
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.equal(msg.key, 'suchkey');
        assert.equal(msg.passphrase, 'muchpassphrase');
        assert(msg.timestamp);
        assert(msg.signature);
        server.close();
        done();
      });
    });
  });
  test('passes channels through with heartbeat added', function (done) {
    var server = testserver(port, function () {
      new CoinbasePro.WebsocketClient('ETH-USD', 'ws://localhost:' + port, {
        key: 'suchkey',
        secret: 'suchsecret',
        passphrase: 'muchpassphrase'
      }, {
        channels: ['user', 'ticker']
      });
    });
    server.on('connection', function (socket) {
      socket.on('message', function (data) {
        var msg = JSON.parse(data);
        assert.equal(msg.type, 'subscribe');
        assert.equal(msg.key, 'suchkey');
        assert.equal(msg.passphrase, 'muchpassphrase');
        assert.deepEqual(msg.channels, ['user', 'ticker', 'heartbeat']);
        assert(msg.timestamp);
        assert(msg.signature);
        server.close();
        done();
      });
    });
  });
  test('emits errors when receiving an error message', function (done) {
    var server = testserver(port, function () {
      var client = new CoinbasePro.WebsocketClient(null, 'ws://localhost:' + port);
      client.once('error', function (err) {
        assert.equal(err.message, 'test error');
        assert.equal(err.reason, 'because error');
      });
    });
    server.once('connection', function (socket) {
      socket.send(JSON.stringify({
        type: 'error',
        message: 'test error',
        reason: 'because error'
      }));
      socket.on('message', function () {
        server.close();
        done();
      });
    });
  });
});