J$.iids = {"8":[19,13,19,35],"9":[9,1,9,7],"10":[19,13,19,19],"16":[19,42,19,66],"17":[12,11,12,16],"18":[19,50,19,66],"24":[19,13,19,35],"25":[12,11,12,34],"26":[19,42,19,66],"32":[24,16,24,44],"33":[12,11,12,34],"34":[19,69,19,85],"40":[25,14,25,50],"41":[12,5,12,35],"42":[20,25,20,34],"48":[25,14,25,50],"49":[13,5,13,10],"50":[25,30,25,50],"57":[14,9,14,14],"65":[14,35,14,38],"73":[14,9,14,38],"81":[14,9,14,39],"89":[15,16,15,21],"97":[15,16,15,21],"105":[15,9,15,22],"113":[13,31,16,6],"121":[13,31,16,6],"129":[13,31,16,6],"137":[13,31,16,6],"145":[13,31,16,6],"153":[13,5,16,6],"161":[13,5,16,7],"169":[18,17,18,22],"177":[18,13,18,24],"185":[18,13,18,30],"193":[18,13,18,30],"201":[18,5,18,31],"209":[19,14,19,19],"217":[19,23,19,28],"225":[19,29,19,34],"233":[19,23,19,35],"241":[19,38,19,39],"249":[19,42,19,47],"257":[19,50,19,55],"265":[19,50,19,62],"273":[19,65,19,66],"281":[19,69,19,74],"289":[19,69,19,81],"297":[19,84,19,85],"305":[19,88,19,93],"313":[19,13,19,93],"321":[19,5,19,94],"329":[20,13,20,18],"337":[20,25,20,30],"345":[20,33,20,34],"353":[20,13,20,35],"355":[20,13,20,24],"361":[20,13,20,35],"369":[20,5,20,36],"377":[23,17,23,22],"385":[23,17,23,30],"387":[23,17,23,28],"393":[23,17,23,30],"401":[23,9,23,31],"409":[24,16,24,21],"417":[24,25,24,30],"425":[24,25,24,44],"427":[24,25,24,42],"433":[24,16,24,44],"441":[24,9,24,45],"449":[25,14,25,19],"457":[25,14,25,26],"465":[25,30,25,34],"473":[25,39,25,50],"481":[27,12,27,16],"489":[27,12,27,16],"497":[27,5,27,17],"505":[9,18,28,2],"513":[9,18,28,2],"521":[9,18,28,2],"529":[9,18,28,2],"537":[9,18,28,2],"545":[9,18,28,2],"553":[9,18,28,2],"561":[9,18,28,2],"569":[9,1,28,2],"577":[9,1,28,3],"585":[1,1,28,3],"593":[13,31,16,6],"601":[13,31,16,6],"609":[19,42,19,93],"617":[19,13,19,93],"625":[22,5,25,52],"633":[9,18,28,2],"641":[9,18,28,2],"649":[1,1,28,3],"657":[1,1,28,3],"nBranches":12,"originalCodeFileName":"/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/caller/index.js","instrumentedCodeFileName":"/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/caller/index_jalangi_.js","code":"'use strict';\n\n\n/**\n * Module wrapper of @substack's `caller.js`\n * @original: https://github.com/substack/node-resolve/blob/master/lib/caller.js\n * @blessings: https://twitter.com/eriktoth/statuses/413719312273125377\n * @see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n */\nmodule.exports = function (depth) {\n    var pst, stack, file, frame;\n\n    pst = Error.prepareStackTrace;\n    Error.prepareStackTrace = function (_, stack) {\n        Error.prepareStackTrace = pst;\n        return stack;\n    };\n\n    stack = (new Error()).stack;\n    depth = !depth || isNaN(depth) ? 1 : (depth > stack.length - 2 ? stack.length - 2 : depth);\n    stack = stack.slice(depth + 1);\n\n    do {\n        frame = stack.shift();\n        file = frame && frame.getFileName();\n    } while (stack.length && file === 'module.js');\n\n    return file;\n};\n"};
jalangiLabel22:
    while (true) {
        try {
            J$.Se(585, '/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/caller/index_jalangi_.js', '/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/caller/index.js');
            J$.X1(577, J$.P(569, J$.R(9, 'module', module, 2), 'exports', J$.T(561, function (depth) {
                jalangiLabel21:
                    while (true) {
                        try {
                            J$.Fe(505, arguments.callee, this, arguments);
                            arguments = J$.N(513, 'arguments', arguments, 4);
                            depth = J$.N(521, 'depth', depth, 4);
                            J$.N(529, 'pst', pst, 0);
                            J$.N(537, 'stack', stack, 0);
                            J$.N(545, 'file', file, 0);
                            J$.N(553, 'frame', frame, 0);
                            var pst, stack, file, frame;
                            J$.X1(41, pst = J$.W(33, 'pst', J$.G(25, J$.R(17, 'Error', Error, 2), 'prepareStackTrace', 0), pst, 0));
                            J$.X1(161, J$.P(153, J$.R(49, 'Error', Error, 2), 'prepareStackTrace', J$.T(145, function (_, stack) {
                                jalangiLabel20:
                                    while (true) {
                                        try {
                                            J$.Fe(113, arguments.callee, this, arguments);
                                            arguments = J$.N(121, 'arguments', arguments, 4);
                                            _ = J$.N(129, '_', _, 4);
                                            stack = J$.N(137, 'stack', stack, 4);
                                            J$.X1(81, J$.P(73, J$.R(57, 'Error', Error, 2), 'prepareStackTrace', J$.R(65, 'pst', pst, 0), 0));
                                            return J$.X1(105, J$.Rt(97, J$.R(89, 'stack', stack, 0)));
                                        } catch (J$e) {
                                            J$.Ex(593, J$e);
                                        } finally {
                                            if (J$.Fr(601))
                                                continue jalangiLabel20;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 113), 0));
                            J$.X1(201, stack = J$.W(193, 'stack', J$.G(185, J$.F(177, J$.R(169, 'Error', Error, 2), 1)(), 'stack', 0), stack, 0));
                            J$.X1(321, depth = J$.W(313, 'depth', J$.X1(617, J$.C(24, J$.C(8, J$.U(10, '!', J$.R(209, 'depth', depth, 0))) ? J$._() : J$.F(233, J$.R(217, 'isNaN', isNaN, 2), 0)(J$.R(225, 'depth', depth, 0)))) ? J$.T(241, 1, 22, false) : J$.X1(609, J$.C(16, J$.B(26, '>', J$.R(249, 'depth', depth, 0), J$.B(18, '-', J$.G(265, J$.R(257, 'stack', stack, 0), 'length', 0), J$.T(273, 2, 22, false), 0), 0))) ? J$.B(34, '-', J$.G(289, J$.R(281, 'stack', stack, 0), 'length', 0), J$.T(297, 2, 22, false), 0) : J$.R(305, 'depth', depth, 0), depth, 0));
                            J$.X1(369, stack = J$.W(361, 'stack', J$.M(353, J$.R(329, 'stack', stack, 0), 'slice', 0)(J$.B(42, '+', J$.R(337, 'depth', depth, 0), J$.T(345, 1, 22, false), 0)), stack, 0));
                            do {
                                J$.X1(401, frame = J$.W(393, 'frame', J$.M(385, J$.R(377, 'stack', stack, 0), 'shift', 0)(), frame, 0));
                                J$.X1(441, file = J$.W(433, 'file', J$.C(32, J$.R(409, 'frame', frame, 0)) ? J$.M(425, J$.R(417, 'frame', frame, 0), 'getFileName', 0)() : J$._(), file, 0));
                            } while (J$.X1(625, J$.C(48, J$.C(40, J$.G(457, J$.R(449, 'stack', stack, 0), 'length', 0)) ? J$.B(50, '===', J$.R(465, 'file', file, 0), J$.T(473, 'module.js', 21, false), 0) : J$._())));
                            return J$.X1(497, J$.Rt(489, J$.R(481, 'file', file, 0)));
                        } catch (J$e) {
                            J$.Ex(633, J$e);
                        } finally {
                            if (J$.Fr(641))
                                continue jalangiLabel21;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 505), 0));
        } catch (J$e) {
            J$.Ex(649, J$e);
        } finally {
            if (J$.Sr(657)) {
                J$.L();
                continue jalangiLabel22;
            } else {
                J$.L();
                break jalangiLabel22;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
