{"9":[1,16,1,23],"17":[1,24,1,35],"25":[1,16,1,36],"33":[1,16,1,36],"41":[1,16,1,36],"49":[2,14,2,21],"57":[2,22,2,30],"65":[2,14,2,31],"73":[2,14,2,31],"81":[2,14,2,31],"89":[27,1,27,8],"97":[29,16,29,24],"105":[29,25,29,31],"113":[29,32,29,33],"121":[29,25,29,34],"129":[29,16,29,35],"137":[29,16,29,35],"145":[29,9,29,36],"153":[31,9,31,16],"161":[31,9,31,16],"169":[30,7,32,6],"177":[27,25,33,2],"185":[27,25,33,2],"193":[27,25,33,2],"201":[27,25,33,2],"209":[27,1,33,2],"217":[27,1,33,3],"225":[49,1,49,8],"233":[51,16,51,24],"241":[51,25,51,32],"249":[51,25,51,38],"251":[51,25,51,36],"257":[51,16,51,39],"265":[51,16,51,39],"273":[51,9,51,40],"281":[53,9,53,16],"289":[53,9,53,16],"297":[52,7,54,6],"305":[49,22,55,2],"313":[49,22,55,2],"321":[49,22,55,2],"329":[49,22,55,2],"337":[49,1,55,2],"345":[49,1,55,3],"353":[1,1,55,3],"361":[1,1,55,3],"369":[1,1,55,3],"377":[27,25,33,2],"385":[27,25,33,2],"393":[49,22,55,2],"401":[49,22,55,2],"409":[1,1,55,3],"417":[1,1,55,3],"nBranches":0,"originalCodeFileName":"/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/ghost-ignition/lib/utils.js","instrumentedCodeFileName":"/home/hipar/HiPar/tests/target/TestGhost/versions/3.21.0/node_modules/ghost-ignition/lib/utils_jalangi_.js","code":"var findRoot = require('find-root');\nvar caller = require('caller');\n\n/**\n * @description Get caller root.\n *\n * Used by debug,\n * because we want to find the root (where a package.json exists) nearest to the calling module.\n * So that debug messages are output relative to the CALLER module\n *\n * caller dependency is able to detect the calling unit\n * they are doing this with the trick of creating an error stack\n * caller(2) means -> get me the previous calling unit\n *\n * Example Structure:\n * Ghost\n *    node_modules\n *       ghost-ignition\n *       passport-ghost\n *\n * Ghost uses ghost-ignition and passport-ghost uses ghost-ignition.\n *\n * If passport-ghost calls ghost-ignition, caller(2) would return the last caller of this module\n * If Ghost calls ghost-ignition, caller(2) would return the last caller of this module\n * And findRoot will be able to get the latest path with a valid package.json\n */\nexports.getCallerRoot = function getCallerRoot() {\n    try {\n        return findRoot(caller(2));\n    } catch (err) {\n        return;\n    }\n};\n\n/**\n * @description Get current working directory.\n *\n * Used by config,\n * because we want to find the root (where a package.json exists) nearest to the current working directory\n * So that configuration uses the config file AT the CWD, or at the project root of the CWD\n *\n * process.cwd() is the path from which `node` was called\n * usually, the root of a project, e.g. the same level as where package.json,\n * config.*.json and node_modules folder would be found.\n *\n * However, in some cases, the CWD may be deeper in the project,\n * e.g. if using a script, or using a childprocess.\n */\nexports.getCWDRoot = function getCWDRoot() {\n    try {\n        return findRoot(process.cwd());\n    } catch (err) {\n        return;\n    }\n}\n"}