J$.noInstrEval = false;
jalangiLabel2:
    while (true) {
        try {
            J$.Se(415745, '/Users/ex1t/Desktop/nodeAnalysis/Goldie/tests/target/cache/node_modules/mongodb/lib/core/wireprotocol/compression.js');
            J$.N(415753, 'Snappy', Snappy, false, false, false);
            J$.N(415761, 'zlib', zlib, false, false, false);
            J$.N(415769, 'compressorIDs', compressorIDs, false, false, false);
            J$.N(415777, 'uncompressibleCommands', uncompressibleCommands, false, false, false);
            J$.N(415785, 'compress', compress, false, false, false);
            J$.N(415793, 'decompress', decompress, false, false, false);
            J$.T(414897, 'use strict', 21, false);
            var Snappy = J$.W(414961, 'Snappy', J$.M(414929, J$.F(414921, J$.I(typeof require === 'undefined' ? require = J$.R(414905, 'require', undefined, true, true) : require = J$.R(414905, 'require', require, true, true)), false)(J$.T(414913, '../connection/utils', 21, false)), 'retrieveSnappy', false)(), Snappy, false, true), zlib = J$.W(414969, 'zlib', J$.F(414953, J$.I(typeof require === 'undefined' ? require = J$.R(414937, 'require', undefined, true, true) : require = J$.R(414937, 'require', require, true, true)), false)(J$.T(414945, 'zlib', 21, false)), zlib, false, true);
            var compressorIDs = J$.W(415001, 'compressorIDs', J$.T(414993, {
                snappy: J$.T(414977, 1, 22, false),
                zlib: J$.T(414985, 2, 22, false)
            }, 11, false), compressorIDs, false, true);
            var uncompressibleCommands = J$.W(415097, 'uncompressibleCommands', J$.T(415089, [
                J$.T(415009, 'ismaster', 21, false),
                J$.T(415017, 'saslStart', 21, false),
                J$.T(415025, 'saslContinue', 21, false),
                J$.T(415033, 'getnonce', 21, false),
                J$.T(415041, 'authenticate', 21, false),
                J$.T(415049, 'createUser', 21, false),
                J$.T(415057, 'updateUser', 21, false),
                J$.T(415065, 'copydbSaslStart', 21, false),
                J$.T(415073, 'copydbgetnonce', 21, false),
                J$.T(415081, 'copydb', 21, false)
            ], 10, false), uncompressibleCommands, false, true);
            var compress = J$.W(415409, 'compress', J$.T(415401, function compress(self, dataToBeCompressed, callback) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(415353, arguments.callee, this, arguments);
                            arguments = J$.N(415361, 'arguments', arguments, true, false, false);
                            self = J$.N(415369, 'self', self, true, false, false);
                            dataToBeCompressed = J$.N(415377, 'dataToBeCompressed', dataToBeCompressed, true, false, false);
                            callback = J$.N(415385, 'callback', callback, true, false, false);
                            J$.N(415393, 'zlibOptions', zlibOptions, false, false, false);
                            switch (J$.C1(25920, J$.G(415121, J$.G(415113, J$.R(415105, 'self', self, false, false), 'options'), 'agreedCompressor'))) {
                            case J$.C2(25928, J$.T(415161, 'snappy', 21, false)):
                                J$.M(415153, J$.R(415129, 'Snappy', Snappy, false, true), 'compress', false)(J$.R(415137, 'dataToBeCompressed', dataToBeCompressed, false, false), J$.R(415145, 'callback', callback, false, false));
                                break;
                            case J$.C2(25936, J$.T(415289, 'zlib', 21, false)):
                                var zlibOptions = J$.W(415177, 'zlibOptions', J$.T(415169, {}, 11, false), zlibOptions, false, false);
                                if (J$.C(25912, J$.G(415201, J$.G(415193, J$.R(415185, 'self', self, false, false), 'options'), 'zlibCompressionLevel'))) {
                                    J$.P(415241, J$.R(415209, 'zlibOptions', zlibOptions, false, false), 'level', J$.G(415233, J$.G(415225, J$.R(415217, 'self', self, false, false), 'options'), 'zlibCompressionLevel'));
                                }
                                J$.M(415281, J$.R(415249, 'zlib', zlib, false, true), 'deflate', false)(J$.R(415257, 'dataToBeCompressed', dataToBeCompressed, false, false), J$.R(415265, 'zlibOptions', zlibOptions, false, false), J$.R(415273, 'callback', callback, false, false));
                                break;
                            default:
                                throw J$.F(415345, J$.I(typeof Error === 'undefined' ? Error = J$.R(415297, 'Error', undefined, true, true) : Error = J$.R(415297, 'Error', Error, true, true)), true)(J$.B(25906, '+', J$.B(25898, '+', J$.T(415305, 'Attempt to compress message using unknown compressor "', 21, false), J$.G(415329, J$.G(415321, J$.R(415313, 'self', self, false, false), 'options'), 'agreedCompressor')), J$.T(415337, '".', 21, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(415801, J$e);
                        } finally {
                            if (J$.Fr(415809))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), compress, false, true);
            var decompress = J$.W(415681, 'decompress', J$.T(415673, function decompress(compressorID, compressedData, callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(415633, arguments.callee, this, arguments);
                            arguments = J$.N(415641, 'arguments', arguments, true, false, false);
                            compressorID = J$.N(415649, 'compressorID', compressorID, true, false, false);
                            compressedData = J$.N(415657, 'compressedData', compressedData, true, false, false);
                            callback = J$.N(415665, 'callback', callback, true, false, false);
                            if (J$.C(25952, J$.C(25944, J$.B(25914, '<', J$.R(415417, 'compressorID', compressorID, false, false), J$.T(415425, 0, 22, false))) ? J$._() : J$.B(25922, '>', J$.R(415433, 'compressorID', compressorID, false, false), J$.G(415449, J$.R(415441, 'compressorIDs', compressorIDs, false, true), 'length')))) {
                                throw J$.F(415489, J$.I(typeof Error === 'undefined' ? Error = J$.R(415457, 'Error', undefined, true, true) : Error = J$.R(415457, 'Error', Error, true, true)), true)(J$.B(25938, '+', J$.B(25930, '+', J$.T(415465, 'Server sent message compressed using an unsupported compressor. (Received compressor ID ', 21, false), J$.R(415473, 'compressorID', compressorID, false, false)), J$.T(415481, ')', 21, false)));
                            }
                            switch (J$.C1(25960, J$.R(415497, 'compressorID', compressorID, false, false))) {
                            case J$.C2(25968, J$.G(415545, J$.R(415537, 'compressorIDs', compressorIDs, false, true), 'snappy')):
                                J$.M(415529, J$.R(415505, 'Snappy', Snappy, false, true), 'uncompress', false)(J$.R(415513, 'compressedData', compressedData, false, false), J$.R(415521, 'callback', callback, false, false));
                                break;
                            case J$.C2(25976, J$.G(415593, J$.R(415585, 'compressorIDs', compressorIDs, false, true), 'zlib')):
                                J$.M(415577, J$.R(415553, 'zlib', zlib, false, true), 'inflate', false)(J$.R(415561, 'compressedData', compressedData, false, false), J$.R(415569, 'callback', callback, false, false));
                                break;
                            default:
                                J$.F(415625, J$.R(415601, 'callback', callback, false, false), false)(J$.T(415609, null, 25, false), J$.R(415617, 'compressedData', compressedData, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(415817, J$e);
                        } finally {
                            if (J$.Fr(415825))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), decompress, false, true);
            J$.P(415737, J$.I(typeof module === 'undefined' ? module = J$.R(415689, 'module', undefined, true, true) : module = J$.R(415689, 'module', module, true, true)), 'exports', J$.T(415729, {
                compressorIDs: J$.R(415697, 'compressorIDs', compressorIDs, false, true),
                uncompressibleCommands: J$.R(415705, 'uncompressibleCommands', uncompressibleCommands, false, true),
                compress: J$.R(415713, 'compress', compress, false, true),
                decompress: J$.R(415721, 'decompress', decompress, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(415833, J$e);
        } finally {
            if (J$.Sr(415841))
                continue jalangiLabel2;
            else
                break jalangiLabel2;
        }
    }
// JALANGI DO NOT INSTRUMENT

