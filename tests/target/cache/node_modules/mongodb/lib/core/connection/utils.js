J$.noInstrEval = false;
jalangiLabel5:
    while (true) {
        try {
            J$.Se(198401, '/Users/ex1t/Desktop/nodeAnalysis/Goldie/tests/target/cache/node_modules/mongodb/lib/core/connection/utils.js');
            function debugOptions(debugFields, options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(197913, arguments.callee, this, arguments);
                            arguments = J$.N(197921, 'arguments', arguments, true, false, false);
                            debugFields = J$.N(197929, 'debugFields', debugFields, true, false, false);
                            options = J$.N(197937, 'options', options, true, false, false);
                            J$.N(197945, 'finaloptions', finaloptions, false, false, false);
                            var finaloptions = J$.W(197793, 'finaloptions', J$.T(197785, {}, 11, false), finaloptions, false, false);
                            J$.M(197889, J$.R(197801, 'debugFields', debugFields, false, false), 'forEach', false)(J$.T(197881, function (n) {
                                jalangiLabel0:
                                    while (true) {
                                        try {
                                            J$.Fe(197857, arguments.callee, this, arguments);
                                            arguments = J$.N(197865, 'arguments', arguments, true, false, false);
                                            n = J$.N(197873, 'n', n, true, false, false);
                                            J$.P(197849, J$.R(197809, 'finaloptions', finaloptions, false, false), J$.R(197817, 'n', n, false, false), J$.G(197841, J$.R(197825, 'options', options, false, false), J$.R(197833, 'n', n, false, false)));
                                        } catch (J$e) {
                                            J$.Ex(198481, J$e);
                                        } finally {
                                            if (J$.Fr(198489))
                                                continue jalangiLabel0;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(197905, J$.R(197897, 'finaloptions', finaloptions, false, false));
                        } catch (J$e) {
                            J$.Ex(198497, J$e);
                        } finally {
                            if (J$.Fr(198505))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function retrieveBSON() {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(198129, arguments.callee, this, arguments);
                            arguments = J$.N(198137, 'arguments', arguments, true, false, false);
                            J$.N(198145, 'BSON', BSON, false, false, false);
                            J$.N(198153, 'optionalBSON', optionalBSON, false, false, false);
                            var BSON = J$.W(197977, 'BSON', J$.F(197969, J$.I(typeof require === 'undefined' ? require = J$.R(197953, 'require', undefined, true, true) : require = J$.R(197953, 'require', require, true, true)), false)(J$.T(197961, 'bson', 21, false)), BSON, false, false);
                            J$.P(198009, J$.R(197985, 'BSON', BSON, false, false), J$.T(197993, 'native', 21, false), J$.T(198001, false, 23, false));
                            try {
                                var optionalBSON = J$.W(198041, 'optionalBSON', J$.F(198033, J$.R(198017, 'require_optional', require_optional, false, true), false)(J$.T(198025, 'bson-ext', 21, false)), optionalBSON, false, false);
                                if (J$.C(11152, J$.R(198049, 'optionalBSON', optionalBSON, false, false))) {
                                    J$.P(198081, J$.R(198057, 'optionalBSON', optionalBSON, false, false), J$.T(198065, 'native', 21, false), J$.T(198073, true, 23, false));
                                    return J$.Rt(198097, J$.R(198089, 'optionalBSON', optionalBSON, false, false));
                                }
                            } catch (err) {
                                J$.N(198105, 'err', err, false, false, true);
                            }
                            return J$.Rt(198121, J$.R(198113, 'BSON', BSON, false, false));
                        } catch (J$e) {
                            J$.Ex(198513, J$e);
                        } finally {
                            if (J$.Fr(198521))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function noSnappyWarning() {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(198185, arguments.callee, this, arguments);
                            arguments = J$.N(198193, 'arguments', arguments, true, false, false);
                            throw J$.F(198177, J$.I(typeof Error === 'undefined' ? Error = J$.R(198161, 'Error', undefined, true, true) : Error = J$.R(198161, 'Error', Error, true, true)), true)(J$.T(198169, 'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.', 21, false));
                        } catch (J$e) {
                            J$.Ex(198529, J$e);
                        } finally {
                            if (J$.Fr(198537))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function retrieveSnappy() {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(198329, arguments.callee, this, arguments);
                            arguments = J$.N(198337, 'arguments', arguments, true, false, false);
                            J$.N(198345, 'snappy', snappy, false, false, false);
                            var snappy = J$.W(198209, 'snappy', J$.T(198201, null, 25, false), snappy, false, false);
                            try {
                                snappy = J$.W(198241, 'snappy', J$.F(198233, J$.R(198217, 'require_optional', require_optional, false, true), false)(J$.T(198225, 'snappy', 21, false)), snappy, false, false);
                            } catch (error) {
                                J$.N(198249, 'error', error, false, false, true);
                            }
                            if (J$.C(11160, J$.U(13434, '!', J$.R(198257, 'snappy', snappy, false, false)))) {
                                snappy = J$.W(198305, 'snappy', J$.T(198297, {
                                    compress: J$.R(198265, 'noSnappyWarning', noSnappyWarning, false, true),
                                    uncompress: J$.R(198273, 'noSnappyWarning', noSnappyWarning, false, true),
                                    compressSync: J$.R(198281, 'noSnappyWarning', noSnappyWarning, false, true),
                                    uncompressSync: J$.R(198289, 'noSnappyWarning', noSnappyWarning, false, true)
                                }, 11, false), snappy, false, false);
                            }
                            return J$.Rt(198321, J$.R(198313, 'snappy', snappy, false, false));
                        } catch (J$e) {
                            J$.Ex(198545, J$e);
                        } finally {
                            if (J$.Fr(198553))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(198409, 'require_optional', require_optional, false, false, false);
            debugOptions = J$.N(198425, 'debugOptions', J$.T(198417, debugOptions, 12, false), true, false, false);
            retrieveBSON = J$.N(198441, 'retrieveBSON', J$.T(198433, retrieveBSON, 12, false), true, false, false);
            noSnappyWarning = J$.N(198457, 'noSnappyWarning', J$.T(198449, noSnappyWarning, 12, false), true, false, false);
            retrieveSnappy = J$.N(198473, 'retrieveSnappy', J$.T(198465, retrieveSnappy, 12, false), true, false, false);
            J$.T(197745, 'use strict', 21, false);
            var require_optional = J$.W(197777, 'require_optional', J$.F(197769, J$.I(typeof require === 'undefined' ? require = J$.R(197753, 'require', undefined, true, true) : require = J$.R(197753, 'require', require, true, true)), false)(J$.T(197761, 'require_optional', 21, false)), require_optional, false, true);
            J$.P(198393, J$.I(typeof module === 'undefined' ? module = J$.R(198353, 'module', undefined, true, true) : module = J$.R(198353, 'module', module, true, true)), 'exports', J$.T(198385, {
                debugOptions: J$.R(198361, 'debugOptions', debugOptions, false, true),
                retrieveBSON: J$.R(198369, 'retrieveBSON', retrieveBSON, false, true),
                retrieveSnappy: J$.R(198377, 'retrieveSnappy', retrieveSnappy, false, true)
            }, 11, false));
        } catch (J$e) {
            J$.Ex(198561, J$e);
        } finally {
            if (J$.Sr(198569))
                continue jalangiLabel5;
            else
                break jalangiLabel5;
        }
    }
// JALANGI DO NOT INSTRUMENT

