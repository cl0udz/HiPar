J$.noInstrEval = false;
jalangiLabel24:
    while (true) {
        try {
            J$.Se(408329, '/Users/ex1t/Desktop/nodeAnalysis/Goldie/tests/target/cache/node_modules/mongodb/lib/core/uri_parser.js');
            function matchesParentDomain(srvAddress, parentDomain) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(397641, arguments.callee, this, arguments);
                            arguments = J$.N(397649, 'arguments', arguments, true, false, false);
                            srvAddress = J$.N(397657, 'srvAddress', srvAddress, true, false, false);
                            parentDomain = J$.N(397665, 'parentDomain', parentDomain, true, false, false);
                            J$.N(397673, 'regex', regex, false, false, false);
                            J$.N(397681, 'srv', srv, false, false, false);
                            J$.N(397689, 'parent', parent, false, false, false);
                            var regex = J$.W(397489, 'regex', J$.T(397481, /^.*?\./, 14, false), regex, false, false);
                            var srv = J$.W(397545, 'srv', J$.M(397537, J$.T(397497, '.', 21, false), 'concat', false)(J$.M(397529, J$.R(397505, 'srvAddress', srvAddress, false, false), 'replace', false)(J$.R(397513, 'regex', regex, false, false), J$.T(397521, '', 21, false))), srv, false, false);
                            var parent = J$.W(397601, 'parent', J$.M(397593, J$.T(397553, '.', 21, false), 'concat', false)(J$.M(397585, J$.R(397561, 'parentDomain', parentDomain, false, false), 'replace', false)(J$.R(397569, 'regex', regex, false, false), J$.T(397577, '', 21, false))), parent, false, false);
                            return J$.Rt(397633, J$.M(397625, J$.R(397609, 'srv', srv, false, false), 'endsWith', false)(J$.R(397617, 'parent', parent, false, false)));
                        } catch (J$e) {
                            J$.Ex(408609, J$e);
                        } finally {
                            if (J$.Fr(408617))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseSrvConnectionString(uri, options, callback) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(399529, arguments.callee, this, arguments);
                            arguments = J$.N(399537, 'arguments', arguments, true, false, false);
                            uri = J$.N(399545, 'uri', uri, true, false, false);
                            options = J$.N(399553, 'options', options, true, false, false);
                            callback = J$.N(399561, 'callback', callback, true, false, false);
                            J$.N(399569, 'result', result, false, false, false);
                            J$.N(399577, 'lookupAddress', lookupAddress, false, false, false);
                            var result = J$.W(397729, 'result', J$.M(397721, J$.R(397697, 'URL', URL, false, true), 'parse', false)(J$.R(397705, 'uri', uri, false, false), J$.T(397713, true, 23, false)), result, false, false);
                            if (J$.C(24496, J$.B(24658, '<', J$.G(397769, J$.M(397761, J$.G(397745, J$.R(397737, 'result', result, false, false), 'hostname'), 'split', false)(J$.T(397753, '.', 21, false)), 'length'), J$.T(397777, 3, 22, false)))) {
                                return J$.Rt(397825, J$.F(397817, J$.R(397785, 'callback', callback, false, false), false)(J$.F(397809, J$.R(397793, 'MongoParseError', MongoParseError, false, true), true)(J$.T(397801, 'URI does not have hostname, domain name and tld', 21, false))));
                            }
                            J$.P(397881, J$.R(397833, 'result', result, false, false), 'domainLength', J$.G(397873, J$.M(397865, J$.G(397849, J$.R(397841, 'result', result, false, false), 'hostname'), 'split', false)(J$.T(397857, '.', 21, false)), 'length'));
                            if (J$.C(24512, J$.C(24504, J$.G(397897, J$.R(397889, 'result', result, false, false), 'pathname')) ? J$.M(397929, J$.G(397913, J$.R(397905, 'result', result, false, false), 'pathname'), 'match', false)(J$.T(397921, ',', 21, false)) : J$._())) {
                                return J$.Rt(397977, J$.F(397969, J$.R(397937, 'callback', callback, false, false), false)(J$.F(397961, J$.R(397945, 'MongoParseError', MongoParseError, false, true), true)(J$.T(397953, 'Invalid URI, cannot contain multiple hostnames', 21, false))));
                            }
                            if (J$.C(24520, J$.G(397993, J$.R(397985, 'result', result, false, false), 'port'))) {
                                return J$.Rt(398065, J$.F(398057, J$.R(398001, 'callback', callback, false, false), false)(J$.F(398049, J$.R(398009, 'MongoParseError', MongoParseError, false, true), true)(J$.M(398041, J$.T(398017, 'Ports not accepted with \'', 21, false), 'concat', false)(J$.R(398025, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true), J$.T(398033, '\' URIs', 21, false)))));
                            }
                            var lookupAddress = J$.W(398089, 'lookupAddress', J$.G(398081, J$.R(398073, 'result', result, false, false), 'host'), lookupAddress, false, false);
                            J$.M(399521, J$.R(398097, 'dns', dns, false, true), 'resolveSrv', false)(J$.M(398121, J$.T(398105, '_mongodb._tcp.', 21, false), 'concat', false)(J$.R(398113, 'lookupAddress', lookupAddress, false, false)), J$.T(399513, function (err, addresses) {
                                jalangiLabel5:
                                    while (true) {
                                        try {
                                            J$.Fe(399473, arguments.callee, this, arguments);
                                            arguments = J$.N(399481, 'arguments', arguments, true, false, false);
                                            err = J$.N(399489, 'err', err, true, false, false);
                                            addresses = J$.N(399497, 'addresses', addresses, true, false, false);
                                            J$.N(399505, 'i', i, false, false, false);
                                            if (J$.C(24528, J$.R(398129, 'err', err, false, false)))
                                                return J$.Rt(398161, J$.F(398153, J$.R(398137, 'callback', callback, false, false), false)(J$.R(398145, 'err', err, false, false)));
                                            if (J$.C(24536, J$.B(24666, '===', J$.G(398177, J$.R(398169, 'addresses', addresses, false, false), 'length'), J$.T(398185, 0, 22, false)))) {
                                                return J$.Rt(398233, J$.F(398225, J$.R(398193, 'callback', callback, false, false), false)(J$.F(398217, J$.R(398201, 'MongoParseError', MongoParseError, false, true), true)(J$.T(398209, 'No addresses found at host', 21, false))));
                                            }
                                            for (var i = J$.W(398249, 'i', J$.T(398241, 0, 22, false), i, false, false); J$.C(24552, J$.B(24674, '<', J$.R(398257, 'i', i, false, false), J$.G(398273, J$.R(398265, 'addresses', addresses, false, false), 'length'))); J$.B(24698, '-', i = J$.W(398289, 'i', J$.B(24690, '+', J$.U(24682, '+', J$.R(398281, 'i', i, false, false)), 1), i, false, false), 1)) {
                                                if (J$.C(24544, J$.U(24706, '!', J$.F(398369, J$.R(398297, 'matchesParentDomain', matchesParentDomain, false, true), false)(J$.G(398329, J$.G(398321, J$.R(398305, 'addresses', addresses, false, false), J$.R(398313, 'i', i, false, false)), 'name'), J$.G(398345, J$.R(398337, 'result', result, false, false), 'hostname'), J$.G(398361, J$.R(398353, 'result', result, false, false), 'domainLength'))))) {
                                                    return J$.Rt(398417, J$.F(398409, J$.R(398377, 'callback', callback, false, false), false)(J$.F(398401, J$.R(398385, 'MongoParseError', MongoParseError, false, true), true)(J$.T(398393, 'Server record does not share hostname with parent URI', 21, false))));
                                                }
                                            }
                                            J$.P(398441, J$.R(398425, 'result', result, false, false), 'protocol', J$.T(398433, 'mongodb', 21, false));
                                            J$.P(398593, J$.R(398449, 'result', result, false, false), 'host', J$.M(398585, J$.M(398569, J$.R(398457, 'addresses', addresses, false, false), 'map', false)(J$.T(398561, function (address) {
                                                jalangiLabel1:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(398537, arguments.callee, this, arguments);
                                                            arguments = J$.N(398545, 'arguments', arguments, true, false, false);
                                                            address = J$.N(398553, 'address', address, true, false, false);
                                                            return J$.Rt(398529, J$.M(398521, J$.M(398497, J$.T(398465, '', 21, false), 'concat', false)(J$.G(398481, J$.R(398473, 'address', address, false, false), 'name'), J$.T(398489, ':', 21, false)), 'concat', false)(J$.G(398513, J$.R(398505, 'address', address, false, false), 'port')));
                                                        } catch (J$e) {
                                                            J$.Ex(408625, J$e);
                                                        } finally {
                                                            if (J$.Fr(408633))
                                                                continue jalangiLabel1;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false)), 'join', false)(J$.T(398577, ',', 21, false)));
                                            if (J$.C(24584, J$.C(24576, J$.U(24722, '!', J$.B(24714, 'in', J$.T(398601, 'ssl', 21, false), J$.R(398609, 'options', options, false, false)))) ? J$.C(24568, J$.C(24560, J$.U(24730, '!', J$.G(398625, J$.R(398617, 'result', result, false, false), 'search'))) ? J$._() : J$.U(24746, '!', J$.B(24738, 'in', J$.T(398633, 'ssl', 21, false), J$.G(398649, J$.R(398641, 'result', result, false, false), 'query')))) ? J$._() : J$.B(24754, '===', J$.G(398673, J$.G(398665, J$.R(398657, 'result', result, false, false), 'query'), 'ssl'), J$.T(398681, null, 25, false)) : J$._())) {
                                                J$.P(398713, J$.G(398697, J$.R(398689, 'result', result, false, false), 'query'), 'ssl', J$.T(398705, true, 23, false));
                                            }
                                            J$.M(399465, J$.R(398721, 'dns', dns, false, true), 'resolveTxt', false)(J$.R(398729, 'lookupAddress', lookupAddress, false, false), J$.T(399457, function (err, record) {
                                                jalangiLabel4:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(399417, arguments.callee, this, arguments);
                                                            arguments = J$.N(399425, 'arguments', arguments, true, false, false);
                                                            err = J$.N(399433, 'err', err, true, false, false);
                                                            record = J$.N(399441, 'record', record, true, false, false);
                                                            J$.N(399449, 'finalString', finalString, false, false, false);
                                                            if (J$.C(24600, J$.R(398737, 'err', err, false, false))) {
                                                                if (J$.C(24592, J$.B(24762, '!==', J$.G(398753, J$.R(398745, 'err', err, false, false), 'code'), J$.T(398761, 'ENODATA', 21, false)))) {
                                                                    return J$.Rt(398793, J$.F(398785, J$.R(398769, 'callback', callback, false, false), false)(J$.R(398777, 'err', err, false, false)));
                                                                }
                                                                record = J$.W(398809, 'record', J$.T(398801, null, 25, false), record, false, false);
                                                            }
                                                            if (J$.C(24632, J$.R(398817, 'record', record, false, false))) {
                                                                if (J$.C(24608, J$.B(24770, '>', J$.G(398833, J$.R(398825, 'record', record, false, false), 'length'), J$.T(398841, 1, 22, false)))) {
                                                                    return J$.Rt(398889, J$.F(398881, J$.R(398849, 'callback', callback, false, false), false)(J$.F(398873, J$.R(398857, 'MongoParseError', MongoParseError, false, true), true)(J$.T(398865, 'Multiple text records not allowed', 21, false))));
                                                                }
                                                                record = J$.W(398953, 'record', J$.M(398945, J$.R(398897, 'qs', qs, false, true), 'parse', false)(J$.M(398937, J$.G(398921, J$.R(398905, 'record', record, false, false), J$.T(398913, 0, 22, false)), 'join', false)(J$.T(398929, '', 21, false))), record, false, false);
                                                                if (J$.C(24624, J$.M(399057, J$.M(398977, J$.I(typeof Object === 'undefined' ? Object = J$.R(398961, 'Object', undefined, true, true) : Object = J$.R(398961, 'Object', Object, true, true)), 'keys', false)(J$.R(398969, 'record', record, false, false)), 'some', false)(J$.T(399049, function (key) {
                                                                        jalangiLabel2:
                                                                            while (true) {
                                                                                try {
                                                                                    J$.Fe(399025, arguments.callee, this, arguments);
                                                                                    arguments = J$.N(399033, 'arguments', arguments, true, false, false);
                                                                                    key = J$.N(399041, 'key', key, true, false, false);
                                                                                    return J$.Rt(399017, J$.C(24616, J$.B(24778, '!==', J$.R(398985, 'key', key, false, false), J$.T(398993, 'authSource', 21, false))) ? J$.B(24786, '!==', J$.R(399001, 'key', key, false, false), J$.T(399009, 'replicaSet', 21, false)) : J$._());
                                                                                } catch (J$e) {
                                                                                    J$.Ex(408641, J$e);
                                                                                } finally {
                                                                                    if (J$.Fr(408649))
                                                                                        continue jalangiLabel2;
                                                                                    else
                                                                                        return J$.Ra();
                                                                                }
                                                                            }
                                                                    }, 12, false)))) {
                                                                    return J$.Rt(399105, J$.F(399097, J$.R(399065, 'callback', callback, false, false), false)(J$.F(399089, J$.R(399073, 'MongoParseError', MongoParseError, false, true), true)(J$.T(399081, 'Text record must only set `authSource` or `replicaSet`', 21, false))));
                                                                }
                                                                J$.M(399145, J$.I(typeof Object === 'undefined' ? Object = J$.R(399113, 'Object', undefined, true, true) : Object = J$.R(399113, 'Object', Object, true, true)), 'assign', false)(J$.G(399129, J$.R(399121, 'result', result, false, false), 'query'), J$.R(399137, 'record', record, false, false));
                                                            }
                                                            J$.P(399193, J$.R(399153, 'result', result, false, false), 'search', J$.M(399185, J$.R(399161, 'qs', qs, false, true), 'stringify', false)(J$.G(399177, J$.R(399169, 'result', result, false, false), 'query')));
                                                            var finalString = J$.W(399225, 'finalString', J$.M(399217, J$.R(399201, 'URL', URL, false, true), 'format', false)(J$.R(399209, 'result', result, false, false)), finalString, false, false);
                                                            J$.F(399409, J$.R(399233, 'parseConnectionString', parseConnectionString, false, true), false)(J$.R(399241, 'finalString', finalString, false, false), J$.R(399249, 'options', options, false, false), J$.T(399401, function (err, ret) {
                                                                jalangiLabel3:
                                                                    while (true) {
                                                                        try {
                                                                            J$.Fe(399369, arguments.callee, this, arguments);
                                                                            arguments = J$.N(399377, 'arguments', arguments, true, false, false);
                                                                            err = J$.N(399385, 'err', err, true, false, false);
                                                                            ret = J$.N(399393, 'ret', ret, true, false, false);
                                                                            if (J$.C(24640, J$.R(399257, 'err', err, false, false))) {
                                                                                J$.F(399281, J$.R(399265, 'callback', callback, false, false), false)(J$.R(399273, 'err', err, false, false));
                                                                                return J$.Rt(399289, undefined);
                                                                            }
                                                                            J$.F(399361, J$.R(399297, 'callback', callback, false, false), false)(J$.T(399305, null, 25, false), J$.M(399353, J$.I(typeof Object === 'undefined' ? Object = J$.R(399313, 'Object', undefined, true, true) : Object = J$.R(399313, 'Object', Object, true, true)), 'assign', false)(J$.T(399321, {}, 11, false), J$.R(399329, 'ret', ret, false, false), J$.T(399345, { srvHost: J$.R(399337, 'lookupAddress', lookupAddress, false, false) }, 11, false)));
                                                                        } catch (J$e) {
                                                                            J$.Ex(408657, J$e);
                                                                        } finally {
                                                                            if (J$.Fr(408665))
                                                                                continue jalangiLabel3;
                                                                            else
                                                                                return J$.Ra();
                                                                        }
                                                                    }
                                                            }, 12, false));
                                                        } catch (J$e) {
                                                            J$.Ex(408673, J$e);
                                                        } finally {
                                                            if (J$.Fr(408681))
                                                                continue jalangiLabel4;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(408689, J$e);
                                        } finally {
                                            if (J$.Fr(408697))
                                                continue jalangiLabel5;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(408705, J$e);
                        } finally {
                            if (J$.Fr(408713))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQueryStringItemValue(key, value) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(400409, arguments.callee, this, arguments);
                            arguments = J$.N(400417, 'arguments', arguments, true, false, false);
                            key = J$.N(400425, 'key', key, true, false, false);
                            value = J$.N(400433, 'value', value, true, false, false);
                            J$.N(400441, 'numericValue', numericValue, false, false, false);
                            if (J$.C(24712, J$.M(399601, J$.I(typeof Array === 'undefined' ? Array = J$.R(399585, 'Array', undefined, true, true) : Array = J$.R(399585, 'Array', Array, true, true)), 'isArray', false)(J$.R(399593, 'value', value, false, false)))) {
                                value = J$.W(399705, 'value', J$.M(399697, J$.R(399609, 'value', value, false, false), 'filter', false)(J$.T(399689, function (v, idx) {
                                    jalangiLabel7:
                                        while (true) {
                                            try {
                                                J$.Fe(399657, arguments.callee, this, arguments);
                                                arguments = J$.N(399665, 'arguments', arguments, true, false, false);
                                                v = J$.N(399673, 'v', v, true, false, false);
                                                idx = J$.N(399681, 'idx', idx, true, false, false);
                                                return J$.Rt(399649, J$.B(24794, '===', J$.M(399633, J$.R(399617, 'value', value, false, false), 'indexOf', false)(J$.R(399625, 'v', v, false, false)), J$.R(399641, 'idx', idx, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(408721, J$e);
                                            } finally {
                                                if (J$.Fr(408729))
                                                    continue jalangiLabel7;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), value, false, false);
                                if (J$.C(24648, J$.B(24802, '===', J$.G(399721, J$.R(399713, 'value', value, false, false), 'length'), J$.T(399729, 1, 22, false))))
                                    value = J$.W(399761, 'value', J$.G(399753, J$.R(399737, 'value', value, false, false), J$.T(399745, 0, 22, false)), value, false, false);
                            } else if (J$.C(24704, J$.B(24810, '>', J$.M(399785, J$.R(399769, 'value', value, false, false), 'indexOf', false)(J$.T(399777, ':', 21, false)), J$.T(399793, 0, 22, false)))) {
                                value = J$.W(400025, 'value', J$.M(400017, J$.M(399817, J$.R(399801, 'value', value, false, false), 'split', false)(J$.T(399809, ',', 21, false)), 'reduce', false)(J$.T(400001, function (result, pair) {
                                    jalangiLabel8:
                                        while (true) {
                                            try {
                                                J$.Fe(399961, arguments.callee, this, arguments);
                                                arguments = J$.N(399969, 'arguments', arguments, true, false, false);
                                                result = J$.N(399977, 'result', result, true, false, false);
                                                pair = J$.N(399985, 'pair', pair, true, false, false);
                                                J$.N(399993, 'parts', parts, false, false, false);
                                                var parts = J$.W(399849, 'parts', J$.M(399841, J$.R(399825, 'pair', pair, false, false), 'split', false)(J$.T(399833, ':', 21, false)), parts, false, false);
                                                J$.P(399937, J$.R(399857, 'result', result, false, false), J$.G(399881, J$.R(399865, 'parts', parts, false, false), J$.T(399873, 0, 22, false)), J$.F(399929, J$.R(399889, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(399897, 'key', key, false, false), J$.G(399921, J$.R(399905, 'parts', parts, false, false), J$.T(399913, 1, 22, false))));
                                                return J$.Rt(399953, J$.R(399945, 'result', result, false, false));
                                            } catch (J$e) {
                                                J$.Ex(408737, J$e);
                                            } finally {
                                                if (J$.Fr(408745))
                                                    continue jalangiLabel8;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false), J$.T(400009, {}, 11, false)), value, false, false);
                            } else if (J$.C(24696, J$.B(24818, '>', J$.M(400049, J$.R(400033, 'value', value, false, false), 'indexOf', false)(J$.T(400041, ',', 21, false)), J$.T(400057, 0, 22, false)))) {
                                value = J$.W(400169, 'value', J$.M(400161, J$.M(400081, J$.R(400065, 'value', value, false, false), 'split', false)(J$.T(400073, ',', 21, false)), 'map', false)(J$.T(400153, function (v) {
                                    jalangiLabel9:
                                        while (true) {
                                            try {
                                                J$.Fe(400129, arguments.callee, this, arguments);
                                                arguments = J$.N(400137, 'arguments', arguments, true, false, false);
                                                v = J$.N(400145, 'v', v, true, false, false);
                                                return J$.Rt(400121, J$.F(400113, J$.R(400089, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(400097, 'key', key, false, false), J$.R(400105, 'v', v, false, false)));
                                            } catch (J$e) {
                                                J$.Ex(408753, J$e);
                                            } finally {
                                                if (J$.Fr(408761))
                                                    continue jalangiLabel9;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false)), value, false, false);
                            } else if (J$.C(24688, J$.C(24656, J$.B(24826, '===', J$.M(400185, J$.R(400177, 'value', value, false, false), 'toLowerCase', false)(), J$.T(400193, 'true', 21, false))) ? J$._() : J$.B(24834, '===', J$.M(400209, J$.R(400201, 'value', value, false, false), 'toLowerCase', false)(), J$.T(400217, 'false', 21, false)))) {
                                value = J$.W(400249, 'value', J$.B(24842, '===', J$.M(400233, J$.R(400225, 'value', value, false, false), 'toLowerCase', false)(), J$.T(400241, 'true', 21, false)), value, false, false);
                            } else if (J$.C(24680, J$.C(24664, J$.U(24850, '!', J$.M(400273, J$.I(typeof Number === 'undefined' ? Number = J$.R(400257, 'Number', undefined, true, true) : Number = J$.R(400257, 'Number', Number, true, true)), 'isNaN', false)(J$.R(400265, 'value', value, false, false)))) ? J$.U(24858, '!', J$.M(400297, J$.R(400281, 'STRING_OPTIONS', STRING_OPTIONS, false, true), 'has', false)(J$.R(400289, 'key', key, false, false))) : J$._())) {
                                var numericValue = J$.W(400329, 'numericValue', J$.F(400321, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(400305, 'parseFloat', undefined, true, true) : parseFloat = J$.R(400305, 'parseFloat', parseFloat, true, true)), false)(J$.R(400313, 'value', value, false, false)), numericValue, false, false);
                                if (J$.C(24672, J$.U(24866, '!', J$.M(400353, J$.I(typeof Number === 'undefined' ? Number = J$.R(400337, 'Number', undefined, true, true) : Number = J$.R(400337, 'Number', Number, true, true)), 'isNaN', false)(J$.R(400345, 'numericValue', numericValue, false, false))))) {
                                    value = J$.W(400385, 'value', J$.F(400377, J$.I(typeof parseFloat === 'undefined' ? parseFloat = J$.R(400361, 'parseFloat', undefined, true, true) : parseFloat = J$.R(400361, 'parseFloat', parseFloat, true, true)), false)(J$.R(400369, 'value', value, false, false)), value, false, false);
                                }
                            }
                            return J$.Rt(400401, J$.R(400393, 'value', value, false, false));
                        } catch (J$e) {
                            J$.Ex(408769, J$e);
                        } finally {
                            if (J$.Fr(408777))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function applyConnectionStringOption(obj, key, value, options) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(402081, arguments.callee, this, arguments);
                            arguments = J$.N(402089, 'arguments', arguments, true, false, false);
                            obj = J$.N(402097, 'obj', obj, true, false, false);
                            key = J$.N(402105, 'key', key, true, false, false);
                            value = J$.N(402113, 'value', value, true, false, false);
                            options = J$.N(402121, 'options', options, true, false, false);
                            if (J$.C(24728, J$.B(24874, '===', J$.R(400953, 'key', key, false, false), J$.T(400961, 'journal', 21, false)))) {
                                key = J$.W(400977, 'key', J$.T(400969, 'j', 21, false), key, false, false);
                            } else if (J$.C(24720, J$.B(24882, '===', J$.R(400985, 'key', key, false, false), J$.T(400993, 'wtimeoutms', 21, false)))) {
                                key = J$.W(401009, 'key', J$.T(401001, 'wtimeout', 21, false), key, false, false);
                            }
                            if (J$.C(24760, J$.M(401033, J$.R(401017, 'BOOLEAN_OPTIONS', BOOLEAN_OPTIONS, false, true), 'has', false)(J$.R(401025, 'key', key, false, false)))) {
                                value = J$.W(401073, 'value', J$.C(24736, J$.B(24890, '===', J$.R(401041, 'value', value, false, false), J$.T(401049, 'true', 21, false))) ? J$._() : J$.B(24898, '===', J$.R(401057, 'value', value, false, false), J$.T(401065, true, 23, false)), value, false, false);
                            } else if (J$.C(24752, J$.B(24906, '===', J$.R(401081, 'key', key, false, false), J$.T(401089, 'appname', 21, false)))) {
                                value = J$.W(401121, 'value', J$.F(401113, J$.I(typeof decodeURIComponent === 'undefined' ? decodeURIComponent = J$.R(401097, 'decodeURIComponent', undefined, true, true) : decodeURIComponent = J$.R(401097, 'decodeURIComponent', decodeURIComponent, true, true)), false)(J$.R(401105, 'value', value, false, false)), value, false, false);
                            } else if (J$.C(24744, J$.B(24914, '===', J$.R(401129, 'key', key, false, false), J$.T(401137, 'readconcernlevel', 21, false)))) {
                                J$.P(401169, J$.R(401145, 'obj', obj, false, false), J$.T(401153, 'readConcernLevel', 21, false), J$.R(401161, 'value', value, false, false));
                                key = J$.W(401185, 'key', J$.T(401177, 'readconcern', 21, false), key, false, false);
                                value = J$.W(401209, 'value', J$.T(401201, { level: J$.R(401193, 'value', value, false, false) }, 11, false), value, false, false);
                            }
                            if (J$.C(24792, J$.B(24922, '===', J$.R(401217, 'key', key, false, false), J$.T(401225, 'compressors', 21, false)))) {
                                value = J$.W(401281, 'value', J$.C(24768, J$.M(401249, J$.I(typeof Array === 'undefined' ? Array = J$.R(401233, 'Array', undefined, true, true) : Array = J$.R(401233, 'Array', Array, true, true)), 'isArray', false)(J$.R(401241, 'value', value, false, false))) ? J$.R(401257, 'value', value, false, false) : J$.T(401273, [J$.R(401265, 'value', value, false, false)], 10, false), value, false, false);
                                if (J$.C(24784, J$.U(24946, '!', J$.M(401369, J$.R(401289, 'value', value, false, false), 'every', false)(J$.T(401361, function (c) {
                                        jalangiLabel11:
                                            while (true) {
                                                try {
                                                    J$.Fe(401337, arguments.callee, this, arguments);
                                                    arguments = J$.N(401345, 'arguments', arguments, true, false, false);
                                                    c = J$.N(401353, 'c', c, true, false, false);
                                                    return J$.Rt(401329, J$.C(24776, J$.B(24930, '===', J$.R(401297, 'c', c, false, false), J$.T(401305, 'snappy', 21, false))) ? J$._() : J$.B(24938, '===', J$.R(401313, 'c', c, false, false), J$.T(401321, 'zlib', 21, false)));
                                                } catch (J$e) {
                                                    J$.Ex(408785, J$e);
                                                } finally {
                                                    if (J$.Fr(408793))
                                                        continue jalangiLabel11;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false))))) {
                                    throw J$.F(401393, J$.R(401377, 'MongoParseError', MongoParseError, false, true), true)(J$.T(401385, 'Value for `compressors` must be at least one of: `snappy`, `zlib`', 21, false));
                                }
                            }
                            if (J$.C(24808, J$.C(24800, J$.B(24954, '===', J$.R(401401, 'key', key, false, false), J$.T(401409, 'authmechanism', 21, false))) ? J$.U(24962, '!', J$.M(401433, J$.R(401417, 'AUTH_MECHANISMS', AUTH_MECHANISMS, false, true), 'has', false)(J$.R(401425, 'value', value, false, false))) : J$._())) {
                                throw J$.F(401457, J$.R(401441, 'MongoParseError', MongoParseError, false, true), true)(J$.T(401449, 'Value for `authMechanism` must be one of: `DEFAULT`, `GSSAPI`, `PLAIN`, `MONGODB-X509`, `SCRAM-SHA-1`, `SCRAM-SHA-256`', 21, false));
                            }
                            if (J$.C(24824, J$.C(24816, J$.B(24970, '===', J$.R(401465, 'key', key, false, false), J$.T(401473, 'readpreference', 21, false))) ? J$.U(24978, '!', J$.M(401497, J$.R(401481, 'ReadPreference', ReadPreference, false, true), 'isValid', false)(J$.R(401489, 'value', value, false, false))) : J$._())) {
                                throw J$.F(401521, J$.R(401505, 'MongoParseError', MongoParseError, false, true), true)(J$.T(401513, 'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`', 21, false));
                            }
                            if (J$.C(24848, J$.C(24840, J$.B(24986, '===', J$.R(401529, 'key', key, false, false), J$.T(401537, 'zlibcompressionlevel', 21, false))) ? J$.C(24832, J$.B(25002, '<', J$.R(401545, 'value', value, false, false), J$.U(24994, '-', J$.T(401553, 1, 22, false)))) ? J$._() : J$.B(25010, '>', J$.R(401561, 'value', value, false, false), J$.T(401569, 9, 22, false)) : J$._())) {
                                throw J$.F(401593, J$.R(401577, 'MongoParseError', MongoParseError, false, true), true)(J$.T(401585, 'zlibCompressionLevel must be an integer between -1 and 9', 21, false));
                            }
                            if (J$.C(24872, J$.C(24856, J$.B(25018, '===', J$.R(401601, 'key', key, false, false), J$.T(401609, 'compressors', 21, false))) ? J$._() : J$.B(25026, '===', J$.R(401617, 'key', key, false, false), J$.T(401625, 'zlibcompressionlevel', 21, false)))) {
                                J$.P(401665, J$.R(401633, 'obj', obj, false, false), 'compression', J$.C(24864, J$.G(401649, J$.R(401641, 'obj', obj, false, false), 'compression')) ? J$._() : J$.T(401657, {}, 11, false));
                                obj = J$.W(401689, 'obj', J$.G(401681, J$.R(401673, 'obj', obj, false, false), 'compression'), obj, false, false);
                            }
                            if (J$.C(24904, J$.B(25034, '===', J$.R(401697, 'key', key, false, false), J$.T(401705, 'authmechanismproperties', 21, false)))) {
                                if (J$.C(24880, J$.B(25050, '===', J$.U(25042, 'typeof', J$.G(401721, J$.R(401713, 'value', value, false, false), 'SERVICE_NAME')), J$.T(401729, 'string', 21, false))))
                                    J$.P(401761, J$.R(401737, 'obj', obj, false, false), 'gssapiServiceName', J$.G(401753, J$.R(401745, 'value', value, false, false), 'SERVICE_NAME'));
                                if (J$.C(24888, J$.B(25066, '===', J$.U(25058, 'typeof', J$.G(401777, J$.R(401769, 'value', value, false, false), 'SERVICE_REALM')), J$.T(401785, 'string', 21, false))))
                                    J$.P(401817, J$.R(401793, 'obj', obj, false, false), 'gssapiServiceRealm', J$.G(401809, J$.R(401801, 'value', value, false, false), 'SERVICE_REALM'));
                                if (J$.C(24896, J$.B(25082, '!==', J$.U(25074, 'typeof', J$.G(401833, J$.R(401825, 'value', value, false, false), 'CANONICALIZE_HOST_NAME')), J$.T(401841, 'undefined', 21, false)))) {
                                    J$.P(401873, J$.R(401849, 'obj', obj, false, false), 'gssapiCanonicalizeHostName', J$.G(401865, J$.R(401857, 'value', value, false, false), 'CANONICALIZE_HOST_NAME'));
                                }
                            }
                            if (J$.C(24920, J$.C(24912, J$.B(25090, '===', J$.R(401881, 'key', key, false, false), J$.T(401889, 'readpreferencetags', 21, false))) ? J$.M(401913, J$.I(typeof Array === 'undefined' ? Array = J$.R(401897, 'Array', undefined, true, true) : Array = J$.R(401897, 'Array', Array, true, true)), 'isArray', false)(J$.R(401905, 'value', value, false, false)) : J$._())) {
                                value = J$.W(401945, 'value', J$.F(401937, J$.R(401921, 'splitArrayOfMultipleReadPreferenceTags', splitArrayOfMultipleReadPreferenceTags, false, true), false)(J$.R(401929, 'value', value, false, false)), value, false, false);
                            }
                            if (J$.C(24936, J$.C(24928, J$.G(401961, J$.R(401953, 'options', options, false, false), 'caseTranslate')) ? J$.G(401985, J$.R(401969, 'CASE_TRANSLATION', CASE_TRANSLATION, false, true), J$.R(401977, 'key', key, false, false)) : J$._())) {
                                J$.P(402033, J$.R(401993, 'obj', obj, false, false), J$.G(402017, J$.R(402001, 'CASE_TRANSLATION', CASE_TRANSLATION, false, true), J$.R(402009, 'key', key, false, false)), J$.R(402025, 'value', value, false, false));
                                return J$.Rt(402041, undefined);
                            }
                            J$.P(402073, J$.R(402049, 'obj', obj, false, false), J$.R(402057, 'key', key, false, false), J$.R(402065, 'value', value, false, false));
                        } catch (J$e) {
                            J$.Ex(408801, J$e);
                        } finally {
                            if (J$.Fr(408809))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function splitArrayOfMultipleReadPreferenceTags(value) {
                jalangiLabel15:
                    while (true) {
                        try {
                            J$.Fe(402585, arguments.callee, this, arguments);
                            arguments = J$.N(402593, 'arguments', arguments, true, false, false);
                            value = J$.N(402601, 'value', value, true, false, false);
                            J$.N(402609, 'parsedTags', parsedTags, false, false, false);
                            J$.N(402617, '_loop', _loop, false, false, false);
                            J$.N(402625, 'i', i, false, false, false);
                            var parsedTags = J$.W(402209, 'parsedTags', J$.T(402201, [], 10, false), parsedTags, false, false);
                            var _loop = J$.W(402481, '_loop', J$.T(402473, function _loop(i) {
                                jalangiLabel14:
                                    while (true) {
                                        try {
                                            J$.Fe(402449, arguments.callee, this, arguments);
                                            arguments = J$.N(402457, 'arguments', arguments, true, false, false);
                                            i = J$.N(402465, 'i', i, true, false, false);
                                            J$.P(402241, J$.R(402217, 'parsedTags', parsedTags, false, false), J$.R(402225, 'i', i, false, false), J$.T(402233, {}, 11, false));
                                            J$.M(402441, J$.M(402281, J$.G(402265, J$.R(402249, 'value', value, false, false), J$.R(402257, 'i', i, false, false)), 'split', false)(J$.T(402273, ',', 21, false)), 'forEach', false)(J$.T(402433, function (individualTag) {
                                                jalangiLabel13:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(402401, arguments.callee, this, arguments);
                                                            arguments = J$.N(402409, 'arguments', arguments, true, false, false);
                                                            individualTag = J$.N(402417, 'individualTag', individualTag, true, false, false);
                                                            J$.N(402425, 'splitTag', splitTag, false, false, false);
                                                            var splitTag = J$.W(402313, 'splitTag', J$.M(402305, J$.R(402289, 'individualTag', individualTag, false, false), 'split', false)(J$.T(402297, ':', 21, false)), splitTag, false, false);
                                                            J$.P(402393, J$.G(402337, J$.R(402321, 'parsedTags', parsedTags, false, false), J$.R(402329, 'i', i, false, false)), J$.G(402361, J$.R(402345, 'splitTag', splitTag, false, false), J$.T(402353, 0, 22, false)), J$.G(402385, J$.R(402369, 'splitTag', splitTag, false, false), J$.T(402377, 1, 22, false)));
                                                        } catch (J$e) {
                                                            J$.Ex(408817, J$e);
                                                        } finally {
                                                            if (J$.Fr(408825))
                                                                continue jalangiLabel13;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(408833, J$e);
                                        } finally {
                                            if (J$.Fr(408841))
                                                continue jalangiLabel14;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false), _loop, false, false);
                            for (var i = J$.W(402497, 'i', J$.T(402489, 0, 22, false), i, false, false); J$.C(24944, J$.B(25098, '<', J$.R(402505, 'i', i, false, false), J$.G(402521, J$.R(402513, 'value', value, false, false), 'length'))); J$.B(25122, '-', i = J$.W(402537, 'i', J$.B(25114, '+', J$.U(25106, '+', J$.R(402529, 'i', i, false, false)), 1), i, false, false), 1)) {
                                J$.F(402561, J$.R(402545, '_loop', _loop, false, false), false)(J$.R(402553, 'i', i, false, false));
                            }
                            return J$.Rt(402577, J$.R(402569, 'parsedTags', parsedTags, false, false));
                        } catch (J$e) {
                            J$.Ex(408849, J$e);
                        } finally {
                            if (J$.Fr(408857))
                                continue jalangiLabel15;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function applyAuthExpectations(parsed) {
                jalangiLabel16:
                    while (true) {
                        try {
                            J$.Fe(403745, arguments.callee, this, arguments);
                            arguments = J$.N(403753, 'arguments', arguments, true, false, false);
                            parsed = J$.N(403761, 'parsed', parsed, true, false, false);
                            J$.N(403769, 'options', options, false, false, false);
                            J$.N(403777, 'authSource', authSource, false, false, false);
                            J$.N(403785, 'authMechanism', authMechanism, false, false, false);
                            if (J$.C(24952, J$.B(25130, '==', J$.G(402641, J$.R(402633, 'parsed', parsed, false, false), 'options'), J$.T(402649, null, 25, false)))) {
                                return J$.Rt(402657, undefined);
                            }
                            var options = J$.W(402681, 'options', J$.G(402673, J$.R(402665, 'parsed', parsed, false, false), 'options'), options, false, false);
                            var authSource = J$.W(402721, 'authSource', J$.C(24960, J$.G(402697, J$.R(402689, 'options', options, false, false), 'authsource')) ? J$._() : J$.G(402713, J$.R(402705, 'options', options, false, false), 'authSource'), authSource, false, false);
                            if (J$.C(24968, J$.B(25138, '!=', J$.R(402729, 'authSource', authSource, false, false), J$.T(402737, null, 25, false)))) {
                                J$.P(402809, J$.R(402745, 'parsed', parsed, false, false), 'auth', J$.M(402801, J$.I(typeof Object === 'undefined' ? Object = J$.R(402753, 'Object', undefined, true, true) : Object = J$.R(402753, 'Object', Object, true, true)), 'assign', false)(J$.T(402761, {}, 11, false), J$.G(402777, J$.R(402769, 'parsed', parsed, false, false), 'auth'), J$.T(402793, { db: J$.R(402785, 'authSource', authSource, false, false) }, 11, false)));
                            }
                            var authMechanism = J$.W(402849, 'authMechanism', J$.C(24976, J$.G(402825, J$.R(402817, 'options', options, false, false), 'authmechanism')) ? J$._() : J$.G(402841, J$.R(402833, 'options', options, false, false), 'authMechanism'), authMechanism, false, false);
                            if (J$.C(25096, J$.B(25146, '!=', J$.R(402857, 'authMechanism', authMechanism, false, false), J$.T(402865, null, 25, false)))) {
                                if (J$.C(25000, J$.C(24992, J$.M(402889, J$.R(402873, 'USERNAME_REQUIRED_MECHANISMS', USERNAME_REQUIRED_MECHANISMS, false, true), 'has', false)(J$.R(402881, 'authMechanism', authMechanism, false, false))) ? J$.C(24984, J$.U(25154, '!', J$.G(402905, J$.R(402897, 'parsed', parsed, false, false), 'auth'))) ? J$._() : J$.B(25162, '==', J$.G(402929, J$.G(402921, J$.R(402913, 'parsed', parsed, false, false), 'auth'), 'username'), J$.T(402937, null, 25, false)) : J$._())) {
                                    throw J$.F(402985, J$.R(402945, 'MongoParseError', MongoParseError, false, true), true)(J$.M(402977, J$.T(402953, 'Username required for mechanism `', 21, false), 'concat', false)(J$.R(402961, 'authMechanism', authMechanism, false, false), J$.T(402969, '`', 21, false)));
                                }
                                if (J$.C(25024, J$.B(25170, '===', J$.R(402993, 'authMechanism', authMechanism, false, false), J$.T(403001, 'GSSAPI', 21, false)))) {
                                    if (J$.C(25016, J$.C(25008, J$.B(25178, '!=', J$.R(403009, 'authSource', authSource, false, false), J$.T(403017, null, 25, false))) ? J$.B(25186, '!==', J$.R(403025, 'authSource', authSource, false, false), J$.T(403033, '$external', 21, false)) : J$._())) {
                                        throw J$.F(403105, J$.R(403041, 'MongoParseError', MongoParseError, false, true), true)(J$.M(403097, J$.M(403073, J$.T(403049, 'Invalid source `', 21, false), 'concat', false)(J$.R(403057, 'authSource', authSource, false, false), J$.T(403065, '` for mechanism `', 21, false)), 'concat', false)(J$.R(403081, 'authMechanism', authMechanism, false, false), J$.T(403089, '` specified.', 21, false)));
                                    }
                                    J$.P(403177, J$.R(403113, 'parsed', parsed, false, false), 'auth', J$.M(403169, J$.I(typeof Object === 'undefined' ? Object = J$.R(403121, 'Object', undefined, true, true) : Object = J$.R(403121, 'Object', Object, true, true)), 'assign', false)(J$.T(403129, {}, 11, false), J$.G(403145, J$.R(403137, 'parsed', parsed, false, false), 'auth'), J$.T(403161, { db: J$.T(403153, '$external', 21, false) }, 11, false)));
                                }
                                if (J$.C(25064, J$.B(25194, '===', J$.R(403185, 'authMechanism', authMechanism, false, false), J$.T(403193, 'MONGODB-X509', 21, false)))) {
                                    if (J$.C(25040, J$.C(25032, J$.G(403209, J$.R(403201, 'parsed', parsed, false, false), 'auth')) ? J$.B(25202, '!=', J$.G(403233, J$.G(403225, J$.R(403217, 'parsed', parsed, false, false), 'auth'), 'password'), J$.T(403241, null, 25, false)) : J$._())) {
                                        throw J$.F(403289, J$.R(403249, 'MongoParseError', MongoParseError, false, true), true)(J$.M(403281, J$.T(403257, 'Password not allowed for mechanism `', 21, false), 'concat', false)(J$.R(403265, 'authMechanism', authMechanism, false, false), J$.T(403273, '`', 21, false)));
                                    }
                                    if (J$.C(25056, J$.C(25048, J$.B(25210, '!=', J$.R(403297, 'authSource', authSource, false, false), J$.T(403305, null, 25, false))) ? J$.B(25218, '!==', J$.R(403313, 'authSource', authSource, false, false), J$.T(403321, '$external', 21, false)) : J$._())) {
                                        throw J$.F(403393, J$.R(403329, 'MongoParseError', MongoParseError, false, true), true)(J$.M(403385, J$.M(403361, J$.T(403337, 'Invalid source `', 21, false), 'concat', false)(J$.R(403345, 'authSource', authSource, false, false), J$.T(403353, '` for mechanism `', 21, false)), 'concat', false)(J$.R(403369, 'authMechanism', authMechanism, false, false), J$.T(403377, '` specified.', 21, false)));
                                    }
                                    J$.P(403465, J$.R(403401, 'parsed', parsed, false, false), 'auth', J$.M(403457, J$.I(typeof Object === 'undefined' ? Object = J$.R(403409, 'Object', undefined, true, true) : Object = J$.R(403409, 'Object', Object, true, true)), 'assign', false)(J$.T(403417, {}, 11, false), J$.G(403433, J$.R(403425, 'parsed', parsed, false, false), 'auth'), J$.T(403449, { db: J$.T(403441, '$external', 21, false) }, 11, false)));
                                }
                                if (J$.C(25088, J$.B(25226, '===', J$.R(403473, 'authMechanism', authMechanism, false, false), J$.T(403481, 'PLAIN', 21, false)))) {
                                    if (J$.C(25080, J$.C(25072, J$.G(403497, J$.R(403489, 'parsed', parsed, false, false), 'auth')) ? J$.B(25234, '==', J$.G(403521, J$.G(403513, J$.R(403505, 'parsed', parsed, false, false), 'auth'), 'db'), J$.T(403529, null, 25, false)) : J$._())) {
                                        J$.P(403601, J$.R(403537, 'parsed', parsed, false, false), 'auth', J$.M(403593, J$.I(typeof Object === 'undefined' ? Object = J$.R(403545, 'Object', undefined, true, true) : Object = J$.R(403545, 'Object', Object, true, true)), 'assign', false)(J$.T(403553, {}, 11, false), J$.G(403569, J$.R(403561, 'parsed', parsed, false, false), 'auth'), J$.T(403585, { db: J$.T(403577, '$external', 21, false) }, 11, false)));
                                    }
                                }
                            }
                            if (J$.C(25112, J$.C(25104, J$.G(403617, J$.R(403609, 'parsed', parsed, false, false), 'auth')) ? J$.B(25242, '==', J$.G(403641, J$.G(403633, J$.R(403625, 'parsed', parsed, false, false), 'auth'), 'db'), J$.T(403649, null, 25, false)) : J$._())) {
                                J$.P(403721, J$.R(403657, 'parsed', parsed, false, false), 'auth', J$.M(403713, J$.I(typeof Object === 'undefined' ? Object = J$.R(403665, 'Object', undefined, true, true) : Object = J$.R(403665, 'Object', Object, true, true)), 'assign', false)(J$.T(403673, {}, 11, false), J$.G(403689, J$.R(403681, 'parsed', parsed, false, false), 'auth'), J$.T(403705, { db: J$.T(403697, 'admin', 21, false) }, 11, false)));
                            }
                            return J$.Rt(403737, J$.R(403729, 'parsed', parsed, false, false));
                        } catch (J$e) {
                            J$.Ex(408865, J$e);
                        } finally {
                            if (J$.Fr(408873))
                                continue jalangiLabel16;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQueryString(query, options) {
                jalangiLabel17:
                    while (true) {
                        try {
                            J$.Fe(404209, arguments.callee, this, arguments);
                            arguments = J$.N(404217, 'arguments', arguments, true, false, false);
                            query = J$.N(404225, 'query', query, true, false, false);
                            options = J$.N(404233, 'options', options, true, false, false);
                            J$.N(404241, 'result', result, false, false, false);
                            J$.N(404249, 'parsedQueryString', parsedQueryString, false, false, false);
                            J$.N(404257, 'key', key, false, false, false);
                            J$.N(404265, 'value', value, false, false, false);
                            J$.N(404273, 'normalizedKey', normalizedKey, false, false, false);
                            J$.N(404281, 'parsedValue', parsedValue, false, false, false);
                            var result = J$.W(403801, 'result', J$.T(403793, {}, 11, false), result, false, false);
                            var parsedQueryString = J$.W(403833, 'parsedQueryString', J$.M(403825, J$.R(403809, 'qs', qs, false, true), 'parse', false)(J$.R(403817, 'query', query, false, false)), parsedQueryString, false, false);
                            J$.F(403857, J$.R(403841, 'checkTLSOptions', checkTLSOptions, false, true), false)(J$.R(403849, 'parsedQueryString', parsedQueryString, false, false));
                            for (var key in J$.H(404073, J$.R(403865, 'parsedQueryString', parsedQueryString, false, false))) {
                                J$.N(404081, 'key', key, false, true, false);
                                {
                                    {
                                        var value = J$.W(403897, 'value', J$.G(403889, J$.R(403873, 'parsedQueryString', parsedQueryString, false, false), J$.R(403881, 'key', key, false, false)), value, false, false);
                                        if (J$.C(25128, J$.C(25120, J$.B(25250, '===', J$.R(403905, 'value', value, false, false), J$.T(403913, '', 21, false))) ? J$._() : J$.B(25258, '==', J$.R(403921, 'value', value, false, false), J$.T(403929, null, 25, false)))) {
                                            throw J$.F(403953, J$.R(403937, 'MongoParseError', MongoParseError, false, true), true)(J$.T(403945, 'Incomplete key value pair for option', 21, false));
                                        }
                                        var normalizedKey = J$.W(403977, 'normalizedKey', J$.M(403969, J$.R(403961, 'key', key, false, false), 'toLowerCase', false)(), normalizedKey, false, false);
                                        var parsedValue = J$.W(404017, 'parsedValue', J$.F(404009, J$.R(403985, 'parseQueryStringItemValue', parseQueryStringItemValue, false, true), false)(J$.R(403993, 'normalizedKey', normalizedKey, false, false), J$.R(404001, 'value', value, false, false)), parsedValue, false, false);
                                        J$.F(404065, J$.R(404025, 'applyConnectionStringOption', applyConnectionStringOption, false, true), false)(J$.R(404033, 'result', result, false, false), J$.R(404041, 'normalizedKey', normalizedKey, false, false), J$.R(404049, 'parsedValue', parsedValue, false, false), J$.R(404057, 'options', options, false, false));
                                    }
                                }
                            }
                            if (J$.C(25144, J$.C(25136, J$.G(404097, J$.R(404089, 'result', result, false, false), 'wtimeout')) ? J$.G(404113, J$.R(404105, 'result', result, false, false), 'wtimeoutms') : J$._())) {
                                J$.B(25266, 'delete', J$.R(404121, 'result', result, false, false), 'wtimeout');
                                J$.M(404145, J$.I(typeof console === 'undefined' ? console = J$.R(404129, 'console', undefined, true, true) : console = J$.R(404129, 'console', console, true, true)), 'warn', false)(J$.T(404137, 'Unsupported option `wtimeout` specified', 21, false));
                            }
                            return J$.Rt(404201, J$.C(25152, J$.G(404177, J$.M(404169, J$.I(typeof Object === 'undefined' ? Object = J$.R(404153, 'Object', undefined, true, true) : Object = J$.R(404153, 'Object', Object, true, true)), 'keys', false)(J$.R(404161, 'result', result, false, false)), 'length')) ? J$.R(404185, 'result', result, false, false) : J$.T(404193, null, 25, false));
                        } catch (J$e) {
                            J$.Ex(408881, J$e);
                        } finally {
                            if (J$.Fr(408889))
                                continue jalangiLabel17;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function checkTLSOptions(queryString) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(404609, arguments.callee, this, arguments);
                            arguments = J$.N(404617, 'arguments', arguments, true, false, false);
                            queryString = J$.N(404625, 'queryString', queryString, true, false, false);
                            J$.N(404633, 'queryStringKeys', queryStringKeys, false, false, false);
                            J$.N(404641, 'tlsValue', tlsValue, false, false, false);
                            J$.N(404649, 'sslValue', sslValue, false, false, false);
                            var queryStringKeys = J$.W(404313, 'queryStringKeys', J$.M(404305, J$.I(typeof Object === 'undefined' ? Object = J$.R(404289, 'Object', undefined, true, true) : Object = J$.R(404289, 'Object', Object, true, true)), 'keys', false)(J$.R(404297, 'queryString', queryString, false, false)), queryStringKeys, false, false);
                            if (J$.C(25176, J$.C(25168, J$.B(25282, '!==', J$.M(404337, J$.R(404321, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(404329, 'tlsInsecure', 21, false)), J$.U(25274, '-', J$.T(404345, 1, 22, false)))) ? J$.C(25160, J$.B(25298, '!==', J$.M(404369, J$.R(404353, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(404361, 'tlsAllowInvalidCertificates', 21, false)), J$.U(25290, '-', J$.T(404377, 1, 22, false)))) ? J$._() : J$.B(25314, '!==', J$.M(404401, J$.R(404385, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.T(404393, 'tlsAllowInvalidHostnames', 21, false)), J$.U(25306, '-', J$.T(404409, 1, 22, false))) : J$._())) {
                                throw J$.F(404433, J$.R(404417, 'MongoParseError', MongoParseError, false, true), true)(J$.T(404425, 'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.', 21, false));
                            }
                            var tlsValue = J$.W(404481, 'tlsValue', J$.F(404473, J$.R(404441, 'assertTlsOptionsAreEqual', assertTlsOptionsAreEqual, false, true), false)(J$.T(404449, 'tls', 21, false), J$.R(404457, 'queryString', queryString, false, false), J$.R(404465, 'queryStringKeys', queryStringKeys, false, false)), tlsValue, false, false);
                            var sslValue = J$.W(404529, 'sslValue', J$.F(404521, J$.R(404489, 'assertTlsOptionsAreEqual', assertTlsOptionsAreEqual, false, true), false)(J$.T(404497, 'ssl', 21, false), J$.R(404505, 'queryString', queryString, false, false), J$.R(404513, 'queryStringKeys', queryStringKeys, false, false)), sslValue, false, false);
                            if (J$.C(25200, J$.C(25184, J$.B(25322, '!=', J$.R(404537, 'tlsValue', tlsValue, false, false), J$.T(404545, null, 25, false))) ? J$.B(25330, '!=', J$.R(404553, 'sslValue', sslValue, false, false), J$.T(404561, null, 25, false)) : J$._())) {
                                if (J$.C(25192, J$.B(25338, '!==', J$.R(404569, 'tlsValue', tlsValue, false, false), J$.R(404577, 'sslValue', sslValue, false, false)))) {
                                    throw J$.F(404601, J$.R(404585, 'MongoParseError', MongoParseError, false, true), true)(J$.T(404593, 'All values of `tls` and `ssl` must be the same.', 21, false));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(408897, J$e);
                        } finally {
                            if (J$.Fr(408905))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {
                jalangiLabel20:
                    while (true) {
                        try {
                            J$.Fe(405033, arguments.callee, this, arguments);
                            arguments = J$.N(405041, 'arguments', arguments, true, false, false);
                            optionName = J$.N(405049, 'optionName', optionName, true, false, false);
                            queryString = J$.N(405057, 'queryString', queryString, true, false, false);
                            queryStringKeys = J$.N(405065, 'queryStringKeys', queryStringKeys, true, false, false);
                            J$.N(405073, 'queryStringHasTLSOption', queryStringHasTLSOption, false, false, false);
                            J$.N(405081, 'optionValue', optionValue, false, false, false);
                            J$.N(405089, 'firstValue', firstValue, false, false, false);
                            var queryStringHasTLSOption = J$.W(404689, 'queryStringHasTLSOption', J$.B(25354, '!==', J$.M(404673, J$.R(404657, 'queryStringKeys', queryStringKeys, false, false), 'indexOf', false)(J$.R(404665, 'optionName', optionName, false, false)), J$.U(25346, '-', J$.T(404681, 1, 22, false))), queryStringHasTLSOption, false, false);
                            var optionValue;
                            if (J$.C(25208, J$.M(404729, J$.I(typeof Array === 'undefined' ? Array = J$.R(404697, 'Array', undefined, true, true) : Array = J$.R(404697, 'Array', Array, true, true)), 'isArray', false)(J$.G(404721, J$.R(404705, 'queryString', queryString, false, false), J$.R(404713, 'optionName', optionName, false, false))))) {
                                optionValue = J$.W(404777, 'optionValue', J$.G(404769, J$.G(404753, J$.R(404737, 'queryString', queryString, false, false), J$.R(404745, 'optionName', optionName, false, false)), J$.T(404761, 0, 22, false)), optionValue, false, false);
                            } else {
                                optionValue = J$.W(404809, 'optionValue', J$.G(404801, J$.R(404785, 'queryString', queryString, false, false), J$.R(404793, 'optionName', optionName, false, false)), optionValue, false, false);
                            }
                            if (J$.C(25232, J$.R(404817, 'queryStringHasTLSOption', queryStringHasTLSOption, false, false))) {
                                if (J$.C(25224, J$.M(404857, J$.I(typeof Array === 'undefined' ? Array = J$.R(404825, 'Array', undefined, true, true) : Array = J$.R(404825, 'Array', Array, true, true)), 'isArray', false)(J$.G(404849, J$.R(404833, 'queryString', queryString, false, false), J$.R(404841, 'optionName', optionName, false, false))))) {
                                    var firstValue = J$.W(404905, 'firstValue', J$.G(404897, J$.G(404881, J$.R(404865, 'queryString', queryString, false, false), J$.R(404873, 'optionName', optionName, false, false)), J$.T(404889, 0, 22, false)), firstValue, false, false);
                                    J$.M(405009, J$.G(404929, J$.R(404913, 'queryString', queryString, false, false), J$.R(404921, 'optionName', optionName, false, false)), 'forEach', false)(J$.T(405001, function (tlsValue) {
                                        jalangiLabel19:
                                            while (true) {
                                                try {
                                                    J$.Fe(404977, arguments.callee, this, arguments);
                                                    arguments = J$.N(404985, 'arguments', arguments, true, false, false);
                                                    tlsValue = J$.N(404993, 'tlsValue', tlsValue, true, false, false);
                                                    if (J$.C(25216, J$.B(25362, '!==', J$.R(404937, 'tlsValue', tlsValue, false, false), J$.R(404945, 'firstValue', firstValue, false, false)))) {
                                                        throw J$.F(404969, J$.R(404953, 'MongoParseError', MongoParseError, false, true), true)(J$.T(404961, 'All values of ${optionName} must be the same.', 21, false));
                                                    }
                                                } catch (J$e) {
                                                    J$.Ex(408913, J$e);
                                                } finally {
                                                    if (J$.Fr(408921))
                                                        continue jalangiLabel19;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false));
                                }
                            }
                            return J$.Rt(405025, J$.R(405017, 'optionValue', optionValue, false, false));
                        } catch (J$e) {
                            J$.Ex(408929, J$e);
                        } finally {
                            if (J$.Fr(408937))
                                continue jalangiLabel20;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseConnectionString(uri, options, callback) {
                jalangiLabel23:
                    while (true) {
                        try {
                            J$.Fe(408169, arguments.callee, this, arguments);
                            arguments = J$.N(408177, 'arguments', arguments, true, false, false);
                            uri = J$.N(408185, 'uri', uri, true, false, false);
                            options = J$.N(408193, 'options', options, true, false, false);
                            callback = J$.N(408201, 'callback', callback, true, false, false);
                            J$.N(408209, 'cap', cap, false, false, false);
                            J$.N(408217, 'protocol', protocol, false, false, false);
                            J$.N(408225, 'dbAndQuery', dbAndQuery, false, false, false);
                            J$.N(408233, 'db', db, false, false, false);
                            J$.N(408241, 'query', query, false, false, false);
                            J$.N(408249, 'parsedOptions', parsedOptions, false, false, false);
                            J$.N(408257, 'auth', auth, false, false, false);
                            J$.N(408265, 'authorityParts', authorityParts, false, false, false);
                            J$.N(408273, 'authParts', authParts, false, false, false);
                            J$.N(408281, 'hostParsingError', hostParsingError, false, false, false);
                            J$.N(408289, 'hosts', hosts, false, false, false);
                            J$.N(408297, 'result', result, false, false, false);
                            if (J$.C(25240, J$.B(25378, '===', J$.U(25370, 'typeof', J$.R(405161, 'options', options, false, false)), J$.T(405169, 'function', 21, false))))
                                callback = J$.W(405185, 'callback', J$.R(405177, 'options', options, false, false), callback, false, false), options = J$.W(405201, 'options', J$.T(405193, {}, 11, false), options, false, false);
                            options = J$.W(405257, 'options', J$.M(405249, J$.I(typeof Object === 'undefined' ? Object = J$.R(405209, 'Object', undefined, true, true) : Object = J$.R(405209, 'Object', Object, true, true)), 'assign', false)(J$.T(405217, {}, 11, false), J$.T(405233, { caseTranslate: J$.T(405225, true, 23, false) }, 11, false), J$.R(405241, 'options', options, false, false)), options, false, false);
                            try {
                                J$.M(405281, J$.R(405265, 'URL', URL, false, true), 'parse', false)(J$.R(405273, 'uri', uri, false, false));
                            } catch (e) {
                                J$.N(405337, 'e', e, false, false, true);
                                return J$.Rt(405329, J$.F(405321, J$.R(405289, 'callback', callback, false, false), false)(J$.F(405313, J$.R(405297, 'MongoParseError', MongoParseError, false, true), true)(J$.T(405305, 'URI malformed, cannot be parsed', 21, false))));
                            }
                            var cap = J$.W(405369, 'cap', J$.M(405361, J$.R(405345, 'uri', uri, false, false), 'match', false)(J$.R(405353, 'HOSTS_RX', HOSTS_RX, false, true)), cap, false, false);
                            if (J$.C(25248, J$.U(25386, '!', J$.R(405377, 'cap', cap, false, false)))) {
                                return J$.Rt(405425, J$.F(405417, J$.R(405385, 'callback', callback, false, false), false)(J$.F(405409, J$.R(405393, 'MongoParseError', MongoParseError, false, true), true)(J$.T(405401, 'Invalid connection string', 21, false))));
                            }
                            var protocol = J$.W(405457, 'protocol', J$.G(405449, J$.R(405433, 'cap', cap, false, false), J$.T(405441, 1, 22, false)), protocol, false, false);
                            if (J$.C(25256, J$.B(25402, '===', J$.M(405481, J$.R(405465, 'SUPPORTED_PROTOCOLS', SUPPORTED_PROTOCOLS, false, true), 'indexOf', false)(J$.R(405473, 'protocol', protocol, false, false)), J$.U(25394, '-', J$.T(405489, 1, 22, false))))) {
                                return J$.Rt(405537, J$.F(405529, J$.R(405497, 'callback', callback, false, false), false)(J$.F(405521, J$.R(405505, 'MongoParseError', MongoParseError, false, true), true)(J$.T(405513, 'Invalid protocol provided', 21, false))));
                            }
                            if (J$.C(25264, J$.B(25410, '===', J$.R(405545, 'protocol', protocol, false, false), J$.R(405553, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true)))) {
                                return J$.Rt(405601, J$.F(405593, J$.R(405561, 'parseSrvConnectionString', parseSrvConnectionString, false, true), false)(J$.R(405569, 'uri', uri, false, false), J$.R(405577, 'options', options, false, false), J$.R(405585, 'callback', callback, false, false)));
                            }
                            var dbAndQuery = J$.W(405649, 'dbAndQuery', J$.M(405641, J$.G(405625, J$.R(405609, 'cap', cap, false, false), J$.T(405617, 4, 22, false)), 'split', false)(J$.T(405633, '?', 21, false)), dbAndQuery, false, false);
                            var db = J$.W(405713, 'db', J$.C(25272, J$.B(25418, '>', J$.G(405665, J$.R(405657, 'dbAndQuery', dbAndQuery, false, false), 'length'), J$.T(405673, 0, 22, false))) ? J$.G(405697, J$.R(405681, 'dbAndQuery', dbAndQuery, false, false), J$.T(405689, 0, 22, false)) : J$.T(405705, null, 25, false), db, false, false);
                            var query = J$.W(405777, 'query', J$.C(25280, J$.B(25426, '>', J$.G(405729, J$.R(405721, 'dbAndQuery', dbAndQuery, false, false), 'length'), J$.T(405737, 1, 22, false))) ? J$.G(405761, J$.R(405745, 'dbAndQuery', dbAndQuery, false, false), J$.T(405753, 1, 22, false)) : J$.T(405769, null, 25, false), query, false, false);
                            var parsedOptions;
                            try {
                                parsedOptions = J$.W(405817, 'parsedOptions', J$.F(405809, J$.R(405785, 'parseQueryString', parseQueryString, false, true), false)(J$.R(405793, 'query', query, false, false), J$.R(405801, 'options', options, false, false)), parsedOptions, false, false);
                            } catch (parseError) {
                                J$.N(405857, 'parseError', parseError, false, false, true);
                                return J$.Rt(405849, J$.F(405841, J$.R(405825, 'callback', callback, false, false), false)(J$.R(405833, 'parseError', parseError, false, false)));
                            }
                            parsedOptions = J$.W(405905, 'parsedOptions', J$.M(405897, J$.I(typeof Object === 'undefined' ? Object = J$.R(405865, 'Object', undefined, true, true) : Object = J$.R(405865, 'Object', Object, true, true)), 'assign', false)(J$.T(405873, {}, 11, false), J$.R(405881, 'parsedOptions', parsedOptions, false, false), J$.R(405889, 'options', options, false, false)), parsedOptions, false, false);
                            var auth = J$.W(405993, 'auth', J$.T(405985, {
                                username: J$.T(405913, null, 25, false),
                                password: J$.T(405921, null, 25, false),
                                db: J$.C(25296, J$.C(25288, J$.R(405929, 'db', db, false, false)) ? J$.B(25434, '!==', J$.R(405937, 'db', db, false, false), J$.T(405945, '', 21, false)) : J$._()) ? J$.M(405969, J$.R(405953, 'qs', qs, false, true), 'unescape', false)(J$.R(405961, 'db', db, false, false)) : J$.T(405977, null, 25, false)
                            }, 11, false), auth, false, false);
                            if (J$.C(25352, J$.G(406009, J$.R(406001, 'parsedOptions', parsedOptions, false, false), 'auth'))) {
                                if (J$.C(25304, J$.G(406033, J$.G(406025, J$.R(406017, 'parsedOptions', parsedOptions, false, false), 'auth'), 'username')))
                                    J$.P(406073, J$.R(406041, 'auth', auth, false, false), 'username', J$.G(406065, J$.G(406057, J$.R(406049, 'parsedOptions', parsedOptions, false, false), 'auth'), 'username'));
                                if (J$.C(25312, J$.G(406097, J$.G(406089, J$.R(406081, 'parsedOptions', parsedOptions, false, false), 'auth'), 'user')))
                                    J$.P(406137, J$.R(406105, 'auth', auth, false, false), 'username', J$.G(406129, J$.G(406121, J$.R(406113, 'parsedOptions', parsedOptions, false, false), 'auth'), 'user'));
                                if (J$.C(25320, J$.G(406161, J$.G(406153, J$.R(406145, 'parsedOptions', parsedOptions, false, false), 'auth'), 'password')))
                                    J$.P(406201, J$.R(406169, 'auth', auth, false, false), 'password', J$.G(406193, J$.G(406185, J$.R(406177, 'parsedOptions', parsedOptions, false, false), 'auth'), 'password'));
                            } else {
                                if (J$.C(25328, J$.G(406217, J$.R(406209, 'parsedOptions', parsedOptions, false, false), 'username')))
                                    J$.P(406249, J$.R(406225, 'auth', auth, false, false), 'username', J$.G(406241, J$.R(406233, 'parsedOptions', parsedOptions, false, false), 'username'));
                                if (J$.C(25336, J$.G(406265, J$.R(406257, 'parsedOptions', parsedOptions, false, false), 'user')))
                                    J$.P(406297, J$.R(406273, 'auth', auth, false, false), 'username', J$.G(406289, J$.R(406281, 'parsedOptions', parsedOptions, false, false), 'user'));
                                if (J$.C(25344, J$.G(406313, J$.R(406305, 'parsedOptions', parsedOptions, false, false), 'password')))
                                    J$.P(406345, J$.R(406321, 'auth', auth, false, false), 'password', J$.G(406337, J$.R(406329, 'parsedOptions', parsedOptions, false, false), 'password'));
                            }
                            if (J$.C(25360, J$.B(25450, '!==', J$.M(406417, J$.G(406401, J$.M(406385, J$.G(406369, J$.R(406353, 'cap', cap, false, false), J$.T(406361, 4, 22, false)), 'split', false)(J$.T(406377, '?', 21, false)), J$.T(406393, 0, 22, false)), 'indexOf', false)(J$.T(406409, '@', 21, false)), J$.U(25442, '-', J$.T(406425, 1, 22, false))))) {
                                return J$.Rt(406473, J$.F(406465, J$.R(406433, 'callback', callback, false, false), false)(J$.F(406457, J$.R(406441, 'MongoParseError', MongoParseError, false, true), true)(J$.T(406449, 'Unescaped slash in userinfo section', 21, false))));
                            }
                            var authorityParts = J$.W(406521, 'authorityParts', J$.M(406513, J$.G(406497, J$.R(406481, 'cap', cap, false, false), J$.T(406489, 3, 22, false)), 'split', false)(J$.T(406505, '@', 21, false)), authorityParts, false, false);
                            if (J$.C(25368, J$.B(25458, '>', J$.G(406537, J$.R(406529, 'authorityParts', authorityParts, false, false), 'length'), J$.T(406545, 2, 22, false)))) {
                                return J$.Rt(406593, J$.F(406585, J$.R(406553, 'callback', callback, false, false), false)(J$.F(406577, J$.R(406561, 'MongoParseError', MongoParseError, false, true), true)(J$.T(406569, 'Unescaped at-sign in authority section', 21, false))));
                            }
                            if (J$.C(25408, J$.B(25466, '>', J$.G(406609, J$.R(406601, 'authorityParts', authorityParts, false, false), 'length'), J$.T(406617, 1, 22, false)))) {
                                var authParts = J$.W(406657, 'authParts', J$.M(406649, J$.M(406633, J$.R(406625, 'authorityParts', authorityParts, false, false), 'shift', false)(), 'split', false)(J$.T(406641, ':', 21, false)), authParts, false, false);
                                if (J$.C(25376, J$.B(25474, '>', J$.G(406673, J$.R(406665, 'authParts', authParts, false, false), 'length'), J$.T(406681, 2, 22, false)))) {
                                    return J$.Rt(406729, J$.F(406721, J$.R(406689, 'callback', callback, false, false), false)(J$.F(406713, J$.R(406697, 'MongoParseError', MongoParseError, false, true), true)(J$.T(406705, 'Unescaped colon in authority section', 21, false))));
                                }
                                if (J$.C(25384, J$.U(25482, '!', J$.G(406745, J$.R(406737, 'auth', auth, false, false), 'username'))))
                                    J$.P(406801, J$.R(406753, 'auth', auth, false, false), 'username', J$.M(406793, J$.R(406761, 'qs', qs, false, true), 'unescape', false)(J$.G(406785, J$.R(406769, 'authParts', authParts, false, false), J$.T(406777, 0, 22, false))));
                                if (J$.C(25400, J$.U(25490, '!', J$.G(406817, J$.R(406809, 'auth', auth, false, false), 'password'))))
                                    J$.P(406905, J$.R(406825, 'auth', auth, false, false), 'password', J$.C(25392, J$.G(406849, J$.R(406833, 'authParts', authParts, false, false), J$.T(406841, 1, 22, false))) ? J$.M(406889, J$.R(406857, 'qs', qs, false, true), 'unescape', false)(J$.G(406881, J$.R(406865, 'authParts', authParts, false, false), J$.T(406873, 1, 22, false))) : J$.T(406897, null, 25, false));
                            }
                            var hostParsingError = J$.W(406921, 'hostParsingError', J$.T(406913, null, 25, false), hostParsingError, false, false);
                            var hosts = J$.W(407649, 'hosts', J$.M(407641, J$.M(407585, J$.M(406953, J$.M(406937, J$.R(406929, 'authorityParts', authorityParts, false, false), 'shift', false)(), 'split', false)(J$.T(406945, ',', 21, false)), 'map', false)(J$.T(407577, function (host) {
                                jalangiLabel21:
                                    while (true) {
                                        try {
                                            J$.Fe(407537, arguments.callee, this, arguments);
                                            arguments = J$.N(407545, 'arguments', arguments, true, false, false);
                                            host = J$.N(407553, 'host', host, true, false, false);
                                            J$.N(407561, 'parsedHost', parsedHost, false, false, false);
                                            J$.N(407569, 'result', result, false, false, false);
                                            var parsedHost = J$.W(407001, 'parsedHost', J$.M(406993, J$.R(406961, 'URL', URL, false, true), 'parse', false)(J$.M(406985, J$.T(406969, 'mongodb://', 21, false), 'concat', false)(J$.R(406977, 'host', host, false, false))), parsedHost, false, false);
                                            if (J$.C(25416, J$.B(25498, '===', J$.G(407017, J$.R(407009, 'parsedHost', parsedHost, false, false), 'path'), J$.T(407025, '/:', 21, false)))) {
                                                hostParsingError = J$.W(407057, 'hostParsingError', J$.F(407049, J$.R(407033, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407041, 'Double colon in host identifier', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(407073, J$.T(407065, null, 25, false));
                                            }
                                            if (J$.C(25424, J$.M(407097, J$.R(407081, 'host', host, false, false), 'match', false)(J$.T(407089, /\.sock/, 14, false)))) {
                                                J$.P(407137, J$.R(407105, 'parsedHost', parsedHost, false, false), 'hostname', J$.M(407129, J$.R(407113, 'qs', qs, false, true), 'unescape', false)(J$.R(407121, 'host', host, false, false)));
                                                J$.P(407161, J$.R(407145, 'parsedHost', parsedHost, false, false), 'port', J$.T(407153, null, 25, false));
                                            }
                                            if (J$.C(25432, J$.M(407193, J$.I(typeof Number === 'undefined' ? Number = J$.R(407169, 'Number', undefined, true, true) : Number = J$.R(407169, 'Number', Number, true, true)), 'isNaN', false)(J$.G(407185, J$.R(407177, 'parsedHost', parsedHost, false, false), 'port')))) {
                                                hostParsingError = J$.W(407225, 'hostParsingError', J$.F(407217, J$.R(407201, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407209, 'Invalid port (non-numeric string)', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(407233, undefined);
                                            }
                                            var result = J$.W(407321, 'result', J$.T(407313, {
                                                host: J$.G(407249, J$.R(407241, 'parsedHost', parsedHost, false, false), 'hostname'),
                                                port: J$.C(25440, J$.G(407265, J$.R(407257, 'parsedHost', parsedHost, false, false), 'port')) ? J$.F(407297, J$.I(typeof parseInt === 'undefined' ? parseInt = J$.R(407273, 'parseInt', undefined, true, true) : parseInt = J$.R(407273, 'parseInt', parseInt, true, true)), false)(J$.G(407289, J$.R(407281, 'parsedHost', parsedHost, false, false), 'port')) : J$.T(407305, 27017, 22, false)
                                            }, 11, false), result, false, false);
                                            if (J$.C(25448, J$.B(25506, '===', J$.G(407337, J$.R(407329, 'result', result, false, false), 'port'), J$.T(407345, 0, 22, false)))) {
                                                hostParsingError = J$.W(407377, 'hostParsingError', J$.F(407369, J$.R(407353, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407361, 'Invalid port (zero) with hostname', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(407385, undefined);
                                            }
                                            if (J$.C(25456, J$.B(25514, '>', J$.G(407401, J$.R(407393, 'result', result, false, false), 'port'), J$.T(407409, 65535, 22, false)))) {
                                                hostParsingError = J$.W(407441, 'hostParsingError', J$.F(407433, J$.R(407417, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407425, 'Invalid port (larger than 65535) with hostname', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(407449, undefined);
                                            }
                                            if (J$.C(25464, J$.B(25522, '<', J$.G(407465, J$.R(407457, 'result', result, false, false), 'port'), J$.T(407473, 0, 22, false)))) {
                                                hostParsingError = J$.W(407505, 'hostParsingError', J$.F(407497, J$.R(407481, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407489, 'Invalid port (negative number)', 21, false)), hostParsingError, false, false);
                                                return J$.Rt(407513, undefined);
                                            }
                                            return J$.Rt(407529, J$.R(407521, 'result', result, false, false));
                                        } catch (J$e) {
                                            J$.Ex(408945, J$e);
                                        } finally {
                                            if (J$.Fr(408953))
                                                continue jalangiLabel21;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), 'filter', false)(J$.T(407633, function (host) {
                                jalangiLabel22:
                                    while (true) {
                                        try {
                                            J$.Fe(407609, arguments.callee, this, arguments);
                                            arguments = J$.N(407617, 'arguments', arguments, true, false, false);
                                            host = J$.N(407625, 'host', host, true, false, false);
                                            return J$.Rt(407601, J$.U(25538, '!', J$.U(25530, '!', J$.R(407593, 'host', host, false, false))));
                                        } catch (J$e) {
                                            J$.Ex(408961, J$e);
                                        } finally {
                                            if (J$.Fr(408969))
                                                continue jalangiLabel22;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false)), hosts, false, false);
                            if (J$.C(25472, J$.R(407657, 'hostParsingError', hostParsingError, false, false))) {
                                return J$.Rt(407689, J$.F(407681, J$.R(407665, 'callback', callback, false, false), false)(J$.R(407673, 'hostParsingError', hostParsingError, false, false)));
                            }
                            if (J$.C(25496, J$.C(25488, J$.C(25480, J$.B(25546, '===', J$.G(407705, J$.R(407697, 'hosts', hosts, false, false), 'length'), J$.T(407713, 0, 22, false))) ? J$._() : J$.B(25554, '===', J$.G(407745, J$.G(407737, J$.R(407721, 'hosts', hosts, false, false), J$.T(407729, 0, 22, false)), 'host'), J$.T(407753, '', 21, false))) ? J$._() : J$.B(25562, '===', J$.G(407785, J$.G(407777, J$.R(407761, 'hosts', hosts, false, false), J$.T(407769, 0, 22, false)), 'host'), J$.T(407793, null, 25, false)))) {
                                return J$.Rt(407841, J$.F(407833, J$.R(407801, 'callback', callback, false, false), false)(J$.F(407825, J$.R(407809, 'MongoParseError', MongoParseError, false, true), true)(J$.T(407817, 'No hostname or hostnames provided in connection string', 21, false))));
                            }
                            var result = J$.W(407961, 'result', J$.T(407953, {
                                hosts: J$.R(407849, 'hosts', hosts, false, false),
                                auth: J$.C(25512, J$.C(25504, J$.G(407865, J$.R(407857, 'auth', auth, false, false), 'db')) ? J$._() : J$.G(407881, J$.R(407873, 'auth', auth, false, false), 'username')) ? J$.R(407889, 'auth', auth, false, false) : J$.T(407897, null, 25, false),
                                options: J$.C(25520, J$.G(407929, J$.M(407921, J$.I(typeof Object === 'undefined' ? Object = J$.R(407905, 'Object', undefined, true, true) : Object = J$.R(407905, 'Object', Object, true, true)), 'keys', false)(J$.R(407913, 'parsedOptions', parsedOptions, false, false)), 'length')) ? J$.R(407937, 'parsedOptions', parsedOptions, false, false) : J$.T(407945, null, 25, false)
                            }, 11, false), result, false, false);
                            if (J$.C(25536, J$.C(25528, J$.G(407977, J$.R(407969, 'result', result, false, false), 'auth')) ? J$.G(408001, J$.G(407993, J$.R(407985, 'result', result, false, false), 'auth'), 'db') : J$._())) {
                                J$.P(408041, J$.R(408009, 'result', result, false, false), 'defaultDatabase', J$.G(408033, J$.G(408025, J$.R(408017, 'result', result, false, false), 'auth'), 'db'));
                            } else {
                                J$.P(408065, J$.R(408049, 'result', result, false, false), 'defaultDatabase', J$.T(408057, 'test', 21, false));
                            }
                            try {
                                J$.F(408089, J$.R(408073, 'applyAuthExpectations', applyAuthExpectations, false, true), false)(J$.R(408081, 'result', result, false, false));
                            } catch (authError) {
                                J$.N(408129, 'authError', authError, false, false, true);
                                return J$.Rt(408121, J$.F(408113, J$.R(408097, 'callback', callback, false, false), false)(J$.R(408105, 'authError', authError, false, false)));
                            }
                            J$.F(408161, J$.R(408137, 'callback', callback, false, false), false)(J$.T(408145, null, 25, false), J$.R(408153, 'result', result, false, false));
                        } catch (J$e) {
                            J$.Ex(408977, J$e);
                        } finally {
                            if (J$.Fr(408985))
                                continue jalangiLabel23;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(408337, 'URL', URL, false, false, false);
            J$.N(408345, 'qs', qs, false, false, false);
            J$.N(408353, 'dns', dns, false, false, false);
            J$.N(408361, 'MongoParseError', MongoParseError, false, false, false);
            J$.N(408369, 'ReadPreference', ReadPreference, false, false, false);
            J$.N(408377, 'HOSTS_RX', HOSTS_RX, false, false, false);
            matchesParentDomain = J$.N(408393, 'matchesParentDomain', J$.T(408385, matchesParentDomain, 12, false), true, false, false);
            parseSrvConnectionString = J$.N(408409, 'parseSrvConnectionString', J$.T(408401, parseSrvConnectionString, 12, false), true, false, false);
            parseQueryStringItemValue = J$.N(408425, 'parseQueryStringItemValue', J$.T(408417, parseQueryStringItemValue, 12, false), true, false, false);
            J$.N(408433, 'BOOLEAN_OPTIONS', BOOLEAN_OPTIONS, false, false, false);
            J$.N(408441, 'STRING_OPTIONS', STRING_OPTIONS, false, false, false);
            J$.N(408449, 'AUTH_MECHANISMS', AUTH_MECHANISMS, false, false, false);
            J$.N(408457, 'CASE_TRANSLATION', CASE_TRANSLATION, false, false, false);
            applyConnectionStringOption = J$.N(408473, 'applyConnectionStringOption', J$.T(408465, applyConnectionStringOption, 12, false), true, false, false);
            J$.N(408481, 'USERNAME_REQUIRED_MECHANISMS', USERNAME_REQUIRED_MECHANISMS, false, false, false);
            splitArrayOfMultipleReadPreferenceTags = J$.N(408497, 'splitArrayOfMultipleReadPreferenceTags', J$.T(408489, splitArrayOfMultipleReadPreferenceTags, 12, false), true, false, false);
            applyAuthExpectations = J$.N(408513, 'applyAuthExpectations', J$.T(408505, applyAuthExpectations, 12, false), true, false, false);
            parseQueryString = J$.N(408529, 'parseQueryString', J$.T(408521, parseQueryString, 12, false), true, false, false);
            checkTLSOptions = J$.N(408545, 'checkTLSOptions', J$.T(408537, checkTLSOptions, 12, false), true, false, false);
            assertTlsOptionsAreEqual = J$.N(408561, 'assertTlsOptionsAreEqual', J$.T(408553, assertTlsOptionsAreEqual, 12, false), true, false, false);
            J$.N(408569, 'PROTOCOL_MONGODB', PROTOCOL_MONGODB, false, false, false);
            J$.N(408577, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, false, false);
            J$.N(408585, 'SUPPORTED_PROTOCOLS', SUPPORTED_PROTOCOLS, false, false, false);
            parseConnectionString = J$.N(408601, 'parseConnectionString', J$.T(408593, parseConnectionString, 12, false), true, false, false);
            J$.T(397289, 'use strict', 21, false);
            var URL = J$.W(397321, 'URL', J$.F(397313, J$.I(typeof require === 'undefined' ? require = J$.R(397297, 'require', undefined, true, true) : require = J$.R(397297, 'require', require, true, true)), false)(J$.T(397305, 'url', 21, false)), URL, false, true);
            var qs = J$.W(397353, 'qs', J$.F(397345, J$.I(typeof require === 'undefined' ? require = J$.R(397329, 'require', undefined, true, true) : require = J$.R(397329, 'require', require, true, true)), false)(J$.T(397337, 'querystring', 21, false)), qs, false, true);
            var dns = J$.W(397385, 'dns', J$.F(397377, J$.I(typeof require === 'undefined' ? require = J$.R(397361, 'require', undefined, true, true) : require = J$.R(397361, 'require', require, true, true)), false)(J$.T(397369, 'dns', 21, false)), dns, false, true);
            var MongoParseError = J$.W(397425, 'MongoParseError', J$.G(397417, J$.F(397409, J$.I(typeof require === 'undefined' ? require = J$.R(397393, 'require', undefined, true, true) : require = J$.R(397393, 'require', require, true, true)), false)(J$.T(397401, './error', 21, false)), 'MongoParseError'), MongoParseError, false, true);
            var ReadPreference = J$.W(397457, 'ReadPreference', J$.F(397449, J$.I(typeof require === 'undefined' ? require = J$.R(397433, 'require', undefined, true, true) : require = J$.R(397433, 'require', require, true, true)), false)(J$.T(397441, './topologies/read_preference', 21, false)), ReadPreference, false, true);
            var HOSTS_RX = J$.W(397473, 'HOSTS_RX', J$.T(397465, /(mongodb(?:\+srv|)):\/\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\/|)(.*)/, 14, false), HOSTS_RX, false, true);
            var BOOLEAN_OPTIONS = J$.W(400529, 'BOOLEAN_OPTIONS', J$.F(400521, J$.I(typeof Set === 'undefined' ? Set = J$.R(400449, 'Set', undefined, true, true) : Set = J$.R(400449, 'Set', Set, true, true)), true)(J$.T(400513, [
                J$.T(400457, 'slaveok', 21, false),
                J$.T(400465, 'slave_ok', 21, false),
                J$.T(400473, 'sslvalidate', 21, false),
                J$.T(400481, 'fsync', 21, false),
                J$.T(400489, 'safe', 21, false),
                J$.T(400497, 'retrywrites', 21, false),
                J$.T(400505, 'j', 21, false)
            ], 10, false)), BOOLEAN_OPTIONS, false, true);
            var STRING_OPTIONS = J$.W(400577, 'STRING_OPTIONS', J$.F(400569, J$.I(typeof Set === 'undefined' ? Set = J$.R(400537, 'Set', undefined, true, true) : Set = J$.R(400537, 'Set', Set, true, true)), true)(J$.T(400561, [
                J$.T(400545, 'authsource', 21, false),
                J$.T(400553, 'replicaset', 21, false)
            ], 10, false)), STRING_OPTIONS, false, true);
            var AUTH_MECHANISMS = J$.W(400665, 'AUTH_MECHANISMS', J$.F(400657, J$.I(typeof Set === 'undefined' ? Set = J$.R(400585, 'Set', undefined, true, true) : Set = J$.R(400585, 'Set', Set, true, true)), true)(J$.T(400649, [
                J$.T(400593, 'GSSAPI', 21, false),
                J$.T(400601, 'MONGODB-X509', 21, false),
                J$.T(400609, 'MONGODB-CR', 21, false),
                J$.T(400617, 'DEFAULT', 21, false),
                J$.T(400625, 'SCRAM-SHA-1', 21, false),
                J$.T(400633, 'SCRAM-SHA-256', 21, false),
                J$.T(400641, 'PLAIN', 21, false)
            ], 10, false)), AUTH_MECHANISMS, false, true);
            var CASE_TRANSLATION = J$.W(400945, 'CASE_TRANSLATION', J$.T(400937, {
                replicaset: J$.T(400673, 'replicaSet', 21, false),
                connecttimeoutms: J$.T(400681, 'connectTimeoutMS', 21, false),
                sockettimeoutms: J$.T(400689, 'socketTimeoutMS', 21, false),
                maxpoolsize: J$.T(400697, 'maxPoolSize', 21, false),
                minpoolsize: J$.T(400705, 'minPoolSize', 21, false),
                maxidletimems: J$.T(400713, 'maxIdleTimeMS', 21, false),
                waitqueuemultiple: J$.T(400721, 'waitQueueMultiple', 21, false),
                waitqueuetimeoutms: J$.T(400729, 'waitQueueTimeoutMS', 21, false),
                wtimeoutms: J$.T(400737, 'wtimeoutMS', 21, false),
                readconcern: J$.T(400745, 'readConcern', 21, false),
                readconcernlevel: J$.T(400753, 'readConcernLevel', 21, false),
                readpreference: J$.T(400761, 'readPreference', 21, false),
                maxstalenessseconds: J$.T(400769, 'maxStalenessSeconds', 21, false),
                readpreferencetags: J$.T(400777, 'readPreferenceTags', 21, false),
                authsource: J$.T(400785, 'authSource', 21, false),
                authmechanism: J$.T(400793, 'authMechanism', 21, false),
                authmechanismproperties: J$.T(400801, 'authMechanismProperties', 21, false),
                gssapiservicename: J$.T(400809, 'gssapiServiceName', 21, false),
                localthresholdms: J$.T(400817, 'localThresholdMS', 21, false),
                serverselectiontimeoutms: J$.T(400825, 'serverSelectionTimeoutMS', 21, false),
                serverselectiontryonce: J$.T(400833, 'serverSelectionTryOnce', 21, false),
                heartbeatfrequencyms: J$.T(400841, 'heartbeatFrequencyMS', 21, false),
                retrywrites: J$.T(400849, 'retryWrites', 21, false),
                uuidrepresentation: J$.T(400857, 'uuidRepresentation', 21, false),
                zlibcompressionlevel: J$.T(400865, 'zlibCompressionLevel', 21, false),
                tlsallowinvalidcertificates: J$.T(400873, 'tlsAllowInvalidCertificates', 21, false),
                tlsallowinvalidhostnames: J$.T(400881, 'tlsAllowInvalidHostnames', 21, false),
                tlsinsecure: J$.T(400889, 'tlsInsecure', 21, false),
                tlscafile: J$.T(400897, 'tlsCAFile', 21, false),
                tlscertificatekeyfile: J$.T(400905, 'tlsCertificateKeyFile', 21, false),
                tlscertificatekeyfilepassword: J$.T(400913, 'tlsCertificateKeyFilePassword', 21, false),
                wtimeout: J$.T(400921, 'wTimeoutMS', 21, false),
                j: J$.T(400929, 'journal', 21, false)
            }, 11, false), CASE_TRANSLATION, false, true);
            var USERNAME_REQUIRED_MECHANISMS = J$.W(402193, 'USERNAME_REQUIRED_MECHANISMS', J$.F(402185, J$.I(typeof Set === 'undefined' ? Set = J$.R(402129, 'Set', undefined, true, true) : Set = J$.R(402129, 'Set', Set, true, true)), true)(J$.T(402177, [
                J$.T(402137, 'GSSAPI', 21, false),
                J$.T(402145, 'MONGODB-CR', 21, false),
                J$.T(402153, 'PLAIN', 21, false),
                J$.T(402161, 'SCRAM-SHA-1', 21, false),
                J$.T(402169, 'SCRAM-SHA-256', 21, false)
            ], 10, false)), USERNAME_REQUIRED_MECHANISMS, false, true);
            var PROTOCOL_MONGODB = J$.W(405105, 'PROTOCOL_MONGODB', J$.T(405097, 'mongodb', 21, false), PROTOCOL_MONGODB, false, true);
            var PROTOCOL_MONGODB_SRV = J$.W(405121, 'PROTOCOL_MONGODB_SRV', J$.T(405113, 'mongodb+srv', 21, false), PROTOCOL_MONGODB_SRV, false, true);
            var SUPPORTED_PROTOCOLS = J$.W(405153, 'SUPPORTED_PROTOCOLS', J$.T(405145, [
                J$.R(405129, 'PROTOCOL_MONGODB', PROTOCOL_MONGODB, false, true),
                J$.R(405137, 'PROTOCOL_MONGODB_SRV', PROTOCOL_MONGODB_SRV, false, true)
            ], 10, false), SUPPORTED_PROTOCOLS, false, true);
            J$.P(408321, J$.I(typeof module === 'undefined' ? module = J$.R(408305, 'module', undefined, true, true) : module = J$.R(408305, 'module', module, true, true)), 'exports', J$.R(408313, 'parseConnectionString', parseConnectionString, false, true));
        } catch (J$e) {
            J$.Ex(408993, J$e);
        } finally {
            if (J$.Sr(409001))
                continue jalangiLabel24;
            else
                break jalangiLabel24;
        }
    }
// JALANGI DO NOT INSTRUMENT

