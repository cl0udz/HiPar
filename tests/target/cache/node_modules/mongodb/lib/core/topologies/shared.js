J$.noInstrEval = false;
jalangiLabel30:
    while (true) {
        try {
            J$.Se(393073, '/Users/ex1t/Desktop/nodeAnalysis/Goldie/tests/target/cache/node_modules/mongodb/lib/core/topologies/shared.js');
            function emitSDAMEvent(self, event, description) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(385937, arguments.callee, this, arguments);
                            arguments = J$.N(385945, 'arguments', arguments, true, false, false);
                            self = J$.N(385953, 'self', self, true, false, false);
                            event = J$.N(385961, 'event', event, true, false, false);
                            description = J$.N(385969, 'description', description, true, false, false);
                            if (J$.C(23832, J$.B(23898, '>', J$.G(385889, J$.M(385881, J$.R(385865, 'self', self, false, false), 'listeners', false)(J$.R(385873, 'event', event, false, false)), 'length'), J$.T(385897, 0, 22, false)))) {
                                J$.M(385929, J$.R(385905, 'self', self, false, false), 'emit', false)(J$.R(385913, 'event', event, false, false), J$.R(385921, 'description', description, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(393441, J$e);
                        } finally {
                            if (J$.Fr(393449))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createClientInfo(options) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(386665, arguments.callee, this, arguments);
                            arguments = J$.N(386673, 'arguments', arguments, true, false, false);
                            options = J$.N(386681, 'options', options, true, false, false);
                            J$.N(386689, 'clientInfo', clientInfo, false, false, false);
                            J$.N(386697, 'buffer', buffer, false, false, false);
                            J$.N(386705, 'appname', appname, false, false, false);
                            var clientInfo = J$.W(386297, 'clientInfo', J$.C(23840, J$.G(386185, J$.R(386177, 'options', options, false, false), 'clientInfo')) ? J$.F(386217, J$.R(386193, 'clone', clone, false, true), false)(J$.G(386209, J$.R(386201, 'options', options, false, false), 'clientInfo')) : J$.T(386289, {
                                driver: J$.T(386241, {
                                    name: J$.T(386225, 'nodejs-core', 21, false),
                                    version: J$.R(386233, 'driverVersion', driverVersion, false, true)
                                }, 11, false),
                                os: J$.T(386281, {
                                    type: J$.R(386249, 'type', type, false, true),
                                    name: J$.R(386257, 'name', name, false, true),
                                    architecture: J$.R(386265, 'architecture', architecture, false, true),
                                    version: J$.R(386273, 'release', release, false, true)
                                }, 11, false)
                            }, 11, false), clientInfo, false, false);
                            if (J$.C(23864, J$.C(23848, J$.G(386313, J$.R(386305, 'clientInfo', clientInfo, false, false), 'platform')) ? J$.B(23914, '===', J$.M(386345, J$.G(386329, J$.R(386321, 'clientInfo', clientInfo, false, false), 'platform'), 'indexOf', false)(J$.T(386337, 'mongodb-core', 21, false)), J$.U(23906, '-', J$.T(386353, 1, 22, false))) : J$._())) {
                                J$.P(386417, J$.R(386361, 'clientInfo', clientInfo, false, false), 'platform', J$.F(386409, J$.R(386369, 'f', f, false, true), false)(J$.T(386377, '%s, mongodb-core: %s', 21, false), J$.G(386393, J$.R(386385, 'clientInfo', clientInfo, false, false), 'platform'), J$.R(386401, 'driverVersion', driverVersion, false, true)));
                            } else if (J$.C(23856, J$.U(23922, '!', J$.G(386433, J$.R(386425, 'clientInfo', clientInfo, false, false), 'platform')))) {
                                J$.P(386457, J$.R(386441, 'clientInfo', clientInfo, false, false), 'platform', J$.R(386449, 'nodejsversion', nodejsversion, false, true));
                            }
                            if (J$.C(23880, J$.G(386473, J$.R(386465, 'options', options, false, false), 'appname'))) {
                                var buffer = J$.W(386513, 'buffer', J$.M(386505, J$.R(386481, 'Buffer', Buffer, false, true), 'from', false)(J$.G(386497, J$.R(386489, 'options', options, false, false), 'appname')), buffer, false, false);
                                var appname = J$.W(386609, 'appname', J$.C(23872, J$.B(23930, '>', J$.G(386529, J$.R(386521, 'buffer', buffer, false, false), 'length'), J$.T(386537, 128, 22, false))) ? J$.M(386585, J$.M(386569, J$.R(386545, 'buffer', buffer, false, false), 'slice', false)(J$.T(386553, 0, 22, false), J$.T(386561, 128, 22, false)), 'toString', false)(J$.T(386577, 'utf8', 21, false)) : J$.G(386601, J$.R(386593, 'options', options, false, false), 'appname'), appname, false, false);
                                J$.P(386641, J$.R(386617, 'clientInfo', clientInfo, false, false), 'application', J$.T(386633, { name: J$.R(386625, 'appname', appname, false, false) }, 11, false));
                            }
                            return J$.Rt(386657, J$.R(386649, 'clientInfo', clientInfo, false, false));
                        } catch (J$e) {
                            J$.Ex(393457, J$e);
                        } finally {
                            if (J$.Fr(393465))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function createCompressionInfo(options) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(386921, arguments.callee, this, arguments);
                            arguments = J$.N(386929, 'arguments', arguments, true, false, false);
                            options = J$.N(386937, 'options', options, true, false, false);
                            if (J$.C(23896, J$.C(23888, J$.U(23938, '!', J$.G(386721, J$.R(386713, 'options', options, false, false), 'compression'))) ? J$._() : J$.U(23946, '!', J$.G(386745, J$.G(386737, J$.R(386729, 'options', options, false, false), 'compression'), 'compressors')))) {
                                return J$.Rt(386761, J$.T(386753, [], 10, false));
                            }
                            J$.M(386881, J$.G(386785, J$.G(386777, J$.R(386769, 'options', options, false, false), 'compression'), 'compressors'), 'forEach', false)(J$.T(386873, function (compressor) {
                                jalangiLabel2:
                                    while (true) {
                                        try {
                                            J$.Fe(386849, arguments.callee, this, arguments);
                                            arguments = J$.N(386857, 'arguments', arguments, true, false, false);
                                            compressor = J$.N(386865, 'compressor', compressor, true, false, false);
                                            if (J$.C(23912, J$.C(23904, J$.B(23954, '!==', J$.R(386793, 'compressor', compressor, false, false), J$.T(386801, 'snappy', 21, false))) ? J$.B(23962, '!==', J$.R(386809, 'compressor', compressor, false, false), J$.T(386817, 'zlib', 21, false)) : J$._())) {
                                                throw J$.F(386841, J$.I(typeof Error === 'undefined' ? Error = J$.R(386825, 'Error', undefined, true, true) : Error = J$.R(386825, 'Error', Error, true, true)), true)(J$.T(386833, 'compressors must be at least one of snappy or zlib', 21, false));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(393473, J$e);
                                        } finally {
                                            if (J$.Fr(393481))
                                                continue jalangiLabel2;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            return J$.Rt(386913, J$.G(386905, J$.G(386897, J$.R(386889, 'options', options, false, false), 'compression'), 'compressors'));
                        } catch (J$e) {
                            J$.Ex(393489, J$e);
                        } finally {
                            if (J$.Fr(393497))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function clone(object) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(386993, arguments.callee, this, arguments);
                            arguments = J$.N(387001, 'arguments', arguments, true, false, false);
                            object = J$.N(387009, 'object', object, true, false, false);
                            return J$.Rt(386985, J$.M(386977, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(386945, 'JSON', undefined, true, true) : JSON = J$.R(386945, 'JSON', JSON, true, true)), 'parse', false)(J$.M(386969, J$.I(typeof JSON === 'undefined' ? JSON = J$.R(386953, 'JSON', undefined, true, true) : JSON = J$.R(386953, 'JSON', JSON, true, true)), 'stringify', false)(J$.R(386961, 'object', object, false, false))));
                        } catch (J$e) {
                            J$.Ex(393505, J$e);
                        } finally {
                            if (J$.Fr(393513))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Interval(fn, time) {
                jalangiLabel18:
                    while (true) {
                        try {
                            J$.Fe(389873, arguments.callee, this, arguments);
                            arguments = J$.N(389881, 'arguments', arguments, true, false, false);
                            fn = J$.N(389889, 'fn', fn, true, false, false);
                            time = J$.N(389897, 'time', time, true, false, false);
                            J$.N(389905, 'timer', timer, false, false, false);
                            var timer = J$.W(389593, 'timer', J$.T(389585, false, 23, false), timer, false, false);
                            J$.P(389705, J$.R(389601, 'this', this, false, false), 'start', J$.T(389697, function () {
                                jalangiLabel15:
                                    while (true) {
                                        try {
                                            J$.Fe(389681, arguments.callee, this, arguments);
                                            arguments = J$.N(389689, 'arguments', arguments, true, false, false);
                                            if (J$.C(24088, J$.U(24122, '!', J$.M(389617, J$.R(389609, 'this', this, false, false), 'isRunning', false)()))) {
                                                timer = J$.W(389657, 'timer', J$.F(389649, J$.I(typeof setInterval === 'undefined' ? setInterval = J$.R(389625, 'setInterval', undefined, true, true) : setInterval = J$.R(389625, 'setInterval', setInterval, true, true)), false)(J$.R(389633, 'fn', fn, false, false), J$.R(389641, 'time', time, false, false)), timer, false, false);
                                            }
                                            return J$.Rt(389673, J$.R(389665, 'this', this, false, false));
                                        } catch (J$e) {
                                            J$.Ex(393681, J$e);
                                        } finally {
                                            if (J$.Fr(393689))
                                                continue jalangiLabel15;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.P(389801, J$.R(389713, 'this', this, false, false), 'stop', J$.T(389793, function () {
                                jalangiLabel16:
                                    while (true) {
                                        try {
                                            J$.Fe(389777, arguments.callee, this, arguments);
                                            arguments = J$.N(389785, 'arguments', arguments, true, false, false);
                                            J$.F(389737, J$.I(typeof clearInterval === 'undefined' ? clearInterval = J$.R(389721, 'clearInterval', undefined, true, true) : clearInterval = J$.R(389721, 'clearInterval', clearInterval, true, true)), false)(J$.R(389729, 'timer', timer, false, false));
                                            timer = J$.W(389753, 'timer', J$.T(389745, false, 23, false), timer, false, false);
                                            return J$.Rt(389769, J$.R(389761, 'this', this, false, false));
                                        } catch (J$e) {
                                            J$.Ex(393697, J$e);
                                        } finally {
                                            if (J$.Fr(393705))
                                                continue jalangiLabel16;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.P(389865, J$.R(389809, 'this', this, false, false), 'isRunning', J$.T(389857, function () {
                                jalangiLabel17:
                                    while (true) {
                                        try {
                                            J$.Fe(389841, arguments.callee, this, arguments);
                                            arguments = J$.N(389849, 'arguments', arguments, true, false, false);
                                            return J$.Rt(389833, J$.B(24130, '!==', J$.R(389817, 'timer', timer, false, false), J$.T(389825, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(393713, J$e);
                                        } finally {
                                            if (J$.Fr(393721))
                                                continue jalangiLabel17;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(393729, J$e);
                        } finally {
                            if (J$.Fr(393737))
                                continue jalangiLabel18;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function Timeout(fn, time) {
                jalangiLabel22:
                    while (true) {
                        try {
                            J$.Fe(390241, arguments.callee, this, arguments);
                            arguments = J$.N(390249, 'arguments', arguments, true, false, false);
                            fn = J$.N(390257, 'fn', fn, true, false, false);
                            time = J$.N(390265, 'time', time, true, false, false);
                            J$.N(390273, 'timer', timer, false, false, false);
                            var timer = J$.W(389921, 'timer', J$.T(389913, false, 23, false), timer, false, false);
                            J$.P(390033, J$.R(389929, 'this', this, false, false), 'start', J$.T(390025, function () {
                                jalangiLabel19:
                                    while (true) {
                                        try {
                                            J$.Fe(390009, arguments.callee, this, arguments);
                                            arguments = J$.N(390017, 'arguments', arguments, true, false, false);
                                            if (J$.C(24096, J$.U(24138, '!', J$.M(389945, J$.R(389937, 'this', this, false, false), 'isRunning', false)()))) {
                                                timer = J$.W(389985, 'timer', J$.F(389977, J$.I(typeof setTimeout === 'undefined' ? setTimeout = J$.R(389953, 'setTimeout', undefined, true, true) : setTimeout = J$.R(389953, 'setTimeout', setTimeout, true, true)), false)(J$.R(389961, 'fn', fn, false, false), J$.R(389969, 'time', time, false, false)), timer, false, false);
                                            }
                                            return J$.Rt(390001, J$.R(389993, 'this', this, false, false));
                                        } catch (J$e) {
                                            J$.Ex(393745, J$e);
                                        } finally {
                                            if (J$.Fr(393753))
                                                continue jalangiLabel19;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.P(390129, J$.R(390041, 'this', this, false, false), 'stop', J$.T(390121, function () {
                                jalangiLabel20:
                                    while (true) {
                                        try {
                                            J$.Fe(390105, arguments.callee, this, arguments);
                                            arguments = J$.N(390113, 'arguments', arguments, true, false, false);
                                            J$.F(390065, J$.I(typeof clearTimeout === 'undefined' ? clearTimeout = J$.R(390049, 'clearTimeout', undefined, true, true) : clearTimeout = J$.R(390049, 'clearTimeout', clearTimeout, true, true)), false)(J$.R(390057, 'timer', timer, false, false));
                                            timer = J$.W(390081, 'timer', J$.T(390073, false, 23, false), timer, false, false);
                                            return J$.Rt(390097, J$.R(390089, 'this', this, false, false));
                                        } catch (J$e) {
                                            J$.Ex(393761, J$e);
                                        } finally {
                                            if (J$.Fr(393769))
                                                continue jalangiLabel20;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                            J$.P(390233, J$.R(390137, 'this', this, false, false), 'isRunning', J$.T(390225, function () {
                                jalangiLabel21:
                                    while (true) {
                                        try {
                                            J$.Fe(390209, arguments.callee, this, arguments);
                                            arguments = J$.N(390217, 'arguments', arguments, true, false, false);
                                            if (J$.C(24112, J$.C(24104, J$.R(390145, 'timer', timer, false, false)) ? J$.G(390161, J$.R(390153, 'timer', timer, false, false), '_called') : J$._()))
                                                return J$.Rt(390177, J$.T(390169, false, 23, false));
                                            return J$.Rt(390201, J$.B(24146, '!==', J$.R(390185, 'timer', timer, false, false), J$.T(390193, false, 23, false)));
                                        } catch (J$e) {
                                            J$.Ex(393777, J$e);
                                        } finally {
                                            if (J$.Fr(393785))
                                                continue jalangiLabel21;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(393793, J$e);
                        } finally {
                            if (J$.Fr(393801))
                                continue jalangiLabel22;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function diff(previous, current) {
                jalangiLabel23:
                    while (true) {
                        try {
                            J$.Fe(391489, arguments.callee, this, arguments);
                            arguments = J$.N(391497, 'arguments', arguments, true, false, false);
                            previous = J$.N(391505, 'previous', previous, true, false, false);
                            current = J$.N(391513, 'current', current, true, false, false);
                            J$.N(391521, 'diff', diff, false, false, false);
                            J$.N(391529, 'i', i, false, false, false);
                            J$.N(391537, 'found', found, false, false, false);
                            J$.N(391545, 'j', j, false, false, false);
                            J$.N(391553, 'prevServer', prevServer, false, false, false);
                            J$.N(391561, 'currServer', currServer, false, false, false);
                            var diff = J$.W(390297, 'diff', J$.T(390289, { servers: J$.T(390281, [], 10, false) }, 11, false), diff, false, false);
                            if (J$.C(24120, J$.U(24154, '!', J$.R(390305, 'previous', previous, false, false)))) {
                                previous = J$.W(390329, 'previous', J$.T(390321, { servers: J$.T(390313, [], 10, false) }, 11, false), previous, false, false);
                            }
                            for (var i = J$.W(390345, 'i', J$.T(390337, 0, 22, false), i, false, false); J$.C(24152, J$.B(24162, '<', J$.R(390353, 'i', i, false, false), J$.G(390377, J$.G(390369, J$.R(390361, 'previous', previous, false, false), 'servers'), 'length'))); J$.B(24186, '-', i = J$.W(390393, 'i', J$.B(24178, '+', J$.U(24170, '+', J$.R(390385, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var found = J$.W(390409, 'found', J$.T(390401, false, 23, false), found, false, false);
                                for (var j = J$.W(390425, 'j', J$.T(390417, 0, 22, false), j, false, false); J$.C(24136, J$.B(24194, '<', J$.R(390433, 'j', j, false, false), J$.G(390457, J$.G(390449, J$.R(390441, 'current', current, false, false), 'servers'), 'length'))); J$.B(24218, '-', j = J$.W(390473, 'j', J$.B(24210, '+', J$.U(24202, '+', J$.R(390465, 'j', j, false, false)), 1), j, false, false), 1)) {
                                    if (J$.C(24128, J$.B(24226, '===', J$.M(390521, J$.G(390513, J$.G(390505, J$.G(390489, J$.R(390481, 'current', current, false, false), 'servers'), J$.R(390497, 'j', j, false, false)), 'address'), 'toLowerCase', false)(), J$.M(390569, J$.G(390561, J$.G(390553, J$.G(390537, J$.R(390529, 'previous', previous, false, false), 'servers'), J$.R(390545, 'i', i, false, false)), 'address'), 'toLowerCase', false)()))) {
                                        found = J$.W(390585, 'found', J$.T(390577, true, 23, false), found, false, false);
                                        break;
                                    }
                                }
                                if (J$.C(24144, J$.U(24234, '!', J$.R(390593, 'found', found, false, false)))) {
                                    J$.M(390713, J$.G(390609, J$.R(390601, 'diff', diff, false, false), 'servers'), 'push', false)(J$.T(390705, {
                                        address: J$.G(390649, J$.G(390641, J$.G(390625, J$.R(390617, 'previous', previous, false, false), 'servers'), J$.R(390633, 'i', i, false, false)), 'address'),
                                        from: J$.G(390689, J$.G(390681, J$.G(390665, J$.R(390657, 'previous', previous, false, false), 'servers'), J$.R(390673, 'i', i, false, false)), 'type'),
                                        to: J$.T(390697, 'Unknown', 21, false)
                                    }, 11, false));
                                }
                            }
                            for (j = J$.W(390729, 'j', J$.T(390721, 0, 22, false), j, false, false); J$.C(24184, J$.B(24242, '<', J$.R(390737, 'j', j, false, false), J$.G(390761, J$.G(390753, J$.R(390745, 'current', current, false, false), 'servers'), 'length'))); J$.B(24266, '-', j = J$.W(390777, 'j', J$.B(24258, '+', J$.U(24250, '+', J$.R(390769, 'j', j, false, false)), 1), j, false, false), 1)) {
                                found = J$.W(390793, 'found', J$.T(390785, false, 23, false), found, false, false);
                                for (i = J$.W(390809, 'i', J$.T(390801, 0, 22, false), i, false, false); J$.C(24168, J$.B(24274, '<', J$.R(390817, 'i', i, false, false), J$.G(390841, J$.G(390833, J$.R(390825, 'previous', previous, false, false), 'servers'), 'length'))); J$.B(24298, '-', i = J$.W(390857, 'i', J$.B(24290, '+', J$.U(24282, '+', J$.R(390849, 'i', i, false, false)), 1), i, false, false), 1)) {
                                    if (J$.C(24160, J$.B(24306, '===', J$.M(390905, J$.G(390897, J$.G(390889, J$.G(390873, J$.R(390865, 'previous', previous, false, false), 'servers'), J$.R(390881, 'i', i, false, false)), 'address'), 'toLowerCase', false)(), J$.M(390953, J$.G(390945, J$.G(390937, J$.G(390921, J$.R(390913, 'current', current, false, false), 'servers'), J$.R(390929, 'j', j, false, false)), 'address'), 'toLowerCase', false)()))) {
                                        found = J$.W(390969, 'found', J$.T(390961, true, 23, false), found, false, false);
                                        break;
                                    }
                                }
                                if (J$.C(24176, J$.U(24314, '!', J$.R(390977, 'found', found, false, false)))) {
                                    J$.M(391097, J$.G(390993, J$.R(390985, 'diff', diff, false, false), 'servers'), 'push', false)(J$.T(391089, {
                                        address: J$.G(391033, J$.G(391025, J$.G(391009, J$.R(391001, 'current', current, false, false), 'servers'), J$.R(391017, 'j', j, false, false)), 'address'),
                                        from: J$.T(391041, 'Unknown', 21, false),
                                        to: J$.G(391081, J$.G(391073, J$.G(391057, J$.R(391049, 'current', current, false, false), 'servers'), J$.R(391065, 'j', j, false, false)), 'type')
                                    }, 11, false));
                                }
                            }
                            for (i = J$.W(391113, 'i', J$.T(391105, 0, 22, false), i, false, false); J$.C(24216, J$.B(24322, '<', J$.R(391121, 'i', i, false, false), J$.G(391145, J$.G(391137, J$.R(391129, 'previous', previous, false, false), 'servers'), 'length'))); J$.B(24346, '-', i = J$.W(391161, 'i', J$.B(24338, '+', J$.U(24330, '+', J$.R(391153, 'i', i, false, false)), 1), i, false, false), 1)) {
                                var prevServer = J$.W(391201, 'prevServer', J$.G(391193, J$.G(391177, J$.R(391169, 'previous', previous, false, false), 'servers'), J$.R(391185, 'i', i, false, false)), prevServer, false, false);
                                for (j = J$.W(391217, 'j', J$.T(391209, 0, 22, false), j, false, false); J$.C(24208, J$.B(24354, '<', J$.R(391225, 'j', j, false, false), J$.G(391249, J$.G(391241, J$.R(391233, 'current', current, false, false), 'servers'), 'length'))); J$.B(24378, '-', j = J$.W(391265, 'j', J$.B(24370, '+', J$.U(24362, '+', J$.R(391257, 'j', j, false, false)), 1), j, false, false), 1)) {
                                    var currServer = J$.W(391305, 'currServer', J$.G(391297, J$.G(391281, J$.R(391273, 'current', current, false, false), 'servers'), J$.R(391289, 'j', j, false, false)), currServer, false, false);
                                    if (J$.C(24200, J$.B(24386, '===', J$.M(391329, J$.G(391321, J$.R(391313, 'prevServer', prevServer, false, false), 'address'), 'toLowerCase', false)(), J$.M(391353, J$.G(391345, J$.R(391337, 'currServer', currServer, false, false), 'address'), 'toLowerCase', false)()))) {
                                        if (J$.C(24192, J$.B(24394, '!==', J$.G(391369, J$.R(391361, 'prevServer', prevServer, false, false), 'type'), J$.G(391385, J$.R(391377, 'currServer', currServer, false, false), 'type')))) {
                                            J$.M(391465, J$.G(391401, J$.R(391393, 'diff', diff, false, false), 'servers'), 'push', false)(J$.T(391457, {
                                                address: J$.G(391417, J$.R(391409, 'prevServer', prevServer, false, false), 'address'),
                                                from: J$.G(391433, J$.R(391425, 'prevServer', prevServer, false, false), 'type'),
                                                to: J$.G(391449, J$.R(391441, 'currServer', currServer, false, false), 'type')
                                            }, 11, false));
                                        }
                                    }
                                }
                            }
                            return J$.Rt(391481, J$.R(391473, 'diff', diff, false, false));
                        } catch (J$e) {
                            J$.Ex(393809, J$e);
                        } finally {
                            if (J$.Fr(393817))
                                continue jalangiLabel23;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function resolveClusterTime(topology, $clusterTime) {
                jalangiLabel24:
                    while (true) {
                        try {
                            J$.Fe(391689, arguments.callee, this, arguments);
                            arguments = J$.N(391697, 'arguments', arguments, true, false, false);
                            topology = J$.N(391705, 'topology', topology, true, false, false);
                            $clusterTime = J$.N(391713, '$clusterTime', $clusterTime, true, false, false);
                            if (J$.C(24232, J$.B(24402, '==', J$.G(391577, J$.R(391569, 'topology', topology, false, false), 'clusterTime'), J$.T(391585, null, 25, false)))) {
                                J$.P(391609, J$.R(391593, 'topology', topology, false, false), 'clusterTime', J$.R(391601, '$clusterTime', $clusterTime, false, false));
                            } else {
                                if (J$.C(24224, J$.M(391657, J$.G(391625, J$.R(391617, '$clusterTime', $clusterTime, false, false), 'clusterTime'), 'greaterThan', false)(J$.G(391649, J$.G(391641, J$.R(391633, 'topology', topology, false, false), 'clusterTime'), 'clusterTime')))) {
                                    J$.P(391681, J$.R(391665, 'topology', topology, false, false), 'clusterTime', J$.R(391673, '$clusterTime', $clusterTime, false, false));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(393825, J$e);
                        } finally {
                            if (J$.Fr(393833))
                                continue jalangiLabel24;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function topologyType(topology) {
                jalangiLabel27:
                    while (true) {
                        try {
                            J$.Fe(392113, arguments.callee, this, arguments);
                            arguments = J$.N(392121, 'arguments', arguments, true, false, false);
                            topology = J$.N(392129, 'topology', topology, true, false, false);
                            if (J$.C(24256, J$.G(391953, J$.R(391945, 'topology', topology, false, false), 'description'))) {
                                return J$.Rt(391985, J$.G(391977, J$.G(391969, J$.R(391961, 'topology', topology, false, false), 'description'), 'type'));
                            }
                            if (J$.C(24272, J$.B(24434, '===', J$.G(392001, J$.R(391993, 'topology', topology, false, false), 'type'), J$.T(392009, 'mongos', 21, false)))) {
                                return J$.Rt(392033, J$.G(392025, J$.R(392017, 'TopologyType', TopologyType, false, true), 'Sharded'));
                            } else if (J$.C(24264, J$.B(24442, '===', J$.G(392049, J$.R(392041, 'topology', topology, false, false), 'type'), J$.T(392057, 'replset', 21, false)))) {
                                return J$.Rt(392081, J$.G(392073, J$.R(392065, 'TopologyType', TopologyType, false, true), 'ReplicaSetWithPrimary'));
                            }
                            return J$.Rt(392105, J$.G(392097, J$.R(392089, 'TopologyType', TopologyType, false, true), 'Single'));
                        } catch (J$e) {
                            J$.Ex(393873, J$e);
                        } finally {
                            if (J$.Fr(393881))
                                continue jalangiLabel27;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function getMMAPError(err) {
                jalangiLabel29:
                    while (true) {
                        try {
                            J$.Fe(392529, arguments.callee, this, arguments);
                            arguments = J$.N(392537, 'arguments', arguments, true, false, false);
                            err = J$.N(392545, 'err', err, true, false, false);
                            J$.N(392553, 'newErr', newErr, false, false, false);
                            if (J$.C(24312, J$.C(24304, J$.B(24474, '!==', J$.G(392393, J$.R(392385, 'err', err, false, false), 'code'), J$.R(392401, 'MMAPv1_RETRY_WRITES_ERROR_CODE', MMAPv1_RETRY_WRITES_ERROR_CODE, false, true))) ? J$._() : J$.U(24482, '!', J$.M(392433, J$.G(392417, J$.R(392409, 'err', err, false, false), 'errmsg'), 'includes', false)(J$.T(392425, 'Transaction numbers', 21, false))))) {
                                return J$.Rt(392449, J$.R(392441, 'err', err, false, false));
                            }
                            var newErr = J$.W(392505, 'newErr', J$.F(392497, J$.R(392457, 'MongoError', MongoError, false, true), true)(J$.T(392489, {
                                message: J$.R(392465, 'MMAPv1_RETRY_WRITES_ERROR_MESSAGE', MMAPv1_RETRY_WRITES_ERROR_MESSAGE, false, true),
                                errmsg: J$.R(392473, 'MMAPv1_RETRY_WRITES_ERROR_MESSAGE', MMAPv1_RETRY_WRITES_ERROR_MESSAGE, false, true),
                                originalError: J$.R(392481, 'err', err, false, false)
                            }, 11, false)), newErr, false, false);
                            return J$.Rt(392521, J$.R(392513, 'newErr', newErr, false, false));
                        } catch (J$e) {
                            J$.Ex(393905, J$e);
                        } finally {
                            if (J$.Fr(393913))
                                continue jalangiLabel29;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(393081, 'os', os, false, false, false);
            J$.N(393089, 'f', f, false, false, false);
            J$.N(393097, 'ReadPreference', ReadPreference, false, false, false);
            J$.N(393105, 'Buffer', Buffer, false, false, false);
            J$.N(393113, 'TopologyType', TopologyType, false, false, false);
            J$.N(393121, 'MongoError', MongoError, false, false, false);
            J$.N(393129, 'MMAPv1_RETRY_WRITES_ERROR_CODE', MMAPv1_RETRY_WRITES_ERROR_CODE, false, false, false);
            emitSDAMEvent = J$.N(393145, 'emitSDAMEvent', J$.T(393137, emitSDAMEvent, 12, false), true, false, false);
            J$.N(393153, 'driverVersion', driverVersion, false, false, false);
            J$.N(393161, 'nodejsversion', nodejsversion, false, false, false);
            J$.N(393169, 'type', type, false, false, false);
            J$.N(393177, 'name', name, false, false, false);
            J$.N(393185, 'architecture', architecture, false, false, false);
            J$.N(393193, 'release', release, false, false, false);
            createClientInfo = J$.N(393209, 'createClientInfo', J$.T(393201, createClientInfo, 12, false), true, false, false);
            createCompressionInfo = J$.N(393225, 'createCompressionInfo', J$.T(393217, createCompressionInfo, 12, false), true, false, false);
            clone = J$.N(393241, 'clone', J$.T(393233, clone, 12, false), true, false, false);
            J$.N(393249, 'getPreviousDescription', getPreviousDescription, false, false, false);
            J$.N(393257, 'emitServerDescriptionChanged', emitServerDescriptionChanged, false, false, false);
            J$.N(393265, 'getPreviousTopologyDescription', getPreviousTopologyDescription, false, false, false);
            J$.N(393273, 'emitTopologyDescriptionChanged', emitTopologyDescriptionChanged, false, false, false);
            J$.N(393281, 'changedIsMaster', changedIsMaster, false, false, false);
            J$.N(393289, 'getTopologyType', getTopologyType, false, false, false);
            J$.N(393297, 'inquireServerState', inquireServerState, false, false, false);
            J$.N(393305, 'cloneOptions', cloneOptions, false, false, false);
            Interval = J$.N(393321, 'Interval', J$.T(393313, Interval, 12, false), true, false, false);
            Timeout = J$.N(393337, 'Timeout', J$.T(393329, Timeout, 12, false), true, false, false);
            diff = J$.N(393353, 'diff', J$.T(393345, diff, 12, false), true, false, false);
            resolveClusterTime = J$.N(393369, 'resolveClusterTime', J$.T(393361, resolveClusterTime, 12, false), true, false, false);
            J$.N(393377, 'SessionMixins', SessionMixins, false, false, false);
            topologyType = J$.N(393393, 'topologyType', J$.T(393385, topologyType, 12, false), true, false, false);
            J$.N(393401, 'RETRYABLE_WIRE_VERSION', RETRYABLE_WIRE_VERSION, false, false, false);
            J$.N(393409, 'isRetryableWritesSupported', isRetryableWritesSupported, false, false, false);
            J$.N(393417, 'MMAPv1_RETRY_WRITES_ERROR_MESSAGE', MMAPv1_RETRY_WRITES_ERROR_MESSAGE, false, false, false);
            getMMAPError = J$.N(393433, 'getMMAPError', J$.T(393425, getMMAPError, 12, false), true, false, false);
            J$.T(385617, 'use strict', 21, false);
            var os = J$.W(385649, 'os', J$.F(385641, J$.I(typeof require === 'undefined' ? require = J$.R(385625, 'require', undefined, true, true) : require = J$.R(385625, 'require', require, true, true)), false)(J$.T(385633, 'os', 21, false)), os, false, true);
            var f = J$.W(385689, 'f', J$.G(385681, J$.F(385673, J$.I(typeof require === 'undefined' ? require = J$.R(385657, 'require', undefined, true, true) : require = J$.R(385657, 'require', require, true, true)), false)(J$.T(385665, 'util', 21, false)), 'format'), f, false, true);
            var ReadPreference = J$.W(385721, 'ReadPreference', J$.F(385713, J$.I(typeof require === 'undefined' ? require = J$.R(385697, 'require', undefined, true, true) : require = J$.R(385697, 'require', require, true, true)), false)(J$.T(385705, './read_preference', 21, false)), ReadPreference, false, true);
            var Buffer = J$.W(385761, 'Buffer', J$.G(385753, J$.F(385745, J$.I(typeof require === 'undefined' ? require = J$.R(385729, 'require', undefined, true, true) : require = J$.R(385729, 'require', require, true, true)), false)(J$.T(385737, 'safe-buffer', 21, false)), 'Buffer'), Buffer, false, true);
            var TopologyType = J$.W(385801, 'TopologyType', J$.G(385793, J$.F(385785, J$.I(typeof require === 'undefined' ? require = J$.R(385769, 'require', undefined, true, true) : require = J$.R(385769, 'require', require, true, true)), false)(J$.T(385777, '../sdam/topology_description', 21, false)), 'TopologyType'), TopologyType, false, true);
            var MongoError = J$.W(385841, 'MongoError', J$.G(385833, J$.F(385825, J$.I(typeof require === 'undefined' ? require = J$.R(385809, 'require', undefined, true, true) : require = J$.R(385809, 'require', require, true, true)), false)(J$.T(385817, '../error', 21, false)), 'MongoError'), MongoError, false, true);
            var MMAPv1_RETRY_WRITES_ERROR_CODE = J$.W(385857, 'MMAPv1_RETRY_WRITES_ERROR_CODE', J$.T(385849, 20, 22, false), MMAPv1_RETRY_WRITES_ERROR_CODE, false, true);
            var driverVersion = J$.W(386009, 'driverVersion', J$.G(386001, J$.F(385993, J$.I(typeof require === 'undefined' ? require = J$.R(385977, 'require', undefined, true, true) : require = J$.R(385977, 'require', require, true, true)), false)(J$.T(385985, '../../../package.json', 21, false)), 'version'), driverVersion, false, true);
            var nodejsversion = J$.W(386073, 'nodejsversion', J$.F(386065, J$.R(386017, 'f', f, false, true), false)(J$.T(386025, 'Node.js %s, %s', 21, false), J$.G(386041, J$.I(typeof process === 'undefined' ? process = J$.R(386033, 'process', undefined, true, true) : process = J$.R(386033, 'process', process, true, true)), 'version'), J$.M(386057, J$.R(386049, 'os', os, false, true), 'endianness', false)()), nodejsversion, false, true);
            var type = J$.W(386097, 'type', J$.M(386089, J$.R(386081, 'os', os, false, true), 'type', false)(), type, false, true);
            var name = J$.W(386121, 'name', J$.G(386113, J$.I(typeof process === 'undefined' ? process = J$.R(386105, 'process', undefined, true, true) : process = J$.R(386105, 'process', process, true, true)), 'platform'), name, false, true);
            var architecture = J$.W(386145, 'architecture', J$.G(386137, J$.I(typeof process === 'undefined' ? process = J$.R(386129, 'process', undefined, true, true) : process = J$.R(386129, 'process', process, true, true)), 'arch'), architecture, false, true);
            var release = J$.W(386169, 'release', J$.M(386161, J$.R(386153, 'os', os, false, true), 'release', false)(), release, false, true);
            var getPreviousDescription = J$.W(387185, 'getPreviousDescription', J$.T(387177, function getPreviousDescription(self) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(387153, arguments.callee, this, arguments);
                            arguments = J$.N(387161, 'arguments', arguments, true, false, false);
                            self = J$.N(387169, 'self', self, true, false, false);
                            if (J$.C(23920, J$.U(23970, '!', J$.G(387033, J$.G(387025, J$.R(387017, 'self', self, false, false), 's'), 'serverDescription')))) {
                                J$.P(387113, J$.G(387049, J$.R(387041, 'self', self, false, false), 's'), 'serverDescription', J$.T(387105, {
                                    address: J$.G(387065, J$.R(387057, 'self', self, false, false), 'name'),
                                    arbiters: J$.T(387073, [], 10, false),
                                    hosts: J$.T(387081, [], 10, false),
                                    passives: J$.T(387089, [], 10, false),
                                    type: J$.T(387097, 'Unknown', 21, false)
                                }, 11, false));
                            }
                            return J$.Rt(387145, J$.G(387137, J$.G(387129, J$.R(387121, 'self', self, false, false), 's'), 'serverDescription'));
                        } catch (J$e) {
                            J$.Ex(393521, J$e);
                        } finally {
                            if (J$.Fr(393529))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), getPreviousDescription, false, true);
            var emitServerDescriptionChanged = J$.W(387457, 'emitServerDescriptionChanged', J$.T(387449, function emitServerDescriptionChanged(self, description) {
                jalangiLabel6:
                    while (true) {
                        try {
                            J$.Fe(387417, arguments.callee, this, arguments);
                            arguments = J$.N(387425, 'arguments', arguments, true, false, false);
                            self = J$.N(387433, 'self', self, true, false, false);
                            description = J$.N(387441, 'description', description, true, false, false);
                            if (J$.C(23936, J$.B(23978, '>', J$.G(387217, J$.M(387209, J$.R(387193, 'self', self, false, false), 'listeners', false)(J$.T(387201, 'serverDescriptionChanged', 21, false)), 'length'), J$.T(387225, 0, 22, false)))) {
                                J$.M(387377, J$.R(387233, 'self', self, false, false), 'emit', false)(J$.T(387241, 'serverDescriptionChanged', 21, false), J$.T(387369, {
                                    topologyId: J$.C(23928, J$.B(23994, '!==', J$.G(387265, J$.G(387257, J$.R(387249, 'self', self, false, false), 's'), 'topologyId'), J$.U(23986, '-', J$.T(387273, 1, 22, false)))) ? J$.G(387297, J$.G(387289, J$.R(387281, 'self', self, false, false), 's'), 'topologyId') : J$.G(387313, J$.R(387305, 'self', self, false, false), 'id'),
                                    address: J$.G(387329, J$.R(387321, 'self', self, false, false), 'name'),
                                    previousDescription: J$.F(387353, J$.R(387337, 'getPreviousDescription', getPreviousDescription, false, true), false)(J$.R(387345, 'self', self, false, false)),
                                    newDescription: J$.R(387361, 'description', description, false, false)
                                }, 11, false));
                                J$.P(387409, J$.G(387393, J$.R(387385, 'self', self, false, false), 's'), 'serverDescription', J$.R(387401, 'description', description, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(393537, J$e);
                        } finally {
                            if (J$.Fr(393545))
                                continue jalangiLabel6;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), emitServerDescriptionChanged, false, true);
            var getPreviousTopologyDescription = J$.W(387657, 'getPreviousTopologyDescription', J$.T(387649, function getPreviousTopologyDescription(self) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(387625, arguments.callee, this, arguments);
                            arguments = J$.N(387633, 'arguments', arguments, true, false, false);
                            self = J$.N(387641, 'self', self, true, false, false);
                            if (J$.C(23944, J$.U(24002, '!', J$.G(387481, J$.G(387473, J$.R(387465, 'self', self, false, false), 's'), 'topologyDescription')))) {
                                J$.P(387585, J$.G(387497, J$.R(387489, 'self', self, false, false), 's'), 'topologyDescription', J$.T(387577, {
                                    topologyType: J$.T(387505, 'Unknown', 21, false),
                                    servers: J$.T(387569, [J$.T(387561, {
                                            address: J$.G(387521, J$.R(387513, 'self', self, false, false), 'name'),
                                            arbiters: J$.T(387529, [], 10, false),
                                            hosts: J$.T(387537, [], 10, false),
                                            passives: J$.T(387545, [], 10, false),
                                            type: J$.T(387553, 'Unknown', 21, false)
                                        }, 11, false)], 10, false)
                                }, 11, false));
                            }
                            return J$.Rt(387617, J$.G(387609, J$.G(387601, J$.R(387593, 'self', self, false, false), 's'), 'topologyDescription'));
                        } catch (J$e) {
                            J$.Ex(393553, J$e);
                        } finally {
                            if (J$.Fr(393561))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), getPreviousTopologyDescription, false, true);
            var emitTopologyDescriptionChanged = J$.W(387929, 'emitTopologyDescriptionChanged', J$.T(387921, function emitTopologyDescriptionChanged(self, description) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(387889, arguments.callee, this, arguments);
                            arguments = J$.N(387897, 'arguments', arguments, true, false, false);
                            self = J$.N(387905, 'self', self, true, false, false);
                            description = J$.N(387913, 'description', description, true, false, false);
                            if (J$.C(23960, J$.B(24010, '>', J$.G(387689, J$.M(387681, J$.R(387665, 'self', self, false, false), 'listeners', false)(J$.T(387673, 'topologyDescriptionChanged', 21, false)), 'length'), J$.T(387697, 0, 22, false)))) {
                                J$.M(387849, J$.R(387705, 'self', self, false, false), 'emit', false)(J$.T(387713, 'topologyDescriptionChanged', 21, false), J$.T(387841, {
                                    topologyId: J$.C(23952, J$.B(24026, '!==', J$.G(387737, J$.G(387729, J$.R(387721, 'self', self, false, false), 's'), 'topologyId'), J$.U(24018, '-', J$.T(387745, 1, 22, false)))) ? J$.G(387769, J$.G(387761, J$.R(387753, 'self', self, false, false), 's'), 'topologyId') : J$.G(387785, J$.R(387777, 'self', self, false, false), 'id'),
                                    address: J$.G(387801, J$.R(387793, 'self', self, false, false), 'name'),
                                    previousDescription: J$.F(387825, J$.R(387809, 'getPreviousTopologyDescription', getPreviousTopologyDescription, false, true), false)(J$.R(387817, 'self', self, false, false)),
                                    newDescription: J$.R(387833, 'description', description, false, false)
                                }, 11, false));
                                J$.P(387881, J$.G(387865, J$.R(387857, 'self', self, false, false), 's'), 'serverDescription', J$.R(387873, 'description', description, false, false));
                            }
                        } catch (J$e) {
                            J$.Ex(393569, J$e);
                        } finally {
                            if (J$.Fr(393577))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), emitTopologyDescriptionChanged, false, true);
            var changedIsMaster = J$.W(388129, 'changedIsMaster', J$.T(388121, function changedIsMaster(self, currentIsmaster, ismaster) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(388065, arguments.callee, this, arguments);
                            arguments = J$.N(388073, 'arguments', arguments, true, false, false);
                            self = J$.N(388081, 'self', self, true, false, false);
                            currentIsmaster = J$.N(388089, 'currentIsmaster', currentIsmaster, true, false, false);
                            ismaster = J$.N(388097, 'ismaster', ismaster, true, false, false);
                            J$.N(388105, 'currentType', currentType, false, false, false);
                            J$.N(388113, 'newType', newType, false, false, false);
                            var currentType = J$.W(387969, 'currentType', J$.F(387961, J$.R(387937, 'getTopologyType', getTopologyType, false, true), false)(J$.R(387945, 'self', self, false, false), J$.R(387953, 'currentIsmaster', currentIsmaster, false, false)), currentType, false, false);
                            var newType = J$.W(388009, 'newType', J$.F(388001, J$.R(387977, 'getTopologyType', getTopologyType, false, true), false)(J$.R(387985, 'self', self, false, false), J$.R(387993, 'ismaster', ismaster, false, false)), newType, false, false);
                            if (J$.C(23968, J$.B(24034, '!==', J$.R(388017, 'newType', newType, false, false), J$.R(388025, 'currentType', currentType, false, false))))
                                return J$.Rt(388041, J$.T(388033, true, 23, false));
                            return J$.Rt(388057, J$.T(388049, false, 23, false));
                        } catch (J$e) {
                            J$.Ex(393585, J$e);
                        } finally {
                            if (J$.Fr(393593))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), changedIsMaster, false, true);
            var getTopologyType = J$.W(388449, 'getTopologyType', J$.T(388441, function getTopologyType(self, ismaster) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(388409, arguments.callee, this, arguments);
                            arguments = J$.N(388417, 'arguments', arguments, true, false, false);
                            self = J$.N(388425, 'self', self, true, false, false);
                            ismaster = J$.N(388433, 'ismaster', ismaster, true, false, false);
                            if (J$.C(23976, J$.U(24042, '!', J$.R(388137, 'ismaster', ismaster, false, false)))) {
                                ismaster = J$.W(388161, 'ismaster', J$.G(388153, J$.R(388145, 'self', self, false, false), 'ismaster'), ismaster, false, false);
                            }
                            if (J$.C(23984, J$.U(24050, '!', J$.R(388169, 'ismaster', ismaster, false, false))))
                                return J$.Rt(388185, J$.T(388177, 'Unknown', 21, false));
                            if (J$.C(24000, J$.C(23992, J$.G(388201, J$.R(388193, 'ismaster', ismaster, false, false), 'ismaster')) ? J$.B(24058, '===', J$.G(388217, J$.R(388209, 'ismaster', ismaster, false, false), 'msg'), J$.T(388225, 'isdbgrid', 21, false)) : J$._()))
                                return J$.Rt(388241, J$.T(388233, 'Mongos', 21, false));
                            if (J$.C(24016, J$.C(24008, J$.G(388257, J$.R(388249, 'ismaster', ismaster, false, false), 'ismaster')) ? J$.U(24066, '!', J$.G(388273, J$.R(388265, 'ismaster', ismaster, false, false), 'hosts')) : J$._()))
                                return J$.Rt(388289, J$.T(388281, 'Standalone', 21, false));
                            if (J$.C(24024, J$.G(388305, J$.R(388297, 'ismaster', ismaster, false, false), 'ismaster')))
                                return J$.Rt(388321, J$.T(388313, 'RSPrimary', 21, false));
                            if (J$.C(24032, J$.G(388337, J$.R(388329, 'ismaster', ismaster, false, false), 'secondary')))
                                return J$.Rt(388353, J$.T(388345, 'RSSecondary', 21, false));
                            if (J$.C(24040, J$.G(388369, J$.R(388361, 'ismaster', ismaster, false, false), 'arbiterOnly')))
                                return J$.Rt(388385, J$.T(388377, 'RSArbiter', 21, false));
                            return J$.Rt(388401, J$.T(388393, 'Unknown', 21, false));
                        } catch (J$e) {
                            J$.Ex(393601, J$e);
                        } finally {
                            if (J$.Fr(393609))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), getTopologyType, false, true);
            var inquireServerState = J$.W(389417, 'inquireServerState', J$.T(389409, function inquireServerState(self) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(389385, arguments.callee, this, arguments);
                            arguments = J$.N(389393, 'arguments', arguments, true, false, false);
                            self = J$.N(389401, 'self', self, true, false, false);
                            return J$.Rt(389377, J$.T(389369, function (callback) {
                                jalangiLabel12:
                                    while (true) {
                                        try {
                                            J$.Fe(389337, arguments.callee, this, arguments);
                                            arguments = J$.N(389345, 'arguments', arguments, true, false, false);
                                            callback = J$.N(389353, 'callback', callback, true, false, false);
                                            J$.N(389361, 'start', start, false, false, false);
                                            if (J$.C(24048, J$.B(24074, '===', J$.G(388473, J$.G(388465, J$.R(388457, 'self', self, false, false), 's'), 'state'), J$.T(388481, 'destroyed', 21, false))))
                                                return J$.Rt(388489, undefined);
                                            var start = J$.W(388521, 'start', J$.M(388513, J$.F(388505, J$.I(typeof Date === 'undefined' ? Date = J$.R(388497, 'Date', undefined, true, true) : Date = J$.R(388497, 'Date', Date, true, true)), true)(), 'getTime', false)(), start, false, false);
                                            J$.F(388577, J$.R(388529, 'emitSDAMEvent', emitSDAMEvent, false, true), false)(J$.R(388537, 'self', self, false, false), J$.T(388545, 'serverHeartbeatStarted', 21, false), J$.T(388569, { connectionId: J$.G(388561, J$.R(388553, 'self', self, false, false), 'name') }, 11, false));
                                            J$.M(389329, J$.R(388585, 'self', self, false, false), 'command', false)(J$.T(388593, 'admin.$cmd', 21, false), J$.T(388609, { ismaster: J$.T(388601, true, 23, false) }, 11, false), J$.T(388625, { monitoring: J$.T(388617, true, 23, false) }, 11, false), J$.T(389321, function (err, r) {
                                                jalangiLabel11:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(389281, arguments.callee, this, arguments);
                                                            arguments = J$.N(389289, 'arguments', arguments, true, false, false);
                                                            err = J$.N(389297, 'err', err, true, false, false);
                                                            r = J$.N(389305, 'r', r, true, false, false);
                                                            J$.N(389313, 'latencyMS', latencyMS, false, false, false);
                                                            if (J$.C(24072, J$.U(24082, '!', J$.R(388633, 'err', err, false, false)))) {
                                                                J$.M(388673, J$.R(388641, 'self', self, false, false), 'emit', false)(J$.T(388649, 'ismaster', 21, false), J$.R(388657, 'r', r, false, false), J$.R(388665, 'self', self, false, false));
                                                                var latencyMS = J$.W(388713, 'latencyMS', J$.B(24090, '-', J$.M(388697, J$.F(388689, J$.I(typeof Date === 'undefined' ? Date = J$.R(388681, 'Date', undefined, true, true) : Date = J$.R(388681, 'Date', Date, true, true)), true)(), 'getTime', false)(), J$.R(388705, 'start', start, false, false)), latencyMS, false, false);
                                                                J$.F(388793, J$.R(388721, 'emitSDAMEvent', emitSDAMEvent, false, true), false)(J$.R(388729, 'self', self, false, false), J$.T(388737, 'serverHeartbeatSucceeded', 21, false), J$.T(388785, {
                                                                    durationMS: J$.R(388745, 'latencyMS', latencyMS, false, false),
                                                                    reply: J$.G(388761, J$.R(388753, 'r', r, false, false), 'result'),
                                                                    connectionId: J$.G(388777, J$.R(388769, 'self', self, false, false), 'name')
                                                                }, 11, false));
                                                                if (J$.C(24064, J$.F(388857, J$.R(388801, 'changedIsMaster', changedIsMaster, false, true), false)(J$.R(388809, 'self', self, false, false), J$.G(388833, J$.G(388825, J$.R(388817, 'self', self, false, false), 's'), 'ismaster'), J$.G(388849, J$.R(388841, 'r', r, false, false), 'result')))) {
                                                                    J$.F(388985, J$.R(388865, 'emitServerDescriptionChanged', emitServerDescriptionChanged, false, true), false)(J$.R(388873, 'self', self, false, false), J$.T(388977, {
                                                                        address: J$.G(388889, J$.R(388881, 'self', self, false, false), 'name'),
                                                                        arbiters: J$.T(388897, [], 10, false),
                                                                        hosts: J$.T(388905, [], 10, false),
                                                                        passives: J$.T(388913, [], 10, false),
                                                                        type: J$.C(24056, J$.U(24098, '!', J$.G(388937, J$.G(388929, J$.R(388921, 'self', self, false, false), 's'), 'inTopology'))) ? J$.T(388945, 'Standalone', 21, false) : J$.F(388969, J$.R(388953, 'getTopologyType', getTopologyType, false, true), false)(J$.R(388961, 'self', self, false, false))
                                                                    }, 11, false));
                                                                }
                                                                J$.P(389025, J$.G(389001, J$.R(388993, 'self', self, false, false), 's'), 'ismaster', J$.G(389017, J$.R(389009, 'r', r, false, false), 'result'));
                                                                J$.P(389057, J$.G(389041, J$.R(389033, 'self', self, false, false), 's'), 'isMasterLatencyMS', J$.R(389049, 'latencyMS', latencyMS, false, false));
                                                            } else {
                                                                J$.F(389129, J$.R(389065, 'emitSDAMEvent', emitSDAMEvent, false, true), false)(J$.R(389073, 'self', self, false, false), J$.T(389081, 'serverHeartbeatFailed', 21, false), J$.T(389121, {
                                                                    durationMS: J$.R(389089, 'latencyMS', latencyMS, false, false),
                                                                    failure: J$.R(389097, 'err', err, false, false),
                                                                    connectionId: J$.G(389113, J$.R(389105, 'self', self, false, false), 'name')
                                                                }, 11, false));
                                                            }
                                                            if (J$.C(24080, J$.B(24114, '===', J$.U(24106, 'typeof', J$.R(389137, 'callback', callback, false, false)), J$.T(389145, 'function', 21, false)))) {
                                                                return J$.Rt(389185, J$.F(389177, J$.R(389153, 'callback', callback, false, false), false)(J$.R(389161, 'err', err, false, false), J$.R(389169, 'r', r, false, false)));
                                                            }
                                                            J$.P(389273, J$.G(389201, J$.R(389193, 'self', self, false, false), 's'), 'inquireServerStateTimeout', J$.F(389265, J$.I(typeof setTimeout === 'undefined' ? setTimeout = J$.R(389209, 'setTimeout', undefined, true, true) : setTimeout = J$.R(389209, 'setTimeout', setTimeout, true, true)), false)(J$.F(389233, J$.R(389217, 'inquireServerState', inquireServerState, false, false), false)(J$.R(389225, 'self', self, false, false)), J$.G(389257, J$.G(389249, J$.R(389241, 'self', self, false, false), 's'), 'haInterval')));
                                                        } catch (J$e) {
                                                            J$.Ex(393617, J$e);
                                                        } finally {
                                                            if (J$.Fr(393625))
                                                                continue jalangiLabel11;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                        } catch (J$e) {
                                            J$.Ex(393633, J$e);
                                        } finally {
                                            if (J$.Fr(393641))
                                                continue jalangiLabel12;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false));
                        } catch (J$e) {
                            J$.Ex(393649, J$e);
                        } finally {
                            if (J$.Fr(393657))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), inquireServerState, false, true);
            var cloneOptions = J$.W(389577, 'cloneOptions', J$.T(389569, function cloneOptions(options) {
                jalangiLabel14:
                    while (true) {
                        try {
                            J$.Fe(389529, arguments.callee, this, arguments);
                            arguments = J$.N(389537, 'arguments', arguments, true, false, false);
                            options = J$.N(389545, 'options', options, true, false, false);
                            J$.N(389553, 'opts', opts, false, false, false);
                            J$.N(389561, 'name', name, false, false, false);
                            var opts = J$.W(389433, 'opts', J$.T(389425, {}, 11, false), opts, false, false);
                            for (var name in J$.H(389497, J$.R(389441, 'options', options, false, false))) {
                                J$.N(389505, 'name', name, false, true, false);
                                {
                                    {
                                        J$.P(389489, J$.R(389449, 'opts', opts, false, false), J$.R(389457, 'name', name, false, false), J$.G(389481, J$.R(389465, 'options', options, false, false), J$.R(389473, 'name', name, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(389521, J$.R(389513, 'opts', opts, false, false));
                        } catch (J$e) {
                            J$.Ex(393665, J$e);
                        } finally {
                            if (J$.Fr(393673))
                                continue jalangiLabel14;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), cloneOptions, false, true);
            var SessionMixins = J$.W(391937, 'SessionMixins', J$.T(391929, {
                endSessions: J$.T(391921, function endSessions(sessions, callback) {
                    jalangiLabel26:
                        while (true) {
                            try {
                                J$.Fe(391889, arguments.callee, this, arguments);
                                arguments = J$.N(391897, 'arguments', arguments, true, false, false);
                                sessions = J$.N(391905, 'sessions', sessions, true, false, false);
                                callback = J$.N(391913, 'callback', callback, true, false, false);
                                if (J$.C(24240, J$.U(24410, '!', J$.M(391737, J$.I(typeof Array === 'undefined' ? Array = J$.R(391721, 'Array', undefined, true, true) : Array = J$.R(391721, 'Array', Array, true, true)), 'isArray', false)(J$.R(391729, 'sessions', sessions, false, false))))) {
                                    sessions = J$.W(391761, 'sessions', J$.T(391753, [J$.R(391745, 'sessions', sessions, false, false)], 10, false), sessions, false, false);
                                }
                                J$.M(391881, J$.R(391769, 'this', this, false, false), 'command', false)(J$.T(391777, 'admin.$cmd', 21, false), J$.T(391793, { endSessions: J$.R(391785, 'sessions', sessions, false, false) }, 11, false), J$.T(391817, { readPreference: J$.G(391809, J$.R(391801, 'ReadPreference', ReadPreference, false, true), 'primaryPreferred') }, 11, false), J$.T(391873, function () {
                                    jalangiLabel25:
                                        while (true) {
                                            try {
                                                J$.Fe(391857, arguments.callee, this, arguments);
                                                arguments = J$.N(391865, 'arguments', arguments, true, false, false);
                                                if (J$.C(24248, J$.B(24426, '===', J$.U(24418, 'typeof', J$.R(391825, 'callback', callback, false, false)), J$.T(391833, 'function', 21, false))))
                                                    J$.F(391849, J$.R(391841, 'callback', callback, false, false), false)();
                                            } catch (J$e) {
                                                J$.Ex(393841, J$e);
                                            } finally {
                                                if (J$.Fr(393849))
                                                    continue jalangiLabel25;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false));
                            } catch (J$e) {
                                J$.Ex(393857, J$e);
                            } finally {
                                if (J$.Fr(393865))
                                    continue jalangiLabel26;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false)
            }, 11, false), SessionMixins, false, true);
            var RETRYABLE_WIRE_VERSION = J$.W(392145, 'RETRYABLE_WIRE_VERSION', J$.T(392137, 6, 22, false), RETRYABLE_WIRE_VERSION, false, true);
            var isRetryableWritesSupported = J$.W(392361, 'isRetryableWritesSupported', J$.T(392353, function isRetryableWritesSupported(topology) {
                jalangiLabel28:
                    while (true) {
                        try {
                            J$.Fe(392321, arguments.callee, this, arguments);
                            arguments = J$.N(392329, 'arguments', arguments, true, false, false);
                            topology = J$.N(392337, 'topology', topology, true, false, false);
                            J$.N(392345, 'maxWireVersion', maxWireVersion, false, false, false);
                            var maxWireVersion = J$.W(392177, 'maxWireVersion', J$.G(392169, J$.M(392161, J$.R(392153, 'topology', topology, false, false), 'lastIsMaster', false)(), 'maxWireVersion'), maxWireVersion, false, false);
                            if (J$.C(24280, J$.B(24450, '<', J$.R(392185, 'maxWireVersion', maxWireVersion, false, false), J$.R(392193, 'RETRYABLE_WIRE_VERSION', RETRYABLE_WIRE_VERSION, false, true)))) {
                                return J$.Rt(392209, J$.T(392201, false, 23, false));
                            }
                            if (J$.C(24288, J$.U(24458, '!', J$.G(392225, J$.R(392217, 'topology', topology, false, false), 'logicalSessionTimeoutMinutes')))) {
                                return J$.Rt(392241, J$.T(392233, false, 23, false));
                            }
                            if (J$.C(24296, J$.B(24466, '===', J$.F(392265, J$.R(392249, 'topologyType', topologyType, false, true), false)(J$.R(392257, 'topology', topology, false, false)), J$.G(392281, J$.R(392273, 'TopologyType', TopologyType, false, true), 'Single')))) {
                                return J$.Rt(392297, J$.T(392289, false, 23, false));
                            }
                            return J$.Rt(392313, J$.T(392305, true, 23, false));
                        } catch (J$e) {
                            J$.Ex(393889, J$e);
                        } finally {
                            if (J$.Fr(393897))
                                continue jalangiLabel28;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), isRetryableWritesSupported, false, true);
            var MMAPv1_RETRY_WRITES_ERROR_MESSAGE = J$.W(392377, 'MMAPv1_RETRY_WRITES_ERROR_MESSAGE', J$.T(392369, 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.', 21, false), MMAPv1_RETRY_WRITES_ERROR_MESSAGE, false, true);
            J$.P(392585, J$.G(392569, J$.I(typeof module === 'undefined' ? module = J$.R(392561, 'module', undefined, true, true) : module = J$.R(392561, 'module', module, true, true)), 'exports'), 'SessionMixins', J$.R(392577, 'SessionMixins', SessionMixins, false, true));
            J$.P(392617, J$.G(392601, J$.I(typeof module === 'undefined' ? module = J$.R(392593, 'module', undefined, true, true) : module = J$.R(392593, 'module', module, true, true)), 'exports'), 'resolveClusterTime', J$.R(392609, 'resolveClusterTime', resolveClusterTime, false, true));
            J$.P(392649, J$.G(392633, J$.I(typeof module === 'undefined' ? module = J$.R(392625, 'module', undefined, true, true) : module = J$.R(392625, 'module', module, true, true)), 'exports'), 'inquireServerState', J$.R(392641, 'inquireServerState', inquireServerState, false, true));
            J$.P(392681, J$.G(392665, J$.I(typeof module === 'undefined' ? module = J$.R(392657, 'module', undefined, true, true) : module = J$.R(392657, 'module', module, true, true)), 'exports'), 'getTopologyType', J$.R(392673, 'getTopologyType', getTopologyType, false, true));
            J$.P(392713, J$.G(392697, J$.I(typeof module === 'undefined' ? module = J$.R(392689, 'module', undefined, true, true) : module = J$.R(392689, 'module', module, true, true)), 'exports'), 'emitServerDescriptionChanged', J$.R(392705, 'emitServerDescriptionChanged', emitServerDescriptionChanged, false, true));
            J$.P(392745, J$.G(392729, J$.I(typeof module === 'undefined' ? module = J$.R(392721, 'module', undefined, true, true) : module = J$.R(392721, 'module', module, true, true)), 'exports'), 'emitTopologyDescriptionChanged', J$.R(392737, 'emitTopologyDescriptionChanged', emitTopologyDescriptionChanged, false, true));
            J$.P(392777, J$.G(392761, J$.I(typeof module === 'undefined' ? module = J$.R(392753, 'module', undefined, true, true) : module = J$.R(392753, 'module', module, true, true)), 'exports'), 'cloneOptions', J$.R(392769, 'cloneOptions', cloneOptions, false, true));
            J$.P(392809, J$.G(392793, J$.I(typeof module === 'undefined' ? module = J$.R(392785, 'module', undefined, true, true) : module = J$.R(392785, 'module', module, true, true)), 'exports'), 'createClientInfo', J$.R(392801, 'createClientInfo', createClientInfo, false, true));
            J$.P(392841, J$.G(392825, J$.I(typeof module === 'undefined' ? module = J$.R(392817, 'module', undefined, true, true) : module = J$.R(392817, 'module', module, true, true)), 'exports'), 'createCompressionInfo', J$.R(392833, 'createCompressionInfo', createCompressionInfo, false, true));
            J$.P(392873, J$.G(392857, J$.I(typeof module === 'undefined' ? module = J$.R(392849, 'module', undefined, true, true) : module = J$.R(392849, 'module', module, true, true)), 'exports'), 'clone', J$.R(392865, 'clone', clone, false, true));
            J$.P(392905, J$.G(392889, J$.I(typeof module === 'undefined' ? module = J$.R(392881, 'module', undefined, true, true) : module = J$.R(392881, 'module', module, true, true)), 'exports'), 'diff', J$.R(392897, 'diff', diff, false, true));
            J$.P(392937, J$.G(392921, J$.I(typeof module === 'undefined' ? module = J$.R(392913, 'module', undefined, true, true) : module = J$.R(392913, 'module', module, true, true)), 'exports'), 'Interval', J$.R(392929, 'Interval', Interval, false, true));
            J$.P(392969, J$.G(392953, J$.I(typeof module === 'undefined' ? module = J$.R(392945, 'module', undefined, true, true) : module = J$.R(392945, 'module', module, true, true)), 'exports'), 'Timeout', J$.R(392961, 'Timeout', Timeout, false, true));
            J$.P(393001, J$.G(392985, J$.I(typeof module === 'undefined' ? module = J$.R(392977, 'module', undefined, true, true) : module = J$.R(392977, 'module', module, true, true)), 'exports'), 'isRetryableWritesSupported', J$.R(392993, 'isRetryableWritesSupported', isRetryableWritesSupported, false, true));
            J$.P(393033, J$.G(393017, J$.I(typeof module === 'undefined' ? module = J$.R(393009, 'module', undefined, true, true) : module = J$.R(393009, 'module', module, true, true)), 'exports'), 'getMMAPError', J$.R(393025, 'getMMAPError', getMMAPError, false, true));
            J$.P(393065, J$.G(393049, J$.I(typeof module === 'undefined' ? module = J$.R(393041, 'module', undefined, true, true) : module = J$.R(393041, 'module', module, true, true)), 'exports'), 'topologyType', J$.R(393057, 'topologyType', topologyType, false, true));
        } catch (J$e) {
            J$.Ex(393921, J$e);
        } finally {
            if (J$.Sr(393929))
                continue jalangiLabel30;
            else
                break jalangiLabel30;
        }
    }
// JALANGI DO NOT INSTRUMENT

