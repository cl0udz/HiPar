J$.noInstrEval = false;
jalangiLabel14:
    while (true) {
        try {
            J$.Se(22785, '/Users/ex1t/Desktop/nodeAnalysis/Goldie/tests/target/cache/node_modules/mongo-parse/mongoParse.js');
            function isInclusive(projection) {
                jalangiLabel5:
                    while (true) {
                        try {
                            J$.Fe(20553, arguments.callee, this, arguments);
                            arguments = J$.N(20561, 'arguments', arguments, true, false, false);
                            projection = J$.N(20569, 'projection', projection, true, false, false);
                            J$.N(20577, 'k', k, false, false, false);
                            for (var k in J$.H(20537, J$.R(20305, 'projection', projection, false, false))) {
                                J$.N(20545, 'k', k, false, true, false);
                                {
                                    {
                                        if (J$.C(744, J$.U(1154, '!', J$.G(20329, J$.R(20313, 'projection', projection, false, false), J$.R(20321, 'k', k, false, false))))) {
                                            if (J$.C(696, J$.B(1162, '!==', J$.R(20337, 'k', k, false, false), J$.T(20345, '_id', 21, false)))) {
                                                return J$.Rt(20361, J$.T(20353, false, 23, false));
                                            }
                                        } else if (J$.C(736, J$.B(1170, '===', J$.R(20369, 'k', k, false, false), J$.T(20377, '$meta', 21, false)))) {
                                            return J$.Rt(20393, J$.T(20385, true, 23, false));
                                        } else if (J$.C(728, J$.G(20417, J$.R(20401, 'projection', projection, false, false), J$.R(20409, 'k', k, false, false)))) {
                                            if (J$.C(720, J$.C(712, J$.B(1178, 'instanceof', J$.G(20441, J$.R(20425, 'projection', projection, false, false), J$.R(20433, 'k', k, false, false)), J$.I(typeof Object === 'undefined' ? Object = J$.R(20449, 'Object', undefined, true, true) : Object = J$.R(20449, 'Object', Object, true, true)))) ? J$.C(704, J$.B(1186, 'in', J$.T(20457, '$elemMatch', 21, false), J$.G(20481, J$.R(20465, 'projection', projection, false, false), J$.R(20473, 'k', k, false, false)))) ? J$._() : J$.B(1194, 'in', J$.T(20489, '$slice', 21, false), J$.G(20513, J$.R(20497, 'projection', projection, false, false), J$.R(20505, 'k', k, false, false))) : J$._())) {
                                            } else {
                                                return J$.Rt(20529, J$.T(20521, true, 23, false));
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(23033, J$e);
                        } finally {
                            if (J$.Fr(23041))
                                continue jalangiLabel5;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseQuery(query) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(21513, arguments.callee, this, arguments);
                            arguments = J$.N(21521, 'arguments', arguments, true, false, false);
                            query = J$.N(21529, 'query', query, true, false, false);
                            J$.N(21537, 'normalizedFunction', normalizedFunction, false, false, false);
                            J$.N(21545, 'parts', parts, false, false, false);
                            J$.N(21553, 'key', key, false, false, false);
                            J$.N(21561, 'operator', operator, false, false, false);
                            J$.N(21569, 'operands', operands, false, false, false);
                            J$.N(21577, 'innerParts', innerParts, false, false, false);
                            J$.N(21585, 'field', field, false, false, false);
                            J$.N(21593, 'innerOperator', innerOperator, false, false, false);
                            J$.N(21601, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(768, J$.C(752, J$.B(1202, 'instanceof', J$.R(20585, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(20593, 'Function', undefined, true, true) : Function = J$.R(20593, 'Function', Function, true, true)))) ? J$._() : J$.B(1218, '===', J$.U(1210, 'typeof', J$.R(20601, 'query', query, false, false)), J$.T(20609, 'string', 21, false)))) {
                                if (J$.C(760, J$.B(1226, 'instanceof', J$.R(20617, 'query', query, false, false), J$.I(typeof Function === 'undefined' ? Function = J$.R(20625, 'Function', undefined, true, true) : Function = J$.R(20625, 'Function', Function, true, true))))) {
                                    query = J$.W(20657, 'query', J$.B(1242, '+', J$.B(1234, '+', J$.T(20633, '(', 21, false), J$.R(20641, 'query', query, false, false)), J$.T(20649, ').call(this)', 21, false)), query, false, false);
                                }
                                var normalizedFunction = J$.W(20697, 'normalizedFunction', eval(J$.instrumentCode(J$.getConcrete(J$.B(1258, '+', J$.B(1250, '+', J$.T(20665, '(function() {var obj=this; return ', 21, false), J$.R(20673, 'query', query, false, false)), J$.T(20681, '})', 21, false))), {
                                    wrapProgram: false,
                                    isEval: true
                                }, 20689, J$.evalInvoked(J$.B(1266, '+', J$.B(1250, '+', J$.T(20665, '(function() {var obj=this; return ', 21, false), J$.R(20673, 'query', query, false, false)), J$.T(20681, '})', 21, false)), 20689)).code), normalizedFunction, false, false);
                                return J$.Rt(20753, J$.T(20745, [J$.F(20737, J$.R(20705, 'Part', Part, false, true), true)(J$.T(20713, undefined, 24, false), J$.T(20721, '$where', 21, false), J$.R(20729, 'normalizedFunction', normalizedFunction, false, false))], 10, false));
                            }
                            var parts = J$.W(20769, 'parts', J$.T(20761, [], 10, false), parts, false, false);
                            for (var key in J$.H(21481, J$.R(20777, 'query', query, false, false))) {
                                J$.N(21489, 'key', key, false, true, false);
                                {
                                    {
                                        if (J$.C(800, J$.B(1274, 'in', J$.R(20785, 'key', key, false, false), J$.R(20793, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true)))) {
                                            var operator = J$.W(20809, 'operator', J$.R(20801, 'key', key, false, false), operator, false, false);
                                            var operands = J$.W(20841, 'operands', J$.G(20833, J$.R(20817, 'query', query, false, false), J$.R(20825, 'key', key, false, false)), operands, false, false);
                                            var innerParts = J$.W(20857, 'innerParts', J$.T(20849, [], 10, false), innerParts, false, false);
                                            J$.M(20993, J$.R(20865, 'operands', operands, false, false), 'forEach', false)(J$.T(20985, function (operand) {
                                                jalangiLabel6:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(20961, arguments.callee, this, arguments);
                                                            arguments = J$.N(20969, 'arguments', arguments, true, false, false);
                                                            operand = J$.N(20977, 'operand', operand, true, false, false);
                                                            J$.M(20953, J$.R(20873, 'innerParts', innerParts, false, false), 'push', false)(J$.F(20945, J$.R(20881, 'Part', Part, false, true), true)(J$.T(20889, undefined, 24, false), J$.T(20897, '$and', 21, false), J$.T(20913, [J$.R(20905, 'operand', operand, false, false)], 10, false), J$.F(20937, J$.R(20921, 'parseQuery', parseQuery, false, true), false)(J$.R(20929, 'operand', operand, false, false))));
                                                        } catch (J$e) {
                                                            J$.Ex(23049, J$e);
                                                        } finally {
                                                            if (J$.Fr(23057))
                                                                continue jalangiLabel6;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false));
                                            J$.M(21073, J$.R(21001, 'parts', parts, false, false), 'push', false)(J$.F(21065, J$.R(21009, 'Part', Part, false, true), true)(J$.T(21017, undefined, 24, false), J$.R(21025, 'operator', operator, false, false), J$.G(21049, J$.R(21033, 'query', query, false, false), J$.R(21041, 'key', key, false, false)), J$.R(21057, 'innerParts', innerParts, false, false)));
                                        } else if (J$.C(792, J$.B(1282, 'in', J$.R(21081, 'key', key, false, false), J$.R(21089, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, true)))) {
                                            J$.M(21161, J$.R(21097, 'parts', parts, false, false), 'push', false)(J$.F(21153, J$.R(21105, 'Part', Part, false, true), true)(J$.T(21113, undefined, 24, false), J$.R(21121, 'key', key, false, false), J$.G(21145, J$.R(21129, 'query', query, false, false), J$.R(21137, 'key', key, false, false))));
                                        } else {
                                            var field = J$.W(21177, 'field', J$.R(21169, 'key', key, false, false), field, false, false);
                                            if (J$.C(784, J$.C(776, J$.F(21217, J$.R(21185, 'isObject', isObject, false, true), false)(J$.G(21209, J$.R(21193, 'query', query, false, false), J$.R(21201, 'key', key, false, false)))) ? J$.F(21257, J$.R(21225, 'fieldOperand', fieldOperand, false, true), false)(J$.G(21249, J$.R(21233, 'query', query, false, false), J$.R(21241, 'key', key, false, false))) : J$._())) {
                                                for (var innerOperator in J$.H(21393, J$.G(21281, J$.R(21265, 'query', query, false, false), J$.R(21273, 'key', key, false, false)))) {
                                                    J$.N(21401, 'innerOperator', innerOperator, false, true, false);
                                                    {
                                                        {
                                                            var innerOperand = J$.W(21329, 'innerOperand', J$.G(21321, J$.G(21305, J$.R(21289, 'query', query, false, false), J$.R(21297, 'key', key, false, false)), J$.R(21313, 'innerOperator', innerOperator, false, false)), innerOperand, false, false);
                                                            J$.M(21385, J$.R(21337, 'parts', parts, false, false), 'push', false)(J$.F(21377, J$.R(21345, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(21353, 'field', field, false, false), J$.R(21361, 'innerOperator', innerOperator, false, false), J$.R(21369, 'innerOperand', innerOperand, false, false)));
                                                        }
                                                    }
                                                }
                                            } else {
                                                J$.M(21473, J$.R(21409, 'parts', parts, false, false), 'push', false)(J$.F(21465, J$.R(21417, 'Part', Part, false, true), true)(J$.R(21425, 'field', field, false, false), J$.T(21433, undefined, 24, false), J$.G(21457, J$.R(21441, 'query', query, false, false), J$.R(21449, 'key', key, false, false))));
                                            }
                                        }
                                    }
                                }
                            }
                            return J$.Rt(21505, J$.R(21497, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(23065, J$e);
                        } finally {
                            if (J$.Fr(23073))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseFieldOperator(field, operator, operand) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(21841, arguments.callee, this, arguments);
                            arguments = J$.N(21849, 'arguments', arguments, true, false, false);
                            field = J$.N(21857, 'field', field, true, false, false);
                            operator = J$.N(21865, 'operator', operator, true, false, false);
                            operand = J$.N(21873, 'operand', operand, true, false, false);
                            J$.N(21881, 'elemMatchInfo', elemMatchInfo, false, false, false);
                            J$.N(21889, 'innerParts', innerParts, false, false, false);
                            J$.N(21897, 'implicitField', implicitField, false, false, false);
                            if (J$.C(816, J$.B(1290, '===', J$.R(21609, 'operator', operator, false, false), J$.T(21617, '$elemMatch', 21, false)))) {
                                var elemMatchInfo = J$.W(21649, 'elemMatchInfo', J$.F(21641, J$.R(21625, 'parseElemMatch', parseElemMatch, false, true), false)(J$.R(21633, 'operand', operand, false, false)), elemMatchInfo, false, false);
                                var innerParts = J$.W(21673, 'innerParts', J$.G(21665, J$.R(21657, 'elemMatchInfo', elemMatchInfo, false, false), 'parts'), innerParts, false, false);
                                var implicitField = J$.W(21697, 'implicitField', J$.G(21689, J$.R(21681, 'elemMatchInfo', elemMatchInfo, false, false), 'implicitField'), implicitField, false, false);
                            } else if (J$.C(808, J$.B(1298, '===', J$.R(21705, 'operator', operator, false, false), J$.T(21713, '$not', 21, false)))) {
                                var innerParts = J$.W(21753, 'innerParts', J$.F(21745, J$.R(21721, 'parseNot', parseNot, false, true), false)(J$.R(21729, 'field', field, false, false), J$.R(21737, 'operand', operand, false, false)), innerParts, false, false);
                            } else {
                                var innerParts = J$.W(21769, 'innerParts', J$.T(21761, [], 10, false), innerParts, false, false);
                            }
                            return J$.Rt(21833, J$.F(21825, J$.R(21777, 'Part', Part, false, true), true)(J$.R(21785, 'field', field, false, false), J$.R(21793, 'operator', operator, false, false), J$.R(21801, 'operand', operand, false, false), J$.R(21809, 'innerParts', innerParts, false, false), J$.R(21817, 'implicitField', implicitField, false, false)));
                        } catch (J$e) {
                            J$.Ex(23081, J$e);
                        } finally {
                            if (J$.Fr(23089))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseElemMatch(operand) {
                jalangiLabel9:
                    while (true) {
                        try {
                            J$.Fe(22137, arguments.callee, this, arguments);
                            arguments = J$.N(22145, 'arguments', arguments, true, false, false);
                            operand = J$.N(22153, 'operand', operand, true, false, false);
                            J$.N(22161, 'parts', parts, false, false, false);
                            J$.N(22169, 'operator', operator, false, false, false);
                            J$.N(22177, 'innerOperand', innerOperand, false, false, false);
                            if (J$.C(824, J$.F(21921, J$.R(21905, 'fieldOperand', fieldOperand, false, true), false)(J$.R(21913, 'operand', operand, false, false)))) {
                                var parts = J$.W(21937, 'parts', J$.T(21929, [], 10, false), parts, false, false);
                                for (var operator in J$.H(22041, J$.R(21945, 'operand', operand, false, false))) {
                                    J$.N(22049, 'operator', operator, false, true, false);
                                    {
                                        {
                                            var innerOperand = J$.W(21977, 'innerOperand', J$.G(21969, J$.R(21953, 'operand', operand, false, false), J$.R(21961, 'operator', operator, false, false)), innerOperand, false, false);
                                            J$.M(22033, J$.R(21985, 'parts', parts, false, false), 'push', false)(J$.F(22025, J$.R(21993, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.T(22001, undefined, 24, false), J$.R(22009, 'operator', operator, false, false), J$.R(22017, 'innerOperand', innerOperand, false, false)));
                                        }
                                    }
                                }
                                return J$.Rt(22081, J$.T(22073, {
                                    parts: J$.R(22057, 'parts', parts, false, false),
                                    implicitField: J$.T(22065, true, 23, false)
                                }, 11, false));
                            } else {
                                return J$.Rt(22129, J$.T(22121, {
                                    parts: J$.F(22105, J$.R(22089, 'parseQuery', parseQuery, false, true), false)(J$.R(22097, 'operand', operand, false, false)),
                                    implicitField: J$.T(22113, false, 23, false)
                                }, 11, false));
                            }
                        } catch (J$e) {
                            J$.Ex(23097, J$e);
                        } finally {
                            if (J$.Fr(23105))
                                continue jalangiLabel9;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parseNot(field, operand) {
                jalangiLabel10:
                    while (true) {
                        try {
                            J$.Fe(22329, arguments.callee, this, arguments);
                            arguments = J$.N(22337, 'arguments', arguments, true, false, false);
                            field = J$.N(22345, 'field', field, true, false, false);
                            operand = J$.N(22353, 'operand', operand, true, false, false);
                            J$.N(22361, 'parts', parts, false, false, false);
                            J$.N(22369, 'operator', operator, false, false, false);
                            J$.N(22377, 'subOperand', subOperand, false, false, false);
                            var parts = J$.W(22193, 'parts', J$.T(22185, [], 10, false), parts, false, false);
                            for (var operator in J$.H(22297, J$.R(22201, 'operand', operand, false, false))) {
                                J$.N(22305, 'operator', operator, false, true, false);
                                {
                                    {
                                        var subOperand = J$.W(22233, 'subOperand', J$.G(22225, J$.R(22209, 'operand', operand, false, false), J$.R(22217, 'operator', operator, false, false)), subOperand, false, false);
                                        J$.M(22289, J$.R(22241, 'parts', parts, false, false), 'push', false)(J$.F(22281, J$.R(22249, 'parseFieldOperator', parseFieldOperator, false, true), false)(J$.R(22257, 'field', field, false, false), J$.R(22265, 'operator', operator, false, false), J$.R(22273, 'subOperand', subOperand, false, false)));
                                    }
                                }
                            }
                            return J$.Rt(22321, J$.R(22313, 'parts', parts, false, false));
                        } catch (J$e) {
                            J$.Ex(23113, J$e);
                        } finally {
                            if (J$.Fr(23121))
                                continue jalangiLabel10;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fieldOperand(obj) {
                jalangiLabel11:
                    while (true) {
                        try {
                            J$.Fe(22465, arguments.callee, this, arguments);
                            arguments = J$.N(22473, 'arguments', arguments, true, false, false);
                            obj = J$.N(22481, 'obj', obj, true, false, false);
                            J$.N(22489, 'key', key, false, false, false);
                            for (var key in J$.H(22449, J$.R(22385, 'obj', obj, false, false))) {
                                J$.N(22457, 'key', key, false, true, false);
                                {
                                    {
                                        return J$.Rt(22441, J$.C(832, J$.B(1306, '===', J$.G(22409, J$.R(22393, 'key', key, false, false), J$.T(22401, 0, 22, false)), J$.T(22417, '$', 21, false))) ? J$.U(1322, '!', J$.B(1314, 'in', J$.R(22425, 'key', key, false, false), J$.R(22433, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, true))) : J$._());
                                    }
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(23129, J$e);
                        } finally {
                            if (J$.Fr(23137))
                                continue jalangiLabel11;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isObject(value) {
                jalangiLabel12:
                    while (true) {
                        try {
                            J$.Fe(22537, arguments.callee, this, arguments);
                            arguments = J$.N(22545, 'arguments', arguments, true, false, false);
                            value = J$.N(22553, 'value', value, true, false, false);
                            return J$.Rt(22529, J$.C(840, J$.B(1330, 'instanceof', J$.R(22497, 'value', value, false, false), J$.I(typeof Object === 'undefined' ? Object = J$.R(22505, 'Object', undefined, true, true) : Object = J$.R(22505, 'Object', Object, true, true)))) ? J$.U(1346, '!', J$.B(1338, 'instanceof', J$.R(22513, 'value', value, false, false), J$.I(typeof Array === 'undefined' ? Array = J$.R(22521, 'Array', undefined, true, true) : Array = J$.R(22521, 'Array', Array, true, true)))) : J$._());
                        } catch (J$e) {
                            J$.Ex(23145, J$e);
                        } finally {
                            if (J$.Fr(23153))
                                continue jalangiLabel12;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(22793, 'mapValues', mapValues, false, false, false);
            J$.N(22801, 'matches', matches, false, false, false);
            J$.N(22809, 'Parse', Parse, false, false, false);
            J$.N(22817, 'complexFieldIndependantOperators', complexFieldIndependantOperators, false, false, false);
            J$.N(22825, 'simpleFieldIndependantOperators', simpleFieldIndependantOperators, false, false, false);
            isInclusive = J$.N(22841, 'isInclusive', J$.T(22833, isInclusive, 12, false), true, false, false);
            parseQuery = J$.N(22857, 'parseQuery', J$.T(22849, parseQuery, 12, false), true, false, false);
            parseFieldOperator = J$.N(22873, 'parseFieldOperator', J$.T(22865, parseFieldOperator, 12, false), true, false, false);
            parseElemMatch = J$.N(22889, 'parseElemMatch', J$.T(22881, parseElemMatch, 12, false), true, false, false);
            parseNot = J$.N(22905, 'parseNot', J$.T(22897, parseNot, 12, false), true, false, false);
            fieldOperand = J$.N(22921, 'fieldOperand', J$.T(22913, fieldOperand, 12, false), true, false, false);
            isObject = J$.N(22937, 'isObject', J$.T(22929, isObject, 12, false), true, false, false);
            J$.N(22945, 'Part', Part, false, false, false);
            var mapValues = J$.W(19681, 'mapValues', J$.F(19673, J$.I(typeof require === 'undefined' ? require = J$.R(19657, 'require', undefined, true, true) : require = J$.R(19657, 'require', require, true, true)), false)(J$.T(19665, './mapValues', 21, false)), mapValues, false, true);
            var matches = J$.W(19713, 'matches', J$.F(19705, J$.I(typeof require === 'undefined' ? require = J$.R(19689, 'require', undefined, true, true) : require = J$.R(19689, 'require', require, true, true)), false)(J$.T(19697, './matches', 21, false)), matches, false, true);
            J$.P(19753, J$.I(typeof exports === 'undefined' ? exports = J$.R(19721, 'exports', undefined, true, true) : exports = J$.R(19721, 'exports', exports, true, true)), 'DotNotationPointers', J$.F(19745, J$.I(typeof require === 'undefined' ? require = J$.R(19729, 'require', undefined, true, true) : require = J$.R(19729, 'require', require, true, true)), false)(J$.T(19737, './DotNotationPointers', 21, false)));
            var Parse = J$.W(19833, 'Parse', J$.T(19825, function (mongoQuery) {
                jalangiLabel0:
                    while (true) {
                        try {
                            J$.Fe(19801, arguments.callee, this, arguments);
                            arguments = J$.N(19809, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(19817, 'mongoQuery', mongoQuery, true, false, false);
                            J$.P(19793, J$.R(19761, 'this', this, false, false), 'parts', J$.F(19785, J$.R(19769, 'parseQuery', parseQuery, false, true), false)(J$.R(19777, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(22953, J$e);
                        } finally {
                            if (J$.Fr(22961))
                                continue jalangiLabel0;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Parse, false, true);
            J$.P(19857, J$.R(19841, 'Parse', Parse, false, true), 'prototype', J$.T(19849, {}, 11, false));
            J$.P(19961, J$.G(19873, J$.R(19865, 'Parse', Parse, false, true), 'prototype'), 'mapValues', J$.T(19953, function (callback) {
                jalangiLabel1:
                    while (true) {
                        try {
                            J$.Fe(19929, arguments.callee, this, arguments);
                            arguments = J$.N(19937, 'arguments', arguments, true, false, false);
                            callback = J$.N(19945, 'callback', callback, true, false, false);
                            return J$.Rt(19921, J$.F(19913, J$.R(19881, 'mapValues', mapValues, false, true), false)(J$.G(19897, J$.R(19889, 'this', this, false, false), 'parts'), J$.R(19905, 'callback', callback, false, false)));
                        } catch (J$e) {
                            J$.Ex(22969, J$e);
                        } finally {
                            if (J$.Fr(22977))
                                continue jalangiLabel1;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(20065, J$.G(19977, J$.R(19969, 'Parse', Parse, false, true), 'prototype'), 'matches', J$.T(20057, function (document) {
                jalangiLabel2:
                    while (true) {
                        try {
                            J$.Fe(20033, arguments.callee, this, arguments);
                            arguments = J$.N(20041, 'arguments', arguments, true, false, false);
                            document = J$.N(20049, 'document', document, true, false, false);
                            return J$.Rt(20025, J$.F(20017, J$.R(19985, 'matches', matches, false, true), false)(J$.G(20001, J$.R(19993, 'this', this, false, false), 'parts'), J$.R(20009, 'document', document, false, false)));
                        } catch (J$e) {
                            J$.Ex(22985, J$e);
                        } finally {
                            if (J$.Fr(22993))
                                continue jalangiLabel2;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(20145, J$.I(typeof exports === 'undefined' ? exports = J$.R(20073, 'exports', undefined, true, true) : exports = J$.R(20073, 'exports', exports, true, true)), 'parse', J$.T(20137, function (mongoQuery) {
                jalangiLabel3:
                    while (true) {
                        try {
                            J$.Fe(20113, arguments.callee, this, arguments);
                            arguments = J$.N(20121, 'arguments', arguments, true, false, false);
                            mongoQuery = J$.N(20129, 'mongoQuery', mongoQuery, true, false, false);
                            return J$.Rt(20105, J$.F(20097, J$.R(20081, 'Parse', Parse, false, true), true)(J$.R(20089, 'mongoQuery', mongoQuery, false, false)));
                        } catch (J$e) {
                            J$.Ex(23001, J$e);
                        } finally {
                            if (J$.Fr(23009))
                                continue jalangiLabel3;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            J$.P(20225, J$.I(typeof exports === 'undefined' ? exports = J$.R(20153, 'exports', undefined, true, true) : exports = J$.R(20153, 'exports', exports, true, true)), 'inclusive', J$.T(20217, function (mongoProjection) {
                jalangiLabel4:
                    while (true) {
                        try {
                            J$.Fe(20193, arguments.callee, this, arguments);
                            arguments = J$.N(20201, 'arguments', arguments, true, false, false);
                            mongoProjection = J$.N(20209, 'mongoProjection', mongoProjection, true, false, false);
                            return J$.Rt(20185, J$.F(20177, J$.R(20161, 'isInclusive', isInclusive, false, true), false)(J$.R(20169, 'mongoProjection', mongoProjection, false, false)));
                        } catch (J$e) {
                            J$.Ex(23017, J$e);
                        } finally {
                            if (J$.Fr(23025))
                                continue jalangiLabel4;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false));
            var complexFieldIndependantOperators = J$.W(20265, 'complexFieldIndependantOperators', J$.T(20257, {
                $and: J$.T(20233, 1, 22, false),
                $or: J$.T(20241, 1, 22, false),
                $nor: J$.T(20249, 1, 22, false)
            }, 11, false), complexFieldIndependantOperators, false, true);
            var simpleFieldIndependantOperators = J$.W(20297, 'simpleFieldIndependantOperators', J$.T(20289, {
                $text: J$.T(20273, 1, 22, false),
                $comment: J$.T(20281, 1, 22, false)
            }, 11, false), simpleFieldIndependantOperators, false, true);
            var Part = J$.W(22777, 'Part', J$.T(22769, function (field, operator, operand, parts, implicitField) {
                jalangiLabel13:
                    while (true) {
                        try {
                            J$.Fe(22713, arguments.callee, this, arguments);
                            arguments = J$.N(22721, 'arguments', arguments, true, false, false);
                            field = J$.N(22729, 'field', field, true, false, false);
                            operator = J$.N(22737, 'operator', operator, true, false, false);
                            operand = J$.N(22745, 'operand', operand, true, false, false);
                            parts = J$.N(22753, 'parts', parts, true, false, false);
                            implicitField = J$.N(22761, 'implicitField', implicitField, true, false, false);
                            if (J$.C(848, J$.B(1354, '===', J$.R(22561, 'parts', parts, false, false), J$.T(22569, undefined, 24, false))))
                                parts = J$.W(22585, 'parts', J$.T(22577, [], 10, false), parts, false, false);
                            J$.P(22609, J$.R(22593, 'this', this, false, false), 'field', J$.R(22601, 'field', field, false, false));
                            J$.P(22633, J$.R(22617, 'this', this, false, false), 'operator', J$.R(22625, 'operator', operator, false, false));
                            J$.P(22657, J$.R(22641, 'this', this, false, false), 'operand', J$.R(22649, 'operand', operand, false, false));
                            J$.P(22681, J$.R(22665, 'this', this, false, false), 'parts', J$.R(22673, 'parts', parts, false, false));
                            J$.P(22705, J$.R(22689, 'this', this, false, false), 'implicitField', J$.R(22697, 'implicitField', implicitField, false, false));
                        } catch (J$e) {
                            J$.Ex(23161, J$e);
                        } finally {
                            if (J$.Fr(23169))
                                continue jalangiLabel13;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false), Part, false, true);
        } catch (J$e) {
            J$.Ex(23177, J$e);
        } finally {
            if (J$.Sr(23185))
                continue jalangiLabel14;
            else
                break jalangiLabel14;
        }
    }
// JALANGI DO NOT INSTRUMENT

