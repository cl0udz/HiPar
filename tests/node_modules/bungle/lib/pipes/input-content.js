import crypto from 'crypto';

import { BasePipe } from './base';


export class InputContentPipe extends BasePipe {
    constructor() {
        super(...arguments);
        this.terminal = false;
    }

    mtime(/*file*/) {
        const mtime = crypto.createHmac('md5', '');
        for (let name of Object.keys(this.state.remoteFiles)) {
            mtime.update(name);
            mtime.update('' + this.remoteFile(name).mtime);
        }
        return mtime.digest('hex');
    }

    async start() {
        if (!this.exists(this.config.filename)) {
            await this.fileAdd(this.config.filename);
            await this.fileChange(this.config.filename);
        } else {
            const file = this.state.localFiles[this.config.filename];
            if (file.mtime !== this.mtime()) {
                await this.fileChange(this.config.filename);
            }
        }
        return super.start();
    }

    async remoteAdd(file) {
        file.addCount++;

        if (this.terminal || !this.config.passthrough) {
            return file;
        } else {
            return super.remoteAdd(file);
        }
    }

    async remoteChange(file) {
        if (this.started) {
            await this.fileChange(this.config.filename);
        }

        if (this.terminal || !this.config.passthrough) {
            return file;
        } else {
            return super.remoteChange(file);
        }
    }

    async remoteUnlink(file) {
        file.addCount--;

        if (this.started) {
            await this.fileChange(this.config.filename);
        }

        if (this.terminal || !this.config.passthrough) {
            return file;
        } else {
            return super.remoteUnlink(file);
        }
    }
}
