'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var File = exports.File = function () {
    function File(pipe, obj) {
        _classCallCheck(this, File);

        this.pipe = pipe;

        this.name = obj.name;
        this.mtime = obj.mtime || null;
        this.addCount = obj.addCount || 0;
        this.origin = obj.origin || null;
        this.error = null;
        this.sources = obj.sources || [];
        this.promise = Promise.resolve();
    }

    _createClass(File, [{
        key: 'toJSON',
        value: function toJSON() {
            return {
                type: 'file',
                name: this.name,
                mtime: this.mtime,
                addCount: this.addCount,
                origin: this.origin,
                error: this.error,
                sources: this.sources
            };
        }
    }, {
        key: 'setError',
        value: function setError(error) {
            if (error) {
                this.pipe.log('error', 'BROKEN ' + this.name + '\n' + error);
            } else {
                if (this.error) {
                    this.pipe.log('info', 'FIXED ' + this.name);
                }
            }
            this.error = error;
        }
    }, {
        key: 'content',
        value: async function content() {
            try {
                var content = await this.pipe.generate(this);
                this.setError(null);
                return content;
            } catch (err) {
                this.setError(err);
                return '';
            }
        }
    }, {
        key: 'source',
        get: function get() {
            return this.pipe.remoteFile(this.sources[0]);
        }
    }], [{
        key: 'fromJSON',
        value: function fromJSON(pipe, obj) {
            return new File(pipe, obj);
        }
    }]);

    return File;
}();
