import path from 'path';
import { CLIEngine } from 'eslint';
import { ModPipe } from '../pipe';


export default class ExtPipe extends ModPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js'
        });

        this.defaultState({
            eslintrcs: {}
        });

        if (!/\.eslintrc/.test(this.config.pattern)) {
            this.config.pattern = `{${this.config.pattern},**/.eslintrc}`;
        }

        this.clis = {};

        for (let [name, content] of Object.entries(this.state.eslintrcs)) {
            this.clis[name] = this.createCLI(content);
        }
    }

    static schema() {
        return {
            description: 'Hint JavaScript resources.'
        };
    }

    createCLI(content) {
        const lint = JSON.parse(content);
        return new CLIEngine(lint);
    }

    findCLI(name) {
        const dirname = path.dirname(name);
        if (this.clis[dirname]) {
            return this.clis[dirname];
        } else if (dirname !== '.') {
            return this.findCLI(dirname);
        } else {
            return {};
        }
    }

    async remoteChange(file) {
        if (/\.eslintrc$/.test(file.name)) {
            try {
                const name = path.dirname(file.name);
                const content = await file.content();
                this.state.eslintrcs[name] = content;
                this.clis[name] = this.createCLI(content);
            } catch (err) {
                this.log('error', err);
            }
        } else {
            return super.remoteChange(file);
        }
    }

    async generate(file) {
        const content = (await file.source.content()).toString();
        const cli = this.findCLI(file.name);
        const report = cli.executeOnText(content, file.name);

        if (report.errorCount || report.warningCount) {
            this.log('warn', cli.getFormatter('stylish')(report.results));
        }
        return content;
    }
}
