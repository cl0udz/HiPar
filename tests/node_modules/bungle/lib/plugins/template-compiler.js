import handlebars from 'handlebars';
import { ModPipe } from '../pipe';
import { dedent } from '../utils';


export default class ExtPipe extends ModPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.hbs',
            context: {}
        });
    }

    static schema() {
        return {
            description: 'Compile templates (Handlebars) to html.',
            properties: {
                context: {
                    description:
                        'Context to compile templates with (default: {})',
                    type: 'object'
                }
            }
        };
    }

    rename(name) {
        return name.replace(/\.hbs$/, '.html');
    }

    async generate(file) {
        let source = (await file.source.content()).toString();

        if (this.config.context.modules) {
            source = source.replace(/{{contentFor "head"}}/, dedent`
                <link rel="stylesheet" href="app/styles/app.css" />
                <script src="loader-amd.js" data-main="app/app.js"></script>
            `);
        } else {
            source = source.replace(/{{contentFor "head"}}/, dedent`
                <link rel="stylesheet" href="main-built.css" />
                <script src="main-built.js"></script>
            `);
        }

        const template = handlebars.compile(source);
        return new Buffer(template(this.config.context));
    }
}
