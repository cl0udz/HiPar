import { parse } from 'babylon';
import generate from 'babel-generator';
import path from 'path';
import { Bundler } from 'esx-bundle';
import { InputContentPipe } from '../pipe';
import { readFile } from '../utils';


const polydir = path.dirname(path.dirname(require.resolve('babel-polyfill')));
const polyfile = path.join(polydir, 'dist', 'polyfill.js');


export default class ExtPipe extends InputContentPipe {
    constructor() {
        super(...arguments);

        this.defaultConfig({
            pattern: '**/*.js',
            main: 'main.js',
            filename: 'main-built.js',
            sourceMap: false
        });

        this.defaultState({
            esxbundle: {}
        });
    }

    static schema() {
        return {
            description: 'Bundle AMD compliant js modules.',
            properties: {
                main: {
                    description: 'Entry point module of the bundle ' +
                                 '(default: "main.js")',
                    type: 'string'
                },
                filename: {
                    description: 'Filename of the bundle ("mail-built.js")',
                    type: 'string'
                }
            },
            required: ['main', 'filename']
        };
    }

    async init() {
        this.bundler = new Bundler({
            main: this.config.main,
            out: this.config.filename,
            // TODO: see how to handle large files
            // state: this.state.esxbundle
            state: {}
        });
        return super.init();
    }

    async start() {
        if (!this.state.polyfill) {
            this.state.polyfill = await readFile(polyfile);
        }
        return super.start();
    }

    async generate(file) {
        if (this.config.debug) {
            this.log('debug', '#C# ' + this.config.filename);
        }

        for (let pathname of Object.keys(this.state.remoteFiles).sort()) {
            const file = this.remoteFile(pathname);
            const source = (await file.content()).toString();
            const ast = parse(source);
            this.bundler.setSourceFile(file.name, ast);
        }

        const bundle = this.bundler.bundle();
        this.log('verbose', `Bundling ${file.name}`);
        const code = generate(bundle, {
            comments: false,
            minified: true
        }, '').code;

        return this.state.polyfill + code;
    }

    async broadcast(req) {
        if (req.type === 'bower_config') {
            this.log('verbose', 'Got bower config');
            this.bundler.setPackages(req.config);
        }
    }
}
