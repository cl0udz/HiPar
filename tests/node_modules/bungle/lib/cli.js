'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Cli = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _runner = require('./runner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function list(val) {
    return val.split(',');
}

function clone(obj) {
    if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
        return obj;
    }
    var o = obj.constructor();
    for (var key in obj) {
        o[key] = clone(obj[key]);
    }
    return o;
}

function merge(o, n) {
    o = clone(o);
    n = clone(n);

    function f(o, n) {
        for (var k in n) {
            var v = n[k];
            if (k === '*') {
                for (var k2 in o) {
                    f(o[k2], clone(v));
                }
            } else {
                if (o[k] === null || _typeof(o[k]) !== 'object') {
                    o[k] = v;
                } else {
                    f(o[k], v);
                }
            }
        }
        return o;
    }
    return f(o, n);
}

function print(string) {
    process.stdout.write(string + '\n');
}

var Cli = exports.Cli = function () {
    function Cli(argv) {
        _classCallCheck(this, Cli);

        argv = argv || process.argv;

        this.runner = new _runner.Runner();
        this.args = _commander2.default.version(require(_path2.default.join(__dirname, '..', 'package.json')).version).usage('[options] <profile>').option('-c, --checkconfig', 'validate config file').option('-D, --debug', 'enable debug output').option('-e, --enable <pipe[,pipe]>', 'enable pipes', list, []).option('-d, --disable <pipe[,pipe]>', 'disable pipes', list, []).option('-r, --reset', 'reset all bungle caches').option('-L, --listpipes', 'show list available pipes').option('-H, --pipehelp <pipe|all>', 'show help for pipe', list).parse(argv);
    }

    _createClass(Cli, [{
        key: 'listprofiles',
        value: function listprofiles(profiles, current) {
            print('Profiles:');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.entries(profiles)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        name = _step$value[0],
                        profile = _step$value[1];

                    var indicator = name === current ? '*' : ' ';
                    var padded = '' + name + Array(20 - name.length).join(' ');
                    print('    ' + indicator + ' ' + padded + profile.description);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            print('');
        }
    }, {
        key: 'listpipes',
        value: function listpipes() {
            print('Available pipes:');
            var pipes = this.runner.loadPipes();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.entries(pipes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _step2$value = _slicedToArray(_step2.value, 2),
                        id = _step2$value[0],
                        pipe = _step2$value[1];

                    var padded = '' + id + Array(25 - id.length).join(' ');
                    var description = pipe.schema().description.split('\n')[0];
                    print('    ' + padded + description);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: 'pipehelp',
        value: function pipehelp(pipenames) {
            var pipes = this.runner.loadPipes(~pipenames.indexOf('all') ? null : pipenames);

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.entries(pipes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _step3$value = _slicedToArray(_step3.value, 2),
                        name = _step3$value[0],
                        pipe = _step3$value[1];

                    var schema = pipe.schema();
                    print('\n' + name + '\n' + Array(name.length + 1).join('=') + '\n');
                    print(schema.description);
                    print('\nOptions (*=required)\n--------------------');
                    var attrs = Object.keys(schema.properties || {}).sort();
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = attrs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var attr = _step4.value;

                            if (attr === 'pipe') {
                                continue;
                            }
                            var prop = schema.properties[attr];
                            var type = void 0;
                            if (prop.type === 'array') {
                                type = 'array of ' + prop.items.type + 's';
                            } else {
                                type = prop.type;
                            }
                            var req = ~(schema.required || []).indexOf(attr) ? '* ' : '  ';
                            attr = '' + attr + Array(16 - attr.length).join(' ');
                            type = '' + type + Array(20 - type.length).join(' ');
                            print('' + req + attr + type + prop.description);
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }

                    print('\n');
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: 'run',
        value: function run() {
            if (this.args.listpipes) {
                return this.listpipes(this.args.listpipes);
            } else if (this.args.pipehelp) {
                return this.pipehelp(this.args.pipehelp);
            } else {
                this.rundir = process.cwd();
                var config = this.load(this.rundir);
                if (!config) {
                    return;
                }

                config.bungle = config.bungle || {};
                config.pipes = config.pipes || {};
                config.profiles = config.profiles || {};

                var cliConfig = {
                    reset: !!this.args.reset,
                    checkconfig: !!this.args.checkconfig,
                    logger: {}
                };

                if (this.args.debug) {
                    cliConfig.logger.console = 'debug';
                }

                var bungle = merge(config.bungle, cliConfig);
                var profileName = this.args.args[0] || 'default';
                var profile = config.profiles[profileName];
                if (!profile) {
                    print('Profile ' + profileName + ' does not exist');
                    return;
                }
                var pipes = merge(config.pipes, profile.config);
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = Object.entries(pipes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var _step5$value = _slicedToArray(_step5.value, 2),
                            id = _step5$value[0],
                            pipeconfig = _step5$value[1];

                        var disableViaCfg = pipeconfig.enabled === false;
                        var disableViaCmd = ~this.args.disable.indexOf(id);
                        var enableViaCmd = ~this.args.enable.indexOf(id);
                        if (disableViaCfg || disableViaCmd && !enableViaCmd) {
                            pipes[id].enabled = false;
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                this.config = {
                    bungle: bungle,
                    pipes: pipes,
                    profiles: config.profiles
                };
                return this.runner.run(this.config);
            }
        }
    }, {
        key: 'load',
        value: function load(dir) {
            var configfile = _path2.default.join(dir, 'bungle.json');

            if (_fs2.default.existsSync(configfile)) {
                var data = _fs2.default.readFileSync(configfile, 'utf8');
                var config = void 0;
                try {
                    config = JSON.parse(data);
                } catch (err) {
                    print('Cannot parse bungle.json: ' + err.message);
                }
                process.chdir(dir);
                return config;
            } else {
                dir = _path2.default.dirname(dir);
                if (dir === '/') {
                    print('Cannot find a bungle.json config file');
                    return;
                }
                return this.load(dir);
            }
        }
    }]);

    return Cli;
}();
