{
  "name": "codem-transcode",
  "description": "Offline video transcoding using ffmpeg, with a small HTTP API.",
  "version": "0.4.4",
  "keywords": [
    "transcoding",
    "ffmpeg",
    "video"
  ],
  "homepage": "http://www.transcodem.com/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/madebyhiro/codem-transcode.git"
  },
  "bin": {
    "codem-transcode": "./bin/codem-transcode"
  },
  "engines": {
    "node": "~0.8.11"
  },
  "dependencies": {
    "sqlite3": "~2.1.5",
    "mkdirp": "~0.3.4",
    "express": "~2.5.11",
    "argsparser": "~0.0.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/madebyhiro/codem-transcode/blob/master/LICENSE.txt"
    }
  ],
  "readme": "# Codem-transcode\n\n* http://github.com/madebyhiro/codem-transcode\n\n## Description\n\nCodem-transcode is an offline video transcoder written in node.js. It\n\n1. Uses ffmpeg for transcoding\n2. Has a simple HTTP API\n3. Is mostly asynchronous\n\nCodem-transcode can be used in conjunction with Codem-schedule (https://github.com/madebyhiro/codem-schedule) for robust job scheduling and notifications or it can be used stand-alone, with or without a custom scheduler.\n\n## Requirements\n\n* ffmpeg (at least 0.10 and compiled/configured to your own taste)\n* sqlite3\n* node.js version 0.8.x (x>=11), with packages (if you use npm they will be installed automatically):\n    * sqlite3 (http://github.com/developmentseed/node-sqlite3)\n    * express (http://expressjs.com/)\n    * argsparser (http://github.com/kof/node-argsparser)\n    * mkdirp (https://github.com/substack/node-mkdirp)\n\n## Installation\n\nThe recommended installation procedure is to just use `npm` (http://npmjs.org/):\n\n    # npm install codem-transcode\n\nInstall it to your preferred location, or use the `-g` option to install it globally.\n\n## Starting\n\nWhen you install codem-transcode a script will be installed that allows you to start the transcoder. If you install it globally it should be in your `PATH`, otherwise, you can start the transcoder using:\n\n    # /PATH/TO/TRANSCODER/bin/codem-transcode\n    \nPlease check for yourself where `npm` installs your packages and script.\n\n## Configuration\n\nConfiguration is done by specifying a CLI option (`-c`) and pointing to a file containing a valid JSON object (http://www.json.org/). Note that node.js' JSON parser is fairly strict so make sure you get the syntax right. An example config is:\n\n    {\n        \"port\":            8080,\n        \"access_log\":      \"/var/log/access_log\",\n        \"database\":        \"/var/db/jobs.db\",\n        \"slots\":           8,\n        \"interface\":       \"127.0.0.1\",\n        \"encoder\":         \"ffmpeg\",\n        \"scratch_dir\":     \"/tmp\",\n        \"use_scratch_dir\": true,\n        \"ffprobe\":         null\n    }\n\nConfiguration options:\n\n* `port`; port to start server on, default `8080`\n* `interface`; which network interface to listen on, default `127.0.0.1` (only `localhost`)\n* `access_log`; location to store HTTP access log, default `/var/log/access_log`\n* `database`; location to store sqlite jobs DB, default `/var/db/jobs.db`\n* `slots`; number of transcoding slots to use (i.e. the maximum number of ffmpeg child processes), defaults to the number of CPUs/cores in your machine\n* `encoder`; path to the ffmpeg binary, if it is in your path specifying only `ffmpeg` is sufficient, defaults to `ffmpeg`\n* `scratch_dir`; temporary files are written here and moved into the destination directory after transcoding, defaults to `/tmp`\n* `use_scratch_dir`; if set to false temporary files will be written to the output directory of your job, for setups that don't require or are not able to use a separate `scratch_dir`. Defaults to `true` so if you don't want to disable the `scratch_dir` you can also omit this option from your config file.\n* `ffprobe`; path to the ffprobe binary, if it is in your path specifying only `ffprobe` is sufficient, defaults to `null`. Set this to a non-null value if you want to enable ffprobe support in the transcoder.\n\nNote that the default config will put the access_log and job database in `/var/log` and `var/db/` respectively. If you wish to put these in a different location please supply your own config. You can start the transcoder with your custom config using:\n\n    # /PATH/TO/TRANSCODER/bin/codem-transcode -c /PATH/TO/CONFIG/config.json\n\n## Usage\n\nAfter starting the server you can control it using most HTTP CLI tools, such as `curl` or `wget`. The HTTP API is as follows:\n\n* * *\nRequest: `POST /jobs`\n\nParameters (HTTP POST data, should be valid JSON object):\n\n    {\n        \"source_file\": \"/PATH/TO/INPUT/FILE.wmv\",\n        \"destination_file\":\"/PATH/TO/OUTPUT/FILE.mp4\",\n        \"encoder_options\": \"-acodec libfaac -ab 96k -ar 44100 -vcodec libx264 -vb 416k -s 320x180 -y -threads 0\",\n        \"callback_urls\": [\"http://example.com/notifications\"]\n    }\n\nResponses:\n\n* `202 Accepted` - Job accepted\n* `400 Bad Request` - Invalid request (format)\n* `503 Service Unavailable` - Transcoder not accepting jobs at the moment (all encoding slots are in use)\n\nThe `callback_urls` array is optional and is a list (array) of HTTP endpoints that should be notified once encoding finishes (due to the job being complete or some error condition). All other options are required (`source_file`, `destination_file` and `encoder_options`). Input and output files should be *absolute* paths.\n\n* * *\nRequest: `GET /jobs`\n\nResponses:\n\n* `200 OK` - Returns status of all active jobs\n\n* * *\nRequest: `GET /jobs/$JOB_ID`\n\nResponses:\n\n* `200 OK` - Returns status of job\n* `404 Not Found` - Job not found\n\n* * *\nRequest: `DELETE /jobs/$JOB_ID`\n\nCancels the job (if it is running) and deletes it from the database.\n\nResponses:\n\n* `200 OK` - Returns last known status of the job that is being deleted\n* `404 Not Found` - Job not found\n\n* * *\nRequest: `POST /probe`\n\nProbe a source file using `ffprobe` (if you have enabled it in the configuration). Output is a JSON object containing the `ffprobe` output.\n\nParameters (HTTP POST data, should be valid JSON object):\n\n    {\n        \"source_file\": \"/PATH/TO/INPUT/FILE.wmv\"\n    }\n\nResponses:\n\n* `200 OK` - Returns `ffprobe` output JSON-formatted\n* `400 Bad Request` - Returned if you attempt to probe a file when there is no path set to the `ffprobe` binary\n* `500 Internal Server Error` - Returned if there was an error while trying to probe, the output from `ffprobe` will be returned as well\n\n* * *\n## Examples\n\nCreate a new job, transcode \"video.wmv\" to \"video.mp4\" using the specified ffmpeg options (96kbit/s audio, 416kbit/s video, 320x180, use as much threads as possible). Requires libx264 support in your ffmpeg.\n\n    # curl -d '{\"source_file\": \"/tmp/video.wmv\",\"destination_file\":\"/tmp/video.mp4\",\"encoder_options\": \"-acodec libfaac -ab 96k -ar 44100 -vcodec libx264 -vb 416k -s 320x180 -y -threads 0\"}' http://localhost:8080/jobs\n\n    Output: {\"message\":\"The transcoder accepted your job.\",\"job_id\":\"d4b1dfebe6860839b2c21b70f35938d870011682\"}\n    \nCreate a new job, transcode \"video.mpg\" to \"video.webm\" using the specified ffmpeg options (total bitrate 512kbit/s, 320x180, use as much threads as possible). Requires libvpx support in your ffmpeg.\n\n    # curl -d '{\"source_file\": \"/tmp/video.mpg\",\"destination_file\":\"/tmp/video.webm\",\"encoder_options\": \"-vcodec libvpx -b 512000 -s 320x180 -acodec libvorbis -y -threads 0\"}' http://localhost:8080/jobs\n\n    Output: {\"message\":\"The transcoder accepted your job.\",\"job_id\":\"c26769be0955339db8f98580c212b7611cacf4dd\"}\n    \nGet status of all available encoder slots.\n\n    # curl http://localhost:8080/jobs\n\n    Output: {\"max_slots\":8,\"free_slots\":8,\"jobs\":[]}\n    \nor\n\n    Output: {\"max_slots\":8, \"free_slots\":7, \"jobs\":[{\"id\":\"da56da6012bda2ce775fa028f056873bcb29cb3b\", \"status\":\"processing\", \"progress\":0.12480252764612954, \"duration\":633, \"filesize\":39191346, \"message\":null}]}\n    \nGet full status of one job with id \"da56da6012bda2ce775fa028f056873bcb29cb3b\".\n\n    # curl http://localhost:8080/jobs/da56da6012bda2ce775fa028f056873bcb29cb3b\n    \n    Output: {\"id\":\"da56da6012bda2ce775fa028f056873bcb29cb3b\", \"status\":\"processing\", \"progress\":0.21800947867298578, \"duration\":633, \"filesize\":39191346, \"opts\":\"{\\\"source_file\\\":\\\"/shared/videos/asf/video.asf\\\", \\\"destination_file\\\":\\\"/shared/videos/mp4/journaal.mp4\\\", \\\"encoder_options\\\":\\\"-acodec libfaac -ab 96k -ar 44100 -vcodec libx264 -vb 416k -s 320x180 -y -threads 0\\\"}\", \"message\":null, \"created_at\":1304338160, \"updated_at\":1304338173}\n\nProbe a file using `ffprobe`.\n\n    # curl -d '{\"source_file\": \"/tmp/video.wmv\"}' http://localhost:8080/probe\n    \n    Output: {\"ffprobe\":{\"streams\":[ ... stream info ... ],\"format\":{ ... format info ... }}}}\n    \n## Tests\n\nAll tests are written using jasmine (via jasmine-node). Running them is as easy as:\n\n    # jasmine-node test\n\nMore specs coming soon.\n\n## Issues and support\n\nIf you run into any issues while using codem-transcode please use the Github issue tracker to see if it is a known problem\nor report it as a new one.\n\nWe also provide commercial support for codem-transcode (for bugs, features, configuration, etc.). If you are interested in\ncommercial support or are already receiving commercial support, feel free to contact us directly at hello@madebyhiro.com.\n\n## License\n\nCodem-transcode is released under the MIT license, see `LICENSE.txt`.",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/madebyhiro/codem-transcode/issues"
  },
  "_id": "codem-transcode@0.4.4",
  "_from": "codem-transcode@0.4.4"
}
